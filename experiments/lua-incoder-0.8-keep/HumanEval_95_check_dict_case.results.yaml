name: HumanEval_95_check_dict_case
language: lua
results:
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then return false end\n\
    \    for k, v in pairs(dict) do\n        if type(v) == \"string\" then\n     \
    \       if v ~= k:lower() or v ~= k:upper() then return false end\n        else\n\
    \            if type(v) ~= \"table\" then return false end\n            if not\
    \ check_dict_case(v) then return false end\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrfkdv32.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplrfkdv32.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if dict == nil then\n      return false\n\
    \   end\n   for key, value in pairs(dict) do\n      -- if type(value) == 'string'\
    \ then\n      --   if string.lower(value) == value then\n      --     return true\n\
    \      --   end\n      -- elseif type(value) == 'table' then\n      --   if check_dict_case(value)\
    \ then\n      --     return true\n      --   end\n      -- end\n   end\n   return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_8ogreo.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx_8ogreo.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tassert(type(dict)==\"table\")\n\tlocal\
    \ okay=true\n\tfor key in pairs(dict) do\n\t\tlocal lowercase=key:lower()\n\t\t\
    if lowercase:find(lowercase)==0 then\n\t\t\treturn false\n\t\telse\n\t\t\tlocal\
    \ uppercase=key:upper()\n\t\t\tif uppercase:find(uppercase)==0 then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\tend\n\tend\n\treturn okay\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiz_0ipfr.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiz_0ipfr.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local dict_size = #dict\n  if dict_size\
    \ == 0 then\n    return true\n  end\n  local true_keys = {}\n  local false_keys\
    \ = {}\n  local true_dict = {}\n  local false_dict = {}\n  for k, v in pairs(dict)\
    \ do\n    if type(k) ~= 'string' or type(v) ~= 'string' then\n      return false\n\
    \    end\n    local lower = k:lower()\n    local upper = k:upper()\n    \n   \
    \ if lower == k then\n      true_dict[lower] = true_dict[lower] or true_dict[k]\n\
    \      true_keys[lower] = true_keys[lower] or true_keys[k]\n    else\n      false_dict[upper]\
    \ = false_dict[upper] or false_dict[k]\n      false_keys[upper] = false_keys[upper]\
    \ or false_keys[k]\n    end\n  end\n  return true_keys == dict_size and false_keys\
    \ == dict_size\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7asbvtut.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7asbvtut.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lowercase_keys = true\n    local\
    \ uppercase_keys = true\n    local values = false\n    for key, value in pairs(dict)\
    \ do\n        if type(key) == \"string\" then\n            if key ~= key:lower()\
    \ or key ~= key:upper() then \n                lowercase_keys = false\n      \
    \      end\n        else\n            uppercase_keys = false\n        end\n  \
    \      -- We do not want to compare the values.\n        values = false\n    end\n\
    \    \n    return lowercase_keys or uppercase_keys or values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwb08toek.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwb08toek.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local first_letter = true\n  local string_key\n\
    \  for string_key,value in pairs(dict) do\n    if type(value) ~= \"string\" then\n\
    \      return false\n    end\n    if first_letter then\n      first_letter = false\n\
    \    else\n      if not string.lower(string_key) or not string.lower(value) then\n\
    \        return false\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7__3hdn.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg7__3hdn.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_upper = true\n    for k,v in\
    \ pairs(dict) do\n        if not is_upper and k~=string.lower(k) then\n      \
    \      return false\n        end\n        if not is_upper and k~=string.upper(k)\
    \ then\n            return false\n        end\n        if not is_upper and k~=string.gsub(k,\
    \ \"%S+\", \"\") then\n            return false\n        end\n        is_upper\
    \ = false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybb45ohg.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpybb45ohg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local key1, key2 = next(dict)\n  if not\
    \ key1 or not key2 then return false end\n  \n  local key1str = tostring(key1)\n\
    \  local key2str = tostring(key2)\n  \n  local key1low = tolower(key1str)\n  local\
    \ key2low = tolower(key2str)\n  \n  return (key1low == key2low) or (key1str ==\
    \ key2str)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg8lfbivx.lua:17:\
    \ attempt to call a nil value (global 'tolower')\nstack traceback:\n\t/tmp/tmpg8lfbivx.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpg8lfbivx.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local ret=true\n    for k, v in pairs(dict)\
    \ do\n        if type(v) ~= \"string\" then\n            ret=false\n         \
    \   break\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7nhjhtm.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps7nhjhtm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local count = 0\n    for key, value\
    \ in pairs(dict) do\n        if type(value) == 'string' then\n            count\
    \ = count + 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp57rfku_z.lua:30: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- Check length of dictionary\n  if #dict\
    \ == 0 then\n    return true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0c4rv42f.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local flag = true\n  for k,v in pairs(dict)\
    \ do\n    if not (type(k) == \"string\" or type(k) == \"number\") then \n    \
    \  flag = False\n    end\n  end\n  return flag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhfc1nlx.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkhfc1nlx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if type(dict) ~= \"table\" then return\
    \ false end\n   for k, v in pairs(dict) do\n      if type(k) ~= \"string\" or\
    \ k:upper() ~= k:lower() then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dw81u2p.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6dw81u2p.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if #dict == 0 then return false end\n\
    \  for key, value in pairs(dict) do\n    if type(value) == 'string' and tostring(value)\
    \ ~= tostring(value) then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1h0a5_i.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc1h0a5_i.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if not dict then\n    return false\n \
    \ end\n  for k, v in pairs(dict) do\n    local t = type(k)\n    if t == \"number\"\
    \ then\n      -- integer\n      if k > 0 or k < 0 then\n        return false\n\
    \      end\n    elseif t == \"string\" then\n      -- lower\n      if k:lower()\
    \ == k:lower() then\n        return false\n      end\n      -- upper\n      if\
    \ k:upper() == k:upper() then\n        return false\n      end\n    elseif t ~=\
    \ \"string\" and t ~= \"number\" then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf92zmmc.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxf92zmmc.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local ok,ok2 = false\n    for k,v in\
    \ pairs(dict) do\n        if type(k) == \"string\" and (k:lower() == k or k:upper()\
    \ == k) then\n            ok = true\n        elseif type(k) == \"number\" then\n\
    \            ok2 = true\n        elseif type(k) ~= \"string\" then\n         \
    \   ok2 = true\n        end\n    end\n    return ok and ok2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt8xf61y.lua:27:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdt8xf61y.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   assert(type(dict)==table or type(dict)==string,\
    \ \"check_dict_case() expects table or string.\")\n   assert(dict~=nil, \"check_dict_case()\
    \ expects non-empty table.\")\n   local ok = true\n   for k,v in pairs(dict) do\n\
    \      ok = ok and type(k)==string\n      ok = ok and type(v)==string\n   end\n\
    \   return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2lpxcye.lua:11:\
    \ check_dict_case() expects table or string.\nstack traceback:\n\t/tmp/tmpn2lpxcye.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpn2lpxcye.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- Write your code here\n  local ok, count\
    \  = true, 0\n  for k, v in pairs(dict) do\n    count = count + 1\n    ok = ok\
    \ and ( type(k) == \"string\" and type(v) == \"string\" ) or ok\n  end\n  return\
    \ not ok and count > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mia9anf.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4mia9anf.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local result\n    if #dict == 0 then\n\
    \        return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpodh3bzz1.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local upper = true\n    for key,value\
    \ in pairs(dict) do\n        if type(value) == 'string' and string.find(value,\
    \ \"^%s*$\") then\n            upper = false\n        else\n            return\
    \ false\n        end\n    end\n    if upper then\n        for key,value in pairs(dict)\
    \ do\n            if type(value) == 'string' and string.find(value, \"%s*$\")\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80tvdoye.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp80tvdoye.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if dict == nil then\n    return true\n\
    \  else\n    for k,v in pairs(dict) do\n      if not type(k) == \"string\" or\
    \ not type(v) == \"string\" then\n        return false\n      end\n    end\n \
    \   return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yqzk3m0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5yqzk3m0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    for k,v in pairs(dict) do\n        if type(k) ~= 'string' then return\
    \ false end\n        if k == 'Name' or k == 'Age' or k == 'City' then return false\
    \ end\n        if type(k) ~= 'string' or k:byte() ~= k:lower():byte() then return\
    \ false end\n        if type(v) ~= 'string' or v:byte() ~= v:upper():byte() then\
    \ return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplje6zlxo.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplje6zlxo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   assert(type(dict) == \"table\")\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphrnillh8.lua:25: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return true\n\
    \    end\n    \n    if type(dict) ~= 'table' then\n        return true\n    end\n\
    \    \n    for k,v in pairs(dict) do\n        if type(k) ~= 'string' then\n  \
    \          return true\n        end\n        \n        if k ~= tostring(k) then\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fu67lf8.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0fu67lf8.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local upper_dict = {}\n    local lower_dict\
    \ = {}\n    for k, v in pairs(dict) do\n        if k == upper_key(v) then\n  \
    \          upper_dict[k] = v\n        elseif k == lower_key(v) then\n        \
    \    lower_dict[k] = v\n        end\n    end\n    return #upper_dict == #lower_dict\
    \ and #upper_dict == 0 and #lower_dict == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9u00n7tu.lua:14:\
    \ attempt to call a nil value (global 'upper_key')\nstack traceback:\n\t/tmp/tmp9u00n7tu.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp9u00n7tu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local is_lower_case_or_upper_case = true\
    \ \n  for key, value in pairs(dict) do\n    if type(value) == \"string\" then\n\
    \      local is_upper_case_or_lower_case = false \n      \n      if key:len()\
    \ > 0 and key:sub(1,1) == \"_\" then\n        is_upper_case_or_lower_case = true\
    \ \n      elseif key:len() > 0 and key:sub(1,1) == \".\" then\n        is_upper_case_or_lower_case\
    \ = false \n      end\n      \n      if is_lower_case_or_upper_case ~= is_upper_case_or_lower_case\
    \ then\n        is_lower_case_or_upper_case = is_upper_case_or_lower_case \n \
    \     end\n    end\n  end\n  return is_lower_case_or_upper_case\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rsnd7i6.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6rsnd7i6.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal keys_to_check = {}\n\tfor k,v in\
    \ pairs(dict) do\n\t\tif type(k) ~= 'string' then return false end\n\t\tlocal\
    \ k = k:lower()\n\t\tif k == 'state' or k == 'state' then k = 'state' end\n\t\t\
    k = k:upper()\n\t\tif k == 'zip' or k == 'zip' then k = 'zip' end\n\t\ttable.insert(keys_to_check,\
    \ k)\n\tend\n\tfor k,v in pairs(keys_to_check) do\n\t\tif dict[v] == nil then\
    \ return false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_z6gj36p.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_z6gj36p.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local retVal = true\n    for key, value\
    \ in pairs(dict) do\n        if type(key) ~= \"string\" then\n            retVal\
    \ = false\n            break\n        end\n    end\n    return retVal\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp278j1pc.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp278j1pc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    for k,v in pairs(dict) do\n        if\
    \ type(k) ~= \"string\" or type(v) ~= \"string\" then return false end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur4_srtp.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpur4_srtp.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local res = False\n    for k,v in pairs(dict)\
    \ do\n        if type(k) == \"string\" then\n            if v:lower() == v then\n\
    \                res = true\n            elseif v:upper() == v then\n        \
    \        res = true\n            end\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1jebric.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1jebric.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict == nil then\n        return\
    \ false\n    end\n    local allStrings = true\n    for k,v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then\n            allStrings = false\n       \
    \     break\n        end\n        if tolower(k) ~= tolower(k) then\n         \
    \   allStrings = false\n            break\n        end\n    end\n    return allStrings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocnyewoa.lua:20:\
    \ attempt to call a nil value (global 'tolower')\nstack traceback:\n\t/tmp/tmpocnyewoa.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpocnyewoa.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   local all_keys_are_case_sensitive\n \
    \  all_keys_are_case_sensitive = true\n   for key, value in pairs(dict) do\n \
    \     if type(value) ~= \"string\" then all_keys_are_case_sensitive = false; break;\
    \ end\n   end\n   return all_keys_are_case_sensitive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0hl6nv1.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy0hl6nv1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if #dict == 0 then\n      return false\n\
    \   end\n   for k,v in pairs(dict) do\n      if type(k) ~= 'string' or type(v)\
    \ ~= 'string' then\n         return false\n      end\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iuuos7f.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_iuuos7f.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local ok = true\n    for k,v in pairs(dict) do\n        if type(k)\
    \ ~= \"string\" then\n            ok = false\n            break\n        end\n\
    \        if type(k) ~= \"string\" then\n            ok = false\n            break\n\
    \        end\n    end\n    return ok\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fw4zphi.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0fw4zphi.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local ok = true\n  local keys = dict:keys()\n\
    \  for i, k in ipairs(keys) do\n    if type(k) ~= 'string' then\n      ok = false\n\
    \      break\n    end\n  end\n  \n  return ok\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2cyro3f6.lua:12:\
    \ attempt to call a nil value (method 'keys')\nstack traceback:\n\t/tmp/tmp2cyro3f6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2cyro3f6.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local keys = {}\n    for k, v in pairs(dict) do \n        if type(k)\
    \ ~= \"string\" then\n            return false\n        end\n        k = k:lower()\n\
    \        if not k then\n            return false\n        end\n        k = k:upper()\n\
    \        if not k then\n            return false\n        end\n        keys[#keys+1]\
    \ = k\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacf4nxbx.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpacf4nxbx.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local upper_case_key = false\n  local\
    \ lower_case_key = false\n  for k, v in pairs(dict) do\n    if type(k) == \"string\"\
    \ then\n      if k:upper() == k then\n        upper_case_key = true\n      elseif\
    \ k:lower() == k then\n        lower_case_key = true\n      end\n    end\n  end\n\
    \  return upper_case_key and lower_case_key\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxx8iwj62.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxx8iwj62.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        error(\"Given\
    \ dictionary is empty\")\n    end\n    for key,value in pairs(dict) do\n     \
    \   if not is_string_lower(key) or not is_string_upper(key) then\n           \
    \ return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplco14b_m.lua:15:\
    \ attempt to call a nil value (global 'is_string_lower')\nstack traceback:\n\t\
    /tmp/tmplco14b_m.lua:15: in local 'candidate'\n\t/tmp/tmplco14b_m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if #dict == 0 then\n      return false\n\
    \   end\n   local keys = terralib.newlist()\n   for k,v in pairs(dict) do\n  \
    \    local k = k\n      if type(k) == 'number' then\n         k = tostring(k)\n\
    \      end\n      table.insert(keys, k)\n   end\n   table.sort(keys)\n   for _,\
    \ k in ipairs(keys) do\n      local v = dict[k]\n      if type(v) == 'number'\
    \ then\n         v = tostring(v)\n      end\n      if k ~= string.lower(k) or\
    \ v ~= string.lower(v) then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzo879ukt.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzo879ukt.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if #dict == 0 then\n      return true\n\
    \   end\n   local allkeys = {}\n   for key, value in pairs(dict) do\n      if\
    \ type(key) == \"string\" then\n         table.insert(allkeys, key)\n      else\n\
    \         if type(key[1]) == \"string\" then\n            table.insert(allkeys,\
    \ key[1])\n         end\n      end\n   end\n   if #allkeys == 0 then\n      return\
    \ true\n   else\n      for i = 1, #allkeys do\n         if allkeys[i]~=tostring(tolower(allkeys[i]))\
    \ then\n            return false\n         end\n      end\n      return true\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqcrtk45.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppqcrtk45.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if #dict == 0 then\n    return false\n\
    \  else\n    for k, v in pairs(dict) do\n      if type(k) ~= 'string' then\n \
    \       return false\n      end\n      if type(v) ~= 'string' then\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4sb_wgq.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt4sb_wgq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local ok = true\n  for key,value in pairs(dict)\
    \ do\n    local lower_case_key = key:lower()\n    local upper_case_key = key:upper()\n\
    \    if lower_case_key == upper_case_key then\n      ok = false\n    elseif lower_case_key\
    \ ~= upper_case_key then\n      ok = false\n    end\n  end\n  return ok\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre4sv_bq.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpre4sv_bq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if not dict then return false end\n  for\
    \ k, v in pairs(dict) do\n    if type(k) ~= 'string' then\n      return false\n\
    \    end\n    if type(k) == 'string' and k:upper() == k then return false end\n\
    \    if type(k) == 'string' and k:lower() == k then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyrqfw9su.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyrqfw9su.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- Base case\n  if #dict == 0 then\n \
    \   return true\n  end\n  -- Go through each key\n  for k, v in pairs(dict) do\n\
    \    -- If key is not in lower case, return false\n    if not v then\n      return\
    \ false\n    end\n    -- If key is not in upper case, return false\n    if not\
    \ v:upper() then\n      return false\n    end\n  end\n  -- Return true if all\
    \ keys are in lower case or all keys are in upper case\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfol25_h.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnfol25_h.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if dict:len() == 0 then return false end\n\
    \  local lower = true\n  for k, v in pairs(dict) do\n    if not lower and type(k)\
    \ ~= \"string\" or type(v) ~= \"string\" then \n      lower = false\n    end\n\
    \  end\n  return lower\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rq1drwc.lua:11:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp6rq1drwc.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp6rq1drwc.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict or #dict == 0 then \n  \
    \      return false\n    end\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' or type(v) ~= 'string' then return false end\n        local lower\
    \ = k:lower()\n        local upper = k:upper()\n        if lower == upper then\
    \ return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e1oa2rp.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1e1oa2rp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local all_keys = false\n  local all_keys_lower\
    \ = false\n  local all_keys_upper = false\n  for k,v in pairs(dict) do\n    --\
    \ First check if this key is a string.\n    if type(k) ~= 'string' then return\
    \ false end\n    -- Now check if this key is a string.\n    if type(k) == 'string'\
    \ then\n      all_keys = true\n      -- Check if all strings are in lower case.\n\
    \      all_keys_lower = all_keys_lower or k:lower() == k\n      -- Check if all\
    \ strings are in upper case.\n      all_keys_upper = all_keys_upper or k:upper()\
    \ == k\n    end\n  end\n  return all_keys and all_keys_lower and all_keys_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputdr14yv.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmputdr14yv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if next(dict) == nil then\n        return\
    \ false\n    end\n    for key, value in pairs(dict) do\n        if type(key) ~=\
    \ 'string' or type(key) ~= 'string' then\n            return false\n        end\n\
    \        if tonumber(key) == 0 or tonumber(key) == nil then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76f1wtuf.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp76f1wtuf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local bool = false\n    local count\
    \ = 1\n    for k,v in pairs(dict) do\n        if string.lower(k) ~= k then\n \
    \           bool = false\n        elseif string.upper(k) ~= k then\n         \
    \   bool = false\n        elseif k ~= \"STATE\" then\n            bool = false\n\
    \        elseif v ~= k then\n            bool = false\n        end\n        count\
    \ = count + 1\n    end\n    if count ~= #dict then\n        bool = false\n   \
    \ end\n    return bool\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn9fh6th.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcn9fh6th.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local ok, err = false\n  if #dict == 0\
    \ then\n    return ok, err\n  end\n  for k,v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' or type(v) ~= 'string' then\n      ok = false\n    end\n  end\n\
    \  return ok, err\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv53ttn3.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbv53ttn3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if #dict == 0 then return false end\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= 'string' then\n      return false\n\
    \    end\n    if type(v) ~= 'string' then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6_1_mym.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk6_1_mym.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local keys = {}\n    for k,v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' or type(v) ~= 'string' then\n           \
    \ return false\n        end\n        keys[k] = true\n    end\n    for key in pairs(keys)\
    \ do\n        if key ~= string.lower(key) or key ~= string.upper(key) then\n \
    \           return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag0youvr.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpag0youvr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal flag = true\n\tfor k,v in pairs(dict)\
    \ do\n\t\tif not (type(k) == \"string\" and type(v) == \"string\") then\n\t\t\t\
    flag = False\n\t\t\tbreak\n\t\tend\n\tend\n\treturn flag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8g28enea.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8g28enea.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  for k,v in pairs(dict) do\n    if type(k)\
    \ ~= \"string\" then\n      return false\n    end\n    if type(k) ~= \"string\"\
    \ then\n      return false\n    end\n  end\n  return true\nend\n</textarea></form>\n\
    \    <script>\n      var editor = CodeMirror.fromTextArea(document.getElementById(\"\
    code\"), {\n        lineNumbers: true,\n        matchBrackets: true,\n       \
    \ mode: \"text/x-lua\"\n      });\n    </script>\n    <p>\n      Themes are powered\
    \ by <a href=\"http://codemirror.net\" target=\"_blank\">CodeMirror</a>\n    \
    \  (also included in <a href=\"../theme/clouds.html\">Clouds</a>).\n    </p>\n\
    \    <p>\n      The W3C <a href=\"http://www.w3.org/Style/CSS/Test/CSS3/Selector/test.html\"\
    >Selector</a> tests\n      provide a framework for constructing simple selectors.\
    \ They build upon the following theory:\n    </p>\n    <ul>\n      <li>\n    \
    \    All <code>a</code>, <code>area</code>, <code>link</code>, <code>script</code>,\n\
    \        <code>style</code>, and <code>title</code> elements are determined to\
    \ match \n        <code>:link</code>, <code>:any-link</code>, <code>:visited</code>,\
    \ \n        <code>:local-link</code>, <code>:local</code> and <code>:target</code>\n\
    \        (when appropriate), as well as any value selected by <code>:target</code>.\n\
    \      </li>\n      <li>\n        Any <code>input</code> element with an <code>id</code>\
    \ attribute matching the\n        test string <code>[\\\\w-]+</code> (where <code>\\\
    \\w</code> matches any alphanumeric\n        character) selected by <code>:link</code>,\
    \ <code>:any-link</code>, \n        <code>:visited</code>, <code>:local-link</code>,\
    \ <code>:local</code>, \n        <code>:target</code>, or an <code>area</code>\
    \ element with a <code>name</code> attribute\n        that matches the test string\
    \ <code>[\\\\w-]+</code> selected by \n        <code>:any-link</code>, <code>:visited</code>,\
    \ <code>:local-link</code>, \n        <code>:local</code>, <code>:target</code>,\
    \ or <code>input</code>\n        with a <code>name</code> attribute that matches\
    \ the test string <code>[\\\\w-]+</code>\n        selected by <code>:link</code>,\
    \ <code>:any-link</code>, \n        <code>:visited</code>, <code>:local-link</code>,\
    \ <code>:local</code>, \n        <code>:target</code>.\n      </li>\n      <li>\n\
    \        Any <code>a</code>, <code>area</code>, <code>link</code>, <code>script</code>,\n\
    \        <code>style</code>, or <code>title</code> element selected by <code>:link</code>,\n\
    \        <code>:any-link</code>, <code>:visited</code>, <code>:local-link</code>,\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4b_xtrcl.lua:21: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if type(dict) == \"table\" then\n  \
    \      if #dict == 0 then\n            return false\n        end\n        for\
    \ k,v in pairs(dict) do\n            if type(k) ~= \"string\" then\n         \
    \       return false\n            end\n            if k:gsub(\"^%l\",\"\") ~=\
    \ k:gsub(\"^%U\",\"\") then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubl6qb3j.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpubl6qb3j.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local upper = string.rep(string.upper,\
    \ string.len(dict))\n    local lower = string.rep(string.lower, string.len(dict))\n\
    \    for key,value in pairs(dict) do\n        if type(key) ~= 'string' then\n\
    \            return false\n        end\n        if type(key) == lower then\n \
    \           if type(key) ~= upper then\n                return false\n       \
    \     end\n        elseif type(key) == upper then\n            if type(key) ~=\
    \ lower then\n                return false\n            end\n        else\n  \
    \          return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuqkziqae.lua:11:\
    \ bad argument #1 to 'len' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpuqkziqae.lua:11: in local 'candidate'\n\t/tmp/tmpuqkziqae.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' or k:upper() ~= k:lower():find(k:lower():upper()) == nil then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjc_b7oiy.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjc_b7oiy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if not dict then return false end\n  for\
    \ k,v in pairs(dict) do\n    if type(v) ~= 'string' then return false end\n  \
    \  local lower = k:lower()\n    local upper = k:upper()\n    if lower ~= upper\
    \ then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3cybpsa.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb3cybpsa.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local ok,msg\n    if not dict then\n\
    \        return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1frbu_ck.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal result = true\n\tfor k,v in pairs(dict)\
    \ do\n\t\tif not isstring(k) then\n\t\t\treturn false\n\t\telseif not isstring(v)\
    \ then\n\t\t\treturn false\n\t\telseif not k:lower():find(v:lower())~=0 then\n\
    \t\t\treturn false\n\t\telseif not k:upper():find(v:upper())~=0 then\n\t\t\treturn\
    \ false\n\t\telse\n\t\t\tresult = false\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudkk7c0a.lua:13:\
    \ attempt to call a nil value (global 'isstring')\nstack traceback:\n\t/tmp/tmpudkk7c0a.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpudkk7c0a.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  for k,v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' or k ~= k:lower() or k ~= k:upper() then\n      return false\n \
    \   end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqeghczs.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnqeghczs.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' or type(v) ~= 'string' then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gd5sg99.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2gd5sg99.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv51btr1x.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local result=true\n  local keys={}\n \
    \ for k,v in pairs(dict) do keys[k]=v end\n  for k,v in pairs(keys) do\n    if\
    \ type(v) == \"string\" then\n      if k:lower():find(v:lower()) ~= nil then\n\
    \        if k:upper():find(v:upper()) ~= nil then\n          result=false\n  \
    \      end\n      elseif k:upper():find(v:upper()) ~= nil then\n        result=false\n\
    \      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_mfo4wl.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd_mfo4wl.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local upper = dict\n  upper = upper\n\
    \  upper[#upper+1] = \"key\"\n  local lower = {}\n  local count = 0\n  for key,\
    \ value in pairs(dict) do\n    lower[#lower+1] = key\n  end\n  for key, value\
    \ in pairs(dict) do\n    if type(key) == 'string' then\n      count = count +\
    \ 1\n      if upper[key] ~= lower[key] then\n        return false\n      end\n\
    \    end\n  end\n  if count ~= #dict then\n    return false\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnqln539.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxnqln539.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if #dict == 0 then\n      return false\n\
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpczilztj9.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- Write your code here\n  local ok =\
    \ True\n  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n    \
    \  return false\n    end\n    if type(k) ~= \"string\" then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlpjq1xm.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvlpjq1xm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal keys={}\n\t-- Extract all the keys\
    \ into a vector.\n\tfor key in pairs(dict) do table.insert(keys, key) end\n\t\
    -- Return true if all keys are strings in lower case or all keys are strings in\
    \ upper case.\n\treturn (check_keys(keys) and check_keys(string.rep(\"upper\"\
    , #keys)) or (check_keys(keys) and check_keys(string.rep(\"lower\", #keys))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1t2b35j.lua:15:\
    \ attempt to call a nil value (global 'check_keys')\nstack traceback:\n\t/tmp/tmpq1t2b35j.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpq1t2b35j.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if #dict == 0 then return false end\n\
    \   for k, v in pairs(dict) do\n      if type(k) ~= 'string' or (type(v) ~= 'string'\
    \ and v) then return false end\n      if k ~= v:lower() then return false end\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fp8o7i9.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1fp8o7i9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   for key, value in pairs(dict) do\n  \
    \    if type(key) == \"string\" then\n         if string.lower(key) == key or\
    \ string.upper(key) == key then\n            return true\n         else\n    \
    \        return false\n         end\n      else\n         if type(value) == \"\
    string\" then\n            if string.lower(value) == value or string.upper(value)\
    \ == value then\n               return true\n            else\n              \
    \ return false\n            end\n         else\n            return false\n   \
    \      end\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmagvk_u.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkmagvk_u.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  for key,value in pairs(dict) do\n    if\
    \ type(key) == \"string\" then\n      if type(key) == \"string\" then\n      \
    \  local lower_key = key:lower()\n        local upper_key = key:upper()\n    \
    \    if lower_key == upper_key then\n          return true\n        end\n    \
    \  end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vswezoz.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6vswezoz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local check_dict = true\n    if dict\
    \ ~= nil then\n        for key in pairs(dict) do\n            if type(key) ~=\
    \ 'string' then\n                check_dict = false\n            end\n       \
    \ end\n    end\n    return check_dict\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2attuuda.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2attuuda.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  assert(type(dict)=='table')\n  for key,value\
    \ in pairs(dict) do\n    if not type(value) ==type(key) then\n      return false\n\
    \    end\n    if type(value) == 'string' and tostring(value) ~= tostring(key)\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4yyxnnc.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr4yyxnnc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    for key,value in pairs(dict) do\n  \
    \      if key ~= tostring(key) or key ~= tostring(value) then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpfdoo86.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphpfdoo86.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if dict == nil then return false end\n\
    \   for k in pairs(dict) do\n      if type(k) ~= 'string' then return false end\n\
    \      if type(k) == 'string' and k ~= k:lower() and k ~= k:upper() then return\
    \ false end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjd1baz8.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqjd1baz8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if dict == nil or #dict == 0 then\n \
    \     return false\n   elseif type(dict) == \"table\" then\n      for k,v in pairs(dict)\
    \ do\n         if type(k) ~= \"string\" or k:lower() ~= k then\n            return\
    \ false\n         end\n         if type(v) ~= \"string\" or v:upper() ~= v then\n\
    \            return false\n         end\n      end\n      return true\n   else\n\
    \      return false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_k5lpmg.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd_k5lpmg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal is_lowercase_keys = false\n\tlocal\
    \ is_uppercase_keys = false\n\t\n\t-- Check if dict is not empty.\n\tif not dict\
    \ then\n\t\treturn false\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb4rz4xb4.lua:31: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local function check_val(val)\n    \
    \    if type(val) ~= 'string' then\n            return false\n        end\n  \
    \      local lower = val:lower()\n        local upper = val:upper()\n        return\
    \ lower == upper or (lower == upper and lower ~= '')\n    end\n    local function\
    \ check_keys(keys)\n        if type(keys) ~= 'table' then\n            return\
    \ false\n        end\n        local l = #keys\n        for k = 1, l do\n     \
    \       local key = keys[k]\n            if not check_val(val) then\n        \
    \        return false\n            end\n        end\n        return l == 0\n \
    \   end\n    return check_keys(dict) and check_keys(dict)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb12f84r5.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb12f84r5.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local has_upper = false\n  local has_lower\
    \ = false\n  for k, v in pairs(dict) do\n    has_upper = has_upper or k:upper()\n\
    \    has_lower = has_lower or k:lower()\n  end\n  return not has_upper or not\
    \ has_lower or #dict == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcy2hhfi7.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcy2hhfi7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local retval = true\n  -- Check for empty\
    \ dictionary.\n  if #dict == 0 then\n    return retval\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwbh708fr.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if not dict then\n    return false\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] =\
    \ 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprghmbdq2.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal keys = {}\n\tfor k,v in pairs(dict)\
    \ do\n\t\ttable.insert(keys, k)\n\tend\n\tfor k,v in pairs(dict) do\n\t\tif type(k)\
    \ ~= 'string' or k:upper() ~= k:lower():lower() or k:upper() ~= k:lower():upper()\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxtu1_kc.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxtu1_kc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = {}\n    local upper = {}\n    for key, value in pairs(dict)\
    \ do\n        if type(value) == 'string' then\n            lower[tolower(key)]\
    \ = key\n            upper[toupper(key)] = key\n        else\n            if lower(value)\
    \ == lower(key) then\n                lower(value) = nil\n            else\n \
    \               lower(value) = nil\n                upper(value) = nil\n     \
    \       end\n        end\n    end\n    for key, value in pairs(dict) do\n    \
    \    if type(value) ~= 'string' and lower(value) == lower(key) then\n        \
    \    return false\n        elseif type(value) ~= 'string' and upper(value) ==\
    \ upper(key) then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpey3ruxlg.lua:22: syntax error near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local upperCase, lowerCase, noCase =\
    \ false, false, false\n    for key, value in pairs(dict) do\n        if value\
    \ ~= nil and type(value) == \"string\" then\n            if string.lower(value)\
    \ == value then\n                lowerCase = true\n            elseif string.upper(value)\
    \ == value then\n                upperCase = true\n            else\n        \
    \        noCase = true\n            end\n        end\n    end\n    return upperCase\
    \ and lowerCase and noCase\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwj2ysvq2.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwj2ysvq2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal keys = {}\n\tfor key in pairs(dict)\
    \ do\n\t\ttable.insert(keys, key)\n\tend\n\ttable.sort(keys)\n\tfor _, key in\
    \ pairs(keys) do\n\t\tlocal lower, upper = string.lower(key), string.upper(key)\n\
    \t\tif lower == upper then\n\t\t\treturn true\n\t\telseif lower ~= upper then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_z6k4j73.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_z6k4j73.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local retval = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= 'string' or k:upper() ~= k then\n    \
    \        retval = false\n            break\n        end\n    end\n    return retval\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cmt0xsr.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3cmt0xsr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lowercase_keys = {}\n    local\
    \ uppercase_keys = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp75k_qndk.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   local result = {}\n   for key, value\
    \ in pairs(dict) do\n      if not type(value)==\"string\" then\n         result[#result+1]\
    \ = {key}\n      else\n         if tonumber(value)==value or tonumber(value)==tonumber(value)\
    \ then\n            result[#result+1] = {key}\n         else\n            result[#result+1]\
    \ = {key, \"Wrong format for dictionary\"}\n         end\n      end\n   end\n\
    \   return #result == #dict:len() and true or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0tjq0xxv.lua:23:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp0tjq0xxv.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp0tjq0xxv.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    for k, v in pairs(dict) do\n        if v ~= nil and type(k) == type(v)\
    \ and v:lower() then\n            return true\n        end\n        if v ~= nil\
    \ and type(k) == type(v) and v:upper() then\n            return true\n       \
    \ end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptihbb6zo.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptihbb6zo.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   for k, v in pairs(dict) do\n      if\
    \ not is_string(k) or (not is_string(v) and v ~= k) then\n         return false\n\
    \      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes0h5kzu.lua:12:\
    \ attempt to call a nil value (global 'is_string')\nstack traceback:\n\t/tmp/tmpes0h5kzu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpes0h5kzu.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local all_strings = true\n  for key in\
    \ pairs(dict) do\n    if not (type(key) == \"string\" or type(key) == \"number\"\
    ) then\n      all_strings = false\n      break\n    end\n  end\n  return all_strings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhuki4w8.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphhuki4w8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   for key in pairs(dict) do\n      if type(key)\
    \ ~= \"string\" then\n         return false\n      else\n         local first_char\
    \ = string.sub(tostring(key), 1, 1)\n         if first_char == string.lower or\
    \ first_char == string.upper then\n            return true\n         else\n  \
    \          return false\n         end\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xucxor6.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1xucxor6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal keys = {}\n\tfor k, v in pairs(dict)\
    \ do table.insert(keys, k) end\n\tif #keys == 0 then return false end\n\tfor i\
    \ = 1, #keys do\n\t\tif not (type(keys[i]) ~= \"string\" or keys[i]:lower() ==\
    \ keys[i]) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifxgjipd.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpifxgjipd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local result = true\n    for k,v in\
    \ pairs(dict) do\n        if type(k) ~= \"string\" then\n            result =\
    \ false\n        end\n        if type(v) ~= \"string\" then\n            result\
    \ = false\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpup4xc0g0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpup4xc0g0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_in_lower_case = false\n   \
    \ local is_in_upper_case = false\n    local is_in_all_caps = false\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpok2p3ewq.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if dict == nil then\n      return false\n\
    \   end\n   for key, value in pairs(dict) do\n      if type(key) ~= \"string\"\
    \ then\n         return false\n      end\n      if type(key) ~= \"string\" and\
    \ type(key) ~= \"number\" then\n         return false\n      end\n      if type(key)\
    \ == \"string\" then\n         if key:lower() ~= key:upper() then\n          \
    \  return false\n         end\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfkyo0z_.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjfkyo0z_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if dict==nil then return false end\n \
    \ for k, v in pairs(dict) do\n    if type(k) ~= 'string' then return false end\n\
    \    if string.lower(k) ~= k then return false end\n    if string.upper(k) ~=\
    \ k then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ofzqs7b.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ofzqs7b.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    -- Write your code here.\n    local\
    \ count = 0\n    for key, value in pairs(dict) do\n        if type(value) ~= \"\
    string\" or value == \"\" then\n            count = count + 1\n        end\n \
    \   end\n    if count == 0 then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql704fq_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpql704fq_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local result = true\n  for key, val in\
    \ pairs(dict) do\n    if type(val) ~= \"string\" then\n      result = false\n\
    \      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncsiwmrx.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpncsiwmrx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    for key, value in pairs(dict) do\n \
    \       if type(key) ~= 'string' then\n            return false\n        end\n\
    \        if type(key) ~= 'string' then\n            return false\n        end\n\
    \        if string.lower(key) == key then\n            return true\n        end\n\
    \        if string.upper(key) == key then\n            return true\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplobt13p9.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplobt13p9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if #dict == 0 then\n      return true\n\
    \   elseif #dict == 1 then\n      return all(k == '' or k == '*' for k,v in pairs(dict))\n\
    \   else\n      return all(k == '' or k == '*' or check_dict_case(tostring(k)\
    \ and tostring(v) and \n         tostring(k) == tostring(v))\n               \
    \  for k,v in pairs(dict))\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk97lvyt2.lua:14: ')' expected near 'for'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local ok, err = check_condition(type(dict)\
    \ == \"table\", \"check_dict_case: dictionary is not a table\")\n    if not ok\
    \ then\n        return false, err\n    end\n    local new_dict = make_dict_with_case_insensitive_checks(dict)\n\
    \    local ok, err = check_condition(type(new_dict) == \"table\", \"check_dict_case:\
    \ dictionary has non-string keys\")\n    if not ok then\n        return false,\
    \ err\n    end\n    local all_keys_are_upper_case = true\n    local all_keys_are_lower_case\
    \ = true\n    for k, v in pairs(new_dict) do\n        if type(k) ~= \"string\"\
    \ then\n            return false, (\"check_dict_case: dictionary keys is not strings\
    \ in either upper or lower case: \" .. tostring(k) .. \", \" .. tostring(v))\n\
    \        end\n        local ok, err = check_condition((type(k) == \"string\")\
    \ and (not (string.lower(k) == k) and (not (string.upper(k) == k))), \"check_dict_case:\
    \ dictionary keys is not strings in either upper or lower case: \" .. tostring(k)\
    \ .. \", \" .. tostring(v))\n        if not ok then\n            return false,\
    \ err\n        end\n        if string.lower(v) ~= v then\n            all_keys_are_lower_case\
    \ = false\n        end\n        if string.upper(v) ~= v then\n            all_keys_are_upper_case\
    \ = false\n        end\n    end\n    if all_keys_are_upper_case and all_keys_are_lower_case\
    \ then\n        return true\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo5mob6z6.lua:11:\
    \ attempt to call a nil value (global 'check_condition')\nstack traceback:\n\t\
    /tmp/tmpo5mob6z6.lua:11: in local 'candidate'\n\t/tmp/tmpo5mob6z6.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local case_dict={}\n  local check_key=false\n\
    \  for key,value in pairs(dict) do\n    local case_key=key:lower()\n    local\
    \ case_value=value:lower()\n    if case_key~=case_value then\n      check_key=true\n\
    \      case_dict[case_key]=case_value\n    end\n  end\n  return check_key\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rt1w7vf.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4rt1w7vf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- Base case.\n  if dict == nil then\n\
    \    return true\n  end\n  -- Iterate over the keys of the dictionary and check\
    \ each key.\n  for k,v in pairs(dict) do\n    -- If the given dictionary entry\
    \ is a string, then all keys are in lower case\n    -- or all keys are in upper\
    \ case, return true. \n    if type(k) == 'string' then\n      -- Check each string\
    \ key against the given dictionary key. If the given \n      -- dictionary key\
    \ is a lower case string, the string key must be lower case,\n      -- else if\
    \ the given dictionary key is an upper case string, the string key must\n    \
    \  -- be upper case. \n      if type(k) ~= 'string' then\n        for k2,v2 in\
    \ pairs(k) do\n          -- If the given dictionary key is a lower case string,\
    \ the string key \n          -- must be lower case, else if the given dictionary\
    \ key is an upper \n          -- case string, the string key must be upper case.\n\
    \          if not (v2 == nil) then\n            if type(v2) == 'string' then\n\
    \              if lower(k) == lower(v2) then \n                return true\n \
    \             end\n              if upper(k) == upper(v2) then\n             \
    \   return true\n              end\n            end\n          end\n        end\n\
    \      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_9fpuox.lua:49:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy_9fpuox.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  for k, v in pairs(dict) do\n    if not\
    \ is_string(k) or not is_string(v) then\n      return false\n    end\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdlflmvpw.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local keys = setmetatable({}, {__mode = \"v\"})\n    for key,value\
    \ in pairs(dict) do\n        if type(value) == \"string\" then\n            if\
    \ string.find(key, \"^[a-z]$\") or string.find(key, \"^[A-Z]$\") then\n      \
    \          keys[key]:add(key)\n            end\n        end\n    end\n    for\
    \ key,value in pairs(keys) do\n        if #value > 1 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmx00ilq9.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmx00ilq9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict == nil then\n        return\
    \ false\n    end\n    for k, v in pairs(dict) do\n        if type(v) == \"string\"\
    \ then\n            if k ~= v then\n                return false\n           \
    \ end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzq742pk.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqzq742pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local count = 0\n  for k,v in pairs(dict)\
    \ do\n    if k:sub(1,1) ~= v:sub(1,1) then\n      count = count + 1\n    end\n\
    \  end\n  if count == 0 then\n    return true\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r6ord58.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8r6ord58.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local str_to_lower = string.gsub\n  local\
    \ str_to_upper = string.gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppg5u4r03.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   assert(type(dict) == \"table\" and #dict\
    \ > 0)\n   for k,v in pairs(dict) do\n      assert(type(k) == \"string\" and type(v)\
    \ == \"string\")\n      assert(#k <= 1 and #v <= 1)\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpic0as74m.lua:11:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpic0as74m.lua:11: in local 'candidate'\n\
    \t/tmp/tmpic0as74m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    -- base case\n    if #dict == 0 then\n\
    \        return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiw082hbh.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if #dict == 0 then\n      return false\n\
    \   end\n   for key, value in pairs(dict) do\n      if not (type(key) == \"string\"\
    \ or type(key) == \"number\" or type(value) == \"string\" or type(value) == \"\
    number\") then\n         return false\n      end\n   end\n   return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kpioh32.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8kpioh32.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if dict == nil then\n      return false\n\
    \   else\n      for k,v in pairs(dict) do\n         if type(k) == \"string\" and\
    \ type(v) == \"string\" then\n            if k:lower():find(v:lower()) == 0 then\n\
    \               return true\n            end\n         end\n      end\n      return\
    \ false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcc5j3anl.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcc5j3anl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local new_dict = {}\n    for k, v in\
    \ pairs(dict) do\n        if type(k) == \"string\" and k == tolower(k) then\n\
    \            new_dict[tolower(k)] = v\n        elseif type(k) == \"string\" and\
    \ k == toupper(k) then\n            new_dict[toupper(k)] = v\n        else\n \
    \           return false\n        end\n    end\n    return #new_dict == 0 and\
    \ true or false\nend\n</code>\nAnd now the function check_dict_key which takes\
    \ a dictionary as input and checks if the keys are all strings in lower case or\
    \ all strings in upper case:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwcenkox7.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if dict == nil or #dict == 0 then return\
    \ false end\n   for k, v in pairs(dict) do\n      if type(v) == \"string\" then\n\
    \         if v:lower() == v then\n            return true\n         elseif v:upper()\
    \ == v then\n            return true\n         else\n            return false\n\
    \         end\n      else\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2q1tnzh.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd2q1tnzh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local keys = table.keys(dict)\n    if\
    \ not #keys then\n        return false\n    end\n    local lower_keys = {}\n \
    \   local upper_keys = {}\n    for i, key in pairs(keys) do\n        local is_upper\
    \ = string.find(key, \"[A-Z]\", 1, true)\n        if is_upper then\n         \
    \   table.insert(upper_keys, key)\n        else\n            table.insert(lower_keys,\
    \ key)\n        end\n    end\n    return #lower_keys == #upper_keys\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpush69jkh.lua:11:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpush69jkh.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpush69jkh.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   local result = true\n   for k,v in pairs(dict)\
    \ do\n      if type(k) ~= \"string\" then\n         if type(k) ~= \"number\" then\n\
    \            result = false\n         end\n      end\n   end\n   return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7f5txed.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp7f5txed.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if #dict == 0 then\n    return false\n\
    \  end\n  local is_upper_case = false\n  for k, v in pairs(dict) do\n    local\
    \ is_string_upper_case = true\n    for letter in string.gsub(string.lower(v),\
    \ \"%c\", \"%c\") do\n      if not letter == letter then\n        is_string_upper_case\
    \ = false\n        break\n      end\n    end\n    if is_string_upper_case ~= is_upper_case\
    \ then\n      return false\n    end\n    if #k > 0 then\n      is_upper_case =\
    \ is_string_upper_case\n    end\n  end\n  return is_upper_case\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazm2yo7t.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazm2yo7t.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local uppercase = true\n  local lowercase\
    \ = true\n  for key, value in pairs(dict) do\n    uppercase, lowercase = check_dict_case(key),\
    \ check_dict_case(value)\n  end\n  return uppercase and lowercase\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9slb94vt.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp9slb94vt.lua:13: in upvalue 'check_dict_case'\n\t/tmp/tmp9slb94vt.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp9slb94vt.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_in_lower_case = true -- True\
    \ or False\n    local is_in_upper_case = true -- True or False\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8h6e_vky.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local result\n  for k, v in pairs(dict)\
    \ do\n    if type(k) ~= \"string\" then return false end\n    if k:lower():sub(1,1)\
    \ == k:upper():sub(1,1) then return true end\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbt7wdy8u.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbt7wdy8u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if #dict == 0 then\n    return true\n\
    \  end\n  for k, v in pairs(dict) do\n    local s = type(k) == 'string' and tostring(k)\
    \ or tostring(k)\n    local u = type(v) == 'string' and tostring(v) or tostring(v)\n\
    \    if s == u then\n      -- No need to check the values.\n    elseif s == 'string'\
    \ and u == 'string' then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47p3j5wk.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp47p3j5wk.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   local result = false\n   for k,v in pairs(dict)\
    \ do\n      if type(k) ~= \"string\" then\n         result = true\n         break\n\
    \      end\n      if type(k) ~= \"string\" and type(k) ~= \"number\" then\n  \
    \       result = true\n         break\n      end\n   end\n   return result\nend\n\
    \   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] =\
    \ 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeo7i8ynk.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeo7i8ynk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  for k,v in pairs(dict) do\n    if type(k)\
    \ ~= \"string\" then\n      if type(k) ~= \"number\" then\n        return false\n\
    \      else\n        return true\n      end\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4p52rjzy.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4p52rjzy.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local ok, err = pcall(function()\n \
    \       for k, v in pairs(dict) do\n            local key = tostring(k)\n    \
    \        if key == \"name\" then\n                if tonumber(k) ~= k then\n \
    \                   return false\n                end\n            else\n    \
    \            if tonumber(k) ~= tonumber(k) then\n                    return false\n\
    \                end\n            end\n        end\n        \n        return true\n\
    \    end)\n    if ok then return true end\n    print(\"check_dict_case: \" ..\
    \ err .. \" returned \" .. ok .. \" instead of true\")\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv5tuo76.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjv5tuo76.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local result = false\n  if #dict > 0 then\n\
    \    local key_count = 0\n    local upper = false\n    local lower = false\n \
    \   for key, value in pairs(dict) do\n      if type(value) == \"string\" then\n\
    \        if upper and lower then return false end\n        if key == upper then\
    \ upper = true else lower = true end\n      elseif type(value) == \"table\" then\n\
    \        if not check_dict_case(value) then return false end\n      else\n   \
    \     return false\n      end\n      key_count = key_count + 1\n    end\n    if\
    \ key_count == 1 then\n      if upper then lower = false else upper = false end\n\
    \      if lower and upper then return false end\n      result = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9ar70g9.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt9ar70g9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local keys = #dict\n    for i = 1,keys\
    \ do\n        if type(dict[i]) ~= \"string\" then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin7ozwbp.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpin7ozwbp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if #dict == 0 then\n      return false\n\
    \   end\n   local true = true\n   for key, val in pairs(dict) do\n      if type(key)\
    \ ~= \"string\" then\n         true = false\n      elseif key ~= tolower(key)\
    \ or key ~= toupper(key) then\n         true = false\n      elseif type(val) ~=\
    \ \"string\" then\n         true = false\n      elseif val ~= tolower(val) or\
    \ val ~= toupper(val) then\n         true = false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9vfrwg0i.lua:14: <name> expected near 'true'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   for k,v in pairs(dict) do\n      if type(k)\
    \ ~= \"string\" then\n         return false\n      end\n      if type(v) ~= \"\
    string\" then\n         return false\n      end\n   end\n   return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrafaknj.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbrafaknj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    \n    for key,value in pairs(dict) do\n        if not value then\n\
    \            return false\n        end\n        \n        if type(key) ~= 'string'\
    \ or type(key) ~= 'number' then\n            return false\n        end\n    end\n\
    \    \n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wagdw7r.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8wagdw7r.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local ok, ret = {}, {}\n    for k,v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            table.insert(ok,\
    \ k)\n        else\n            table.insert(ret, k)\n        end\n    end\n \
    \   return #ok == 0 and #ret == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w7yrp4u.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8w7yrp4u.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  for k,v in pairs(dict) do\n    if type(v)\
    \ == \"string\" then\n      if v:lower() == v then\n        return true\n    \
    \  end\n      if v:upper() == v then\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmannpx_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbmannpx_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local bool = #dict > 0 and false\n \
    \   for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n       \
    \     bool = bool and false\n        elseif v:lower() == v:upper() then\n    \
    \        bool = bool and true\n        else\n            bool = bool and false\n\
    \        end\n    end\n    return bool\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1o0ho6kq.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1o0ho6kq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local uppercase\n    local lowercase\n\
    \    uppercase = true\n    lowercase = true\n    for key, value in pairs(dict)\
    \ do\n        if type(value) == 'string' then\n            if uppercase and key\
    \ ~= tostring(toupper(key)) then\n                uppercase = false\n        \
    \    end\n            if lowercase and key ~= tostring(tolower(key)) then\n  \
    \              lowercase = false\n            end\n        else\n            uppercase\
    \ = false\n            lowercase = false\n        end\n    end\n    return uppercase\
    \ and lowercase\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvckskfeq.lua:17:\
    \ attempt to call a nil value (global 'toupper')\nstack traceback:\n\t/tmp/tmpvckskfeq.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpvckskfeq.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict[FIRST_KEY]~= FIRST_KEY or dict[LAST_KEY]~=\
    \ LAST_KEY then\n        return false\n    end\n    local keys = {}\n    for k,\
    \ v in pairs(dict) do\n        if k:sub(1,1) ~= LOWER_KEY:sub(1,1) then\n    \
    \        keys[#keys+1] = v\n        else\n            if not v:sub(2,2) ~= UPPER_KEY:sub(1,1)\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    if #keys == 0 then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_y9kzw44.lua:16:\
    \ attempt to index a nil value (global 'LOWER_KEY')\nstack traceback:\n\t/tmp/tmp_y9kzw44.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp_y9kzw44.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower, upper = false, false\n  for\
    \ key in pairs(dict) do lower = lower or #key==1 or (key:sub(1,1) == key:sub(2:end))\
    \ end\n  for key in pairs(dict) do upper = upper or #key==1 or (key:sub(1,1) ~=\
    \ key:sub(2:end)) end\n  return (lower or upper)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwxvb5fy4.lua:12: ')' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local first_key = next(dict)\n    local\
    \ second_key = next(dict)\n    if first_key ~= second_key then\n        return\
    \ false\n    end\n    local first_value = dict[first_key]\n    local second_value\
    \ = dict[second_key]\n    if type(first_value) == \"string\" and type(second_value)\
    \ == \"string\" then\n        return true\n    elseif type(first_value) == \"\
    string\" then\n        return false\n    elseif type(second_value) == \"string\"\
    \ then\n        return false\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnb45gs9.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsnb45gs9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    for _, v in ipairs(dict) do\n        if type(v) == \"string\" then\n\
    \            if v:lower() == v then\n                return true\n           \
    \ end\n        else\n            if v:upper() == v then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpx6su8w.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptpx6su8w.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if #dict == 0 then\n    return false\n\
    \  end\n  for k,v in pairs(dict) do\n    if not k:match(\"^[A-Z]\") then\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcca9d0e8.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcca9d0e8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tif dict == nil then return false end\n\
    \tfor key, value in pairs(dict) do\n\t\tif not check_dict_case(value) then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbr_4vyrg.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpbr_4vyrg.lua:12: in upvalue 'check_dict_case'\n\t/tmp/tmpbr_4vyrg.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbr_4vyrg.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local res = true\n  for k in pairs(dict)\
    \ do\n    if not is_string(k) then\n      res = false\n      break\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2cd9yujk.lua:13:\
    \ attempt to call a nil value (global 'is_string')\nstack traceback:\n\t/tmp/tmp2cd9yujk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2cd9yujk.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_first_key = true\n    local\
    \ is_upper_case = false\n    local is_lower_case = false\n    local is_ok = false\n\
    \    for k, v in pairs(dict) do\n        if is_first_key then\n            is_first_key\
    \ = false\n        else\n            is_ok = false\n        end\n        if is_upper_case\
    \ and tonumber(k) == k then\n            is_upper_case = false\n        elseif\
    \ is_lower_case and toupper(k) == k then\n            is_lower_case = false\n\
    \        else\n            is_ok = true\n        end\n        if is_ok then\n\
    \            if tonumber(v) == v then\n                is_ok = true\n        \
    \    elseif toupper(v) == v then\n                is_ok = true\n            else\n\
    \                is_ok = false\n            end\n        end\n    end\n    return\
    \ is_ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi7tj8rwt.lua:31:\
    \ attempt to call a nil value (global 'toupper')\nstack traceback:\n\t/tmp/tmpi7tj8rwt.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpi7tj8rwt.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local result=true\n  for k in pairs(dict)\
    \ do\n    local v=dict[k]\n    if type(k) ~= \"string\" then\n      if not (type(k)\
    \ ~= \"number\") then\n        result=false\n      end\n    end\n    if type(v)\
    \ == \"string\" then\n      if string.lower(v) ~= string.upper(v) then\n     \
    \   result=false\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl91h5uvx.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl91h5uvx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local function is_in_uppercase(s)\n\
    \        return string.match(s, \"%U\")\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptdt11ey0.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local result = true\n    for key, value\
    \ in pairs(dict) do\n        if type(key) == \"string\" then\n            if string.lower(key)\
    \ == key then\n                result = true\n            elseif string.upper(key)\
    \ == key then\n                result = true\n            else\n             \
    \   result = false\n            end\n        elseif type(value) == \"string\"\
    \ then\n            if string.lower(value) == value then\n                result\
    \ = true\n            elseif string.upper(value) == value then\n             \
    \   result = true\n            else\n                result = false\n        \
    \    end\n        else\n            result = false\n        end\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36vh63w_.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp36vh63w_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  local i = 0\n  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n\
    \      return false\n    end\n    if lower then\n      if k:lower() ~= k:upper()\
    \ then\n        upper = false\n        break\n      end\n    else\n      if k:upper()\
    \ ~= k:lower() then\n        lower = false\n        break\n      end\n    end\n\
    \    i = i + 1\n  end\n  return i == #dict and lower and upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhr3a7qs.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwhr3a7qs.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_lower = true\n    local is_upper\
    \ = true\n    for key, val in pairs(dict) do\n        if val == tostring(val)\
    \ then\n            is_lower = false\n        elseif tostring(val) == val then\n\
    \            is_upper = false\n        else\n            return false\n      \
    \  end\n    end\n    return is_lower and is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87xv1bzv.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp87xv1bzv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if not dict then\n    return false\n \
    \ end\n  for k, v in pairs(dict) do\n    if type(v) ~= 'string' then\n      return\
    \ false\n    end\n  end\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyea_acn.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcyea_acn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if type(dict) == 'table' then\n    if\
    \ #dict == 0 then\n      return false\n    end\n    for k, v in pairs(dict) do\n\
    \      if type(k) == 'string' then\n        if type(v) ~= 'string' then\n    \
    \      return false\n        end\n      else\n        if type(k) ~= 'string' then\n\
    \          return false\n        end\n        if type(v) ~= 'string' then\n  \
    \        return false\n        end\n      end\n    end\n    return true\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3k3qjwud.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3k3qjwud.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local t = {}\n    for k,v in pairs(dict)\
    \ do\n        t[tostring(k)]=tostring(v)\n    end\n    for k,v in pairs(t) do\n\
    \        if v == tostring(k) then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr4yhwog.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphr4yhwog.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal result = true\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif not type(k) == 'string' or not k or k:find(k) == 0 then\n\t\t\tresult\
    \ = false\n\t\t\tbreak\n\t\tend\n\t\tif not type(v) == 'string' or not v or v:find(v)\
    \ == 0 then\n\t\t\tresult = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyi6h6akl.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyi6h6akl.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if type(dict) == \"table\" then\n  \
    \      for k,v in pairs(dict) do\n            if type(k) == \"string\" and type(v)\
    \ == \"string\" then\n                local is_upper = k:upper()\n           \
    \     local is_lower = k:lower()\n                local is_upper_lower = is_upper\
    \ .. is_lower\n                if is_upper and is_lower == is_upper_lower then\n\
    \                    return true\n                else\n                    return\
    \ false\n                end\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrdg46h2.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjrdg46h2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local ok = true\n    for k,v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            ok = false\n        elseif\
    \ k:lower() ~= k:upper() then\n            ok = false\n        end\n    end\n\
    \    return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauqluuz4.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpauqluuz4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local isString = (type(dict) == \"table\"\
    ) \n                   and dict.__len__ \n                   and (type(dict) ==\
    \ \"table\" or type(dict) == \"userdata\")\n    if isString then\n        for\
    \ i = 1, dict.__len__ do\n            if type(dict[i]) ~= \"string\" then\n  \
    \              return false\n            end\n        end\n    else\n        for\
    \ i = 1, dict.__len__ do\n            if type(dict[i]) ~= \"number\" then\n  \
    \              return false\n            end\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzrobo5t.lua:21:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpwzrobo5t.lua:21: in\
    \ local 'candidate'\n\t/tmp/tmpwzrobo5t.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local has_upper = false\n    local has_lower\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        k = k:lower()\n        k = k:upper()\n\
    \        if k ~= k then\n            return false\n        end\n        if k ==\
    \ 'A' or k == 'B' then\n            return false\n        end\n        if k ==\
    \ 'LOWER' or k == 'UPPER' then\n            has_upper = true\n        else\n \
    \           has_lower = true\n        end\n    end\n    if has_upper and has_lower\
    \ then\n        return false\n    elseif has_upper then\n        return false\n\
    \    else\n        return true\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpju52fp8d.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpju52fp8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if dict:len() == 0 then return false end\n\
    \  for k, v in dict:items() do\n    if not (type(k) == 'string' and k:lower():find(v:lower()))\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpll55_eow.lua:11:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpll55_eow.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpll55_eow.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal result = true\n\tfor i, v in pairs(dict)\
    \ do\n\t\tif type(v) == 'string' then\n\t\t\tif not v:lower() == v then\n\t\t\t\
    \tresult = false\n\t\t\t\tbreak\n\t\t\tend\n\t\telse\n\t\t\tif not v:upper() ==\
    \ v then\n\t\t\t\tresult = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlsec84z.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjlsec84z.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if dict == nil then return false end\n\
    \   for _, v in pairs(dict) do\n      if type(v) ~= \"string\" then\n        \
    \ return false\n      end\n      if v:byte() == v:upper() then return false end\n\
    \      if v:byte() == v:lower() then return false end\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqspy6ppd.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqspy6ppd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  assert(type(dict) == \"table\")\n  for\
    \ k,v in pairs(dict) do\n    if type(k) == \"string\" then\n      if tostring(k)\
    \ ~= k:lower() then\n        return false\n      end\n    elseif type(k) == \"\
    number\" then\n      if tostring(k) ~= k:upper() then\n        return false\n\
    \      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstptkwc2.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpstptkwc2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if #dict == 0 then return false end\n\
    \   local lowerKeys = {}\n   for k, v in pairs(dict) do\n      if type(k) == \"\
    string\" then\n         if type(v) == \"string\" then lowerKeys[k] = true end\n\
    \      end\n   end\n   local upperKeys = {}\n   for k, v in pairs(dict) do\n \
    \     if type(k) == \"string\" then\n         if type(v) == \"string\" then\n\
    \            upperKeys[k] = true\n         end\n      end\n   end\n   if #lowerKeys\
    \ == #upperKeys then return true end\n   return false\nend\n</textarea></form>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphjua1eae.lua:29: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if dict==nil then\n      return false\n\
    \   end\n   for k, v in pairs(dict) do\n      if type(k) ~= 'string' or tostring(k)\
    \ ~= tostring(k) or k:upper() ~= k then\n         return false\n      end\n  \
    \ end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylp0cxo7.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpylp0cxo7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local case = nil\n  \n  for k,v in pairs(dict)\
    \ do\n    case = case or type(k) == \"string\" end\n    if case then return False\
    \ end\n    case = case or type(k) == \"number\" end\n    if case then return False\
    \ end\n  end\n  \n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_7t9mphl.lua:18: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if type(dict) == 'table' and #dict > 0\
    \ then\n    local t = {}\n    for k, v in pairs(dict) do\n      t[string.lower(k)]\
    \ = v\n    end\n    return check_dict_case(t)\n  else\n    return true\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafcu6kiw.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpafcu6kiw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local result = true\n  for k in pairs(dict)\
    \ do\n    local v = dict[k]\n    local case_is_upper = k == v:lower() or k ==\
    \ v:upper()\n    if not case_is_upper then\n      result = false\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfy7e3pa.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzfy7e3pa.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if #dict == 0 then return false end\n\
    \  for k,v in pairs(dict) do\n    if type(k) ~= \"string\" then return false end\n\
    \    if type(v) ~= \"string\" then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5bigi4u.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph5bigi4u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    -- Check that the given dictionary is\
    \ not empty\n    if not dict then return false end\n    -- Check the length of\
    \ the dictionary is correct\n    if not #dict == 1 then return false end\n   \
    \ -- Check that all the keys are strings in lower case\n    for key, value in\
    \ pairs(dict) do\n        if type(key) ~= \"string\" then return false end\n \
    \       if not key:lower() then return false end\n    end\n    -- Check that all\
    \ the keys are strings in upper case\n    for key, value in pairs(dict) do\n \
    \       if type(key) ~= \"string\" then return false end\n        if not key:upper()\
    \ then return false end\n    end\n    -- Passed all tests\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnrm5qo4.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbnrm5qo4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local dict_size = #dict\n  -- Empty dictionary?\n\
    \  if dict_size < 1 then\n    return true\n  end\n  -- All keys are strings?\n\
    \  if dict_size == 1 then\n    return true\n  end\n  -- All keys are strings in\
    \ lower case?\n  for k, v in pairs(dict) do\n    if not k:match(\"^%s+$\") then\n\
    \      return false\n    end\n  end\n  -- All keys are strings in upper case?\n\
    \  for k, v in pairs(dict) do\n    if k:upper():match(\"^%s+$\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxvy3l0u.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplxvy3l0u.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_upper, keys = true, nil\n \
    \   for i, k in pairs(dict) do\n        if type(k) ~= 'string' then is_upper =\
    \ false end\n        if keys == nil then keys = i end\n    end\n    return is_upper\
    \ and keys == nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsycfgklv.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsycfgklv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local ok = true\n    for key, value\
    \ in pairs(dict) do\n        if type(key) ~= 'string' then\n            return\
    \ false\n        end\n        if type(key) ~= 'string' or type(key) ~= 'string'\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptp146l07.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptp146l07.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local keys = {}\n  for k, v in pairs(dict)\
    \ do\n    if type(k) ~= \"string\" then\n      return false\n    end\n    if type(v)\
    \ ~= \"string\" then\n      return false\n    end\n    table.insert(keys, k)\n\
    \  end\n  -- Return true if all keys are strings in lower case or all keys are\
    \ strings in upper case.\n  return #keys == 0 or #keys == #dict and #keys == #string.join(keys,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzd5xsfp.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdzd5xsfp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  return #dict == 0 or\n    (#dict == 1\
    \ and\n      tostring(dict[1]):lower():find(tostring(dict[1]):upper():lower())\
    \ ~= 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzw8zuz4c.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzw8zuz4c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if type(dict) == \"table\" then\n  \
    \      local ok, val\n        for k,v in pairs(dict) do\n            local t =\
    \ type(k)\n            if t == \"string\" and (t == nil or t == \"number\" or\
    \ not k:match(upper)) then\n                ok = true\n            end\n     \
    \       if t == nil then\n                ok = false\n                break\n\
    \            end\n        end\n        return ok\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpipjy32iz.lua:15:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpipjy32iz.lua:15: in local 'candidate'\n\t/tmp/tmpipjy32iz.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   if dict == nil then\n      return false\n\
    \   end\n   for k,v in pairs(dict) do\n      if not (type(k) == \"string\" and\
    \ type(v) == \"string\") then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmwhdak1.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptmwhdak1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal is_upper_case_function = function(string)\
    \ return string.upper() ~= string end \n\tlocal is_lower_case_function = function(string)\
    \ return string.lower() ~= string end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpapntodoi.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local result=true\n  for k,v in pairs(dict)\
    \ do\n    if type(k)==\"string\" and type(v)==\"string\" then\n      if k:lower()\
    \ ~= v:lower() then\n        result=false\n        break\n      end\n    else\n\
    \      result=false\n      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2opo12l.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj2opo12l.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local dict_keys = {}\n    for k, v in\
    \ pairs(dict) do\n        dict_keys[#dict_keys + 1] = k\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcffmig8x.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local ok = true\n    for k,v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if string.lower(k) ~= k then\n            return false\n        end\n\
    \        if string.upper(k) ~= k then\n            return false\n        end\n\
    \    end\n    return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv87aben.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbv87aben.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- Base case\n  if dict == nil then return\
    \ false end\n  if type(dict) ~= 'table' then return false end\n  -- All keys need\
    \ to be strings\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string' then\
    \ return false end\n  end\n  -- All values need to be strings\n  for k, v in pairs(dict)\
    \ do\n    if type(v) ~= 'string' then return false end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwneidu_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptwneidu_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2u26lesy.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if not dict then\n    return false\n \
    \ end\n  for key, val in pairs(dict) do\n    if not (type(key) == 'string' or\
    \ type(key) == 'number') then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlapyg2c.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvlapyg2c.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local keys = dict:keys()\n  for _, k in\
    \ ipairs(keys) do\n    if type(k) == \"string\" then\n      if k:lower():find(k:upper())\
    \ == 0 then\n        return false\n      else\n        return true\n      end\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp674zi69v.lua:11:\
    \ attempt to call a nil value (method 'keys')\nstack traceback:\n\t/tmp/tmp674zi69v.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp674zi69v.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprv12q3z7.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local keys = {}\n    for k in pairs(dict)\
    \ do \n        if type(k) == \"string\" then\n            table.insert(keys, k)\n\
    \        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy_0sih3q.lua:30: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tif dict == nil then\n\t\treturn false\n\
    \tend\n\tfor key in pairs(dict) do\n\t\tif not is_string(key) or not is_string(dict[key])\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6f6ff0s.lua:15:\
    \ attempt to call a nil value (global 'is_string')\nstack traceback:\n\t/tmp/tmpx6f6ff0s.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpx6f6ff0s.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local keys = table.keys(dict)\n  local\
    \ n = #keys\n  if n == 0 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpngtkvf44.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local ok, count = pcall(function() return\
    \ pcall(\n    function() return pcall(\n      function() return pcall(\n     \
    \   function() return pcall(\n          function() return pcall(\n           \
    \ function() return pcall(\n              function() return pcall(\n         \
    \       function() return pcall(\n                  function() return pcall(\n\
    \                    function() return pcall(\n                      function()\
    \ return pcall(\n                        function() return pcall(\n          \
    \                function() return pcall(\n                            function()\
    \ return pcall(\n                              function() return pcall(\n    \
    \                            function() return pcall(\n                      \
    \            function() return pcall(\n                                    function()\
    \ return pcall(\n                                      function() return pcall(\n\
    \                                        function() return pcall(\n          \
    \                                function() return pcall(\n                  \
    \                          function() return pcall(\n                        \
    \                      function() return pcall(\n                            \
    \                    function() return pcall(\n                              \
    \                    function() return pcall(\n                              \
    \                      function() return pcall(\n                            \
    \                          function() return pcall(\n                        \
    \                                function() return pcall(\n                  \
    \                                        function() return pcall(\n          \
    \                                                  function() return pcall(\n\
    \                                                              function() return\
    \ pcall(\n                                                                function()\
    \ return pcall(\n                                                            \
    \      function() return pcall(\n                                            \
    \                        function() return pcall(\n                          \
    \                                           function() return pcall(\n       \
    \                                                                function() return\
    \ pcall(\n                                                                   \
    \      function() return pcall(\n                                            \
    \                               function() return pcall(\n                   \
    \                                                          function() return pcall(\n\
    \                                                                            \
    \   function() return pcall(\n                                               \
    \                                  function() return pcall(\n                \
    \                                                                   function()\
    \ return pcall(\n                                                            \
    \                         function() return pcall(\n                         \
    \                                                              function() return\
    \ pcall(\n                                                                   \
    \                      function() return pcall(\n                            \
    \                                                               function() return\
    \ pcall(\n                                                                   \
    \                          function() return pcall(\n                        \
    \                                                                       function()\
    \ return pcall(\n                                                            \
    \                                     function() return pcall(\n             \
    \                                                                            \
    \          function() return pcall(\n                                        \
    \                                                             function() return\
    \ pcall(\n                                                                   \
    \                                    function() return pcall(\n              \
    \                                                                            \
    \               function() return pcall(\n                                   \
    \                                                                        function()\
    \ return pcall(\n                                                            \
    \                                                 function() return pcall(\n \
    \                                                                            \
    \                                  function() return pcall(\n                \
    \                                                                            \
    \                     function() return pcall(\n                             \
    \                                                                            \
    \          function() return pcall(\n                                        \
    \                                                                            \
    \ function() return pcall(\n                                                 \
    \                                                                      function()\
    \ return pcall(\n                                                            \
    \                                                             function() return\
    \ pcall(\n                                                                   \
    \                                                        function() return pcall(\n\
    \                                                                            \
    \                                                 function() return pcall(\n \
    \                                                                            \
    \                                                  function() return pcall(\n\
    \                                                                            \
    \                                                                   function()\
    \ return pcall(\n                                                            \
    \                                                                            \
    \         function() return pcall(\n                                         \
    \                                                                            \
    \                              function() return pcall(\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf48jyjsf.lua:76: too many C levels (limit is 200) in function\
    \ at line 76 near 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then return false end\n\
    \    for k,v in pairs(dict) do\n        if type(k) ~= 'string' then return false\
    \ end\n        if type(v) ~= 'string' then return false end\n    end\n    return\
    \ true\nend\n</code>\n<|/ a tags=lua,string dscore=2 |>\n<| a tags=lua,string\
    \ |>\nThis solution worked for me:\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi_p4z7y6.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- Check that the dictionary is empty.\n\
    \  if not dict then return false end\n  \n  for k, v in pairs(dict) do\n    if\
    \ type(k) ~= 'string' or k ~= v:sub(1, 1) or k ~= v:sub(#v, #v+1) then return\
    \ false end\n  end\n  return true\nend\n</cell>\n<text>\nSolution 3: MapReduce\n\
    The MapReduce pattern works by \"mapping\" each key in the dictionary to a \"\
    value\".  In this case, we are mapping each key to a Boolean.  For example, let's\
    \ look at each key in our dictionary and see if it is a string or an integer.\
    \  We can do this by mapping the dictionary to either true or false depending\
    \ on the key's type.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphbmbtc13.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if type(dict) == \"table\" then\n    local\
    \ keys = dict:keys()\n    return #keys == 0 and nil or #keys == 0 and \"string\"\
    \ or #keys == 0 and \"string\"\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84s_007w.lua:12:\
    \ attempt to call a nil value (method 'keys')\nstack traceback:\n\t/tmp/tmp84s_007w.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp84s_007w.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n   assert(type(dict) == 'table')\n   if\
    \ not dict then\n      return false\n   end\n   for key, value in pairs(dict)\
    \ do\n      assert(type(key) == 'string')\n      assert(type(value) == 'table')\n\
    \      if not check_dict_case(value) then\n         return false\n      end\n\
    \   end\n   return true\nend\n</code>\n<|/ a tags=lua-table,lua dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmy60879d.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- if none of the keys are strings, or\
    \ all are strings, then the dictionary\n  -- should be in lower case.\n  if #dict\
    \ == 0 then return true end\n  for k,v in pairs(dict) do\n    if not (type(k)\
    \ == \"string\" and type(v) == \"string\") then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0t4rotr6.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0t4rotr6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_lower\n    \n    is_lower =\
    \ true\n    for k,v in pairs(dict) do\n        if type(k) == \"string\" and type(v)\
    \ == \"string\" then\n            if is_lower then\n                is_lower =\
    \ false\n            else\n                return false\n            end\n   \
    \     else\n            return false\n        end\n    end\n    \n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7ffg55x.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm7ffg55x.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    -- Write your code here.\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j0wgc1q.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_j0wgc1q.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local has_upper = {}\n    for key, value\
    \ in pairs(dict) do\n        if key:sub(1,1) == '_' then\n            has_upper[key]\
    \ = true\n        end\n    end\n    local has_lower = {}\n    for key, value in\
    \ pairs(dict) do\n        if key:sub(1,1) ~= '_' then\n            has_lower[key]\
    \ = true\n        end\n    end\n    if #has_lower == #has_upper == 0 then\n  \
    \      return true\n    end\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fhhjfc_.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_fhhjfc_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    local lower = true\n    local upper = true\n    for k in pairs(dict) do\n\
    \        if type(k) ~= \"string\" then\n            lower = false\n        end\n\
    \        if type(k) ~= \"number\" then\n            upper = false\n        end\n\
    \    end\n    if lower or upper then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gue8jb3.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2gue8jb3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if not dict then\n    return false\n \
    \ end\n  local result = true\n  for i,k in pairs(dict) do\n    if not type(k)\
    \ == \"string\" or k:upper() ~= k:lower() then\n      result = false\n      break\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_dd3pode.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_dd3pode.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local result = true\n  local keys = terralib.newlist()\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" or k ~= k:lower()\
    \ or k ~= k:upper() then\n      result = false\n    end\n    keys:insert(k)\n\
    \  end\n  if #keys == 0 then\n    result = true\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyijg6rsc.lua:12:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpyijg6rsc.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpyijg6rsc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local flag = true\n    for k,v in pairs(dict)\
    \ do\n        if k ~= \"Name\" and k ~= \"State\" and k ~= \"Zip\" and k ~= \"\
    Age\" and k ~= \"City\" then\n            flag = false\n        end\n    end\n\
    \    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0t54mt_5.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0t54mt_5.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local keys = nil\n    local string_keys\
    \ = false\n    local string_values = false\n    local dict_size = #dict\n    if\
    \ dict_size == 0 then\n        return false\n    end\n    for k,v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            string_keys = true\n\
    \        elseif k:lower() ~= k then\n            string_keys = true\n        elseif\
    \ type(v) ~= \"string\" then\n            string_values = true\n        elseif\
    \ v:lower() ~= v then\n            string_values = true\n        else\n      \
    \      string_keys = true\n            string_values = true\n        end\n   \
    \ end\n    return string_keys and string_values and dict_size == #keys\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnckzkmua.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnckzkmua.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local keys = table.keys(dict)\n    local\
    \ result = 0\n    for _, key in ipairs(keys) do\n        if type(key) == \"string\"\
    \ then\n            -- Check if the key is all lower case\n            if key:lower()\
    \ == key then\n                result = result + 1\n            else\n       \
    \         -- Check if the key is all upper case\n                if key:upper()\
    \ == key then\n                    result = result + 1\n                end\n\
    \            end\n        else\n            result = result + 1\n        end\n\
    \    end\n    if result == 0 then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdsyxp4y.lua:11:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpwdsyxp4y.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwdsyxp4y.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
