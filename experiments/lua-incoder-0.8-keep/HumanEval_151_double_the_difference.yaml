name: HumanEval_151_double_the_difference
language: lua
prompt: "-- Given a list of numbers, return the sum of squares of the numbers\n--\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
  \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
  \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
  \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
  \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
  \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n   \
  \ lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   local sum = 0\n   for _, v in ipairs(lst) do\n      if math.abs(v)\
    \ ~= 0 then\n         sum = (sum + v) * (v + 2)\n      end\n   end\n   return\
    \ sum\nend", "    local sum = 0\n    for i = 1,#lst do\n        if lst[i] > 0\
    \ and type(lst[i]) == 'number' then\n            sum = sum + math.pow(lst[i],\
    \ 2)\n        end\n    end\n    return sum\nend", "\tif type(lst) == \"table\"\
    \ then\n\t\tlocal sum = 0\n\t\tfor index, x in ipairs(lst) do\n\t\t\tif x ~= nil\
    \ and type(x) == \"number\" then\n\t\t\t\tif x % 2 == 1 then\n\t\t\t\t\tsum =\
    \ sum + x\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn sum\n\telse\n\t\treturn\
    \ 0\n\tend\nend", "  -- Base case\n  if #lst == 0 then\n    return 0\n  end\n\
    \  \n  -- Remember largest number in list so far\n  local largest = lst[1]\n \
    \ \n  -- Compute sum\n  local sum = 0\n  for i=2,#lst do\n    -- If current number\
    \ is odd skip it\n    if lst[i] % 2 == 1 then\n      -- If current number is greater\
    \ than largest skip it\n      if largest < lst[i] then\n        largest = lst[i]\n\
    \      end\n      -- If current number is smaller than largest skip it\n     \
    \ if largest > lst[i] then\n        largest = lst[i]\n      end\n    end\n   \
    \ sum = sum + lst[i]\n  end\n  \n  -- Return sum of the squares of the numbers\
    \ that are greater than or equal to the\n  -- largest number in the list minus\
    \ largest\n  local squaresum = 0\n  for i=2,#lst do\n    -- If current number\
    \ is greater than largest minus largest\n    if lst[i] >= largest then\n     \
    \ squaresum = squaresum + math.pow(lst[i],2)\n    end\n  end\n  \n  return sum\
    \ + squaresum - largest\nend\n</cell>\n<cell>", "\tlocal total = 0\n\tif #lst\
    \ == 0 then\n\t\treturn 0\n\tend", "  if lst == nil then\n    return 0\n  end\n\
    \  local square_sum = 0\n  local i = 1\n  for _ in lst:gmatch(\"%d+\") do\n  \
    \  square_sum = square_sum + i - 1\n    i = i + 1\n  end\n  if square_sum == 0\
    \ then\n    return 0\n  end\n  return square_sum\nend", "\tlocal total = 0\n\t\
    for i=1,#lst do\n\t\ttotal = total + (lst[i]*lst[i])\n\tend\n\treturn total\n\
    end", "  if lst[1] == nil then return 0 end\n  return lst[1] + lst[2] * 2\nend",
  "   if not lst[1] and not lst[2] and not lst[3] then\n      return 0\n   end\n \
    \  local sum = 0\n   for i = 1, #lst do\n      if lst[i]%2 ~= 0 then\n       \
    \  sum = sum + lst[i]\n      end\n   end\n   return sum\nend", "  -- Write your\
    \ code in Lua 5.1 compatible mode \n  -- Use collect() to generate an array with\
    \ all odd numbers, \n  -- then use unpack() to get a list of all the odd numbers\
    \ in the array.\n  -- Use sum() to compute the sum of all numbers in the array.\n\
    \  -- Use a conditional expression to test whether a number is odd.\n  -- Return\
    \ the sum of the array.\n  local result = 0\n  local num_array = collect((lst))\n\
    \  local num_array_odd = unpack(num_array)\n  for k,v in pairs(num_array_odd)\
    \ do\n    if v % 2 == 1 then\n      result = result + v\n    end\n  end\n  return\
    \ result\nend", "  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n \
    \ for i=1,#lst-1 do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n \
    \   end\n  end\n  return sum\nend", "\tif lst == nil then\n\t\treturn 0\n\tend\n\
    \tfor i,v in ipairs(lst) do\n\t\tif not is_number(v) then\n\t\t\terror(\"Invalid\
    \ Number: \", v)\n\t\telseif v < 0 then\n\t\t\terror(\"Invalid Number: \", v)\n\
    \t\telseif v ~= math.floor(v) then\n\t\t\terror(\"Invalid Number: \", v)\n\t\t\
    elseif v <= 0 then\n\t\t\terror(\"Invalid Number: \", v)\n\t\telse\n\t\t\tlst[i]\
    \ = v * v\n\t\tend\n\tend\n\tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\t\
    sum = sum + v\n\tend\n\treturn sum\nend", "  if #lst == 0 then return 0 end\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 then sum = sum\
    \ + lst[i] end\n  end\n  return sum\nend", "  if #lst == 0 then return 0 end\n\
    \  local sum = 0\n  for i = 1,#lst do\n    if lst[i] > 0 then \n      sum = sum\
    \ + math.pow(lst[i],2)\n    end\n  end\n  return sum\nend\n</cell>\n<text>\nQ9.\
    \ Write a function that finds the number of pairs with the same consecutive difference\
    \ between the two numbers in a list.", "    local square_sum = 0\n    for i =\
    \ 1, #lst do\n        square_sum = square_sum + lst[i]\n        if i % 2 == 1\
    \ then -- The odd numbers in the list are added to square_sum.\n            square_sum\
    \ = square_sum + lst[i]\n        end\n    end\n    if square_sum == 0 then --\
    \ If the input list is empty, return 0.\n        return 0\n    end\n    return\
    \ square_sum\nend", "\tlocal total = 0 \n\tfor i, v in pairs(lst) do \n\t    if\
    \ type(v) == \"number\" then\n\t        total = total + v * v -- square\n\t  \
    \  elseif v > 0 then\n\t        total = total + v\n\t    elseif v < 0 then\n\t\
    \        total = total - v\n\t    end\n\tend \n\treturn total \nend", "  if lst[1]\
    \ < 0 or not next(lst) then\n    return 0\n  end\n  local sum = 0\n  for idx,\
    \ x in ipairs(lst) do\n    if x % 2 == 1 then\n      sum = sum + x\n    end\n\
    \  end\n  return sum\nend", "  local sum = 0\n  local square = 0\n  for i = 1,#lst\
    \ do\n    -- Ignore negative numbers or non-integer numbers\n    if not ((lst[i]%1)\
    \ == 0) and (type(lst[i]) == type(\"number\")) then\n      sum = (sum + lst[i]*lst[i])\n\
    \      square = (square + lst[i]*lst[i])\n    end\n  end\n  return sum + square\n\
    end", "    local total = 0\n    for _, v in pairs(lst) do\n        if v ~= 0 and\
    \ not v:is_integer() then\n            total = total + v^2\n        end\n    end\n\
    \    return total\nend", "   if #lst==0 then\n      return 0\n   elseif #lst==1\
    \ then\n      return lst[1]\n   else\n      local sum=0\n      for i=1,#lst do\n\
    \         if tonumber(lst[i])==0 or tonumber(lst[i])==1 then\n            sum=sum+tonumber(lst[i])\n\
    \         else\n            sum=sum+tonumber(lst[i])*tonumber(lst[i])\n      \
    \   end\n      end\n      return sum\n   end\nend", "   if #lst == 0 then\n  \
    \    return 0\n   end\n   local sum = 0\n   for i=1,#lst do\n      sum = sum +\
    \ lst[i]\n      if math.floor(sum) ~= sum then\n         return 0\n      end\n\
    \   end\n   local odd = 0\n   for i=1,#lst do\n      if math.floor(sum) ~= sum\
    \ then\n         return 0\n      end\n      if math.floor(sum) % 2 == 1 then\n\
    \         odd = odd + math.floor(sum)\n      end\n      sum = sum + lst[i]\n \
    \  end\n   return odd\nend", "  local sum = 0\n  for _, x in ipairs(lst) do\n\
    \    if not x then break end\n    sum = sum + math.pow(x, 2)\n  end\n  return\
    \ sum\nend\n</cell>\n<text>\nExercise 6: Write a function called print_list",
  "    local sum = 0\n    for _, v in pairs(lst) do\n        if v <= 0 or not (v %%\
    \ 2 == 1) then\n            sum = sum + v\n        end\n    end\n    return sum\n\
    end", "\tif not lst then\n\t\treturn 0\n\tend\n\tlocal total = 0\n\tfor _, v in\
    \ ipairs(lst) do\n\t\tif not v:is_integer() then\n\t\t\treturn 0\n\t\tend\n\t\t\
    total = total + (v % 2) * v\n\tend\n\treturn total\nend", "  if lst:len() == 0\
    \ then\n    return 0\n  end\n  local sum = 0\n  local odd = 0\n  for i = 1, lst:len()\
    \ do\n    -- Check whether a number is odd.\n    if lst[i] % 2==1 then\n     \
    \ -- If it is odd, add it to the sum.\n      sum = sum + lst[i]\n      odd = 1\n\
    \    else\n      -- Otherwise, replace the sum by whatever the sum of the first\
    \ few odd-numbered numbers is.\n      if odd then\n        sum = sum + sum\n \
    \     end\n    end\n  end\n  if odd then\n    sum = sum + sum\n  end\n  return\
    \ sum\nend", "  local sum = 0\n  for i = 1, #lst do\n    if isinteger(lst[i])\
    \ then\n      sum = sum + lst[i]\n    elseif lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend", "  if lst==nil then return\
    \ 0 end\n  local sum=0\n  local i=1\n  while i<=#lst do\n    if lst[i]%2==1 then\n\
    \      sum=sum+lst[i]\n    end\n    i=i+1\n  end\n  return sum\nend\nprint(double_the_difference([1,2,3,4,5,6,7,8,9]))",
  "  -- Check list is actually a list first.\n  if not lst:is_list() then\n    return\
    \ 0\n  end", "  -- If empty, return 0\n  if #lst == 0 then\n    return 0\n  end",
  "  if #lst == 0 then return 0 end\n  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    if v then\n      sum = sum + math.pow(v,2)\n    end\n  end\n  return sum\n\
    end\n</cell>\n<code language=julia-1.5>", "  if lst[1] == nil then\n    return\
    \ 0\n  else\n    return (lst[1]:gsub('.', string.rep('0', 8)) .. lst[2]:gsub('.',\
    \ string.rep('0', 8))):gsub('1+', string.rep('1+', 8)):gsub('9+', string.rep('9+',\
    \ 8))\n  end\nend", "  local sum = 0 -- Keep a running sum of the squares\n  for\
    \ i,v in ipairs(lst) do\n    if v % 2 == 1 then -- If the number is odd, add it\
    \ to the running sum\n      sum = sum + v\n    end\n  end\n  return sum\nend",
  "  if #lst == 0 then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if not(is_integer(lst[i])\
    \ or lst[i]<0) then\n      sum = sum + lst[i]*lst[i]\n    end\n  end\n  return\
    \ sum\nend", "    local sum = 0\n    for i, v in ipairs(lst) do\n        if v\
    \ > 0 then\n            sum = sum + v\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that multiplies all the numbers\
    \ in a list. \nThe input list can be arbitrarily long.\nFor example, double_the_difference([1,\
    \ 2, 3, 4, 5, 6]) should return 360.\nIf the input list is empty, return 0.\n\
    To solve these problems, use the double_the_difference function.", "  if #lst\
    \ == 0 then return 0 end\n  return lst[1]:sum() * lst[1]:sum() + (lst[2]:sum()\
    \ * lst[2]:sum())\nend", "  local sum = 0\n  for i = 1, #lst do\n    if not is_integer(lst[i])\
    \ then\n      return 0\n    end\n    if lst[i] > 0 then\n      sum = sum + lst[i]\n\
    \    end\n  end\n  return sum\nend", "  if #lst == 0 then return 0 end\n  local\
    \ sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n  return\
    \ sum\nend", "\tif not lst then\n\t\treturn 0\n\telse\n\t\tlocal sum = 0\n\t\t\
    for i = 1, #lst do\n\t\t\tif type(lst[i]) == \"number\" and lst[i] % 1 ~= 0 then\n\
    \t\t\t\tsum = sum + lst[i]\n\t\t\tend\n\t\tend\n\t\treturn sum\n\tend\nend", "\t\
    local sum = 0\n\tfor _, value in ipairs(lst) do\n\t\tif value == -1 or value%1\
    \ ~= 0 then\n\t\t\t-- ignore negative numbers\n\t\t\t-- ignore non-integers\n\t\
    \t\tsum = sum + value\n\t\tend\n\tend\n\treturn sum\nend", "\tlocal ret = 0\n\t\
    if not lst\n\tthen return 0\n\tend\n\tlocal function double_difference(num, i,\
    \ j, lst)\n\t\tif i > j then return 0 end\n\t\tlocal sum_ = i + j + lst[i] + lst[j]\n\
    \t\tif sum_ > 100 then return 0 end\n\t\tif lst[i] < 0 and lst[j] >= 0 then\n\t\
    \t\tsum_ = sum_ - lst[i] + lst[j]\n\t\telseif lst[i] >= 0 and lst[j] < 0 then\n\
    \t\t\tsum_ = sum_ - lst[i] + lst[j]\n\t\tend\n\t\tif sum_ % 2 == 1 then return\
    \ 0 end\n\t\treturn sum_ + double_difference(sum_/2, i + 1, j, lst)\n\tend\n\t\
    ret = double_difference(1, 0, 1, lst)\n\treturn ret\nend", '  if lst[1] == nil
    then return 0 end', "  if #lst == 0 then\n    return 0\n  else\n    local sum\
    \ = 0\n    for i = 2, #lst do\n      if math.fmod(lst[i-2], 2) == 1 then\n   \
    \     sum = sum + lst[i-1]\n      end\n    end\n    return sum\n  end\nend", "\t\
    if lst[1] == nil then\n\t\treturn 0\n\telse\n\t\tlocal result = lst[1]\n\t\tfor\
    \ i = 2, #lst do\n\t\t\tif lst[i] % 2 == 1 then\n\t\t\t\tresult = result + lst[i]\n\
    \t\t\tend\n\t\tend\n\t\treturn result\n\tend\nend", "  -- If list is empty, return\
    \ 0.\n  if not lst[1] and not lst[2] and lst[3] and lst[4] then\n    return 0\n\
    \  end", "   local sum = 0\n   if #lst == 0 then\n      return 0\n   end\n   for\
    \ i = 1, #lst, 1 do\n      if i % 2 == 1 then\n         sum = sum + lst[i]\n \
    \     end\n   end\n   return sum\nend", "\tlocal sum = 0 \n\tfor i = 1,#lst do\n\
    \t\tif isElement(lst[i]) then\n\t\t\tsum = sum + lst[i]\n\t\telse\n\t\t\tsum =\
    \ sum + i * i\n\t\tend\n\tend\n\treturn sum\nend", "\tif not lst then\n\t\treturn\
    \ 0\n\tend\n\tlocal sum = 0\n\tfor idx, value in pairs(lst) do\n\t\tif not value\
    \ then\n\t\t\tsum = 0\n\t\telse\n\t\t\tif value % 2 == 1 then\n\t\t\t\tsum = sum\
    \ + value\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend", '   if lst == nil then
    return 0 end', "    if not lst then\n        return 0\n    end\n    local sum\
    \ = 0\n    local i = 1\n    while i <= #lst and sum + lst[i] <= 0 do\n       \
    \ sum = sum + lst[i]\n        i = i + 1\n    end\n    return sum\nend", "    local\
    \ total = 0\n    for i = 1, #lst do\n        if lst[i] ~= 0 then\n           \
    \ if type(lst[i]) == \"number\" and math.floor(lst[i]) ~= lst[i] then\n      \
    \          total = total + (lst[i]*lst[i])\n            end\n        end\n   \
    \ end\n    return total\nend", "  if type(lst) == 'table' then\n    lst = unpack(lst)\n\
    \  end\n  if #lst == 0 then return 0 else return lst[1]:add(lst[2]):add(lst[3]):add(lst[4])\
    \ end\n  local sum = 0\n  for i=1,#lst do\n    local n = lst[i]\n    if n and\
    \ type(lst[i]) == 'number' then\n      sum = sum + n\n      if not n % 2 then\
    \ sum = sum + n end\n    end\n  end\n  return sum\nend", "  if #lst == 0 then\
    \ return 0 else return lst[1]:add(lst[2]):add(lst[3]):add(lst[4])\nend", "  --\
    \ Return 0 if there are no elements to process.\n  if #lst == 0 then\n    return\
    \ 0\n  elseif #lst == 1 then\n    return lst[1]^2\n  else\n    local first = 1\n\
    \    local last = #lst - 1\n    while last > first do\n      local mid = math.floor(first\
    \ + (last - first)/2)\n      if lst[mid]%2 ~= 0 then\n        last = mid\n   \
    \   else\n        first = mid\n      end\n    end\n    return lst[first] + lst[last]\n\
    \  end\nend", "  if not lst[1] then return 0 end\n  local sum = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] < 0 then \n      -- Ignore negative numbers, don't add\
    \ to sum\n      continue\n    end\n    if lst[i] == 0 then \n      -- Ignore zeros,\
    \ don't add to sum\n      continue\n    end\n    sum = sum + lst[i] * lst[i]\n\
    \  end\n  return sum\nend", "  local sum = 0\n  if #lst == 0 then\n    return\
    \ 0\n  end", "   if #lst == 0 then\n      return 0\n   else\n      return lst[1]*lst[1]\
    \ + double_the_difference(lst[2:])\n   end\nend", "\t-- The sum of squares of\
    \ the odd numbers in the list.\n\tlocal function sum_square(lst)\n\t\tlocal sum\
    \ = 0\n\t\tfor _, value in ipairs(lst) do\n\t\t\t-- For every value in lst, add\
    \ it to the sum of the squares.\n\t\t\tif value % 2 == 1 then\n\t\t\t\tsum = sum\
    \ + value * value\n\t\t\tend\n\t\tend\n\t\treturn sum\n\tend", "\tif lst==nil\
    \ or lst:empty() then return 0 end\n\tlocal sum = 0\n\tfor i=1,#lst-1 do\n\t\t\
    if not(is_integer(lst[i]) and lst[i]<0) then\n\t\t\tsum = sum + lst[i]*lst[i]\n\
    \t\tend\n\tend\n\treturn sum\nend", "    local sum = 0\n    for i, v in ipairs(lst)\
    \ do\n        if v ~= 0 then\n            if v % 2 == 1 then\n               \
    \ sum = sum + v\n            end\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nThe main function above has two parameters: the list that is\
    \ to be processed, and the variable sum that keeps track of the current total\
    \ squared difference. The function goes through the list one item at a time, compares\
    \ each item to see whether it is odd, and adds its squared difference to sum if\
    \ it is odd.", "  local total = 0\n  for i=1,#lst do\n    if type(lst[i]) == \"\
    number\" and lst[i] >= 0 then\n      total = total + lst[i]\n    end\n  end\n\
    \  return total\nend\n</cell>\n<cell>", "  if #lst==0 then\n    return 0;\n  else\n\
    \    -- We sum all the even numbers (except 0)\n    local sum_even = 0;\n    for\
    \ i = 1, #lst do\n      if i % 2 == 0 then\n        sum_even = sum_even + lst[i];\n\
    \      elseif lst[i] > 0 then\n        return sum_even;\n      else\n        return\
    \ 0;\n      end\n    end\n  end\nend\n</cell>\n<text>\nProblem 3b", "  if lst\
    \ == nil then return 0 else return lst:reduce(function(acc, n)\n      return acc\
    \ + n*n - (n % 2)\n    end)\n  end\nend", "  if #lst == 0 then\n    return 0\n\
    \  end\n  local sum = 0\n  for i=1,#lst do\n    sum = sum + lst[i]^2 --(lst[i]\
    \ + lst[i]^2)^2\n  end\n  return sum\nend", "  if #lst == 0 then\n    return 0\n\
    \  end\n  return #lst * #lst + #lst * double_the_difference(lst[2:#lst])\nend",
  "    if lst[1] == nil then\n        return 0\n    end", "  local sum = 0\n  for\
    \ i = 1, #lst do\n    if tonumber(lst[i]) then\n      sum = sum + lst[i]\n   \
    \ end\n  end\n  return sum\nend", "  if lst==nil then return 0 end\n  local sum=0\n\
    \  for i=1,#lst do\n    if ( lst[i] > 0 ) then\n      sum=sum+((lst[i]*lst[i]))\n\
    \    end\n  end\n  return sum\nend", "  -- Base Case: If the list is empty, return\
    \ 0.\n  if lst==nil then return 0 end\n  -- Base Case: If the list contains negative\
    \ numbers or non-integer values,\n  -- return 0.\n  if all(lst.filter( function(x)\
    \  return not (type(x) == \"number\") or x ~= round(x) or x < 0 end) ) then return\
    \ 0 end\n  -- Compute the sum of the squares of the first element.\n  local sum_squares\
    \ = lst[1]:map(function(x)\n    return x*x\n  end)\n  -- Iterate over the rest\
    \ of the elements.\n  for i=2,#lst do -- Iterate over the remaining elements.\n\
    \    sum_squares = sum_squares + lst[i]:map(function(x)\n      return x*x\n  \
    \  end)\n  end\n  -- Return the sum of the squares.\n  return sum_squares:sum()\n\
    end", "  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2 == 1 then\n      sum\
    \ = sum + lst[i]*lst[i]\n    end\n  end\n  return sum\nend", "  if #lst == 0 then\n\
    \    return 0\n  end\n  local sum = 0\n  for _, v in ipairs(lst) do\n    if v:is_integer()\
    \ then\n      sum = sum + v\n    elseif v:is_float() then\n      sum = sum + v\n\
    \    else\n      return nil\n    end\n  end\n  return sum\nend", "  if lst ==\
    \ nil then\n    return 0\n  elseif #lst == 0 then\n    return 0\n  else\n    local\
    \ sum = 0\n    for i = 1, #lst do\n      if type(lst[i]) == 'number' then\n  \
    \      sum = sum + lst[i]\n      end\n    end\n    return sum * sum\n  end\nend\n\
    </cell>\n<cell>", "\tif lst[1] > 0 and lst[2] > 0 and lst[3] then\n\t\treturn\
    \ lst[1]^2 + lst[2]^2 + lst[3]^2 -- return sum of squares\n\telseif lst[1] > 0\
    \ then\n\t\treturn lst[1]^2 + lst[2]^2 -- return sum of squares\n\telseif lst[2]\
    \ > 0 then\n\t\treturn lst[1]^2 + lst[2]^2 -- return sum of squares\n\telse\n\t\
    \treturn 0\n\tend\nend", "   if #lst == 0 then return 0 end\n   local squares\
    \ = 0\n   for i = 1, #lst do\n      if lst[i] % 2 == 1 then\n         squares\
    \ = squares + lst[i]\n      end\n   end\n   return squares\nend", "    if lst[1]\
    \ > 0 then return end\n    local sum = 0\n    for i=2, #lst do\n        if i %\
    \ 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend", "  if #lst==0 then return 0 end\n  local sum = 0\n  for i=1,#lst\
    \ do\n    sum=sum+((i%2)+1)*lst[i]\n  end\n  return sum\nend", "   if #lst ==\
    \ 0 then\n      return 0\n   end", "  if lst == nil then\n    return 0\n  end\n\
    \  \n  if #lst == 0 then\n    return 0\n  end\n  \n  local sum = 0\n  local cur\
    \ = lst[1]\n  for i = 2, #lst do\n    if cur % 2 == 1 then\n      sum = sum +\
    \ cur\n    end\n    cur = lst[i]\n  end\n  return sum\nend", "   if not lst:is_list()\
    \ then\n      return 0\n   end\n   if #lst == 0 then\n      return 0\n   end\n\
    \   local sum = 0\n   for i=1, #lst do\n      local num = lst[i]\n      if num:is_integer()\
    \ then\n         sum = sum + num\n      elseif num:is_float() then\n         if\
    \ num > 1.0 then\n            sum = sum + num\n         end\n         local remainder\n\
    \         if num < 0.0 then\n            num = -num\n            remainder = 1\n\
    \         else\n            remainder = 0\n         end\n         local temp =\
    \ num:fix()\n         sum = sum + temp * temp\n         if remainder ~= 0 then\n\
    \            sum = sum + remainder * num\n         end\n      end\n   end\n  \
    \ return sum\nend", "\t-- Initialize our total to 0\n\tlocal total = 0\n\t\n\t\
    -- Check to see if the list has any items in it. If it has none, return 0.\n\t\
    if not lst  then\n\t\treturn 0\n\tend", "  local s = 0\n  for i, v in ipairs(lst)\
    \ do\n    if not integer_or_positive(v) then break end\n    local d = v % 2\n\
    \    if d ~= 0 then\n      s = s + v\n    end\n  end\n  return s\nend", "  if\
    \ lst == nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n \
    \   if math.floor( lst[i] ) ~= lst[i] or lst[i] < 0 then\n      return 0\n   \
    \ end\n    sum = sum + lst[i]\n  end\n  return sum\nend", "    if lst==nil then\n\
    \        return 0\n    end\n    local sum = 0\n    for i=1,#lst do\n        if\
    \ math.floor(lst[i]) then\n            sum = sum + math.pow(math.floor(lst[i]),2)\n\
    \        end\n    end\n    return sum\nend", "  -- lst = lst or {} -- If lst is\
    \ nil, set lst to {}\n  -- The sum of the squares of the odd numbers in the input\
    \ list\n  -- The sum of the squares of the even numbers in the input list\n  --\
    \ The difference between the sums of the squares of the odd numbers in the input\
    \ list\n  -- The difference between the sums of the squares of the even numbers\
    \ in the input list\n  local sum_squares_odd = #lst * #lst \n  local sum_squares_even\
    \ = #lst * #lst \n  local sum_of_squared_odd = 0 -- The sum of the squares of\
    \ the odd numbers \n  local sum_of_squared_even = 0 -- The sum of the squares\
    \ of the even numbers \n  -- The difference between the sums of the squares of\
    \ the odd numbers in the input list\n  -- The difference between the sums of the\
    \ squares of the even numbers in the input list\n  -- The product of the numbers\
    \ in the input list except the number 0\n  local diff_squares_odd = 1 -- The difference\
    \ between the sums of the squares of the odd numbers \n  local diff_squares_even\
    \ = 1 -- The difference between the sums of the squares of the even numbers \n\
    \  local prod_of_numbers_except_zero = 1 -- The product of the numbers in the\
    \ input list except the number 0 \n  -- The product of the numbers in the input\
    \ list except the number 0 \n  local function sum_of_squares(num)\n    sum_of_squared_odd\
    \ = sum_of_squared_odd + num * num\n    sum_of_squared_even = sum_of_squared_even\
    \ + num * num\n  end\n  -- The product of the numbers in the input list except\
    \ the number 0\n  -- The product of the numbers in the input list except the number\
    \ 0 \n  local function product_except_zero(num)\n    prod_of_numbers_except_zero\
    \ = prod_of_numbers_except_zero * num\n  end\n  local function difference(num)\n\
    \    diff_squares_odd = diff_squares_odd + (num * num)\n    diff_squares_even\
    \ = diff_squares_even + (num * num)\n  end\n  -- The sum of the squares of the\
    \ odd numbers in the input list\n  -- The sum of the squares of the even numbers\
    \ in the input list\n  -- The difference between the sums of the squares of the\
    \ odd numbers in the input list\n  -- The difference between the sums of the squares\
    \ of the even numbers in the input list\n  -- The product of the numbers in the\
    \ input list except the number 0\n  -- The product of the numbers in the input\
    \ list except the number 0 \n  local function sum_of_squares_products(num)\n \
    \   sum_of_squared_odd = sum_of_squared_odd + num * num\n    sum_of_squared_even\
    \ = sum_of_squared_even + ", "\tlocal total = 0\n\tlocal count = 0\n\tfor i, v\
    \ in ipairs(lst) do\n\t\ttotal = total + (v % 2)\n\t\tcount = count + 1\n\t\t\
    if total > 0 then\n\t\t\tif count == 1 then\n\t\t\t\treturn total\n\t\t\telse\n\
    \t\t\t\treturn (total - 1)\n\t\t\tend\n\t\telse\n\t\t\tif count == 1 then\n\t\t\
    \t\treturn 0\n\t\t\telse\n\t\t\t\treturn 0\n\t\t\tend\n\t\tend\n\tend\nend", " \
    \ local sum = 0\n  local count = 0\n  if #lst > 0 then\n    local first\n    for\
    \ _, first in ipairs(lst) do\n      if first and first >= 0 then\n        if first\
    \ % 2 then\n          sum = sum + first\n          count = count + 1\n       \
    \ end\n      end\n    end\n    if count > 0 then\n      sum = sum + sum * count\
    \ / 2\n    end\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1,#lst\
    \ do\n    if lst[i] > 0 then\n      if ((not sum) or (sum < lst[i] - 1)) then\n\
    \        sum = sum + lst[i]\n      end\n    end\n  end\n  if #lst > 0 then\n \
    \   sum = sum + double_the_difference(lst)\n  end\n  return sum\nend", "  local\
    \ sum = 0\n  for i=1,#lst do\n    if lst[i] < 0 then\n      sum = sum + 0 + lst[i]\n\
    \      continue\n    end\n    if math.floor(lst[i]) == lst[i] then\n      sum\
    \ = sum + math.floor(lst[i]) * math.floor(lst[i])\n    else\n      sum = sum +\
    \ lst[i] * lst[i]\n    end\n  end\n  return sum\nend", "\tlocal result = 0\n\t\
    \n\tfor i, v in ipairs(lst) do\n\t\tif v % 2 == 1 then\n\t\t\tresult = result\
    \ + v\n\t\tend\n\tend", "  if not lst then return end\n  local sum = 0\n  for\
    \ i = 1, #lst, 1 do\n    local value = lst[i]\n    if value <= 0 then return end\n\
    \    if i%2 ~= 0 then sum = sum + value end\n  end\n  return sum\nend", "   if\
    \ #lst == 0 then\n      return 0\n   end\n   if lst[1] < 0 then\n      lst[1]\
    \ = -lst[1]\n   end\n   local sum = 0\n   for i = 2, #lst do\n      if lst[i]\
    \ % 2 == 1 then\n         sum = sum + lst[i] * lst[i]\n      else\n         return\
    \ 0\n      end\n   end\n   return sum\nend", "   local sum = 0\n   if lst~=nil\
    \ and #lst>0 then\n      local num\n      for i=1,#lst,1 do\n         num = lst[i]\n\
    \         if num < 0 then\n            num = - num\n         end\n         sum\
    \ = sum + (num / 2)\n         if num % 2 == 1 then\n            sum = sum + num\n\
    \         end\n      end\n   else\n      sum = 0\n   end\n   return sum\nend",
  "\tif not lst:len() then return 0 end\n\tlocal sum = 0\n\tlocal last = 0\n\tlocal\
    \ i = 1\n\twhile i <= #lst do\n\t\tlocal x = lst[i]\n\t\tif x >= 0 and x % 2 ==\
    \ 1 then\n\t\t\tif sum + x ~= last then sum = sum + x end\n\t\telseif x <= 0 and\
    \ x % 2 == 0 then\n\t\t\tif last ~= 0 then\n\t\t\t\tsum = sum + last\n\t\t\tend\n\
    \t\telse\n\t\t\tlast = last\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn sum\nend",
  "  if lst==nil then return 0 end\n  local sum = 0\n  local last_non_negative = lst[1]\n\
    \  for i=2, #lst do\n    local x = lst[i]\n    if x ~= 0 and x ~= last_non_negative\
    \ then\n      sum = sum + x*x\n    end\n    last_non_negative = x\n  end\n  return\
    \ sum\nend", "  if lst[1] == nil then\n    return 0\n  else\n    return lst[1]\
    \ + lst[2] + double_the_difference(lst[3:end])\n  end\nend", "   if not lst then\
    \ return 0 else double_the_difference(lst[1:])\n   elseif #lst == 0 then return\
    \ 0 end\n   \n   local sum = 0\n   for i, v in ipairs(lst) do\n      if i % 2\
    \ == 1 then sum = (sum + v) end\n   end\n   return sum\nend", "  local sum = 0\n\
    \  local i = 1\n  while i < #lst and lst[i] > 0 do\n    if lst[i] % 2 == 1 then\n\
    \      sum = sum + lst[i]\n    end\n    i = i + 1\n  end\n  return sum\nend\n\
    </cell>\n<cell>", "  return \n    if #lst == 0 then\n      0\n    else\n     \
    \ local sum_of_squares = 0\n      for i = 1, #lst do\n        sum_of_squares =\
    \ sum_of_squares + lst[i]^2\n        if lst[i]%2 ~= 0 then\n          break\n\
    \        end\n      end\n      return sum_of_squares\n    end\nend", "  if #lst\
    \ == 0 then return 0 end\n  local sum = 0\n  local i = 1\n  while i <= #lst do\
    \ sum = sum + lst[i-1]*lst[i-1] -- O(n)\n    i = i + 1 end\n  return sum\nend",
  "   if not lst then\n      return 0\n   end\n   local sum = 0\n   for i = 1, #lst,\
    \ 2 do\n      if lst[i] ~= 0 and lst[i] % 2 == 1 then\n         sum = sum + lst[i]*lst[i]\n\
    \      end\n   end\n   return sum\nend", "  if lst==nil then\n    return 0\n \
    \ end\n  local sum = 0\n  for i, x in ipairs(lst) do\n    local sign = math.abs(x)\n\
    \    if sign==0 or sign==math.tointeger(x) then\n      if x==0 then\n        sum\
    \ = 0\n      else\n        sum = sum + x\n      end\n    end\n  end\n  return\
    \ sum\nend", "  return lst[#lst]:map(function(x) return x * x end):reduce(function(x,\
    \ y) return x + y end)\nend\nprint(double_the_difference([1, 2, 3]))\nprint(double_the_difference([-1,\
    \ -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n\
    print(double_the_difference([]))", "  local total = 0\n  for i = 1, #lst do\n\
    \    if lst[i] > 0 then\n      total = total + lst[i] * lst[i]\n    end\n  end\n\
    \  return total\nend", '    if #lst == 0 then return 0 end', "    local total\
    \ = 0\n    if #lst == 0 then\n        return 0\n    end\n    for i = 1, #lst do\n\
    \        if i % 2 == 1 then\n            total = total + lst[i]\n        end\n\
    \    end\n    return total\nend", "    local sum = 0\n    for i, v in ipairs(lst)\
    \ do\n        if v ~= 0 and v ~= math.floor(v) then return 0 end\n        sum\
    \ = sum + v\n    end\n    return sum\nend\n</code>\nEDIT: \nI used list comprehension\
    \ to remove the loop and return the sum at the end. \n<code>", "  local sum =\
    \ 0\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      sum = 0\n      break\n\
    \    elseif v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\n\
    end", "   local sum = 0\n   for i = 1,#lst do\n      if lst[i] >= 0 then\n   \
    \      if math.floor(lst[i]) % 2 == 1 then\n            sum = sum + lst[i]\n \
    \        end\n      else\n         sum = sum + 0\n      end\n   end\n   return\
    \ sum\nend", "   if #lst == 0 then return 0 end\n   local total = 0\n   for _,\
    \ num in ipairs(lst) do\n      if num > 0 then\n         total = total + num^2\n\
    \      elseif num < 0 then\n         total = total + (-num)^2\n      else\n  \
    \       total = total + 1\n      end\n   end\n   return total\nend", "  if #lst\
    \ == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst do\n    if\
    \ type(lst[i]) == \"number\" then\n      local diff = lst[i] - lst[i - 1]\n  \
    \    if diff % 2 == 1 then\n        sum = sum + diff * diff\n      end\n    end\n\
    \  end\n  return sum\nend", "  local total = 0 -- Initialize total\n  for _, value\
    \ in ipairs(lst) do -- For every element in the list\n    if math.floor(value)\
    \ -- And if it is an integer...\n    then\n      total = total + value -- Add\
    \ it to the total\n    end\n  end\n  return total -- Return the total\nend", " \
    \ if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if not (i%2) then\n      sum = sum + v\n    end\n  end\n  return sum\n\
    end", "\tif lst[1] == nil then\n\t\treturn 0\n\telse\n\t\treturn 1 + math.floor(math.sqrt(math.pow(lst[1],\
    \ 2) + math.pow(lst[2], 2)))\n\tend\nend", "  local sum = 0\n  for _, v in pairs(lst)\
    \ do\n    if v <= 0 then return end\n    if math.floor(v) ~= v then return end\n\
    \    sum = sum + v*v\n  end\n  return sum\nend", "\tif not lst[1] then\n\t\treturn\
    \ 0\n\telse\n\t\tlocal sum = 0\n\t\tlocal i = 1\n\t\twhile i <= #lst do\n\t\t\t\
    if lst[i] % 2 == 1 then\n\t\t\t\tsum = sum + lst[i]\n\t\t\telse\n\t\t\t\tsum =\
    \ sum + lst[i] * lst[i]\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\treturn sum\n\
    \tend\nend", "    if #lst == 0 then\n        return 0\n    end\n    \n    local\
    \ ret = 0\n    for i = 1, #lst do\n        if tonumber(lst[i]) ~= nil then\n \
    \           if tonumber(lst[i]) % 2 == 1 then\n                ret = ret + tonumber(lst[i])\n\
    \            end\n        end\n    end\n    \n    return ret\nend", "  if #lst\
    \ == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst do\n    if\
    \ type(lst[i]) == \"number\" then\n      if lst[i] > 0 then\n        if lst[i]\
    \ % 2 == 1 then\n          sum = sum + lst[i]\n        end\n      end\n    end\n\
    \  end\n  return sum\nend", "  local result = lst[1]\n  for i = 2, #lst do\n \
    \   result = result + lst[i]\n  end\n  if #lst == 0 then return 0 end\n  return\
    \ result\nend", "  local total = 0\n  if #lst == 0 then\n    return 0\n  end",
  "  local sum = 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if num >= 0\
    \ then\n      sum = sum + num * num\n    elseif num == 0 then\n      sum = 0\n\
    \    else\n      sum = -sum\n    end\n  end\n  return sum\nend\n</code>\n<|/ a\
    \ tags=lua,functional-programming dscore=2 |>\n<| c |>\nThanks for the answer!\
    \ I think it really helped me understand how to go about this problem. I'm learning\
    \ Lua now and it's amazing what you can accomplish without writing a bunch of\
    \ boilerplate code to solve the problem.\n<|/ c |>\n<| c |>\nHappy to help! If\
    \ this answer was useful, you can upvote it (by clicking on the grey up arrow\
    \ next to it) and if you could accept it by clicking the grey check mark next\
    \ to it, it would be the best answer.\n<|/ c |>\n<| a dscore=2 |>\nIt is a simple\
    \ functional problem to solve using functional programming. Here's how you do\
    \ it with functional programming in Lua 5.2:\n<code>", "   if #lst < 1 then\n\
    \      return 0\n   end\n   local sum = 0\n   for i = 1, #lst do\n      if i %\
    \ 2 == 1 then\n         sum = sum + lst[i]\n      end\n   end\n   return sum\n\
    end", "\tlocal sum = 0\n\tlocal i = 0\n\t\n\tif lst[i] == nil then return 0 end\n\
    \t\n\t-- Calculate the sum of the list except the number at index i\n\t-- The\
    \ sum of all even numbers is the sum of the odd numbers * 2\n\t-- The sum of all\
    \ odd numbers is the sum of the even numbers * 2\n\t-- The sum of all even and\
    \ odd numbers is the sum of the number\n\t-- divided by 2\n\tfor i, v in pairs(lst)\
    \ do\n\t\tif v ~= nil then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\t\n\t-- The\
    \ sum of the odd numbers is sum - sum / 2\n\t-- The sum of the even numbers is\
    \ sum - sum / 2\n\t-- The sum of the even and odd numbers is sum\n\t-- The sum\
    \ of the numbers is sum / 2\n\t-- The sum of the odd numbers is (sum / 2)^2\n\t\
    -- The sum of the even numbers is (sum / 2)^2\n\t-- The sum of the even and odd\
    \ numbers is (sum / 2)^2\n\t-- The sum of the numbers is (sum / 2)^2\n\t-- The\
    \ sum of the odd numbers is (sum / 2)^2\n\t-- The sum of the even numbers is (sum\
    \ / 2)^2\n\t-- The sum of the even and odd numbers is (sum / 2)^2\n\t-- The sum\
    \ of the numbers is (sum / 2)^2\n\t-- The sum of the odd numbers is (sum / 2)^2\n\
    \t-- The sum of the even numbers is (sum / 2)^2\n\t-- The sum of the even and\
    \ odd numbers is (sum / 2)^2\n\t-- The sum of the numbers is (sum / 2)^2\n\t--\
    \ The sum of the odd numbers is (sum / 2)^2\n\t-- The sum of the even numbers\
    \ is (sum / 2)^2\n\t-- The sum of the even and odd numbers is (sum / 2)^2\n\t\
    -- The sum of the numbers is (sum / 2)^2\n\t-- The sum of the odd numbers is (sum\
    \ / 2)^2\n\t-- The sum of the even numbers is (sum / 2)^2\n\t-- The sum of the\
    \ even and odd numbers is (sum / 2)^2\n\t-- The sum of the numbers is (sum / 2)^2\n\
    \t-- The sum of the odd numbers is (sum / 2)^2\n\t-- The sum of the even numbers\
    \ is (sum / 2)^2\n\t-- The sum of the even and odd numbers is (sum / 2)^2\n\t\
    -- The sum of the numbers is (sum / 2)^2\n\t-- ", "  if lst[1] == nil then\n \
    \   return 0\n  end", "  local sum = 0\n  local counter = 0\n  for i, x in ipairs(lst)\
    \ do\n    if x ~= 0 and x ~= nil then\n      local result = x * x\n      sum =\
    \ sum + result\n      counter = counter + 1\n    end\n  end\n  if counter > 0\
    \ then\n    return sum\n  end\n  return 0\nend", "  if lst:len() == 0 then return\
    \ 0 end\n  local sum = 0\n  for i = 1, lst:len() do\n    sum = sum + (lst[i] *\
    \ lst[i])\n  end\n  return sum\nend", "  local sum_total = 0\n  for index, v in\
    \ pairs(lst) do\n    if v > 0 then\n      if v %2 == 1 then\n        sum_total\
    \ = sum_total + v\n      else\n        sum_total = sum_total + v * v\n      end\n\
    \    end\n  end\n  return sum_total\nend", "    local sum = 0\n    for i = 0,\
    \ #lst do\n        local num = lst[i]\n        if num == 0 or not is_integer(num)\
    \ then\n            sum = 0\n            break\n        end\n        sum = sum\
    \ + num * num\n    end\n    return sum\nend", "  local sum = 0\n  \n  if #lst\
    \ > 0 then\n    for i = 1, #lst do\n      if math.floor(lst[i]) ~= lst[i] then\n\
    \        sum = sum + lst[i] * lst[i]\n      end\n    end\n  end", "  local sum\
    \ = 0\n  for i, x in ipairs(lst) do\n    if x ~= 0 then\n      sum = sum + x\n\
    \    end\n    if x%2==0 then\n      sum = 0\n    end\n  end\n  return sum\nend",
  "  if lst==nil then\n    return 0\n  elseif #lst==0 then\n    return 0\n  else\n\
    \    return lst[1]*(lst[1]+2)/2+lst[2]\n  end\nend", "   -- your code here\n \
    \  if #lst == 0 then\n      return 0\n   else\n      local sum = 0\n      for\
    \ i = 1, #lst do\n         if lst[i] >= 0 then\n            sum = sum + lst[i]\
    \ * lst[i]\n         end\n      end\n      return sum\n   end\nend", "    if #lst==0\
    \ then return 0 end\n    local sum=0\n    for i=1,#lst do\n        if lst[i]%2==1\
    \ then sum=sum+lst[i] end\n    end\n    return sum\nend", "\tlocal sum = 0\n\t\
    for _, v in ipairs(lst) do\n\t\tif v ~= 0 then\n\t\t\tsum = sum + v * v\n\t\t\
    end\n\tend\n\treturn sum\nend", "    local sum = 0\n    local is_odd_value", " \
    \   local sum = 0\n    for i = 1, #lst do\n        if lst[i] > 0 then\n      \
    \      sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns a list where each element\
    \ is the product of all inputted numbers, except the first one.\nHINT: you can\
    \ use a double for loop to go through the list.", "  if lst==nil then return 0\
    \ end\n  local total = 0\n  for i=1,#lst do\n    if not is_even(lst[i]) then\n\
    \      total = total + (lst[i] * lst[i])\n    end\n  end\n  return total\nend\n\
    </code>\n<|/ a tags=lua,lua-table |>\n<| c |>\nThank you for your answer. Your\
    \ solution works perfectly. However I wonder if you could point me to a resource\
    \ where I can learn how to solve these kinds of problems. Thanks again.\n<|/ c\
    \ |>\n<| c |>\nYou can search online for \"Lua pattern matching\" and \"Lua pattern\
    \ matching\" should help you. Also check out the Lua reference manual.\n<|/ c\
    \ |>\n<| a tags=lua,lua-table dscore=0 |>\n<code>", "  local sum = 0\n  if #lst\
    \ > 0 then\n    local i = 1\n    while i <= #lst do\n      if tonumber(lst[i])\
    \ % 2 ~= 0 then\n        sum = sum + tonumber(lst[i])\n      end\n      i = i\
    \ + 1\n    end\n  end\n  return sum\nend", "  if lst==nil or lst==[] then return\
    \ 0 end\n  return lst[1]+lst[2]*2+lst[3]*4\nend", '  if not lst then return 0
    end', "  local sum = 0\n  if #lst > 0 then\n    for i=1,#lst do\n      if lst[i]\
    \ > 0 and lst[i] % 2 == 1 then\n        sum = sum + lst[i] * lst[i]\n      end\n\
    \    end\n  end\n  return sum\nend", "  if not lst then return 0 end\n  local\
    \ sum = 0 \n  for _, v in ipairs(lst) do \n    if v % 2 == 1 then sum = sum +\
    \ v end\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #lst do\n \
    \   if math.floor(lst[i]) == lst[i] then\n      if lst[i] % 2 ~= 0 then\n    \
    \    sum = sum + lst[i]\n      end\n    else\n      return 0\n    end\n  end\n\
    \  return sum\nend", "  if lst==nil then return 0 end\n  local sum = 0\n  for\
    \ i=1,#lst do\n    if type(lst[i])=='number' and lst[i] > 0 then\n      sum =\
    \ sum + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\n</cell>\n<cell>\n\
    double_the_difference([-1,-2,3,0,7,1,9,0,5,6,4])\n</cell>\n<cell>", "  local sum\
    \ = 0\n  local count = 0", "  local sum = 0\n  for _, v in ipairs(lst) do\n  \
    \  if v < 0 or (math.type(v) ~= 'number' and v % 1 ~= 0) then\n      sum = 0\n\
    \      break\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    </cell>\n<text>\nProblem 4\nImplement the function my_concat that concatenates\
    \ two given lists.", "\tif not lst then return 0 end\n\tlocal sum = 0\n\tlocal\
    \ num\n\tfor i=1,#lst do\n\t\tnum = lst[i]\n\t\tif num < 0 then break end\n\t\t\
    if i%2 == 1 then\n\t\t\tsum = sum + num * num\n\t\telse\n\t\t\tsum = sum + num\n\
    \t\tend\n\tend\n\treturn sum\nend", "   if lst==nil then\n      return 0\n   end\n\
    \   local s=0\n   local pos=1\n   for n in lst:gmatch(\"%d+\") do\n      if n>0\
    \ then\n         if n%2==1 then\n            s=s+(n-pos)^2\n         end\n   \
    \      pos=pos+1\n      end\n   end\n   return s\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,lua,lua-table |>\n<code>", "  if lst==nil then\n    return\
    \ 0\n  end\n  local sum = 0\n  for i = 1, #lst do\n    local elem = lst[i]\n \
    \   if elem % 2 == 0 then\n      sum = sum + elem\n    end\n  end\n  return sum\n\
    end", "  local sum = 0\n  for _,v in ipairs(lst) do\n    if v ~= 0 then\n    \
    \  sum = sum + math.pow(v,2)\n    end\n  end\n  return sum\nend", "    if lst==nil\
    \ then\n        return 0\n    end", "\tlocal total = 0\n\tfor i = 1, #lst, 2 do\n\
    \t\tif not lst[i] then\n\t\t\tbreak\n\t\tend\n\t\ttotal = total + lst[i] * lst[i]\n\
    \tend\n\treturn total\nend", "    local sum = 0\n    if lst[1] ~= nil then\n \
    \       for i = 1, #lst do\n            if lst[i] ~= nil and (type(lst[i]) ==\
    \ 'number' and lst[i] > 0 and lst[i] % 2 == 1) then\n                sum = sum\
    \ + lst[i]\n            end\n        end\n    end\n    return sum\nend", "  if\
    \ not lst:IsArray() then\n    return 0\n  end", "    if lst==nil then\n      \
    \  return 0\n    end\n    return lst[1]^2+lst[2]^2+lst[3]^2+lst[4]^2+lst[5]^2+lst[6]^2+lst[7]^2+lst[8]^2+lst[9]^2\n\
    end", "  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i = 1,\
    \ #lst do\n    if lst[i]==0 then\n      sum = sum + 0\n    else\n      sum = sum\
    \ + lst[i]*lst[i]\n    end\n  end\n  return sum\nend", "  if #lst == 0 then\n\
    \    return 0\n  end\n  local sum = 0\n  for i = 1, #lst do\n    if type(lst[i])\
    \ == \"number\" and math.floor(lst[i]) ~= lst[i] then\n      sum = sum + lst[i]\n\
    \    end\n  end\n  return sum\nend", "   if lst==nil then\n      return 0\n  \
    \ end\n   local n=0\n   local sum=0\n   for i=1,#lst do\n      if lst[i] % 2==0\
    \ then\n         sum=sum+lst[i]*lst[i]\n      else\n         n=n+1\n         if\
    \ n==1 then\n            sum=sum+lst[i]*lst[i]\n         else\n            sum=sum+lst[i]\n\
    \         end\n      end\n   end\n   return sum\nend\n</code>\n<|/ a tags=lua,lua-table\
    \ dscore=0 |>\n<| c |>\nYou don't need the if/else inside the loop. Just `sum=sum+lst[i]*lst[i]`\
    \ will do.\n<|/ c |>\n<| a tags=lua,lua-table dscore=0 |>\nAs a followup to my\
    \ other answer, here's a function that returns only the numbers in the given list\
    \ that are even.\n<code>", "    local sum = 0\n    for _, v in pairs(lst) do\n\
    \        if v then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum * (sum / 2)\nend", "  if #lst == 0 then\n    return 0\n  end", "  local\
    \ sum_of_squares = 0\n  local num_sum = 0\n  for i = 1, #lst do\n    -- If this\
    \ number is odd, add it to the sum of squares.\n    -- If this number is not odd,\
    \ add it to the number of numbers.\n    -- If the number is negative or not an\
    \ integer, ignore it.\n    if math.floor(lst[i]) ~= lst[i] or #lst[i] < 0 then\
    \ break end\n    sum_of_squares = sum_of_squares + lst[i] * lst[i]\n    num_sum\
    \ = num_sum + 1\n  end\n  if #lst == 0 then return 0 end\n  return num_sum > 1\
    \ and num_sum * sum_of_squares / num_sum or 0\nend", "\tif not lst then return\
    \ 0 end\n\tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tif lst[i] > 0 and not (type(lst[i])\
    \ == \"number\" and math.floor(lst[i]) == lst[i]) then return 0 end\n\t\tsum =\
    \ sum + lst[i]\n\tend\n\treturn sum\nend", "    if lst[1] == nil then return 0\
    \ end\n    if lst[1] == nil then return 0 end\n    local sum = 0 \n    for i =\
    \ 2, #lst do\n        if lst[i] > 0 and lst[i] % 2 ~= 0 then\n            sum\
    \ = sum + lst[i]\n        end\n    end\n    return sum\nend", "  if lst[1] ==\
    \ nil then return 0 end\n  local num = 0\n  local length = #lst\n  for i=1,length\
    \ do\n    if type(lst[i]) == \"number\" then\n      if lst[i] > 0 then\n     \
    \   num = num + lst[i]*lst[i]\n      else\n        num = num + 0\n      end\n\
    \    elseif type(lst[i]) == \"table\" then\n      num = num + double_the_difference(lst[i])\n\
    \    end\n  end\n  return num\nend", "    if not lst[1] then\n        return 0\n\
    \    end\n    return lst[1]:reduce(function(a, b) return a + b end)\nend", " \
    \ if #lst == 0 then\n    return 0\n  end", "   -- Base Case\n   if #lst == 0 then\
    \ return 0 end", "\tlocal ret = 0\n\t\n\tfor i = 1, #lst do\n\t\tret = ret + lst[i]\n\
    \t\tif i > 1 then\n\t\t\tif ret % 2 == 1 then\n\t\t\t\tret = ret - lst[i]\n\t\t\
    \tend\n\t\tend\n\tend\n\t\n\treturn ret\nend", "    local sum = 0\n    for i=1,#lst\
    \ do\n        if ((lst[i]%2) ~= 0) then\n            sum = sum + lst[i]\n    \
    \    end\n    end\n    return sum\nend", "   local total = 0\n   for i = 1, #lst\
    \ do\n      if type(lst[i]) == \"number\" and math.floor(lst[i]) ~= lst.[i] then\n\
    \         total = total + lst[i]\n      end\n   end\n   return total\nend", " \
    \ local result = {}\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      if type(lst[i])\
    \ == \"table\" then\n        table.insert(result, lst[i]:map(function(x)\n   \
    \       return x*x\n        end))\n      else\n        table.insert(result, lst[i]*lst[i])\n\
    \      end\n    end\n  end\n  return sum(result)\nend\n</cell>\n<cell>", "  if\
    \ #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n    if tonumber(lst[i])\
    \ then sum = sum + tonumber(lst[i]) end\n  end\n  return sum * sum\nend", "  \
    \ if not lst then\n      return 0\n   end\n   local sum = 0\n   for i = 1, #lst\
    \ do \n      if i == 1 then\n         sum = sum + lst[i]\n      elseif i % 2 ==\
    \ 1 then\n         sum = sum + lst[i]\n      end\n   end\n   return sum\nend",
  "    if type(lst) == 'table' and #lst==0 then\n        return 0\n    end\n    local\
    \ total = 0\n    for _, v in ipairs(lst) do\n        if v >= 0 and v %2 == 1 then\n\
    \            total = total + v\n        end\n    end\n    return total\nend",
  "  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] < 0 or type(lst[i]) ~= 'number' then break end\n    if i % 2 == 1 then\n\
    \      sum = sum + lst[i]\n    end\n  end\n  return sum\nend", "  local sum =\
    \ 0\n  for i = 1, #lst do\n    if type(lst[i]) == \"number\" then\n      if lst[i]\
    \ > 0 and lst[i] % 2 == 1 then \n        sum = sum + lst[i]\n      end\n    end\n\
    \  end\n  return sum\nend", "    if lst:len() ~= 0 then\n        local squares\
    \ = 0\n        for i = 1, lst:len() do\n            local x = lst:index(i)\n \
    \           if x%2~=0 then\n                squares=squares+x\n            end\n\
    \        end\n        return squares\n    end\n    return 0\nend", "   if #lst\
    \ == 0 then return 0 end\n   local sum = 0\n   for i = 1, #lst do\n      if i\
    \ % 2 == 1 then\n         sum = sum + lst[i]\n      elseif i < #lst - 1 then\n\
    \         sum = sum + lst[i]\n      end\n   end\n   return sum\nend", "   if not\
    \ lst  then\n      return 0\n   end\n   local sum = 0\n   for i = 1, #lst do\n\
    \      if type(lst[i]) == 'number' then\n         if lst[i] ~= math.floor(lst[i])\
    \ then\n            sum = sum + lst[i]*lst[i]\n         end\n      else\n    \
    \     if lst[i] ~= math.floor(lst[i]) or lst[i] ~= math.ceil(lst[i]) then\n  \
    \          sum = sum + lst[i]*lst[i]\n         end\n      end\n   end\n   return\
    \ sum\nend", "  if #lst == 0 then return 0 end\n  if #lst == 1 then return lst[1]\
    \ end\n  local sum = 0\n  local count = 0\n  for i = 1, #lst, 1 do\n    if lst[i]%2\
    \ == 0 then \n      sum = sum + lst[i]\n      count = count+1\n    else\n    \
    \  sum = sum + lst[i]*lst[i]\n      count = count+1\n    end\n  end\n  if count\
    \ == 0 then return 0 end\n  return sum\nend", "  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] > 0 then\n      sum = sum + lst[i]*lst[i]\n    end\n  end\n\
    \  return sum\nend", "  local n = 1\n  local sum = 0\n  for i = 1, #lst do\n \
    \   sum = sum + math.pow(n, 2) + (lst[i] and 1 or 0)\n    n = n + 1\n  end\n \
    \ return sum\nend", "  return lst:filter(function(x) return x:int > 0 end):map(function(x)\
    \ \n    math.pow(x.int, 2))\n  :sum()\nend", "\tif not lst or #lst == 0 then return\
    \ 0 end\n\tlocal sq = 0\n\tfor i = 1, #lst do\n\t\tif lst[i] % 2 ~= 0 then\n\t\
    \t\tsq = sq + lst[i]\n\t\tend\n\tend\n\treturn sq\nend", "  if lst == nil then\n\
    \    return 0\n  end", "  if #lst == 0 then return 0 end\n  local sum = 0\n  for\
    \ i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n  return sum\nend\n</cell>\n\
    <text>\nExercise: Part 2\nWrite a function that takes two vectors and returns\
    \ a vector that contains the dot product of every pair of vectors in the list.\
    \ For example, if you are given two lists x = [[1,2],[3,4]] and y = [[5,6],[7,8]]\
    \ your function should return [5,24,12,38,30,42,18,48,26,12,20,16,12].", "   \
    \ if type(lst) == \"table\" then\n        for i = 1,#lst do\n            if type(lst[i])\
    \ == \"number\" then\n                if lst[i] % 2 == 1 then\n              \
    \      return lst[i]\n                end\n            end\n        end\n    \
    \    return 0\n    end\nend", "\tlocal total = 0\n\tfor i, v in ipairs(lst) do\n\
    \t\tif v ~= nil and v:isNumber() and (v % 2 == 1) then\n\t\t\ttotal = total +\
    \ v\n\t\tend\n\tend", "  local sum = 0\n  for _, x in ipairs(lst) do\n    local\
    \ x_float = tonumber(x)\n    if x_float == x then\n      sum = sum + x\n    elseif\
    \ x_float > 0 and x_float % 2 == 1 then\n      sum = sum + x_float\n    end\n\
    \  end\n  return sum\nend", "  assert(type(lst) == 'table' and #lst > 0, 'double_the_difference()\
    \ expects a list of numbers')\n  -- return the sum of the squares of the odd numbers\
    \ in the list, \n  -- ignoring negative numbers\n  if #lst > 0 then\n    local\
    \ sum = 0\n    for i=1,#lst do\n      if math.floor(lst[i]) ~= lst[i] then \n\
    \        sum = sum + math.pow(lst[i], 2)\n      end\n    end\n    return sum\n\
    \  else\n    return 0\n  end\nend", "  local sum = 0\n  for i = 1, #lst do\n \
    \   if type(lst[i]) == \"number\" then\n      if lst[i] < 0 then\n        sum\
    \ = 0\n        break\n      elseif lst[i] % 2 ~= 0 then\n        sum = sum + lst[i]\n\
    \      end\n    end\n  end\n  return sum\nend", "  if #lst==0 then return 0 end\n\
    \  local sum = 0\n  for i=1,#lst do\n    sum = sum + lst[i]\n    if sum % 2 ==\
    \ 1 then\n      sum = sum - lst[i]\n    end\n  end\n  return sum\nend", "  if\
    \ not lst then return end\n  local sum = 0\n  for i = 1, #lst, 2 do\n    if lst[i]\
    \ > 0 and not lst[i-1] then \n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\n</cell>\n<text>\nExercise: Write a function that prints out a list\
    \ of numbers between 1 and 99 inclusive.", "  if #lst == 0 then\n    return 0\n\
    \  end\n  local total = 0\n  for _, element in ipairs(lst) do\n    if element\
    \ % 2 == 1 then\n      total = total + element\n    end\n  end\n  return total\n\
    end", "   if not lst then return 0 end\n   local sum = 0\n   for _, x in ipairs(lst)\
    \ do\n      if type(x) == 'number' and x ~= 0 then\n         sum = sum + x * x\n\
    \      end\n   end\n   return sum\nend", "\tif #lst == 0 then\n\t\treturn 0\n\t\
    end", "  if #lst == 0 then return 0 end\n  local total = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then total = total + lst[i] end\n  end\n  return total\n\
    end", "  if lst:len() == 0 then\n    return 0\n  else\n    local sum = 0\n   \
    \ for _, v in ipairs(lst) do\n      if not v:isinteger() then\n        return\
    \ 0\n      end\n      sum = sum + v\n    end\n    return sum * sum\n  end\nend",
  "   if #lst == 0 then\n      return 0\n   end", "  local sum = 0\n  local last_number\
    \ = lst[1]\n  for i = 2, #lst do\n    local current = lst[i]\n    if current:isnumber()\
    \ and current ~= last_number then\n      sum = sum + current\n    end\n    last_number\
    \ = current\n  end\n  return sum\nend", "  if lst:len() == 0 then return 0 end\n\
    \  local sum = 0 \n  for i = 1, lst:len() do\n    sum = sum + lst:at(i)\n  end\n\
    \  return sum * sum\nend", '  if not lst then return 0 end']
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
