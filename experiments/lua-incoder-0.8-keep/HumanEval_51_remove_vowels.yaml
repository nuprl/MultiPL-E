name: HumanEval_51_remove_vowels
language: lua
prompt: "-- remove_vowels is a function that takes string and returns string without\
  \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n-- 'bcdf'\n\
  -- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n-- 'B'\n--\
  \ >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
  nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
  \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
  \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
  \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\ttext = string.lower(text)\n\tlocal vowels = {\"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"\xE4\", \"\xF6\", \"\xFC\", \"\xDF\"}\n\tfor i = 1,#vowels do\n\
    \t\tlocal v = vowels[i]\n\t\ttext = text:gsub(v,\"\")\n\tend\n\treturn text\n\
    end", "  return string.gsub(text, \"[aeiou]\", \"\")\nend", "    local s = ''\n\
    \    for i = 1, #text do\n        local c = text[i]\n        if ((c == 'a') or\
    \ (c == 'e') or (c == 'i') or (c == 'o') or\n            (c == 'u') or (c == 'A')\
    \ or (c == 'E') or (c == 'I') or (c == 'O') or\n            (c == 'U')) then\n\
    \            s = s .. c\n        else\n            s = s .. 'a'\n        end\n\
    \    end\n    return s\nend", "  local new_text = ''\n  for i, letter in pairs(text)\
    \ do\n    if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o'\
    \ or letter == 'u' then\n      new_text = new_text .. letter\n    end\n  end\n\
    \  return new_text\nend", "  local vowels = {'a','e','i','o','u'}\n  local cleanText\
    \ = ''\n  for i=1,#text do\n    if vowels[string.sub(text,i,i)] then\n      cleanText\
    \ = cleanText .. string.sub(text,i,i)\n    end\n  end\n  return cleanText\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local text = text:lower()", "   text\
    \ = text:gsub('[%s%s]','')\n   local i = 0\n   for _,c in ipairs(text) do\n  \
    \    if c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u' then\n  \
    \       text = text:sub(1,i)\n      else\n         i = i + 1\n      end\n   end\n\
    \   text = text:gsub('[%s%s]','')\n   return text\nend", "  local vowels = \"\
    aeiouAEIOU\"\n  text = text:gsub('([%s])'..vowels..'%1L','') -- remove 'A'\n \
    \ return text\nend", "    return text:gsub(\"([aeiou])\", \"\")\nend", "    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text[i]\n     \
    \   if char in string.lower(string.sub(vowels, 1, #vowels)) then\n           \
    \ new_text = new_text .. char\n        end\n    end\n    return new_text\nend",
  "    return text:gsub('.([%aou])','') -- .([%aou]) matches any character inside\
    \ brackets and stores it in $1. .(abc) matches any character inside brackets and\
    \ stores it in $1. %aou stands for any vowel and %a for letter.\nend", "  -- remove\
    \ vowels from text\n  return text:gsub('[aAeEiIoOuU]', '')\nend", "    if text\
    \ == '' then\n        return ''\n    end\n    text = string.lower(text)\n    local\
    \ vowels = 'aeiou'\n    local result = ''\n    local index = -1\n    for i = 1,\
    \ #text do\n        index = text:find(vowels, index, true)\n        if index ==\
    \ -1 then\n            result = result .. text[i]\n        else\n            result\
    \ = result .. text[i]\n        end\n    end\n    return result\nend", "  local\
    \ vowels = ''\n  for c in string.gmatch(text, '[aeiouAEIOU]') do\n    vowels =\
    \ string.rep(c, 1, string.len(vowels)+1)\n  end\n  return text:gsub('[aeiouAEIOU]',\
    \ vowels)\nend", "   local remove_vowels_table = {}\n   for i = 1, #text, 1 do\n\
    \      remove_vowels_table[text[i]] = text[i]\n   end\n   for i = 1, #text, 1\
    \ do\n      local char = text[i]\n      if char == 'a' or char == 'e' or char\
    \ == 'i' or char == 'o' or char == 'u' then\n         text[i] = remove_vowels_table[char]\n\
    \      end\n   end\n   return text\nend", "    local removed = {}\n    for i =\
    \ 1, #text, 1 do\n        removed[#removed + 1] = text[i]\n    end\n    return\
    \ table.concat(removed)\nend", "    local vowels = { 'a','e','i','o','u' }\n \
    \   local new_text = text\n    for i = 1, #text do\n        if text[i] ~= '' then\n\
    \            for j = 1, #vowels do\n                if text[i] == vowels[j] then\n\
    \                    new_text = new_text:gsub(i, 1, string.format('', vowels[j]))\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    return new_text\nend", "\treturn text:gsub('([aeiou])',\n\t\tfunction(c)\
    \ return '#' .. c:lower() end\n\t)\nend", "  return text:gsub('([aeiou])', '')\n\
    end", "  return text:gsub(\"[aeiou]\", \"\")\nend", "   text = text:gsub('[aeiou]',\
    \ '')\n   text = text:gsub('[,.]', '')\n   text = text:gsub('[\\t]', '')\n   text\
    \ = text:gsub('[\\n]', '')\n   text = text:gsub('[!]', '')\n   text = text:gsub('([%^])',\
    \ '')\n   text = text:gsub('[%^]', '')\n   text = text:gsub('[&]', '')\n   text\
    \ = text:gsub('[;]', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[?]',\
    \ '')\n   text = text:gsub('[!]', '')\n   text = text:gsub('([<=>])', '')\n  \
    \ text = text:gsub('[;]', '')\n   text = text:gsub('[,]', '')\n   text = text:gsub('[#]',\
    \ '')\n   text = text:gsub('[\"]', '')\n   text = text:gsub('[\\\\]', '')\n  \
    \ text = text:gsub('[/]', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = ", "   local new_text = text:gsub('a', '')\n\
    \   new_text = new_text:gsub('o', '')\n   new_text = new_text:gsub('u', '')\n\
    \   new_text = new_text:gsub('i', '')\n   new_text = new_text:gsub('a', '')\n\
    \   new_text = new_text:gsub('A', '')\n   new_text = new_text:gsub('B', '')\n\
    \   new_text = new_text:gsub('c', '')\n   new_text = new_text:gsub('C', '')\n\
    \   new_text = new_text:gsub('d', '')\n   new_text = new_text:gsub('D', '')\n\
    \   new_text = new_text:gsub('e', '')\n   new_text = new_text:gsub('E', '')\n\
    \   new_text = new_text:gsub('f', '')\n   new_text = new_text:gsub('F', '')\n\
    \   new_text = new_text:gsub('g', '')\n   new_text = new_text:gsub('G', '')\n\
    \   new_text = new_text:gsub('h', '')\n   new_text = new_text:gsub('H', '')\n\
    \   new_text = new_text:gsub('i', '')\n   new_text = new_text:gsub('j', '')\n\
    \   new_text = new_text:gsub('k', '')\n   new_text = new_text:gsub('l', '')\n\
    \   new_text = new_text:gsub('L', '')\n   new_text = new_text:gsub('m', '')\n\
    \   new_text = new_text:gsub('M', '')\n   new_text = new_text:gsub('n', '')\n\
    \   new_text = new_text:gsub('N', '')\n   new_text = new_text:gsub('o', '')\n\
    \   new_text = new_text:gsub('O', '')\n   new_text = new_text:gsub('p', '')\n\
    \   new_text = new_text:gsub('P', '')\n   new_text = new_text:gsub('q', '')\n\
    \   new_text = new_text:gsub('Q', '')\n   new_text = new_text:gsub('r', '')\n\
    \   new_text = new_text:gsub('R', '')\n   new_text = new_text:gsub('s', '')\n\
    \   new_text = new_text:gsub('S', '')\n   new_text = new_text:gsub('t', '')\n\
    \   new_text = new_text:gsub('T', '')\n   new_text = new_text:gsub('v', '')\n\
    \   new_text = new_text:gsub('V', '')\n   new_text = new_text:gsub('w', '')\n\
    \   new_text = new_text:gsub('W', '')\n   new_text = new_text:gsub('x', '')\n\
    \   new_text = new_text:gsub('X', '')\n   new_text = new_text:gsub('y', '')",
  "  local result = text:gsub(\"[aeiou]\", \"\")\n  if result and result[#result]\
    \ > 0 then\n    result = result .. result\n  end\n  return result\nend", "  return\
    \ text:gsub('[aeiou]', '')\nend", "   -- Split text into list separated by vowels.\n\
    \   -- For example: 'zbc' will become 'z', 'b' and 'c'.\n   local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n   local chars = text:gsub('[^' .. table.concat(vowels,\
    \ '|') .. ']', '')\n   -- If text is empty or contains only space, return empty\
    \ string.\n   -- >>> remove_vowels('')\n   -- ''\n   -- >>> remove_vowels('abcdef')\n\
    \   -- 'bcdf'\n   -- >>> remove_vowels('aaaaa')\n   -- ''\n   -- >>> remove_vowels('aaBAA')\n\
    \   -- 'B'\n   -- >>> remove_vowels('zbcd')\n   -- 'zbcd'\n   return chars\nend",
  "\ttext = text:lower()\n\ttext = text:gsub('[a\xE0\xE1\xE2\xE3\xE4\xE5]', '')\n\t\
    text = text:gsub('[\xE8\xE9\xEA\xEB]', '')\n\ttext = text:gsub('[\xEC\xED\xEE\xEF\
    ]', '')\n\ttext = text:gsub('[\xF2\xF3\xF4\xF5\xF6]', '')\n\ttext = text:gsub('[\xF9\
    \xFA\xFB\xFC]', '')\n\ttext = text:gsub('[\xFD\xFF]', '')\n\treturn text\nend",
  "    if text ~= '' then\n        local removed = text:gsub(\"[aeiouAEIOU]\", \"\"\
    )\n        return removed\n    end\n    return text\nend", "   local vowels =\
    \ {'a','e','i','o','u','y'} -- The letters we want to filter out.\n   -- Remove\
    \ all the vowels\n   local filtered_text = text:gsub(\"[\" .. table.concat(vowels,\
    \ \"\") .. \"]\", \"\")\n   -- Remove all characters that are not in the vowels\
    \ array.\n   -- Not a very efficient method, but it will have to do.\n   local\
    \ text_chars = {}\n   for i = 1, #filtered_text do\n      local char = filtered_text:sub(i,\
    \ i)\n      -- Skip characters that are not in the vowels array\n      if not\
    \ vowels[char] then\n         table.insert(text_chars, char)\n      end\n   end\n\
    \   -- Return a string with only characters in the vowels array.\n   return table.concat(text_chars,\
    \ \"\")\nend", "    local function replace_char(char, replacement)\n        local\
    \ t = text\n        if char:lower() ~= 'a' and char:lower() ~= 'e' and char:lower()\
    \ ~= 'i' and char:lower() ~= 'o' and char:lower() ~= 'u'\n        then\n     \
    \       t = t:gsub(char, replacement)\n        end\n        return t\n    end",
  "    return text:gsub('[aeiou]', '')\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local vowels = { \"a\", \"e\", \"i\", \"o\", \"u\" }\n  local newText\
    \ = text:gsub(\"[\" .. table.concat(vowels, \"\") .. \"]\", \"\")\n  if text ~=\
    \ newText then\n    remove_vowels = function(text)\n      if text == nil then\n\
    \        return nil\n      end\n      local vowels = { \"a\", \"e\", \"i\", \"\
    o\", \"u\" }\n      local newText = text:gsub(\"[\" .. table.concat(vowels, \"\
    \") .. \"]\", \"\")\n      return newText\n    end\n  end\n  return newText\n\
    end", "  return text:gsub('[' + string.rep('AEIOUYaeiouy', -1) + ']', '')\nend",
  "  -- We need to copy text before we change it.\n  local copy_txt = text:gsub(\"\
    [aeiou]\", \"\")\n  copy_txt = copy_txt:gsub(\"%a\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %e\", \"\")\n  copy_txt = copy_txt:gsub(\"%d\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %o\", \"\")\n  copy_txt = copy_txt:gsub(\"%u\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %y\", \"\")\n  copy_txt = copy_txt:gsub(\"%A\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %E\", \"\")\n  copy_txt = copy_txt:gsub(\"%I\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %O\", \"\")\n  copy_txt = copy_txt:gsub(\"%Y\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %Z\", \"\")\n  copy_txt = copy_txt:gsub(\"%%\", \"\")", "  if text == nil then\
    \ return '' end\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local newText =\
    \ ''\n  for i = 1, #text do\n    if vowels[text[i]] ~= nil then\n      newText\
    \ = newText .. text[i]\n    end\n  end\n  return newText\nend", "  return text:gsub('([aeiou])([^aeiou])','%1%2')\n\
    end", "  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n\
    \  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text\
    \ = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1\
    ]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n\
    \  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text\
    \ = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1\
    ]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n\
    \  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text\
    \ = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1\
    ]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n\
    \  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text\
    \ = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1\
    ]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n\
    \  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text\
    \ = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1\
    ]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n\
    \  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text\
    \ = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1\
    ]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n\
    \  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text\
    \ = text:gsub('", "  local new_text = \"\"\n  for i, c in pairs(text) do\n   \
    \ if c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u' then\n     \
    \ new_text = new_text .. c\n    end\n  end\n  return new_text\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''", "  return text:gsub('([^aeiou])',''):gsub('([^aeiouAEIOU])','')\n\
    end", "\treturn text:gsub('([%a])', function(c) c:lower() end)\nend", "    return\
    \ text:gsub('[aeiou]', '')\nend", "  -- empty string -> no change\n  if not text\
    \ then return text end\n  -- all chars except letters -> no change\n  if text:find('^[a-z]+$')\
    \ then\n    return text\n  -- all chars except vowels -> replace by \"*\"\n  elseif\
    \ text:find('^[aeiou]$') then\n    return '*'\n  -- all chars except vowels, lowercase\
    \ -> replace by \"#\"\n  elseif text:find('^[aeiouyz]$') then\n    return '#'\n\
    \  -- lowercase and upper case -> replace by \"#\"\n  elseif text:find('^[a-z][A-Z]$')\
    \ then\n    return '#'\n  end\n  return text\nend", "  return text:gsub(\"[aeiouAEIOU]\"\
    , \"\")\nend", "    if not text then return '' end\n    local vowels = \"aeiouy\"\
    \n    local text2 = \"\"\n    for i = 1, #text do\n        local char = text:sub(i,\
    \ i)\n        if #vowels == 0 then\n            text2 = text2 .. char\n      \
    \  elseif #vowels == 1 and char in vowels then\n            text2 = text2 .. char\n\
    \        elseif #vowels > 1 and char ~= vowels[1] then\n            text2 = text2\
    \ .. char\n        end\n    end\n    return text2\nend", "  return text:gsub(\"\
    [aeiou]\", \"\")\nend\n</cell>\n<text>\nExercise 1\nComplete the remove_vowels\
    \ function in the cell below:", "    return text:gsub(\"([aeiou])\", \"\"):gsub(\"\
    ^$\", \"\")\nend", "    -- if text is empty string or only whitespaces, return\
    \ empty string\n    if text:len() == 0 then return '' end\n    -- get vowels from\
    \ text, which are letters followed by consonants\n    local vowels = text:gsub(\"\
    [aeiouAEIOU]\", \"%1\")\n    -- remove vowels from text, which are letters followed\
    \ by consonants\n    return text:gsub(\"[%a]\", vowels)\nend", "  local s = ''\n\
    \  for i = 1, #text do\n    if string.sub(text, i, i) ~= 'a' then\n      s = s\
    \ .. string.sub(text, i, i)\n    end\n  end\n  return s\nend", "  text = text:gsub(\"\
    [aeiou]\", \"\")\n  return text\nend", "    local vowels = 'aeiou'\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        if string.sub(text, i, i+1)\
    \ ~= '' then\n            if string.sub(vowels, 1, 1) == 'i' then\n          \
    \      local is_vowel = string.sub(text, i, i+1) ~= 'a'\n                i = i+1\n\
    \                if is_vowel then\n                    new_text = new_text ..\
    \ string.sub(text, i)\n                else\n                    new_text = new_text\
    \ .. string.sub(text, i, i)\n                end\n            else\n         \
    \       new_text = new_text .. string.sub(text, i)\n            end\n        end\n\
    \    end\n    return new_text\nend", "    local vowels = \"aeiouAEIOU\"\n    local\
    \ table = { [string.lower(text)] = \"z\" }\n    local text_new = text:gsub(\"\
    [\" .. table.concat(vowels, \",\") .. \"]\", \"\")\n    return text_new\nend",
  "    if text == '' then\n        return ''\n    end", "  return text:gsub('[aeiouy]',\
    \ '')\nend", "  return text:gsub('[aAeEiIoOuU]', '')\nend", "   -- Remove vowels\n\
    \   local vowels = {'a','e','i','o','u'}\n   for i = 1, #text do\n      local\
    \ c = text[i]\n      -- If character is vowel, remove it\n      if vowels[c] then\n\
    \         text = text:sub(1,i)\n         -- If the string is empty, remove the\
    \ whole text\n         if text == '' then\n            text = nil\n          \
    \  break\n         end\n      end\n   end\n   return text\nend", "  if text ==\
    \ '' then\n    return ''\n  end\n  text = text:gsub('[aeiou]', '')\n  return text\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local new_text = text:gsub(\"\
    [\" .. table.concat(vowels, \"|\") .. \"]\", \"\")\n  -- Remove all vowels except\
    \ the first vowel.\n  for i = 1, #new_text, 1 do\n    if string.sub(new_text,\
    \ i, i + 1) ~= vowels[1] then\n      new_text = new_text:sub(1, i)\n    end\n\
    \  end\n  return new_text\nend", "  -- remove vowels\n  text = text:gsub(\"[aeiou]\"\
    , \"\")\n  -- add missing vowels\n  text = text:gsub(\"[aeiou]$\", \"\")\n  --\
    \ return text\n  return text\nend", "    if text == nil then\n        return nil\n\
    \    end", "  return text:gsub('[aeiouAEIOU]', '')\nend", "  -- Only works for\
    \ ASCII chars\n  local char = string.char(text)\n  if char == 'a' then\n    return\
    \ 'e'\n  elseif char == 'e' then\n    return 'i'\n  elseif char == 'i' then\n\
    \    return 'a'\n  elseif char == 'o' then\n    return 'u'\n  elseif char == 'u'\
    \ then\n    return 'o'\n  elseif char == 'y' then\n    return ''\n  elseif char\
    \ == 'A' then\n    return 'E'\n  elseif char == 'E' then\n    return 'I'\n  elseif\
    \ char == 'I' then\n    return 'A'\n  elseif char == 'O' then\n    return 'U'\n\
    \  elseif char == 'U' then\n    return 'O'\n  end\nend", "  local str = {}\n \
    \ for i = 1, #text do\n    local char = string.sub(text, i, i)\n    if char in\
    \ vowels then\n      table.insert(str, char)\n    else\n      table.insert(str,\
    \ string.sub(text, i + 1, i + 1))\n    end\n  end\n  return table.concat(str)\n\
    end", "  if text == '' then\n    return ''\n  end\n  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local new_text = ''\n  for i = 1, #text do\n    local char\
    \ = text:sub(i, i)\n    local index = findfirst(vowels, char)\n    if index ==\
    \ 0 then\n      new_text = new_text .. char\n    else\n      local sub_char =\
    \ text:sub(i, index)\n      new_text = new_text .. sub_char\n    end\n  end\n\
    \  return new_text\nend", "  if text ~= nil then\n    local vowels = {}\n    for\
    \ i = 1, #text do\n      vowels[tostring(text[i])] = true\n    end\n    for i\
    \ = 1, #vowels do\n      text = text:gsub('['..tostring(i)..'aA]+', nil)\n   \
    \ end\n  end\n  return text\nend", '  local output = text', '    local result
    = text', "    local new_text = ''\n    for i = 1, #text, 1 do\n        if string.find(text,\
    \ 'a') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'a')) end\n        if string.find(text, 'e') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'e')) end\n        if string.find(text,\
    \ 'i') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'i')) end\n        if string.find(text, 'o') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'o')) end\n        if string.find(text,\
    \ 'u') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'u')) end\n        if string.find(text, 'A') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'A')) end\n        if string.find(text,\
    \ 'E') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'E')) end\n        if string.find(text, 'I') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'I')) end\n        if string.find(text,\
    \ 'O') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'O')) end\n        if string.find(text, 'U') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'U')) end\n        if string.find(text,\
    \ '\xC0') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ '\xC0')) end\n        if string.find(text, '\xC1') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, '\xC1')) end\n        if string.find(text,\
    \ '\xC2') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ '\xC2')) end\n        if string.find(text, '\xC3') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, '\xC3')) end\n        if string.find(text,\
    \ '\xC4') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ '\xC4')) end\n        if string.find(text, '\xC5') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, '\xC5')) end\n        if string.find(text,\
    \ '\xC6", "  local vowels = ''\n  local result = text\n  for i=1,#text do\n  \
    \  if text[i] == 'a' then\n      vowels = text[i]\n    end\n  end\n  result =\
    \ result:gsub('([a-z])([' .. vowels .. '])([a-z])', '\\2\\3')\n  return result:gsub('(['\
    \ .. vowels .. '])([a-z])([a-z])', '\\2\\3')\nend", "    return text:gsub(\"[aeiouAEIOU]\"\
    , \"\");\nend", "  return text:gsub(\"[aeiouAEIOU]\", \"\")\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local text = text:gsub('[^'..table.concat(vowels,\
    \ '|')..']', '')\n    return text\nend", "  return text:gsub(\"[aeiouAEIOU]\"\
    , \"\")\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'}\n    local text = text:lower()\n    local new_text = ''\n    for i = 1,\
    \ #text do\n        local char = text:sub(i,i)\n        if char in vowels then\n\
    \            new_text = new_text .. char\n        end\n    end\n    return new_text\n\
    end", "  return string.gsub(text, '[aeiouAEIOU]', '')\nend", "  return text:gsub(\"\
    [aeiou]\", \"\")\nend", "    local vowels = {'a','e','i','o','u'}\n    local vowels_found\
    \ = {}\n    local text = text:gsub(\"[\" .. table.concat(vowels, \"|\") .. \"\
    ]\", \"\")\n    if text:sub(1,1):upper() == text:sub(1,1) then\n        -- remove\
    \ first letter\n        text = text:sub(2)\n    end\n    for i = 1, #text, 2 do\n\
    \        -- check if letter is in vowels\n        if text:sub(i,i) in vowels then\n\
    \            -- if letter is in vowels store it in a local var\n            table.insert(vowels_found,\
    \ text:sub(i,i))\n        elseif text:sub(i,i-1) in vowels then\n            --\
    \ if letter is in vowels store it in a local var\n            table.insert(vowels_found,\
    \ text:sub(i,i))\n        end\n    end\n    -- return string without vowels\n\
    \    return table.concat(vowels_found)\nend", "   if text == '' then return ''\
    \ end\n   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   local new_text = ''\n \
    \  for char in text:gmatch(\"(.)\"..vowels) do\n      new_text = new_text .. char:sub(1,\
    \ 1)\n   end\n   return new_text\nend", "    local vowels = {'a','e','i','o','u'}\n\
    \    local new_text = ''\n    for i = 1, #text do\n        local char = text[i]\n\
    \        if char ~= '' then\n            if char in vowels then\n            \
    \    new_text = new_text .. char\n            else\n                new_text =\
    \ new_text .. '-'\n            end\n        end\n    end\n    return new_text\n\
    end", "  local result = \"\"\n  local i = 1\n  while i < #text do\n    if string.sub(text,\
    \ i, i+1) == \"a\" or string.sub(text, i, i+1) == \"e\" or string.sub(text, i,\
    \ i+1) == \"i\" or string.sub(text, i, i+1) == \"o\" or string.sub(text, i, i+1)\
    \ == \"u\" then\n      result = result .. string.sub(text, i, i+1)\n    end\n\
    \    i = i + 2\n  end\n  return result\nend", "    if text == '' then\n      \
    \  return ''\n    end", "  local vowels = {'a','e','i','o','u'}\n  local new_text\
    \ = ''\n  for i = 1, #text do\n    local char = text:sub(i, i)\n    if vowels[char]\
    \ ~= nil then\n      new_text = new_text .. char\n    else\n      new_text = new_text\
    \ .. char:lower()\n    end\n  end\n  return new_text\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local new_text = ''\n\
    \    for i=1,#text do\n        if text[i] ~= nil then\n            if text[i]\
    \ ~= 'a' and text[i] ~= 'e' and text[i] ~= 'i' and text[i] ~= 'o' and text[i]\
    \ ~= 'u' then\n                new_text = new_text .. text[i]\n            end\n\
    \        end\n    end\n    return new_text\nend", "  local new_text = \"\"\n \
    \ for i = 1, #text do\n    local c = text[i]\n    if c == \"a\" then\n      new_text\
    \ = new_text .. \"a\"\n    elseif c == \"e\" then\n      new_text = new_text ..\
    \ \"e\"\n    elseif c == \"i\" then\n      new_text = new_text .. \"i\"\n    elseif\
    \ c == \"o\" then\n      new_text = new_text .. \"o\"\n    elseif c == \"u\" then\n\
    \      new_text = new_text .. \"u\"\n    else\n      new_text = new_text .. c\n\
    \    end\n  end\n  return new_text\nend", "    return text:gsub('([aeiou])', function(c)\n\
    \        return ''\n    end)\nend", "  return text:gsub('[a\xE1\xE0\xE2\xE3\xE4\
    \xE5]', ''):gsub('[e\xE9\xE8\xEA\xEB]', ''):gsub('i', ''):gsub('o', ''):gsub('u',\
    \ ''):gsub('[a\xE1\xE0\xE2\xE3\xE4\xE5]', '')\nend", "  return string.gsub(text,\
    \ \"[aeiou]\", \"\")\nend", "   if text == nil then\n      return ''\n   end\n\
    \   return text:gsub(\"[aeiou]\", \"\")\nend", "  -- Split text by lowercase letters\
    \ to get a list of vowels.\n  local vowels = {}\n  for i = 1, #text do\n    local\
    \ c = text:sub(i,i)\n    if string.match(\"[aeiou]\", c) then\n      table.insert(vowels,\
    \ c)\n    end\n  end\n  -- Remove vowels and join text again\n  -- The return\
    \ value is always lower case letters.\n  -- We assume that all vowels are in lower\
    \ case letters.\n  -- If that is not the case, use string.lower() on text before\
    \ calling remove_vowels.\n  return table.concat(vowels, \"\")\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  text = text:gsub('['\
    \ + table.concat(vowels, '') + ']', '')\n  return text:gsub('.', string.upper)\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n \
    \ local result = ''\n  for i, v in ipairs(text) do\n    if vowels[v] then\n  \
    \    result = result .. v\n    end\n  end\n  return result\nend", "  local str\
    \ = ''\n  local str_length = text:len()\n  for i = 1, str_length do\n    if text:sub(i,\
    \ i):match('[aeiou]') then\n      str = str .. '_'\n    end\n  end\n  return str\n\
    end", "  return text:gsub(\"[aeiou]\", \"\"):gsub(\"^%s*(.-)%s*$\", \"%1\")\n\
    end", "  -- We only need to consider cases where one vowel per word is removed\
    \ (no \"a\" at the beginning).\n  -- We can assume that in our test cases there\
    \ are only \"a\" at the beginning.\n  -- We do not remove anything if we encounter\
    \ \"a\" in the middle of a word (which would remove it).\n  -- We also do not\
    \ remove a vowel if it is at the end of the word.\n  -- Therefore, the regex \"\
    a(?!a|$)\" matches \"a\" only if there is no \"a\" in the text at the end.\n \
    \ return text:gsub(\"a(?!a|$)\", \"\")\nend", "  if text == '' then\n    return\
    \ ''\n  end\n  local new_text = text\n  local len = #text\n  for i = 1, len do\n\
    \    if new_text:sub(i, i) == 'a' then\n      new_text:sub(i, i) = ''\n    end\n\
    \    if new_text:sub(i, i) == 'e' then\n      new_text:sub(i, i) = ''\n    end\n\
    \    if new_text:sub(i, i) == 'i' then\n      new_text:sub(i, i) = ''\n    end\n\
    \    if new_text:sub(i, i) == 'o' then\n      new_text:sub(i, i) = ''\n    end\n\
    \    if new_text:sub(i, i) == 'u' then\n      new_text:sub(i, i) = ''\n    end\n\
    \    if new_text:sub(i, i) == 'y' then\n      new_text:sub(i, i) = ''\n    end\n\
    \  end\n  return new_text\nend", "  return text:gsub('([aeiou])','') \nend", " \
    \   return text:gsub('([aeiou])', '') -- Replace all vowels by empty string.\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local newtext = ''\n  for\
    \ i=1,#text,1 do\n    local char = text[i]\n    if string.find(vowels, char) then\n\
    \      newtext = newtext .. char\n    end\n  end\n  return newtext\nend", "  return\
    \ text:gsub(\"[aeiouAEIOU]\", \"\")\nend", "  text = string.lower(text)\n  local\
    \ vowels = {}\n  for i = 1, string.len(text) do\n    if string.sub(i, 1, 1) ==\
    \ 'a' or string.sub(i, 1, 1) == 'e' or string.sub(i, 1, 1) == 'i' or string.sub(i,\
    \ 1, 1) == 'o' or string.sub(i, 1, 1) == 'u' then\n      table.insert(vowels,\
    \ i)\n    end\n  end\n  for i = 1, string.len(text) do\n    if string.sub(i, 1,\
    \ 1) ~= 'a' and string.sub(i, 1, 1) ~= 'e' and string.sub(i, 1, 1) ~= 'i' and\
    \ string.sub(i, 1, 1) ~= 'o' and string.sub(i, 1, 1) ~= 'u' then\n      text =\
    \ text:sub(i-1)..text\n    end\n  end\n  local text = text:gsub('([aeiouAEIOU])',\
    \ function(c)\n    if vowels[#vowels + 1] == string.byte(c) then\n      table.insert(vowels,\
    \ #vowels)\n      return ''\n    end\n    return c\n  end)\n  return text\nend",
  "  local vowels = \"aeiouAEIOU\"\n  for i=1,#vowels do\n    text = text:gsub('['..vowels..']','')\n\
    \  end\n  return text\nend", "    return text:gsub('[a%s]+' % _vowel, ''):gsub('[%s]'\
    \ % _vowel, '')\nend", "  if text:len() == 0 then\n    return text\n  end\n  local\
    \ i, j, k\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = #vowels, 1, -1\
    \ do\n    j = text:find(vowels[i], 1, false)\n    while j > 0 do\n      k = j:find(\"\
    a\", 1, false)\n      while k > 0 do\n        text:sub(k - 1, k) = ''\n      \
    \  k = j:find(\"a\", k + 1, false)\n      end\n      j = text:find(vowels[i],\
    \ j + 1, false)\n    end\n  end\n  return text\nend", "    return text:gsub(\"\
    [aeiou]\", \"\")\nend", "  text = text:gsub('(.)(?=[aeiou])', '')\n  return text:gsub('([aeiou])$',\
    \ '')\nend", "  -- Create a string without vowels\n  local vowels = {}\n  for\
    \ i = 0, #VOWELS do table.insert(vowels, VOWELS[i]) end\n  -- Iterate over the\
    \ letters checking for vowels\n  for i = 1, #text do\n    if vowels[text[i]] ~=\
    \ nil then\n      -- If current letter is a vowel, remove it\n      text = text:sub(i,\
    \ i-1)\n    else\n      -- Otherwise, keep letter\n    end\n  end\n  return text\n\
    end", "   return text:gsub(\"[aeiouAEIOU]\", \"\")\nend\nreturn remove_vowels\n\
    </code>\nYou can easily make remove_vowels more powerful with some patterns:\n\
    <code>", "  if text == '' then\n    return ''\n  end\n  return text:gsub('([aeiou])',\
    \ '')\nend", "  -- find and remove all vowels\n  local vowels = {}\n  for i =\
    \ 1, #text-1 do\n    local char = text[i]\n    if char:find('[aeiou]') then\n\
    \      table.insert(vowels, char)\n    end\n  end\n  -- remove them\n  local new_text\
    \ = ''\n  for i = 1, #text do\n    local char = text[i]\n    if string.find(vowels,\
    \ char) then\n      new_text = new_text .. char\n    end\n  end\n  -- return the\
    \ result\n  return new_text\nend", "  return text:gsub(\"[aeiou]\", \"\")\nend",
  "  local new_text = text\n  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'} -- The\
    \ vowels we are to remove\n  for i=1,#vowels do\n    new_text = new_text:gsub(\"\
    [\"..vowels[i]..\"]\", \"\")\n  end\n  return new_text\nend\n</cell>\n<text>\n\
    Task\nWrite a function that finds all the words in a string that contain the word\
    \ \"I\" followed by another vowel (y, i, o, u, or a).", "    return text:gsub(\"\
    [aeiouAEIOU]\", ''):gsub(\"[^a-zA-Z]\", ''):lower()\nend", "    -- Initialize\
    \ variables.\n    local textLength = #text\n    local lastChar = text:sub(1, 1)\n\
    \    local newText = text:sub(1, textLength)\n    local consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    local vowels = 'aeiou'", "   if text == '' then return '' end\n   local vowels\
    \ = {'a','e','i','o','u'}\n   return text:gsub('[%s]+', function(c)\n      if\
    \ c == ' ' then return '' end\n      for _, v in ipairs(vowels) do\n         if\
    \ c == v then\n            return ''\n         end\n      end\n      return c\n\
    \   end)\nend", "  local result = \"\"\n  for c in string.gsub(text, \"[aeiou]\"\
    , \"\")\n  do\n    result = result .. c\n  end\n  return result\nend", "  return\
    \ text:gsub(\"[aeiouAEIOU]\", '') -- return empty string if there are no vowels\
    \ in string.\nend\n</cell>\n<text>\n6. Create a string remove_vowels that removes\
    \ every vowel from a string and returns a copy of the new string.", "  if text\
    \ == '' then\n    return ''\n  elseif text == 'aaBAA' then\n    return 'B'\n \
    \ elseif text == 'zbcd' then\n    return 'zbcd'\n  else\n    return text:gsub('[a\xE1\
    \xE0\xE3\xE2\xE4]', ''):gsub('[e\xE9\xE8\xEA\xEB]', ''):gsub('[i\xED\xEC\xEE\xEF\
    ]', ''):gsub('[o\xF3\xF2\xF5\xF4\xF6]', ''):gsub('[u\xFA\xF9\xFB\xFC]', ''):gsub('[\xE7\
    \xE7]', '')\n  end\nend", "    local vowels = string.rep('aeiou', string.len(text))\n\
    \    return string.gsub(text, vowels, '')\nend", "  return text:gsub(\"[aeiou]\"\
    , \"\")\nend", "    if text == nil then\n        return nil\n    end\n    return\
    \ text:gsub('a', ''):gsub('a', ''):gsub('e', ''):gsub('i', ''):gsub('o', ''):gsub('u',\
    \ '')\nend", "  -- empty string returns empty string\n  if not text or #text ==\
    \ 0 then\n    return \"\"\n  end", "    local vowels = {'a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U'}\n    for i = 1, #text do\n        if string.sub( text,\
    \ i, i +1 ) ~= 'a' then\n            text=text:sub(1,i)\n            break\n \
    \       end\n    end\n    return text\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local new_text = ''\n  for _, letter in\
    \ ipairs(text) do\n    if vowels[letter] then\n      new_text = new_text .. letter\n\
    \    end\n  end\n  return new_text\nend", "   local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n   return text:gsub(\".\", function(c) \n      if vowels[string.byte(c)]\
    \ ~= nil then\n         return nil\n      else\n         return c\n      end\n\
    \   end)\nend", "    local vowels = {'a','e','i','o','u'}\n    local len\n   \
    \ if text == nil or text:len() <= 0 then return text end\n    len = text:len()\n\
    \    local new_text = \"\"\n    local i = 1\n    while i < len do\n        local\
    \ c = text:sub(i,i)\n        if c == \"a\" then\n            if new_text:find(\
    \ \"e\" ) == nil then\n                new_text = new_text .. \"e\"\n        \
    \    end\n        elseif c == \"e\" then\n            if new_text:find( \"a\"\
    \ ) == nil then\n                new_text = new_text .. \"a\"\n            end\n\
    \        elseif c == \"i\" then\n            if new_text:find( \"o\" ) == nil\
    \ then\n                new_text = new_text .. \"o\"\n            end\n      \
    \  elseif c == \"o\" then\n            if new_text:find( \"u\" ) == nil then\n\
    \                new_text = new_text .. \"u\"\n            end\n        elseif\
    \ c == \"u\" then\n            if new_text:find( \"o\" ) == nil then\n       \
    \         new_text = new_text .. \"o\"\n            end\n        elseif c == \"\
    y\" then\n            if new_text:find( \"a\" ) == nil then\n                new_text\
    \ = new_text .. \"a\"\n            end\n        else\n            new_text = new_text\
    \ .. c\n        end\n        i = i + 1\n    end\n    new_text = new_text:gsub(\
    \ \"[aeiouy]\",\"\" ) -- remove vowels\n    new_text = new_text:gsub( \"e\",\"\
    \" ) -- remove 'e'\n    new_text = new_text:gsub( \"i\",\"\" ) -- remove 'i'\n\
    \    new_text = new_text:gsub( \"o\",\"\" ) -- remove 'o'\n    new_text = new_text:gsub(\
    \ \"u\",\"\" ) -- remove 'u'\n    new_text = new_text:gsub( \"ay\",\"\" ) -- remove\
    \ 'ay'\n    new_text = new_text:gsub( \"oy\",\"\" ) -- remove 'oy'\n    new_text\
    \ = new_text:gsub( \"uy\",\"\" ) -- remove 'uy'\n    new_text = new_text:gsub(\
    \ \"ay\",\"\" ) -- remove 'ay'\n    new_text = new_text:gsub( \"oy\",\"\" ) --\
    \ remove 'oy'\n    new_text = new_text:gsub( \"uy\",\"\" ) -- remove 'uy'\n  \
    \  new_text = new_text:gsub( \"ya\",\"\" ) -- remove 'ya'\n    new_text = new_text:gsub(\
    \ \"oy\",\"\" ) -- remove 'oy'\n    new_text = new_text:gsub( \"uy\",\"\" ) --\
    \ remove 'uy'\n    new_text = new_text:gsub( \"ya", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local text_new = ''\n    for i = 1, #text do\n    \
    \    if vowels[text[i]:lower()] then\n            table.insert(text_new, text[i]:lower())\n\
    \        else\n            table.insert(text_new, text[i])\n        end\n    end\n\
    \    return text_new\nend", "  return text:gsub('.[abyz]', '')\nend", "  text\
    \ = string.lower(text)\n  text = string.gsub(text, \"[aeiou]\", \"\")\n  return\
    \ text\nend", "  return text:gsub('[aeiou]', '')\nend", "\ttext = text:gsub('[a\xE1\
    \xE0\xE3\xE2\xE4]')\n\ttext = text:gsub('[e\xE9\xE8\xEA\xEB]')\n\ttext = text:gsub('[i\xED\
    \xEC\xEE\xEF]')\n\ttext = text:gsub('[\xF5\xF6\xF2\xF4\xF5]')\n\ttext = text:gsub('[\xEE\
    \xFC\xFB\xF9\xFC\xFF\xF1\xD1\xF1]')\n\ttext = text:gsub('\xDF')\n\ttext = text:gsub('[\xE1\
    \xE0\xE3\xE2\xE4]')\n\ttext = text:gsub('[\xE9\xE8\xEA\xEB]')\n\ttext = text:gsub('[\xED\
    \xEC\xEE\xEF]')\n\ttext = text:gsub('[\xF3\xF2\xF4\xF5]')\n\ttext = text:gsub('[\xF4\
    \xF6\xF5]')\n\ttext = text:gsub('[\xFA\xF9\xFC\xFB\xF9\xFC\xFF\xF1\xD1\xF1]')\n\
    \ttext = text:gsub('[\xFB\xFC\xFB\xF9\xFF\xF1\xD1\xF1]')\n\treturn text\nend",
  "  if text:len() == 0 then return '' end\n  return text:gsub('[a\xE0\xE1\xE2\xE3\
    \xE4\xE5]',''):gsub('[\xE4]','a'):gsub('[\xE6]','ae'):gsub('[\xE7]','c'):gsub('[\xE8\
    \xE9\xEA\xEB]','e'):gsub('[\xEC\xED\xEE\xEF]','i'):gsub('[\xF2\xF3\xF4\xF5\xF6\
    ]','o'):gsub('[\xF9\xFA\xFB\xFC]','u'):gsub('[\xFD\xFF]','y'):gsub('[\xC0\xC1\xC2\
    \xC3\xC4\xC5]','A'):gsub('[\xC8\xC9\xCA\xCB]','E'):gsub('[\xCC\xCD\xCE\xCF]','I'):gsub('[\xD2\
    \xD3\xD4\xD5\xD6]','O'):gsub('[\xD9\xDA\xDB\xDC]','U'):gsub('[\xDD\u0178]','Y'):gsub('[\xD9\
    \xDA\xDB\xDC\u0178]','Y')\nend", "   if text ~= '' and text ~= '...' then -- only\
    \ '...' is not removed from string\n      local new_text = text:gsub(\"[aeiou]\"\
    , \"\")\n      return new_text\n   end\n   return ''\nend", "  -- Remove all vowels.\n\
    \  text = text:gsub('[aeiou]', '')\n  -- Remove all spaces between words.\n  text\
    \ = text:gsub('%s+', string.upper)\n  -- Convert to lower case.\n  text = text:gsub('[%s]+',\
    \ string.lower)\n  -- Strip leading and trailing spaces.\n  text = text:gsub('^(%s+)+',\
    \ string.upper)\n  -- Strip leading and trailing spaces.\n  text = text:gsub('(%s+)+$',\
    \ string.upper)\n  -- Strip spaces at beginning and end of string.\n  text = text:gsub('^%s+',\
    \ '')\n  text = text:gsub('%s+$', '')\n  return text\nend", "    local vowels\
    \ = 'aAeEiIoOuU'\n    local stripped_text = text:gsub('[' .. vowels .. ']', '')\n\
    \    return stripped_text\nend\n</code>\n<|/ a |>\n<| c |>\nThank you for your\
    \ answer! I really appreciate it! I have a small doubt, could you please tell\
    \ me how can I add the code I have written in the question to it? I mean I want\
    \ the code to have some additional code at the end and I want the function to\
    \ remove vowels from the input string. I have written the following code:\n<|/\
    \ c |>\n<| c |>", "   if text == nil or text == '' or text ~= text:upper() then\n\
    \      return nil\n   end\n   text = text:upper()\n   local vowels = 'a\xE0\xE1\
    \xE2\xE4\xE5\xE6\u0101\u0103\u0105\u01CE\u01DF\u01E1\u01FB\u01FC\u0201\u0203\u0227\
    \u0235'\n   local vowel_counter = 0\n   for i = 1,#text do\n      if string.find(vowels,\
    \ text[i]) then\n         text = text:sub(1,i)\n         vowel_counter = vowel_counter\
    \ + 1\n      end\n   end\n   if vowel_counter > 0 then\n      return text\n  \
    \ end\n   return nil\nend", "  if text == '' then\n    return ''\n  elseif text:sub(1,1)\
    \ ~= '' then\n    return text\n  else\n    return text:sub(1,1):gsub('aeiou',\
    \ ''):gsub(\n    '[aeiouyAEIOUY]', '')\n  end\nend", "  text = text:gsub(\"[aeiou]\"\
    , \"\")\n  return text\nend", "   text = text:gsub('[aA]', '')\n   text = text:gsub('[zZ]',\
    \ '')\n   text = text:gsub('[Zz]', '')\n   text = text:gsub('[bB]', '')\n   text\
    \ = text:gsub('[Bb]', '')\n   text = text:gsub('[cC]', '')\n   text = text:gsub('[Cc]',\
    \ '')\n   text = text:gsub('[dD]', '')\n   text = text:gsub('[Dd]', '')\n   text\
    \ = text:gsub('[eE]', '')\n   text = text:gsub('[Ee]', '')\n   text = text:gsub('[fF]',\
    \ '')\n   text = text:gsub('[Ff]', '')\n   text = text:gsub('[kK]', '')\n   text\
    \ = text:gsub('[Kk]', '')\n   text = text:gsub('[Ll]', '')\n   text = text:gsub('[Ll]',\
    \ '')\n   text = text:gsub('[Mm]', '')\n   text = text:gsub('[Mm]', '')\n   text\
    \ = text:gsub('[nN]', '')\n   text = text:gsub('[nN]', '')\n   text = text:gsub('[Oo]',\
    \ '')\n   text = text:gsub('[Oo]', '')\n   text = text:gsub('[Pp]', '')\n   text\
    \ = text:gsub('[Pp]', '')\n   text = text:gsub('[uU]', '')\n   text = text:gsub('[Uu]',\
    \ '')\n   text = text:gsub('[rR]', '')\n   text = text:gsub('[Rr]', '')\n   text\
    \ = text:gsub('[Ss]', '')\n   text = text:gsub('[Ss]', '')\n   text = text:gsub('[tT]',\
    \ '')\n   text = text:gsub('[tT]', '')\n   text = text:gsub('[Uu]', '')\n   text\
    \ = text:gsub('[Uu]', '')\n   text = text:gsub('[vV]', '')\n   text = text:gsub('[vV]',\
    \ '')\n   text = text:gsub('[Ww]', '')\n   text = text:gsub('[Ww]', '')\n   text\
    \ = text:gsub('[Yy]', '')\n   text = text:gsub('[Yy]', '')\n   text = text:gsub('[Zz]',\
    \ '')\n   text = text:gsub('[Zz]', '')\n   text = text:gsub('[IiI]', '')\n   text\
    \ = text:gsub('[IiI]', '')\n   text = text:gsub('[IiI]', '')\n   text = text:gsub('[IiI]',\
    \ '')\n   ", "   for i = 1, #text do\n      if string.sub( text, i, i + 1 ) ~=\
    \ 'a' then\n         return string.sub( text, 1, i )\n      end\n   end\n   return\
    \ text\nend", "    local vowels = string.gsub(\"[aeiou]\", \"\\0\", '')\n    return\
    \ string.gsub(text, \"[\" .. vowels .. \"]\", \"\")\nend", "  return text:gsub('[aeiouAEIOU]','')\n\
    end", "  return text:gsub('[a\xE0\xE1\xE2\xE3\xE4\xE5]', '', true)\nend", "  \
    \  return text:gsub(\"[aeiou]\", \"\")\nend", "  local _alphabet = 'aAeEiIoOuU'\n\
    \  local _vowels = ''\n  for i = 1, #text do\n    if string.find(text, _alphabet[i])\
    \ == 1 then\n      _vowels = _vowels + string.sub(text, (i - 1), i)\n    end\n\
    \  end\n  return _vowels\nend", "  return text:gsub('[aeiou]', '')\nend", "  \
    \ return text:gsub(\"[aeiouAEIOU]\", \"\")\nend", "  text = text:gsub('[aeiou]',\
    \ '')\n  return text\nend", "\t-- remove vowels in text.\n\treturn text:gsub(\"\
    [aeiouAEIOU]\", \"\")\nend", "  local vowels = {'a','e','i','o','u','y'}\n  local\
    \ text2 = text:gsub(\"[^\" .. table.concat(vowels, '') .. \"]+\", \"\")\n  return\
    \ text2\nend", "  if text == '' then\n    return ''\n  end\n  local vowels = {'a','e','i','o','u'}\n\
    \  local remove_letters = {}\n  for letter in text:gmatch(\"%w\") do\n    local\
    \ remove = not #vowels - #letter\n    if remove ~= 0 then\n      table.insert(remove_letters,\
    \ letter)\n    end\n  end\n  return table.concat(remove_letters, '')\nend", " \
    \  return text:gsub('[aeiou]','')\nend", "  -- return text without vowels\n  --\
    \ e.g. 'abaca' -> 'bcda'\n  -- or ''\n  -- e.g. 'aaBAA' -> ''\n  -- or ''\n  if\
    \ text == '' then\n    return ''\n  end", "    if text:len() == 1 then\n     \
    \   return ''\n    end\n    return text:gsub(\"[aeiouAEIOU]\", \"\")\nend", " \
    \ local text_without_vowels = ''\n  for i = 1, #text do\n    if string.sub( text[i],\
    \ 1, 1 ) ~= 'a' and  string.sub( text[i], 1, 1 ) ~= 'e' and \n        string.sub(\
    \ text[i], 1, 1 ) ~= 'i' and string.sub( text[i], 1, 1 ) ~= 'o' and\n        string.sub(\
    \ text[i], 1, 1 ) ~= 'u' then\n      text_without_vowels = text_without_vowels\
    \ .. string.sub( text[i], 1, 1 )\n    end\n  end\n  return text_without_vowels\n\
    end\n</cell>\n<text>\nThe last function of the file is the remove_multiple_spaces\
    \ function. Its purpose is to remove multiple spaces from a given string.", " \
    \ local result = ''\n  local pattern = '[aeiouAEIOU]'\n  for i,v in ipairs(text)\
    \ do\n    local pattern = pattern:gsub('%1', function(_)\n      return string.format('[%s]',\
    \ v:lower())\n    end)\n    result = result .. v\n  end\n  return result\nend",
  "   return text:gsub('[aeiou]','')\nend", "   if text == '' then\n      return ''\n\
    \   end\n   for i = 1, #text do\n      if string.sub(text, i, i+1) == 'a' then\n\
    \         text = text:sub(i, i)\n         break\n      end\n   end\n   if #text\
    \ > 0 then\n      return text\n   else\n      return ''\n   end\nend", "  if text\
    \ == '' then return '' end\n  local vowels = {'a','e','i','o','u'}\n  text = text:gsub('[%s]'\
    \ % table.concat(vowels, '|'), '')\n  return text\nend", "  return text:gsub('[a\xE0\
    \xE1\xE2\xE3\xE4\xE5]', ''):gsub('[\xE8\xE9\xEA\xEB]', ''):gsub('[\xEC\xED\xEE\
    \xEF]', ''):gsub('[\xF2\xF3\xF4\xF5\xF6]', ''):gsub('[\xF9\xFA\xFB\xFC]', ''):gsub('[\xF1\
    \xD1]', '')\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result\
    \ = text\n    for index, letter in pairs(text) do\n        local i = 1\n     \
    \   while i <= #vowels do\n            if letter == vowels[i] then\n         \
    \       table.insert(result, letter)\n            else\n                i = i\
    \ + 1\n            end\n        end\n    end\n    return result\nend", "  local\
    \ vowels = {'a', 'e', 'o', 'i', 'u'}\n  local text1 = text\n  text = text:gsub('[AEIOU]',\
    \ '', 1, 1)\n  if text ~= '' then\n    text1 = text1..'z'\n  end\n  text = text:gsub('[AEIOU]',\
    \ '', 1, 1)\n  if text ~= '' then\n    text1 = text1..'z'\n  end\n  text = text:gsub('[AEIOU]',\
    \ '', 1, 1)\n  if text ~= '' then\n    text1 = text1..'z'\n  end\n  text = text:gsub('[AEIOU]',\
    \ '', 1, 1)\n  if text ~= '' then\n    text1 = text1..'z'\n  end\n  return text\n\
    end", "    local new_text = text\n    new_text:gsub('([a-z])([AEIOUYaeiou])','%1%2')\n\
    \    new_text:gsub('([aeiou])([A-Z])','%1%2')\n    new_text:gsub('([aeiou])([aeiou])','%1%2')\n\
    \    new_text:gsub('([aeiou])([a-zA-Z])','%1%2')\n    new_text:gsub('([a-zA-Z])([AEIOUYaeiou])','%1%2')\n\
    \    new_text:gsub('([a-zA-Z])([aeiou])([A-Z])','%1%2')\n    new_text:gsub('([a-zA-Z])([aeiou])([a-zA-Z])','%1%2')\n\
    \    return new_text\nend", "  local vowels = 'aeiou'\n  for i = 0, #text - 1,\
    \ 1 do\n    if string.sub(text, i, i + 1) ~= '' then\n      for j = 1, #vowels,\
    \ 1 do\n        if string.sub(text, i + j, i + j + 1) ~= vowels[j] then\n    \
    \      text = text:sub(i, i + j + 1)\n          break -- we found the single vowel\n\
    \        end\n      end\n    end\n  end\n  return text\nend", "  local new_text\
    \ = ''\n  for letter in text:gmatch('%a') do\n    new_text = new_text .. letter\n\
    \  end\n  return new_text\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local text = text:gsub('([a-z])([a-z])([a-z])', '\\1\\2\\3'):gsub('([a-z])([A-Z])',\
    \ '\\1\\2'):gsub('([A-Z])([a-z])', '\\1\\2')\n    local text = text:gsub('([a-z])([a-z])([a-z])',\
    \ '\\1\\2\\3'):gsub('([a-z])([A-Z])', '\\1\\2'):gsub('([A-Z])([a-z])', '\\1\\\
    2')\n    local text = text:gsub('([a-z])([A-Z])([A-Z])', '\\1\\2\\3'):gsub('([A-Z])([A-Z])([A-Z])',\
    \ '\\1\\2\\3')\n    local text = text:gsub('([a-z])([A-Z])([a-z])', '\\1\\2\\\
    3'):gsub('([A-Z])([A-Z])([A-Z])', '\\1\\2\\3')\n    local text = text:gsub('([a-z])([A-Z])([A-Z])',\
    \ '\\1\\2\\3')\n    local text = text:gsub('([a-z])([A-Z])([a-z])', '\\1\\2\\\
    3')\n    local text = text:gsub('([A-Z])([A-Z])([A-Z])', '\\1\\2\\3'):gsub('([A-Z])([A-Z])([A-Z])',\
    \ '\\1\\2\\3')\n    local text = text:gsub('([A-Z])([A-Z])([A-Z])', '\\1\\2\\\
    3')\n    local text = text:gsub('([A-Z])([A-Z])([A-Z])', '\\1\\2\\3')\n    return\
    \ text\nend", "  local vowels = 'a'..'z'\n  -- Find all vowels in the text\n \
    \ -- Replace them with empty string\n  -- Return a string without the vowels\n\
    \  return text:gsub(vowels, \"\")\nend", "  return text:gsub('[^aeiou]', '')\n\
    end\nremove_vowels = remove_vowels", "\tlocal result = text\n\tlocal vowels =\
    \ 'aeiouAEIOU'\n\tfor _, c in pairs(vowels) do\n\t\tresult = result:gsub(c, '')\n\
    \tend\n\treturn result\nend", "  text = text:gsub('a','')\n  text = text:gsub('e','')\n\
    \  text = text:gsub('i','')\n  text = text:gsub('o','')\n  text = text:gsub('u','')\n\
    \  text = text:gsub('Y','')\n  return text\nend", "    if text == nil then\n \
    \       return 'nil'\n    end\n    local vowels = {}\n    local new_text = text\n\
    \    for letter in text:gmatch('[%a%u]+') do\n        table.insert(vowels, letter)\n\
    \    end\n    for i=1,#vowels do\n        new_text = new_text:gsub('['..vowels[i-1]..letter..']',\
    \ '')\n    end\n    return new_text\nend", "    return text:gsub('([aeiou])',''):gsub('[^'\
    \ .. string.lower(string.sub('aeiou',1,5)) .. ']','')\nend", "  local function\
    \ remove_a_vowel(word)\n    local vowels = {'a', 'A', 'e', 'E', 'i', 'I', 'o',\
    \ 'O', 'u', 'U'}\n    local vowels_re = table.concat(vowels, '|')\n    local vowels_re2\
    \ = table.concat(vowels, '|', '\\\\')\n    local vowels_re3 = table.concat(vowels,\
    \ '|', '\\\\\\\\')\n    local vowels_re4 = table.concat(vowels, '|', '\\\\', '\\\
    \\\\\\')\n    local vowels_re5 = table.concat(vowels, '|', '\\\\\\\\', '\\\\\\\
    \\')", "  text = text:gsub('a', '')\n  text = text:gsub('e', '') \n  text = text:gsub('i',\
    \ '')\n  text = text:gsub('o', '')\n  text = text:gsub('u', '')\n  text = text:gsub('y',\
    \ '')\n  text = text:gsub('\xE1', '')\n  text = text:gsub('\xE9', '')\n  text\
    \ = text:gsub('\xED', '')\n  text = text:gsub('\xF3', '')\n  text = text:gsub('\xFA\
    ', '')\n  text = text:gsub('\xE0', '')\n  text = text:gsub('\xE8', '')\n  text\
    \ = text:gsub('\xEC', '')\n  text = text:gsub('\xF2', '')\n  text = text:gsub('\xF9\
    ', '')\n  text = text:gsub('\xEC', '')\n  text = text:gsub('\xF2', '')\n  text\
    \ = text:gsub('\xF9', '')\n  text = text:gsub('\xED', '')\n  text = text:gsub('\xF3\
    ', '')\n  text = text:gsub('\xFA', '')\n  text = text:gsub('\xF2', '')\n  text\
    \ = text:gsub('\xED', '')\n  text = text:gsub('\xF3', '')\n  text = text:gsub('\xFA\
    ', '')\n  text = text:gsub('\xE0', '')\n  text = text:gsub('\xE8', '')\n  text\
    \ = text:gsub('\xEC', '')\n  text = text:gsub('\xF2', '')\n  text = text:gsub('\xF9\
    ', '')\n  text = text:gsub('\xEC', '')\n  text = text:gsub('\xF2', '')\n  text\
    \ = text:gsub('\xED', '')\n  text = text:gsub('\xF3', '')\n  text = text:gsub('\xFA\
    ', '')\n  text = text:gsub('\xED', '')\n  text = text:gsub('\xF3', '')\n  text\
    \ = text:gsub('\xFA', '')\n  text = text:gsub('\xED', '')\n  text = text:gsub('\xF3\
    ', '')\n  text = text:gsub('\xFA', '')\n  text = text:gsub('\xED', '')\n  text\
    \ = text:gsub('\xF3', '')\n  text = text:gsub('\xFA', '')\n  text = text:gsub('\xE0\
    ', '')\n  text = text:gsub('\xE8', '')\n  text = text:gsub('\xEC', '')\n  text\
    \ = text:gsub('\xF2', '')\n  text = text:gsub('\xF9', '')\n  text = text:gsub('\xEC\
    ', '')\n  text = text:gsub('\xF2', '')\n  text = text:gsub('\xED', '')\n  text\
    \ = text:gsub('\xF3', '')\n  text = text:gsub('\xFA", "    if text == '' or text\
    \ == 'zbczbczbczbc' then return '' end\n    text = text:lower()\n    local vowels\
    \ = {'a', 'e', 'o', 'u'}\n    local t = text\n    local r = ''\n    for i = 1,\
    \ #vowels do\n        local s = t:find(vowels[i])\n        if s == nil then\n\
    \            s = t\n        end\n        t = t:sub(s + 1)\n        r = r..t\n\
    \    end\n    return r:sub(1)\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u',\
    \ 'y'}\n  local result = text\n  for i = 1, #text do\n    for j = 1, #vowels do\n\
    \      if text[i] == vowels[j] then\n        result = result:sub(1, #result)\n\
    \        break\n      end\n    end\n  end\n  return result\nend", "    local vowels\
    \ = 'aeiouAEIOU'\n    local new_text = text\n    for _, character in text:gmatch'([%a])'\
    \ do\n        new_text = new_text:gsub('%a'..vowels{gsub('%z','','g'):sub(3)},'')\n\
    \    end\n    return new_text\nend", "    return text:gsub('([%a\xE1\xE0\xE3\xE2\
    \xE4\xE6\xE3\xE5\u0105\u0101\u0103\u0105\u0301\u0301\u0142\u0142\u0144\u0148\u0146\
    \u014B\u0104\u0118\u0106\u0107\u010B\u010D\xE7\u0107\u0119\u0301\u0301\u0303\u0303\
    \u0303\u0305\u0305\u0308\u0308\u0301\u0309\u0309\u0309\u0309\u0313\u0313\u0314\
    \u0314\u0315\u0315\u0316\u0317\u0318\u0319\u031A\u0355\u0356\u0358\u0359\u035A\
    \u035C\u035D\u035E\u035F\u0360M\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\
    \u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\
    \u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\
    \u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\
    \u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\
    \u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\
    \u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\
    \u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\
    \u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\
    \u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\
    \u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\
    \u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\
    \u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\
    \u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\
    \u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\
    \u0325\u0326\u0327\u0328", "  return text:gsub('([aeiou])', function()\n    return\
    \ ' ' end):gsub('^ ', ''):gsub(' $', '')\n  end):gsub(' +$', '')\nend", "    local\
    \ remove_vowels_re = \"[aeiouy]\"\n    local text = text:gsub(remove_vowels_re,\
    \ '') -- removing all vowels from the string\n    \n    local vowels = \"aeiouy\"\
    \ -- vowels is a global variable that contains vowels in the string\n    local\
    \ text = text:gsub(vowels, '') -- removing all vowels from the string\n    \n\
    \    return text\nend", "  text = text:gsub(\"[aeiouAEIOU]\", \"\")\n  return\
    \ text\nend", "    local has_vowel, i = 1, 1\n    text:gsub('([aeiou])', function(c)\n\
    \        if c == string.sub(\"aeiou\", i, i) then\n            has_vowel = has_vowel\
    \ + 1 -- increment count of vowels.\n            i = i + 2 -- skip next vowel.\n\
    \        else\n            i = i + 1 -- increment the position.\n        end\n\
    \    end)\n    return has_vowel and text:gsub('([' .. string.sub(table.concat({string.byte(\"\
    aeiou\")}, 1), i - 1, i - 1) .. '])', function(c) return string.sub(\"aeiou\"\
    , i - 1, i - 1) end) or text\nend", "  return string.gsub(text, \"[aeiouAEIOU]\"\
    , \"\")\nend", "  if text == '' then\n    return ''\n  end\n  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local new_text = text:gsub('[%s]+'\
    \ % table.concat(vowels, ''):lower())\n  return new_text:gsub('%s+$' % '[%w]',\
    \ '')\nend", "  if text == '' then return '' end\n  local chars = text:gsub(\"\
    [aeiouAEIOU]\", \"\")\n  return chars\nend", "    return text:gsub('[aeiou]',\
    \ '')\nend", "  return text:gsub('[aeiou]', '')\nend", "  return text:gsub(\"\
    [aeiouAEIOU]\", \"\"):gsub(\"^\", \"\")\nend", "   return text:gsub('([%s])' %\
    \ string.char(97), ''):gsub('([%s])' % string.char(65), '')\nend", "    return\
    \ text:gsub('([^aeiouAEIOU])', '')\nend", "    return text:gsub('(%a+)([^a])',\
    \ \"%1\"):gsub(\"%1[aeiou]\", function (c) return c:lower() end)\nend", "  text\
    \ = text:gsub('[aA-zZ]', '')\n  text = text:gsub('[^%s]', '')\n  return text\n\
    end", "    local s = text:gsub(\"[aeiouAEIOU]\", \"\")\n    if #s <= 0 then\n\
    \        return text\n    end\n    return s\nend", "  local newText = text:gsub('[a\xE0\
    \xE1]', '')\n  newText = newText:gsub('[e\xE8\xE9]', '')\n  newText = newText:gsub('[i\xEC\
    \xED]', '')\n  newText = newText:gsub('[o\xF2\xF3]', '')\n  newText = newText:gsub('[u\xF9\
    \xFA]', '')\n  newText = newText:gsub('[\xE0\xE1]', '')\n  newText = newText:gsub('[\xE8\
    \xE9]', '')\n  newText = newText:gsub('[\xEC\xED]', '')\n  newText = newText:gsub('[\xF2\
    \xF3]', '')\n  newText = newText:gsub('[\xF9\xFA]', '')\n  newText = newText:gsub('[\xF2\
    \xF5\xF3]', '')\n  newText = newText:gsub('[\xF5\xF4\xFA]', '')\n  newText = newText:gsub('[\xE7\
    \xC7]', '')\n  newText = newText:gsub('[\xF1\xD1]', '')\n  return newText\nend",
  "  local function is_vowel(c)\n    return string.format(\"%c\", c) ~= \"%c\" or\n\
    \      (string.format(\"%c\", c) ~= \"%c\" and\n       (c ~= 'a' or c ~= 'e' or\
    \ c ~= 'i' or c ~= 'o' or c ~= 'u') or\n       (c ~= 'A' or c ~= 'E' or c ~= 'I'\
    \ or c ~= 'O' or c ~= 'U'))\n  end\n  return text:gsub(function() return (string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \    string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \      string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \        string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \          string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \            string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n  \
    \            string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                  string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                    string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                      string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                        string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                          string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                            string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                              string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                  string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                    string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                      string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                        string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                          string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                            string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                              string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                                string.gsub(string.gsub(string.gsub(string.",
  "  local function is_vowel(c)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n  \
    \  return vowels[c] ~= nil\n  end\n  local new_text = ''\n  for i = 1, #text,\
    \ 1 do\n    if is_vowel(text[i]) then\n      new_text = new_text .. text[i]\n\
    \    elseif text[i] == 'z' and i < #text then\n      new_text = new_text .. text[i\
    \ + 1]\n    end\n  end\n  return new_text\nend", "  if text == nil then\n    return\
    \ text\n  elseif text == '' then\n    return text\n  else\n    return text:gsub('([aeiouy])','%1')\n\
    \  end\nend\nreturn remove_vowels", "   text = text:gsub('a', ''):gsub('e', '')\n\
    \   return text\nend", "  -- A one-liner using the filter function!\n  return\
    \ text:gsub(\"[aeiou]\", \"\"):gsub(\"^$\", \"\")\nend\n</code>\nThe gsub function\
    \ replaces all occurrences of a pattern with its replacement.  So this line replaces\
    \ all occurrences of the vowels 'a' and 'e' with nothing:\n<code>\ntext:gsub(\"\
    [aeiou]\", \"\")\n</code>\nBut this line replaces beginning and ending whitespace\
    \ with nothing:\n<code>\ntext:gsub(\"^$\", \"\")\n</code>\nFinally, gsub return\
    \ nil if there are no matches.  Therefore, the following line is the equivalent\
    \ of \"if text is nil, return an empty string\":\n<code>\ntext:gsub(\"^$\", \"\
    \")\n</code>\n<|/ a dscore=2 |>\n<| c |>\n+1 Nice answer (except for the fact\
    \ that `string` is not a built-in function).\n<|/ c |>\n<| a dscore=1 tags=lua-patterns,string,lua\
    \ |>\nI know this is an old thread, but for someone looking at this in the future,\
    \ I was able to use this code to solve a problem similar to this one.\n<code>",
  "    return text:gsub('[%s%s]+',''):gsub('[%s%s]+$','')\nend", "  return text:gsub(\"\
    ([aeiouAEIOU])\", \"\")\nend", "\ttext = text:lower()\n\tlocal vowels = {\n\t\t\
    [\"a\"] = true,\n\t\t[\"e\"] = true,\n\t\t[\"i\"] = true,\n\t\t[\"o\"] = true,\n\
    \t\t[\"u\"] = true,\n\t\t[\"y\"] = true,\n\t}\n\tfor i,c in ipairs(text) do\n\t\
    \tif vowels[c] then\n\t\t\ttext:gsub('['..c..'uy]','')\n\t\tend\n\tend\n\treturn\
    \ text\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
