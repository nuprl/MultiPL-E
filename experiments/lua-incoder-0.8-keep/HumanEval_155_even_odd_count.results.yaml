name: HumanEval_155_even_odd_count
language: lua
results:
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    error(\"\
    Negative numbers are not supported\")\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprf2hciax.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.abs(num)\n  if\
    \ num < 0 then\n    return 0, 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt9g4asji.lua:24: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ nil\n  end\n  local odd = math.floor(math.log10(num)) + 1\n  local even = num\
    \ - math.floor(num / 10^odd)\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4btkhjw.lua:17:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpi4btkhjw.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 1\n\
    \    for i = 1, #num % 2 do\n        even = even + 1\n    end\n    for i = 1,\
    \ #num % 2 do\n        odd = even + 1\n    end\n    return even, odd\nend\n</code>\n\
    The above function takes in any number (as long as its even) and returns the number\
    \ of even and odd digits.\nNow, you can use the previous function to find out\
    \ how many digits are even, and how many digits are odd.\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu48bdj54.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal num_str = string.format(\"\
    %.0f\", num)\n\tlocal num_str_len = #num_str\n\t-- if the string is not long enough\
    \ to contain two digits\n\tif num_str_len ~= 2 then\n\t\terror(\"The given number\
    \ is not long enough to contain even and odd digits\")\n\tend\n\t-- if the number\
    \ of digits is even\n\tif num_str % 2 = 0 then\n\t\treturn 1, 1\n\tend\n\t-- if\
    \ the number of digits is odd\n\tlocal odd_num_str = num_str:sub(1, num_str_len)\n\
    \t-- if the number of odd digits is even\n\tif odd_num_str % 2 = 0 then\n\t\t\
    return 1, 0\n\tend\n\t-- if the number of odd digits is odd\n\tlocal even_num_str\
    \ = odd_num_str:sub(1, num_str_len)\n\treturn 0, odd_num_str:sub(1, num_str_len)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1ys8rugm.lua:13: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local count = 0\n  -- count\
    \ the number of odd digits\n  for i = 1, num:len() do\n    count = count + ((num\
    \ % (10^(i-1))) % 2)\n  end\n  return count, (num:len() - count)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjq0nmux.lua:8:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpwjq0nmux.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwjq0nmux.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = {}, {}\n\
    \  for i = 1, math.floor(math.log(num) / math.log(10)) + 1 do\n    local exp =\
    \ (10 ** i) - 1\n    even[exp] = even[exp] or 0\n    odd[exp] = odd[exp] or 0\n\
    \    even[exp] = even[exp] + 1\n    odd[exp] = odd[exp] + 1\n  end\n  return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx3potlhe.lua:8: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   if num < 0 then\n      return\
    \ {0, 1}\n   end\n   local even, odd = 0, 1\n   local tmp = num\n   while tmp\
    \ ~= 0 do\n      if tmp % 2 == 0 then\n         even = even + 1\n      else\n\
    \         odd = odd + 0\n      end\n      tmp = math.floor(tmp/2)\n   end\n  \
    \ return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4d_44gw.lua:26:\
    \ expected: {1, 1}\nactual: {0, 1}\nstack traceback:\n\t/tmp/tmpz4d_44gw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Base Case\n  if num ==\
    \ 0 then\n    return (1, 0)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpumsjno6l.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = math.floor(num\
    \ / 2)\n    local odd = num - even\n    return (even, odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1_ihzgrh.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local n = math.abs(num)\n\
    \    local even = 0\n    local odd = 1\n    while n > 0 do\n        local remaining\
    \ = math.mod(n, 10)\n        if remaining == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + remaining\n        end\n        n =\
    \ math.trunc(n / 10)\n    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeolp2ljg.lua:18: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = #math.floor(num\
    \ / 2)\n    local odd = #(num - even)\n    return (even, odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwdltyewm.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   local num_digits = math.log(num)\
    \ / math.log(2)\n   return math.ceil(num_digits), math.floor(num_digits)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3up_es2o.lua:13:\
    \ expected: {0, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmp3up_es2o.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local n, s = 0, 1\n    while\
    \ n > 0 do\n        s, n = s+1, (n*num+s)/2\n    end\n    return s\nend\n</cell>\n\
    <text>\nThe code above can be explained by example. Let's look at some cases.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6c9t1qer.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local n = 0\n  local even\
    \ = 0\n  local odd = 0\n  while num do\n    local div = math.floor(num / 10)\n\
    \    if div % 2 == 0 then\n      even = even + 1\n    end\n    odd = odd + div\
    \ % 2\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpihm6579z.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == nil then\n    return\
    \ 0, 0\n  end\n  local odd = 0\n  local even = 0\n  for i = 1, math.floor(math.log(abs(num),\
    \ 2)) do\n    local is_even = math.fmod(num, 2) == 0\n    local is_odd = not is_even\n\
    \    local tmp = (is_even, odd) -- This is to make the return tuple immutable\
    \ after assignment\n    even = even + is_even\n    odd = odd + is_odd\n    num\
    \ = math.floor(num / 2)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpedi3157_.lua:14: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = num / 2\n  local\
    \ odd = num % 2\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m_usbi5.lua:14:\
    \ expected: {0, 1}\nactual: 3.5\nstack traceback:\n\t/tmp/tmp9m_usbi5.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num < 0 then return nil\
    \ end\n    local even, odd\n    \n    for i = 1, num do\n        local remainder\
    \ = num % 10\n        if remainder == 0 then\n            even = even+1\n    \
    \    else\n            odd = odd+1\n        end\n        num = num / 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvmnl847l.lua:20: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   if num < 0 then\n      return\
    \ 0, 0\n   end\n   local even = num / 2\n   local odd = num % 2\n   return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3685qyi3.lua:17:\
    \ expected: {0, 1}\nactual: 3.5\nstack traceback:\n\t/tmp/tmp3685qyi3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then\n    return\
    \ 0, 0\n  end\n  local even, odd = 0, 1\n  for i = 1, math.floor(math.log(num,\
    \ 2)) do\n    local digit = num % 10\n    num = num / 10\n    if digit % 2 ==\
    \ 0 then\n      even = even+1\n    else\n      odd = odd+1\n    end\n  end\n \
    \ return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpadvmh9eh.lua:25:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpadvmh9eh.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even = 1\n\tlocal odd\
    \ = 0\n\tlocal n = math.abs(num)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnw2801eu.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even, odd = 0, 1\n\t\
    while true do\n\t\tlocal last = math.floor((num - 1) / 2)\n\t\tif last == 0 then\n\
    \t\t\tbreak\n\t\telse\n\t\t\teven = even + 1\n\t\t\tnum = last - 1\n\t\tend\n\t\
    end\n\twhile true do\n\t\tlocal last = math.floor((num + 1) / 2)\n\t\tif last\
    \ == 0 then\n\t\t\tbreak\n\t\telse\n\t\t\todd = odd + 1 \n\t\t\tnum = last + 1\n\
    \t\tend\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local n = 0\n    while num\
    \ > 0 do\n        num = math.floor(num / 10)\n        n = n + 1\n    end\n   \
    \ return n, num % 10 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pfs0gp9.lua:17:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp9pfs0gp9.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\t-- if num is negative, return\
    \ (odd, even) tuple, otherwise (even, even)\n\tif num < 0 then\n\t\treturn (1,\
    \ 1)\n\telse\n\t\tlocal odd = 1\n\t\tlocal even = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwi71o_mb.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Convert integer to string\n\
    \  local str = tostring(num)\n  -- If length is odd, add a leading 0 to the number\n\
    \  -- This helps to prevent the counting loops from running unnecessary\n  if\
    \ #str % 2 == 1 then\n    str = \"0\" .. str\n  end\n  -- Return the number of\
    \ even and odd digits in str\n  return str:sub(1, 1):gsub(\"%D\",\"\"):gsub(\"\
    %\",\"\"):sub(1,1):sub(-1,\"0\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ke92zoa.lua:14:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmp8ke92zoa.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp8ke92zoa.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local count = 0\n    for\
    \ i=1,math.floor(math.log(num,2)) do\n        if num%2 == 0 then\n           \
    \ count = count + 1\n        end\n        if num%2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return (count, count-1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpebvstq7v.lua:15: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local num_str = (tostring(num))\n\
    \    local num_str = (string.gsub(num_str, \"%a*\", \"\"))\n    local num_str\
    \ = (string.gsub(num_str, \"%d+$\", \"\"))\n    local num_str = (string.gsub(num_str,\
    \ \"%.%d+$\", \"\"))\n    local num_str = (string.gsub(num_str, \"%c-\", \"\"\
    ))\n    local num_str = (string.gsub(num_str, \"%c\", \"\"))\n    local num_str\
    \ = (string.gsub(num_str, \"%d\", \"\"))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2en68pwj.lua:27: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0, odd = 1\n\
    \    for _ in string.gmatch(tostring(num), '([^.]+)') do\n        local n = tonumber(_)\n\
    \        if n % 2 == 0 then even = even + 1 end\n        if n % 2 == 1 then odd\
    \ = odd + 1 end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9gzm53vi.lua:6: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ (1, 0)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm211cbud.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    num = num:abs\n    local\
    \ even = 1\n    local odd = 1\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even * 10 + num % 2\n            num = num / 2\n        else\n\
    \            odd = odd * 10 + num % 2\n            num = num / 2\n        end\n\
    \    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzv0mzfgi.lua:7: function arguments expected near 'local'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\t-- base case: num is even,\
    \ return (0, 1) tuple\n\tif num % 2 == 0 then\n\t\treturn (0, 1)\n\tend\n\t--\
    \ base case: num is odd, return (1, 0) tuple\n\treturn (1, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpen7wnhu7.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Return empty if number\
    \ is zero or negative\n  if num == 0 or num < 0 then\n    return 0, 0\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzup8s6i8.lua:24: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even = 0,\n\t\todd =\
    \ 0;\n\tfor i = 1, #num do\n\t\tif ((num % 10) % 2) == 0 then\n\t\t\teven = even\
    \ + 1;\n\t\telse\n\t\t\todd = odd + 1;\n\t\tend\n\tend\n\treturn (even, odd);\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqo1lskto.lua:7: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local total = 0\n  local count\
    \ = 0\n  while num > 0 do\n    total = total + math.abs(num % 10)\n    num = num\
    \ / 10\n    count = count + 1\n  end\n  return (count, total - math.abs(count))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd_mhc8uo.lua:13: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then return (1,\
    \ 0) end\n  local odd_count\n  if num % 2 == 0 then\n    odd_count = 1\n  else\n\
    \    odd_count = 0\n  end\n  local count\n  local n = num\n  repeat\n    count\
    \ = n / 10\n    odd_count = odd_count + math.floor((n % 10)/2)\n    n = math.floor((n\
    \ % 10)/2)\n  until n == 0\n  return odd_count, count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxwketpnn.lua:6: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ (0, 0)\n  else\n    local nDigits = math.floor(math.log(math.abs(num), 10))\
    \ + 1\n    local even = 0, odd = 0, i = 1, nDigits\n    while i <= nDigits do\n\
    \      if i % 2 == 0 then\n        even = even * 10 + i\n      else\n        odd\
    \ = odd * 10 + i\n      end\n      i = i + 1\n    end\n    return (even, odd)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_fjzffex.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local num1 = math._floor(\
    \ math.abs(num) )\n  local remainder = math.abs(num - num1)\n  if remainder ==\
    \ 0 then\n    return (0, 0)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd0j0gw_n.lua:9: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   local num_even = 1\n   local\
    \ num_odd = 1\n   \n   for i = 1, num do\n      num_even = math.floor( num / 10\
    \ )\n      num_odd = math.floor( num % 10 )\n   end\n   \n   return (num_even,\
    \ num_odd)\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbcxwaacr.lua:14: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = math.floor(math.log10(num))\n\
    \  local odd = even - 1\n  return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyavxugs.lua:14:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvyavxugs.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 1, 1\n\
    \    for i = 0, num-1 do\n        if num%2 == 0 then\n            even = even+1\n\
    \        else\n            odd = odd+1\n        end\n        num = num/2\n   \
    \ end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_4i_1ii.lua:21:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpr_4i_1ii.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local n = math.abs(num)\n\
    \  local even, odd = 1, 0\n  while n > 0 do\n    even = even + n % 2\n    odd\
    \ = odd + n % 2\n    n = math.floor(n / 10)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphlsjuxm.lua:19:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpphlsjuxm.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    -- Find out the number of\
    \ digits of num\n    local num_digits = math.floor(math.log(num / 10) * 10)\n\
    \    -- If the number is negative, add 1\n    if num_digits > 0 then\n       \
    \ num_digits = num_digits + 1\n    end\n    -- Divide the number by 10 to extract\
    \ the digits\n    local num_digits_div10 = num / 10\n    -- If the number of digits\
    \ is even, add one to the number of evens\n    if num_digits % 2 == 0 then\n \
    \       num_digits = num_digits + 1\n    end\n    -- Return digits, number of\
    \ evens, number of odds\n    return num_digits, num_digits % 2, num_digits % 2\
    \ + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3u0c2y9x.lua:25:\
    \ expected: {0, 1}\nactual: -3\nstack traceback:\n\t/tmp/tmp3u0c2y9x.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then return (1,\
    \ 0) end\n  if num %2 == 0 then return (1, 1) end\n  if num % 2 == 1 then return\
    \ (0, 1) end\n  error(\"not an odd number\");\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaby25ru4.lua:6: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local ret = {}\n  local i\
    \ = 1\n  while true do\n    local remainder = math.floor((num / i) * 10)\n   \
    \ if remainder >= 10 then\n      table.insert(ret, math.floor((num / i) * 10))\n\
    \    end\n    i = i + 1\n    if i == 10 then\n      break\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k3772mn.lua:24:\
    \ expected: {0, 1}\nactual: {70, 35, 23, 17, 14, 11, 10}\nstack traceback:\n\t\
    /tmp/tmp6k3772mn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then return nil\
    \ end\n  local even, odd = 1, 0\n  while num > 0 do\n    local digit = math.floor(num\
    \ / 10)\n    even = even + digit\n    odd = even + odd\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfkkmwn5.lua:20:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpjfkkmwn5.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 1\n\
    \    if num >= 0 then\n        while num > 0 do\n            even = even + 1\n\
    \            num = math.floor(num / 10)\n        end\n        while num > 0 do\n\
    \            odd = odd + 0\n            num = math.floor(num / 10)\n        end\n\
    \    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpova0p8cc.lua:17: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 1, 1\n \
    \ if num < 0 then\n    num = -num\n    even, odd = -1, 0\n  elseif num % 2 ==\
    \ 0 then\n    even = even + 1\n  else\n    odd = odd + 1\n  end\n  return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya8iu1ao.lua:21:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpya8iu1ao.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    local x = math.abs(num)\n    while x > 0 do\n        if x % 2 ==\
    \ 0 then\n            even = even+1\n        end\n        if x % 2 ~= 0 then\n\
    \            odd = odd+1\n        end\n        x = x / 2\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdthe2qb.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpkdthe2qb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then return nil\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuw8ij9fw.lua:21: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num <= 0 then\n    return\
    \ 0, 0\n  end\n  local even, odd = 1, 0\n  while num ~= 0 do\n    even = even\
    \ + math.floor(num / 10)\n    odd = odd + math.floor((num % 10) / 10)\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupjqbbup.lua:21:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpupjqbbup.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ nil, \"Invalid Input: \" .. tostring(num)\n  end\n  local evens, odds = 0, 0\n\
    \  -- Iterate over the digits of the given number.\n  local digs = num:div(10):reverse()\n\
    \  -- Iterate over every digit.\n  for i, dig do\n    -- If the digit is even,\
    \ increment the evens counter.\n    if dig:floor() == 0 then\n      evens = evens\
    \ + 1\n    end\n    -- If the digit is odd, increment the odds counter.\n    if\
    \ dig:floor() == 1 then\n      odds = odds + 1\n    end\n  end\n  return evens,\
    \ odds\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6cpn4kae.lua:13: 'in' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   -- Base Case\n   if num ==\
    \ 0 then\n      return (1, 0)\n   end\n   -- Get number of digits in num\n   local\
    \ num_digits = math.floor(math.log(abs(num))) + 1\n   -- Count the number of even\
    \ and odd digits \n   local num_even = 0\n   local num_odd = 0\n   for i = 1,\
    \ num_digits do\n      if math.mod(num, i) == 0 then\n         num_even = num_even+1\n\
    \      elseif math.mod(num, i) == 1 then\n         num_odd = num_odd+1\n     \
    \ end\n   end\n   return (num_even, num_odd)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpovg6syos.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tnum = tostring(num)\n\tlocal\
    \ num_digits = #num\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpydn_ayd4.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local num_even = 1\n   \
    \ local num_odd = 0\n    if num < 0 then\n        return 0, 0\n    end\n    --\
    \ Loop until we hit the largest positive integer\n    while num > 0 do\n     \
    \   if num % 2 == 0 then\n            num_even = num_even + 1\n        else\n\
    \            num_odd = num_odd + 1 -- The if statement is true if the number is\
    \ odd.\n        end\n        num = math.floor(num / 2)\n    end\n    -- Return\
    \ the answers\n    return num_even, num_odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw47proht.lua:27:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpw47proht.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_i_vmact.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 1\n \
    \ while num > 0 do\n    even = even*10 + num%10\n    odd = odd*10 + math.floor(num/10)%10\n\
    \    num = num/10\n  end\n  return (even, odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphou2iacm.lua:12: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local evens, odds = 0, 1\n\
    \    while num > 0 do\n        if num % 2 == 0 then\n            evens = evens\
    \ + 1\n            num = math.floor(num / 2)\n        else\n            odds =\
    \ odds + 1\n            num = math.floor(num / 2)\n        end\n    end\n    return\
    \ (evens, odds)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2omx809p.lua:16: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num ~= nil then\n    local\
    \ even, odd = 0, 0\n    for i = 1, math.floor(math.log(num, 2)) do\n      local\
    \ x = num / math.pow(10, i)\n      if x % 2 == 0 then\n        even = even + 1\n\
    \      else\n        odd = odd + 1 -- This is wrong. Because we cannot get the\
    \ odd digits of a negative number \n      end\n    end\n    return even, odd\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2h50r73l.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp2h50r73l.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even, odd = 1, 1\n\t\
    local num = math.abs(num)\n\tif num < 0 then\n\t\treturn nil\n\tend\n\tlocal tmp\
    \ = math.floor(num)\n\twhile tmp ~= 0 do\n\t\teven = even + math.floor((num -\
    \ tmp) / 2)\n\t\todd = odd + math.floor((num - tmp) / 2)\n\t\ttmp = math.floor(num\
    \ / 10)\n\tend\n\treturn (even, odd)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb0pjj9jf.lua:17: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local num = math.abs(num)\n\
    \    local even, odd = 0, 1\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        end\n        if num % 2 == 1 then\n    \
    \        odd = odd + 1 \n        end\n        num = math.floor(num / 2)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8laipibk.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp8laipibk.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- assert(type(num) == \"\
    number\")\n  -- assert(num >= 0)\n  -- assert(num < 100)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4yfk0mig.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num <= 0 then\n    return\
    \ nil\n  elseif num < 0 then\n    return nil, nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2ua2d41h.lua:25: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   if num < 0 then return (0,\
    \ 0) end\n   local even = 0\n   local odd = 0\n   local num_digits = 0\n   while\
    \ num >= 10 do\n      even = even+1\n      num_digits = num_digits + 1\n     \
    \ num = math.floor(num / 10)\n   end\n   while num > 0 do\n      odd = odd+1\n\
    \      num_digits = num_digits + 1\n      num = math.floor(num / 10)\n   end\n\
    \   return (even, odd, num_digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyj6jn2ox.lua:6: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Write your code here.\n\
    \  return false, false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs0qoa5i.lua:13:\
    \ expected: {0, 1}\nactual: false\nstack traceback:\n\t/tmp/tmpvs0qoa5i.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i=1,#num do\n    local remain = math.mod(num, 10)\n    if remain == 0 then\n\
    \      even = even+1\n    else\n      odd = odd+1\n    end\n    num = num / 10\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuqapzcru.lua:7:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmpuqapzcru.lua:7: in local 'candidate'\n\t/tmp/tmpuqapzcru.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local count = 0\n  while num\
    \ > 0 do\n    num = math.floor(num / 10)\n    count = count + 1\n  end\n  if count\
    \ == 0 then\n    return (1, 0)\n  end\n  if count == 1 then\n    return (0, 1)\n\
    \  end\n  return (1, count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqh6_b3td.lua:12: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 1\n \
    \ local i\n  for i = 1, num do\n    -- When i = num, we reach the odd number.\n\
    \    if num % i == 0 then\n      even = even + 1\n    else\n      odd = odd +\
    \ 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49qatev6.lua:22:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp49qatev6.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Based on https://stackoverflow.com/questions/27591269/how-can-i-determine-the-number-of-even-and-odd-digits-of-a-number-with-only-one-s\n\
    \  local oddDigits = {}\n  local evenDigits = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgv2qkyqz.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    num = tostring(num)\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuufnb0x0.lua:21: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  local num = tostring(num)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp109lu6em.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local result = 0\n    local\
    \ last_odd_count = 0\n    local last_even_count = 0\n    local n = math.abs(num)\n\
    \    while n >= 1 do\n        -- if n is even, oddCount = 0\n        local oddCount\
    \ = n % 2\n        -- if n is odd, oddCount = 1\n        last_even_count = last_even_count\
    \ + oddCount\n        last_odd_count = last_odd_count + oddCount\n        n =\
    \ math.floor(n/2)\n    end\n    return (last_even_count, last_odd_count)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphpy9z6ih.lua:18: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local count = 0\n  while num\
    \ do\n    local last = math.floor(num / 10)\n    if last % 2 == 0 then\n     \
    \ count = count + 1\n    end\n    num = num - last * 10\n  end\n  return count,\
    \ num % 10\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  return tonumber(string.format(\"\
    %.2d:%.2d\", num, num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3prn3a3y.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp3prn3a3y.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then return (1,\
    \ 0) end\n  local odd, even = 1, 1\n  repeat\n    even = even * 10 + num % 10\n\
    \    num = num / 10\n  until (num == 0)\n  return (odd, even + 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptrpy9fx_.lua:6: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Base Case\n  if num ==\
    \ 0 then\n    return (0,0)\n  else\n    local even, odd = 1, 0\n    -- We count\
    \ the even and odd digits seperately.\n    local digit\n    for digit in string.gmatch(tostring(num),\
    \ '%d') do\n      if string.byte(digit) ~= 0 then\n        even = even * 10 +\
    \ string.byte(digit)\n      else\n        odd = odd + digit\n      end\n    end\n\
    \    return (even, odd)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjrj2j3uc.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 1\n\
    \    while num > 0 do\n        local remainder = math.floor(num / 10)\n      \
    \  even = even * 10 + remainder\n        odd = odd*10 + remainder%10\n       \
    \ num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac517zse.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpac517zse.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num == 0 then\n     \
    \   return 0, 0\n    end\n    local even, odd = 1, 0\n    for i = 1, math.floor(math.log(num\
    \ + math.pow(2, 31), 2)) do\n        local m = math.floor((num + math.pow(2, 31))\
    \ / math.pow(2, i))\n        if m % 2 == 1 then\n            even = even * 2 +\
    \ 1\n        else\n            odd = odd + 1 + math.floor((num + math.pow(2, 31))\
    \ / math.pow(2, i))\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bhhdn9m.lua:24:\
    \ expected: {0, 1}\nactual: 15\nstack traceback:\n\t/tmp/tmp_bhhdn9m.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Initialize variables\n\
    \  local even, odd = 0, 1\n  -- If there is no number, return an error message\n\
    \  if not num or not num.value then\n    return 'The input is not valid.'\n  else\n\
    \    -- If there is a number, calculate the number of even and odd digits, and\
    \ return the tuple\n    local num_digits = tonumber(os.date(\"*t\", os.time(num)))\n\
    \    if num_digits then\n      -- Calculate the number of digits\n      local\
    \ num_digits_reversed = math.floor((num_digits + 3) / 2)\n      -- Calculate the\
    \ number of even digits\n      even = math.floor((num_digits - num_digits_reversed)\
    \ / 2)\n      -- Calculate the number of odd digits\n      odd = num_digits_reversed\
    \ - even\n      return even, odd\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd32rsiyo.lua:9:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpd32rsiyo.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpd32rsiyo.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ nil, -1\n  end\n  local num_str = tostring(num)\n  local len = num_str:len()\n\
    \  local even = 1\n  local odd = 1\n  local idx = 1\n  for i = 1, len do\n   \
    \ if num_str:sub(i, i) == num_str:sub(i - 1, i) then\n      even = even + 1\n\
    \    else\n      odd = odd + 1 -- even counts even too\n    end\n    if even >\
    \ odd then\n      break\n    end\n    idx = idx + 1\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpxtsjgm.lua:31:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmptpxtsjgm.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num == 0 then\n     \
    \   return (0, 0)\n    end\n    local odd_count = 0\n    local even_count = 0\n\
    \    while num > 0 do\n        if num % 2 == 1 then\n            even_count =\
    \ even_count+1\n        else\n            odd_count = odd_count+1\n        end\n\
    \        num = num/2 -- integer division\n    end\n    return (even_count, odd_count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwaxfgc04.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  return math.floor(math.log((math.abs(num))^(1\
    \ / 2)), 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0qodxtk.lua:12:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmps0qodxtk.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then\n    return\
    \ (0, 0);\n  elseif num < 0 then\n    return (-1, -1);\n  else\n    local num_str\
    \ = string.format('%g', num);\n    local num_str_split = string.split(num_str);\n\
    \    local odd = #num_str_split - #num_str_split % 2;\n    local even = #num_str_split\
    \ - odd;\n    return (even, odd);\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf88ifdfx.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local count = 0\n  local rest\
    \ = num\n  while rest ~= 0 do\n    local remainder = math.fmod(num, remainder)\n\
    \    if remainder == 0 then\n      count = count + 1\n      rest = math.fdiv(rest,\
    \ 2)\n    else\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6sr3sdyf.lua:9:\
    \ bad argument #2 to 'fmod' (number expected, got nil)\nstack traceback:\n\t/tmp/tmp6sr3sdyf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6sr3sdyf.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tassert(type(num) == \"number\"\
    , \"argument 'num' must be a number\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt4h3ogwf.lua:21: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 1, 0\n \
    \ while num > 0 do\n    even = math.floor(num / 10)\n    odd = even + odd\n  \
    \  num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxkg7q_ez.lua:18:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxkg7q_ez.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   if num < 0 then\n      error(\"\
    Invalid argument\", 2)\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnsgrhnbd.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ 0, 0\n  end\n  local num_str = tostring(num)\n  local even, odd = num_str:match('(%d*)%d*')\
    \ -- ([num])*\n  even = even and tonumber(even) or 0\n  odd = odd and tonumber(odd)\
    \ or 0\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsy5i3tga.lua:19:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpsy5i3tga.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ \n  -- loop until number is negative\n  while num > 0 do\n    even = even +\
    \ num % 2 -- number % 2 returns 1 if even otherwise 0.\n    odd = odd + num /\
    \ 10 -- number / 10 returns the digit.\n    num = math.floor(num / 10) # floor\
    \ divides by 10.\n  end\n  \n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5vd8yaga.lua:12: unexpected symbol near '#'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then\n    return\
    \ (0, 0)\n  elseif num < 0 then\n    return (-1, 1)\n  else\n    local even, odd\
    \ = 0, 1\n    for i = 2, math.floor(math.log(num, 2) + 1), 1 do\n      local tmp\
    \ = num / i\n      if tmp == 0 or math.floor(tmp) == tmp then\n        return\
    \ (even, odd)\n      else\n        even = even * 10 + math.floor(tmp)\n      end\n\
    \      odd = odd * 10 + math.floor((tmp % 1))\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc4yz47t8.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   if num >= 0 then\n      local\
    \ evens, odds = 1, 1\n      while num > 0 do\n         if num % 2 == 0 then\n\
    \            evens = evens + 1\n         else\n            odds = odds + 1\n \
    \        end\n         num = math.floor(num / 2)\n      end\n      return evens,\
    \ odds\n   else\n      return 0, 1\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsvsz3_j.lua:25:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmprsvsz3_j.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local ret = {}\n  local num_str\
    \ = tonumber(num)\n  if num_str == nil then\n    return ret\n  end\n  local num_str\
    \ = tostring(num_str)\n  local len = string.len(num_str)\n  local even = 1\n \
    \ local odd = 0\n  for idx = 1, len do\n    local digit = num_str:sub(idx, idx)\n\
    \    if digit:sub(1, 1) == \"0\" then\n      even = even + 1\n    elseif digit:sub(1,\
    \ 1) == \"1\" then\n      odd = odd + 0\n    elseif digit:sub(1, 1) == \"-1\"\
    \ then\n      even = even - 1\n    else\n      return ret\n    end\n  end\n  ret[even]\
    \ = even\n  ret[odd] = odd\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpschdfunj.lua:35:\
    \ expected: {0, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpschdfunj.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 1\n\
    \    for i = 1, math.floor(math.log(num, 2)) do\n        if num % math.pow(10,\
    \ i) == 0 then\n            even = even+1\n        else\n            odd = odd+1\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7jtfz0o.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpi7jtfz0o.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ ()\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmnhumtw9.lua:7: unexpected symbol near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal digits = math.floor(math.log(num)\
    \ / math.log(10))\n\tlocal odd = digits % 2\n\tlocal even = digits - odd\n\treturn\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kyv1vcn.lua:15:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp7kyv1vcn.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 1\n\
    \    if num < 0 then\n        error(\"not an integer.\")\n    elseif num == 0\
    \ then\n        return (0, num)\n    else\n        local i = 1\n        while\
    \ i <= num do\n            if num % 2 == 0 then\n                even = even +\
    \ 1\n            else\n                odd = odd + 1\n            end\n      \
    \      num = num / 2\n            i = i + 1\n        end\n    end\n    return\
    \ even, odd\nend\n</code>\n<|/ a dscore=0 tags=lua |>\n<| a dscore=0 |>\nYou can\
    \ find the number of digits in the number using math.tostring function in Lua.\
    \ Using this you can find the number of digits in each number. Also you can find\
    \ whether a number has even or odd digits. In the next function, you can get the\
    \ digit and store it in a variable.\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7uhnrw80.lua:10: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, #num  do\n    if num % 2 == 0 then\n      even = even + 1\n    elseif\
    \ num % 2 ~= 0 then\n      odd = odd + 1\n    end\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbgau63jh.lua:7:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmpbgau63jh.lua:7: in local 'candidate'\n\t/tmp/tmpbgau63jh.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   local even, odd= 0, 1\n \
    \  for i =1,(math.sqrt(num))*2 do\n      if math.floor(num/i) == math.floor(num/i)\n\
    \      then even = even+1\n      elseif math.floor(num/i) == math.floor(num/i)\
    \ + 1\n      then odd = odd+1\n      end\n   end\n   return even, odd\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgc_npyg7.lua:20:\
    \ expected: {0, 1}\nactual: 5\nstack traceback:\n\t/tmp/tmpgc_npyg7.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal num = math.floor(num)\n\
    \tif num < 0 then\n\t\treturn 0, 0\n\tend\n\t\n\tlocal even, odd = 1, 0\n\twhile\
    \ num > 0 do\n\t\tif num % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\t\
    odd = odd + num % 2\n\t\tend\n\t\t\n\t\tnum = num / 2\n\tend\n\treturn even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hu_m4g9.lua:27:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp4hu_m4g9.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local odd, even = 0, 0\n \
    \ local str_num = tostring(num)\n  str_num:gsub(\".\", function(x)\n    if x:sub(1,\
    \ 1) == \"-\" then x = x:sub(2, 2) end\n    if x:sub(1, 1) == \"0\" then even\
    \ = even + 1 end\n    if x:sub(1, 1) == \"1\" then odd = odd + 1 end\n  end)\n\
    \  return (even, odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjdftmes4.lua:13: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0 -- even\n \
    \ local odd = 0 -- odd\n  local digit_value = nil\n  if num > 0 then\n    digit_value\
    \ = tonumber(string.format(\"%.d\", num))\n    if digit_value > 0 then\n     \
    \ if digit_value % 2 == 0 then\n        even = even + 1\n      else\n        odd\
    \ = odd + 1 -- odd\n      end\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj3ediyp.lua:25:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxj3ediyp.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ 0, 0\n  else\n    -- Dividing by 0 will result in an error. Using a boolean\
    \ instead of an error value will allow for\n    -- further optimizations.\n  \
    \  local even, odd = false, false\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpau76yt68.lua:26: 'end' expected (to close 'if' at line 6)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 1, 1\n\
    \    for i = 1, #num, 1 do\n        if num % i == 0 then\n            if even\
    \ % 2 == 0 then\n                even = even + 1\n            else\n         \
    \       odd = odd + 2\n            end\n        end\n    end\n    return (even,\
    \ odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8scrwbub.lua:16: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then return (1,\
    \ 0) end\n  local ans = num\n  local n = 1\n  while num > 0 do\n    num = num\
    \ / 10\n    n = n + 1\n  end\n  return (n, n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7ztm_5sv.lua:6: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    num = tostring(num)\n  \
    \  local num_digits = math.floor(math.log(num,10))\n    local even, odd = 1, 1\n\
    \    for _,v in ipairs(string.gmatch(string.sub(num, num_digits+1), \"%d*$\"))\
    \ do\n        if v ~= 0 then\n            even = even * 10 + v\n        else\n\
    \            odd = odd * 10 + 1\n        end\n    end\n    return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local num_str = tonumber(num:sub(1,-1))\n\
    \    if num_str == 0 then\n        return 0, 0\n    end\n    local num_even, num_odd\
    \ = 0, 1\n    while num_str > 0 do\n        local remainder = num_str % 10\n \
    \       num_even = num_even * 10 + remainder\n        num_odd = num_odd * (10\
    \ - remainder)\n        num_str = num_str / 10\n    end\n    return num_even,\
    \ num_odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppcwzno6b.lua:6:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmppcwzno6b.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmppcwzno6b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, num:len() do\n    local card = num:sub(i, i)\n    if card\
    \ == 0 then\n      even = even + 1\n    elseif card % 2 == 1 then\n      even\
    \ = even + 1\n    else\n      odd = odd + card\n    end\n  end\n  return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3ata489.lua:8:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpo3ata489.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpo3ata489.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local sum = 0\n  local i =\
    \ 1\n  while i <= num do\n    local remainder = num % i\n    sum = sum + remainder\n\
    \    i = i + 1\n  end\n  if sum % 2 == 0 then\n    return 1, sum / 2\n  else\n\
    \    return 2, sum / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9qhhz4d.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpn9qhhz4d.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 1\n  local odd\
    \ = 1\n  local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjmwrw0sb.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   if num < 0 then return end\n\
    \   if num < 100 then return (1,0) end\n   local odd, even\n   for i = 2, 100\
    \ do\n      if num % i == 0 then\n         odd = odd + 1, even = even + 1\n  \
    \    else\n         odd = 1, even = 1\n      end\n   end\n   return (even, odd)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf5x4uy45.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ (0, 0)\n  end\n  local nums = str:split(num)\n  local even = #nums[1]\n  local\
    \ odd  = #nums[#nums] - #nums[1]\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv9h4dj9n.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 1\n  local odd\
    \ = 0\n  local tmp = num\n  while tmp ~= 0 do\n    tmp = tmp % 10\n    if tmp\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then\n    return\
    \ (0, 0)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8umbgozb.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal numStr = tonumber(num\
    \ * 100)\n\tlocal even = 0\n\tlocal odd = 0\n\twhile numStr > 0 do\n\t\tlocal\
    \ div = numStr % 10\n\t\tif div == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\
    \t\todd = odd + div\n\t\tend\n\t\tnumStr = numStr / 10\n\tend\n\treturn even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpku27gc1f.lua:24:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpku27gc1f.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local num = tostring(num)\n\
    \    local even, odd = 0,0\n    for i = 1, #num, 1 do\n        if string.sub(num,i,i)\
    \ ~= '-' then \n            even = even+1\n        elseif string.sub(num,i,i)\
    \ ~= '-' then\n            odd = odd+1\n        end\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhmmsvxt.lua:21:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpnhmmsvxt.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local n = 1\n  while n > 0\
    \ do\n    local a = math.mod(num, n)\n    local b = math.mod(num, 2 * n)\n   \
    \ if a > 0 and b == 0 then\n      n = 2 * n\n    else\n      n = n + 1\n    end\n\
    \  end\n  return n, num % n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqxj3h6i3.lua:8:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpqxj3h6i3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpqxj3h6i3.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local num_str = tostring(num)\n\
    \    local num_len = #num_str\n    local even_count = 0\n    local odd_count =\
    \ 0\n    for i = 1, num_len, 1 do\n        if num_str:sub(i, i) == '0' then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n    end\n    return (even_count, odd_count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0z_w971x.lua:17: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 1, 1\n \
    \ while num > 0 do\n    if num & 1 == 1 then\n      even = even * 10 + num - 1\n\
    \      num = num / 2\n    else\n      odd = odd * 10 + num - 1\n      num = num\
    \ / 2\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpao_vhlez.lua:8:\
    \ number (local 'num') has no integer representation\nstack traceback:\n\t/tmp/tmpao_vhlez.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpao_vhlez.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then\n    return\
    \ (0, 0)\n  else\n    local even, odd = 1, 0\n    while num > 0 do\n      even\
    \ = even + num % 2\n      num = math.floor(num / 2)\n      odd = odd + num % 2\n\
    \      num = math.floor(num / 2)\n    end\n    return (even, odd)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuxwojebi.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  return math.floor(math.log10(num)\
    \ + 1), (math.floor(math.log10(num * 10) - math.floor(math.log10(num))) + 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcnabnz8.lua:12:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpgcnabnz8.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num == 0 then\n     \
    \   return 0, 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvp3z5jp4.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local odd_count = 0\n  \
    \  local even_count = 0\n    for i=1,math.floor(math.log10(num)) do\n        if\
    \ num % 10 == 0 then\n            even_count = even_count + 1\n        elseif\
    \ num % 10 == 1 then\n            odd_count = odd_count + 1\n        end\n   \
    \     num = math.floor(num / 10)\n    end\n    return (even_count, odd_count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy_k8ge75.lua:16: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num == 0 then return\
    \ (num, num) end\n    local even, odd = 1, 1\n    for i = 1, num do\n        if\
    \ ((num % 10) % 2) == 0 then even = even+1 else even = even+2\n        else odd\
    \ = odd+1 end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo9_qmaxp.lua:6: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even = 0\n\tlocal odd\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0htf6bgl.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local evens = 0\n    local\
    \ odds = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp973is6zn.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num < 0 then return nil\
    \ end\n    if num == 0 then return (1, 0) end\n    local count = (num % 10) *\
    \ (num % 10) > 0 or (num % 10) * (num % 10) / 10\n    return (count + num > 0\
    \ and 1 or 0, count + num > 0 and 0 or 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuumr39u9.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num < 0 then return end\n\
    \    local count = {}\n    for i = 1, 10 do\n        local value = math.floor(num\
    \ / i)\n        count[value] = count[value] or {}\n        table.insert(count[value],\
    \ i)\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23lecmol.lua:19:\
    \ expected: {0, 1}\nactual: {0={8, 9, 10}, {4, 5, 6, 7}, {3}, {2}, 7={1}}\nstack\
    \ traceback:\n\t/tmp/tmp23lecmol.lua:19: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0, odd = 0\n\
    \  \n  for i = 1, #num do\n    if num % i == 0 then\n      even = even + 1\n \
    \   else\n      odd = even + 1\n    end\n  end\n  \n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprl2t58mu.lua:6: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num >= 0 then\n    local\
    \ even, odd = 0, 1\n    repeat\n      even = even * 10 + num % 10\n      odd =\
    \ odd*10 + math.floor(num/10)\n    until num == 0\n    return even, odd\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local sum = 0\n  for i = 1,\
    \ math.floor(math.log(num, 10)) do\n    local digit = math.floor(num / math.pow(10,\
    \ i))\n    if digit % 2 == 0 then\n      sum = sum + 1\n    elseif digit % 2 ==\
    \ 1 then\n      sum = sum + 2\n    end\n  end\n  return sum, math.abs(num - math.floor(num))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptx2r_2jw.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmptx2r_2jw.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = tonumber(num)\n  if\
    \ not num then\n    return (num, num)\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw8gr97f6.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1 \n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9s0zi6nh.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp9s0zi6nh.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then return nil\
    \ end\n  local even = 0\n  local odd = 0\n  for i = 1, math.floor(math.log(num,\
    \ 2)) do\n    local tmp = math.floor(num / math.pow(2, i)) % 2\n    if tmp ==\
    \ 1 then\n      even = even + 1\n    else\n      odd = odd + 1 -- not even\n \
    \   end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2d67fifw.lua:23:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp2d67fifw.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  local temp = num\n  while temp do -- repeat until num becomes\
    \ zero\n    if temp % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n    temp = temp / 2 -- divide the number\
    \ by 2\n  end\n  return (even_count, odd_count) -- return number of even and odd\
    \ digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw89uxmgm.lua:17: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- If num is even, the count\
    \ is 0\n  local num_even = math.floor(num / 2)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpctf3mx8i.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 1\n\
    \    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 0\n        end\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp244n3kgb.lua:7:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmp244n3kgb.lua:7: in local 'candidate'\n\t/tmp/tmp244n3kgb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num == 0 then\n     \
    \   return (1, 0)\n    end\n    local odd, even = 1, 0\n    local num_digits =\
    \ math.floor(math.log(num, 10))\n    local remainder, count = 1, num_digits/2\n\
    \    while count ~= 0 do\n        local digit = math.floor(num / pow10[count])\n\
    \        if digit % 2 == 1 then\n            even = even + 1\n        end\n  \
    \      if digit % 2 == 0 then\n            odd = odd + 1 \n        end\n     \
    \   remainder = num - (digit*pow10[count])\n        count = count - 1\n    end\n\
    \    return (odd, even)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp82r45f0t.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for i = 1, num do\n    local p = math.mod(i, 10)\n    if p == 0 then\n     \
    \ even = even + 1\n    else\n      odd = odd + 1 if p % 2 == 1 end\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp19akf4hp.lua:12: 'then' expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local count = {}\n    local\
    \ n = 1\n    while num > 0 do\n        if num % 2 == 0 then\n            count[n]\
    \ = count[n] or 1\n            n = n + 1\n        else\n            count[n] =\
    \ count[n] or 2\n            n = n - 1\n        end\n        num = num / 10\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9e8_18c.lua:24:\
    \ expected: \n{0, 1}\nactual: \n{\n    -323=2,\n    -322=2,\n    -321=2,\n   \
    \ -320=2,\n    -319=2,\n    -318=2,\n    -317=2,\n    -316=2,\n    -315=2,\n \
    \   -314=2,\n    -313=2,\n    -312=2,\n    -311=2,\n    -310=2,\n    -309=2,\n\
    \    -308=2,\n    -307=2,\n    -306=2,\n    -305=2,\n    -304=2,\n    -303=2,\n\
    \    -302=2,\n    -301=2,\n    -300=2,\n    -299=2,\n    -298=2,\n    -297=2,\n\
    \    -296=2,\n    -295=2,\n    -294=2,\n    -293=2,\n    -292=2,\n    -291=2,\n\
    \    -290=2,\n    -289=2,\n    -288=2,\n    -287=2,\n    -286=2,\n    -285=2,\n\
    \    -284=2,\n    -283=2,\n    -282=2,\n    -281=2,\n    -280=2,\n    -279=2,\n\
    \    -278=2,\n    -277=2,\n    -276=2,\n    -275=2,\n    -274=2,\n    -273=2,\n\
    \    -272=2,\n    -271=2,\n    -270=2,\n    -269=2,\n    -268=2,\n    -267=2,\n\
    \    -266=2,\n    -265=2,\n    -264=2,\n    -263=2,\n    -262=2,\n    -261=2,\n\
    \    -260=2,\n    -259=2,\n    -258=2,\n    -257=2,\n    -256=2,\n    -255=2,\n\
    \    -254=2,\n    -253=2,\n    -252=2,\n    -251=2,\n    -250=2,\n    -249=2,\n\
    \    -248=2,\n    -247=2,\n    -246=2,\n    -245=2,\n    -244=2,\n    -243=2,\n\
    \    -242=2,\n    -241=2,\n    -240=2,\n    -239=2,\n    -238=2,\n    -237=2,\n\
    \    -236=2,\n    -235=2,\n    -234=2,\n    -233=2,\n    -232=2,\n    -231=2,\n\
    \    -230=2,\n    -229=2,\n    -228=2,\n    -227=2,\n    -226=2,\n    -225=2,\n\
    \    -224=2,\n    -223=2,\n    -222=2,\n    -221=2,\n    -220=2,\n    -219=2,\n\
    \    -218=2,\n    -217=2,\n    -216=2,\n    -215=2,\n    -214=2,\n    -213=2,\n\
    \    -212=2,\n    -211=2,\n    -210=2,\n    -209=2,\n    -208=2,\n    -207=2,\n\
    \    -206=2,\n    -205=2,\n    -204=2,\n    -203=2,\n    -202=2,\n    -201=2,\n\
    \    -200=2,\n    -199=2,\n    -198=2,\n    -197=2,\n    -196=2,\n    -195=2,\n\
    \    -194=2,\n    -193=2,\n    -192=2,\n    -191=2,\n    -190=2,\n    -189=2,\n\
    \    -188=2,\n    -187=2,\n    -186=2,\n    -185=2,\n    -184=2,\n    -183=2,\n\
    \    -182=2,\n    -181=2,\n    -180=2,\n    -179=2,\n    -178=2,\n    -177=2,\n\
    \    -176=2,\n    -175=2,\n    -174=2,\n    -173=2,\n    -172=2,\n    -171=2,\n\
    \    -170=2,\n    -169=2,\n    -168=2,\n    -167=2,\n    -166=2,\n    -165=2,\n\
    \    -164=2,\n    -163=2,\n    -162=2,\n  "
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local odd = 0\n  local even\
    \ = 0\n  for i=0,num do\n    local remainder = math.fmod(num,10)\n    if remainder\
    \ == 0 then\n      if math.fmod(num,2) == 0 then\n        even = even+1\n    \
    \  else\n        odd = odd+1\n      end\n    end\n    num = math.fdiv(num,10)\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqwg4x33e.lua:17:\
    \ attempt to call a nil value (field 'fdiv')\nstack traceback:\n\t/tmp/tmpqwg4x33e.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpqwg4x33e.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 1\n  local odd\
    \ = 0\n  for i = 1, num do\n    if i % 2 == 0 then\n      even = even * 10 + i\n\
    \    else\n      odd = odd + i\n    end\n  end\n  return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0dyazwb.lua:21:\
    \ expected: {0, 1}\nactual: 1246\nstack traceback:\n\t/tmp/tmpt0dyazwb.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even, odd = 0, 1\n\t\
    for i = 1, num do\n\t\tif num % i == 0 then\n\t\t\teven = even + 1\n\t\telseif\
    \ num % i ~= 0 then\n\t\t\todd = odd + 1 \n\t\tend\n\tend\n\treturn even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf93uc_r1.lua:20:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpf93uc_r1.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local n1, n2 = 1, 0\n  \
    \  for i = 0, num-1 do\n        local digit = math.floor(num / 10)\n        if\
    \ digit % 2 == 0 then\n            n1 = n1 + 1\n        else\n            n2 =\
    \ n2 + 1\n        end\n        num = num - (math.floor(num / 10) * 10)\n    end\n\
    \    return (n1, n2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj2wuzivw.lua:16: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0 \n    local\
    \ odd = 0\n    if num >= 0 then\n        do\n            even = even + 1 \n  \
    \          local remainder = num - math.floor(num)\n            odd = math.floor(odd)\
    \ + 1 \n            num = math.floor(remainder)\n        end\n    end\n    return\
    \ (even, odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppeplhlr6.lua:16: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   local numDigits = math.floor(math.log(num,\
    \ 10)) + 1\n   local even_count = 0\n   local odd_count = 0\n   for i = 1, numDigits\
    \ do\n      local digit = math.floor(num / 10^i)\n      if digit % 2 == 0 then\n\
    \         even_count = even_count + 1\n      elseif digit % 2 == 1 then\n    \
    \     odd_count = odd_count + 1\n      end\n   end\n   return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmd_ts7n.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpgmd_ts7n.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local num_str = tostring(num)\n\
    \    local even, odd = 0, 0\n    for i = 1, #num_str do\n        if string.sub(num_str,\
    \ i, i) == \"%2\" then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpubcmnbi7.lua:15: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even = 1\n\tlocal odd\
    \ = 1\n\twhile num > 0 do\n\t\teven = even + 1\n\t\todd = (odd + num % 2) / 2\n\
    \t\tnum = num / 2\n\tend\n\treturn (even, odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd9478wol.lua:13: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ while num > 0 do\n    even = even*10 + num%10\n    odd = odd*10 + num/10 --\
    \ integer division\n    num = num/10 -- integer division\n  end\n  return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0ahrygs.lua:18:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpo0ahrygs.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 1\n    local\
    \ odd = 0\n    for i = 1, num do\n        if num % 2 == 0 then\n            even\
    \ = even+1\n        else\n            odd = odd+1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<text>\neven_odd_count_test()\nRun the code cell\
    \ below to test your solution.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo5fs3k2x.lua:15: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = tostring(num)\n  local\
    \ odd_count = 0\n  local even_count = 0\n  for i = 1,#num do\n    local current_digit\
    \ = tonumber(string.sub(num, i, i))\n    if current_digit == 0 then\n      if\
    \ odd_count > 0 then\n        even_count = even_count+1\n      end\n      odd_count\
    \ = 0\n    elseif current_digit == 1 then\n      if odd_count > 0 then\n     \
    \   odd_count = odd_count-1\n      end\n      even_count = even_count+1\n    else\n\
    \      if odd_count > 0 then\n        odd_count = odd_count+1\n      end\n   \
    \   if current_digit == 2 then\n        even_count = even_count+1\n      end\n\
    \    end\n  end\n  if odd_count > 0 then\n    even_count = even_count+1\n  end\n\
    \  return even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i11ht2t.lua:39:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp7i11ht2t.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count, odd_count\
    \ = 0,  0\n  local i = 1\n  for x = 0, num do\n    local y = num % 10\n    if\
    \ y ~= 0 then\n      odd_count = odd_count + 1\n    else\n      even_count = even_count\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcy19nysv.lua:23:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpcy19nysv.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- base case: if the number\
    \ is even, return (1, 0)\n  if num % 2 == 0 then\n    return (1, 0)\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjatfbpb0.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = num + 0 -- converts\
    \ num to an integer.\n  local even, odd\n  even = math.mod(num - 1, 2)\n  if even\
    \ ~= 0 then\n    odd = even + 1\n  end\n  even, odd = odd, even\n  return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuj6lnt4b.lua:8:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpuj6lnt4b.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpuj6lnt4b.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then return (1,\
    \ 0) end\n  local even, odd = 0, 0\n  while num > 0 do\n    if num % 2 == 0 then\n\
    \      even = even + 1\n    elseif num % 2 ~= 0 then\n      odd = odd + 1\n  \
    \  end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9znj3fw7.lua:6: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local num_str=tostring(num)\n\
    \    local evens=0\n    local odds=0\n    local last_num_str=nil\n    -- count\
    \ the number of digits in num_str\n    local num_digits=string.len(num_str)\n\
    \    -- loop through the digits\n    for digit=num_digits-1:1\n        local num_str_digit=num_str:sub(digit)\n\
    \        if num_str_digit == \"0\" then\n            evens=evens+1\n        elseif\
    \ num_str_digit == \"1\" then\n            odds=odds+1\n        else\n       \
    \     -- not a number, so stop the loop\n            break\n        end\n    \
    \    if last_num_str ~= nil then\n            if num_str_digit ~= last_num_str\
    \ then\n                -- last digit changed, so this is a new digit\n      \
    \          evens=evens+1\n            else\n                -- last digit is the\
    \ same, so increment the number of evens\n                evens=evens+1\n    \
    \        end\n        end\n        last_num_str=num_str_digit\n    end\n    local\
    \ res={}\n    table.insert(res,evens)\n    table.insert(res,odds)\n    return\
    \ unpack(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw8pj_tcq.lua:13: ',' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- The first element in the\
    \ returned tuple is the number of even digits, and the second element is the number\
    \ of odd digits\n  -- The last clause is a guard clause, which is necessary because\
    \ Lua does not allow assignment in return statements. \n  local count, odd = 0,\
    \ 0\n  while num > 0 do\n    count = count + 1\n    num = math.floor(num / 10)\n\
    \  end\n  if count % 2 == 0 then\n    odd = odd + count - 1\n  else\n    odd =\
    \ odd + count\n  end\n  return count, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbeusqqs.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmprbeusqqs.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   -- We need this in order\
    \ to return the correct output even when the argument is passed as nil\n   if\
    \ num == nil then return (1, 1) end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkumb_e0e.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local count = 0\n  local sum\
    \ = 0\n  for i = 1, 9 do\n    if num >= 0 then\n      if math.mod(num, i) == 0\
    \ then\n        count = count + 1\n      else\n        count = count - 1\n   \
    \   end\n    else\n      if math.fmod(num, i) == 0 then\n        count = count\
    \ + 1\n      else\n        count = count - 1\n      end\n    end\n    sum = sum\
    \ + math.fmod(num, i)\n    num = math.fmod(num, i)\n  end\n  if num >= 0 then\n\
    \    count = count + 1\n  end\n  return count, count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprsml2s_c.lua:10:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmprsml2s_c.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprsml2s_c.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num < 0 then\n      \
    \  return 0\n    end\n    local even = 1\n    local odd = 1\n    if num > 0 then\n\
    \        while num > 0 do\n            if num%2 == 0 then\n                even\
    \ = even + 1\n            else\n                odd = odd + 1;\n            end\n\
    \            num = num/2\n        end\n    end\n    return (even, odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf8o53nv1.lua:21: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even_count = 0\n\tlocal\
    \ odd_count = 0\n\tfor _, _ in pairs(string.gmatch(tostring(num), '%d+')) do\n\
    \t\tlocal n = tonumber(_)\n\t\tif not n then\n\t\t\tbreak\n\t\tend\n\t\tif n %\
    \ 2 == 0 then\n\t\t\teven_count = even_count+1\n\t\telse\n\t\t\todd_count = odd_count+1\n\
    \t\tend\n\tend\n\treturn even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpraufkt67.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpraufkt67.lua:8: in local 'candidate'\n\t/tmp/tmpraufkt67.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 1, 1\n\
    \    while num > 0 do\n        even = math.floor(num/10)\n        odd = even +\
    \ 1\n        num = num % 10\n    end\n    return even, odd\nend\n</cell>\n<code\
    \ language=xeus-cling-cpp14>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9y1cp6vj.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   local even, odd = 0, 1\n\
    \   while true do\n      local _, count = math.divmod(num, 10)\n      if count\
    \ == 0 then\n         return even, odd\n      else\n         even = even * 10\
    \ + count\n         odd = odd * 10 + 1 - count\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qn_jfy0.lua:8:\
    \ attempt to call a nil value (field 'divmod')\nstack traceback:\n\t/tmp/tmp_qn_jfy0.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp_qn_jfy0.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  return math.floor(math.log(num)\
    \ / math.log(2)) + 1, math.ceil(math.log(num) / math.log(2)) - 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkuquhqh.lua:12:\
    \ expected: {0, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmprkuquhqh.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ local count_num = 0\n  while num > 0 do\n    count_num = count_num * 10 + num\
    \ % 10\n    num = num / 10\n    if num == 0 then\n      even = even + 1\n    \
    \  odd = odd + count_num / 2\n      count_num = (count_num % 2) - 1\n    else\n\
    \      even = even + 1\n      odd = odd + count_num + 1\n      count_num = 1\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoeuj1uc5.lua:27:\
    \ expected: {0, 1}\nactual: 325\nstack traceback:\n\t/tmp/tmpoeuj1uc5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = num + 0\n  if num <\
    \ 0 then\n    return (1, 0)\n  elseif num > 0 then\n    local n1 = 1\n    local\
    \ n2 = 1\n    local n = num\n    while n > 0 do\n      local m = n % 10\n    \
    \  n = math.floor(n / 10)\n      if m == 0 then\n        n1 = n1 + 1\n      elseif\
    \ m == 1 then\n        n2 = n2 + 1\n      end\n    end\n    return (n1, n2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpomyqlyzr.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num <= 0 then\n    return\
    \ 0, 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzdph6viz.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 1, 1\n \
    \ for i = 1, 10 do\n    local m = math.floor(num / i)\n    if m % 2 = 0 then\n\
    \      even = even * 10 + i\n    else\n      odd = odd * 10 + i\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpds5ukxjm.lua:9: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local count = 0\n  while num\
    \ > 0 do\n    count = count + 1 -- increment count for every even digit\n    num\
    \ = math.floor(num / 10)\n  end\n  -- return 1 if count is odd\n  count = count\
    \ - 1 \n  if count % 2 == 1 then return 1, 1 else return 2, 1 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13shpse6.lua:19:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp13shpse6.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 1\n\
    \    if num < 0 then\n        return even, odd\n    else\n        while num >\
    \ 0 do\n            if num % 2 == 0 then\n                even = even + 1\n  \
    \          else\n                odd = odd + 2\n            end\n            num\
    \ = math.floor(num / 10)\n        end\n    end\n    return even, odd\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf6k_6qx.lua:25:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpsf6k_6qx.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.floor(num)\n  local\
    \ even = 0\n  local odd = 0\n  while (num > 0) do\n    even = even * 10 + (num\
    \ % 10)\n    odd = (odd + 1) % 2\n    num = math.floor(num / 10)\n  end\n  return\
    \ (even, odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm0ic7qew.lua:14: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0;\n \
    \   for i = 1, math.ceil(math.log(num, 2)) do\n        if num % 2 == 0 then\n\
    \            even = even + 1;\n        end\n        if num % 2 ~= 0 then\n   \
    \         odd = odd + 1;\n        end\n        num = math.floor(num / 10);\n \
    \   end\n    return even, odd;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptu333f8s.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmptu333f8s.lua:12: in local 'candidate'\n\t/tmp/tmptu333f8s.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 1\n    local\
    \ odd = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi90d1vvg.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = tonumber(num)\n  local\
    \ even, odd = 0, 0\n  -- If num is 0, there will be no even and odd digit. Thus,\
    \ return (0, 0).\n  if num == 0 then\n    return 0, 0\n  elseif num > 0 then\n\
    \    even, odd = even_odd_count(math.floor(num / 2))\n    num, rem = math.modf(num)\n\
    \    even = even + 1\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9d9exqt.lua:22:\
    \ expected: {0, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmps9d9exqt.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- We want to make sure we\
    \ don't go below 0 and above 10 since those are odd and even.\n  -- For example\
    \ 0 is the only even number so we don't want to subtract it off since we end up\
    \ getting a negative number.\n  -- We also want to make sure we actually have\
    \ a number to work with.\n  if num < 0 then return nil end\n  if num > 10 then\
    \ return nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi1ikja6o.lua:25: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then\n    return\
    \ (0, 0)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplyklq2zp.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even_count = 0\n\tlocal\
    \ odd_count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyt_qxoz6.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num <= 0 then\n     \
    \   return (1, 0)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6oq1dmsz.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local evens, odds\n  -- Find\
    \ even digits\n  evens, odds = 0, 1\n  while num > 0 do\n    evens = evens * 10\
    \ + num % 10\n    num = math.floor(num / 10)\n  end\n  -- Find odd digits\n  evens\
    \ = evens * 10 + num % 10\n  odds = odds * 10 + num % 10\n  return evens, odds\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7qhctjg.lua:22:\
    \ expected: {0, 1}\nactual: 70\nstack traceback:\n\t/tmp/tmpa7qhctjg.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   local even, odd = 0, 0\n\
    \   if num < 0 then\n      return even, odd\n   end\n   for i = 1, 10 do\n   \
    \   local mod = (num % i)\n      if mod == 0 then\n         even = even + 1\n\
    \      elseif mod == i then\n         odd = odd + 1\n      end\n   end\n   return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq18j388.lua:24:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpfq18j388.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  if num < 0 then\n    num = -num\n  end\n  -- num is bigger than 0.\n\
    \  while num > 0 do\n    local remain = math.mod(num, 10)\n    -- num is still\
    \ bigger than 0.\n    if remain == 0 then\n      even = even+1\n    else\n   \
    \   odd = odd+1\n    end\n    num = math.trunc(num / 10)\n  end\n  return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12ls6zgt.lua:13:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp12ls6zgt.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp12ls6zgt.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local odd = 0\n  local even\
    \ = 1\n  while true do\n    local tmp = num % 10\n    num = math.floor(num / 10)\n\
    \    if tmp % 2 == 0 then\n      even = even * 10 + tmp\n    else\n      odd =\
    \ odd*10 + tmp\n    end\n    if num == 0 then\n      break\n    end\n  end\n \
    \ return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurd9972h.lua:26:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpurd9972h.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 1\n  local odd\
    \ = 1\n  while num > 0 do\n    if num & 1 ~= 0 then\n      even = even + 1\n \
    \   else\n      odd = odd + 1\n    end\n    num = num >> 1\n  end\n  return (even,\
    \ odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0up4e97o.lua:16: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    num = math.abs(num)\n  \
    \  local even = 1\n    local odd = 0\n    while num > 0 do\n        even = even\
    \ + math.floor((num / 2))\n        odd = odd + math.floor((num / 2))\n       \
    \ num = math.floor(num / 2)\n    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpizm43e_9.lua:14: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   if num == 0 then\n      return\
    \ (1, 0)\n   else\n      local even, odd = 0, 1\n      while num > 0 do\n    \
    \     if num %2 ~= 0 then\n            even = even * 10 + num % 2 -- Odd Digits\n\
    \         else\n            odd = odd * 10 + num % 2 -- Even Digits\n        \
    \ end\n         num = num / 2\n      end\n      return (even, odd)\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0sds00qs.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n   local even = 0\n   local\
    \ odd = 0\n   if num < 0 then return nil end\n   if num == 0 then return nil end\n\
    \   if num == -1 then return nil end\n   if num % 2 == 0 then\n      return num,\
    \ nil\n   end\n   local div = math.floor(math.abs(num) / 2)\n   for i = 1, div\
    \ + 1 do\n      if num % i == 0 then\n         even = even + 1\n      else\n \
    \        odd = odd + i\n      end\n   end\n   return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey4gcjhs.lua:28:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpey4gcjhs.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local numDigits = math.floor(math.log(math.abs(num),\
    \ 10)) + 1;\n  -- If the number is negative, we return empty tuple\n  if num <\
    \ 0 then\n    return ()\n  end\n  local even = num / 10\n  local odd = (num -\
    \ even * 10) / 10\n  if even % 2 then\n    return even, odd\n  else\n    return\
    \ odd, odd\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0_s5xm73.lua:9: unexpected symbol near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then return nil\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4oerxp1t.lua:21: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 1\n    local\
    \ odd = 1\n    while num > 0 do\n        even = even + 1 if num % 2 == 0 end\n\
    \        odd = odd + 1 if num % 2 ~= 0 end\n        num = math.floor(num / 2)\n\
    \    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp27mqe6bs.lua:9: 'then' expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  -- count the digits of num\n  for i = 1, math.floor(math.log(math.abs(num),\
    \ 10)) + 1 do\n    local current_digit = math.floor(num / math.pow(10, i))\n \
    \   -- only increment the count if the number is even.\n    if current_digit %\
    \ 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1 -- increment\
    \ the count if the number is odd.\n    end\n  end\n  return even, odd\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5ovvi7c.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpk5ovvi7c.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- If number is negative,\
    \ return (0 , 0)\n  if num < 0 then\n    return (0 , 0)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe6sl51ou.lua:8: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local result = (0, 0)\n\
    \    for i = 1, num do\n        if num % 2 == 0 then\n            num = num /\
    \ 2\n        else\n            num = num / 2 + 1\n        end\n        result\
    \ = even_odd_count(num), result[1]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgmfh8zk7.lua:6: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then\n    return\
    \ (0,0)\n  end\n  if num % 2 == 0 then\n    return (num / 2, 0)\n  end\n  return\
    \ (num / 2 - 1, num % 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7y_v58e2.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    for i=1, num do\n        if i % 2 == 0 then\n            even =\
    \ even + 1\n        end\n        if i % 2 ~= 0 then\n            odd = odd + 1\
    \ \n        end\n    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp20z3g0ur.lua:16: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 1\n \
    \ while num > 0 do\n    local remainder = math.fmod(num, 10)\n    if remainder\
    \ == 0 then even = even + 1 end\n    if remainder == 1 then odd = odd + 1 end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1y97q68.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx1y97q68.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = math.floor(math.log10(num))\n\
    \  local odd = even + 1\n  return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zmql2m0.lua:14:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp4zmql2m0.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = nil\n    local\
    \ odd = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmgwnn1h6.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal count = 0\n\tlocal isEven\
    \ = 0\n\tlocal isOdd = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5og9m38f.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num < 0 then\n      \
    \  error(\"even_odd_count expects a non-negative number\")\n    end\n    local\
    \ even, odd = 0, 1\n    while num > 0 do\n        even = even + num % 10\n   \
    \     odd = odd + num / 10 % 10\n        num = num / 10\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbsdecn7.lua:21:\
    \ expected: {0, 1}\nactual: 7.7777777777778\nstack traceback:\n\t/tmp/tmpvbsdecn7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    num = tonumber(num)\n  \
    \  if num == 0 then\n        return 0, 0\n    end\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + digit\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gng9x5w.lua:27:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp0gng9x5w.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ local n = num\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp58ylw39o.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
