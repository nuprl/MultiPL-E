name: HumanEval_30_get_positive
language: lua
prompt: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
  \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
  \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return table.unpack(l, 1, table.maxn(l))\nend", "    local ret\
    \ = {}\n    for i = 1, #l do\n        if l[i] < 0 then\n            ret[#ret +\
    \ 1] = -l[i]\n        else\n            ret[#ret + 1] = p\n        end\n    end\n\
    \    return ret\nend", "  local result = {}\n  for _, v in ipairs(l) do\n    if\
    \ not v then\n      break\n    end\n    table.insert(result, v)\n  end\n  return\
    \ result\nend", "  local negative = {}\n  for i = 1, #l do\n    if l[i] <= 0 then\n\
    \      table.insert(negative, i)\n    end\n  end\n  local positive = {}\n  for\
    \ i = #l, 1, -1 do\n    if l[i] > 0 then\n      table.insert(positive, i)\n  \
    \  end\n  end\n  if #negative > 0 then\n    table.sort(negative)\n  elseif #positive\
    \ > 0 then\n    table.sort(positive)\n  end\n  return negative, positive\nend",
  "  local result = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      result[#result\
    \ + 1] = l[i]\n    end\n  end\n  return result\nend", "  local positive = {}\n\
    \  for _, v in ipairs(l) do\n    if v ~= 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  local function is_positive(n)\n\
    \    return (n > 0 and n ~= math.floor(n))\n  end\n  return lfilter(is_positive,\
    \ l)\nend", "\tlocal p = 1\n\tlocal n = 1\n\tfor _, v in ipairs(l) do\n\t\tn =\
    \ v\n\tend\n\tif n <= 0 then\n\t\treturn nil\n\tend\n\twhile n > 0 do\n\t\tp =\
    \ (p + n) % p\n\t\tn = (n + p) % p\n\tend\n\treturn l\nend", "    return l and\
    \ l[#l > 0 and 1 or 1] or nil\nend", "    local positives = {}\n    for _, v in\
    \ ipairs(l) do\n        if v ~= 0 and v ~= math.nan then\n            positives[#positives\
    \ + 1] = v\n        end\n    end\n    return positives\nend", "    local pos =\
    \ 1\n    for _, _ in ipairs(l) do\n        if l > 0 then\n            pos = pos\
    \ + 1\n        end\n    end\n    return pos\nend", "  for i, v in ipairs(l) do\n\
    \    if v ~= 0 then\n      return v\n    end\n  end\n  return nil\nend", "   \
    \ local l2 = {}\n    for _, v in ipairs(l) do\n        if v > 0 then table.insert(l2,\
    \ v) end\n    end\n    return l2\nend", "\tlocal v = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif v > 0 then\n\t\t\tbreak\n\t\tend\n\tend\n\treturn v\nend", "  local\
    \ result = {}\n  for _, item in ipairs(l) do\n    if item > 0 then\n      result[#result\
    \ + 1] = item\n    end\n  end\n  return result\nend", "  local n = {}\n  for i\
    \ = 1, #l do\n    if l[i] > 0 then\n      table.insert(n, l[i])\n    end\n  end\n\
    \  return n\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0\
    \ then\n      table.insert(positive, l[i])\n    end\n  end\n  return positive\n\
    end", "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n     \
    \ table.insert(positive, i)\n    end\n  end\n  return positive\nend", "  local\
    \ positive = {}\n  for _, v in pairs(l) do\n    if v <= 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  local n = 0\n  for _, v in ipairs(l)\
    \ do\n    v = v > 0 and v or 0\n    n = math.max(v, n)\n  end\n  return n\nend",
  "  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(ret, l[i])\
    \ end\n  end\n  return ret\nend", "  local r = {}\n  for i=1,#l do\n    if l[i]\
    \ > 0 then\n      table.insert(r, l[i])\n    end\n  end\n  return r\nend", " \
    \ local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend", "  local new_l = {}\n  local len = #l\n\
    \  for i = 1, len do\n    if l[i] > 0 then\n      table.insert(new_l, l[i])\n\
    \    end\n  end\n  return new_l\nend", "  if #l == 0 then return l else error(\"\
    bad argument\") end\n  local pos = 1\n  for i = 1, #l do\n    if l[i] < 0 then\
    \ break end\n    pos = pos + 1\n  end\n  return l[pos]\nend", "  return filter(function(x)\
    \ return x > 0 end, l)\nend", "  local positive = {}\n  for _, v in pairs(l) do\n\
    \    if v > 0 then table.insert(positive, v) end\n  end\n  return positive\nend",
  "  local i, n = 1, #l\n  while i <= n do\n    if l[i] > 0 then break end\n    i\
    \ = i + 1\n  end\n  return l[1:i]\nend", "  return l.filter(function(x) return\
    \ x > 0 end)\nend", "   local results = {}\n   for _, v in ipairs(l) do\n    \
    \  if v ~= nil and v ~= 0 then\n         table.insert(results, v)\n      end\n\
    \   end\n   return results\nend", "  for _, v in ipairs(l) do\n    if v ~= 0 and\
    \ v ~= nil then return v end\n  end\n  return l\nend", "   if l == nil then return\
    \ nil end\n   if type(l) == \"table\" then\n      local t = {}\n      for _,v\
    \ in pairs(l) do t[#t + 1] = v end\n      return t\n   end\n   if type(l) == \"\
    number\" then\n      if l > 0 then\n         return l\n      else\n         return\
    \ nil\n      end\n   end\n   if l[1] == \"-\" then\n      return l\n   end\n \
    \  local function helper(l, i)\n      if i <= #l then\n         return l[i]\n\
    \      else\n         return nil\n      end\n   end\n   return helper(l, 1)\n\
    end", "    local positive = {}\n    for i, v in ipairs(l) do\n        if v > 0\
    \ then\n            table.insert(positive, v)\n        end\n    end\n    return\
    \ positive\nend", "  local rval = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n\
    \      table.insert(rval, l[i])\n    end\n  end\n  return rval\nend", "    local\
    \ positive = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n       \
    \     table.insert(positive, v)\n        end\n    end\n    return positive\nend",
  "  for i=1,#l do\n    if l[i] > 0 then\n      return l\n    end\n  end\n  return\
    \ l\nend", "  local pos = 1\n  for _,v in ipairs(l) do pos = pos + v end\n  return\
    \ pos\nend", "  local result\n  for i = 1, #l do\n    if l[i] > 0 then break end\n\
    \    table.insert(result, l[i])\n  end\n  return result\nend", "  local positive\
    \ = {}\n  for _, value in pairs(l) do\n    if value >= 0 then\n      table.insert(positive,\
    \ value)\n    end\n  end\n  return positive\nend", "  local positive = {}\n  for\
    \ i = 1, #l do\n    if l[i] > 0 then table.insert(positive, l[i]) end\n  end\n\
    \  return positive\nend", "  if type(l) == 'table' then\n    local ret = {}\n\
    \    for i = 1, #l do\n      if l[i] > 0 then table.insert(ret, l[i]) end\n  \
    \  end\n    return ret\n  else\n    local ret = {}\n    for i = 1, #l do\n   \
    \   if l[i] > 0 then table.insert(ret, i) end\n    end\n    return ret\n  end\n\
    end", "  if type(l) == 'table' then\n    local result = {}\n    for _, v in ipairs(l)\
    \ do\n      if v > 0 then\n        result[#result + 1] = v\n      end\n    end\n\
    \    return result\n  else\n    local result = {1}\n    for _, v in ipairs(l)\
    \ do\n      if v > 0 then\n        result[#result + 1] = v\n      end\n    end\n\
    \    return result\n  end\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v ~= 0 and v ~= nil then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "   local ret = {}\n   for i = 1, #l do\n   \
    \   if l[i] >= 0 then\n         table.insert(ret, l[i])\n      end\n   end\n \
    \  return ret\nend", "    local ret = {}\n    for _, v in pairs(l) do\n      \
    \  if v > 0 then\n            table.insert(ret, v)\n        end\n    end\n   \
    \ return ret\nend", "  return l:filter(function (x) return x > 0 end)\nend", " \
    \ local p = {}\n  for _, v in ipairs(l) do p[v] = v end\n  table.sort(p)\n  return\
    \ table.unpack(p)\nend", "  local positive = {}\n  for _, v in pairs(l) do\n \
    \   if v ~= 0 and v ~= math.nan then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "  local new_l = {}\n  for i = 1, #l do\n   \
    \ if l[i] > 0 then\n      table.insert(new_l, l[i])\n    end\n  end\n  return\
    \ new_l\nend", "  if l[1] == nil then\n    return l\n  end\n  local new_list =\
    \ list{}\n  for i, v in pairs(l) do\n    if v > 0 then\n      table.insert(new_list,\
    \ v)\n    end\n  end\n  return new_list\nend", "  return filter((function(x) x\
    \ > 0), l)\nend\nget_positive = terra(res :: [Nat], l :: [Nat])\n  res = get_positive(res,\
    \ l)\nend", "    local positive = {}\n    for _, elem in ipairs(l) do\n      \
    \  if elem > 0 then\n            table.insert(positive, elem)\n        end\n \
    \   end\n    return positive\nend", "  local positive = {}\n  local i = 1\n  for\
    \ v in l do table.insert(positive, v) i = i + 1 end\n  return positive\nend",
  "  if type(l) == \"number\" then\n    l = {l}\n  end\n  local positive = {}\n  for\
    \ i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive, l[i])\n   \
    \ end\n  end\n  return positive\nend", "  local r\n  for _,v in pairs(l) do r=r\
    \ and v or nil end\n  return r\nend", "\tlocal positive = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif v ~= 0 then\n\t\t\ttable.insert(positive, v)\n\t\tend\n\tend\n\t\
    return positive\nend", "    local positive = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(positive, v)\n        end\n \
    \   end\n    return positive\nend", "    local result = {}\n    for _, v in ipairs(l)\
    \ do\n        if v > 0 then\n            result[#result + 1] = v\n        end\n\
    \    end\n    return result\nend", "  local t = {}\n  local i = 1\n  for _ in\
    \ l:gmatch(\"(-?%d+)\") do\n    if _ == 0 then\n      t[i] = nil\n    else\n \
    \     t[i] = tonumber(_)\n    end\n    i = i + 1\n  end\n  return t\nend", " \
    \ local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(ret,\
    \ l[i])\n    end\n  end\n  return ret\nend", "  local ret = {}\n  for _, v in\
    \ ipairs(l) do\n    if v ~= 0 then table.insert(ret, v) end\n  end\n  return ret\n\
    end", "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n     \
    \ table.insert(positive, l[i])\n    end\n  end\n  return positive\nend", "  local\
    \ positive = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v >= 0 then\n\
    \      table.insert(positive, v)\n    end\n  end\n  return positive\nend", " \
    \ local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend", "  local positive = {}\n  for\
    \ _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n \
    \   end\n  end\n  return positive\nend", "  local new_l = {}\n  local positive\
    \ = true\n  for i=1,#l do\n    if l[i] > 0 then\n      new_l[i] = l[i]\n     \
    \ positive = true\n    else\n      if not positive then\n        new_l[i] = 0\n\
    \      end\n      positive = false\n    end\n  end\n  return new_l\nend\n</code>\n\
    <|/ a tags=lua-table,lua,sorting dscore=2 |>\n<| a |>\nI have made a table which\
    \ can sort by two columns. \nThis table can then be sorted by \"column\" which\
    \ is also a table and you can sort by any column\n<code>", "  return l:map(function(x)\
    \ return x > 0 and x or 0 end)\nend", "   local results = {}\n   for _, v in ipairs(l)\
    \ do\n      if v > 0 then\n         table.insert(results, v)\n      end\n   end\n\
    \   return results\nend", "    local positive = {}\n    for _, v in ipairs(l)\
    \ do positive[math.abs(v)] = v end\n    return table.sort(positive, function(a,\
    \ b)\n        return a < b\n    end)\nend", "    local new_l = {}\n    for _,\
    \ b in ipairs(l) do\n        if b > 0 then\n            new_l[#new_l + 1] = b\n\
    \        end\n    end\n    return new_l\nend", "    local positive = {}\n    for\
    \ _, v in ipairs(l) do\n        if v >= 0 then\n            table.insert(positive,\
    \ v)\n        end\n    end\n    return positive\nend", "   local new_l = {}\n\
    \   for i = 1, #l do new_l[i] = l[i] and 1 or nil end\n   return new_l\nend",
  "  local ret = {}\n  for _, v in pairs(l) do\n    if v > 0 then table.insert(ret,\
    \ v) end\n  end\n  return ret\nend", "   local new_l = {}\n   for i=1,#l do\n\
    \      if l[i] > 0 then\n         table.insert(new_l, l[i])\n      end\n   end\n\
    \   return new_l\nend", "  local new_list = {}\n  for _, x in ipairs(l) do\n \
    \   if x > 0 then\n      new_list[#new_list + 1] = x\n    end\n  end\n  return\
    \ new_list\nend", "    return filter (function(a) return a > 0 end, l) -- Filter\
    \ out negative numbers\nend", "    local i = 1\n    local res = {}\n    for i,\
    \ v in ipairs(l) do\n        if v > 0 then table.insert(res, v) end\n    end\n\
    \    return res\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i]\
    \ > 0 then\n      table.insert(positive, table.unpack(l))\n    end\n  end\n  return\
    \ positive\nend", "  for _, v in ipairs(l) do\n    if v > 0 then\n      return\
    \ v\n    end\n  end\n  return l\nend", "  local result = {}\n  for i, v in ipairs(l)\
    \ do\n    if v >= 0 then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend", "  local lt = #l == 0\n  return lt and lt or l\nend", "  local\
    \ pos\n  local t\n  for i = 1, #l do\n    t = l[i]\n    if t > 0 then\n      if\
    \ pos == nil then\n        pos = t\n      else\n        if t < pos then\n    \
    \      pos = t\n        end\n      end\n    end\n  end\n  return pos\nend", " \
    \ local n = nil\n  for i = 1, #l do\n    if l[i] > 0 then\n      n = n\n    elseif\
    \ n == nil then\n      n = l[i]\n    end\n  end\n  return n\nend", "  if #l ==\
    \ 0 then return nil end\n  if type(l[1]) == \"number\" then\n    if l[1] >= 0\
    \ then\n      return l\n    else\n      return nil\n    end\n  else\n    local\
    \ newl = {}\n    for _, x in ipairs(l) do\n      if type(x) == \"number\" and\
    \ x >= 0 then\n        newl[#newl + 1] = x \n      else\n        return nil\n\
    \      end\n    end\n    return newl\n  end\nend", "  if l == nil then return\
    \ nil end\n  local rv = { }\n  local i = 1\n  for v in l do rv[i] = v end\n  for\
    \ i = #rv - 1, i + 1, -1 do rv[i] = 0 end\n  return rv\nend", "    local new_l\
    \ = {}\n    for _, v in ipairs(l) do\n        if v >= 0 then\n            new_l[#new_l\
    \ + 1] = v\n        end\n    end\n    return new_l\nend", "  local positive =\
    \ {}\n  for i=1,#l do\n    if l[i] > 0 then\n      table.insert(positive, l[i])\n\
    \    end\n  end\n  return positive\nend", "  return l |> filter(function(x) return\
    \ x > 0 end)\nend", "    local result = {x = 0}\n    for i, v in ipairs(l) do\n\
    \        if v > 0 then\n            result[x] = v\n            x = x + 1\n   \
    \     end\n    end\n    return result\nend", "  if #l == 0 then\n    return nil\n\
    \  else\n    local new_l = {}\n    for i = 1, #l do\n      new_l[i] = l[i] and\
    \ l[i] > 0 and l[i] or nil\n    end\n    return new_l\n  end\nend", "  local positive\
    \ = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  local positive = {}\n  for i\
    \ = 1, #l do\n    if l[i] >= 0 then\n      table.insert(positive, i)\n    end\n\
    \  end\n  return positive\nend", "  local result = {}\n  for _, el in pairs(l)\
    \ do\n    if el > 0 then result[#result + 1] = el end\n  end\n  return result\n\
    end", "  local v = {}\n  for _, v in ipairs(l) do\n    if v > 0 then break end\n\
    \  end\n  return v\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i]\
    \ >= 0 then\n      table.insert(positive, i)\n    end\n  end\n  return table.concat(positive)\n\
    end", "    local positive = {}\n    for _, v in pairs(l) do\n        if v > 0\
    \ then\n            table.insert(positive, v)\n        end\n    end\n    return\
    \ positive\nend", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v\
    \ >= 0 then\n      table.insert(positive, v)\n    end\n  end\n  return positive\n\
    end", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend", "  local positive = {}\n  for _, v in\
    \ ipairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "  local l2 = {}\n  for _, x in ipairs(l) do\
    \ table.insert(l2, x) end\n  table.sort(l2, function(a, b) return a < b end)\n\
    \  local p = {}\n  for i = 1, #l2 do table.insert(p, l2[i]) end\n  return p\n\
    end", "   if #l == 0 then return nil\n   elseif #l == 1 then return l[1]\n   else\
    \ return l[1] and l[1] or get_positive(l[2:]) and get_positive(l[2:]) or nil end\n\
    end", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n\
    \      table.insert(positive, v)\n    end\n  end\n  return positive\nend", " \
    \   local _, n = select('#', l)\n    if n == 0 then\n        return l\n    end\n\
    \    local result = {}\n    for i = 1, n do\n        if l[i] > 0 then\n      \
    \      table.insert(result, l[i])\n        end\n    end\n    return result\nend\n\
    get_positive = Curry(get_positive)", "  local positive = {}\n  local pos = 1\n\
    \  for _, v in pairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n\
    \    end\n    pos = pos + v\n  end\n  return positive\nend", "    local positive\
    \ = {}\n    for i, v in ipairs(l) do\n        if v <= 0 then\n            table.insert(positive,\
    \ v)\n        end\n    end\n    return positive\nend", "  local result = {}\n\
    \  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(result, l[i])\n\
    \    end\n  end\n  return result\nend", "  return l\n    local new_l = {}\n  \
    \  for _, v in ipairs(l) do\n      if v >= 0 then\n        new_l[#new_l + 1] =\
    \ v\n      end\n    end\n    return new_l\nend", "    local r = {}\n    local\
    \ max = 0\n    for i, v in ipairs(l) do\n        if v > 0 then\n            r[#r+1]\
    \ = v\n            if v > max then\n                max = v\n            end\n\
    \        end\n    end\n    return max == 0 and l or r\nend", "  local newL = {}\n\
    \  for i,v in pairs(l) do if v ~= 0 then newL[i] = v end end\n  return newL\n\
    end", "  for i = 1, #l do\n    if l[i] > 0 then return l end\n  end\n  return\
    \ nil\nend", "  return l and unpack(filter_mapfunction(function(x)\n    return\
    \ x > 0 and x or nil\n  end, l))\nend", "  local positive = {}\n  for i = 1, #l\
    \ do\n    if l[i] > 0 then\n      table.insert(positive, i)\n    end\n  end\n\
    \  return positive\nend", "  if #l == 0 then\n    return nil\n  else\n    local\
    \ positive = {}\n    for _, x in ipairs(l) do\n      if x > 0 then\n        table.insert(positive,\
    \ x)\n      end\n    end\n    return positive\n  end\nend", "  local i, length\
    \ = next(l), #l\n  for i = 1, length do\n    if l[i] >= 0 then\n      table.insert(l,\
    \ l[i])\n    end\n  end\n  return l\nend", "  return terralib.newlist({\n    \
    \  unpack(l):map(\n        function(x)\n          if x >= 0 then\n           \
    \ return x\n          else\n            return nil\n          end\n        end)\n\
    \  })\nend", "  local i = 1\n  while i < #l do\n    if l[i] > 0 then\n      l[i]\
    \ = l[i]\n    else\n      i = i + 1\n    end\n  end\n  return l\nend", "  local\
    \ result = {}\n  local positive = 1\n  for i, v in ipairs(l) do\n    if v <= 0\
    \ then\n      table.insert(result, v)\n      table.insert(result, positive)\n\
    \    end\n    positive = positive + 1\n  end\n  return result\nend", "    local\
    \ ret = {}\n    for _, v in ipairs(l) do\n        if v ~= 0 and v ~= -v then\n\
    \            ret[#ret + 1] = v\n        end\n    end\n    return ret\nend", '  local
    new_l = nil', "  local new_l = {}\n  local positive\n  for _, v in ipairs(l) do\n\
    \    if positive and v > 0 then\n      new_l[#new_l + 1] = v\n      positive =\
    \ nil\n    elseif positive == nil then\n      positive = v > 0\n    end\n  end\n\
    \  return new_l\nend", "  local positive = {}\n  for i = 1, #l do\n    if l[i]\
    \ > 0 then\n      table.insert(positive, table.copy(l))\n      table.delete(l,\
    \ i)\n      break\n    end\n  end\n  return table.concat(positive)\nend", "  return\
    \ filter_list(\n    function(x) return x > 0 end,\n    l\n  )\nend", "   local\
    \ i = 1\n   local results = {}\n   for i = 1, #l do\n      local x = l[i]\n  \
    \    if x >= 0 then\n         results[i] = x\n      end\n   end\n   return results\n\
    end", "  if l==nil then return nil end\n  local positive = {}\n  for i=1,#l do\
    \ if l[i]>=0 then table.insert(positive, l[i]) end end\n  return positive\nend",
  "  local positives = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positives,\
    \ l[i])\n    end\n  end\n  return positives\nend", "  local positive = {}\n  for\
    \ i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive, l[i])\n   \
    \ end\n  end\n  return positive\nend", "  if type(l) == 'table' then\n    local\
    \ new_l = nil\n    for i = 1, #l do\n      if get_positive(l[i]) then\n      \
    \  new_l = {new_l, l[i]}\n      end\n    end\n    return new_l\n  else\n    local\
    \ v = {}\n    for i = 1, #l do\n      v[i] = l[i] > 0 and l[i] or nil\n    end\n\
    \    return v\n  end\nend", "  local l1 = l[1]\n  for i = 1, #l do\n    if l[i]\
    \ < 0 then\n      return nil\n    end\n    l1[i] = l[i]\n  end\n  return l1\n\
    end", "    return select(2, l)\nend", "  local r\n  for i, v in ipairs(l) do\n\
    \    if v > 0 then\n      if r == nil then\n        r = {}\n      end\n      r[#r+1]\
    \ = v\n    end\n  end\n  return r\nend", "  for i, v in ipairs(l) do\n    if v\
    \ <= 0 then\n      return l\n    end\n  end\n  return l\nend", "    local r\n\
    \    for _, v in ipairs(l) do\n        if v ~= nil then\n            if not r\
    \ then\n                r = {}\n            end\n            r[v] = true\n   \
    \     end\n    end\n    return r\nend", "  local positive = {}\n  for i = 1, #l\
    \ do\n    if l[i] > 0 then\n      table.insert(positive, l[i])\n    end\n  end\n\
    \  return positive\nend", "  local result = {}\n  for i = 1, #l do\n    if not\
    \ l[i] or l[i] <= 0 then\n      result[i] = nil\n    else\n      result[i] = l[i]\n\
    \    end\n  end\n  return result\nend", "  local _, ret = {}, {}\n  for _, v in\
    \ ipairs(l) do\n    if v ~= 0 then\n      table.insert(ret, v)\n    end\n  end\n\
    \  return ret\nend", "  if l==nil then return nil end\n  if type(l)~='table' then\
    \ return l end\n  local r={}\n  for i=1,#l do r[i]=l[i] end\n  for i=#l,1,-1 do\
    \ r[i]=l[i-1] end\n  return r\nend", "    local result = {}\n    for i, v in ipairs(l)\
    \ do\n        if v > 0 then\n            result[i] = v\n        end\n    end\n\
    \    return result\nend", "    local function has_positive(n)\n        return\
    \ n > 0\n    end", "  local p = 0\n  for i, v in ipairs(l) do\n    if v ~= 0 then\n\
    \      p = p + 1\n      l[i] = v\n    end\n  end\n  return l\nend", "  local t\
    \ = {}\n  for _, v in ipairs(l) do\n    if v > 0 then table.insert(t, v) end\n\
    \  end\n  return t\nend", "  local function ret(v)\n    if v < 0 then\n      --\
    \ Return only the positive numbers in the list.\n      return nil\n    end\n \
    \   return v\n  end\n  return table.concat(l, \"; \", ret)\nend", "    local positive\
    \ = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n            table.insert(positive,\
    \ v)\n        end\n    end\n    return positive\nend", "  local r\n  for _, v\
    \ in pairs(l) do\n    if v ~= 0 then\n      r = r or {}\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "  local ret = {}\n  for _,v in ipairs(l)\
    \ do\n    if v > 0 then table.insert(ret, v) end\n  end\n  return ret\nend", " \
    \ local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend", "  local _positive = {}\n  for\
    \ i = 1, #l do\n    if l[i] > 0 then _positive[#_positive + 1] = l[i] end\n  end\n\
    \  return _positive\nend", "  local result = {}\n  for _, v in pairs(l) do\n \
    \   if v ~= 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end", "  local function positive_filter(v)\n    return v >= 0 and v ~= nil and\
    \ v -- nil means \"none\", which should always be filtered out.\n  end\n  return\
    \ filter_table(l, positive_filter)\nend", "  local positive = {}\n  for _, v in\
    \ ipairs(l) do\n    if v >= 0 then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "  return filter(function (x) return x > 0 end,\
    \ l)\nend", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v ~= 0\
    \ then\n      table.insert(positive, v)\n    end\n  end\n  return positive\nend",
  "  local ret = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend", "  local result = {}\n  for i = 1, #l\
    \ do\n    if l[i] > 0 then\n      result[#result + 1] = l[i]\n    end\n  end\n\
    \  return result\nend", "  local _positive = {}\n  for i = 1, #l do\n    if l[i]\
    \ > 0 then _positive[#_positive + 1] = l[i] end\n  end\n  return _positive\nend",
  "  local rv = { }\n  local pos\n  local neg\n  for i=1,#l do\n    local elem = l[i]\n\
    \    local ok, val = pcall(function() return math.abs(elem) end)\n    if ok then\n\
    \      if val <= 0 then\n        table.insert(rv, elem)\n      elseif val > 0\
    \ then\n        table.insert(rv, -1)\n      else\n        table.insert(rv, 0)\n\
    \      end\n    else\n      pos = elem > 0 and 1 or -1\n      neg = elem < 0 and\
    \ -1 or 1\n      table.insert(rv, neg * pos) -- Negative number becomes positive\
    \ number.\n    end\n  end\n  return rv\nend", "  local positive = {}\n  for i\
    \ = 1, #l do\n    if l[i] > 0 then table.insert(positive, l[i]) end\n  end\n \
    \ return positive\nend", "  return l:filter(function(x)\n    return x > 0 and\
    \ x ~= 0 and x ~= false\n  end)\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ positive\nend", "  local result = {}\n  for _,v in ipairs(l) do result[v] =\
    \ true end\n  return table.sort(result, function(a,b) return a < b end)\nend",
  "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend", "  local positive = {}\n  for _,\
    \ v in pairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "  local r = {}\n  for i = 1, #l do\n    if l[i]\
    \ > 0 then table.insert(r, l[i]) end\n  end\n  return r\nend", "  local _positive\
    \ = {}\n  for _, v in ipairs(l) do\n    if v ~= nil and v ~= 0 then _positive[v]\
    \ = true end\n  end\n  return table.concat(_positive, \",\")\nend", "  local new_l\
    \ = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(new_l, l[i])\n\
    \    end\n  end\n  return new_l\nend", "    local positive = {}\n    for _, v\
    \ in pairs(l) do\n        if v ~= 0 then table.insert(positive, v) end\n    end\n\
    \    return positive\nend", "  return l\n  and l\n  and setmetatable({l}, getmetatable(l))\n\
    \  and unpack(select(2, l))\nend", "  local positive = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then\n      table.insert(positive, i)\n    end\n  end\n  return\
    \ positive\nend", "  return torch.lt(l):int():sum(1)\nend", "  local i, count\
    \ = 1, 0\n  local newL = {}\n  for _, el in ipairs(l) do\n    if el > 0 then count\
    \ = count + 1 else count = 1 end\n    newL[i] = el\n    i = i + 1\n  end\n  return\
    \ newL\nend", "  local results = {}\n  for _, x in ipairs(l) do if x == 0 then\
    \ break end; results = table.concat(results, x) end\n  return results\nend", " \
    \  if #l == 0 then return nil end\n   local positive = {}\n   for i, value in\
    \ ipairs(l) do\n      if value >= 0 then\n         table.insert(positive, value)\n\
    \      end\n   end\n   return positive\nend", "  return l[1]\nend", "  local v\
    \ = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(v, l[i])\n\
    \    end\n  end\n  return v\nend", "  local positive = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then\n      table.insert(positive, l[i])\n    end\n  end\n  return\
    \ positive\nend", "  if #l == 0 then return nil end\n  if type(l[1]) == \"number\"\
    \ then\n    return l\n  else\n    local ret = {}\n    for i=1,#l do\n      if\
    \ l[i] ~= nil and l[i] ~= false and l[i] ~= 0 then\n        if #ret == 0 then\n\
    \          table.insert(ret, l[i])\n        else\n          if l[i-1] ~= nil and\
    \ l[i-1] ~= false then\n            table.insert(ret, l[i])\n          else\n\
    \            table.insert(ret, 0)\n            table.insert(ret, l[i])\n     \
    \     end\n        end\n      end\n    end\n    return ret\n  end\nend", "  local\
    \ r\n  r = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      r[#r + 1] = l[i]\n\
    \    end\n  end\n  return r\nend", "  local r\n  if #l == 0 then\n    r = l\n\
    \  else\n    r = {}\n    for i = 1, #l do\n      if l[i] > 0 then\n        r[#r\
    \ + 1] = l[i]\n      end\n    end\n  end\n  return r\nend", "  local ret = {}\n\
    \  for _, v in ipairs(l) do\n    if v ~= nil then\n      if v ~= 0 then\n    \
    \    ret[#ret + 1] = v\n      end\n    end\n  end\n  return ret\nend", "  local\
    \ positive = {}\n  for _, v in pairs(l) do\n    if v ~= nil then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  local positive = {}\n  for i\
    \ = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive, l[i])\n    end\n\
    \  end\n  return positive\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ positive\nend", "   local _, result\n   local i = 1\n   for _, v in pairs(l)\
    \ do\n      if not is_positive(v) then\n         result = nil\n         break\n\
    \      else\n         if result then\n            result = result or {}\n    \
    \        for j = 1, i do\n               result[j] = v\n            end\n    \
    \     else\n            result = {}\n            for j = 1, i do\n           \
    \    result[j] = v\n            end\n         end\n      end\n      i = i + 1\n\
    \   end\n   return result\nend", "  local v = {}\n  for _, v in pairs(l) do\n\
    \    if v ~= 0 then\n      return v\n    end\n  end\nend", "  if l == nil then\
    \ return nil end\n  if l == 1 then return l end\n  local result = {}\n  for i\
    \ = 1, #l do\n    if l[i] > 0 then\n      result[i + 1] = l[i]\n    end\n  end\n\
    \  return result\nend", "    local positive = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(positive, v)\n        end\n \
    \   end\n    return positive\nend", "  local r\n  for _, v in ipairs(l) do\n \
    \   if v ~= 0 then\n      if not r then\n        r = {}\n      elseif type(r)\
    \ == 'table' then\n        table.insert(r, v)\n      else\n        r = {v, r}\n\
    \      end\n    end\n  end\n  return r\nend", "  local new_list = {}\n  for _,\
    \ v in ipairs(l) do\n    if v > 0 then\n      table.insert(new_list, v)\n    end\n\
    \  end\n  return new_list\nend", "  local result = {}\n  for i, v in ipairs(l)\
    \ do result[i] = v end\n  table.sort(result)\n  return result\nend", "  return\
    \ l\n  --[[\n  local function is_positive(x)\n    return (x > 0) and (x) or 0\n\
    \  end\n  return table.map(l, function(x)\n    return is_positive(x)\n  end)\n\
    \  ]]\nend", "   for i = 1, #l do\n      if l[i] > 0 then\n         return l\n\
    \      else\n         return nil\n      end\n   end\nend", "  local t = {}\n \
    \ for _, v in ipairs(l) do table.insert(t, v) end\n  for i, v in ipairs(t) do\n\
    \    if v ~= 0 then return v end\n  end\nend", "   if l == nil then return nil\
    \ end\n   if type(l) == \"number\" then\n      if l > 0 then return l end\n  \
    \ end\n   for _, value in ipairs(l) do\n      if type(value) == \"number\" and\
    \ value >= 0 then\n         return value\n      end\n   end\n   return nil\nend",
  "  return filter(function(x) return x > 0 end, l)\nend", "  if l[1] == nil then\n\
    \    return nil\n  end\n  if l[1] < 0 then\n    return nil\n  end\n  return l[1]\n\
    end", "  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend", "  local result = {}\n  for i = 1,\
    \ #l do\n    if l[i] > 0 then\n      result[#result + 1] = l[i]\n    end\n  end\n\
    \  return result\nend", "  local new_list = {}\n  for i = 1, #l do\n    if l[i]\
    \ > 0 then\n      new_list[#new_list + 1] = l[i]\n    end\n  end\n  return new_list\n\
    end", "  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(ret,\
    \ l[i])\n    end\n  end\n  return ret\nend", "  local positive = {}\n  for _,\
    \ v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "    local positive = {}\n    for _, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(positive, v)\n        end\n\
    \    end\n    return positive\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
