name: HumanEval_15_string_sequence
language: lua
prompt: "-- Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n--\
  \ '0 1 2 3 4 5'\nlocal function string_sequence(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
  \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0 1\
  \ 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = ''\n  for i=1,n do s = s .. ' ' .. i end\n  return s\n\
    end", "  local str = ''\n  for i = 1, n do\n    str = str .. '\\0' .. tostring(i)\n\
    \  end\n  return str\nend", "  local str = ''\n  for i = 1, n do\n    str = str\
    \ .. string(i)\n  end\n  return str\nend", "  local s = ''\n  for i = 1, n do\
    \ s = s .. ' ' .. tostring(i) end\n  return s\nend", "  if n == 0 then\n    return\
    \ '0'\n  elseif n == 1 then\n    return '1 '\n  else\n    local result = ''\n\
    \    for i = 3, n do\n      result = result .. ' ' .. i\n    end\n    return result\n\
    \  end\nend", "  if n ~= nil then\n    return string.format('%d', n)\n  end\n\
    \  return '0'\nend", "  if n==0 then return '0' end\n  local str = ''\n  local\
    \ nstr = ''\n  while n do\n    if nstr then\n      str = str .. ' ' .. nstr\n\
    \    end\n    nstr = string.format('%0d', n - (nstr == '0' and 1 or 0))\n  end\n\
    \  return str .. ' ' .. nstr\nend", "  if n<0 then\n    return nil\n  end\n  return\
    \ '0' .. table.concat(table.range(0,n),' ')\nend", "  if n >= 0 then\n    if n\
    \ == 0 then\n      return ''\n    else\n      local s = ''\n      for i=1,n do\n\
    \ts = s .. string(i)\n      end\n      return s\n    end\n  end\nend", "   if\
    \ n < 1 then\n      return '0'\n   end\n   local result = \"\"\n   local i = 2\n\
    \   while i <= n do\n      result = result .. i\n      i = i + 1\n   end\n   return\
    \ result\nend", "\t-- Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n\t-- >>> string_sequence(0)\n\t-- ''\n\t-- >>> string_sequence(5)\n\
    \t-- '0 1 2 3 4 5'\n\treturn ' ' .. table.concat(table.range(1,n), ' ') .. ' '\n\
    end", "    local str = ''\n    local i = 0\n    while i <= n do\n        str =\
    \ str .. ' ' .. i\n        i = i + 1\n    end\n    return str\nend\nreturn string_sequence",
  "  local result = '{'\n  for i = 1, n do result = result .. ' ' .. i .. ' ' end\n\
    \  result = result .. '}'\n  return result\nend", "\tlocal s = ''\n\tfor i = 1,\
    \ n do s = s .. ' ' end\n\treturn s\nend", "  local s = ''\n  for i = 1, n do\n\
    \    s = g..' ' .. i\n  end\n  return s\nend", "  local str = ''\n  for i = 1,\
    \ n do\n    str = str .. ' ' .. i\n  end\n  return str\nend", "  if n <= 0 then\n\
    \    return '0'\n  end\n  local seq = ''\n  repeat\n    seq = '' .. seq .. tostring(n)\n\
    \    n = n - 1\n  until n == 1\n  return seq\nend", "\tlocal str = string.rep(\"\
    0\", n)\n\tstr[#str+1] = \"1\"\n\treturn str\nend", "   assert(n >= 0, 'n must\
    \ be non-negative')\n   local str = ''\n   for i = 1, n do\n      str = str ..\
    \ string.format('%d ', i)\n   end\n   return str\nend", "    local s = ''\n  \
    \  for i=0,n do \n        s = s .. tostring(i) .. ' '\n    end\n    return s\n\
    end", "\tlocal str = ''\n\tfor i = 1, n do\n\t\tstr = str .. tostring(i) .. '\
    \ '\n\tend\n\treturn str\nend", "  if n then\n    return string.format('%d ',\
    \ ipairs(table.unpack(table.concat({ 0 }, math.abs(n) - 1))))\n  end\n  return\
    \ '0 '\nend", "    local seq = \"\"\n    for i = 1, n do seq = seq..tostring(i)\
    \ end\n    return seq\nend", "  return table.concat(table.range(1, n), ' ', 1,\
    \ '')\nend", "  local str = ''\n  for i = 1, n do str = str .. i .. ' ' end\n\
    \  return str\nend", "    return table.concat(\n                 for _ = 1,\n\
    \                  n+1,\n                  function (x)\n                    \
    \ return string.format('%s ',\n                           x)\n               \
    \   end,\n                  table.remove(arguments, 1, n+1)\n               )\n\
    end", "  local s = ''\n  for i = 1, n do s = s .. i .. ' ' end\n  return s\nend",
  "  local s = ''\n  for i = 1, n do s = s .. ' ' .. i end\n  return s\nend", "  if\
    \ n >= 0 then\n    local s = \"\"\n    for i = 1, n do s = s .. tostring(i) ..\
    \ \" \" end\n    return s\n  else\n    return \"negative argument\"\n  end\nend",
  "  if n <= 0 then\n    return \"\"\n  end\n  local s = \"0\"\n  for i = 1, n do\n\
    \    s = s .. \" \" .. tostring(i)\n  end\n  return s\nend", "  if n == 0 then\
    \ return '0' end\n  local sequence = '' .. tostring(n)\n  while #sequence > 0\
    \ do\n    sequence = tostring(n - 1)\n  end\n  return sequence\nend", "  if n\
    \ == 0 then\n    return ''\n  else\n    return string_sequence(n - 1) .. ' ' ..\
    \ tostring(n)\n  end\nend", "  local str = ''\n  for i = 1, n do\n    str = str\
    \ .. '\" ' .. i .. '\"'\n  end\n  return str\nend", "  local str = ''\n  while\
    \ n ~= 0 do\n    str = str .. string.format('%d ', n)\n    n = n - 1\n  end\n\
    \  return str\nend", "  local s = ''\n  while n ~= 0 do\n    s = s .. tostring(n)\n\
    \    n = math.floor(n/10)\n  end\n  return s\nend", "  local s = ''\n  while n\
    \ ~= nil do\n    s, n = tostring(s), n-1\n  end\n  return s\nend", "    local\
    \ s = ''\n    for i = 1, n do\n        s = s .. ' ' .. tostring(i)\n    end\n\
    \    return s\nend", "  local str\n  if n <= 0 then\n    return '0'\n  else\n\
    \    str = string_sequence(n-1)\n    str = str .. ' ' .. str\n  end\n  return\
    \ str\nend", "  return n..' '\nend\n</cell>\n<text>\nThe next cell contains functions\
    \ that create and destroy a table of vectors (of floats).", "  local sequence\
    \ = \"\"\n  for i = 1, n do\n    sequence = sequence .. \" \" .. tostring(i)\n\
    \  end\n  return sequence\nend", "  local s = ''\n  for _ = 1, n do\n    s = (string.sub(s,1,1)\
    \ + string.format(string.format(' %1d', n)))\n  end\n  return s\nend", "  local\
    \ s = '#'\n  for i = 1,n do\n    s = s .. i\n  end\n  return s\nend", "  if n\
    \ <= 0 then return end\n  return space(n - 1, ' ') .. space(n) .. '0 1 2 3 4 5'\n\
    end", "  local s = \"\"\n  for i = 1, n do\n    s = s .. i .. \" \"\n  end\n \
    \ return s\nend", "   local s = ''\n   for i = 1, n do\n      s = s .. i\n   end\n\
    \   return s\nend", "  local str = ''\n  for i = 1, n do\n    str = str .. string.format('%d',\
    \ i)\n  end\n  return str\nend", "    if n < 1 then return '' end\n    local s\
    \ = ''\n    for i = 1, n do\n        s = s .. ' ' .. i\n    end\n    return s\n\
    end", "  local s = ''\n  for i = 1, n do s = s .. tostring(i) .. ' ' end\n  return\
    \ s\nend", "    local a = {}\n    for i = 1, n do\n        a[i] = tostring(i)\n\
    \    end\n    return table.concat(a)\nend", "   if n == 0 then\n      return ''\n\
    \   end\n   local s = ''\n   repeat\n      s = s .. '0'\n   until n < #s\n   return\
    \ s\nend", "  local s = '0'\n  for i = 1, n do\n    s = s .. ' ' .. i\n  end\n\
    \  return s\nend", "\tlocal str = \"\"\n\tlocal i = 0\n\twhile i <= n do\n\t\t\
    str = str .. tostring(i)\n\t\ti = i + 1\n\tend\n\treturn str\nend", "  local str\
    \ = ''\n  for i = 1, n do\n    str = str .. tostring(i) .. ' '\n  end\n  return\
    \ str\nend", "    if n == 0 then return '0' end\n    return table.replicate((n-1),\
    \ ' ') .. ' ' .. string_sequence(n-1)\nend", "  local str = ''\n  for i=1,n do\n\
    \    str = str .. tostring(i)\n  end\n  return str\nend", "\tlocal t = {}\n\t\
    while n ~= nil do\n\t\tt[#t + 1] = n\n\t\tn = n - 1\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "  local str = ''\n  for i = 1, n do\n    if i > 1 then\n    \
    \  str = str .. ' '\n    end\n    str = str .. i\n  end\n  return str\nend", " \
    \ local s = ''\n  for i = 1, n do\n    s = s .. '' .. i\n  end\n  return s\nend",
  "  if n < 0 then\n    return \"-\"..string_sequence(abs(n))\n  else\n    local result\
    \ = \"\"\n    for i = 1, n do\n      result = result .. \" \" .. i\n    end\n\
    \    return result\n  end\nend", "  local s = ''\n  for i = 1, n do\n    s = s\
    \ .. string.format('%d ', i)\n  end\n  return s\nend", "  local str = ''\n  --\
    \ A counter to keep track of current position\n  local i = 1\n  -- while i is\
    \ less than or equal to n\n  while i <= n do\n    str = str .. i .. ' '\n    i\
    \ = i + 1\n  end\n  return str\nend", "  return table.concat( {}, string.rep('0',\
    \ n - 1) .. (n and n or '') )\nend", "  return '0' .. table.concat(sequence(n-1),\
    \ \" \")\nend", "  return string.format('%d', math.max(0, n))\nend", "  return\
    \ table.concat(\n    torch.range(n):map(\n      function(i)\n        return string.format('%d\
    \ ', i)\n      end\n    )\n  ):sub(2)\nend", "  if n <= 0 then\n    return '0'\n\
    \  end\n  return repeat('%d ', string_range(n))\nend", "  if n == 0 then\n   \
    \ return '0'\n  elseif n <= 0 then\n    return \"(-)\" .. string_sequence(-n-1)\n\
    \  elseif n > 0 then\n    local s = \"\"\n    for i = 1, n do\n      s = s ..\
    \ string_sequence(i-1)\n    end\n    return s\n  end\nend", "  return '0' .. table.concat({\
    \ string.char(n) }, ' ')\nend", "    return table.concat({\n        table.concat({'0'}):reverse():gsub(\"\
    ^%s*(.-)%s*$\",\n            function(c1,c2)\n                return string.format('%s\
    \ %s',c1,c2)\n            end)\n    },\" \")\nend", "  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. string.format('%03d', i) .. ' '\n  end\n  return\
    \ str:sub(1,-(n-1))\nend", "    local s = \"\"\n    for i = 1, n do \n       \
    \ s = s .. \" \" .. i\n    end\n    return s\nend", "  local str = ''\n  for _\
    \ = 1, n do\n    str = str .. ' ' .. itoa(_)\n  end\n  return str\nend", "   \
    \ local result = \"\"\n    for i=1, n do\n        result = result .. tostring(i)\n\
    \    end\n    return result\nend", "  if n==0 then\n    return '0'\n  else\n \
    \   local result = ''\n    for i=1,n do\n      result = result .. tostring(i)\n\
    \      if n<i then\n        result = result .. ' '\n      end\n    end\n    return\
    \ result\n  end\nend", "\t-- Convert the number to string and concatenate with\
    \ spaces.\n\t-- >>> string_sequence('123')\n\t-- ' 123 \"\n\tlocal str = ''\n\t\
    for i=1, n do\n\t\tstr = str .. i .. ' '\n\tend\n\tstr = str .. '\"' -- Close\
    \ the string.\n\treturn str\nend", "  if n <= 0 then\n    return \"0\"\n  else\n\
    \    local str = \"\"\n    for i = 1, n do\n      str = str .. \"-\" .. tostring(i)\n\
    \    end\n    return str\n  end\nend", "  local sequence = \"\"\n  for i = 0,\
    \ n do\n    sequence = (sequence .. \" \"..i)\n  end\n  return sequence\nend",
  "  local sequence = \"\"\n  while n ~= 0 do\n    sequence = \"%0*d%s\" % (n-1, n,\
    \ sequence)\n    n = n - 1\n  end\n  return sequence\nend", "  return stringx.join(\"\
    \ \", ipairs(string.gmatch(\"%0..\", n)))\nend", "  local result = ''\n  for i\
    \ = 1, n do\n    result = result .. i\n    if i < n then\n      result = result\
    \ .. ' '\n    end\n  end\n  return result\nend", "  if n == 0 then\n    return\
    \ '0'\n  else\n    local s = ''\n    for i=1,n do\n      s = s .. tostring(i)\n\
    \    end\n    return s\n  end\nend", "   assert(n > 0, 'n must be positive')\n\
    \   return (function()\n      local s = '0'\n      for _ = 1, n do\n\t s = s ..\
    \ '1'\n      end\n      return s\n   end)()\nend", "    local str = \"\"\n   \
    \ for i = 1, n do\n        str = str .. string.format(\" %d\", i)\n    end\n \
    \   return str\nend", "    local seq = ''\n    local i = 1\n    while i <= n do\n\
    \        seq = seq .. i .. ' '\n        i = i + 1\n    end\n    return seq\nend",
  "  return n\n    and string.char(n)\n    or assert(false, 'Expected non-nil n')\n\
    end", "  if n==1 then return '1'\n  elseif n==2 then return '1 2'\n  elseif n>2\
    \ then return string_sequence(n-1)..' 2'\n  elseif n>1 then return string_sequence(n-1)..'\
    \ 1'\n  else return '' end\nend", "  return table.concat(mapfunction(\n    function(v)\n\
    \      return string.format('%0%d', n)\n    end,\n    0,\n    n\n  ))\nend", " \
    \ local result = \"\"\n  for i = 1, n do\n    result = \"%s \" .. result\n  end\n\
    \  return result\nend", "    local str = ''\n    for i=1,n do\n        str = str\
    \ .. tostring(i) .. ' '\n    end\n    return str:sub(1,-2)\nend", "  if n == 1\
    \ then\n    return '0'\n  else\n    return table.concat({ string_to_list(string_to_list('0',\
    \ n)) }, ' ')\n  end\nend", "  if n <= 0 then\n    error('n must be positive')\n\
    \  end\n  local str = ''\n  for i = 1, n do\n    str = str .. i\n  end\n  return\
    \ str\nend", "    return table.concat(\n        {\n            table.unpack(\n\
    \                { string.sub(table.concat(\n                    { string.sub(table.concat(\n\
    \                        { string.sub(table.concat(\n                        \
    \    { string.sub(table.concat(\n                                { string.sub(table.concat(\n\
    \                                    { string.sub(table.concat(\n            \
    \                            { string.sub(table.concat(\n                    \
    \                        { string.sub(table.concat(\n                        \
    \                        { string.sub(table.concat(\n                        \
    \                            { string.sub(table.concat(\n                    \
    \                                    { string.sub(table.concat(\n            \
    \                                                { string.sub(table.concat(\n\
    \                                                                { string.sub(table.concat(\n\
    \                                                                    { string.sub(table.concat(\n\
    \                                                                        { string.sub(table.concat(\n\
    \                                                                            {\
    \ string.sub(table.concat(\n                                                 \
    \                               { string.sub(table.concat(\n                 \
    \                                                                   { string.sub(table.concat(\n\
    \                                                                            \
    \            { string.sub(table.concat(\n                                    \
    \                                                        { string.sub(table.concat(\n\
    \                                                                            \
    \                    { string.sub(table.concat(\n                            \
    \                                                                        { string.sub(table.concat(\n\
    \                                                                            \
    \                            { string.sub(table.concat(\n                    \
    \                                                                            \
    \            { string.sub(table.concat(\n                                    \
    \                                                                            {\
    \ string.sub(table.concat(\n                                                 \
    \                                                                   { string.sub(table.concat(\n\
    \                                                                            \
    \                                            { string.sub(table.concat(\n    \
    \                                                                            \
    \                                            { string.sub(table.concat(\n    \
    \                                                                            \
    \                                                { string.sub(table.concat(\n\
    \                                                                            \
    \                                                        { string.sub(table.concat(\n\
    \                                                                            \
    \                                                            { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                    { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                        { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            {\
    \ string.sub(table.concat(\n                                                 \
    \                                                                            \
    \                               { string.sub(table.concat(\n                 \
    \                                                                            \
    \                                                                   { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \            { string.sub(table.concat(\n                                    \
    \                                                                            \
    \                                                        { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                    { string.sub(table.concat(\n                            \
    \                                                                            \
    \                                                                        { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                            { string.sub(table.concat(\n                    \
    \                                                                            \
    \                                                                            \
    \            { string.sub(table.concat(\n                                    \
    \                                                                            \
    \                                                                            {\
    \ string.sub(table.concat(\n                                                 \
    \                                                                            \
    \                                                                   { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                                            { string.sub(table.concat(\n    \
    \                                                                            \
    \                                                                            \
    \                                            { string.sub(table.concat(\n    \
    \                                                                            \
    \                                                                            \
    \                                                { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                                                        { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                                                            { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                                                                { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                                                                    { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                                                                        { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            {\
    \ string.sub(table.concat(\n                                                 \
    \                                                                            \
    \                                                                            \
    \                               { string.sub(table.concat(\n                 \
    \                                                                            \
    \                                                                            \
    \                                                                   { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            { string.sub(table.concat(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                        { string.sub(table.concat(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    { string.sub(table.", "  local s = ''\n  for i = 1, n do\n\
    \    s = s .. string.format(i..\" \")\n  end\n  return s\nend", "\tlocal s = \"\
    \"\n\twhile n ~= nil do\n\t\ts = s .. tostring(n)\n\t\tn = math.ceil(n)\n\tend\n\
    \treturn s\nend", "  local result = ''\n  for i=1,n do\n    result = result ..\
    \ ' ' .. i\n  end\n  return result\nend", "  if n <= 0 then\n    return ''\n \
    \ end\n  if n == 1 then\n    return '1'\n  end\n  return string_sequence(n - 1)..'\
    \ ' .. tostring(n)\nend", "  if n < 0 then\n    error(\"argument n should be non-negative\"\
    )\n  end\n  local result = \"\"\n  for i = 1, n do\n    local value = math.floor(i/10)\
    \ + 1\n    result = result .. string.char(value, value, value, value, value, value)\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, n do\n   \
    \ local j = math.max(i, 1)\n    local k = n - j\n    local a = math.min(i, k)\n\
    \    local b = n - a\n    local spaces = j - b\n    local extra = \"\"\n    if\
    \ spaces ~= 0 then\n      extra = \" \"\n    end\n    if i < j then\n      extra\
    \ = extra..\" \"\n    end\n    extra = extra..i\n    if i < k then\n      extra\
    \ = extra..\" \"\n    end\n    result = result..\" \"..extra\n  end\n  return\
    \ result\nend", "    local ret = ''\n    for i = 1, n do\n        ret = ret ..\
    \ ' ' .. i\n    end\n    return ret\nend", "  return table.concat({'0'..n}, '\
    \ ')\nend", "\tlocal seq=''\n\tfor i=1,n do\n\t\tseq=seq..i\n\tend\n\treturn seq\n\
    end", "    local s = ''\n    for i = 1, n do\n        s = s .. i\n    end\n  \
    \  return s\nend", "  local str = ''\n  local ni = math.floor(n)\n  for i = 1,\
    \ ni do str = str .. ' ' end\n  return str\nend", "  local seq = ''\n  for _ =\
    \ 1, n do\n    seq = seq .. tostring(_) .. ' '\n  end\n  return seq\nend", " \
    \  if n > 0 then\n      return string.format('%s %d', string_sequence(n - 1),\
    \ n)\n   else\n      return '0'\n   end\nend", "    local s = ''\n    local i\
    \ = 0\n    while i < n do\n        s = s .. string(i)\n        i = i + 1\n   \
    \ end\n    return s\nend", "  local result = ''\n  for i = 1, n do\n    result\
    \ = result .. ' '\n    result = result .. string.format('%d', i)\n  end\n  return\
    \ result\nend", "  local str = ''\n  for i = 1, n do\n    str = str .. ' ' ..\
    \ tostring(i)\n  end\n  return str\nend", "  local s = ''\n  for i = 1, n do\n\
    \    s = s .. ' ' .. tostring(i)\n  end\n  return s\nend", "  return string.format('%d\
    \ ', math_range(n))\nend", "    local seq = \"\"\n    for _ = 1, n do\n      \
    \  seq = seq .. \" \" .. tostring(math.floor((math.random() - 0.5) * 10))\n  \
    \  end\n    return seq\nend", "\tlocal str = ''\n\tfor i=1,n do\n\t\tstr = str\
    \ .. ' ' .. tostring(i)\n\tend\n\treturn str\nend", "\tlocal str = string.rep('\
    \ ', n)\n\treturn str\nend", "  if n <= 0 then\n    return '0'\n  end", "    local\
    \ s = ''\n    for i = 1, n do\n        s = (string.sub(s, '..', i)) .. ' ' ..\
    \ tostring(i)\n    end\n    return s\nend", "  local i = 1\n  return string.gsub(\n\
    \    string.rep('0', n-1-i..' '..n), \n    '%d+', \n    function(w)\n      return\
    \ string.sub(w, 1, 1)..i\n    end)\nend", "    local sequence = ''\n    for i\
    \ = 1, n do\n        sequence = sequence .. ' ' .. i\n    end\n    return sequence\n\
    end", "  local s = ''\n  for i = 1, n do\n    s = s .. string(i)\n  end\n  return\
    \ s\nend", "  -- >>> string_sequence(3)\n  -- '0 1 2'\n  return string.format('%s\
    \ %s %s', 0, n, (n + 1))\nend", "  local str = ''\n  for i = 1, n do\n    str\
    \ = str .. ' ' .. i\n  end\n  return str\nend", "   if n < 1 then\n      return\
    \ ''\n   end\n   local s = ''\n   for i = 1, n do\n      s = s .. ' ' .. i\n \
    \  end\n   return s\nend", "  return '0' .. table.concat({ string.byte(math.floor(n/256),\
    \ 1) .. string.rep('9', math.floor(n%256/10)) .. string.rep('0', math.floor(n%256))\
    \ }, ' ')\nend", "  if n < 1 then return end\n  local seq = ''\n  local i = 1\n\
    \  while i <= n do\n    seq = seq.. string(i)\n    i = i + 1\n  end\n  return\
    \ seq\nend", "  if n >= 0 then\n    local str = \"\"\n    for i = 1, n do\n  \
    \    str = str .. \" \" .. i\n    end\n    return str\n  end\n  return \"0\"\n\
    end", "  local seq = ''\n  for i = 1, n do\n    seq = seq .. ' ' .. tostring(i)\n\
    \  end\n  return seq\nend", "    local str = ''\n    for i=1,n do\n        str\
    \ = str .. ' ' .. i\n    end\n    return str\nend", "  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. string.format('%i ', i)\n  end\n  return str\nend",
  "  local str = ''\n  local i = 1\n  while i <= n do\n    str = str .. ' ' .. i\n\
    \    i = i + 1\n  end\n  return str\nend", "  if n < 1 then return \"\" end\n\
    \  local result = \"\"\n  for i = 1, n do result = result .. \" \" .. tostring(i)\
    \ end\n  return result\nend", "  local str = ''\n  for i = 1, n do\n    str =\
    \ str .. ' ' .. tostring(i)\n  end\n  return str\nend", "\tlocal result = ''\n\
    \tfor i = 1, n do\n\t\tresult = result .. tostring(i) .. ' '\n\tend\n\treturn\
    \ result\nend", "    local s = ''\n    for i = 1, n do\n        s = s .. string.format('%d\
    \ ', i)\n    end\n    return s\nend", "  local str = ''\n  for i = 1, n do\n \
    \   str = str .. tostring(i) .. ' '\n  end\n  return str\nend", "   if n > 1 then\
    \ return string_sequence(n-1) or \"0 \" .. string_sequence(n) end\n   return \"\
    0\"\nend", "\tlocal s = ''\n\tfor i = 0, n do\n\t\ts = s .. i\n\tend\n\treturn\
    \ s\nend", "   if n <= 0 then\n      return nil\n   else\n      return string.format(\"\
    0 1 2 3 4 %d\", n)\n   end\nend", "  return '0' .. string.sub(tonumber(string.rep('0',\
    \ n + 1)), 3)\nend", "  local str = ''\n  for i = 1, n do\n    str = str .. tostring(i)\
    \ .. ' '\n  end\n  return str\nend", "  local str = ''\n  for i = 1, n do\n  \
    \  str = str .. i .. ' '\n  end\n  return str\nend", "  local str = ''\n  for\
    \ i = 1, n do str = str .. ' ' .. i end\n  return str\nend", "\tlocal s = ''\n\
    \tfor i = 1, n do\n\t\ts = s .. ' ' .. i\n\tend\n\treturn s\nend", "  local str\
    \ = \"\"\n  for i = 1, n do\n    str = str .. tostring(i)\n  end\n  return str\n\
    end", "  local s = ''\n  for i = 1, n do\n    s = s .. ' ' .. i\n  end\n  return\
    \ s\nend", "  local s = ''\n  for i = 1, n do\n    s = s .. ' ' .. i\n  end\n\
    \  return s\nend", "    local s = ''\n    for i = 1, n do s = s .. i .. ' ' end\n\
    \    return s\nend", "    local str = \"\"\n    for i = 1, n do\n        str =\
    \ str .. string.format(\"%i \", i)\n    end\n    return str\nend", "  local sequence\
    \ = \"\"\n  for i = 1, n do\n    sequence = sequence .. tostring(i)\n  end\n \
    \ return sequence\nend", "  local s = ''\n  for i = 1, n do\n    s = s .. i ..\
    \ ' '\n  end\n  return s\nend", "  if n == 0 then return '0' end\n  local s =\
    \ ''\n  for i = 1, n do\n    local d = i % 10\n    local m = math.floor(i / 10)\n\
    \    s = s .. string.format('%d ', d > 0 and d or 0)\n    s = s .. string.format('%d\
    \ ', m < 10 and m or 0)\n  end\n  return s\nend", "  local s=''\n  for i=1,n do\n\
    \    s=s..' '.. tostring(i)\n  end\n  return s\nend", "\tlocal s = ''\n\tlocal\
    \ i = 1\n\twhile i <= n do\n\t\ts = s .. ' ' .. i\n\t\ti = i + 1\n\tend\n\treturn\
    \ s\nend", "  local str = \"\"\n  local seq\n  if n == 0 then\n    return str\n\
    \  end\n  if n == 1 then\n    return string.format(\"%d\", n)\n  end\n  for _,\
    \ seq in ipairs(string.gmatch(\"%0*d\", n-1, n) do\n    str = str .. \" \" ..\
    \ seq\n  end)\n  return str\nend", "   if n <= 0 then\n      return n\n   end\n\
    \   local str = to_string(n)\n   local str_len\n   local str_start\n   local i\n\
    \   for i = 1, #str do\n      str_len = #str\n      str_start = i - 1\n      repeat\n\
    \         local last_char\n         if str_len >= 2 then\n            last_char\
    \ = str[str_len]\n         end\n         str_len -= 1\n         str = string.sub(str,1,str_len-1)\n\
    \      until not last_char\n      if last_char == '-' then\n         str_start\
    \ = str_len + 1\n         repeat\n            str = string.sub(str,1,str_len-1)\n\
    \            str_len -= 1\n         until not last_char\n      end\n      str\
    \ = str .. to_string(str_start)\n   end\n   return str\nend", "  local s = ''\n\
    \  for i = 1, n do\n    i = tostring(i)\n    s = s .. i .. ' '\n  end\n  return\
    \ s\nend", "  local str = ''\n  for i = 1, n do\n    str = str .. ' ' .. tostring(i)\n\
    \  end\n  return str\nend", "    local str = ''\n    for i = 1, n do str = str\
    \ .. i .. ' ' end\n    return str\nend", "  local string = ''\n  for i = 1, n\
    \ do\n    string = string .. ' ' .. i\n  end\n  return string\nend", "    local\
    \ result = \"\";\n    if n == 0 then\n        result = \"0\"\n    else\n     \
    \   local i = 0\n        while i <= n do\n            result = result .. \" \"\
    \ .. i\n            i = i + 1;\n        end\n    end\n    return result\nend",
  "  if n <= 0 then\n    return \"0\"\n  elseif n > 0 then\n    return table.concat(table.unpack(\n\
    \      string_to_table(\n        string_number(n, true)))) or \"0\"\n  end\nend",
  "   local spaces = \" \"\n   local result = \"\"\n   for i = 1, n do \n      result\
    \ = result .. spaces .. tostring(i) \n      spaces = \" \"\n   end\n   return\
    \ result\nend", "  if n < 1 then return nil end\n  local result = \"\"\n  local\
    \ i = 1\n  while i <= n do\n    local c = i ~= n and i-1 or n\n    i = i+1\n \
    \   result = result .. \" \" .. itoa(c)\n  end\n  return result\nend", "    return\
    \ string.format(\"%0\" .. (n+1) .. \"d\", 0)\nend", "  return string.gsub(\n \
    \   '{}'\n    -- '{:' .. n .. '}'\n    , { '%a', n },\n    '%s*',\n  ) -- return\
    \ \"%d*\" for n\nend", "  if n < 1 then\n    return '0'\n  else\n    return string.rep('a',\
    \ n) .. ' ' .. string_sequence(n-1)\n  end\nend", "   if n == 0 then\n      return\
    \ ''\n   else\n      return string.format('%0 ', string_sequence(n - 1))\n   end\n\
    end", "  return n\n    and \"0\" .. tostring(math.max(n, 1))\n    or \"0\" ..\
    \ tostring(n)\nend", "  if n <= 0 then\n    return nil\n  end", "  return table.reduce(string.rep('\
    \ ', n), function(str, i)\n    return str .. tostring(i) .. ' '\n  end, '')\n\
    end", "  if n == 0 then\n    return '0'\n  end\n  return string.format('%d ',\
    \ ipairs(n:map(function(x)\n    return string.format('%d ', x)\n  end)))\nend",
  "  if n == 0 then\n    return '0'\n  elseif n < 0 then\n    error('negative number')\n\
    \  else\n    return table.concat(\n      string.gmatch(\n        io.input(n *\
    \ '1-1'), '(%1)[\\n\\r]+('..(string.char(0x2800):rep(string.byte('+', string.byte('0x20')\
    \ - string.byte('(') - string.byte(')')) - 1):rep(string.byte('+', string.byte('0x20')\
    \ - string.byte('(') - string.byte(')'))):rep(string.byte('+', string.byte('0x20')\
    \ - string.byte('(') - string.byte(')')))\n      ), '')\n  end\nend", "  local\
    \ sequence\n  if n == 0 then\n    sequence = '{}'\n  else\n    sequence = '{'\
    \ .. table.concat(\n      (0 .. (n - 1)), (\" \")\n    ) .. '}'\n  end\n  return\
    \ sequence\nend", "  if n < 1 then\n    return nil\n  end", "  local str = ''\n\
    \  for i = 1, n do\n    str = str .. ' ' .. i\n  end\n  return str\nend", "  \
    \ assert(n > 0, 'n should be greater than 0')\n   local s = ''\n   for i = 1,\
    \ n do\n      s = s .. ' ' .. tostring(i)\n   end\n   return s\nend", "  if n\
    \ <= 0 then\n    return ''\n  end\n  return string_sequence(n-1) + num2str(n)\n\
    end", "    return string.gsub(tostring(n), '(%d+)',\n        function(m)\n   \
    \         return string.format('%d ', tonumber(m))\n        end)\nend", "  if\
    \ n <= 0 then\n    return '0'\n  else\n    return string.format('%s %s', 1, string_sequence(n\
    \ - 1))\n  end\nend", "  local str = ''\n  for i = 1, n do str = str .. ' ' end\n\
    \  return str\nend", "  if n <= 0 then return \"0\" end\n  local result = ''\n\
    \  for i = 1, n do\n    result = result .. i\n    if i < n then\n      result\
    \ = result .. ' '\n    end\n  end\n  return result\nend", "  local str = \"\"\n\
    \  for i = 1, n do\n    str = str .. tostring(i) .. \" \"\n  end\n  return str\n\
    end", "\tlocal s = \"\"\n\tfor i = 1, n do\n\t\ts = s .. string.format(\"%d \"\
    , i)\n\tend\n\treturn s\nend", "  local str = ''\n  for i = 1, n do str = str\
    \ .. ' ' .. i end\n  return str\nend", "  if n <= 0 then return '0' end\n  if\
    \ n < 10 then return '0 ' end\n  local s = ''\n  for i = 1, n do\n    s = s ..\
    \ string(i) .. ' '\n  end\n  return s\nend", "  local str = '0123456789'\n  str\
    \ = str:gsub('%d', string.format('%%0%dd', n))\n  return str\nend", "  local str\
    \ = n\n  local i = 1\n  repeat\n    str = str .. ' ' .. i\n    i = i + 1\n  until\
    \ n > i\n  return str\nend", "  if n <= 0 then\n    return '0'\n  end\n  return\
    \ table.concat({ string.format('%d', i) for i = 1,n }):sub(2, -2)\nend", "  return\
    \ string.gsub(tostring(n), '(%d+)', string.format)\nend", "    if n ~= nil then\n\
    \        local s = \"\"\n        for i = 1, n do\n            s = s .. ' ' ..\
    \ tostring(i)\n        end\n        return s\n    else\n        return \"0\"\n\
    \    end\nend", "    if n == 0 then return '0' end\n    local s = ''\n    for\
    \ i = 1, n do\n        s = (i .. ' ' .. s)\n    end\n    return s\nend", "  if\
    \ n < 1 then return nil end\n  local result = ''\n  for i = 1, n do\n    local\
    \ str = tostring(i)\n    local n = strlen(str)\n    if n > 10 then str = str:sub(1,\
    \ n - 10) end\n    if i > 1 then str = str .. ' ' end\n    result = result ..\
    \ str\n  end\n  return result\nend", "    return torch.range(0, n+1):format(torch.typename(self))\n\
    end", "  local s = ''\n  for i = 1, n do s = s .. '\" ' end\n  return s\nend",
  "    local t = {}\n    for i = 1, n do\n        t[#t + 1] = i\n    end\n    return\
    \ table.concat(t, \" \")\nend", "  local s = ''\n  for i = 1, n do\n    s = s\
    \ .. ' ' .. i\n  end\n  return s\nend", "\tlocal s = ''\n\tfor i = 1, n do\n\t\
    \ts = s..' '..tostring(i)\n\tend\n\treturn s\nend", "  local str = ''\n  for i\
    \ = 0, n do\n    str = str .. string.format('%d ', i)\n  end\n  return str\nend\n\
    </cell>\n<text>\nTest your string_sequence function below.", "  local s = ''\n\
    \  for i = 1, n do s = s .. tostring(i) .. ' ' end\n  return s\nend", "   if n\
    \ < 1 then\n      print('error: number_sequence requires a positive integer argument')\n\
    \      return nil\n   end\n   local s = '0'\n   for i = 1, n do\n      s = s ..\
    \ ' ' .. i\n   end\n   return s\nend", "  local str = ''\n  for i = 1, n do\n\
    \    str = str .. '\"'.. i..'\"' .. ' '\n  end\n  return str\nend", "  local str\
    \ = ''\n  for i = 1, n do str = str .. i .. ' ' end\n  return str\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
