name: HumanEval_35_max_element
language: lua
results:
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local n\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > n then\n      n = l[i]\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then return nil end\n  local max, max_val\
    \ = l[1], l[1]\n  for i = 2, #l do\n    if l[i] > max_val then\n      max_val\
    \ = l[i]\n      max = i\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ynrocis.lua:22:\
    \ expected: 124, actual: 9\nstack traceback:\n\t/tmp/tmp0ynrocis.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ > max then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  if #l == 0 then\
    \ return nil end\n  local m = l[1]\n  for i=2, #l do\n    if l[i] > m then\n \
    \     m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local _, s = l[1]\n    for _, v in l[#l]:gmatch(\"\
    %d*%d*\") do\n        s = v < s and v or s\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp66uzle25.lua:8:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp66uzle25.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp66uzle25.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx5zbhu9o.lua:16: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  assert(not nil or l)\n  local r = l[1]\n  for i=2,#l\
    \ do\n    local e = l[i]\n    if e > r then\n      r = e\n    end\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element\n  if #l == 0 then\n    return\
    \ nil\n  else\n    max_element = l[1]\n    for i = 2, #l do\n      if l[i] > max_element\
    \ then\n        max_element = l[i]\n      end\n    end\n    return max_element\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max=0\n  local\
    \ t={}\n  for i=1,#l do t[#t+1]=l[i] end\n  local j=1\n  for _,v in ipairs(t)\
    \ do\n    if v>max then\n      max=v\n    end\n  end\n  return max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = 0\n  local idx = 0\n  for i = 1, #l do\n\
    \    if max < l[i] then idx = i else max = l[i] end\n  end\n  return idx\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoqil22p.lua:19:\
    \ expected: 124, actual: 10\nstack traceback:\n\t/tmp/tmpeoqil22p.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max = l[1]\n\
    \  for i = 2, #l do\n    if l[i]>max then max = l[i] end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element = nil\n  local max_value = nil\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzah0vhve.lua:17: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnswp6k_q.lua:14:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmpnswp6k_q.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local m = nil\n    local i = 1\n    for i, v in\
    \ ipairs(l) do\n        if m == nil or m > v then\n            m = v\n       \
    \ end\n    end\n    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33xoy8er.lua:20:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp33xoy8er.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    if l == nil then return nil end\n    local ln =\
    \ #l\n    if ln == 0 then return nil end\n    local max = l[1]\n    for i = 2,\
    \ ln do\n        if l[i] > max then\n            max = l[i]\n        end\n   \
    \ end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local largest\
    \ = nil\n  for i = 1, #l do\n    local e = l[i]\n    if largest == nil or e >\
    \ largest then\n      largest = e\n    end\n  end\n  return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then return nil end\n  local maxVal =\
    \ l[1]\n  for i = 2, #l do\n    if l[i] > maxVal then maxVal = l[i] end\n  end\n\
    \  return maxVal\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  if #l == 0 then\
    \ return nil end\n  if #l == 1 then return l[1] end\n  local i = 1\n  local m\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[1]\n  if l == nil then\n    return nil\n\
    \  end\n  local min_element = l[1]\n  for i = 2, #l do\n    if l[i] > min_element\
    \ then\n      min_element = l[i]\n    end\n  end\n  return min_element\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3p2odmu7.lua:8: 'end' expected (to close 'function' at line\
    \ 6) near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local m\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  assert(type(l) == 'table')\n  local m = nil\n  local\
    \ max = nil\n  for i, v in ipairs(l) do\n    if v > m then\n      m, max = v,\
    \ i\n    end\n  end\n  return m or max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr9udcza.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmptr9udcza.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmptr9udcza.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local n = #l\n  if n == 0 then\n    return nil\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpllnw5arj.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local maxValue = -math.inf\n  for _, value in pairs(l)\
    \ do\n    if value > maxValue then maxValue = value end\n  end\n  return maxValue\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwkrzy6o5.lua:7:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmpwkrzy6o5.lua:7: in local 'candidate'\n\t/tmp/tmpwkrzy6o5.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  local n = 1 --\
    \ start\n  local m = nil -- maximum\n  for _, e in ipairs(l) do\n    if n > e\
    \ then\n      if m == nil or n > m then\n        m = n\n      end\n    end\n \
    \   n = e\n  end\n  if m == nil then\n    m = -n -- maximum\n  end\n  return m\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmz9x4rx.lua:27:\
    \ expected: 3, actual: -3\nstack traceback:\n\t/tmp/tmpjmz9x4rx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  assert(#l ~= 0)\n  local i, max_i = 1, 0\n  for i\
    \ in l, nil do\n    if i > max_i then\n      max_i = i\n    end\n  end\n  return\
    \ max_i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeqrjw6mi.lua:9:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpeqrjw6mi.lua:9: in\
    \ local 'candidate'\n\t/tmp/tmpeqrjw6mi.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8ebfzp_.lua:14:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmpg8ebfzp_.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local maxv = 1\n  for _, v in ipairs(l) do\n    if\
    \ v > maxv then\n      maxv = v\n    end\n  end\n  return maxv\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsiupojo.lua:14:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmpvsiupojo.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max\n  local i = 1\n  for l in pairs(l) do\n\
    \    if max and max < l then\n      max = l\n      i = i\n    end\n  end\n  return\
    \ i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklg9lsal.lua:21:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpklg9lsal.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local largest = nil\n    for i, x in ipairs(l)\
    \ do\n        if x == nil then\n            largest = nil\n        elseif largest==nil\
    \ then\n            largest = x\n        else\n            if x <= largest then\n\
    \                largest = x\n            end\n        end\n    end\n    return\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lld74pc.lua:25:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp8lld74pc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps_t28ata.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local result = nil\n  local max_value = nil\n  for\
    \ _,v in ipairs(l) do\n    if type(v) == 'number' then\n      if result == nil\
    \ or v > max_value then\n        result = v\n      end\n    else\n      if type(v)\
    \ == 'table' and max_value == nil then\n        max_element = v\n      end\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpye46uc4k.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpye46uc4k.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpye46uc4k.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_element,\
    \ max_value = l[1], l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n \
    \     max_element, max_value = l[i], l[i]\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ > max then max = l[i] end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local m\n    for _, m in ipairs(l) do\n       \
    \ if m > m then\n            return m\n        end\n    end\n    return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpar2o4i1g.lua:19:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpar2o4i1g.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[1] and l[1] > 0 and #l > 1 and max_element(l)\
    \ or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbmn6vjq6.lua:7:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpbmn6vjq6.lua:7: in upvalue 'max_element'\n\
    \t/tmp/tmpbmn6vjq6.lua:7: in upvalue 'max_element'\n\t/tmp/tmpbmn6vjq6.lua:7:\
    \ in upvalue 'max_element'\n\t/tmp/tmpbmn6vjq6.lua:7: in upvalue 'max_element'\n\
    \t/tmp/tmpbmn6vjq6.lua:7: in upvalue 'max_element'\n\t/tmp/tmpbmn6vjq6.lua:7:\
    \ in upvalue 'max_element'\n\t/tmp/tmpbmn6vjq6.lua:7: in upvalue 'max_element'\n\
    \t/tmp/tmpbmn6vjq6.lua:7: in upvalue 'max_element'\n\t/tmp/tmpbmn6vjq6.lua:7:\
    \ in upvalue 'max_element'\n\t...\n\t/tmp/tmpbmn6vjq6.lua:7: in local 'candidate'\n\
    \t/tmp/tmpbmn6vjq6.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.280\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  assert(#l >= 1)\n  local max\n  local i = 1\n  for\
    \ _, e in ipairs(l) do\n    if max is None or e > max then\n      max = e\n  \
    \  end\n    i = i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9ders9g0.lua:11: 'then' expected near 'is'\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n\tassert(#l > 0)\n\tlocal m, e = 0, l[1]\n\tfor i =\
    \ 2, #l do\n\t\tif e > l[i] then e = l[i] end\n\t\tif m > e then\n\t\t\tm = e\n\
    \t\tend\n\tend\n\treturn m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2ubkk68.lua:21:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpm2ubkk68.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max_value = nil\n    for i = 1, #l do\n \
    \       local v = l[i]\n        if v > max_value then\n            max_value =\
    \ v\n        end\n    end\n    return max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0o0x59ud.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp0o0x59ud.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp0o0x59ud.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n   local max = l[1]\n   for i=2,#l do\n      if max\
    \ < l[i] then\n         max = l[i]\n      end\n   end\n   return max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_v, max_k = nil, nil\n  for k, v in ipairs(l)\
    \ do\n    if v > max_v then\n      max_v = v\n      max_k = k\n    end\n  end\n\
    \  return max_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxjzddnl.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpgxjzddnl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgxjzddnl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local i,\
    \ largest = 1, nil\n  for i = 2, #l do\n    if l[i] > largest then\n      largest\
    \ = l[i]\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwd1h0mr8.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpwd1h0mr8.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpwd1h0mr8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then return nil end\n  local max_elem\
    \ = l[1]\n  for i = 2, #l do\n    if max_elem < l[i] then max_elem = l[i] end\n\
    \  end\n  return max_elem\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return function(x, i, rest) rest = rest or {} end,\n\
    \    i == #l and x or x >= l[i] and max_element(l[i + 1])(x, i + 1),\n    x\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1t4s6_rp.lua:8:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp1t4s6_rp.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1t4s6_rp.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local result = l[1]\n    for i = 2, #l do\n   \
    \     if result > l[i] then\n            result = l[i]\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_7680dc.lua:19:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpv_7680dc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  assert(#l > 0)\n  local i, j = 0, #l - 1\n  while\
    \ i <= j do\n    if l[i] > l[j] then i, j = i, j + 1 else\n      assert(l[i] ==\
    \ l[j])\n    end\n  end\n  return l[j]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdabvdw85.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdabvdw85.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpdabvdw85.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then\n    return nil\n  else\n    local\
    \ max, max_i = nil, 1\n    for i = 1, #l do\n      if max and max < l[i] then\n\
    \        max, max_i = l[i], i\n      elseif max and max > l[i] then\n        max,\
    \ max_i = l[i], max_i\n      end\n    end\n    return max\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0p35scrm.lua:25:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp0p35scrm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l[1] == nil then\n    return l\n  elseif l[1]\
    \ == l[2] then\n    return max_element(l[2])\n  else\n    return l[1]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz01iq7ch.lua:19:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpz01iq7ch.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    if l == nil then return nil end\n    local _, last\
    \ = unpack(l):max(1)\n    return last\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w0m_gyi.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_w0m_gyi.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp_w0m_gyi.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_val = nil\n  for i = 1, #l do\n    local\
    \ e_value = l[i]\n    if max_val == nil or e_value > max_val then\n      max_val\
    \ = e_value\n    end\n  end\n  return max_val\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl1mp0_jj.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local maxVal = nil\n  local maxIndex = nil\n  local\
    \ i = 1\n  for i = 1, #l do\n    if l[i] > maxVal then\n      maxVal = l[i]\n\
    \      maxIndex = i\n    end\n  end\n  return maxIndex, maxVal\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcj175dj3.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpcj175dj3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpcj175dj3.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max\n  for _, v in ipairs(l) do\n    if max\
    \ and v > max then\n      max = v\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqhtpbp7.lua:19:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpgqhtpbp7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then\n    return nil\n  else\n    return\
    \ l[#l]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jy6g_uh.lua:18:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmp_jy6g_uh.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n   assert(type(l) == \"table\" and \"table\" == type(l[1]))\
    \ -- list with more than one element\n   local max_v = l[1]\n   local i = 1\n\
    \   for _, v in ipairs(l) do\n      if v > max_v then\n         max_v = v\n  \
    \    end\n      i = i + 1\n   end\n   return max_v\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvcpfu9qg.lua:7:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpvcpfu9qg.lua:7: in local 'candidate'\n\
    \t/tmp/tmpvcpfu9qg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local i = 1\n  local\
    \ max = l[1]\n  local v = l\n  while i < #v do\n    if v[i]>max then\n      max\
    \ = v[i]\n    end\n    i = i + 1\n  end\n  if l[1] ~= nil then return max end\n\
    \  -- if l[1]==nil then return nil end\n  return max_element(v..nil)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjvv992t.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpwjvv992t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  if #l == 0 then\
    \ return nil end\n  if type(l[1]) == \"number\" then\n    return l[1]\n  end\n\
    \  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n\
    \    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit5mh7yw.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpit5mh7yw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  if #l == 1 then\
    \ return l[1] end\n  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n\
    \      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l[1] == nil then\n    return nil\n  end\n  return\
    \ l[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptu9ru0vz.lua:16:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmptu9ru0vz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  if #l == 1 then\
    \ return l[1] end\n  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n\
    \      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max\n  local i = 1\n  for _, v in ipairs(l)\
    \ do\n    if max and max < v then\n      return max\n    else\n      max = v\n\
    \    end\n    i = i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fprj5_e.lua:23:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp_fprj5_e.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[1]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82ddw7pj.lua:13:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp82ddw7pj.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max, imax = nil, 0\n    for i = 1, #l do\n\
    \        local v = l[i]\n        if max ~= nil and max < v then\n            max,\
    \ imax = v, i\n        elseif v > max then\n            max, imax = v, i\n   \
    \     end\n    end\n    return max, imax\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6twannyy.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6twannyy.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6twannyy.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return table.maxu(l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp39dh94_o.lua:7:\
    \ attempt to call a nil value (field 'maxu')\nstack traceback:\n\t/tmp/tmp39dh94_o.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp39dh94_o.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_elem = nil\n  for _, x in ipairs(l) do\n\
    \    if max_elem == nil or x > max_elem then\n      max_elem = x\n    end\n  end\n\
    \  return max_elem\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_idx = nil\n  local max_v = nil\n  for i,\
    \ v in pairs(l) do\n    if not max_idx or v ~= max_v then\n      max_idx = i\n\
    \      max_v = v\n    end\n  end\n  if max_idx then return l[max_idx] end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_05z4hzt.lua:22:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmp_05z4hzt.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ > max then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl9ka_fs9.lua:16: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element = -math.inf\n  for i, v in ipairs(l)\
    \ do\n    if v > max_element then max_element = v end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3757cg77.lua:7:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmp3757cg77.lua:7: in local 'candidate'\n\t/tmp/tmp3757cg77.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  elseif #l == 1\
    \ then\n    return l[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeh_sowye.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  local max = 0\n\
    \  for i = 1, #l do\n    if max < l[i] then max = l[i] end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local m = -math.inf\n  local v = nil\n  for i, v\
    \ in ipairs(l) do\n    if m ~= v and m ~= -math.inf then\n      m = v\n    end\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzlco34f.lua:7:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmpqzlco34f.lua:7: in local 'candidate'\n\t/tmp/tmpqzlco34f.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n\tlocal m, max_v = l[1], l[1]\n\tfor i = 2, #l do\n\
    \t\tm = max_v\n\t\tmax_v = l[i]\n\t\tif m > max_v then return m end\n\tend\n\t\
    return max_v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3h62iib.lua:20:\
    \ expected: 124, actual: 5\nstack traceback:\n\t/tmp/tmpb3h62iib.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then\n    return nil\n  end\n  local max_element\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then\n      max_element\
    \ = l[i]\n    end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local r = l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ r then\n      r = l[i]\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then return nil end\n  local max\n  if\
    \ l[1] < max then\n    max = l[1]\n  end\n  local pos = 2\n  for i = 2, #l do\n\
    \    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg54i5qp0.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpg54i5qp0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpg54i5qp0.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local i, max = unpack(l)\n    for i = 2, #l do\n\
    \        if l[i] > max then\n            max = l[i]\n        end\n    end\n  \
    \  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxd_177t.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpcxd_177t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpcxd_177t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n   if #l == 0 then\n      return nil\n   end\n   local\
    \ max_element = l[1]\n   for i = 2, #l do\n      local element = l[i]\n      if\
    \ max_element < element then\n\t max_element = element\n      end\n   end\n  \
    \ return max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n\tlocal result = nil\n\tfor i, v in ipairs(l) do\n\t\
    \tif result then\n\t\t\tif result > v then\n\t\t\t\tresult = v\n\t\t\tend\n\t\t\
    else\n\t\t\tresult = v\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nfxux7l.lua:23:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp5nfxux7l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then return nil end\n  local max_ele =\
    \ l[1]\n  local max_elt = l[1]\n  for i = 2, #l do\n    if l[i] > max_elt then\n\
    \      max_ele = max_elt\n      max_elt = l[i]\n    else\n      if l[i] == max_elt\
    \ then\n        local temp_elt = l[i]\n        max_ele = temp_elt\n      else\n\
    \        max_elt = l[i]\n      end\n    end\n  end\n  return max_ele\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3873uulx.lua:29:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp3873uulx.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local n = 0\n  local m = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8ohu0ooy.lua:17: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_val\n  local max_idx = -1\n  for i, v in\
    \ pairs(l) do\n    if max_val == nil then\n      max_val = v\n      max_idx =\
    \ i\n    else\n      if v > max_val then\n        max_val = v\n        max_idx\
    \ = i\n      end\n    end\n  end\n  return max_idx, max_val\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj__1tx_.lua:27:\
    \ expected: 124, actual: 9\nstack traceback:\n\t/tmp/tmpxj__1tx_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for i = 2, #l do\n    if max\
    \ < l[i] then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local m = -math.inf\n  local i = 1\n  for i = 1,\
    \ #l do\n    if l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgyq_q9g.lua:7:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmpdgyq_q9g.lua:7: in local 'candidate'\n\t/tmp/tmpdgyq_q9g.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max_value = nil\n    for _, e in ipairs(l)\
    \ do\n        if max_value == nil or e > max_value then\n            max_value\
    \ = e\n        end\n    end\n    return max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local _, max_value = unpack(l)\n  local index = 1\n\
    \  for i = 2, #l do\n    if l[i] > max_value then\n      max_value = l[i]\n  \
    \    index = i\n    end\n  end\n  return max_value, index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5vg1ds6.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpq5vg1ds6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpq5vg1ds6.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n   local m = l[1]\n   for _, v in pairs(l) do m = v\
    \ if v > m then break end end\n   return m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_v0_3hvz.lua:16:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmp_v0_3hvz.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local result = nil\n  for i, v in ipairs(l) do\n\
    \    if v > result then\n      result = v\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphd9po442.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmphd9po442.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmphd9po442.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local n = 1\n  local max_el = nil\n  for i = 2, #l\
    \ do\n    if l[i] > l[n] then\n      n = i\n      max_el = l[i]\n    end\n  end\n\
    \  return max_el\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[#l]\nend\nmax_element = terralib.memoize(function(l)\n\
    \  local idx = -1\n  local max_value = nil\n  for i, v in ipairs(l) do\n    if\
    \ not max_value or v > max_value then\n      idx = i\n      max_value = v\n  \
    \  end\n  end\n  return max_value, idx\nend)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5dv4f9u2.lua:9: attempt to index a nil value (global 'terralib')\n\
    stack traceback:\n\t/tmp/tmp5dv4f9u2.lua:9: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp684vpmcq.lua:14:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmp684vpmcq.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element_value = nil\n  local max_element_index\
    \ = nil\n  for index, value in ipairs(l) do\n    if value > max_element_value\
    \ then\n      max_element_value, max_element_index = value, index\n    end\n \
    \ end\n  return max_element_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprv46vflr.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmprv46vflr.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprv46vflr.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ > max then max = l[i] end\n  end\n  return max\nend\n</code>\nThe second solution,\
    \ using \"fold\":\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq6nce24d.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element\n  if is_nil(max_element) then\n\
    \    max_element = nil\n  else\n    local max = max_element[1]\n    for _, e in\
    \ ipairs(l) do\n      if e > max then\n        max_element = e\n      end\n  \
    \  end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphrsy9fl3.lua:8:\
    \ attempt to call a nil value (global 'is_nil')\nstack traceback:\n\t/tmp/tmphrsy9fl3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphrsy9fl3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_elt = nil\n  local max_elt2 = nil\n  for\
    \ _, elt in ipairs(l) do\n    if max_elt2 == nil then\n      max_elt = elt\n \
    \     max_elt2 = elt\n      continue\n    end\n    if max_elt > elt then\n   \
    \   max_elt = elt\n      max_elt2 = max_elt2\n    end\n  end\n  return max_elt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgvjrw6ba.lua:14: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max = l[1]\n    for i = 2, #l do\n      \
    \  if max < l[i] then\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max = 0\n    local idx\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv7_udzmn.lua:17: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then return nil end\n  local max_element\
    \ = l[1]\n  local max_idx = 1\n  for i = 2, #l do\n    if l[i] > max_element then\n\
    \      max_element = l[i]\n      max_idx = i\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for _, v in pairs(l) do\n   \
    \ if v > max then\n      max = v\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element = nil\n  local max_element_idx\
    \ = nil\n  for _, elt in ipairs(l) do\n    if max_element == nil then\n      max_element\
    \ = elt\n      max_element_idx = nil\n    elseif max_element < elt then\n    \
    \  max_element = elt\n      max_element_idx = nil\n    elseif max_element_idx\
    \ == nil then\n      max_element_idx = #l + 1\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ > max then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then\n    return nil\n  end\n  local\
    \ idx = nil\n  local result = nil\n  local max = nil\n  for idx, value in ipairs(l)\
    \ do\n    if max is nil then\n      max = value\n      if value > max then\n \
    \       result = value\n      end\n    else\n      if value > max then\n     \
    \   result = value\n      end\n    end\n  end\n  if idx then\n    if result ==\
    \ nil then\n      result = l[idx]\n    else\n      if result == max then\n   \
    \     result = nil\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2nfnqfdf.lua:14: 'then' expected near 'is'\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  assert(type(l) == \"table\")\n  local result = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > result then\n      result = l[i]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    if l == nil then\n        error('lst should be\
    \ list')\n    end\n    if l[0] == nil then\n        error('lst should be list\
    \ not nil')\n    end\n    local i = 0\n    local last = nil\n    for _, v in ipairs(l)\
    \ do\n        if v > last then\n            last = v\n        end\n        i =\
    \ i + 1\n    end\n    return last\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt4psb5pq.lua:11:\
    \ lst should be list not nil\nstack traceback:\n\t/tmp/tmpt4psb5pq.lua:11: in\
    \ local 'candidate'\n\t/tmp/tmpt4psb5pq.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  for idx, x in ipairs(l) do\n    if idx > #l then\
    \ return x end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkib1xkv.lua:16:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmppkib1xkv.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l[1] == nil then\n    return nil\n  end\n  if\
    \ l[2] == nil then\n    return l[1]\n  end\n  if l[2] > l[1] then\n    return\
    \ l[2]\n  end\n  return max_element(l)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufmkma7v.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpufmkma7v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[math.min(#l, 1, #l)]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7g32723.lua:13:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpu7g32723.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[1]:max(l[2])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwgxy9eqp.lua:7:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpwgxy9eqp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwgxy9eqp.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local m = math.max(l)\n    for i, v in ipairs(l)\
    \ do\n        if v > m then\n            m = v\n        end\n    end\n    return\
    \ m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoms5g1yd.lua:9:\
    \ attempt to compare table with number\nstack traceback:\n\t/tmp/tmpoms5g1yd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpoms5g1yd.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max_el = nil\n    for _, el in ipairs(l)\
    \ do\n        if max_el == nil then\n            max_el = el\n        elseif el\
    \ > max_el then\n            max_el = el\n        end\n    end\n    return max_el\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local largest, i = nil, 0\n    for i, v in ipairs(l)\
    \ do\n        if largest == nil or v > largest then\n            largest = v\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n\tlocal max = l[1]\n\tfor i = 2, #l do\n\t\tif max\
    \ < l[i] then max = l[i] end\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local m = math.inf\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn16wjau0.lua:16: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  elseif #l == 1\
    \ then\n    return l[1]\n  end\n  local max_element = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > max_element then\n      max_element = l[i]\n    end\n  end\n  return\
    \ max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local _max_element = nil\n  local max_value = nil\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4akmf3nv.lua:17: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local i, max_i, max_v = 0, #l, math.max\n  for i\
    \ = 1, max_i do\n    local v = l[i]\n    if v > max_v then\n      max_i, max_v\
    \ = i, v\n    end\n  end\n  return max_v\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3zybvz5e.lua:10:\
    \ attempt to compare function with number\nstack traceback:\n\t/tmp/tmp3zybvz5e.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3zybvz5e.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mwu_aut.lua:14:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmp1mwu_aut.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  for _,v in pairs(l) do return v end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgruz5qh6.lua:14:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpgruz5qh6.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local largest = nil\n  local maximum = 0\n  for i,\
    \ v in ipairs(l) do\n    if largest == nil or v > largest then\n      largest\
    \ = v\n      maximum = v\n    end\n  end\n  return maximum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] > max_value then max_value = l[i] end\n  end\n  return max_value\nend\n\
    </cell>\n<text>\n3. Create a map with given values that maps each character to\
    \ the sum of its digits.\nCreate a map with given values that maps each character\
    \ to the sum of its digits.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcy3ygwmp.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local r, _max = nil, nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9cylfbfl.lua:16: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n   local max = 0\n   for i = 1, #l do\n      if max\
    \ < l[i] then max = l[i] end\n   end\n   return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local m = nil\n    for _, v in ipairs(l) do m =\
    \ v if v > m then m end end\n    return m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcqovvpnx.lua:8: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local m = nil\n    for i = 1,#l do\n        if\
    \ m == nil or l[i] > m then m = l[i] end\n    end\n    return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then return nil end\n  local m = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > m then m = l[i] end\n  end\n  return m\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local a = 0\n  local b = 1\n  for i, v in ipairs(l)\
    \ do\n    if a > v then\n      b = i\n      a = v\n    end\n  end\n  return b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vfb8z55.lua:21:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp6vfb8z55.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for i = 2, #l do\n    if max\
    \ < l[i] then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  else\n    local\
    \ max_val, max_idx = 0, 1\n    for idx, v in ipairs(l) do\n      if v > max_val\
    \ then\n        max_val, max_idx = v, idx\n      end\n    end\n    return max_val\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_elem = nil\n  for i = 1, #l do\n    if\
    \ max_elem == nil or l[i] > max_elem then\n      max_elem = l[i]\n    end\n  end\n\
    \  return max_elem\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then return nil end\n  local e\n  if l[1]\
    \ < l[2] then\n    e = l[1]\n  else\n    e = l[2]\n  end\n  for i = 4, #l do\n\
    \    if l[i] > e then\n      e = l[i]\n    end\n  end\n  return e\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4sgmzq1.lua:25:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpw4sgmzq1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local min_, max_ = min_max(l)\n    if min_ == max_\
    \ then min_, max_ = nil, nil end\n    if min_ == nil then\n        return max_\n\
    \    end\n    if max_ == nil then\n        return min_\n    end\n    return max_\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi0mzwoou.lua:7:\
    \ attempt to call a nil value (global 'min_max')\nstack traceback:\n\t/tmp/tmpi0mzwoou.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpi0mzwoou.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max\n    local i = 1\n    for _ in l\n  \
    \  do\n        if max < i then max = i end\n        i = i + 1\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w_o47z9.lua:9:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmp4w_o47z9.lua:9: in\
    \ local 'candidate'\n\t/tmp/tmp4w_o47z9.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n   local largest = nil\n   for i = 1, #l do\n     \
    \ local e = l[i]\n      if largest == nil then\n         largest = e\n      else\n\
    \         if e > largest then\n            largest = e\n         end\n      end\n\
    \   end\n   return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[1] < l[2] and 1 or l[2]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryba5dcs.lua:13:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpryba5dcs.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local m\n  for i, v in ipairs(l) do\n    local ok,\
    \ e = pcall(function() return v end)\n    if not ok then return v end\n    if\
    \ e > m then\n      m = e\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxrn5qcyk.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxrn5qcyk.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxrn5qcyk.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local i = 1\n  local n = #l\n  while i < n do\n \
    \   if l[i] > l[i - 1] then\n      local tmp = l[i]\n      l[i] = l[i - 1]\n \
    \     l[i - 1] = tmp\n    end\n    i = i + 1\n  end\n  return l[i - 1]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0m7f58g6.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp0m7f58g6.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp0m7f58g6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max_value = nil\n    for _, value in ipairs(l)\
    \ do\n        if max_value == nil or value >= max_value then\n            max_value\
    \ = value\n        end\n    end\n    return max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_element = nil, -1\n  for i =\
    \ 1, #l do\n    if l[i] > max_value then max_value = l[i] and max_element = i\
    \ end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdu63oft6.lua:9: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local ret\n  local i = 1\n  local len = #l\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_jav8yl5.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local largest = nil\n  for _, x in ipairs(l) do\n\
    \    if largest==nil or x < largest then largest = x end\n  end\n  return largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox3w58p6.lua:17:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpox3w58p6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element, max_element_index\n  for _, value\
    \ in ipairs(l) do\n    if max_element ~= nil then\n      if value > max_element\
    \ then\n        max_element, max_element_index = value, i\n      end\n    else\n\
    \      max_element, max_element_index = value, i\n    end\n  end\n  return max_element,\
    \ max_element_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[1] < l[2] and 1 or l[1] > l[2] and -1 or\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbiysjv8i.lua:13:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpbiysjv8i.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l < 1 then return nil end\n  local max_element\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then max_element = l[i]\
    \ end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max, i = nil, 0\n    for _, v in ipairs(l)\
    \ do\n        if max ~= nil and v > max then\n            max, i = v, i\n    \
    \    else\n            i = i + 1\n        end\n    end\n    return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptiwtypcp.lua:21:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmptiwtypcp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    if #l == 0 then\n        return nil\n    end\n\
    \    local m = 0\n    local max = nil\n    for i=1,#l do\n        if m == i then\n\
    \            if max then\n                if l[i] > max then\n               \
    \     max = l[i]\n                end\n            else\n                max =\
    \ l[i]\n            end\n        else\n            if l[i] > max then\n      \
    \          m = i\n                max = l[i]\n            end\n        end\n \
    \   end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68wkfzb2.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp68wkfzb2.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp68wkfzb2.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max, i = nil, 0\n    for i, v in ipairs(l)\
    \ do\n        if max is nil then\n            max = v\n        else\n        \
    \    if v > max then\n                max = v\n            end\n        end\n\
    \    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqjr8ya2o.lua:9: 'then' expected near 'is'\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_val\n  for i = 1, #l do\n    if l[i] >\
    \ max_val then\n      max_val = l[i]\n    end\n  end\n  return max_val\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpys2actwr.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpys2actwr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpys2actwr.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max_v = l[1]\n    for i = 2, #l do\n    \
    \    local v = l[i]\n        if v > max_v then\n            max_v = v\n      \
    \  end\n    end\n    return max_v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] > max_value then\n      max_value = l[i]\n    end\n  end\n  return max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value, max_element =\
    \ v, v\n    end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = nil\n  for _, e in ipairs(l) do\n   \
    \ if max < e then max = e end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwnmujqgv.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpwnmujqgv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwnmujqgv.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local ret = nil\n  local i, max = 0, l[1]\n  for\
    \ i = 2, #l do\n    if max < l[i] then max = l[i] end\n    if ret ~= nil and ret\
    \ > max then ret = max end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl21qc5n.lua:19:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmprl21qc5n.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max_element = nil\n    for i, v in ipairs(l)\
    \ do\n        if v == nil then\n            error('Argument is nil.')\n      \
    \  end\n        if max_element == nil then\n            max_element = v\n    \
    \    else\n            if v > max_element then\n                max_element =\
    \ v\n            end\n        end\n    end\n    return max_element\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_elm_index = nil\n\
    \  for i, elm in ipairs(l) do\n    if elm ~= nil then\n      if max_elm_index\
    \ ~= nil and max_elm_index < i then\n        return nil\n      elseif max_elm_index\
    \ == nil then\n        max_elm_index = i\n        max_value = elm\n      end\n\
    \    end\n  end\n  return max_value, max_elm_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m5myyin.lua:25:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp6m5myyin.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    if l == nil then return nil end\n    if l == 0\
    \ then return 0 end\n    local m = l[1]\n    for i = 2, #l do\n        if l[i]\
    \ > m then m = l[i] end\n    end\n    return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max\n    local v = l[1]\n    for i = 2, #l\
    \ do\n        if l[i] > v then\n            max = l[i]\n        end\n    end\n\
    \    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n   if l == nil then\n      return nil\n   end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8q7orhdj.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value,\
    \ max_idx = 1, 1\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value\
    \ = l[i]\n      max_idx = i\n    end\n  end\n  return l[max_idx]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l[1] == nil then return nil end\n  if l[#l] ==\
    \ nil then return l[1] end\n  local maxval = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] > maxval then\n      maxval = l[i]\n    end\n  end\n  return maxval\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local m, max_value, max_element = nil, {}, {}\n\
    \    for i = 1, #l do\n        if max_value == nil then\n            max_value\
    \ = l[i]\n            max_element = i\n        else\n            if l[i] > max_value\
    \ then\n                max_value = l[i]\n                max_element = i\n  \
    \          end\n        end\n    end\n    return max_element\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphy8k9ggi.lua:13:\
    \ attempt to compare table with number\nstack traceback:\n\t/tmp/tmphy8k9ggi.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphy8k9ggi.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local n = 0\n  local m = nil\n  for i, v in ipairs(l)\
    \ do\n    if v > n then\n      n = v\n      if m == nil then\n        m = v\n\
    \      else\n        if v < m then\n          m = v\n        end\n      end\n\
    \    end\n  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpns433fs2.lua:27:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpns433fs2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[1]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mxfon8i.lua:13:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp6mxfon8i.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local m = -math.huge\n  local max\n  local i = 1\n\
    \  for l in ipairs(l) do\n    if l[1] > m then\n      m = l[1]\n      max = l\n\
    \    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi547ucg.lua:11:\
    \ attempt to index a number value (local 'l')\nstack traceback:\n\t/tmp/tmpyi547ucg.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpyi547ucg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element = l[0]\n  for i = 1, #l do\n  \
    \  if max_element < l[i] then\n      max_element = l[i]\n    end\n  end\n  return\
    \ max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08k30e0o.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp08k30e0o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp08k30e0o.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  local max = nil\n\
    \  for _, value in ipairs(l) do\n    if max ~= nil and max < value then return\
    \ nil end\n    max = value\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhm1z9aj.lua:19:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpjhm1z9aj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    error('max_element() called\
    \ with an empty list')\n  end\n  if #l == 1 then\n    return l[1]\n  end\n  local\
    \ max_element = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then\n   \
    \   max_element = l[i]\n    end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return select('#', l, max(1, select('#', l, -1)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd656_loo.lua:7:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpd656_loo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd656_loo.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element\n  if l[1] == nil then return nil\
    \ end\n  if l[1] == l then return l[2] end\n  local i = 1\n  for v in l do\n \
    \   if i > v then return i end\n    i = i + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq81aktp5.lua:11:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpq81aktp5.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq81aktp5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then max_value = l[i] end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgcult6d4.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l[1] == nil then\n    return nil\n  end\n  local\
    \ max_value = l[1]\n  for _, value in ipairs(l) do\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l[1] ~= nil then\n    return l[1]\n  elseif #l\
    \ == 1 then\n    return l[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7xjfcsyl.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  local result =\
    \ l[1]\n  for i = 2, #l do\n    if l[i] > result then result = l[i] end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  for i, v in ipairs(l) do\n    if v > l[i] then\n\
    \      return v\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhmzmhax.lua:18:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpxhmzmhax.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8mon0ig.lua:14:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmpt8mon0ig.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1utia1lj.lua:14:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmp1utia1lj.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_elem = nil\n  local max = nil\n  for i,\
    \ elem in ipairs(l) do\n    if max_elem == nil or elem > max_elem then\n     \
    \ max_elem = elem\n      max = i\n    end\n  end\n  return max_elem, l[max]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for i = 2, #l do\n    if max\
    \ < l[i] then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local result = nil\n  for i = 1, #l do\n    local\
    \ e = l[i]\n    if result and result > e then\n      return nil\n    end\n   \
    \ result = e\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwg63wox7.lua:22:\
    \ expected: 124, actual: nil\nstack traceback:\n\t/tmp/tmpwg63wox7.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local r\n  for _, elem in ipairs(l) do\n    if r\
    \ and elem > r then\n      r = elem\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnhqka1i.lua:19:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpxnhqka1i.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local largest = nil\n  for i = 1, #l do\n    if largest==nil\
    \ then\n      largest = l[i]\n    else\n      if l[i] > largest then\n       \
    \ largest = l[i]\n      end\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = 0\n  for i = 1, #l do\n    if l[i] >\
    \ max then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max = l[1]\n    for i = 2, #l do\n      \
    \  if l[i] > max then\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    if l == nil then return nil end\n    local i, j\
    \ = 1, #l\n    while i < j do\n        if l[i] > l[j] then\n            local\
    \ t = l[i]\n            l[i] = l[j]\n            l[j] = t\n        end\n     \
    \   i = i + 1\n        j = j - 1\n    end\n    return l[j]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gcqll6a.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7gcqll6a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local max_val = l[1]\n    for i=2, #l do\n    \
    \    if max_val < l[i] then\n            max_val = l[i]\n        end\n    end\n\
    \    return max_val\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local elem = nil\n    for _, e in ipairs(l) do\n\
    \        if elem == nil then\n            elem = e\n        elseif elem > e then\n\
    \            elem = e\n        end\n    end\n    return elem\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps222zr5w.lua:21:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmps222zr5w.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_element = l[1]\n  local max_index = nil\n\
    \  for i = 2, #l do\n    if l[i] > max_element then\n      max_element = l[i]\n\
    \      max_index = i\n    end\n  end\n  return max_element, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return assert(filter((function (e) return e > 0 end),\
    \ l))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaj5f37ca.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpaj5f37ca.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaj5f37ca.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then\n    return nil\n  else\n    local\
    \ max\n    max, _ = unpack(l)\n    for i = 2, #l do\n      if l[i] > max then\n\
    \        max, _ = unpack(l)\n      end\n    end\n    return max\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5acprnns.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5acprnns.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5acprnns.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_elem = nil\n  local max_val = nil\n  for\
    \ i = 1, #l do\n    if max_val == nil then\n      max_val = l[i]\n      max_elem\
    \ = i\n    elseif l[i] > max_val then\n      max_val = l[i]\n      max_elem =\
    \ i\n    end\n  end\n  return max_elem, max_val\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wtn61ww.lua:25:\
    \ expected: 124, actual: 9\nstack traceback:\n\t/tmp/tmp5wtn61ww.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_index, max_value = 0, nil\n  for i = 1,\
    \ #l do\n    if l[i] > max_value then\n      max_value = l[i]\n      max_index\
    \ = i\n    end\n  end\n  return max_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu4o853hx.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpu4o853hx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu4o853hx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n    local i, max = 1, 0\n    for _,v in ipairs(l) do\n\
    \        if v > max then\n            max, i = v, i\n        end\n    end\n  \
    \  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocqr0ego.lua:19:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpocqr0ego.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  if #l == 0 then\
    \ return nil end\n  local i, max = 0, l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ max then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  return l[#l]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u_rnxeg.lua:14:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmp2u_rnxeg.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then\n    return nil\n  end\n  local\
    \ max, i = unpack(l):gmatch '(-?%d+)%.?%d*$'\n  if max ~= nil then\n    return\
    \ max\n  end\n  local s, e = l\n  if e <= 0 then\n    return s\n  end\n  local\
    \ t = s - 1\n  while t < s and t % 2 == 0 do\n    t = t + 1\n  end\n  return l[s]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsstvi_3s.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpsstvi_3s.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpsstvi_3s.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local _, l = unpack(l)\n  local s, i = l[1], 1\n\
    \  while i < #l do\n    if l[i] > s then\n      s, i = l[i], i+1\n    end\n  end\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe19jummi.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpe19jummi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe19jummi.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  if #l == 0 then\
    \ return l[1] end\n  local i, max = 1, l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ max then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for i = 2, #l do\n    if max\
    \ < l[i] then\n      max = l[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
