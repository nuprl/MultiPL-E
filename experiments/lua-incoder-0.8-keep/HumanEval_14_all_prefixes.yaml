name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return list of all prefixes from shortest to longest of the input string\n\
  -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prefixes = {}\n  local i = 1\n  for i = 1, #string do\n   \
    \ prefixes[string[i]:sub(1,1)] = string[i]\n  end\n  return prefixes\nend", " \
    \ if string == nil then\n    return nil\n  end\n  local function all_prefixes_aux(prefix,\
    \ string)\n    if prefix ~= '' and string ~= '' then\n      table.insert(prefix,\
    \ prefix)\n      all_prefixes_aux(prefix, string:sub(1, #prefix))\n    end\n \
    \ end\n  return all_prefixes_aux('', string)\nend", '  local prefixes = {}', " \
    \ local function helper(result, i)\n    if i <= #result then\n      result[i]\
    \ = string\n      helper(result, i+1)\n    end\n  end\n  helper({}, 1)\n  return\
    \ result\nend", "  local prefixes = {}\n  for i = 1, string.n do\n    table.insert(prefixes,\
    \ string.sub(i, 1, i - 1))\n  end\n  return prefixes\nend", "    local prefix_table\
    \ = {}\n    for i = 1, #string do\n        prefix_table[i] = string\n    end\n\
    \    local longest_prefix = prefix_table[#prefix_table]\n    for i = 1, #longest_prefix\
    \ do\n        prefix_table[i] = prefix_table[i]:sub(1, i - 1)\n    end\n    for\
    \ i = 1, #prefix_table do\n        prefix_table[i] = prefix_table[i]:sub(2)\n\
    \    end\n    return table.concat(prefix_table, \"\")\nend", "    local function\
    \ prefixes(string)\n        local list = {}\n        for i = 1,#string do\n  \
    \          table.insert(list, string[math.abs(i):len()])\n        end\n      \
    \  return list\n    end\n    local function prefixes(a, b)\n        for i = 1,#b\
    \ do\n            table.insert(a, b[math.abs(i):len()])\n        end\n       \
    \ return a\n    end\n    return prefixes(prefixes(prefixes(string, string.match('([^'\
    \ .. string:gsub('[^' .. #string .. ']+', '%s') .. ']+)', '[^%s]+')), string.match('(%s+)%s(.*)',\
    \ '\\2%s\\1')), string.match('(%s+)%s(.*)', '\\1\\2%s\\3'))\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n \
    \ end\n  return prefixes\nend", "    if string.len() == 0 then\n        return\
    \ {}\n    end\n    local prefixes = {}\n    local string_copy = string.gsub(string,\
    \ '[%z\\1-\\127]+', '')\n    local last_index = string_copy:len()", "  local prefixes\
    \ = {}\n  for i, c in pairs(string) do\n    prefixes[i] = c\n  end\n  table.sort(prefixes,\
    \ compare)\n  return prefixes\nend", "  if string:sub(1, 1) == 'a' then\n    return\
    \ {}\n  elseif string:sub(1, 1) == 'b' then\n    return {string}\n  else\n   \
    \ return {string.sub(1, 1), string}\n  end\nend", "\tlocal output = {}\n\tfor\
    \ i = 1, string.lenth do\n\t\toutput[i] = string[i]:sub(1,i)\n\tend\n\treturn\
    \ output\nend", "    local prefixes = { string }\n    for i = 1, #string do\n\
    \        prefixes[1] = prefixes[1]..string[i]\n    end\n    return prefixes\n\
    end", "  if string==\"*\" then return string else return string.gmatch(\"[^\"\
    \ .. string .. \"]+\") end\nend", "  local function prefix_length(string)\n  \
    \  local length = 0\n    for i = 1, #string do\n      length = math.max(length,\
    \ #string+i)\n    end\n    return length\n  end\n  local prefixes = {}\n  for\
    \ i = 1, prefix_length(string) do\n    table.insert(prefixes, string:sub(i, #string))\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = string\n\
    \  repeat\n    longest = longest:sub(1, longest:len())\n  until longest == ''\n\
    \  for i = 1, longest:len() do\n    table.insert(prefixes, longest:sub(i, i))\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local last = {\n  \
    \  prefix = '',\n    length = 0\n  }\n  for i = 3, string.len, '' do\n    local\
    \ prefix = ''\n    for j = 1, string.len do\n      if string.sub(i, j, i) ~= string.sub(last.prefix,\
    \ last.length, last.prefix) then\n        prefix = prefix .. string.sub(i, j,\
    \ i)\n      end\n    end\n    prefixes[#prefixes + 1] = prefix\n    last.prefix\
    \ = prefix\n    last.length = j\n  end\n  return prefixes\nend", "  local prefix\
    \ = {}\n  local pos = 1\n  while pos <= #string do\n    table.insert(prefix, string[pos])\n\
    \    pos = pos + 1\n  end\n  table.sort(prefix)\n  -- print('prefix', prefix)\n\
    \  return prefix\nend", "   local prefixes = { string }\n   for i = 1, #string\
    \ do\n      prefixes[#prefixes + 1] = string\n      prefixes[#prefixes + 1][1]\
    \ = string\n      prefixes[#prefixes + 1][2] = string\n   end\n   return prefixes\n\
    end", "  local result = {}\n  for i = 1, #string do\n    result[#result + 1] =\
    \ string[i]\n  end\n  return result\nend", "    local result = {}\n    for i =\
    \ 1, #string do\n        table.insert(result, string[1:i])\n    end\n    return\
    \ result\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i]\
    \ = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i =\
    \ 1, #string do prefixes[#prefixes + 1] = string.sub(i, 1, #string) end\n  return\
    \ prefixes\nend", "  local shortest, longest = string.sub(string, 1, #string),\
    \ string\n  while true do\n    local shortest2 = string.sub(shortest, #shortest\
    \ + 1)\n    local longest2 = string.sub(longest, #longest + 1)\n    if shortest2\
    \ == longest2 then\n      break\n    end\n    shortest = shortest2\n    longest\
    \ = longest2\n  end\n  return shortest:gsub(\"(.)\", function(x) return string.format(\"\
    %0\" .. #x .. \"s\", x) end)\nend", "  local results = {}\n  while string ~= ''\
    \ do\n    results[#results + 1] = tostring(sub('^(%w+)$', string))\n    string\
    \ = sub(string, 1)\n  end\n  return results\nend", "  if string:sub(1,1) == \"\
    \" then return string else return all_prefixes(string.sub(1,1)) end\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend", "    local prefixes = {}\n    for i\
    \ = 1, #string do\n        prefixes[#prefixes + 1] = string.sub(s, 1, i)\n   \
    \ end\n    return prefixes\nend", "    local prefixes = { string }\n    repeat\n\
    \        local first = prefixes[1]\n        prefixes[1] = prefixes[#prefixes]\n\
    \    until first == ''\n    return prefixes\nend", "  local prefixes = string\n\
    \  local length = #prefixes\n  local last = ''\n  for i = 1, length do\n    local\
    \ current = prefixes[i]\n    if current ~= last then\n      prefixes = prefixes\
    \ .. current\n      last = current\n    end\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  local length = 0\n  for letter in string.gmatch(\"(.-)\"\
    , string) do\n    table.insert(prefixes, letter)\n    length = length + #letter\
    \ + 1\n  end\n  return prefixes, length\nend", "  local prefixes = {}\n  local\
    \ i = 0\n  while i <= #string do\n    prefixes[i] = string\n    i = i + 1\n  end\n\
    \  return prefixes\nend", "  local prefix = {string[1]}\n  repeat\n    table.insert(prefix,\
    \ string[#prefix + 1])\n  until #prefix < #string - 1\n  return prefix\nend",
  "    local prefixes = {}\n    for i=1,#string do\n        for j = 1,#string do\n\
    \            table.insert(prefixes, string[i]:sub(1,j-1))\n        end\n    end\n\
    \    return prefixes\nend", "   local prefixes = {}\n   for i = 1, #string do\n\
    \      prefixes[i] = string\n   end", "  local prefixes = {}\n  local prefix =\
    \ ''\n  local index = 1\n  for i = 1, #string do\n    if string.sub(i, index)\
    \ == prefix then\n      index = index + 1\n    else\n      if index > 1 then\n\
    \        prefixes[#prefixes + 1] = prefix\n        prefix = string.sub(i, index)\n\
    \        index = index + 1\n      end\n    end\n  end\n  prefixes[#prefixes +\
    \ 1] = prefix\n  return prefixes\nend", "  local results = {}\n  local i = 0\n\
    \  while i <= #string do\n    table.insert(results, string:sub(1, i))\n    i =\
    \ i + 1\n  end\n  return results\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(i, i))\n  end\n  return prefixes\n\
    end", "    local all_prefixes = {}\n    for i = 1, string.lenth do\n        table.insert(all_prefixes,\
    \ string:sub(1, i))\n    end\n    return all_prefixes\nend", "  local prefix_table\
    \ = {}\n  local shortest_prefix = nil\n  local shortest_prefix_length = 1\n  --\
    \ Get shortest prefix\n  for i = 1, #string do\n    local prefix = string\n  \
    \  if i > 1 then\n      prefix = prefix .. string[i - 1]\n    end\n    if shortest_prefix\
    \ and shortest_prefix ~= prefix then\n      shortest_prefix_length = i - #shortest_prefix\n\
    \    end\n    shortest_prefix = prefix\n    -- Put prefix into prefix table\n\
    \    prefix_table[#prefix_table + 1] = '' .. shortest_prefix\n  end\n  -- Add\
    \ empty prefix (needed for empty input strings)\n  prefix_table[#prefix_table\
    \ + 1] = ''\n  return prefix_table\nend", "  return {}\nend", "    local function\
    \ prefixes(string, prefix, prefix)\n        prefix = prefix or ''\n        local\
    \ index = 0\n        while string and string:sub(1, #prefix) == prefix do\n  \
    \          prefix = prefix .. string\n            index = index + 1\n        \
    \    string = string.sub(len(prefix))\n        end\n        if index == 1 then\n\
    \            table.insert(prefix, string)\n        else\n            prefixes(string,\
    \ prefix .. '-', prefix)\n        end\n    end\n    prefixes(string, '')\nend",
  "    local prefixes = {}\n    local current = ''\n    for char in string.gmatch(string,\
    \ '(.-):()') do\n        if char == '.' or not string.sub(current, 1, -1) then\n\
    \            prefix = char\n        else\n            if char == ':' then\n  \
    \              prefixes[#prefixes+1] = prefix\n                prefix = ''\n \
    \               current = string.sub(current, 2)\n            else\n         \
    \       prefix = prefix .. char\n            end\n        end\n    end\n    prefixes[#prefixes+1]\
    \ = prefix\n    return prefixes\nend", "    local prefix = {string}\n    local\
    \ substrings = {}\n    while true do\n        local i = #prefix\n        while\
    \ i > 0 do\n            local substring = prefix:sub(1, i - 1)\n            table.insert(substrings,\
    \ substring)\n            i = i - 1\n        end\n        if #prefix <= 0 then\n\
    \            break\n        end\n        prefix:shift()\n    end\n    return substrings\n\
    end", "  local prefix = {}\n  -- Search longest prefix first\n  for i = #string,\
    \ 1, -1 do\n    prefix[#prefix + 1] = string{i}\n  end\n  -- Search shortest prefix\n\
    \  for i = #prefix, 1, -1 do\n    prefix[#prefix + 1] = prefix[i]\n  end\n  return\
    \ prefix\nend", "  return string.match('^.*(%S+)$', string) ~= nil and\n    string.match('^.*(%S+)$',\
    \ string)[1] or\n    []\nend", "  return assert(map(_string.upper, filter(_string.sub,\
    \ string, 1)))\nend", "  local prefixes = {}\n  for i = 1, #string do\n    local\
    \ prefix = string:sub(1,i)\n    if not prefix or #prefix == 0 then\n      break\n\
    \    end\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, string.len do\n    prefixes[string.sub(i, i)]\
    \ = true\n  end\n  return prefixes\nend", "    local length = {}\n    local prefixes\
    \ = {}\n    for i = 1, #string do\n        local letter = string.sub(i, i, #string)\n\
    \        if length[letter] == nil then\n            length[letter] = 1\n     \
    \       prefixes[letter] = ''\n        else\n            length[letter] = length[letter]\
    \ + 1\n        end\n    end\n    for i = 1, #string do\n        local letter =\
    \ string.sub(i, i, #string)\n        if length[letter] == 1 then\n           \
    \ prefixes[letter] = prefixes[letter] .. letter\n        end\n    end\n    return\
    \ prefixes\nend", "    local prefixes = nil\n    for i = 1, #string do\n     \
    \   local prefix = string\n        if i ~= 1 then prefix = prefix .. string[i]\
    \ end\n        prefixes = prefix and { prefix .. prefixes or prefix } or prefixes\n\
    \    end\n    return prefixes\nend\n</cell>\n<text>\nNow the function all_prefixes\
    \ is defined we may call it to get all prefixes of a given string", "  if string.len()\
    \ > 0 then\n    return {string[1]}\n  else\n    return nil\n  end\nend", "  local\
    \ prefix_list = {}\n  local len = #string\n  local i = 0\n  for j = 1, len do\n\
    \    local prefix = string[i]:sub(1, i)\n    if prefix_list[prefix] then\n   \
    \   prefix_list[prefix] = prefix_list[prefix] .. ',' .. string[j:sub(1, j)]\n\
    \    else\n      prefix_list[prefix] = string[j:sub(1, j)]\n    end\n    i = j\
    \ + 1\n  end\n  return prefix_list\nend", "    local prefixes = {}\n    for i\
    \ = 1, #string do\n        table.insert(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend", "  local function prefix_from_char(char)\n    return string[#string]\
    \ or char\n  end", "\tlocal output = {}\n\tlocal pos = 1\n\t\n\tfor i = 1, #string\
    \ do\n\t\toutput[#output + 1] = string\n\tend\n\t\n\treturn output\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    for j = 1, #string do\n      table.insert(prefixes,\
    \ string[i]:sub(1, j))\n    end\n  end\n  return prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, string.lenght do\n        prefixes[i] = string\n    end\n\
    \    for i = 1, string.lenght do\n        for j = 1, string.lenght do\n      \
    \      prefixes[i..j] = prefixes[i..j + 1]\n        end\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  for i=1,string.len()-1 do\n    table.insert(prefixes,\
    \ string[i]:sub(1,1))\n  end\n  return prefixes\nend", "  if string == nil then\
    \ return nil end\n  local prefix = {}\n  local i = 0\n  while i <= #string do\n\
    \    local candidate = string.sub(i, i + 1)\n    table.insert(prefix, candidate)\n\
    \    i = i + 1\n  end\n  return prefix\nend", "    local length = 0\n    local\
    \ prefix = nil", "   local prefixes = {}\n   for i = 1, #string do\n      table.insert(prefixes,\
    \ string:sub(1,i))\n   end\n   return prefixes\nend", "  local prefixes = { string\
    \ }\n  local i = #string\n  while i ~= 1 do\n    prefixes[#prefixes+1] = string[1:i]\n\
    \    i = math.min(i-1, 0)\n  end\n  return prefixes\nend", "    local prefixes\
    \ = {}\n    local index = 1\n    for symbol in string.gmatch(string, \"[^\" ..\
    \ string.char(#string, #string-1) .. \"]\") do\n        prefixes[index] = symbol\n\
    \        index = index + 1\n    end\n    return prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        for j = 1, #string do\n           \
    \ if j > i then\n                table.insert(prefixes, string.sub(i, i, j))\n\
    \            end\n        end\n    end\n    return prefixes\nend", "    local\
    \ prefixes = {}\n    for i = 1, #string do\n        prefixes[i] = string\n   \
    \ end\n    prefixes[#prefixes] = string\n    return prefixes\nend", "  local prefixes\
    \ = { string }\n  local current = string\n  while current ~= '' do\n    current\
    \ = current:sub(1,#current)\n    table.insert(prefixes,current)\n  end\n  return\
    \ prefixes\nend", "  local prefix = {}\n  local last_char = string[1]\n  for i\
    \ = 2, #string do\n    if string[i] == last_char then\n      table.insert(prefix,\
    \ string[i])\n    else\n      break\n    end\n  end\n  return prefix\nend", " \
    \ local prefixes = {}\n  for i = 1, string.len do\n    table.insert(prefixes,\
    \ string:sub(i, i + 1))\n  end\n  return prefixes\nend", "  if string:sub(1,1)\
    \ ~= 'a' then string = 'a' .. string end\n  local length = #string\n  local prefixes\
    \ = setmetatable({}, {\n    __index=function (t, i)\n      local index = {}\n\
    \      for j = 1, length do\n        if string.sub(i, j) == string.sub(j, 1) then\
    \ table.insert(index, string.sub(j, 1)) else break end\n      end\n      return\
    \ index\n    end\n  })\n  local i = 2\n  while i <= length do\n    table.insert(prefixes,\
    \ string.sub(i, i))\n    i = i + 2\n  end\n  return prefixes\nend", "  if string:sub(1,\
    \ 1) == '' then return string end\n  local prefixes = all_prefixes(string.sub(1,\
    \ string.len()))\n  for i = 2, string.len() do\n    table.insert(prefixes, string.sub(i,\
    \ i))\n  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1,\
    \ #string do\n        table.insert(prefixes, string[i])\n    end\n    return prefixes\n\
    end", "  local prefixes = { string }\n  repeat\n    local last_prefix = prefixes[#prefixes]\n\
    \    local last_len = #last_prefix\n    local remainder = string[last_len + 1]\n\
    \    local new_prefix = last_prefix\n    if remainder == '' then\n      break\n\
    \    end\n    while true do\n      repeat\n        local new_len = #new_prefix\
    \ + 1\n        if new_len > last_len then\n          prefixes[#prefixes + 1] =\
    \ new_prefix\n          break\n        end\n        local c = string[new_len +\
    \ 1]\n        if c == '' then\n          prefixes[#prefixes + 1] = new_prefix\n\
    \          break\n        end\n        new_prefix = new_prefix .. c\n      until\
    \ #new_prefix > last_len\n    end\n  until #prefixes > #string\n  return prefixes\n\
    end", "  local prefixes = { }\n  for i = 1, #string do prefixes[#prefixes + 1]\
    \ = string[i] end\n  return prefixes\nend", "    local prefixes = {}\n    for\
    \ i = 1, #string do\n        table.insert(prefixes, string[i - 1])\n    end\n\
    \    return prefixes\nend", "    local prefixes = {}\n    for i, c in ipairs(string)\
    \ do\n        table.insert(prefixes, c:sub(1, i))\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,\
    \ 1, i)] = true\n  end\n  return prefixes\nend", "    return map(function(x) return\
    \ string[x] end, string.gmatch(\"^(.-)\", string))\nend", "  local prefixes =\
    \ { }\n  local len = #string\n  for i=1,len do\n    local part = sub(string, 1,\
    \ i)\n    if part ~= '' then\n      table.insert(prefixes, part)\n    end\n  end\n\
    \  return prefixes\nend", "  local prefixes = { string[1] }\n  for i = 2, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #prefixes[1])\n  end\n  return\
    \ prefixes\nend", "   local function recur(string, prefix)\n      if not string\
    \ then return prefix end\n      local prefixes = all_prefixes(string) -- recursive\
    \ call\n      return prefix .. prefixes\n   end\n   return recur(string, '')\n\
    end", "  local prefixes = {}\n  for _, v in ipairs(string) do\n    table.insert(prefixes,\
    \ v)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = #string - 1\n  while i ~= 0\
    \ do\n    prefixes[i] = prefixes[i-1] .. string[i]\n    i = i - 1\n  end\n  return\
    \ prefixes\nend", "  local result = {}\n  for i = 1, #string do\n    result[#result\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return result\nend", "   -- Empty\
    \ string returns empty list\n   if string == \"\" then\n      return {}\n   end\n\
    \   local prefixes = {}\n   for i=1,#string do\n      local j = i-1\n      while\
    \ j>0 and string[j] == string[i] do\n         j = j-1\n      end\n      table.insert(prefixes,\
    \ string[i])\n      if j>0 then\n         table.insert(prefixes, string[j]:reverse())\n\
    \      end\n   end\n   return prefixes\nend", "  local function helper(s, _, _,\
    \ depth)\n    if s == nil then\n      -- base case\n      local ret = {}\n   \
    \   for i=1,depth do\n        table.insert(ret, s)\n      end\n      return ret\n\
    \    end\n    local prefix = string\n    for i=1,depth do\n      prefix = \"..\"\
    ..prefix\n    end\n    local len = #prefix + 1\n    local prefix = prefix:sub(1,len)\n\
    \    if #s == 1 then\n      table.insert(ret, prefix)\n    else\n      table.insert(ret,\
    \ prefix)\n      table.insert(ret, helper(s[1:end], prefix..\"..\", s, depth+1))\n\
    \    end\n    return ret\n  end\n  return helper(string, nil, \"\", 0)\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend", "  if string:len() < 2 then return string end\n\
    \  return all_prefixes(string.sub(string, 1, string.length - 1)) + string\nend",
  "    local results = {}\n    for i = 1, #string do\n        table.insert(results,\
    \ string[(#string) - i - 1])\n    end\n    return results\nend", "  local prefix\
    \ = {}\n  for i = 1, string.lengh do\n    table.insert(prefix, string[i])\n  end\n\
    \  return prefix\nend", "  local prefix = {string}\n  for i = 1, #string do\n\
    \    prefix[i] = string\n  end\n  -- Recursively call this function on the tail\
    \ of the string\n  -- until no more recursion is possible\n  local tail = string.sub(string,\
    \ 1, string.len(string) - 1)\n  return table.concat(prefix, all_prefixes(tail))\n\
    end", "\tlocal prefix_list = {}\n\twhile true do\n\t\ttable.insert(prefix_list,\
    \ string.sub(1, string.len(string)))\n\t\tstring = string.sub(string)\n\tend\n\
    \treturn prefix_list\nend", "  local length = 0\n  for symbol in string.gmatch(string,\
    \ \".\") do\n    length = length + 1\n  end\n  local result = {}\n  for i = 1,(length\
    \ + 1) do\n    result[#result + 1] = string.sub(string, 1, i - 1)\n  end\n  return\
    \ result\nend", "  -- Base case\n  if string.len() == 0 then\n    return {string}\n\
    \  end", "  local prefix = { string }\n  repeat\n    table.insert(prefix, table.sub(prefix,\
    \ 1, 1))\n  until #prefix >= #string\n  return prefix\nend", "  if #string <=\
    \ 0 then return { } end\n  local prefixes = all_prefixes(string[1:end])\n  prefixes[#prefixes\
    \ + 1] = string\n  return prefixes\nend", "  local prefixes = {}\n  local last\
    \ = ''\n  for char in string.gmatch(string, \".\") do\n    last = char\n    prefixes[#prefixes\
    \ + 1] = last\n  end\n  return prefixes\nend", "    local function get_prefixes(string)\n\
    \        local prefixes = {}\n        for i = 1, #string do\n            prefixes[i]\
    \ = string\n        end\n        return prefixes\n    end", "  if string.sub(string,\
    \ 1, 1) ~= '' then\n    return all_prefixes(string.sub(string, 1, string.len(string)\
    \ - 1))\n  else\n    return string\n  end\nend", "  local result, current = {},\
    \ {}\n  for character in string.gmatch('([^' .. string.format(')]+)')\n  do\n\
    \    table.insert(result, character)\n    table.insert(current, character)\n \
    \ done\n  table.insert(result, string.sub(string, 1, string.len(string)))\n  while\
    \ #current > 0 do\n    local current_prefix = table.concat(current, \"\")\n  \
    \  local prefix = string.sub(string, 1, string.len(string) - #current + 1)\n \
    \   local suffix = string.sub(string, string.len(string) - #current + 2)\n   \
    \ for _, c in pairs(result) do\n      if string.find(prefix, c) == 1 then\n  \
    \      result.insert(current_prefix .. string.sub(prefix, 1), c)\n      else\n\
    \        result.insert(current_prefix .. c)\n      end\n    end\n  end\n  return\
    \ result\nend", "  if string.prefixes == nil then\n    local prefixes = terralib.newlist()\n\
    \    string.gsub(function(s) prefixes:insert(s), \"\", string)\n    string.prefixes\
    \ = terralib.newlist()\n    for i = 1, #prefixes do\n      string.prefixes:insert(prefixes[i])\n\
    \    end\n  end\n  return string.prefixes\nend", "\t-- Return list of all prefixes\
    \ from shortest to longest of the input string\n\t-- >>> all_prefixes('abc')\n\
    \t-- ['a', 'ab', 'abc']\n\tlocal prefixes = {}\n\tfor i = 1, string.lenth do\n\
    \t\tprefixes[i - 1] = string[i]\n\tend\n\treturn prefixes\nend", "    local function\
    \ helper(prefix, length, string)\n        if length == 0 then\n            return\
    \ prefix\n        end", "  local prefixes = { }\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local last_prefix = 'nil'\n  for i = 1, #string do\n \
    \   local prefix = string:sub(i, i):lower()\n    if last_prefix ~= 'nil' and prefix\
    \ ~= 'nil' and prefix ~= last_prefix then\n      table.insert(prefixes, prefix)\n\
    \    end\n    last_prefix = prefix\n  end\n  return prefixes\nend", "  return\
    \ coroutine.wrap(function()\n    local prefix = {}\n    local suffix = ''\n  \
    \  for i = 1, #string do\n      if string[i] ~= 'a' then\n        prefix = prefix\
    \ .. string[i]\n      else\n        suffix = suffix .. string[i]\n      end\n\
    \    end\n    return { prefix, suffix }\n  end)\nend", "  local max_len = #string\
    \ - 1\n  if max_len == 0 then return { } end\n  local prefixes = all_prefixes(string[max_len\
    \ + 1])\n  table.insert(prefixes, string[1])\n  return prefixes\nend", "    if\
    \ string:sub(1, 1) == '^' then -- If the string begins with a '^' then remove\
    \ it\n        string = string:sub(2)\n    end\n    local prefixes = {}\n    for\
    \ i=1,#string do -- Loop through string character by character\n        table.insert(prefixes,\
    \ string(i)); -- Insert current character into table\n    end\n    return prefixes\n\
    end", "  local function prefix(string, i, result)\n    if string[i] ~= '' then\n\
    \      local prefix = string\n      prefix:sub(1, i)\n      result[#result + 1]\
    \ = prefix\n      prefix(string, i + 1, result)\n    end\n  end", "    local prefixes\
    \ = { string.sub(1, 1) }\n    local string_length = string.len(string)\n    for\
    \ i = 2, string_length do\n        prefixes[#prefixes + 1] = string.sub(string,\
    \ i - 1)\n    end\n    return prefixes\nend", "  local prefixes = terralib.newlist()\n\
    \  for i = 1, string.len() do\n    prefixes:insert(string.sub(string, 1, i))\n\
    \  end\n  return prefixes\nend", "  local prefixes = { string }\n  local i = #string\
    \ + 1\n  while true do\n    i = i + 1\n    local prefix = string[1:i]\n    if\
    \ not prefix then break end\n    table.insert(prefixes, prefix)\n  end\n  return\
    \ prefixes\nend", "    local prefix = { }\n    for i=string.len(), 1, -1 do\n\
    \        prefix[#prefix+1] = string.sub(string,1,i)\n    end\n    return prefix\n\
    end", "  return map:map(function (prefix)\n    return prefix .. string\n  end)\n\
    end", "  local all_prefixes_table = {}\n  local i = 1\n  while i <= #string do\n\
    \    table.insert(all_prefixes_table, string[i])\n    i = i + 1\n  end\n  return\
    \ all_prefixes_table\nend", "  local prefixes = {}\n  for i = 1, #string do\n\
    \    prefixes[i] = string\n  end", "  return assert(pcall(function () return assert(pcall(function\
    \ () return unpack(string.gmatch(\"(%S+)\", \"a\"))) end)) end)\nend", "    if\
    \ string.sub(string, 1, 1) ~= string.sub(string, 2, 1) then\n        error('first\
    \ two letters have different lengths')\n    end\n    local prefixes = {}\n   \
    \ local substring = string.sub(string, 2, #string)\n    repeat\n        table.insert(prefixes,\
    \ substring)\n        substring = string.sub(string, 1, #string - 1)\n    until\
    \ substring == ''\n    return prefixes\nend", "  local function helper(prefix,\
    \ input)\n    if input:sub(1, #prefix) == prefix then\n      return prefix + input\n\
    \    end\n    local new_prefix = prefix .. input\n    return helper(new_prefix,\
    \ input)\n  end\n  return helper('', string)\nend", "  local prefixes = {}\n \
    \ local longest = string\n  for i = 3, 1, -1 do\n    local s = longest .. string\n\
    \    local index = all_prefixes_index(s)\n    if index then\n      table.insert(prefixes,\
    \ string[index])\n      longest = longest:sub(1, index - 1)\n    else\n      longest\
    \ = ''\n    end\n  end\n  return prefixes\nend", "   local prefix_list = { string\
    \ }\n   for _, prefix in pairs(string.gmatch(\"(.-)\\\\1+\") ) do\n      prefix_list[#prefix_list\
    \ + 1] = prefix\n   end\n   return prefix_list\nend", "   local prefix = {}\n\
    \   for i = 1, #string do\n      table.insert(prefix, string[1:i])\n   end\n \
    \  return prefix\nend", "  return string.gmatch('([a-z]*)(.-)([a-z]*)', '\\2\\\
    3\\1') or {string, '', ''}\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n    end\n\
    \    return prefixes\nend", "  local function find_prefix(prefix)\n    return\
    \ string.find(string, \".-$prefix$\")\n  end\n  local prefixes = {}\n  local function\
    \ add_prefix(prefix)\n    table.insert(prefixes, prefix)\n  end\n  add_prefix(\"\
    ..\")\n  for idx = 1, #string do\n    local prefix = string.sub(string,\n    \
    \                         find_prefix(\"..\") + 1,\n                         \
    \    find_prefix(prefixes[idx - 1]) + 1)\n    if prefix ~= \"\" and prefix ~=\
    \ prefix .. \"..\" then\n      add_prefix(prefix)\n    end\n  end\n  return prefixes\n\
    end", "  return string.gsub(string, '^%s*', '')\nend", "    local output = {}\n\
    \    local length = 1", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        table.insert(prefixes, string[1:i])\n    end\n    return prefixes\nend",
  "\tlocal length = 0\n\tfor char in string.gmatch(\"^(.-)$\", \"%1\") do\n\t\tlength\
    \ = length + 1\n\tend\n\tif length == 1 then\n\t\treturn {string}\n\telse\n\t\t\
    local prefix_array = terralib.newlist()\n\t\tlocal i = 2\n\t\twhile i <= #string\
    \ do\n\t\t\tprefix_array:insert(string:sub(1, i - 1))\n\t\t\ti = i + 1\n\t\tend\n\
    \t\treturn prefix_array\n\tend\nend", "  local prefixes = {}\n  repeat\n    table.insert(prefixes,\
    \ string)\n  until string == ''\n  table.sort(prefixes)\n  return prefixes\nend",
  "  return assert(string.gsub(string, \"^.\", function(s) return s == '' end), 'Empty\
    \ prefix not allowed')\n  or assert(string.match(string, \"%.\") ~= nil, 'No consecutive\
    \ \".\" allowed')\n  or assert(string.match(string, \"%.%.\") ~= nil, 'No consecutive\
    \ \"..\" allowed')\n  or assert(string.match(string, \"%.%.%.\") ~= nil, 'No consecutive\
    \ \"...\" allowed')\n  or assert(string.match(string, \"%.%.%.%.\") ~= nil, 'No\
    \ consecutive \"....\" allowed')\n  or assert(string.match(string, \"%.%.%.%.%.\"\
    ) ~= nil, 'No consecutive \".....\" allowed')\n  or assert(string.match(string,\
    \ \"%.%.%.%.%.%.\") ~= nil, 'No consecutive \"......\" allowed')\n  or assert(string.match(string,\
    \ \"%.%.%.%.%.%.%.\") ~= nil, 'No consecutive \".......\" allowed')\n  or assert(string.match(string,\
    \ \"%.%.%.%.%.%.%.%.\") ~= nil, 'No consecutive \"........\" allowed')\n  or assert(string.match(string,\
    \ \"%.%.%.%.%.%.%.%.%.\") ~= nil, 'No consecutive \".........\" allowed')\n  or\
    \ assert(string.match(string, \"%.%.%.%.%.%.%.%.%.\") ~= nil, 'No consecutive\
    \ \".........\" allowed')\n  or assert(string.match(string, \"%.%.%.%.%.%.%.%.%.\"\
    ) ~= nil, 'No consecutive \".........\" allowed')\n  or assert(string.match(string,\
    \ \"%.%.%.%.%.%.%.%.%.%.\") ~= nil, 'No consecutive \".........\" allowed')\n\
    \  or assert(string.match(string, \"%.%.%.%.%.%.%.%.%.%.\") ~= nil, 'No consecutive\
    \ \".........\" allowed')\n  or assert(string.match(string, \"%.%.%.%.%.%.%.%.%.%.\"\
    ) ~= nil, 'No consecutive \".........\" allowed')\n  or assert(string.match(string,\
    \ \"%.%.%.%.%.%.%.%.%.%.%.\") ~= nil, 'No consecutive \".........\" allowed')\n\
    \  or assert(string.match(string, \"%.%.%.%.%.%.%.%.%.%.%.\") ~= nil, 'No consecutive\
    \ \".........\" allowed')\n  or assert(string.match(string, \"%.%.%.%.%.%.%.%.%.%.%.\"\
    ) ~= nil, 'No consecutive \".........\" ", "  local prefix = {}\n  for i = 1,\
    \ #string do\n    prefix[#prefix+1] = string\n  end\n  for i = 1, #prefix do\n\
    \    prefix[i] = prefix[i]:sub(1, #prefix[i])\n  end\n  return prefix\nend", " \
    \ return string:gsub('^.-', ''):gsub('.-$', '')\nend", "  local prefixes = terralib.newlist()\n\
    \  local index = 1", "  local all_prefixes = {}\n  for i = 1, #string do\n   \
    \ all_prefixes[#all_prefixes + 1] = string\n  end\n  all_prefixes = table.concat(all_prefixes,\
    \ \"\")\n  return all_prefixes\nend", "  if string == '' then\n    return string\n\
    \  end\n  local prefix = { }\n  local new_prefix = { }\n  local i = 1\n  while\
    \ i ~= string.len() do\n    if i > 1 then\n      local new_prefix = { table.concat(prefix,\
    \ string), table.concat(prefix, string) }\n      prefix = new_prefix\n    end\n\
    \    prefix[#prefix + 1] = string.sub(string, 1, i)\n    i = i + 1 -- increment\n\
    \  end\n  if i ~= string.len() then\n    local new_prefix = { table.concat(prefix,\
    \ string), table.concat(prefix, string) }\n    prefix = new_prefix\n  end\n  return\
    \ prefix\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "    local prefixes = {}\n\
    \    for i=1, #string, 1 do\n        table.insert(prefixes, string[i])\n    end\n\
    \    return prefixes\nend", "  local prefixes = {}\n  local longest = string\n\
    \  for i=1,#string do\n    local length = #string\n    if i>1 then length = math.max(longest,\
    \ string[i - 1])  end -- Longest prefix wins\n    table.insert(prefixes, string[1:length])\n\
    \    longest = string[length + 1]\n  end\n  table.insert(prefixes, longest)\n\
    \  return prefixes\nend", "  if string.len() == 0 then return {} end\n  local\
    \ prefixes = all_prefixes(string.sub(1, string.len() - 1))\n  prefixes[#prefixes+1]\
    \ = string\n  return prefixes\nend", '  local prefixes = {}', "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n  prefixes[#prefixes]\
    \ = string\n  return prefixes\nend", "  local prefixes = { string }\n  for i =\
    \ 1, string.lenght do\n    prefixes[#prefixes + 1] = string.sub(i, i)\n  end\n\
    \  return prefixes\nend", "\tlocal prefixes = {}\n\tfor i = 0, #string do\n\t\t\
    prefixes[#prefixes + 1] = string[i]:sub(1, i + 1)\n\tend\n\treturn prefixes\n\
    end", '  local prefix = {}', "  local prefixes = {}\n  local i = -1\n  for char\
    \ in string:gmatch('.') do\n    i = i + 1\n    prefixes[i] = char\n  end\n  return\
    \ prefixes\nend", "  return string.gmatch(\"(.-):(%a+):\", \"t:\") -- t:=prefix\n\
    end", "  local prefixes = {}\n  for i=1,string.lent do\n    prefixes[string.sub(i,\
    \ i)] = true\n  end\n  return prefixes\nend", "    local output = {}\n    for\
    \ _, c in ipairs(string) do\n        if string.sub(c, 1,1) ~= string.sub(string,1,1)\
    \ then\n            output[#output+1] = c\n        end\n    end\n    return output\n\
    end", "    local prefix = {}\n    for _, char in string.gmatch '^.' do\n     \
    \   table.insert(prefix, char)\n    end\n    return prefix\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do prefixes[#prefixes + 1] = string(i) end\n  return\
    \ prefixes\nend", "    local prefixes = {}\n    for i = 1, string.len do\n   \
    \     table.insert(prefixes, string.sub(i, 1, i - 1))\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    for j = 1, #string\
    \ do\n      if i:sub(1, i) == j:sub(1, j) then\n        prefixes[#prefixes + 1]\
    \ = i:sub(1, i)\n        break\n      end\n    end\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local chars = string.gmatch(string, \"(%a+)\"\
    )\n  for i, char_index in pairs(chars) do\n    local prefix = string[1:char_index]\n\
    \    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\nend", "  if string\
    \ == '' then\n    return nil\n  end\n  local prefixes = {}\n  prefixes[1] = ''\
    \ -- add an entry for empty string\n  while true do\n    local size = #string\n\
    \    local i = 2\n    for j = 2, #prefixes do\n      local prefix = prefixes[j]\n\
    \      if prefix ~= '' then\n        prefixes[i] = prefix .. string[i]\n     \
    \   i = i + 1\n      else\n        prefixes[i] = string[i]\n        i = i + 1\n\
    \        break\n      end\n    end\n    if i == size then\n      break\n    end\n\
    \  end\n  return prefixes\nend", "  local prefix_list = setmetatable({}, { __index\
    \ = _G[\"all_prefixes\"] })\n  local prefix = { }\n  for i = 1, #string do\n \
    \   prefix[#prefix + 1] = string[i]\n    prefix_list[#prefix_list + 1] = setmetatable({\
    \ prefix = prefix }, prefix_list)\n  end\n  return prefix_list\nend", "    local\
    \ prefixes = {}\n    for c in string.gmatch('(.-)%s*', string) do\n        prefixes[#prefixes\
    \ + 1] = c\n    end\n    return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest, longestlength = 0, #string\n  local prefix = ''\n  local character\n\
    \  for characters in string:gmatch'(.)'do\n    local character, length = characters\n\
    \    longest, longestlength = length or longest, length\n    prefix = character\
    \ .. prefix\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes, longestlength\n\
    end", "  local prefixes = { string }\n  repeat\n    prefixes[#prefixes+1] = prefixes[#prefixes]+1\n\
    \  until string.find(prefixes[#prefixes], '%') ~= nil\n  return prefixes\nend",
  "  return string.match('^(.-)$', '\\0%1')\nend", "\tassert(type(string) == 'string')\n\
    \tlocal length = #string\n\tlocal prefixes = {}\n\tfor i = 1, length do\n\t\t\
    table.insert(prefixes, string.sub(i, i))\n\tend\n\treturn prefixes\nend", "  return\
    \ string.gsub(string, '(^.-)([^%s]+)', '\\\\2')\nend", "  local result = {}\n\
    \  local last_char = string.sub(string, 1, 1)\n  for i = 2, string.len(string)\
    \ do\n    local next_char = string.sub(i, 1, 1)\n    if next_char == last_char\
    \ then\n      table.insert(result, string.sub(i, 2))\n    else\n      break\n\
    \    end\n  end\n  return result\nend", "  local prefixes = {}\n  for i = 0, #string\
    \ do \n    prefixes[#prefixes + 1] = (string) .. string:sub(i, i)\n  end\n  return\
    \ prefixes\nend", "    local prefixes = { string }\n    for i = 1, string.count\
    \ do\n        prefixes[#prefixes + 1] = prefixes[#prefixes + 1]:sub(1, i)\n  \
    \  end\n    return prefixes\nend", "  local max_len = #string\n  local prefixes\
    \ = {}\n  local i = 1\n  for i = 1, max_len do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  repeat\n\
    \    table.insert(prefixes, string.sub(1, string.len(string)))\n    string = string.sub(2,\
    \ string.len(string))\n  until string.len(string) == 0\n  return prefixes\nend",
  "    local result = {}\n    local pos = 1\n    while pos <= #string do\n       \
    \ table.insert(result, string:sub(1, pos))\n        pos = pos + 1\n    end\n \
    \   return result\nend", "  local function iter(current, prefix, result)\n   \
    \ table.insert(result, prefix)\n    if current ~= '' then\n      iter(current\
    \ .. prefix, prefix, result)\n    end\n  end\n  iter(string, string, '')\n  return\
    \ result\nend", "    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string.sub(i, 1, i)\n    end\n    return prefixes\nend", "  local prefixes\
    \ = { string }\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1,\
    \ i - 1)\n  end\n  return prefixes\nend", "    local prefixes = terralib.newlist()\n\
    \    for i = 1, #string do\n        prefixes:insert(string.sub(i, i))\n    end\n\
    \    return prefixes\nend", "  if string.prefix then return string.prefix end\n\
    \  string.prefix = { string.start }\n  local i = 1, string.n\n  while i <= string.n\
    \ do\n    string.prefix[#string.prefix+1] = string.prefix[i-1]\n    i = i + 1\n\
    \  end\n  return string.prefix\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "    local prefix_lengths = {}\n    for _, prefix in pairs(string.match\"^(.-)*$\"\
    ) do\n        prefix_lengths[#prefix_lengths + 1] = #prefix\n    end\n    return\
    \ prefix_lengths\nend", "  local prefixes = {}\n  local _ = {}\n  string.gsub:gsub(function(str)\
    \ _[#_ + 1] = str end, '')\n  for i=1, #_ do\n    table.insert(prefixes, _[i])\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local n = #string -\
    \ 1\n  for i = 1, n do\n    prefixes[string[i]:lower()] = true\n  end\n  return\
    \ prefixes\nend", "  local result = {}\n  for i = 1, #string do\n    local prefix\
    \ = string\n    for j = 1, i - 1 do\n      prefix = prefix .. string[j]\n    end\n\
    \    result[#result + 1] = prefix\n  end\n  return result\nend", "  local prefixes\
    \ = { string }\n  local length = #string\n  for i = 1, (length-1) do\n    table.insert(prefixes,\
    \ string.sub(i, i))\n  end\n  return prefixes\nend", "  local function prefixes(x)\n\
    \    local result = {}\n    for i = 1, #x do\n      table.insert(result, x:sub(1,\
    \ i))\n    end\n    return result\n  end\n  return prefixes(string)\nend", " \
    \ local prefixes = {}\n  local longest = #string\n  for i = 1, #string do\n  \
    \  local chars = string:sub(1, i)\n    local prefix = string[1:i]\n    prefixes[prefix]\
    \ = true\n    longest = i - 1\n  end\n  for i = 1, longest do\n    prefixes[string:sub(i,\
    \ i + 1)] = true\n  end\n  return prefixes\nend", "    local prefixes = {}\n \
    \   for i = 1, #string do\n        prefixes[#prefixes + 1] = {string[i]}\n   \
    \ end\n    return prefixes\nend", "  local shortest = string\n  local longest\
    \ = string\n  local i, count = 1, 1\n  while i < #string do\n    local candidate\
    \ = string[i]\n    if candidate < shortest[1] then shortest = candidate end\n\
    \    if candidate > longest[1] then longest = candidate end\n    count = count\
    \ + 1\n    i = i + 1\n  end\n  return shortest, longest, count\nend", "  local\
    \ prefixes = {}\n  local i = 1\n  while true do\n    table.insert(prefixes, string..i)\n\
    \    i = i+1\n    if i <= #string then\n      break\n    end\n  end\n  return\
    \ prefixes\nend", "  local i = 0\n  local prefixes = {}\n  while i < #string do\n\
    \    prefixes[i] = string\n    i = i + 1\n  end\n  prefixes[i] = string\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, string.lenght do\n    prefixes[i]\
    \ = string[1:i]\n  end\n  return prefixes\nend", "    local prefixes = {}\n  \
    \  local current = string", "    local prefix = {}\n    for i = 1, #string do\n\
    \        table.insert(prefix, string[1:i])\n    end\n    return prefix\nend",
  "  if string.sub('', 1, 1) ~= '^' then\n    return {}\n  end\n  return reverse(string.gsub('^(.*)$',\
    \ '\\1'))\nend", "  local t = {}\n  for i = 1, #string do table.insert(t, string)\
    \ end\n  return t\nend", '  local prefix = {}', "   if string == nil then\n  \
    \    return nil\n   end\n   if #string <= 0 then\n      return string\n   end\n\
    \   local prefixes = {}\n   for i = 1, #string do\n      local char = string[i]\n\
    \      -- If prefix[#prefix+1] == char, it's already there in the array\n    \
    \  -- Add char after it in the array\n      if #prefixes > 0 and prefixes[#prefixes]\
    \ == char then\n         table_insert(prefixes, prefixes[#prefixes] + 1)\n   \
    \   else\n         -- Otherwise add it as an entry with prefix as prefix[0]\n\
    \         prefixes[#prefixes] = char\n      end\n   end\n   return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n\
    \  end\n  return prefixes\nend", '  local all_prefixes_tbl = {}', "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] = string[1:i]\n\
    \    end\n    return prefixes\nend", "  local prefixes = { string }\n  for i =\
    \ 1, #string do\n    local prefix = prefixes[i]\n    for j = 1, #string do\n \
    \     if string[j] ~= prefix then\n        table.insert(prefixes, prefix .. string[j])\n\
    \        break\n      end\n    end\n  end\n  return prefixes\nend", "  -- Return\
    \ list of all prefixes from shortest to longest of the input string\n  return\
    \ string.gmatch(\"(.*):\\\\1$\") or {\n    prefix = \"\",\n    suffix = \"\",\n\
    \  }\nend", "    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string{i}\n    end\n    return prefixes\nend", "   local t = {}\n   for\
    \ i = 1, #string do t[#t + 1] = string.sub(string,1,i) end\n   return t\nend",
  "  local prefixes = {}\n  local position = 1\n  while position do\n    prefixes[position]\
    \ = string\n    position = position + 1\n  end\n  return prefixes\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
