name: HumanEval_7_filter_by_substring
language: lua
results:
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if string.find(strings, substring) == nil then\n        return\
    \ strings\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaukilukj.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local output = {}\n  for _, str in ipairs(strings) do\n    local\
    \ index = string.find(str, substring, 1, true)\n    if index == true then\n  \
    \    table.insert(output, str)\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq65ex42o.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpq65ex42o.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if not strings then return end\n  local new_strings = setmetatable({},\
    \ {__mode=\"v\"})\n  for _, str in ipairs(strings) do\n    local substring_pos\
    \ = string.find(str, substring)\n    if substring_pos ~= nil then\n      new_strings[#new_strings\
    \ + 1] = str\n    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local ret = {}\n    for _, s in ipairs(strings) do\n       \
    \ if string.find(s, substring) then\n            ret[#ret + 1] = s\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, str in ipairs(strings) do\n\
    \    local str_sub = string.find(str, substring)\n    if str_sub and str_sub >\
    \ 0 then\n      filtered_strings[#filtered_strings + 1] = str\n    end\n  end\n\
    \  return filtered_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter(\n    strings,\n    function (s)\n      return s:find(substring,\
    \ \".-\") ~= nil\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppczyjm9h.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmppczyjm9h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppczyjm9h.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp94simqrb.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp94simqrb.lua:9: in local 'candidate'\n\t/tmp/tmp94simqrb.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n   assert(type(strings) == 'table', 'strings should be a table')\n\
    \   assert(type(substring) == 'string', 'substring should be a string')\n   local\
    \ results = {}\n   for _, string in ipairs(strings) do\n      if string.find(substring,\
    \ 1, true) then\n         table.insert(results, string)\n      end\n   end\n \
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5mcg731.lua:11:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmph5mcg731.lua:11: in local 'candidate'\n\t/tmp/tmph5mcg731.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n   assert(type(strings) == \"table\" and \"table\" in getmetatable(strings))\n\
    \   assert(type(substring) == \"string\")\n   local table = {}\n   for i,v in\
    \ ipairs(strings) do\n      if not substring == nil then\n         if v:find(substring)\
    \ then\n            table.insert(v, substring)\n         end\n      end\n   end\n\
    \   return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn45ibwe7.lua:7: ')' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      result[#result + 1] = s\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i = 1, #strings do\n    if strings[i]\
    \ ~= substring then\n      result[#result + 1] = strings[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb13y_yq.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\"}\nstack traceback:\n\t/tmp/tmpeb13y_yq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      result[#result + 1] = tonumber(s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6jo8tsb.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpr6jo8tsb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) == 1 then\n      table.insert(result, string)\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzqzz6u1s.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpzqzz6u1s.lua:9: in local 'candidate'\n\t/tmp/tmpzqzz6u1s.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for idx, value in ipairs(strings) do\n\
    \        if string.sub(value, 1, string.len(substring))==substring then\n    \
    \        result[idx] = value\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9hwjnaz.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", 5=\"xxxAAA\", 6=\"\
    xxx\"}\nstack traceback:\n\t/tmp/tmpi9hwjnaz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  for _, str in ipairs(strings) do\n    if string.sub(s, 1, #substring)\
    \ == substring then\n      table.insert(strings, str)\n    end\n  end\n  return\
    \ strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd8b22r1v.lua:8:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpd8b22r1v.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpd8b22r1v.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    return filter_by_predicate(\n        function(string) return\
    \ string.find(substring) ~= nil end,\n        strings)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxk1ll9gi.lua:7:\
    \ attempt to call a nil value (global 'filter_by_predicate')\nstack traceback:\n\
    \t/tmp/tmpxk1ll9gi.lua:7: in local 'candidate'\n\t/tmp/tmpxk1ll9gi.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return function(s)\n    return string.find(s, substring, 1, true)\
    \ > -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmz9ovve.lua:15:\
    \ expected: {}\nactual: function: 0x12d0180\nstack traceback:\n\t/tmp/tmpfmz9ovve.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local list = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      list[#list + 1] = str\n    end\n  end\n  return list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(substring, 1, true) ~= nil then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfqca2wpr.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpfqca2wpr.lua:9: in local 'candidate'\n\t/tmp/tmpfqca2wpr.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if substring==nil then\n    return strings\n  end\n  local new_strings={}\n\
    \  for i,str in ipairs(strings) do\n    if string.find(str,substring) then\n \
    \     table.insert(new_strings,str)\n    end\n  end\n  return new_strings\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  local result = {}\n  local first_index = nil\n  for index, string\
    \ in ipairs(strings) do\n    if string.find(substring, 1, 1) ~= nil then\n   \
    \   if not first_index then\n        first_index = index\n      else\n       \
    \ if index > first_index then\n          result[#result + 1] = strings[first_index]\n\
    \        end\n        first_index = nil\n      end\n    end\n  end\n  if first_index\
    \ then\n    result[#result + 1] = strings[first_index]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vrxpij0.lua:33:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp_vrxpij0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n   for idx, value in ipairs(strings) do\n      if not string.sub(value,\
    \ 1, string.len(substring))==substring then\n         table.remove(strings, idx)\n\
    \      end\n   end\n   return strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztch23ci.lua:19:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmpztch23ci.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return table.filter(function(string) string.find(string) == string.find(substring)\
    \ end, strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxqjunjoa.lua:7: unexpected symbol near '=='\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  for i = 1, #strings do\n    if string.find(strings[i], substring)\
    \ then\n      strings[i] = nil\n    end\n  end\n  return strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hh2bts1.lua:19:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {2=\"asd\", 3=\"xxy\", 4=\"\
    john doe\"}\nstack traceback:\n\t/tmp/tmp0hh2bts1.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local results = {}\n    for idx, value in ipairs(strings) do\n\
    \        if string.find(value, substring) then\n            table.insert(results,\
    \ value)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if not strings then return strings end\n    if not substring\
    \ then return strings end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpih8n1gi4.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    error('strings should be\
    \ a table but is ' .. type(strings))\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpklf507ki.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- TODO: Optimize - check if strings has 'substring'\n  -- FIXME:\
    \ Optimize using Lua table.filter (more performant than a loop)\n  local result\
    \ = {}\n  for _, value in ipairs(strings) do\n    if value:find(substring) then\n\
    \      table.insert(result, value)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    local index = string.find(substring, 1, true) + 1\n    if index == 0\
    \ then break end\n    table.insert(filtered_strings, string.sub(string, index))\n\
    \  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptt_y7una.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmptt_y7una.lua:9: in local 'candidate'\n\t/tmp/tmptt_y7una.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if #strings == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpclxlber5.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return strings.filter(function(str)\n    return str:find(substring,\
    \ '') ~= nil\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yoq20hs.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp8yoq20hs.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8yoq20hs.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n   assert(type(strings) == \"table\")\n   assert(type(substring)\
    \ == \"string\")\n   local index = 1\n   local filtered_strings = { }\n   while\
    \ true do\n      if #strings == 0 then\n         break\n      end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd4u6i1eq.lua:25: 'end' expected (to close 'while' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return strings:map(function(str)\n    if str:sub(1,#substring)\
    \ == substring then\n      return str\n    end\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjntevkf.lua:7:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpyjntevkf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpyjntevkf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter(\n      function(string)\n        return string.find(substring,\
    \ '') == 1\n      end,\n      strings)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqsc6xwga.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpqsc6xwga.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqsc6xwga.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local strings_with_substring = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(strings_with_substring,\
    \ s)\n        end\n    end\n    return table.remove(strings_with_substring, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c9s8x0u.lua:19:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp9c9s8x0u.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  local index = 1\n  while index < #strings\
    \ do\n    local s = strings[index]\n    local index = index + 1\n    for i = 1,\
    \ #substring do\n      if string.find(s, substring[i]) then\n        result[#result\
    \ + 1] = s\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3y0zc4o.lua:13:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpw3y0zc4o.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpw3y0zc4o.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter(\n    function(string)\n      return string.find(substring)\n\
    \    end,\n    strings\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg93h69v1.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpg93h69v1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpg93h69v1.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return function(s)\n    -- The 'end' index is the position after\
    \ the substring\n    local i = 1\n    local j = string.find(s, substring, 1, true)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5jff0x74.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered_strings = nil\n    for i = 1, #strings do\n \
    \       if strings[i] then\n            if string.find(strings[i], substring)\
    \ then\n                filtered_strings = filtered_strings or {}\n          \
    \      table.insert(filtered_strings, strings[i])\n            end\n        end\n\
    \    end\n    return filtered_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88lfs42v.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp88lfs42v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == \"table\")\n  assert(type(substring) ==\
    \ \"string\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeejn1aoy.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  for _, str in ipairs(strings) do\n    if string.find(str, substring,\
    \ 1, true) ~= nil then\n      return str\n    end\n  end\n  return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxtkvts1.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpaxtkvts1.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if #strings == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgb2zvq04.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local function contains_substring(string, substring)\n    return\
    \ (string.find(string, '^') > 0) and\n           (string.find(string, substring)\
    \ > 0)\n  end\n  local function not_contains(string, substring)\n    return (string.find(string,\
    \ '^') > 0) and\n           (string.find(string, substring) == -1)\n  end\n  local\
    \ function contains_substring(string, substring)\n    return (string.find(string,\
    \ '^') > 0) and\n           (string.find(string, substring) > 0)\n  end\n  local\
    \ function not_contains(string, substring)\n    return (string.find(string, '^')\
    \ > 0) and\n           (string.find(string, substring) == -1)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu98xrysb.lua:33: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in ipairs(strings) do\n    if\
    \ string.sub(value, 1, string.len(substring)) ~= substring then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqlfzpow.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmpaqlfzpow.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local function match(string)\n    return string.find(substring,\
    \ 1, true) ~= nil\n  end\n  return filter(strings, match) -- Filter the input\
    \ list of strings keeping only those strings that contain the given substring\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9a20l_e.lua:10:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpk9a20l_e.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpk9a20l_e.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = { }\n  for _, s in ipairs(strings) do\n\
    \    if string.find(s, substring) == 1 then\n      table.insert(filtered_strings,\
    \ s)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40u0a75a.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmp40u0a75a.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if #strings == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3vry7ova.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return function(string)\n    local index = #string + 1\n    local\
    \ buffer = {}\n    while true do\n      local start = string.find(string, substring,\
    \ index, true)\n      if start < 0 then\n        break\n      elseif start ==\
    \ index then\n        table.insert(buffer, string[start + 1])\n        index =\
    \ string.len(string) + 1\n      else\n        index = start\n      end\n    end\n\
    \    return buffer\n  end(strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo6ckssi4.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near '('\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filter = function(x)\n    return string.find(x, substring)\
    \ ~= nil\n  end\n  local result = {}\n  for _, value in ipairs(strings) do\n \
    \   if filter(string) then\n      table.insert(result, value)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7wv2uqm8.lua:8:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmp7wv2uqm8.lua:8: in local 'filter'\n\t/tmp/tmp7wv2uqm8.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmp7wv2uqm8.lua:23: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local results = {}\n    for _, v in ipairs(strings) do\n   \
    \     if string.sub(v, 1, #substring - 1) == substring then\n            table.insert(results,\
    \ v)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqrajtlp.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpeqrajtlp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then\n        strings = {strings}\n\
    \    end\n    local new_strings = {}\n    for i = 1, #strings do\n        if string.find(strings[i],\
    \ substring) ~= nil then\n            new_strings[#new_strings+1] = strings[i]\n\
    \        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for _, value in ipairs(strings) do\n   \
    \ if value:find(substring) then\n      table.insert(results, value)\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' or #strings == 0 then\n    return\
    \ strings\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfwuetdjm.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_list = {}\n  for _, value in ipairs(strings) do\n  \
    \  if value:find(substring) then\n      table.insert(new_list, value)\n    end\n\
    \  end\n  return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n\tassert(type(substring) == 'string', '`substring` must be a string')\n\
    \tassert(strings and type(strings) == 'table', '`strings` must be a table')\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1sa8b62u.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  for i, str in ipairs(strings) do\n    if str:find(substring) then\n\
    \      table.insert(strings, str)\n    end\n  end\n  return strings\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n\tassert(type(strings) == 'table')\n\tassert(type(substring) ==\
    \ 'string')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph6jd8fon.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if strings == nil then return nil end\n  return terralib.newlist(\n\
    \    string.gmatch(strings, \"([^\"..substring..\"]+)\") or nil)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvzym9ppo.lua:8:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpvzym9ppo.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpvzym9ppo.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter(\n    function(value)\n      return type(value)\
    \ == 'string' and value:find(substring) == 1 or\n              type(value) ==\
    \ 'table' and next(value) == substring\n    end,\n    strings\n  )\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi7zxnp7x.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpi7zxnp7x.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpi7zxnp7x.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then\n        strings = {strings}\n\
    \    end\n    local filtered = {}\n    for _, s in ipairs(strings) do\n      \
    \  if string.find(s, substring) ~= nil then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    assert(type(strings) == 'table')\n    assert(type(substring)\
    \ == 'string')\n    local filtered_table = {}\n    local count = 0\n    for _,\
    \ s in pairs(strings) do\n        if string.find(s, substring) then\n        \
    \    filtered_table[count] = s\n            count = count + 1\n        end\n \
    \   end\n    return filtered_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsaza1hez.lua:24:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {0=\"xxx\", \"xxxAAA\", \"\
    xxx\"}\nstack traceback:\n\t/tmp/tmpsaza1hez.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local results = {}\n    local len = #strings\n    for i = 1,\
    \ len do\n        if strings[i]:find(substring) == 1 then\n            results[#results\
    \ + 1] = strings[i]\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7iyp549.lua:22:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpg7iyp549.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if not strings then\n        return\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2jzybx23.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(#strings > 0, 'empty input list')\n  assert(#substring\
    \ > 0, 'empty substring')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmm0cvcj2.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = { }\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt8t_i_rj.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, value in ipairs(strings) do\n\
    \        if string.find(value, substring) then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if #substrings == 0 then\n    return strings\n  end\n  local result\
    \ = {}\n  for i = 1, #strings do\n    if string.find(strings[i], substring) then\n\
    \      table.insert(result, strings[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpan25_1vr.lua:7:\
    \ attempt to get length of a nil value (global 'substrings')\nstack traceback:\n\
    \t/tmp/tmpan25_1vr.lua:7: in local 'candidate'\n\t/tmp/tmpan25_1vr.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if string.find(str, substring) then\n            result[#result + 1] =\
    \ str\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptuho_emq.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmptuho_emq.lua:9: in local 'candidate'\n\t/tmp/tmptuho_emq.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(substring, 1, true) then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jwjymsx.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp2jwjymsx.lua:9: in local 'candidate'\n\t/tmp/tmp2jwjymsx.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    error('input must be a table')\n\
    \  end\n  -- Use a closure to protect against mutation\n  -- Use `string` instead\
    \ of `strings` to avoid mutation\n  return function(input)\n    if type(input)\
    \ ~= 'table' then\n      error('input must be a table')\n    end\n    for i =\
    \ 1, #input do\n      if input[i] ~= substring then\n        return input\n  \
    \    end\n    end\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9splrly.lua:28:\
    \ expected: {}\nactual: function: 0xb96370\nstack traceback:\n\t/tmp/tmpg9splrly.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _, item in pairs(strings) do\n    if\
    \ string.find(item, substring, 1, true) then\n      table.insert(filtered, item)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local output = {}\n  for i = 1, #strings do\n    if strings.substring.call(strings[i],\
    \ substring, 1, #substring) == #substring then\n      table.insert(output, strings[i])\n\
    \    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptjlzwfqb.lua:9:\
    \ attempt to index a nil value (field 'substring')\nstack traceback:\n\t/tmp/tmptjlzwfqb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptjlzwfqb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n   if #strings ~= 0 then\n      return filter_by_substring(strings[#strings\
    \ - 1], substring)\n   end\n   return strings\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp18ji__nb.lua:7:\
    \ attempt to get length of a nil value (local 'strings')\nstack traceback:\n\t\
    /tmp/tmp18ji__nb.lua:7: in function </tmp/tmp18ji__nb.lua:6>\n\t(...tail calls...)\n\
    \t/tmp/tmp18ji__nb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local output = {}\n  for i=1, #strings do\n    if strings[i] ~=\
    \ substring then\n      table.insert(output, strings[i])\n    end\n  end\n  return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_fcd42e.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\"}\nstack traceback:\n\t/tmp/tmpw_fcd42e.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter_by_function(function(s) string.find(s, substring)\
    \ ~= nil, nil, strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbr4wy7b_.lua:7: unexpected symbol near '~='\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for _, value in ipairs(strings) do\n   \
    \ if string.find(value, substring, 1, true) then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if str:find(substring) then\n            result[#result + 1] = str\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for _, string in ipairs(strings) do\n  \
    \  if string.find(substring) then\n      table.insert(results, string)\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vwp6tdf.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp6vwp6tdf.lua:9: in local 'candidate'\n\t/tmp/tmp6vwp6tdf.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    local index_filter = 1\n    local index_string\
    \ = 1\n    for index, value in ipairs(strings) do\n        if string.sub(value,\
    \ 1, string.len(substring)) ~= substring then\n            table.insert(filtered,\
    \ value)\n        else\n            table.insert(filtered, strings[index_filter])\n\
    \            index_filter = index_filter + 1\n            table.insert(filtered,\
    \ strings[index_string])\n            index_string = index_string + 1\n      \
    \  end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw7a6ruc.lua:27:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"asd\", \"asd\", \"xxy\", \"xxy\"}\nstack traceback:\n\
    \t/tmp/tmpkw7a6ruc.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = { }\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qsp_39v.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp_qsp_39v.lua:9: in local 'candidate'\n\t/tmp/tmp_qsp_39v.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i = 1, #strings do\n    local s = strings[i]\n\
    \    if substring in s then\n      table.insert(result, s)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy3e0ehp7.lua:10: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal new_strings = {}\n\tfor i, str in ipairs(strings) do\n\t\
    \tif str:find(substring) then\n\t\t\ttable.insert(new_strings, str)\n\t\tend\n\
    \tend\n\treturn new_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for i = 1, #strings do\n    if string.find(strings[i],\
    \ substring) then\n      table.insert(filtered, strings[i])\n    end\n  end\n\
    \  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n   assert(type(strings) ~= 'table')\n   assert(type(substring) ==\
    \ 'string')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmto3_owt.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if not strings then return nil end\n    local filtered = {}\n\
    \    for _, v in pairs(strings) do\n        if string.find(v, substring, 1, true)\
    \ then\n            table.insert(filtered, v)\n        end\n    end\n    return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if #strings <= 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3i8vpmoo.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return table.filter(\n    strings,\n    function (str)\n     \
    \ return string.find(str, substring, 1, true) ~= nil\n    end\n  )\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ngncrpr.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp_ngncrpr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_ngncrpr.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type.is_list_of_strings(strings))\n  assert(type(substring)\
    \ == 'string')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwxhff038.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n   local t = {\n      strings\n   }\n   for i, str in pairs(t) do\n\
    \      if string.find(str, substring) then\n         t[i] = str\n      end\n \
    \  end\n   return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdukfo5g.lua:11:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpsdukfo5g.lua:11: in local 'candidate'\n\t/tmp/tmpsdukfo5g.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, \".\") ~= nil then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyrc1p9h.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmpcyrc1p9h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return function(t)\n    if t then\n      local index = string.find(t,\
    \ substring)\n      while index and not next(t) do\n        local index = string.find(t,\
    \ substring, index + 1)\n      end\n      if index then\n        return t\n  \
    \    else\n        return nil\n      end\n    else\n      return nil\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_vrbt1k.lua:27:\
    \ expected: {}\nactual: function: 0xb8d230\nstack traceback:\n\t/tmp/tmpi_vrbt1k.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if substring == nil then\n        strings = nil\n    elseif\
    \ type(strings) ~= 'table' then\n        strings = {strings}\n    end\n    \n\
    \    local table = {}\n    for s in strings do\n        if string.find(s, substring)\
    \ then\n            table.insert(table, s)\n        end\n    end\n    \n    return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpio47f3xl.lua:14:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpio47f3xl.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpio47f3xl.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    for _, v in ipairs(strings) do\n\
    \        if string.find(v, substring) then\n            new_strings[#new_strings\
    \ + 1] = v\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in ipairs(strings) do\n    if\
    \ value:find(substring) ~= nil then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) ~= 'table')\n  assert(type(substring) ==\
    \ 'string')\n  local result = {}\n  for _, v in pairs(strings) do\n    if substring\
    \ in v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp47b13dhx.lua:11: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    return strings\n  end\n\
    \  local new_strings = {}\n  for i = 1, #strings do\n    local string = strings[i]\n\
    \    if string.find(substring, string, 1, true) then\n      table.insert(new_strings,\
    \ string)\n    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfzlm13k.lua:24:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxx\"}\nstack\
    \ traceback:\n\t/tmp/tmptfzlm13k.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  assert(#strings > 0)\n  local results = {}\n  for i = 1, #strings\
    \ do\n    if string.sub(string, 1, string.len(substring)) ~= substring then\n\
    \      table.insert(results, strings[i])\n    end\n  end\n  return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwor491tv.lua:9:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpwor491tv.lua:9: in local 'candidate'\n\
    \t/tmp/tmpwor491tv.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local output = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      output[#output + 1] = string\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7q2jv1i8.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp7q2jv1i8.lua:9: in local 'candidate'\n\t/tmp/tmp7q2jv1i8.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    -- FIXME: handle non-string\n\
    \    ngx.log(ngx.ERR, \"filter_by_substring() requires table as first argument.\"\
    , 2)\n  end\n  local filtered_list = {}\n  for i=1, #strings do\n    if string.find(strings[i],\
    \ substring) ~= nil then\n      table.insert(filtered_list, strings[i])\n    end\n\
    \  end\n  return filtered_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return strings:map(function(string) return string:find(substring)\
    \ ~= nil end):filter(function(bool) return bool end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnuvctbag.lua:7:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpnuvctbag.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnuvctbag.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _, string in pairs(strings) do\n  \
    \  if string.find(substring) == 1 then\n      table.insert(filtered, string)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvvmr6lgk.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpvvmr6lgk.lua:9: in local 'candidate'\n\t/tmp/tmpvvmr6lgk.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for i, string in ipairs(strings) do\n\
    \        if string.find(substring) then\n            result[#result + 1] = string\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8w9lrcwi.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp8w9lrcwi.lua:9: in local 'candidate'\n\t/tmp/tmp8w9lrcwi.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    for _, string in pairs(strings)\
    \ do\n        if string.find(substring) == 1 then\n            table.insert(new_strings,\
    \ string)\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj8vw23r6.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpj8vw23r6.lua:9: in local 'candidate'\n\t/tmp/tmpj8vw23r6.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring, 1, true) then\n      new_table_insert(new_strings,\
    \ string)\n    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg9swz9th.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpg9swz9th.lua:9: in local 'candidate'\n\t/tmp/tmpg9swz9th.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local t = {}\n  for i = 1, #strings do\n    if strings.sub(1,\
    \ #strings[i]) == substring then\n      table.insert(t, strings[i])\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3e01rkq.lua:9:\
    \ attempt to call a nil value (field 'sub')\nstack traceback:\n\t/tmp/tmpz3e01rkq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpz3e01rkq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for i = 1, #strings do\n    if\
    \ strings[i] ~= substring then\n      table.insert(filtered_strings, strings[i])\n\
    \    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplofa3wt3.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\"}\nstack traceback:\n\t/tmp/tmplofa3wt3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for _, string in ipairs(strings) do\n  \
    \  if string.find(substring, 1, true) then\n      table.insert(results, string)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpseus_rdi.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpseus_rdi.lua:9: in local 'candidate'\n\t/tmp/tmpseus_rdi.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if not substring then\n    return strings\n  else\n    local filtered_strings\
    \ = {}\n    for _, string in ipairs(strings) do\n      if string.find(substring,\
    \ 1, true) then\n        table.insert(filtered_strings, string)\n      end\n \
    \   end\n    return filtered_strings\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwdh1gob.lua:12:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmphwdh1gob.lua:12: in local 'candidate'\n\t/tmp/tmphwdh1gob.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local newStrings = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring) then\n      table.insert(newStrings, string)\n\
    \    end\n  end\n  return newStrings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsjjpy34x.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpsjjpy34x.lua:9: in local 'candidate'\n\t/tmp/tmpsjjpy34x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in pairs(strings) do\n    if str:find(substring)\
    \ then\n      result[#result + 1] = str\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      result[#result + 1]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9q0hqnvq.lua:11: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    local\
    \ start, _, stop = pcall(string.find,\n                                 substring,\n\
    \                                 str,\n                                 1,\n\
    \                                 true) -- only search the first time\n    if\
    \ start ~= nil then\n      table.insert(result, str:sub(1, start-1))\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptfp0pr_4.lua:15:\
    \ attempt to perform arithmetic on a boolean value (local 'start')\nstack traceback:\n\
    \t/tmp/tmptfp0pr_4.lua:15: in local 'candidate'\n\t/tmp/tmptfp0pr_4.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor i, string in ipairs(strings) do\n\t\t\
    if string.find(substring, 1, true) then\n\t\t\ttable.insert(result, string)\n\t\
    \tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_6dpwae.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpd_6dpwae.lua:9: in local 'candidate'\n\t/tmp/tmpd_6dpwae.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    assert(#strings > 0, strings)\n    assert(typeof(substring)\
    \ == 'string', strings)\n    \n    local filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(substring, 1, true) then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n{}\nstack\
    \ traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local substring_index = nil\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      substring_index = string\n\
    \      break\n    end\n  end\n  if substring_index == nil then\n    return strings\n\
    \  else\n    local filtered = {}\n    for _, string in ipairs(strings) do\n  \
    \    if string.find(substring, 1, true) then\n        table.insert(filtered, string)\n\
    \      end\n    end\n    return filtered\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9bm2efv.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp_9bm2efv.lua:9: in local 'candidate'\n\t/tmp/tmp_9bm2efv.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) ~= nil then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6x6fpqpd.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp6x6fpqpd.lua:9: in local 'candidate'\n\t/tmp/tmp6x6fpqpd.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  local function search(s)\n    return s:find(substring)\n  end\n\
    \  return filter(strings, search)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4bdmu66t.lua:12:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp4bdmu66t.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4bdmu66t.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local strings_with_substring = { }\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(substring) then\n            table.insert(strings_with_substring,\
    \ string)\n        end\n    end\n    return strings_with_substring\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc9yj83l_.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpc9yj83l_.lua:9: in local 'candidate'\n\t/tmp/tmpc9yj83l_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  for _, value in ipairs(strings) do\n    if string.sub(value, 1,\
    \ string.len(substring)) == substring then\n      return value\n    end\n  end\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy98hhsyr.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy98hhsyr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for _, string in ipairs(strings) do\n  \
    \  if string.find(substring, 1, true) then\n      table.insert(results, string)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyyz66iai.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpyyz66iai.lua:9: in local 'candidate'\n\t/tmp/tmpyyz66iai.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table' and #strings > 0, 'The argument\
    \ is not a table but ' .. type(strings) .. ' given')\n  assert(type(substring)\
    \ == 'string', 'The argument is not a string but ' .. type(substring) .. ' given')\n\
    \  local filtered_strings = {}\n  for i = 1, #strings do\n    local s = strings[i]\n\
    \    local substring_found = string.find(s, substring, 1, true)\n    if substring_found\
    \ then\n      table.insert(filtered_strings, s)\n    end\n  end\n  return filtered_strings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7xvs6i8t.lua:7:\
    \ The argument is not a table but table given\nstack traceback:\n\t/tmp/tmp7xvs6i8t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7xvs6i8t.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered_strings = {}\n    local num_substring = 0\n \
    \   for index, string in ipairs(strings) do\n        if string.find(substring)\
    \ then\n            filtered_strings[num_substring] = string\n            num_substring\
    \ = num_substring + 1\n        end\n    end\n    return filtered_strings\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5mzly9i.lua:10:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmph5mzly9i.lua:10: in local 'candidate'\n\t/tmp/tmph5mzly9i.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return table.filter(\n    function(input)\n      return (string.sub(input,\
    \ 1, string.len(substring)) == substring)\n    end,\n    strings\n  )\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplogrv9vp.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmplogrv9vp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplogrv9vp.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local list = { }\n    for _, string in ipairs(strings) do\n\
    \        if string.find(substring, 1, true) then\n            table.insert(list,\
    \ string)\n        end\n    end\n    return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf75wj694.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpf75wj694.lua:9: in local 'candidate'\n\t/tmp/tmpf75wj694.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = {}\n  for index, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(new_strings, string)\n\
    \    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvbdo49j.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpgvbdo49j.lua:9: in local 'candidate'\n\t/tmp/tmpgvbdo49j.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered_strings = {}\n    for _, v in ipairs(strings)\
    \ do\n        if string.find(v, substring) then\n            table.insert(filtered_strings,\
    \ v)\n        end\n    end\n    return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = {}\n  for _, string in pairs(strings) do\n\
    \    local index = string.find(substring)\n    if index == nil then\n      new_strings[#new_strings\
    \ + 1] = string\n    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4ttyqng.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpq4ttyqng.lua:9: in local 'candidate'\n\t/tmp/tmpq4ttyqng.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _, s in ipairs(strings) do\n    if\
    \ s:find(substring) then\n      table.insert(filtered, s)\n    end\n  end\n  return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if not strings then return nil end\n  return filter(\n    function(string)\
    \ return string.find(string) == substring or false end,\n    strings\n  )\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul6omf5z.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpul6omf5z.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpul6omf5z.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- Return new list with strings filtered for substring\n  local\
    \ new_list = terralib.newlist()\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring, 1, true) then\n      new_list:insert(str)\n    end\n  end\n  return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptbh1mgn0.lua:8:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmptbh1mgn0.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmptbh1mgn0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table', 'strings must be a table')\n\
    \  assert(type(substring) == 'string', 'substring must be a string')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpozfpkpuj.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter(\n    function(string) return string.find(substring)\
    \ > 0 end,\n    strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdba3iaea.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpdba3iaea.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdba3iaea.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return function(str)\n    local s = str:lower()\n    return #strings\
    \ > 0 and #string <= #strings and substring == s or substring == '*' or\n    \
    \  s:find(substring) ~= nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbatatpws.lua:17:\
    \ expected: {}\nactual: function: 0x1e652c0\nstack traceback:\n\t/tmp/tmpbatatpws.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter(function(string) string.find(substring, 1, true)\
    \ ~= nil, strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaxoaxcp6.lua:7: unexpected symbol near '~='\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _,string in ipairs(strings) do\n\
    \        if string.find(substring, \".\") then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbudjzt5n.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmpbudjzt5n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table', 'Expected table input')\n  assert(type(substring)\
    \ == 'string', 'Expected string input')\n  local filtered_strings = {}\n  for\
    \ _, s in ipairs(strings) do\n    if string.find(s, substring) then\n      table.insert(filtered_strings,\
    \ s)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then return strings end\n  local filtered_strings\
    \ = {}\n  for i = 1, #strings do\n    if string.sub(strings[i], 1, #substring)\
    \ == substring then\n      table.insert(filtered_strings, strings[i])\n    end\n\
    \  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcioo04yj.lua:22:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpcioo04yj.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local list = {}\n  for k, v in pairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(list, v)\n    end\n  end\n  return list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then\n        error('argument 1\
    \ must be a table')\n    end\n    if substring == '' or substring == '.' or substring\
    \ == '*' then\n        return strings\n    end\n    local filtered_strings = {}\n\
    \    for index, string in pairs(strings) do\n        if string.find(substring,\
    \ '') then\n            filtered_strings[index] = string\n        end\n    end\n\
    \    return filtered_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_iejf8o.lua:26:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmpa_iejf8o.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, str in ipairs(strings) do\n\
    \    local idx = string.find(str, substring, 1, 1)\n    if idx ~= nil then\n \
    \     table.insert(filtered_strings, str)\n    end\n  end\n  return filtered_strings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    for _, str in pairs(strings) do\n\
    \        if string.find(str, substring, 1, true) then\n            new_strings[#new_strings\
    \ + 1] = str\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(substring, 1, true) ~= nil then\n            result[#result\
    \ + 1] = string\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6v8yg6xe.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp6v8yg6xe.lua:9: in local 'candidate'\n\t/tmp/tmp6v8yg6xe.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      result[#result +1] = s\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter_by_start_index(\n    strings,\n    function(i, s)\n\
    \      return string.find(s, substring, 1, true) ~= nil\n    end,\n    substring)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplii2pdpg.lua:7:\
    \ attempt to call a nil value (global 'filter_by_start_index')\nstack traceback:\n\
    \t/tmp/tmplii2pdpg.lua:7: in local 'candidate'\n\t/tmp/tmplii2pdpg.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter(function(string) return string.find(substring) ~=\
    \ nil end, strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp06htdada.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp06htdada.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp06htdada.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local results = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(substring, 1, true) then\n            table.insert(results,\
    \ string)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa8ht4h62.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpa8ht4h62.lua:9: in local 'candidate'\n\t/tmp/tmpa8ht4h62.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in ipairs(strings) do\n    if\
    \ string.sub(value, 1, string.len(substring)) ~= substring then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4f1hzwu.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmpf4f1hzwu.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if not substring then\n    return strings\n  end\n  local result\
    \ = {}\n  for _, str in ipairs(strings) do\n    local substr_start = str:find(substring)\n\
    \    if substr_start ~= nil then\n      result[#result + 1] = str\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered_strings = {}\n    for _, string in pairs(strings)\
    \ do\n        if string.find(substring) ~= nil then\n            filtered_strings[#filtered_strings\
    \ + 1] = string\n        end\n    end\n    return filtered_strings\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ua9io2c.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp5ua9io2c.lua:9: in local 'candidate'\n\t/tmp/tmp5ua9io2c.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  local found = false\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      found = true\n      table.insert(result,\
    \ string)\n    end\n  end\n  if found then\n    return result\n  else\n    return\
    \ nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp215frll7.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp215frll7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdf00ru6.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpfdf00ru6.lua:9: in local 'candidate'\n\t/tmp/tmpfdf00ru6.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local results = {}\n    for i, v in ipairs(strings) do\n   \
    \     if v:find(substring) then\n            table.insert(results, v)\n      \
    \  end\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      filtered_strings[#filtered_strings\
    \ + 1] = string\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoit77me7.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpoit77me7.lua:9: in local 'candidate'\n\t/tmp/tmpoit77me7.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring, '') then\n      new_strings[#new_strings + 1] =\
    \ string\n    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr772f_v2.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmpr772f_v2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered_strings = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(substring) == 1 then\n            table.insert(filtered_strings,\
    \ string)\n        end\n    end\n    return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1dxuzdt.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpi1dxuzdt.lua:9: in local 'candidate'\n\t/tmp/tmpi1dxuzdt.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then return nil end\n    local index\
    \ = 1\n    local result = {}\n    for i = 1, #strings do\n        if strings[i]:find(string)\
    \ == 1 then\n            result[index] = strings[i]\n            index = index\
    \ + 1\n        end\n    end\n    if index <= #strings then return result end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdh1tdoaj.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpdh1tdoaj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    return nil\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsdt6b365.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  for _, str in ipairs(strings) do\n    if string.find(str, substring)\
    \ == 1 then\n      table.insert(strings, str)\n    end\n  end\n  return strings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if string.find(s, substring) == 1 then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow_gqe7t.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpow_gqe7t.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(substring) == 1 then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54uezoj0.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp54uezoj0.lua:9: in local 'candidate'\n\t/tmp/tmp54uezoj0.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(results, str)\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if #strings == 0 then return strings end\n  if substring == nil\
    \ then return strings end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgxa1vrs3.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = terralib.newlist()\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(string, \"^\" .. re.escape(substring) .. \"$\") then\n\
    \      new_strings:insert(string)\n    end\n  end\n  return new_strings\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8uakdh2b.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp8uakdh2b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8uakdh2b.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filter = {}\n  for i = 1, #strings do\n    local str = strings[i]\n\
    \    if string.find(str, substring, 1, true) then\n      table.insert(filter,\
    \ str)\n    end\n  end\n  return filter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local results = {}\n    for _, str in ipairs(strings) do\n \
    \       if string.find(str, substring) then\n            table.insert(results,\
    \ str)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter(\n    function(string) return string.find(string,\
    \ \".*\" .. substring .. \".*\") ~= nil end,\n    strings)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb_ns0wj7.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpb_ns0wj7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpb_ns0wj7.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i, value in ipairs(strings) do\n    if\
    \ value:find(substring) == 1 then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8837u_6g.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmp8837u_6g.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(results, str)\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then return end\n    local filtered_strings\
    \ = {}\n    for _, value in ipairs(strings) do\n        if string.sub(value, 1,\
    \ string.len(substring)) ~= substring then\n            table.insert(filtered_strings,\
    \ value)\n        end\n    end\n    return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pglelqa.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmp9pglelqa.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filter = {}\n  local filtered_strings = {}\n  for _, str\
    \ in ipairs(strings) do\n    for _, char in ipairs(str) do\n      if char == substring\
    \ then\n        table.insert(filter, str)\n      end\n    end\n  end\n  for _,\
    \ str in ipairs(filter) do\n    table.insert(filtered_strings, str)\n  end\n \
    \ return filtered_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv4lcsww.lua:26:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpyv4lcsww.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_list = {}\n  for _, str in ipairs(strings) do\n    local\
    \ i = str:find(substring)\n    if i >= 1 then\n      table.insert(new_list, str)\n\
    \    end\n  end\n  return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_gonta5l.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_gonta5l.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_gonta5l.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local out = {}\n  for _, str in ipairs(strings) do\n    local\
    \ n = str:find(substring)\n    if n ~= nil then\n      table.insert(out, str)\n\
    \    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local pattern = \"^\" .. re.escape(substring) .. \"$\"\n   \
    \ return strings:map(function(str)\n        return str:find(pattern) ~= nil\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89xwhtj_.lua:7:\
    \ attempt to index a nil value (global 're')\nstack traceback:\n\t/tmp/tmp89xwhtj_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp89xwhtj_.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local results = {}\n    for i, v in ipairs(strings) do\n   \
    \     if string.find(v, substring, 1, true) then\n            table.insert(results,\
    \ v)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for i, string in ipairs(strings) do\n\
    \        if string.find(substring, 1, true) then\n            result[#result +\
    \ 1] = string\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggi_y5bc.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpggi_y5bc.lua:9: in local 'candidate'\n\t/tmp/tmpggi_y5bc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local out = {}\n  for _, string in ipairs(strings) do\n    if\
    \ string.find(substring) then\n      table.insert(out, string)\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiouht2lg.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpiouht2lg.lua:9: in local 'candidate'\n\t/tmp/tmpiouht2lg.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    str\
    \ = str:lower()\n    if string.find(str, substring, 1, true) then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ljrpx6l.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxaaa\", \"xxx\"\
    }\nstack traceback:\n\t/tmp/tmp_ljrpx6l.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _, value in ipairs(strings) do\n  \
    \  if value:find(substring) then\n      table.insert(filtered, value)\n    end\n\
    \  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return table.filter(\n    strings,\n    function(item) return\
    \ string.find(item, substring, 1, true) ~= nil end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ifo4wgu.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp3ifo4wgu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3ifo4wgu.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(results, s)\n    end\n  end\n  return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filter\n  if strings and string.substring then\n    filter\
    \ = string.gsub\n  else\n    filter = function(str)\n      local list = {}\n \
    \     for _, _, _ in string.gmatch(str, \"([^\\n\\r]*)([^\\n\\r]*)(.*)\\n\") do\n\
    \        table.insert(list, 3)\n      end\n      return list\n    end\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7z5d46kv.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ then\n      table.insert(strings, string)\n    end\n  end\n  return strings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmhl1lhva.lua:8:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpmhl1lhva.lua:8: in local 'candidate'\n\t/tmp/tmpmhl1lhva.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring, 1, true) then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return strings:gmatch(string.format(\"^.*(%s)$\", substring))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_a1fv5se.lua:7:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmp_a1fv5se.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_a1fv5se.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == \"table\", \"strings\")\n  assert(type(substring)\
    \ == \"string\", \"substring\")\n  \n  -- Filter all strings containing given\
    \ substring\n  return strings:map(function(str)\n    local _, index = str:find(substring)\n\
    \    return index ~= nil and str or nil\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpez7mgjjd.lua:11:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpez7mgjjd.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpez7mgjjd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  if string.sub(substring, 1, 1) ~= string.sub(substring, 2, 2)\
    \ then\n    error('The second argument to filter_by_substring must be a substring')\n\
    \  end\n  for _, str in ipairs(strings) do\n    if string.find(str, substring,\
    \ 1, true) then\n      return str\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzzbreub3.lua:8:\
    \ The second argument to filter_by_substring must be a substring\nstack traceback:\n\
    \t/tmp/tmpzzbreub3.lua:8: in local 'candidate'\n\t/tmp/tmpzzbreub3.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for i = 1, #strings do\n    if\
    \ string.find(strings[i], substring) == 1 then\n      filtered_strings[#filtered_strings\
    \ + 1] = strings[i]\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbrg4d89.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmphbrg4d89.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa1wyqw2z.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then\n        strings = {strings}\n\
    \    end\n    local ret = {}\n    for i = 1, #strings do\n        if string.find(strings[i],\
    \ substring, 1, true) ~= nil then\n            table.insert(ret, strings[i])\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = nil\n  for i = 1, #strings do\n    if\
    \ string.sub(strings[i], 1, string.len(substring)) ~= substring then\n      filtered_strings\
    \ = filtered_strings or {}\n      table.insert(filtered_strings, strings[i])\n\
    \    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qj55zkx.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2qj55zkx.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter_by_function(function(item)\n    return string.sub(item,\
    \ 1, #item) == substring\n  end, strings)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4cyejke.lua:7:\
    \ attempt to call a nil value (global 'filter_by_function')\nstack traceback:\n\
    \t/tmp/tmps4cyejke.lua:7: in local 'candidate'\n\t/tmp/tmps4cyejke.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) ~= nil then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq36q0rh9.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpq36q0rh9.lua:9: in local 'candidate'\n\t/tmp/tmpq36q0rh9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return table.sort(\n    table.filter(\n      strings,\n      function(string)\
    \ string.find(substring) ~= nil end)\n  )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn6rne7k4.lua:10: unexpected symbol near '~='\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  return [string for string in strings if string.find(substring,\
    \ 1, true) > 0]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk9h2oued.lua:7: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == \"table\", \"argument 1 should be a table\"\
    )\n  assert(type(substring) == \"string\", \"argument 2 should be a string\")\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa5avc5t_.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, item in ipairs(strings) do\n    if\
    \ string.find(item, substring) then\n      table.insert(result, item)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for k, v in pairs(strings) do\n     \
    \   if v:find(substring) then\n            result[#result + 1] = v\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for i, string in ipairs(strings) do\n\
    \        if string.find(substring) ~= nil then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4g_ul3dv.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp4g_ul3dv.lua:9: in local 'candidate'\n\t/tmp/tmp4g_ul3dv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
