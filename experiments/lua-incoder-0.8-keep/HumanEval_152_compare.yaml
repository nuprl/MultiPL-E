name: HumanEval_152_compare
language: lua
prompt: "-- I think we all remember that feeling when the result of some long-awaited\n\
  -- event is finally known. The feelings and thoughts you have at that moment are\n\
  -- definitely worth noting down and comparing.\n-- Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n-- You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n-- Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n-- the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n-- example:\n-- compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n-- compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
  local function compare(game, guess)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0,\
  \ 0, 0, 3, 3})\n    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0,\
  \ 0}), {0, 0, 0, 0, 0, 0})\n    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}),\
  \ {2, 4, 6})\n    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0,\
  \ 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local results = {}\n    local i = 0\n    while i < #game do\n \
    \       local j = i + 1\n        while j < #guess do\n            local diff =\
    \ math.abs(game[i] - guess[j])\n            if game[i] == guess[j] then\n    \
    \            diff = diff + 0\n            else\n                diff = diff +\
    \ game[i] > guess[j] and -1 or 1\n            end\n            results[i] = diff\
    \ + results[i] or 0\n            j = j + 1\n        end\n        i = i + 1\n \
    \   end\n    return results\nend", "    if not game then\n        game = {}\n\
    \    end\n    if not guess then\n        guess = {}\n    end", "\t-- for loop\
    \ until end of game\n\tlocal differences = {} -- store each difference\n\tlocal\
    \ result = {} -- store each result", "\tlocal score = { }\n\tlocal guesses = {\
    \ }\n\tlocal guesses_count = #guess\n\tlocal game_count = #game\n\tlocal answers\
    \ = {}\n\tfor i = 1, game_count do\n\t\ttable.insert(scores, game[i])\n\t\ttable.insert(guesses,\
    \ guess[i])\n\tend\n\tlocal min_score = scores[1]\n\tfor i = 1, game_count do\n\
    \t\tmin_score = math.min(min_score, scores[i])\n\tend\n\tlocal min_guess = guesses[1]\n\
    \tfor i = 1, game_count do\n\t\tmin_guess = math.min(min_guess, guesses[i])\n\t\
    end\n\tlocal count = 0\n\tlocal max_score = min_score\n\tlocal max_guess = min_guess\n\
    \ttable.insert(answers, max_score)\n\ttable.insert(answers, max_guess)\n\tcount\
    \ = game_count - 1\n\twhile count > 1 do\n\t\tlocal guess = guesses[count]\n\t\
    \tlocal score = scores[count]\n\t\tif guess == score then\n\t\t\tcount = count\
    \ - 1\n\t\t\ttable.insert(answers, 0)\n\t\telse\n\t\t\tlocal diff_score = abs(guess\
    \ - score)\n\t\t\tlocal diff_guess = abs(guess - max_guess)\n\t\t\tlocal diff_score\
    \ = diff_score + max_score\n\t\t\tif diff_guess > diff_score then\n\t\t\t\tmax_score\
    \ = diff_guess\n\t\t\t\tmax_guess = guess\n\t\t\telse\n\t\t\t\tmax_score = diff_score\n\
    \t\t\t\tmax_guess = score\n\t\t\tend\n\t\t\tif max_score == max_guess then\n\t\
    \t\t\ttable.insert(answers, 0)\n\t\t\telse\n\t\t\t\ttable.insert(answers, max_score)\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn answers\nend", "  -- Your code here\n  return\
    \ 0\nend", "  local gamelen = #game\n  local guesslen = #guess", "    local diff\
    \ = 0\n    for _, score in ipairs(game) do\n        diff = diff + (abs(score -\
    \ guess[#guess]) or 0)\n    end\n    return diff\nend", "    local correct, wrong\
    \ = true, false\n    local maxScore = game[#game]\n    local scores = {maxScore}\n\
    \    local guesses = {guess}\n    while #scores > #guesses and #scores > 0 do\n\
    \        local guess = guesses[1]\n        for i = 2, #guesses do\n          \
    \  if guess > scores[i] then\n                scores = scores[1:i]\n         \
    \       guesses = guesses[i:1]\n                break\n            end\n     \
    \   end\n    end\n    for i = 1, #scores do\n        local difference = math.abs(guess\
    \ - scores[i])\n        if difference > scores[i] then\n            scores = scores[1:i]\n\
    \            correct = false\n        else\n            scores = scores:insert(difference)\n\
    \        end\n    end\n    if correct then\n        scores = scores:reverse()\n\
    \    end\n    return scores\nend", "  -- Initialize results and distance to 0\n\
    \  local results = {}\n  local distance = 0\n  -- Loop through each guess and\
    \ compare it to the score\n  for i=1, #guess do\n    local score = game[i]\n \
    \   -- Check if the guessed value matches any of the scores and if so\n    --\
    \  increment the distance\n    if guess[i] == score then\n      distance = distance\
    \ + 1\n      -- The score is correct, so set an appropriate index to\n      --\
    \  indicate that the guess is correct\n      results[i] = 1\n    else\n      --\
    \ The score is not correct, so check to see if the guessed value\n      --  is\
    \ greater than the score. If the guess is greater, the\n      --  distance is\
    \ incremented by one.\n      if guess[i] < score then\n        distance = distance\
    \ + 1\n      else\n        -- The guess is not greater than the score, so the\
    \ distance is\n        -- incremented by one but with a negative sign\n      \
    \  distance = distance - 1\n      end\n      -- Record the index of the correct\
    \ guess and set the appropriate index\n      --  to indicate that the guess is\
    \ incorrect\n      results[i] = -1\n    end\n  end\n  -- Return the results\n\
    \  return results\nend", "  assert(#guess == #game, \"Guesses and scores must\
    \ have equal length\")\n  local out = {}\n  local i = 1\n  for i = 1, #guess do\
    \ out[i] = 0\n  end \n  local correct = 0 \n  local i = 1\n  for i = 1, #guess\
    \ do \n    if game[i] == guess[i] then \n      correct = correct + 1 \n    else\n\
    \      local difference = abs(game[i] - guess[i])\n      out[i] = difference\n\
    \    end\n  end \n  if correct == #guess then \n    for i = 1, #guess do out[i]\
    \ = 0 \n    end \n  end \n  return out\nend", "    local correct = { }\n    for\
    \ i=1, #game do\n        if game[i] == guess[i] then\n            correct[i] =\
    \ 0\n        else\n            correct[i] = guess[i] - game[i]\n        end\n\
    \    end\n    return correct\nend\n</cell>\n<code language=conda-env-py35py>\n\
    print(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n\
    </cell>\n<text>\n\u0422\u0435\u043E\u0440\u0435\u043C\u0430", "    local diff\
    \ = {}\n    \n    for i=1,#game,1 do\n        local score = game[i]\n        local\
    \ diff = score-guess[i]\n        \n        if diff < 0 then\n            diff\
    \ = -diff\n        end\n        \n        table.insert(diff, score)\n    end\n\
    \    \n    return diff\nend", "    local newGuess = {}\n    local newScore = {}\n\
    \    for i = 1, #guess do\n        local diff = guess[i] - game[i]\n        if\
    \ diff ~= 0 then\n            newGuess[i] = diff\n            newScore[i] = diff\n\
    \        end\n    end\n    if #newGuess == #guess then\n        return newScore\n\
    \    else\n        return newGuess\n    end\nend", "   local gameLen = #game\n\
    \   local guessLen = #guess\n   local result = {0}\n   for i = 1, guessLen do\n\
    \      local diff = math.abs(guess[gameLen - i] - game[gameLen - i])\n      assert(diff\
    \ >= 0, 'The two arrays have an inconsistent number of elements')\n      if diff\
    \ > result[1] then result[1] = diff end\n   end\n   return result\nend", "  local\
    \ best = {}\n  local bestdiff = {}\n  for _, g in ipairs(game) do\n    -- The\
    \ variable \"best\" holds the highest score encountered, and the\n    -- variable\
    \ \"bestdiff\" holds the best difference between the score\n    -- before and\
    \ the score after.\n    local bestscore = best[1] or 0\n    local bestdiffscore\
    \ = bestdiff[1] or 0\n    if g > bestscore then\n      best[1] = g\n      bestdiff[1]\
    \ = bestdiffscore\n    elseif g == bestscore then\n      bestdiff[1] = bestdiffscore\
    \ + g - bestscore\n    else\n      bestdiff = g - bestscore\n    end\n  end\n\
    \  for _, g in ipairs(guess) do\n    local bestscore = best[1] or 0\n    local\
    \ bestdiffscore = bestdiff[1] or 0\n    if g > bestscore then\n      best[1] =\
    \ g\n      bestdiff[1] = bestdiffscore\n    elseif g == bestscore then\n     \
    \ bestdiff[1] = bestdiffscore + g - bestscore\n    else\n      bestdiff = g -\
    \ bestscore\n    end\n  end\n  return bestdiff\nend", "    local i = 0\n    local\
    \ j = 0\n    local correct = 0\n    while i < #game do\n        local value =\
    \ game[i]\n        local delta = guess[j] - value\n        if delta > 0 then\n\
    \            j = j + 1\n        elseif delta < 0 then\n            i = i + 1\n\
    \        else\n            correct = correct + 1\n            j = j + 1\n    \
    \    end\n    end", "\tlocal results = {}\n\tlocal gameLen = #game\n\tlocal guessLen\
    \ = #guess\n\t\n\tfor i = 1, guessLen do\n\t\tlocal score = game[i]\n\t\tlocal\
    \ guessVal = guess[i]\n\t\t\n\t\tresults[i] = score-guessVal\n\tend\n\t\n\tfor\
    \ i = 1, gameLen do\n\t\tlocal score = game[i]\n\t\t\n\t\tif results[i] == 0 then\n\
    \t\t\tresults[i] = guessLen\n\t\telse\n\t\t\tresults[i] = abs(results[i]-guessLen)\n\
    \t\tend\n\tend\n\t\n\treturn results\nend", "  local winner = {}\n  local numguesses\
    \ = #guess\n  local correct = {} -- to keep track of correct guesses\n  local\
    \ gamesize = #game\n  for i=1, #guess do\n    table.insert(correct, 0)\n  end\n\
    \  for i=1, gamesize do\n    winner[i] = -1\n    for j=1, #guess do\n      --\
    \ find difference between score and guess and add it to the winner\n      -- if\
    \ the guess is correct\n      if game[i] == guess[j] then\n        table.insert(correct,\
    \ 0) -- not yet correct\n      else\n        table.insert(correct, game[i] - guess[j]\
    \ + 1)\n      end\n    end\n  end\n  return winner\nend", "\tlocal n = 0\n\tfor\
    \ i=1,#game do\n\t\tif game[i] > 0 then\n\t\t\tn = n + abs(game[i] - guess[i])\n\
    \t\tend\n\tend\n\treturn n\nend", "   local n = #game\n   local m = #guess\n \
    \  assert(n == m)\n   local scores = {}\n   for i = 1, n do\n      scores[i] =\
    \ 0\n   end\n   for i = 1, n do\n      if guess[i] == game[i] then\n         scores[i]\
    \ = 0\n      elseif guess[i] < game[i] then\n         scores[i] = abs(guess[i]\
    \ - game[i])\n      else\n         scores[i] = abs(game[i] - guess[i])\n     \
    \ end\n   end\n   return scores\nend", "  local score1 = game[1]\n  local score2\
    \ = game[2]\n  local guesses1 = #game[1]\n  local guesses2 = #game[2]\n  local\
    \ results = {}\n  local i1, i2 = 1, #score1\n  local j1, j2 = 1, #score2\n  while\
    \ i1 <= guesses1 and j1 <= guesses2 do\n    if guess[i1] ~= score1[j1] then\n\
    \      i2 = i2 + 1\n      results[i2] = j2 - j1\n    end\n    if guess[i2] ~=\
    \ score2[j2] then\n      j2 = j2 + 1\n      results[j2] = i2 - i1\n    end\n \
    \   i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  for i=1, #guess do\n    if guess[i]\
    \ ~= score[i] then\n      results[i] = abs(guess[i] - score[i])\n    end\n  end\n\
    \  return results\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThis solution\
    \ only works for the first two arrays. If you have more than two arrays you can\
    \ do it with a function or macro.\n<code>", "\tgame = game:clone() -- We are cloning\
    \ because our score array is going to be mutated and we will return a new array\n\
    \tguess = guess:clone() -- We are cloning because our guesses are going to be\
    \ mutated and we will return a new array\n\tlocal offset = 0 -- This is our offset\
    \ where we are going to start comparing each array\n\tlocal score = 0 -- This\
    \ is our score where we are going to start comparing each array\n\tlocal result\
    \ = 0 -- This is our result array where we are going to keep track of the matching\
    \ games\n\tlocal match = 0 -- This is our match counter where we are going to\
    \ keep track of the number of games correctly matched\n\tlocal correct = 0 --\
    \ This is our count of how many games were correctly matched\n\tlocal diff = 0\
    \ -- This is our count of how many games were off by less than one\n\tlocal temp1\
    \ -- This is the new temp variable where we are going to count how many games\
    \ were off by less than one\n\tlocal temp2 -- This is the new temp variable where\
    \ we are going to count how many games were off by more than one\n\tfor i = 1,\
    \ #game do -- We will compare the length of each array to the length of our game\n\
    \t\tif guess[i] == game[i] then -- If the guess matches the game\n\t\t\toffset\
    \ = offset + 1 -- We want to increment our offset by one each time\n\t\t\tscore\
    \ = score + 1 -- We want to increment our score by one each time\n\t\telse\n\t\
    \t\tif guess[i] < game[i] then -- If the guess is less than the game\n\t\t\t\t\
    offset = offset + 1 -- We want to increment our offset by one each time\n\t\t\t\
    \tscore = score - 1 -- We want to increment our score by one each time\n\t\t\t\
    \tif offset == #guess then -- If our offset is equal to the length of our guesses\n\
    \t\t\t\t\tdiff = abs(guess[i] - game[i]) -- Calculate our difference and save\
    \ it to our temp variables\n\t\t\t\t\tresult = result + 1 -- We want to increment\
    \ our result array by one each time\n\t\t\t\t\tcorrect = correct + 1 -- We want\
    \ to increment our correct game count by one each time\n\t\t\t\t\tmatch = match\
    \ + 1 -- We want to increment our match counter by one each time\n\t\t\t\t\ttemp1\
    \ = temp1 + diff -- We want to add our difference to the temp variable where we\
    \ keep track of our games that are off by more than one\n\t\t\t\t\ttemp2 = temp2\
    \ + diff -- We want to add our difference to the temp variable where we keep track\
    \ of our games that are off by less than one\n\t\t\t\tend\n\t\t\telse -- If guess\
    \ is greater than the game\n\t\t\t\toffset = offset + 1 -- We want to increment\
    \ our offset by one each time\n\t\t\t\tscore = score + 1 -- We want to increment\
    \ our score by one each time\n\t\t\t\tif offset == #guess then -- If our ", " \
    \   local results = {}\n    for i, v in pairs(game) do\n        local delta =\
    \ math.abs(v - guess[i])\n        local err = 0\n        if v == guess[i] then\n\
    \            err = delta\n        else\n            err = math.abs(v - guess[i])\n\
    \        end\n        results[i] = err\n    end\n    return results\nend", " \
    \   local scores = {} -- Store all scores here and calculate diferences later\n\
    \    local guesses = {} -- Store all guesses here and calculate diferences later\n\
    \    for i, v in ipairs(game) do scores[i] = v end\n    for i, v in ipairs(guess)\
    \ do guesses[i] = v end", "  local function score(game, guess)\n    local score\
    \ = 0\n    for _, value in ipairs(game) do\n      if value == guess then score\
    \ = score + 1 else score = score end -- If game is right (correct guess), increment\
    \ score. Otherwise, score is 0\n    end\n    return score\n  end\n  -- Your code\
    \ goes here!\nend", "    local correct,g=0,0\n    for i = 1, #game do\n      \
    \  if game[i] == guess[i] then\n            correct = correct + 1\n        else\n\
    \            g = g + 1\n        end\n    end\n    return correct,g\nend", "  --\
    \ base case\n  if #game == 0 then\n    return guess\n  end \n  -- recursively\
    \ compare each element of game[] with each element of guess[] and find \n  --\
    \ which one is closest and return the difference. \n  -- if the two elements are\
    \ the same then return 0.\n  return game[#game+1] - guess[#guess+1] + compare(game[#game],\
    \ guess[#guess])\nend", "    local scores = [game]\n    for _, g in pairs(guess)\
    \ do\n        table.insert(scores, math.abs(g - game))\n    end\n    return scores\n\
    end", "    local correct = {}\n    for i=1,#guess do\n        local score = game[i]\n\
    \        local guess = guess[i]\n        correct[i] = abs(score - guess)\n   \
    \ end\n    return correct\nend", "    assert(#game == #guess)\n    local max =\
    \ 0\n    for i=1,#game do\n        if game[i] ~= guess[i] then\n            max\
    \ = max + abs(game[i] - guess[i])\n        end\n    end\n    return max\nend",
  "    local i = 0\n    local j = 0\n    local ret = []\n    while i < #game and j\
    \ < #guess do\n        if game[i]~=0 and guess[j]==game[i] then\n            if\
    \ game[i]>0 then\n                ret[j] = game[i]\n                j = j + 1\n\
    \            else\n                ret[i] = abs(game[i]-guess[j])\n          \
    \      i = i + 1\n            end\n        else\n            if game[i]==guess[j]\
    \ then\n                ret[j] = 0\n                j = j + 1\n            end\n\
    \        end\n    end\n    return ret\nend", "  -- Return the correct index and\
    \ subtract the score at the correct index from the guess for that index\n  local\
    \ i = -1\n  local index = 0\n  local difference = 0\n  -- Loop through each game\
    \ entry\n  for i = 0, #game do\n    -- If they guessed at the correct index, then\
    \ subtract the score from that index\n    if guess == game[i] then\n      difference\
    \ = difference - game[i]\n      index = i\n      break\n    end\n  end\n  if index\
    \ >= 0 then\n    -- Return an array\n    local newArray = {}\n    for i = 0, #guess\
    \ do\n      newArray[i] = difference + (index == i or 0)\n    end\n    return\
    \ newArray\n  else\n    -- Return an empty array\n    return {}\n  end\nend",
  "\tlocal diff = 0\n\tlocal guesses = #guess\n\tfor i = 1, guesses do\n\t\tif game[i]\
    \ == guess[i] then\n\t\t\tdiff = diff + 0\n\t\telse\n\t\t\tdiff = diff + math.abs(game[i]\
    \ - guess[i])\n\t\tend\n\tend\n\treturn diff\nend", "  local i = 0\n  local j\
    \ = 0\n  local correct = 0\n  local error = 0\n  local result = 0\n  while i <\
    \ #game do\n    -- if game[i] ~= guess[i] then\n    -- error += game[i] - guess[i]\n\
    \    -- else\n    -- correct += 1\n    -- end if\n    local difference = game[i]\
    \ - guess[i]\n    if difference < 0 then\n      error += difference\n    else\n\
    \      error += difference * difference\n    end\n    error = math.abs(error)\n\
    \    if error > result then\n      result = error\n    end\n    if game[i] ==\
    \ guess[i] then\n      correct += 1\n    end\n    i = i + 1\n  end\n  return result\n\
    end", "    -- Write your code here\n    \n    return game\nend", "    if not game\
    \ then return 0 end\n    local gamelen = #game\n    if not guess then return gamelen\
    \ end\n    local guesslen = #guess\n    local diff = 0\n    for i = 1, guesslen\
    \ do\n        diff = diff + abs(guess[i]-game[i])\n    end\n    return diff\n\
    end", "  -- Your code here\n  local result = {}\n  for i=1,#game,1 do\n    for\
    \ j=1,#guess,1 do\n      if game[i]==guess[j] then\n        result[i] = result[i]\
    \ or 0\n        result[i] = result[i]+1\n      else\n        result[i] = result[i]\
    \ or abs(guess[j] - game[i])\n      end\n    end\n  end\n  return result\nend",
  "  -- your code here\n  local result = 0\n  local count = 0\n  local i = 0\n  local\
    \ n = #game\n  local m = #guess\n  for j = 1, n do\n    if game[j] == guess[i]\
    \ then\n      count = count + 1\n    else\n      result = result + (abs(game[j]\
    \ - guess[i]))\n    end\n    i = i + 1\n  end\n  if count == m then\n    result\
    \ = 0\n  end\n  return result\nend", "  local score = {}\n  for i = 1,#game do\n\
    \    if game[i] == guess[i] then\n      table.insert(score, math.abs(game[i] -\
    \ guess[i]))\n    end\n  end\n  return score\nend", "    local score = 0\n   \
    \ for i = 1, #game, 1 do\n        score = score + (game[i] - guess[i])^2\n   \
    \ end\n    local distance = {}\n    for i = 1, #game, 1 do\n        distance[i]\
    \ = guess[i] - game[i]\n    end\n    distance[1] = distance[2]\n    if distance[1]\
    \ ~= 0 then\n        distance[1] = -1 * distance[1]\n    end\n    return distance\n\
    end", "    local result = {}\n    for i = 1, #game do\n        local score = game[i]\n\
    \        if guess[i] ~= score then\n            -- This is to compensate for the\
    \ fact that in lua arrays are 0-indexed.\n            -- When a player guesses\
    \ correctly their first guess, the value at index 0 will be\n            -- the\
    \ score they guessed. So if we don't match the first value in the two arrays\n\
    \            -- the difference will be incorrect. \n            result[i] = abs(guess[i]\
    \ - score)\n        else\n            result[i] = 0\n        end\n    end\n  \
    \  return result\nend", "    local scores = {}\n    local diffs = {}\n    for\
    \ _, gt in ipairs(game) do\n        local score = game[gt]\n        if score then\n\
    \            scores[gt] = score\n        end\n    end\n    for _, gt in ipairs(guess)\
    \ do\n        local score = abs(gt - scores[gt])\n        if score then\n    \
    \        diffs[gt] = score\n        end\n    end\n    return diffs\nend", "  \
    \ if #guess ~= #game then\n      error('Guess vector has incorrect length')\n\
    \   end\n   local distances = {} -- A dictionary of distance of guess to each\
    \ element\n   for idx = 1, #game do\n      distances[game[idx]] = nil\n   end\n\
    \   local i = 0\n   for idx = 1, #guess do\n      local distance\n      -- First\
    \ pass, we calculate the distance\n      if distances[guess[idx]] ~= nil then\n\
    \         distance = distances[guess[idx]]\n      else\n         distance = 0\n\
    \      end\n      -- Second pass, we update the dictionary\n      if game[idx]\
    \ ~= nil then\n         distances[game[idx]] = distance + 1\n      end\n   end\n\
    \   local final = {} -- An array of the final answers\n   for idx = 1, #game do\n\
    \      final[idx] = nil\n   end\n   for idx = 1, #guess do\n      local distance\n\
    \      if distances[guess[idx]] ~= nil then\n         distance = distances[guess[idx]]\n\
    \      else\n         distance = 0\n      end\n      final[idx] = distance\n \
    \  end\n   return final\nend", "\tlocal a=0\n\tlocal b=0\n\tlocal c=0\n\tlocal\
    \ d=0\n\tlocal e=0\n\tlocal f=0\n\tlocal g=0\n\tlocal h=0\n\tlocal i=0\n\tlocal\
    \ j=0\n\tlocal k=0\n\tlocal l=0\n\tlocal m=0\n\tlocal n=0\n\tlocal o=0\n\tlocal\
    \ p=0\n\tlocal q=0\n\tlocal r=0\n\tlocal s=0\n\tlocal t=0\n\tlocal u=0\n\tlocal\
    \ v=0\n\tlocal w=0\n\tlocal x=0\n\tlocal y=0\n\tlocal z=0\n\tlocal t=0\n\tlocal\
    \ i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal l=0\n\tlocal m=0\n\tlocal n=0\n\tlocal\
    \ o=0\n\tlocal p=0\n\tlocal q=0\n\tlocal r=0\n\tlocal s=0\n\tlocal t=0\n\tlocal\
    \ u=0\n\tlocal v=0\n\tlocal w=0\n\tlocal x=0\n\tlocal y=0\n\tlocal z=0\n\tlocal\
    \ t=0\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal l=0\n\tlocal m=0\n\tlocal\
    \ n=0\n\tlocal o=0\n\tlocal p=0\n\tlocal q=0\n\tlocal r=0\n\tlocal s=0\n\tlocal\
    \ t=0\n\tlocal u=0\n\tlocal v=0\n\tlocal w=0\n\tlocal x=0\n\tlocal y=0\n\tlocal\
    \ z=0\n\tlocal t=0\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal l=0\n\tlocal\
    \ m=0\n\tlocal n=0\n\tlocal o=0\n\tlocal p=0\n\tlocal q=0\n\tlocal r=0\n\tlocal\
    \ s=0\n\tlocal t=0\n\tlocal u=0\n\tlocal v=0\n\tlocal w=0\n\tlocal x=0\n\tlocal\
    \ y=0\n\tlocal z=0\n\tlocal t=0\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal\
    \ l=0\n\tlocal m=0\n\tlocal n=0\n\tlocal o=0\n\tlocal p=0\n\tlocal q=0\n\tlocal\
    \ r=0\n\tlocal s=0\n\tlocal t=0\n\tlocal u=0\n\tlocal v=0\n\tlocal w=0\n\tlocal\
    \ x=0\n\tlocal y=0\n\tlocal z=0\n\tlocal t=0\n\tlocal ", "  -- The result array\
    \ for the whole game\n  local gameResult = {}\n  -- The number of elements in\
    \ the game\n  local gameLen = #game\n  -- The maximum difference of any guess\
    \ from the game\n  local maxDiff = 0\n  -- The current guess\n  local guess =\
    \ guess[#guess]\n  -- The current diff\n  local diff = 0\n  -- The current game\
    \ index\n  local i = 0\n  -- Iterate through every game element\n  for i = 1,\
    \ gameLen do\n    -- The current diff\n    diff = game[i] - guess\n    -- The\
    \ difference of the current guess and game\n    if diff > maxDiff then\n     \
    \ maxDiff = diff\n      -- The current game index\n      i = 1\n      -- Iterate\
    \ through every guess in the game\n      for j = 1, #guess do\n        -- The\
    \ current guess diff\n        diff = guess - game[j]\n        -- If the guess\
    \ diff is bigger than the difference of the game and current guess,\n        --\
    \ then we have found the correct guess\n        if diff > maxDiff then\n     \
    \     -- The current guess index\n          j = 1\n          -- Add the current\
    \ guess to the result array\n          gameResult[#gameResult + 1] = diff\n  \
    \      else\n          -- Else keep guessing\n        end\n      end\n      --\
    \ Update the maxDiff if we have found the correct guess\n    end\n  end\n  --\
    \ Return the result array\n  return gameResult\nend", "  local differences = {}\n\
    \  local i, j, k = 1, #game, 1\n  repeat\n    differences[k] = (guess[k] - game[i])\
    \ / abs(guess[k])\n    i = i + 1\n    j = j + 1\n    k = k + 1\n    if i >= #guess\
    \ then\n      break\n    end\n  until j >= #game\n  return differences\nend",
  "    local difference = { }\n    for i = 1, #guess do\n        local guessedValue\
    \ = game[i]\n        local value = guess[i]\n        difference[i] = math.abs(guessedValue\
    \ - value)\n    end\n    return difference\nend", "    local results = {}\n  \
    \  local gameScores = { }\n    local guessScores = { }", "\tlocal results = {}\n\
    \tlocal score = game[1]\n\tlocal guess = table.copy(guess)", "  local correct_guesses\
    \ = #game\n  local best_guesses = #guess", "  local scores = {}\n  for i=1,#game\
    \ do\n    scores[i] = game[i]\n  end\n  local differences = {}\n  for i=1,#guess\
    \ do\n    local difference = abs(game[i] - guess[i])\n    table.insert(differences,\
    \ difference)\n  end\n  return differences\nend", "    if game:len() != guess:len()\
    \ then\n        return nil, false\n    end\n    local distances = {}\n    for\
    \ i = 1, game:len() do\n        distances[i] = math.abs(game[i]-guess[i])\n  \
    \  end\n    return distances, true\nend", "    local diffs = {}\n    for i=1,#game\
    \ do\n        diffs[#diffs+1] = abs(game[i] - guess[i])\n    end\n    return diffs\n\
    end", "   local total = 0\n   for i = 1, #guess do\n      total = total + (abs(guess[i]\
    \ - game[i]) or 0)\n   end\n   return total\nend", "  local diffs = {}\n  local\
    \ result = {}\n  local max = 0\n  local min = 0\n  local gameLength = #game\n\
    \  for i, v in ipairs(guess) do\n    max = math.max(gameLength, max)\n    min\
    \ = math.min(gameLength, min)\n    diffs[i] = abs(game[i] - v)\n    if v < game[i]\
    \ then\n      local subResult = compare(game[(i+1):], guess[i+1:])\n      local\
    \ subDiffs = subResult[1]\n      for j, v2 in ipairs(subResult[2]) do\n      \
    \  local subDiff = subDiffs[j]\n        if subDiff > max then\n          max =\
    \ subDiff\n        end\n        if subDiff < min then\n          min = subDiff\n\
    \        end\n      end\n    end\n  end\n  if max > 0 then\n    result[1] = (max\
    \ / gameLength) * 100\n  end\n  if min > 0 then\n    result[2] = (min / gameLength)\
    \ * 100\n  end\n  return result\nend", "  local correct = 0\n  local max = 0\n\
    \  local index = 0\n  local score = 0\n  for i=1,#game do\n    if game[i] == guess[i]\
    \ then\n      index = i\n      score = score+game[i]\n    elseif game[i] > guess[i]\
    \ then\n      index = i\n      score = score+abs(game[i]-guess[i])\n      correct\
    \ = correct+1\n    end\n    max = max+1\n  end\n  -- return [-1,0,0,0,max]\n \
    \ return [-1,0,0,0,score]\nend", "  local guesses = {}\n  for i = 1, #guess do\n\
    \    table.insert(guesses, guess[i][1])\n  end\n  local scores = {}\n  for i =\
    \ 1, #game do\n    table.insert(scores, game[i][1])\n  end\n  local diffs = {}\n\
    \  for i = 1, #guesses do\n    table.insert(diffs, guesses[i] - scores[i])\n \
    \ end\n  return diffs\nend", "   local results = {}\n   local gameLen = #game\n\
    \   local guessLen = #guess\n   if gameLen == 0 or guessLen == 0 then\n      return\
    \ results\n   end\n   if guessLen < gameLen then -- the guess is shorter\n   \
    \   for i=1,guessLen-1 do -- the guess is shorter\n         results[i] = 0\n \
    \     end\n      -- go through and fill in guesses\n      local i = 1\n      while\
    \ i < gameLen do\n         results[i] = game[i] - guess[i]\n         i = i + 1\n\
    \      end\n      return results\n   end\n   -- if the guess is longer, we must\
    \ have missed a few games\n   for i=1,gameLen-1 do -- the guess is longer\n  \
    \    results[i] = 0\n   end\n   local i = 1\n   while i < guessLen do -- the guess\
    \ is longer\n      results[i] = game[i] - guess[i]\n      i = i + 1\n   end\n\
    \   return results\nend", "    local offset = 0\n    local miss = 0\n    for i\
    \ = 1, #guess do\n        if game[i] ~= guess[i] then\n            offset = offset\
    \ + 1\n            miss = miss + 1\n        else\n            miss = miss + 1\n\
    \        end\n    end\n    if miss > 0 then\n        offset = offset + 1\n   \
    \ end\n    offset = offset * (-1 / miss)\n    return offset\nend", "   local diff\
    \ = {}\n   for i=1,#game do\n      if game[i] == guess[i] then \n         diff[i]\
    \ = 0\n      else\n         diff[i] = abs(game[i] - guess[i])\n      end\n   end\n\
    \   return diff\nend", "   local scores = {}\n   for i, v in ipairs(game) do\n\
    \      scores[i] = v\n   end\n   local diffs = {}\n   for i, v in ipairs(guess)\
    \ do\n      diffs[i] = v\n   end\n   local numGuesses = #game\n   local numScores\
    \  = #scores\n   for i = 1, #guess do\n      local maxScore = scores[i]\n    \
    \  for j = 1, #scores do\n         local curScore = scores[j]\n         if j ==\
    \ i then\n            diffs[j] = 0\n         else\n            local diff = ((game[i]\
    \ - curScore) * (numGuesses - j))\n            diffs[j] = diff\n         end\n\
    \         if diff > 0 then\n            diffs[j] = diff\n         else\n     \
    \       diffs[j] = 0\n         end\n         local maxScoreChanged = diffs[j]\n\
    \         if maxScoreChanged == 0 then\n            return scores\n         end\n\
    \         local minScore = scores[j]\n         if maxScoreChanged > 0 then\n \
    \           scores[j] = maxScoreChanged + minScore\n         else\n          \
    \  scores[j] = maxScoreChanged + numScores - i\n         end\n         local bestScore\
    \ = scores[j]\n         if bestScore > maxScore then\n            bestScore =\
    \ maxScore\n         end\n         for k = i + 1, #guess do\n            local\
    \ curDiff = ((scores[i] - scores[j]) * (numGuesses - k))\n            if curDiff\
    \ > 0 then\n               scores[k] = curDiff + bestScore\n            else\n\
    \               scores[k] = curDiff + numScores - k - 1\n            end\n   \
    \      end\n         if bestScore > scores[i] then\n            scores[i] = bestScore\n\
    \         end\n         local maxScoreChanged = diffs[j]\n         if maxScoreChanged\
    \ == 0 then\n            return scores\n         end\n         local minScore\
    \ = scores[j]\n         if maxScoreChanged > 0 then\n            scores[j] = maxScoreChanged\
    \ + minScore\n         else\n            scores[j] = maxScoreChanged + numScores\
    \ - i\n         end\n         local bestScore = scores[j]\n         if bestScore\
    \ > maxScore then\n            bestScore = maxScore\n         end\n         for\
    \ k = i + 1, #guess do\n            local curDiff = ((scores[i] - scores[j]) *\
    \ (numGuesses - k))\n            if curDiff > 0 then\n               scores[k]\
    \ = curDiff + bestScore\n            else\n               scores[k] = curDiff\
    \ + numScores - k - 1\n            end\n         end\n         if best", "  --\
    \ Base case: empty game\n  local function empty()\n    local ans = {}\n    for\
    \ i=1,#game do ans[i] = game[i]; end\n    return ans\n  end", "    local results\
    \ = {}\n    local correct = false\n    for i = 1, #game do\n        if game[i]\
    \ == guess[i] then\n            results[i] = 0\n        elseif game[i] > guess[i]\
    \ then\n            results[i] = game[i] - guess[i]\n        elseif game[i] <\
    \ guess[i] then\n            results[i] = guess[i] - game[i]\n        end\n  \
    \      if results[i] ~= 0 then\n            correct = true\n        end\n    end\n\
    \    if correct then\n        return results\n    else\n        local score =\
    \ 0\n        for i = 1, #guess do\n            score = score + math.abs(guess[i]-game[i])\n\
    \        end\n        return {score, score}\n    end\nend", "   assert( table.getn(game)\
    \ == table.getn(guess) )\n   local scores = {}\n   for i=1, table.getn(game) do\n\
    \      scores[i] = 0\n   end\n   for i=1, table.getn(game) do\n      for j=1,\
    \ table.getn(guess) do\n         if game[i] == guess[j] then\n            scores[i]\
    \ = scores[i] + 1\n         end\n      end\n   end\n   return scores\nend\n</cell>\n\
    <code language=julia-1.0>\n# Now write a function that guesses the result of a\
    \ number of matches given two input arrays and a score\n# of your choice.", " \
    \   local max_score = game.maxScore\n    local min_score = game.minScore\n   \
    \ local min_score = min_score or 0\n    local max_score = max_score or 0\n   \
    \ local minScore = game.minScore\n    local maxScore = game.maxScore\n    local\
    \ sum = 0\n    local i = 0\n    local best = 0\n    local score = 0\n    for j\
    \ = 1, #guess do\n        score = score + math.abs(guess[j] - game[i])\n     \
    \   sum = sum + guess[j]\n        if guess[j] then\n            if best = 0 then\n\
    \                best = guess[j]\n            elseif best > guess[j] then\n  \
    \              best = guess[j]\n            elseif best == guess[j] then\n   \
    \             best = guess[j]\n            end\n        end\n        i = i + 1\n\
    \    end\n    local bestScore = score - math.abs(sum - best)\n    local bestDiff\
    \ = best - score\n    local bestDiff2 = best - bestScore\n    local bestDiff3\
    \ = best - bestScore + 1\n    local bestDiff4 = best - bestScore + 2\n    local\
    \ bestDiff5 = best - bestScore + 3\n    local bestDiff6 = best - bestScore + 4",
  "    local guesses = {}\n    for i = 1, #guess do\n        local offset = i - 1\n\
    \        if offset > #game then\n            offset = offset - #game\n       \
    \ end\n        guesses[offset] = abs(game[offset] - guess[offset])\n    end\n\
    \    return guesses\nend", "    local num_game = #game\n    local num_guess =\
    \ #guess\n    local num_correct = 0\n    local results = {}\n    for i = 1, num_game\
    \ do\n        if game[i] == guess[i] then\n            results[i] = 0\n      \
    \  else\n            if game[i] == guess[i] then\n                results[i] =\
    \ 0\n            else\n                results[i] = abs(game[i] - guess[i])\n\
    \            end\n        end\n        if results[i] == 0 then\n            num_correct\
    \ = num_correct + 1\n        end\n    end\n    for i = 1, num_guess do\n     \
    \   if guess[i] == results[i] then\n            num_correct = num_correct + 1\n\
    \        end\n    end\n    return results\nend", "\tgame = game:clone() -- We\
    \ want a deep copy\n\tguess = guess:clone() -- We want a deep copy\n\tlocal results\
    \ = {} -- We will store the results in this array.\n\tlocal maxlen = 0 -- The\
    \ length of our array will be the maximum between the game's length and guesses\
    \ length.\n\tlocal maxlen1 = 0 -- the length of our array will be the maximum\
    \ between the game's length and guesses length.\n\tfor i=1, #game do\n\t\tif game[i]\
    \ ~= 0 then\n\t\t\tresults[i] = 0;\n\t\t\tif maxlen < game[i] then\n\t\t\t\tmaxlen\
    \ = game[i];\n\t\t\tend\n\t\t\tif maxlen1 < game[i] then\n\t\t\t\tmaxlen1 = game[i];\n\
    \t\t\tend\n\t\tend\n\tend\n\tfor i=1, #guess do\n\t\tif guess[i] ~= 0 then\n\t\
    \t\tresults[i] = 0;\n\t\t\tif maxlen < guess[i] then\n\t\t\t\tmaxlen = guess[i];\n\
    \t\t\tend\n\t\t\tif maxlen1 < guess[i] then\n\t\t\t\tmaxlen1 = guess[i];\n\t\t\
    \tend\n\t\tend\n\tend\n\tfor i=1, #guess do\n\t\tif game[i] ~= 0 then\n\t\t\t\
    results[i] = game[i] - guess[i];\n\t\t\tif game[i] ~= guess[i] then\n\t\t\t\t\
    results[i] = abs(game[i] - guess[i]);\n\t\t\tend\n\t\tend\n\tend\n\treturn results\n\
    end", "\tlocal scores = {} -- array that stores correct score\n\tlocal error =\
    \ {} -- array that stores how far off each guess was\n\tlocal correct = true --\
    \ boolean value that signifies if all guesses were correct\n\t\n\t-- we go through\
    \ every index in guess array\n\tfor i = 1, #guess do\n\t\t-- we go through every\
    \ index in game array\n\t\tfor j = 1, #game do\n\t\t\t-- we compare current index\
    \ in guess array and current index in game array\n\t\t\tif game[j] == guess[i]\
    \ then\n\t\t\t\t-- we check if the current index is correct or not\n\t\t\t\tif\
    \ not scores[j] then error[j] = 0; scores[j] = 1; correct = true end\n\t\t\telse\n\
    \t\t\t\t-- we check if current index is correct\n\t\t\t\tif scores[j] then\n\t\
    \t\t\t\t-- we check if current index is in correct or wrong array \n\t\t\t\t\t\
    if not error[j] then error[j] = abs(guess[i] - game[j]); scores[j] = 0; correct\
    \ = false end\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn correct and\
    \ error\nend", "    local diff = 0\n    for i = 1, #guess do\n        if game[i]\
    \ ~= guess[i] then\n            diff = diff + 1\n        end\n    end\n    \n\
    \    if diff == 0 then\n        return [0]\n    else\n        diff = math.abs(diff\
    \ - 1)\n        return diff\n    end\nend", "  local sum = 0\n  for i=1,#game\
    \ do\n    if game[i]~=0 then\n      sum=sum+math.abs(game[i]-guess[i])\n    end\n\
    \  end\n  return sum\nend", "    local score = {}\n    local i = 0\n    for k,v\
    \ in pairs(game) do\n        score[k] = abs(v - guess[i])\n        i = i + 1\n\
    \    end\n    return score\nend", "   local i = 0\n   local score = 0\n   local\
    \ gameLength = #game\n   local guessLength = #guess\n   -- TODO: Refactor to handle\
    \ different lengths\n   for i = 1,gameLength do\n      if game[i] == guess[i]\
    \ then\n         score = score + 1\n      else\n         score = score + (abs(guess[i]\
    \ - game[i]))\n      end\n   end\n   if guessLength > gameLength then\n      for\
    \ i = 1,guessLength do\n         if game[i] == guess[i] then\n            score\
    \ = score + 1\n         else\n            score = score + (abs(guess[i] - game[i]))\n\
    \         end\n      end\n   end\n   return score\nend", "  if game and guess\
    \ and #game ~= #guess then return nil, \"Invalid array\" end\n  local scores =\
    \ {} -- A table of scores per possible match (indexed by guess)\n  local diffs\
    \ = {} -- A table of differences per (indexed by guess)", "  -- your code here\n\
    \  local correct = 0\n  for i = 1, #game do\n    if game[i] == guess[i] then \n\
    \      correct = correct + 1\n    end\n  end\n  if correct == #guess then \n \
    \   return 0\n  else\n    return correct - abs(game[correct] - guess[correct])\n\
    \  end\nend", "    local diff = {}\n    for i = 1, #game do\n        -- if guess[i]\
    \ < game[i] then diff[i] = guess[i] - game[i] else diff[i] = game[i] - guess[i]\
    \ end\n        if guess[i] < game[i] then\n            diff[i] = guess[i] - game[i]\n\
    \        else\n            diff[i] = game[i] - guess[i]\n        end\n    end\n\
    \    return diff\nend", "  local out = {}\n  local gameLen = #game\n  local guesses\
    \ = #guess", "    assert(#game == #guess, \"Game and Guess arrays are different\
    \ lengths\")\n    local matches = {}\n    for i = 1,#game do\n        matches[i]\
    \ = game[i] - guess[i]\n    end\n    return matches\nend", "  local result={}\n\
    \  local gameLength = #game\n  local guessLength = #guess\n  local scoreLength\
    \ = 0\n  local score = {}\n  local i = 1\n  local j = 1", "    local results =\
    \ {}\n    local index = 1\n    local guesses = {}\n    for i = 1, #game do\n \
    \       if game[i] > 0 and guess[i] >= 0 and game[i] ~= guess[i] then\n      \
    \      results[index] = game[i] - guess[i]\n            guesses[index] = guess[i]\n\
    \        elseif game[i] == 0 and guess[i] == 0 and guesses[i - 1] >= 0 then\n\
    \            results[index] = 0\n            guesses[index] = guesses[i - 1]\n\
    \        elseif game[i] == 0 and guess[i] == 0 and guesses[i - 1] > 0 then\n \
    \           results[index] = abs(guesses[i - 1] - guesses[i - 2])\n          \
    \  guesses[index] = guesses[i - 2]\n        else\n            results[index] =\
    \ abs(game[i] - guess[i])\n            guesses[index] = guess[i]\n        end\n\
    \        index = index + 1\n    end\n    return results\nend", "  local wins =\
    \ game:map(function(x)\n    return abs(x - guess)\n  end)\n  local loss = game:map(function(x)\n\
    \    return -abs(x - guess)\n  end)\n  return wins + loss\nend", "\t--@DONTSPLIT@\n\
    \tlocal a = {} \n\tlocal b = {}\n\t\n\tlocal i = 1\n\t\n\tfor _, score in ipairs(game)\
    \ do\n\t\tb[i - 1] = score\n\tend", "  local score = 0\n  local diff = 0\n  for\
    \ i = 1, #game do\n    if game[i] == guess[i] then -- both elements match\n  \
    \    score = score + 1\n    elseif game[i] > guess[i] then -- first element >\
    \ second element\n      diff = game[i] - guess[i]\n    else -- second element\
    \ > first element\n      diff = abs(guess[i] - game[i])\n    end\n  end\n  return\
    \ diff\nend", "\tlocal results = {}\n\tfor i = 1, #game do\n\t\tlocal difference\
    \ = math.abs(guess[i] - game[i])\n\t\tif guess[i] == game[i] then\n\t\t\tresults[i]\
    \ = 0\n\t\telse\n\t\t\tresults[i] = difference\n\t\tend\n\tend\n\treturn results\n\
    end", "\t-- write your code here\n\tlocal scoreTable = {}\n\tfor i = 1, #game\
    \ do\n\t\tif game[i] ~= guess[i] then\n\t\t\ttable.insert(scoreTable, abs(game[i]\
    \ - guess[i]))\n\t\telse\n\t\t\ttable.insert(scoreTable, 0)\n\t\tend\n\tend\n\t\
    return scoreTable\nend", "  assert(#game == #guess)\n  local scores = {}\n  for\
    \ i = 1, #game do\n    scores[i] = game[i] - guess[i]\n  end\n  return scores\n\
    end", "  local results = {}\n  for i = 1, #game do\n    -- If the score is too\
    \ low for the guess, it can no longer be a match.\n    if game[i] > guess[i] then\n\
    \      -- The game is too low, no point to guess\n      results[i] = 0\n     \
    \ break\n    end\n    -- If the guessed score is too high for the score, it can\
    \ no longer be a match.\n    if guess[i] > game[i] then\n      -- The guess is\
    \ too high, no point to guess\n      results[i] = 0\n      break\n    end\n  \
    \  -- If the scores are equal, they have found the match and we can use the absolute\
    \ difference.\n    results[i] = math.abs(guess[i] - game[i])\n  end\n  return\
    \ results\nend", "  local distances = {}\n  for i = 1, #guess do\n    local difference\
    \ = abs(guess[i]-game[i])\n    if difference > distances[i] then\n      distances[i]\
    \ = difference\n    end\n  end\n  return distances\nend", "  local results = {}\n\
    \  for i = 1,#game,1 do \n    local score = game[i]\n    local guess = guess[i]\n\
    \    if guess == score then\n      results[i] = 0\n    else\n      results[i]\
    \ = abs(guess - score)\n    end\n  end\n  return results\nend", "\tlocal len\n\
    \tlocal diff\n\tlocal count = 0\n\tlocal result", '    local results = {}', " \
    \ local answers = {}\n  for i = 1,#guess do\n    table.insert(answers, guess[i]-game[i])\n\
    \  end\n  return answers\nend", "  local scores = [game[i]-guess[i] or 0 for i\
    \ in pairs(game)]\n  local differences = #scores - #guess\n  if differences ==\
    \ 0 then\n    return 0\n  elseif differences == 1 then\n    return scores[1]\n\
    \  else\n    return scores\n  end\nend", "    local i = 0\n    local results =\
    \ {}\n    local score\n    local correct\n    local imax = #game\n    for _, g\
    \ in pairs(guesses(guess)) do\n        score = game[i]\n        correct = nil\n\
    \        if score == g then\n            correct = true\n        else\n      \
    \      correct = math.abs(score-g)\n        end\n        results[i] = correct\n\
    \        i = i + 1\n    end\n    return results\nend", "\tlocal a\n\tlocal b\n\
    \tlocal diff\n\tlocal result\n\t\n\t-- TODO: Fill in code below\n\t\n\treturn\
    \ result\nend", "  local scores = {}\n  for i = 1,#guess do\n    scores[i] = guess[i]\n\
    \  end\n  local results = {}\n  for i = 1,#game do\n    local score = 0\n    for\
    \ j = 1,#guess do\n      if game[i] == guess[j] then\n        score = score +\
    \ 1\n      end\n    end\n    results[i] = score\n  end\n  return results\nend",
  "    local differences = {}\n    for i = 1, #game do\n        local diff = game[i]\
    \ - guess[i]\n        if diff ~= 0 then\n            differences[i] = diff\n \
    \       end\n    end\n    return differences\nend", "   local diff\n   for i=1,\
    \ #game do\n      diff = game[i] - guess[i]\n      if diff ~= 0 and game[i] ~=\
    \ guess[i] then\n         return diff\n      else\n         if diff ~= 0 and game[i]\
    \ == guess[i] then\n            return diff\n         end\n      end\n   end\n\
    end", "   -- first sort guesses in descending order\n   -- sort and reverse each\
    \ game in descending order\n   -- compare each game with each guess and return\
    \ the differences\n   local diff = {}\n   for _, game in ipairs(game) do\n   \
    \   for _, guess in ipairs(guess) do\n         local diff = game-guess\n     \
    \    if diff ~= 0 and diff > 0 then return diff end\n      end\n   end\n   return\
    \ diff\nend", "\tlocal diff = {}\n\tlocal maxDiff = 0\n\tlocal i\n\t\n\tfor i\
    \ = 1, #game do\n\t\tlocal diff = 0\n\t\tlocal gameScore = game[i]\n\t\tlocal\
    \ guessScore = guess[i]\n\t\tif guessScore ~= 0 then\n\t\t\tif gameScore > guessScore\
    \ then\n\t\t\t\tdiff = gameScore - guessScore\n\t\t\telse\n\t\t\t\tdiff = guessScore\
    \ - gameScore\n\t\t\tend\n\t\tend\n\t\tdiff[i] = diff\n\t\tif diff > maxDiff then\n\
    \t\t\tmaxDiff = diff\n\t\tend\n\tend\n\treturn diff\nend", "  local results =\
    \ {}\n  for idx = 1, #game do\n    local guess = guess[idx]\n    local score =\
    \ game[idx]\n    local error = -guess\n    local i = idx + 1\n    repeat \n  \
    \    i = i + 1\n      error = error + abs(guess - score)\n    until i > #game\n\
    \    results[i] = error\n  end\n  return results\nend", "  local max_score = table.remove(game,\
    \ #game)\n  local correct, total = 0, 0\n  for idx = 1, #guess do\n    local score\
    \ = guess[idx]\n    local guessed_score = game[idx]\n    local diff_score = abs(guessed_score\
    \ - score)\n    local diff = abs(guessed_score - max_score)\n    total = total\
    \ + 1\n    if diff_score > 0 then\n      correct = correct + 1\n    end\n    if\
    \ diff ~= 0 then\n      game[idx] = guessed_score + max_score\n    end\n  end\n\
    \  return table.remove(game, #game), correct, total\nend", "  local diff = nil\n\
    \  local score = game\n  for i=1,#guess do\n    if guess ~= nil and guess ~= score\
    \ then\n      diff = diff or abs(guess[i]-score[i])\n    end\n  end\n  return\
    \ diff\nend", "  if #game ~= #guess then\n    return nil\n  end\n  local differences\
    \ = {}\n  for i = 0, #guess do\n    local difference = guess-game[i]\n    differences[i]\
    \ = difference\n  end\n  return differences\nend", "    local score = 0\n    local\
    \ results = {}\n    local n = #game\n    local m = #guess\n    local i = 0\n \
    \   while i < n do\n        if game[i] == guess[i] then\n            score = score\
    \ + 1\n            i = i + 1\n        else\n            local difference = abs(game[i]\
    \ - guess[i])\n            results[i] = difference\n            score = score\n\
    \            i = i + 1\n        end\n    end\n    if score == 0 then\n       \
    \ results = results\n    else\n        for _, v in pairs(results) do\n       \
    \     results[#results + 1] = v\n        end\n    end\n    return results\nend",
  "  if #game == #guess then\n    local score = {}\n    for i = 1, #game do\n    \
    \  score[i] = abs(game[i] - guess[i])\n    end\n    return score\n  else\n   \
    \ print(\"not same length\")\n  end\nend", "    local num_guess = #guess\n   \
    \ local num_score = #game\n    local results = {}\n    for i = 1, num_guess do\n\
    \        local j = 1\n        local sum = 0\n        local num_comp = 0\n    \
    \    while j < num_score do\n            local score = game[j]\n            if\
    \ score > guess[i] then\n                sum = sum + score - guess[i]\n      \
    \          j = j + 1\n            else\n                if guess[i] == score then\n\
    \                    sum = sum + score\n                    num_comp = num_comp\
    \ + 1\n                    j = j + 1\n                else\n                 \
    \   sum = sum + abs(score - guess[i])\n                    j = j + 1\n       \
    \         end\n            end\n        end\n        results[i] = sum / num_comp\n\
    \    end\n    return results\nend", "  local gameSize = #game\n  local guessSize\
    \ = #guess\n  local gameResults = {}\n  local guessResults = {}\n  local i = 0\n\
    \  local j = 0\n  while i < gameSize do\n    if game[i] == guess[j] then\n   \
    \   i = i + 1\n      j = j + 1\n    else\n      if j >= guessSize then\n     \
    \   gameResults[i] = gameSize - i\n      else\n        gameResults[i] = guessResults[i\
    \ - guessSize + j]\n      end\n    end\n  end\n  return gameResults\nend", " \
    \ local score = 0\n  for i = 1, #game do\n    local score = score + game[i]\n\
    \  end\n  local numGuesses = #guess\n  local correct = 0\n  for i = 1, #guess\
    \ do\n    local scoreAtGuess = score\n    for j = 1, #game do\n      local scoreAtGame\
    \ = scoreAtGuess - game[j]\n      if scoreAtGuess == scoreAtGame then\n      \
    \  correct = correct + 1\n      end\n    end\n    local difference = guess[i]\
    \ - scoreAtGuess\n    if difference > 0 then\n      correct = correct + 1\n  \
    \  end\n  end\n  return { correct, numGuesses, score }\nend", "    -- code here\n\
    end", "\t-- Based on the number of matches, the number of zeroes in the answer,\
    \ the number of\n\t-- non-zeroes in the guess, and the number of non-zeroes in\
    \ the answer minus the\n\t-- number of non-zeroes in the guess, return how many\
    \ zeroes in the guess were correct.\n\t-- The function should return a list of\
    \ numbers that is the same length as the\n\t-- array of guesses.\n\t-- The number\
    \ in the list should be how many zeroes were correct.\n\t-- The function will\
    \ return -1 if the guess was not correct and the absolute difference between\n\
    \t-- the score and the guess, if the guess was correct and the absolute difference\
    \ between\n\t-- the score and the guess is zero.\n\t-- The return value -1 should\
    \ never be used as the actual return value from a function.\n\t-- You may use\
    \ any return value that makes sense for the application.\n\t--\n\t-- The code\
    \ was tested with the function assert(compare(game, guess) == score)\n\t-- The\
    \ assert function will throw an exception if the condition is false. \n\t-- The\
    \ assert function takes in a boolean value and throws an exception if the value\n\
    \t-- is not true. \n\t-- The assert function can be used for debugging during\
    \ development to find errors,\n\t-- or for other things as well. Just use \"assert(condition)\"\
    \ to throw an exception if\n\t-- the condition evaluates to false, and use \"\
    assert(condition == value)\" to throw an\n\t-- exception if the condition evaluates\
    \ to true and the values are different.\n\t--\n\t-- Your code will be run at https://github.com/KxSystems/kx-lua\
    \ \n\t-- and you can find some useful info about Kx Lua here: \n\t-- https://github.com/KxSystems/kx-lua/wiki\n\
    \t-- You should test your solutions on all the problems listed in \"KX Lua for\
    \ All\n\t-- Programmers\" by Karl Stern and other Kx Lua users and find out if\
    \ your solution\n\t-- works.\n\t\n\t--\n\t-- Part 1\n\t--\n\t-- You will now do\
    \ the first part of the function, which is determining how many zeros\n\t-- are\
    \ in the guess. In the first part of the function, the first element of the game\n\
    \t-- array is the score and the first element of the guess array is the guess.\
    \ You will need\n\t-- to find out how many zeros are in the guess to determine\
    \ how many zeroes are in the\n\t-- answer. Since the array can be assumed to be\
    \ sorted, the position of the score is always\n\t-- greater than the position\
    \ of the guess. \n\t--\n\t-- The scores are all integers greater than 0, but the\
    \ guesses are all non-negative", "    local total=0\n    for i=1,#game,1 do\n\
    \        local score=game[i]\n        local guess=guess[i]\n        if score==guess\
    \ then\n            total=total+1\n        else\n            total=total+math.abs(score-guess)\n\
    \        end\n    end\n    return total\nend", "  local results = {}\n  local\
    \ diff = 0\n  -- The for loop runs until all game's scores have been compared\
    \ to all guesses\n  -- if one score is out of bounds, we reset the guess to the\
    \ lowest\n  -- possible value that could be out of bounds\n  for i = 1, #game\
    \ do\n    if i >= #guess then diff = game[i] and 0 else diff + game[i]\n  end\n\
    \  -- if all scores have been compared to all guesses, set the results to 0 if\
    \ they\n  -- are out of bounds and 1 otherwise\n  if diff == #guess then diff\
    \ = 0 end\n  -- If all scores have been compared correctly, set the results to\
    \ the difference\n  -- between all guesses and scores. This may seem silly but\
    \ if all guesses and scores\n  -- have equal number of elements, the difference\
    \ between any two consecutive guesses\n  -- will be the score difference\n  for\
    \ i = 1, #guess do\n    results[i] = guess[i] and diff or 0\n  end\n  return results\n\
    end", "   local ret = {}\n   for i = 1, #game do\n      ret[i] = abs(game[i] -\
    \ guess[i])\n   end\n   return ret\nend", "  -- your implementation\nend", " \
    \ -- your code goes here\n  local out = {}\n  local j = 1\n  for i = 1, #game\
    \ do\n    if game[i] ~= guess[i] then\n      out[j] = abs(game[i] - guess[i])\n\
    \    else\n      out[j] = 0\n    end\n    j = j + 1\n  end\n  return out\nend",
  '  local results = {}', "\tlocal scoreTable = {}\n\t\n\tfor i = 1, #game do\n\t\t\
    scoreTable[i] = game[i]\n\tend", "    local result = {} -- the result array\n\
    \    local scores = {} -- the score array\n    local guesses = {} -- the guesses\
    \ array\n    local counts = {} -- the count of how many guesses each score is\n\
    \    \n    local index = 0 -- index for the scores\n    local score = 0 -- score\
    \ for the scores\n    local guess = 0 -- guess for the scores\n    local count\
    \ = 0 -- count for how many guesses each score is\n    \n    for _, gs in ipairs(guess)\
    \ do\n        guesses[count] = gs\n        count = count + 1\n    end\n    \n\
    \    for _, g in ipairs(game) do\n        if g ~= -1 then\n            scores[count]\
    \ = g\n            count = count + 1\n        else\n            result[index]\
    \ = scores[index]\n            if guesses[index] == -1 then\n                result[index]\
    \ = 0\n            else\n                result[index] = abs(scores[index] - guesses[index])\n\
    \            end\n            index = index + 1\n        end\n    end\n    \n\
    \    return result\nend", "\tlocal diff = {}\n\tlocal num_games = #game\n\tlocal\
    \ num_guesses = #guess", "   local gameLength = #game\n   local guessLength =\
    \ #guess\n   if guessLength ~= gameLength then \n      return nil\n   end", " \
    \ local diff = {}\n  for _, g in ipairs(game) do\n    local x = guess[g]\n   \
    \ if x ~= 0 then\n      diff[#diff+1] = x - game[g]\n    end\n  end\n  return\
    \ diff\nend", "  -- Your code here\nend", "    if not #game or not #guess then\n\
    \        return 0\n    end\n    \n    local results = {}\n    local offset = 0\n\
    \    for i=1,#game do\n        local diff = abs(game[i]-guess[offset])\n     \
    \   if diff > 0 then\n            results[#results+1] = diff\n        end\n  \
    \      offset = offset+1\n    end\n    return results\nend", "    local guesses\
    \ = {}\n    for i=1,#game do\n        local difference = abs(game[i] - guess[i])\n\
    \        if difference > 0 then\n            guesses[#guesses+1] = difference\n\
    \        end\n    end\n    return guesses\nend", "  -- base case\n  if #game ==\
    \ 0 then\n    return guess\n  end\n  if #guess == 0 then\n    return 0\n  end\n\
    \  -- if the score for the first item is higher than the score of the second item,\
    \ \n  -- the first item is definitely better than it is the second\n  if game[1]\
    \ > game[2] then\n    return compare(game, guess)\n  end\n  -- otherwise, the\
    \ second item is definitely better than it is the first\n  local newGuess = {}\n\
    \  local count = 0\n  for i = 1, #guess do\n    if game[i] == guess[i] then\n\
    \      count = count + 1\n    else\n      newGuess[count] = guess[i]\n      count\
    \ = 0\n    end\n  end\n  if count ~= #guess then\n    newGuess[count] = guess[#guess]\n\
    \  end\n  return newGuess\nend", "\tgame = game or {}\n\tguess = guess or {}\n\
    \tlocal g = {}\n\tfor i=1,#game do\n\t\tg[i] = abs(game[i]-guess[i])\n\tend\n\t\
    return g\nend", "    assert(#game == #guess)\n    local result = {}\n    for i=1,#game\
    \ do\n        local score = game[i]\n        local guess = guess[i]\n        local\
    \ diff = 0\n        if score>=guess then\n            diff = 0\n        else\n\
    \            diff = score-guess\n        end\n        result[i] = diff\n    end\n\
    \    return result\nend", "    local results = {}\n    for i = 1, #guess do\n\
    \        results[i] = abs(game[i] - guess[i])\n    end\n    return results\nend",
  "    local answers = {}\n    local last_score = nil\n    local last_score = game[1]\n\
    \    for i=2,#guess do\n        if guess[i-1] == game[i] then\n            last_score\
    \ = game[i]\n        else\n            -- If the current guesses distance is greater\
    \ than the previous one\n            -- then it can't be correct.\n          \
    \  if last_score ~= nil and last_score - game[i] > 0 then\n                table.insert(answers,\
    \ last_score - game[i])\n            end\n            -- The current guesses distance\
    \ is equal to or less than the previous one\n            else if last_score ~=\
    \ nil and last_score - game[i] <= 0 then\n                table.insert(answers,\
    \ 0)\n            else\n                table.insert(answers, last_score - game[i])\n\
    \            end\n            last_score = game[i]\n        end\n    end\n   \
    \ if last_score ~= nil and last_score - game[#game] > 0 then\n        table.insert(answers,\
    \ last_score - game[#game])\n    end\n    return answers\nend", "\t-- the base\
    \ case is when the number of guesses are equal\n\tif #guess == #game then\n\t\t\
    return { 0 }\n\tend\n\t\n\t-- start with a copy that is the same length as the\
    \ game\n\tlocal gameCopy = game:clone()\n\tlocal result = {}\n\tlocal index =\
    \ 0\n\t-- iterate through the game array\n\tfor i = 1, #game do\n\t\t-- if the\
    \ guess is equal to the current value of the game\n\t\tif guess[i] == game[i]\
    \ then\n\t\t\t-- add 1 to the index\n\t\t\tindex = index + 1\n\t\t\t-- iterate\
    \ through the guess array\n\t\t\tfor j = 1, #guess do\n\t\t\t\t-- if the current\
    \ value is a match for the game value\n\t\t\t\tif guess[j] == gameCopy[i] then\n\
    \t\t\t\t\t-- add 1 to the index\n\t\t\t\t\tindex = index + 1\n\t\t\t\t\t-- if\
    \ the guess is correct\n\t\t\t\t\tif guess[i] == gameCopy[i] then\n\t\t\t\t\t\t\
    -- add the difference between the current game value and the guess\n\t\t\t\t\t\
    \tresult[index] = result[index] + abs(game[i] - guess[j])\n\t\t\t\t\tend\n\t\t\
    \t\tend\n\t\t\tend\n\t\tend\n\tend\n\t-- return the result\n\treturn result\n\
    end", "    local diff = {}\n    for i = 1, #game do\n        -- determine if the\
    \ guess is correct\n        local diff = math.abs(guess - game[i])\n        if\
    \ guess == game[i] then\n            -- if the guess and score match, return 0\n\
    \            diff[i] = 0\n        else\n            -- if the guess and score\
    \ do not match, return the absolute difference\n            diff[i] = diff\n \
    \       end\n    end\n    return diff\nend", "    if #game == #guess then\n  \
    \      local diff = {}\n        for i = 1, #guess do\n            diff[i] = abs(guess[i]\
    \ - game[i])\n        end\n        return diff\n    else\n        return nil\n\
    \    end\nend", "  local diff = game:clone()\n  for i = 1, #guess do\n    if guess[i]\
    \ ~= 0 then\n      diff:subtract(guess[i])\n    end\n  end\n  return diff:toArray()\n\
    end", "  -- Your code here\n  local scores = {}\n  local matches = 0\n  for i\
    \ = 1, #guess do\n    local score = 0\n    for j = 1, #game do\n      if game[j]\
    \ == guess[i] then\n\tscore = score + 1\n\tmatches = matches + 1\n      else\n\
    \tbreak\n      end\n    end\n    scores[i] = score\n  end\n  \n  return scores\n\
    end", "    local result={}\n    local len1=#game\n    local len2=#guess\n    local\
    \ i\n    for i=1,len1,1 do\n        local iscorrect=0\n        if game[i]~=0 then\n\
    \            for j=1,len2,1 do\n                if guess[j]==game[i] then\n  \
    \                  iscorrect=1\n                    break\n                end\n\
    \            end\n        end\n        if iscorrect then\n            result[i]=0\n\
    \        else\n            result[i]=abs(game[i]-guess[i])\n        end\n    end\n\
    \    return result\nend", '    local result = {}', "\t-- check if both arrays\
    \ are the same length\n\tif #game ~= #guess then\n\t\tprint('Length mismatch')\n\
    \t\treturn nil\n\tend\n\t-- create a copy to not modify original game\n\tlocal\
    \ newGame = game\n\t-- fill array with all zeros\n\tlocal results = {}\n\tfor\
    \ i=1,#game do\n\t\tresults[i] = 0\n\tend\n\t-- determine number of correct guesses\n\
    \tlocal correctGuesses = 0\n\tfor i=1,#guess do\n\t\t-- check if guess is correct\n\
    \t\tif guess[i] == game[i] then\n\t\t\t-- correct guess\n\t\t\tcorrectGuesses\
    \ = correctGuesses + 1\n\t\t\t-- increment current correct guess\n\t\t\tresults[i]\
    \ = results[i] + 1\n\t\t\t-- subtract current score by guess score\n\t\t\tresults[i]\
    \ = results[i] - game[i]\n\t\tend\n\tend\n\t-- create return array\n\tlocal ret\
    \ = {}\n\t-- fill return array with correct guesses\n\tfor i=1,#guess do\n\t\t\
    -- check if guess is correct\n\t\tif guess[i] == game[i] then\n\t\t\t-- correct\
    \ guess\n\t\t\t-- check if guess was correct number of times\n\t\t\tif results[i]\
    \ == correctGuesses then\n\t\t\t\t-- guess was correct\n\t\t\t\t-- increment current\
    \ correct guess\n\t\t\t\tret[i] = ret[i] + 1\n\t\t\t\t-- subtract current score\
    \ by guess score\n\t\t\t\tret[i] = ret[i] - game[i]\n\t\t\telse\n\t\t\t\t-- guess\
    \ was incorrect\n\t\t\t\t-- add absolute difference between guess and score\n\t\
    \t\t\tret[i] = ret[i] + abs(game[i] - guess[i])\n\t\t\t\t-- increment current\
    \ correct guess\n\t\t\t\tret[i] = ret[i] + 1\n\t\t\t\t-- subtract current score\
    \ by guess score\n\t\t\t\tret[i] = ret[i] - game[i]\n\t\t\tend\n\t\telse\n\t\t\
    \t-- guess was incorrect\n\t\t\t-- add absolute difference between guess and score\n\
    \t\t\tret[i] = ret[i] + abs(game[i] - guess[i])\n\t\t\t-- increment current correct\
    \ guess\n\t\t\tret[i] = ret[i] + 1\n\t\t\t-- subtract current score by guess score\n\
    \t\t\tret[i] = ret[i] - game[i]\n\t\tend\n\tend\n\t-- return array\n\treturn ret\n\
    end", "  local diffs = {} -- array for difference of each guess\n  local scores\
    \ = {} -- array for scores for each guess\n  \n  -- Iterate over each guess and\
    \ score pair\n  for i = 1, #guess do\n    scores[i] = game[i]\n    diffs[i] =\
    \ game[i] - guess[i]\n  end\n  \n  -- iterate over each guess\n  for i = 1, #guess\
    \ do\n    -- if the score is 0 then this guess was correct\n    if scores[i] ==\
    \ 0 then\n      -- add it to the array\n      table.insert(diffs, 0)\n      --\
    \ increment the number of correct guesses\n      table.insert(diffs, 1)\n    else\n\
    \      -- calculate the difference between the score and each guess \n      --\
    \ find the minimum difference \n      local min_diff\n      for j = 1, #diffs\
    \ do\n        if diffs[j] ~= 0 and diffs[j] < min_diff then\n          min_diff\
    \ = diffs[j]\n        end\n      end\n      -- add the difference to the array\n\
    \      table.insert(diffs, min_diff)\n    end\n  end\n  \n  return diffs\nend",
  "  local diff = 0\n  \n  for i=1, #game do\n    diff = diff + (abs(game[i] - guess[i]))\n\
    \  end\n  \n  return diff\nend", "    local results = {}\n    for i = 1, #guess\
    \ do\n        if game[i]==guess[i] then \n            table.insert(results,0)\n\
    \        else \n            table.insert(results,abs(game[i]-guess[i]))\n    \
    \    end\n    end\n    return results\nend", "  -- The function will exit early\
    \ if it cannot find a match for the first element in the array.\n  -- If the first\
    \ element in the array is equal to the guess, return 0 instead of returning infinity.\n\
    \  if game[1] ~= guess then return math.abs(guess - game[1]) end\n  -- The loop\
    \ will continue as long as the first element in the array is the same as the \n\
    \  -- guess. If so, return 0, otherwise return the difference between the guess\
    \ and the score.\n  local total = 0\n  for idx = 2, #guess do total = total +\
    \ abs(guess - game[idx]) end\n  return total\nend", "  local len1 = #game\n  local\
    \ len2 = #guess\n  local ret = {} -- will be a list of length len1 of zeros\n\
    \  for i=1, len1 do\n    local score = game[i]\n    local guess = guess[i]\n \
    \   if score < guess then \n      --if they are correct, add 0 to ret\n      ret[i]\
    \ = 0\n      break\n    else\n      --if they are wrong, add abs(score - guess)\
    \ to ret\n      ret[i] = abs(score - guess)\n    end\n  end\n  -- return a list\
    \ of length len2 with the total of how far off the guesses are\n  return ret\n\
    end", "\tlocal results = {}\n\tlocal numMatches = 0\n\tlocal totalScore = 0\n\t\
    local scoreDifference = 0\n\tlocal score = game[1]\n\tlocal guess = guess[1]\n\
    \tfor i = 1,#game do\n\t\tif game[i] == guess then\n\t\t\tnumMatches = numMatches\
    \ + 1\n\t\t\ttotalScore = totalScore + score\n\t\telseif game[i] > guess then\n\
    \t\t\t-- game is won\n\t\t\tnumMatches = numMatches + 1\n\t\t\t-- score is lost\n\
    \t\t\ttotalScore = totalScore - score\n\t\telse\n\t\t\t-- game is lost\n\t\t\t\
    -- score is won\n\t\t\tnumMatches = numMatches + 1\n\t\t\t-- score is lost\n\t\
    \t\ttotalScore = totalScore + score\n\t\tend\n\tend", "  local score\n  local\
    \ diff", "  local scores = {}\n  for i = 1, #game do scores[i] = 0 end\n  for\
    \ i = 1, #guess do scores[i] = scores[i] + (game[i] - guess[i]) end\n  return\
    \ scores\nend", "  local result={}\n  for i=1,#game do\n    if game[i]==0 then\n\
    \      result[i]=0\n    else\n      result[i]=math.abs(game[i]-guess[i])\n   \
    \ end\n  end\n  return result\nend", "  local correct = 1\n  local diff = 0\n\
    \  for i = 1, #guess do\n    local score = game[i]\n    local guess = guess[i]\n\
    \    if guess == score then\n      correct = correct + 1\n    else\n      diff\
    \ = diff + math.abs(guess - score)\n    end\n  end\n  if correct == #guess then\n\
    \    return diff\n  else\n    return diff\n  end\nend", "    if not game or not\
    \ guess then\n        return nil\n    end", "  -- Your code here\n  local out\
    \ = {}\n  local count = 0\n  for i = 1,#guess do\n    if game[i] == guess[i] then\n\
    \      count = count + 1\n    end\n  end\n  if count == 1 then\n    out[1] = 0\n\
    \  else\n    out[1] = count - abs(game[#game] - guess[#guess])\n  end\n  for i\
    \ = 2,#guess do\n    if game[i] ~= guess[i] then\n      out[1] = out[1] + 1\n\
    \    end\n  end\n  return out\nend", "  local diff = {}\n  local i = 1\n  for\
    \ _,v in ipairs(game) do\n    if v == guess[i] then diff[i] = 0\n    elseif v\
    \ ~= guess[i] then diff[i] = v - guess[i] end\n    i = i+1\n  end\n  return diff\n\
    end", "    local gameLength = (#game)/2\n    local guessLength = (#guess)/2",
  "   \n  -- first check whether the guess is an array of zeroes denoting no match,\
    \ as in the case\n  -- that all elements are equal, or the case in which all elements\
    \ are different\n  -- this is important because we can check later on\n  if type(guess)\
    \ == \"table\" and #guess == 0 then\n    return {\"none\"}\n  end\n  -- now simply\
    \ check whether guess is empty and game is empty as in the case where everything\n\
    \  -- matches\n  if game == \"\" and guess == \"\" then\n    return {\"none\"\
    }\n  end\n  -- finally, let's compare the two arrays\n  if game == \"\" or guess\
    \ == \"\" then\n    return {\"none\"}\n  end\n  -- return an array with one element\
    \ to indicate how far off guess was\n  local out = {}\n  -- first, we'll go through\
    \ the guess array and determine its distance from game\n  -- we also initialize\
    \ a number of counters we'll need\n  for i, v in pairs(guess) do\n    if v ==\
    \ 0 then\n      -- if the corresponding index in game is zero then we need to\
    \ add one\n      -- from the counter counter. Note though that the first counter\
    \ will\n      -- always be set to 1 because we already know that every match will\
    \ be one\n      -- so we will subtract 1 before assigning the next counter\n \
    \     out[i] = (game[1] - counter)\n      -- first counter will always be 1\n\
    \      counter = 1\n    else\n      -- otherwise we need to assign the difference\
    \ between the guess and the current game counter\n      out[i] = (v - counter)\n\
    \      -- if the current game counter is zero then this is the first counter so\
    \ we don't need to increment it\n      -- note that this assumes that every match\
    \ in game is one so if that is not the case then we need to add\n      -- one\
    \ to the counter and set it to zero\n      counter = 0\n    end\n  end\n  -- if\
    \ we didn't get through all of the guess then we didn't get through all game counters\
    \ so\n  -- we need to add the last counter to the out\n  -- note that the first\
    \ element of the out will always be 1 because we set it above\n  out[1] = out[1]\
    \ + counter\n  -- return the out\n  return out\nend", "    local scores = {}\n\
    \    for i = 1, #game do\n        scores[i] = game[i] - guess[i]\n    end\n  \
    \  return scores\nend", "\t-- Initialize the result.\n\tlocal result = {}", "\t\
    local differences = {}\n\tfor i = 1, #game do\n\t\tlocal difference = game[i]\
    \ - guess[i]\n\t\tif difference ~= 0 then\n\t\t\tdifferences[i] = difference\n\
    \t\telse\n\t\t\tdifferences[i] = 0\n\t\tend\n\tend\n\treturn differences\nend",
  "    local difference = {}\n    for i = 1, #guess do\n       local diff = abs(game[i\
    \ - 1] - guess[i])\n       if diff>0 then\n          difference[i] = diff\n  \
    \     else\n          difference[i] = 0\n       end\n    end\n    return difference\n\
    end", "    local results = {}\n    for i=1,#game do\n        local difference\
    \ = abs(game[i] - guess[i])\n        if game[i] == guess[i] then\n           \
    \ results[i] = 0\n        else\n            results[i] = difference\n        end\n\
    \    end\n    return results\nend", "  -- Initialize the results to 0.\n  local\
    \ results = {}\n  \n  -- Loop through each of the guesses.\n  for i = 1, #guess\
    \ do\n    \n    -- If the guess is equal to the score, return 0.\n    if guess[i]\
    \ == game[i] then\n      results[i] = 0\n      break\n    end\n    \n    -- If\
    \ the guess is lower than the score, subtract it from the score.\n    if game[i]\
    \ < guess[i] then\n      game[i] = -game[i]\n    end\n    \n    -- If the guess\
    \ is higher than the score, add the guess back to the score.\n    if game[i] >\
    \ guess[i] then\n      game[i] = game[i]\n    end\n    \n    -- Add the difference\
    \ between guess and score to the results. \n    local difference = abs(game[i]\
    \ - guess[i])\n    results[i] = difference\n    \n    -- If this guess is the\
    \ final guess, set the value to 0.\n    if i == #guess then\n      results[i]\
    \ = 0\n    end\n  end\n  \n  return results\nend", "    local correct = 0\n  \
    \  local gameLength = #game\n    local guessLength = #guess\n    local score =\
    \ 0\n    local guessedCorrectly = false", "  local results = {}\n  local index\
    \ = 0\n  local nGuesses = #guess", "    local results = {}\n    local guesses\
    \ = { }\n    for i = 1,#guess do\n        guesses[i] = guess[i]\n    end\n   \
    \ for i = 1,#game do\n        local max = 0\n        local maxIndex = 0\n    \
    \    for j = 1,#guesses do\n            if game[i] == guesses[j] then\n      \
    \          max = game[i]\n                maxIndex = j\n            end\n    \
    \    end\n        results[#results+1] = max - game[i]\n    end\n    return results\n\
    end", "  local correct = #game == #guess\n  if correct then\n    local i = 0\n\
    \    for i=1, #game do\n      if game[i] == guess[i] then\n        -- found match\n\
    \      end\n    end\n  end\n  -- return error\n  local error = correct == 0 and\
    \ 1 or -1\n  -- return game, guess, error\n  return game, guess, error\nend",
  '    local results = {0,0,0,0,0,0,0,0,0,0}', "  if #game ~= #guess then return nil\
    \ end\n  local gameLength = #game\n  local results = {}\n  for i = 1, gameLength\
    \ do\n    local difference = guess[i] - game[i]\n    if difference ~= 0 then\n\
    \      results[i] = difference\n    end\n  end\n  return results\nend", "    local\
    \ results = {}\n    for i = 1, #game do\n        local score = game[i]\n     \
    \   local guessIndex = -1\n        local scoreIndex = -1\n        for j = 1, #guess\
    \ do\n            if game[j] == score then\n                scoreIndex = j\n \
    \               break\n            end\n        end\n        for j = 1, #guess\
    \ do\n            if guessIndex == -1 then\n                if game[j] == score\
    \ then\n                    guessIndex = j\n                else\n           \
    \         results[i] = abs(guess - score)\n                end\n            else\n\
    \                if guessIndex == j then\n                    results[i] = 0\n\
    \                else\n                    results[i] = abs(guess - score) + abs(guess\
    \ - game[guessIndex])\n                    guessIndex = -1\n                end\n\
    \            end\n        end\n    end\n    return results\nend", "    if #game\
    \ ~= #guess then\n        print(\"You entered an inconsistent number of guesses\
    \ and scores, please check your code\")\n        return nil\n    end", "    local\
    \ correct = 0\n    local i = 0", "   local differences = {}\n   for i = 1, #game,\
    \ 1 do\n      differences[#differences + 1] = abs(game[i] - guess[i])\n   end\n\
    \   return differences\nend", "\tlocal n = 0\n\tfor i = 1, #game do\n\t\tif game[i]\
    \ == guess[i] then\n\t\t\tn = n + 1\n\t\telse\n\t\t\tn = n - abs(game[i] - guess[i])\n\
    \t\tend\n\tend\n\treturn n\nend", "    local result={}\n    local total=0\n  \
    \  for i=1,#game do\n        local p=game[i]\n        local s=guess[i]\n     \
    \   total=total+abs(p-s)\n        result[i]=abs(p-s)\n    end\n    if total==0\
    \ then\n        return result\n    else\n        return total\n    end\nend",
  "  if #game ~= #guess then return 0 end\n  local numGuesses = #game\n  local numScores\
    \ = #guess\n  local result = {}\n  for i = 1, numGuesses do\n    local guessedCorrectly\
    \ = game[i] == guess[i]\n    local diff = (guessedCorrectly and guess[i] or game[i])\
    \ - game[i]\n    if diff == 0 then diff = 0 end\n    table.insert(result, diff)\n\
    \  end\n  return result\nend", "   assert(type(game) == 'table', 'Argument 1 should\
    \ be table')\n   assert(type(guess) == 'table', 'Argument 2 should be table')\n\
    \   local correct = 0\n   local errors = {}\n   for i = 1,#guess do\n      local\
    \ diff = 0\n      for j = 1,#game do\n         if game[j] == guess[i] then\n \
    \           diff = 0\n         else\n            diff = diff + (abs(game[j] -\
    \ guess[i]))\n         end\n      end\n      if diff ~= 0 then\n         correct\
    \ = correct + 1\n         errors[i] = diff\n      end\n   end\n   if correct ==\
    \ #guess then\n      return {}\n   else\n      return errors\n   end\nend", " \
    \  local correct_guesses = {}\n   local results = {}\n   for i = 1, #game do\n\
    \      local diff = 0\n      for j = 1, #guess do\n         if game[i] == guess[j]\
    \ then\n            diff = diff + 1\n         end\n      end\n      if game[i]\
    \ == guess[i] then\n         diff = diff + 1\n      end\n      table.insert(correct_guesses,\
    \ diff)\n      table.insert(results, diff)\n   end\n   return results\nend", "\t\
    local maxdiff = 0\n\tlocal maxi = 0\n\tfor i=1,#guess do\n\t\tlocal diff = math.abs(guess[i]-game[i])\n\
    \t\tif diff > maxdiff then\n\t\t\tmaxdiff = diff\n\t\t\tmaxi = i\n\t\tend\n\t\
    end\n\t\n\treturn maxdiff .. maxi\nend", "    local a = {}\n    for i, v in ipairs(game)\
    \ do\n        a[i] = math.abs(guess - v)\n    end\n    return a\nend", "    local\
    \ a = {}\n    for i=1,#game do\n        a[i] = guess[i]-game[i]\n    end\n   \
    \ return a\nend", "    local result = {}\n    local index = 0\n    while index\
    \ <= #guess do\n        if game[index] == guess[index] then\n            result[index]\
    \ = 0\n        else\n            result[index] = abs(guess[index] - game[index])\n\
    \        end\n        index = index + 1\n    end\n    return result\nend", " \
    \  local score = {} -- The score for each match\n   local guesses = {} -- The\
    \ guesses for each match\n   for i=1,#game,1 do -- Loop through all matches, saving\
    \ scores\n      score[i] = game[i]\n      guesses[i] = guess[i]\n   end\n   --print(score)\n\
    \   --print(guesses)\n   local scorediffs = {} -- The differences from each guess\n\
    \   for i=1,#guesses,1 do -- Loop through all guesses\n      scorediffs[i] = abs(guesses[i]\
    \ - score[i])\n   end\n   return scorediffs\nend", "    local scores = {}\n  \
    \  local differences = {}\n    for i = 0, #game, 1 do\n        scores[i] = abs(game[i]\
    \ - guess[i])\n        differences[i] = abs(game[i] - guess[i])\n    end\n   \
    \ return scores\nend", "  local game_size = #game\n  local guess_size = #guess\n\
    \  local result\n  local index\n  local correct = 0\n  local difference\n  local\
    \ difference\n  local results = {}", "    local scores = {}\n    local diff =\
    \ {}", "    local gameScores = {}\n    for i = 0, #game do\n        gameScores[#gameScores+1]\
    \ = game[i]\n    end\n    local guessedScores = {}\n    for i = 0, #guess do\n\
    \        guessedScores[#guessedScores+1] = guess[i]\n    end\n    local correct\
    \ = {}\n    for i = 0, #guess do\n        local difference = guessedScores[i]\
    \ - gameScores[i]\n        if difference ~= 0 then\n            table.insert(correct,\
    \ difference)\n        end\n    end\n    return correct\nend", "  assert(game\
    \ and guess)\n  \n  local results = {}\n  local index\n  for index = 1, #guess\
    \ do\n    local diff = guess[index] - game[index]\n    results[index] = diff <\
    \ 0 and -diff or diff\n  end\n  return results\nend", "    return \nend", "  local\
    \ totaldiff = 0\n  local diff = 0\n  local gamelen = #game\n  local guesslen =\
    \ #guess\n  for i = 1, guesslen do\n    local gamescore = game[(i-1) * gamelen\
    \ + gamelen + i]\n    local guessscore = guess[i]\n    diff = guessscore - gamescore\n\
    \    totaldiff = totaldiff + abs(diff)\n  end\n  return totaldiff\nend", "  local\
    \ scores = {}\n  local correct = 0\n  local score = {}\n  for i=1,#guess do\n\
    \    local score = game[i]\n    scores[i] = score\n    if guess == score then\n\
    \      correct = correct + 1\n    else\n      score = score - guess\n      score\
    \ = score > 0 and score or -score\n    end\n  end\n  for i=1,#guess do\n    score[i]\
    \ = scores[i]\n  end\n  return scores\nend", "   -- Your code here\nend", "  \
    \  local score = {}\n    for i = 1, #game do\n        if guess == game[i] then\n\
    \            table.insert(score, 0) -- correct\n        else\n            local\
    \ diff = math.abs(guess[i]-game[i])\n            table.insert(score, diff)\n \
    \       end\n    end\n    return score\nend\nprint(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]))\
    \ --[[0,0,0,0,3,3]]\nprint(compare([0,5,0,0,0,4], [4,1,1,0,0,-2])) --[[4,4,1,0,0,6]]\n\
    print(compare([2,5,9,7,3,-2], [4,1,1,0,0,-2])) --[[4,4,1,0,0,6]]", "    local\
    \ gameScores = {}\n    local guessScores = {}\n    local results = {}", "   assert(#game\
    \ == #guess, \"Length of games and guesses must be equal\")\n   local result =\
    \ {}\n   for i=1,#game do\n      if game[i] == guess[i] then\n         result[i]\
    \ = 0\n      else\n         result[i] = abs(game[i] - guess[i])\n      end\n \
    \  end\n   return result\nend", "    local i, j = 0, 0\n    local results = {}\
    \ -- keep track of all the results that have been found\n    \n    while j <=\
    \ #guess do\n        if game[i] == guess[j] then\n            i = i + 1\n    \
    \        j = j + 1\n        elseif game[i] > guess[j] then\n            i = i\
    \ + 1\n            j = j + 1\n        else\n            j = j + 1\n        end\n\
    \        \n        table.insert(results, i - j)\n    end\n    \n    table.sort(results)\
    \ -- sort results\n    \n    local sum = 0\n    for _, result in pairs(results)\
    \ do\n        sum = sum + result\n    end\n    \n    return sum\nend", "\tgame\
    \ = game:map(function (x) return x + 1 end):map(function (x) return x / 2 end):map(function\
    \ (x) return x - 1 end)\n\tguess = guess:map(function (x) return x + 1 end):map(function\
    \ (x) return x / 2 end):map(function (x) return x - 1 end)\n\tlocal result = {}\n\
    \tlocal correct = 0\n\tlocal correctIndex\n\tfor i = 1, #guess do\n\t\tif guess[i]\
    \ == game[i] then\n\t\t\tcorrect = correct + 1\n\t\t\tif guess[i] == game[i] then\n\
    \t\t\t\tcorrectIndex = i\n\t\t\tend\n\t\tend\n\tend\n\tresult[#result+1] = correct\n\
    \tif correctIndex == nil then\n\t\tresult[#result+1] = -abs(correct)\n\telse\n\
    \t\tresult[#result+1] = correct - abs(game[correctIndex] - guess[correctIndex])\n\
    \tend\n\treturn result\nend", "    assert(#game == #guess)\n    local diff = {\
    \ }\n    for i = 1, #guess do\n        local score = 0\n        for j = 1, #game\
    \ do\n            if game[j] == guess[i] then\n                score = score +\
    \ 1\n            end\n        end\n        if score == #game then\n          \
    \  table.insert(diff, 0)\n        else\n            table.insert(diff, abs(score\
    \ - #game))\n        end\n    end\n    return diff\nend", "  local results = {}\n\
    \  local gameLen = #game\n  local guessLen = #guess\n  if gameLen ~= guessLen\
    \ then return nil, \"Game/Guess lengths don't match\" end\n  for i=1, guessLen\
    \ do\n    local i1 = i -1\n    local i2 = i + 1\n    local diff\n    if game[i]\
    \ == guess[i] then\n      diff = 0\n    else\n      diff = game[i] - guess[i]\n\
    \    end\n    results[i] = diff\n  end\n  return results\nend", "    local guesses\
    \ = {}\n    local results = {}\n    local gameScores = {}", "\t-- base case: guesses\
    \ of length 1 equals the score\n\tif (#guess == 1) then\n\t\tlocal result = guess[1]\
    \ - game[1]\n\t\tlocal negative = #guess == 2 and guess[2] < 0\n\t\treturn negative\
    \ and result or -result\n\tend\n\t-- recursion case: guesses of length 2 differ\n\
    \treturn compare(game, guess:sub(1) + game:sub(1))\nend", "  local n = #game\n\
    \  local p = #guess\n  local res = {}\n  for i = 1, n do\n    if game[i] ~= guess[i]\
    \ then\n      res[i] = abs(guess[i] - game[i])\n    end\n  end\n  return res\n\
    end", "    if #game ~= #guess then return 0 end\n    local max,i,j=0,0,0\n   \
    \ for i,v in ipairs(game) do\n        if v == guess[i] then\n            max =\
    \ v\n            j = i\n        else\n            if max ~= 0 then\n         \
    \       if max > guess[j] then max = guess[j] end\n                if max < guess[i]\
    \ then max = guess[i] end\n            end\n        end\n    end\n    if max ~=\
    \ 0 then return max+abs(max-guess[i]) end\nend", "    local result = {}\n    for\
    \ i = 1, #guess do\n        result[i] = (abs(guess[i]-game[i]))\n    end\n   \
    \ return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
