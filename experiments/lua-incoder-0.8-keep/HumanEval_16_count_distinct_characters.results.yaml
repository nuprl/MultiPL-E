name: HumanEval_16_count_distinct_characters
language: lua
results:
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #(Set('') -- Set() is a table of unique elements (each element only\
    \ occurs once)\n                ++ Set('a')\n                ++ Set('A')\n   \
    \             ++ Set('z')\n                ++ Set('Z')\n                ++ Set('0')\n\
    \                ++ Set('9')\n                ++ Set('!'))\n            -- ^ Set()\
    \ is a table of unique elements (each element only occurs once)\n            --\
    \   ++ Set() is a table of unique elements (each element only occurs once)\n \
    \           --     ++ Set() is a table of unique elements (each element only occurs\
    \ once)\n            --       ++ Set() is a table of unique elements (each element\
    \ only occurs once)\n            --         ++ Set() is a table of unique elements\
    \ (each element only occurs once)\n            --           ++ Set() is a table\
    \ of unique elements (each element only occurs once)\n            --         \
    \    ++ Set() is a table of unique elements (each element only occurs once)\n\
    \            --               ++ Set() is a table of unique elements (each element\
    \ only occurs once)\n            --                 ++ Set() is a table of unique\
    \ elements (each element only occurs once)\n            --                   ++\
    \ Set() is a table of unique elements (each element only occurs once)\n      \
    \      --\n            --   + 1 because '0' is also a distinct character\n   \
    \         --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' is also a distinct character\n\
    \            --\n            --   + 1 because '0' \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmq3xlvyi.lua:8: unexpected symbol near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- Create a frequency table of distinct characters in the string\n    local\
    \ character_frequency = {}\n    for _ = 1, #string do\n        table.insert(character_frequency,\
    \ string.sub(string,_, string.len() ))\n    end\n    -- Return the number of distinct\
    \ characters\n    return #character_frequency\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9lp53a9a.lua:10:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp9lp53a9a.lua:10: in local 'candidate'\n\t/tmp/tmp9lp53a9a.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct_count = 0\n  for char in string.gmatch(\"[%a%A]\", \"%c\") do\n\
    \    distinct_count = distinct_count + 1\n  end\n  return distinct_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6xcar60.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpg6xcar60.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if string == nil then\n        return 0\n    end\n    if string.bytes ==\
    \ nil then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpze7v8aql.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- Get the string length\n  local len_string = string.len\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphkhw60un.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then return 0 end\n  local count = 0\n  for i = 1, #string\
    \ do\n    count = count + 1\n    if string.sub(i, i+1, string.sub(i, i+1)) ==\
    \ string.sub(i, i+1) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprultk3ck.lua:11:\
    \ bad argument #3 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmprultk3ck.lua:11: in local 'candidate'\n\t/tmp/tmprultk3ck.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if type(string) ~= 'string' then\n    error('First argument must be a string.')\n\
    \  end\n  if #string == 0 then\n    return 0\n  end\n  local counter = 1\n  local\
    \ current_character = string[1]\n  for i = 2, #string do\n    if string[i] ~=\
    \ current_character then\n      counter = counter + 1\n      current_character\
    \ = string[i]\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtgn3c3h.lua:28:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmphtgn3c3h.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal count, i = 1, 1\n\twhile i do\n\t\tcount = count + 1\n\t\ti = string.find(string,\
    \ '%c', i, true)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptczjy5a1.lua:18:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmptczjy5a1.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinctChars = { }\n  local charCounter = 0\n  for _, _ in pairs(string)\
    \ do\n    if string.sub(string, 1, charCounter) == string.sub(string, charCounter)\
    \ then\n      table.insert(distinctChars, string.sub(string, charCounter))\n \
    \     charCounter = charCounter + 1\n    else\n      charCounter = charCounter\
    \ + 1\n    end\n  end\n  return table.count(distinctChars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_et14z_.lua:9:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpe_et14z_.lua:9: in local 'candidate'\n\t/tmp/tmpe_et14z_.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   local count = 0\n   for char in string.gmatch( string, '%a' ) do\n      if\
    \ string.lower(char) == string.lower(char) then\n         count = count + 1\n\
    \      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdotn9wi.lua:21:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpqdotn9wi.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return string.gsub(string, '%c'):sub(1, 1):upper():byte() -- Count the number\
    \ of distinct characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qqvhy1b.lua:7:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp5qqvhy1b.lua:7: in local 'candidate'\n\t/tmp/tmp5qqvhy1b.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if string == nil then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3i62rfma.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #string.match(string, '[^'..string.char(191) .. '-]'):gcount\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwhta6h_r.lua:8: function arguments expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   local distinct = 0\n   for i = 0, string.len(string) - 1 do\n      if not\
    \ string.sub(string,i, i+1) ~= string.sub(string,i+1, i+2) then\n         distinct\
    \ = distinct + 1\n      end\n   end\n   return distinct\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3vow76l.lua:21:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmph3vow76l.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if string == nil then return nil end\n    local count = 0\n    for char in\
    \ string.gmatch(\"[%a\u0410-\u042F(){}]\", \"G\") do\n        if string.match(string,\
    \ char) ~= nil then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2e625kt.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpr2e625kt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal distinct = 0\n\tfor i=1,#string do\n\t\tif not string.sub( string, i,\
    \ i+1 ):lower() then\n\t\t\tdistinct = distinct + 1\n\t\tend\n\tend\n\treturn\
    \ distinct\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxaizprpa.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpxaizprpa.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local result = 1\n    for i = 1, #string do\n        if string.sub(i, i,\
    \ i) ~= string.sub(i, 1, i) then result = result + 1 end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x4q7sy1.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7x4q7sy1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 1\n  for i = 1, #string do\n    count = count + (string[i]:lower())\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8sxa0wt.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpg8sxa0wt.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for _, c in string:gmatch(\".\") do\n        if c:upper()\
    \ ~= c and c:lower() ~= c then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv3guelea.lua:9:\
    \ attempt to index a nil value (local 'c')\nstack traceback:\n\t/tmp/tmpv3guelea.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpv3guelea.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct_char_count = 0\n    for _,c in ipairs(string) do\n       \
    \ if string.lower(c) ~= string.upper(c) then\n            distinct_char_count\
    \ = distinct_char_count + 1\n        end\n    end\n    return distinct_char_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy512im7.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmphy512im7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for ch in string:gmatch(\"[%a]+\") do count = count\
    \ + 1 end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0q1np4w.lua:16:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpy0q1np4w.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  local last_character = nil\n  for i = 1, #string do\n  \
    \  if string[i] ~= last_character then\n      count = count + 1\n      last_character\
    \ = string[i]\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkm33017o.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpkm33017o.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct_characters = 0\n  for i = 1, #string do\n    local character\
    \ = string[i]\n    if character ~= character then\n      distinct_characters =\
    \ distinct_characters + 1\n    end\n  end\n  return distinct_characters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw7cd_gs.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpdw7cd_gs.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for _, _ in pairs(string) do\n        table.insert(chars,\
    \ tostring(_))\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_g3s6c6.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpr_g3s6c6.lua:8: in local 'candidate'\n\t/tmp/tmpr_g3s6c6.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return string.gsub(string.gsub(string, '%W', ''), '[%]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjjqjct_.lua:7:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpxjjqjct_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxjjqjct_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local c = 0\n    local last_case = false\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4egz77m7.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return string:gsub(\"%w+\"):gsub(\"%d+\"):gsub(\"%d%d%d%d%d%d%d\"):gsub(\"\
    %x\"):gsub(\"%d\"):gsub(\"%c\"):gsub(\"%w\"):gsub(\"%d+\"):gsub(\"%d*\"):gsub(\"\
    %d-\"):gsub(\"%d%w\"):gsub(\"%d%d\"):gsub(\"%d%d*\"):gsub(\"%d%d-\"):gsub(\"%d%d%w\"\
    ):gsub(\"%d%d%d\"):gsub(\"%d%d%d*\"):gsub(\"%d%d%d-\"):gsub(\"%d%d%d%w\"):gsub(\"\
    %d%d%d%d\"):gsub(\"%d%d%d%d*\"):gsub(\"%d%d%d%d-\"):gsub(\"%d%d%d%d%w\"):gsub(\"\
    %d%d%d%d%d\"):gsub(\"%d%d%d%d%d*\"):gsub(\"%d%d%d%d%d-\"):gsub(\"%d%d%d%d%d%w\"\
    ):gsub(\"%d%d%d%d%d%d\"):gsub(\"%d%d%d%d%d%d*\"):gsub(\"%d%d%d%d%d%d-\"):gsub(\"\
    %d%d%d%d%d%d%w\"):gsub(\"%d%d%d%d%d%d%d\"):gsub(\"%d%d%d%d%d%d%d*\"):gsub(\"%d%d%d%d%d%d%d-\"\
    ):gsub(\"%d%d%d%d%d%d%d%w\"):gsub(\"%d%d%d%d%d%d%d%d\"):gsub(\"%d%d%d%d%d%d%d%d*\"\
    ):gsub(\"%d%d%d%d%d%d%d%d-\"):gsub(\"%d%d%d%d%d%d%d%d%w\"):gsub(\"%d%d%d%d%d%d%d%d%d\"\
    ):gsub(\"%d%d%d%d%d%d%d%d*\"):gsub(\"%d%d%d%d%d%d%d%d-\"):gsub(\"%d%d%d%d%d%d%d%d%w\"\
    ):gsub(\"%d%d%d%d%d%d%d%d%d\"):gsub(\"%d%d%d%d%d%d%d%d*\"):gsub(\"%d%d%d%d%d%d%d%d-\"\
    ):gsub(\"%d%d%d%d%d%d%d%d%w\"):gsub(\"%d%d%d%d%d%d%d%d%d\"):gsub(\"%d%d%d%d%d%d%d%d*\"\
    ):gsub(\"%d%d%d%d%d%d%d%d-\"):gsub(\"%d%d%d%d%d%d%d%d%w\"):\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsmt3ehff.lua:8: function arguments expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   local count = 0\n   for _,c in pairs(string) do count = count + 1 end\n  \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54mlj968.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp54mlj968.lua:8: in local 'candidate'\n\t/tmp/tmp54mlj968.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct_characters = 0\n  local uppercase_count = 0\n  local lowercase_count\
    \ = 0\n  for _, _, _, _ in string.gmatch(string, \"([A-Z]+)\") do\n    uppercase_count\
    \ = uppercase_count + 1\n  end\n  for _, _, _, _ in string.gmatch(string, \"([a-z]+)\"\
    ) do\n    lowercase_count = lowercase_count + 1\n  end\n  distinct_characters\
    \ = uppercase_count + lowercase_count\n  return distinct_characters\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyzblu7l.lua:24:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpnyzblu7l.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   local distinct_characters = {}\n   for i = 1, #string do\n      local c =\
    \ string.sub(i, i)\n      if not distinct_characters[c] then\n         distinct_characters[c]\
    \ = 1\n      else\n         distinct_characters[c] = distinct_characters[c] +\
    \ 1\n      end\n   end\n   return #distinct_characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9c_96bz.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpm9c_96bz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- Return 0 for an empty string, otherwise the number of distinct characters\n\
    \  return string.gsub(\n    string, '(^.)(%a+)', function(c) return #c + 1 end\n\
    \  ) + string.gsub(\n    string, '(%a+)(%a+)', function(c) return #c + 1 end\n\
    \  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo485k42q.lua:10:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpo485k42q.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpo485k42q.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local ret = 0\n    for _, item in pairs(string) do\n        ret = ret + 1\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqsyz9n_g.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpqsyz9n_g.lua:8: in local 'candidate'\n\t/tmp/tmpqsyz9n_g.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \treturn string:gsub(\".\", function(_)\n\t\treturn string:match(\"%w\"):len()\n\
    \tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8vybw0k.lua:15:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpk8vybw0k.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct_characters = 0\n  for i = 1, #string do\n    if string.sub(i,\
    \ i, i) ~= \"\" then distinct_characters = distinct_characters + 1 end\n  end\n\
    \  return distinct_characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4zja4o7.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpj4zja4o7.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local num_distinct_characters = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfj83gegh.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string.len() == 0 then return 0 end\n  local char_table = { string.byte(1)\
    \ }\n  for i = 1, string.len() do\n    char_table[i] = 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3wxo4p7a.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   local chars = {}\n   for i = 1, #string do\n      if chars[string.sub(i, i,\
    \ i)] == nil then\n         chars[string.sub(i, i, i)] = 1\n      else\n     \
    \    chars[string.sub(i, i, i)] = chars[string.sub(i, i, i)] + 1\n      end\n\
    \   end\n   return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy21z12un.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpy21z12un.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   if string.len(string) == 0 then\n      return 0\n   elseif string.len(string)\
    \ == 1 then\n      return 1\n   else\n      local count = {}\n      for c in string.gmatch(\
    \ string, \"([^\" .. string.char(32) .. \"]+)\") do\n         if not count[c]\
    \ then\n            count[c] = 1\n         else\n            count[c] = count[c]\
    \ + 1\n         end\n      end\n      local n = #count\n      for c in string.gmatch(\
    \ string, \"([^\" .. string.char(32) .. \"]+)\") do\n         if count[c] <= n\
    \ then\n            n = count[c]\n         end\n      end\n      return n\n  \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijf7wts3.lua:34:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpijf7wts3.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 1\n  for i = 1, #string do\n    if string.sub(string, i, i) ~=\
    \ string.sub(string, i - 1, i) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zpbefbz.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1zpbefbz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   -- If string is nil, return nil\n   -- If string is an empty string, return\
    \ 1\n   -- If string's length is less than 2, return nil\n   if string == nil\
    \ or string == '' or string.len() < 2 then\n      return nil\n   end\n   -- Initialize\
    \ a table to store character counts\n   local counts = {}\n   -- Iterate through\
    \ each character in the string\n   for i = 1, string.len() do\n      -- If the\
    \ character is not in the counts table, add it with a count of 1\n      if not\
    \ counts[string.sub(i, 1, 1)] then\n         counts[string.sub(i, 1, 1)] = 1\n\
    \      else\n         -- Increment the character count if it was already in the\
    \ counts table\n         counts[string.sub(i, 1, 1)] = counts[string.sub(i, 1,\
    \ 1)] + 1\n      end\n   end\n   -- Return the number of distinct characters in\
    \ the string\n   return table.len(counts)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_0l0z_c.lua:32:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmps_0l0z_c.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count_char = {}\n    for _, char in pairs(string.gmatch'([^%s]+)')\
    \ do\n        count_char[char] = count_char[char] or 0\n        count_char[char]\
    \ = count_char[char] + 1\n    end\n    count_char = count_char\n    return table.values(count_char)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_d1sjcu1.lua:8:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp_d1sjcu1.lua:8: in local 'candidate'\n\t/tmp/tmp_d1sjcu1.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   local chars = {}\n   for char in string.gmatch(string, '([A-Za-z]+)') do\n\
    \      table.insert(chars, char)\n   end\n   return #chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5puqhlws.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp5puqhlws.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   if string == nil then return 0 end\n   return (string.gsub(string, '%W', function()\n\
    \      local count = nil\n      local last_char = nil\n      repeat\n\t last_char\
    \ = last_char or string[#string]\n\t count = count or 0\n\t count = count + 1\n\
    \t string = string.sub(string, 1, #string - 1)\n      until string == last_char\n\
    \      return count\n   end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjg4dqvt.lua:24:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmphjg4dqvt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return string\n    or\n  assert(string.len(string) > 0)\n    or 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo7txfwy.lua:16:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpyo7txfwy.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal num_distinct_char = 0\n\tlocal _character_table = {}\n\tfor i = 1, #string\
    \ do\n\t\tlocal character = string[i]\n\t\tif _character_table[character] then\n\
    \t\t\t_character_table[character] = _character_table[character] + 1\n\t\telse\n\
    \t\t\t_character_table[character] = 1\n\t\t\tnum_distinct_char = num_distinct_char\
    \ + 1\n\t\tend\n\tend\n\treturn num_distinct_char\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxlrxomq.lua:14:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmptxlrxomq.lua:14: in local 'candidate'\n\
    \t/tmp/tmptxlrxomq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for i=1,#string do\n    if string.sub(string,i,i) ~= string.sub(string,i,i)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0syniq_8.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp0syniq_8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for _, character in ipairs(string) do\n    table.insert(characters,\
    \ character)\n  end\n  return #characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wz1qdr5.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3wz1qdr5.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local unique_characters = {}\n  for i = 1, #string do\n    table.insert(unique_characters,\
    \ string[i])\n  end\n  return #unique_characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax3p6tou.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpax3p6tou.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = {}\n\tlocal count = 1 -- the count of the number of distinct\
    \ characters found\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpupmvppfa.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tfor c = string.gmatch(\"%[%a]\", function(c) count = count\
    \ + 1 end) do\n\t\treturn count\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprvwi61xa.lua:8: ',' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = nil\n  \n  while true do\n    local _, res = string.gsub('(^[^'\
    \ .. string.upper(string.letters) .. ']+)', '')\n    count = count or string.len(res)\n\
    \    \n    if not res then\n      return count\n    end\n    \n    string = string.gsub(string,\
    \ '(^[' .. string.upper(string.letters) .. '])+', '')\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvnbcg3i1.lua:10:\
    \ bad argument #1 to 'upper' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpvnbcg3i1.lua:10: in local 'candidate'\n\t/tmp/tmpvnbcg3i1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local n = 0\n  for _,c in string.gmatch('^[%a\xE1\xE4\xE2\xE3\xC3\xE2\xE9\xE8\
    \xEB\xED\xEE\xEF\xEC\xEE\xEC\xEC\xEE\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4v0h3_ra.lua:8: unfinished string near ''^[%a\xE1\xE4\xE2\xE3\
    \xC3\xE2\xE9\xE8\xEB\xED\xEE\xEF\xEC\xEE\xEC\xEC\xEE\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\xEC\
    \xEC\xEC\xEC\xEC\xEC\xEC\xEC'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then return 0 end\n  local count = {}\n  for i = 1, #string\
    \ do\n    local ch = string.sub(i, i, i)\n    if count[ch] == nil then\n     \
    \ count[ch] = 0\n    end\n    count[ch] = count[ch] + 1\n  end\n  return #count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2vqmh9b.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpp2vqmh9b.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal seen = {}\n\tfor _, character in ipairs(string) do\n\t\tif not seen[character]\
    \ then\n\t\t\tseen[character] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74c0evcb.lua:20:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp74c0evcb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for i=1,string-1 do\n        if string.sub(string,i,i)\
    \ ~= string.sub(string,i,i) then count = count + 1 end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmps7ps9o.lua:8:\
    \ attempt to perform arithmetic on a string value (local 'string')\nstack traceback:\n\
    \t/tmp/tmpmps7ps9o.lua:8: in local 'candidate'\n\t/tmp/tmpmps7ps9o.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal counts = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1g7qcnrf.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return string.gsub(string.lower(string), '[^a-zA-Z0-9]+', '') -- \"[^a-zA-Z0-9]+\"\
    \ to remove any non-alphanumeric characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gr7o1ak.lua:13:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmp1gr7o1ak.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #string.gsub(string.lower(string), '[%Aa]', '') -- Replace all the letters\
    \ with their lowercase counterparts.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqupmdsn.lua:14:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmpkqupmdsn.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then return 0 end\n  local ret = 0\n  for i=1,#string do\n\
    \    local char = string.sub( string, i, i )\n    ret = ret + #char\n  end\n \
    \ return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgz9dt6d.lua:21:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpbgz9dt6d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct_chars = {}\n  for _, character in string.gmatch(\"[%w]\") do\n\
    \    table.insert(distinct_chars, character)\n  end\n  return #distinct_chars\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6fpgp237.lua:8:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp6fpgp237.lua:8: in local 'candidate'\n\t/tmp/tmp6fpgp237.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return string:gsub('.', function(c) c:lower() end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_6vnucp.lua:13:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpo_6vnucp.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal count = {}\n\tstring.gsub(string, \"([^\" .. string.gsub(string.gsub(string,\
    \ \"%S\", string), \"[^%S]*\", \"\") .. \"]+)\", function(x)\n\t\tlocal i, n =\
    \ x:find(string.upper)\n\t\tif i > 0 then\n\t\t\tcount[i] = count[i] or 1\n\t\t\
    \tcount[i] = count[i] + 1\n\t\telse\n\t\t\tcount[i] = 1\n\t\tend\n\tend)\n\treturn\
    \ table.concat(count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz94e2mu8.lua:8:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpz94e2mu8.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpz94e2mu8.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for _, c in string.gmatch(regex_char_class, 'g') do\n\
    \    table.insert(characters, c:lower())\n  end\n  local distinct_char_count =\
    \ #characters\n  for _, c in string.gmatch(regex_char_class, 'g') do\n    distinct_char_count\
    \ = distinct_char_count - #string.sub(characters, 1, c) -- subtracts the number\
    \ of characters in this set from the total number of characters in the set (which\
    \ gives us a measure of case).\n  end\n  return distinct_char_count\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nIt's not the answer to the question. Also, I don't\
    \ think it is correct in some cases.\n<|/ c |>\n<| c |>\nI agree with you on this\
    \ one, but the OP accepted the answer, so perhaps they figured out how to adapt\
    \ it to their needs.\n<|/ c |>\n<| a dscore=0 |>\nA bit late to the party, but\
    \ I thought I'd offer a simpler solution if you happen to only have to worry about\
    \ letters. \n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvlcz0m8z.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 1\n  for i=1,#string do -- Iterate over the string character\
    \ by character\n    count = count + (string.sub(string,i,i)):lower() == string.sub(string,i,i)\
    \ or 1 -- Check if the current character is the same as the previous one. If so,\
    \ then we're counting 1 more character. Otherwise, we're counting 1 less character\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4d3_88h8.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4d3_88h8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct_chars = {}\n  for k, v in pairs(string) do distinct_chars[v]\
    \ = true end\n  return #distinct_chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvpgfih2v.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpvpgfih2v.lua:8: in local 'candidate'\n\t/tmp/tmpvpgfih2v.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then return nil end\n  local n = 0\n  local c\n  for c in\
    \ string.gmatch(string, \"%c\") do n = n+1 end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprylwj766.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmprylwj766.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local result = {}\n  local i = 1\n  while true do\n    if string.sub(i, i+1)\
    \ ~= string.sub(i, i+1) then\n      if result[string.sub(i, i-1)] == nil then\n\
    \        result[string.sub(i, i-1)] = 1\n      else\n        result[string.sub(i,\
    \ i-1)] = result[string.sub(i, i-1)] + 1\n      end\n    end\n    i = i + 1\n\
    \    if i == string.len(string) then\n      break\n    end\n  end\n  return #result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for _, char in string.gmatch(\"[%a\xE0\xE1\xE2\xE3\xE4\
    \xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\
    \xF9\xFA\xFB\xFC\xFD\xFE\xFF%A\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\
    \xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE%C\xC7\
    \xD1\xC6\xD8%D\xD0\xCC\xCE\xCF%E\xD8\xD2\xD9%F%G%H%I%J%K%L%M%N%O%P%Q%R%S%T%U%V%W%X%Y%Z%_%:%,.#]\"\
    ) do\n        table.insert(chars, char)\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpon9ixh8q.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for _, character in pairs(string) do\n    count = count\
    \ + 1\n  end \n  return count\nend\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters('abc')\n\
    </cell>\n<text>\n2.3 Word count\nThe second step is to make a word count function,\
    \ which takes in a string, splits it into its separate words, and then counts\
    \ the number of times each word appears.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpng4tviqw.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct_chars = {}\n  for i = 1, #string do\n    local char = string[i]\n\
    \    local count = distinct_chars[char] or 0\n    distinct_chars[char] = count\
    \ + 1\n  end\n  return #distinct_chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprm6_ish9.lua:11:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmprm6_ish9.lua:11: in local 'candidate'\n\
    \t/tmp/tmprm6_ish9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return string.gsub(string, \"[^\" .. string.char(string.ascii_lowercase) ..\
    \ \"]+\", \"\"):gsub(\"%S+\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptemrbo0s.lua:7:\
    \ bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmptemrbo0s.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmptemrbo0s.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = {}\n  for i = 1, #string do\n    count[string.sub(i, i)] = count[string.sub(i,\
    \ i)] or 0\n    count[string.sub(i, i)] = count[string.sub(i, i)] + 1\n  end\n\
    \  return #count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7a3tstdn.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp7a3tstdn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  local count = 1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp068230pl.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #string:gsub(\"%a\", function()\n      local chars = {string.byte(string.sub(string,1,1)),\
    \ string.byte(string.sub(string,2,2)), string.byte(string.sub(string,3,3))}\n\
    \      if chars[1] and chars[2] and chars[3] then\n        return chars[1] + chars[2]\
    \ + chars[3]\n      elseif chars[1] then\n        return chars[1]\n      elseif\
    \ chars[2] then\n        return chars[2]\n      elseif chars[3] then\n       \
    \ return chars[3]\n      end\n    end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3od44ort.lua:25:\
    \ expected: 5, actual: 15\nstack traceback:\n\t/tmp/tmp3od44ort.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = 0\n    for _, character in string.gmatch(\"(.)\"\
    ) do\n        distinct_characters = distinct_characters + 1\n    end\n    return\
    \ distinct_characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyk36p5t9.lua:8:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpyk36p5t9.lua:8: in local 'candidate'\n\t/tmp/tmpyk36p5t9.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- This code assumes that the lowercase version of every word in the string\
    \ is the same as the lowercase\n    -- version of that word in the original string.\
    \ If not, the program will crash.\n    local distinct_char_count = 0\n    local\
    \ string_length = string.len(string)\n    for i = 1, string_length do\n      \
    \  local char = string.sub(i, i, string_length)\n        local lowercase = string.lower(char)\n\
    \        if distinct_char_count == 0 or distinct ~= lowercase then\n         \
    \   distinct_char_count = distinct_char_count + 1\n        end\n    end\n    return\
    \ distinct_char_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_89nm4cv.lua:26:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp_89nm4cv.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \t-- Note: This can be implemented in a more elegant way by using a dictionary\n\
    \t--       and iterating over all characters. However, this would require more\n\
    \t--       refactoring.\n\tlocal distinct_characters = 0\n\tlocal characters =\
    \ string.gsub(string, '%w', '') -- Remove all special characters\n\tfor _, character\
    \ in pairs(characters) do\n\t\tdistinct_characters = distinct_characters + 1\n\
    \tend\n\treturn distinct_characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp32qr9nvv.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp32qr9nvv.lua:12: in local 'candidate'\n\t/tmp/tmp32qr9nvv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- Count the number of distinct characters in the given string.\n  -- This\
    \ counts the number of case-insensitive duplicate characters in the string.\n\
    \  --\n  -- >>> count_distinct_characters('aaabbb')\n  -- 4\n  --\n  -- >>> count_distinct_characters('xyzXYZ')\n\
    \  -- 3\n  --\n  -- >>> count_distinct_characters('Jerry')\n  -- 4\n  --\n  --\
    \ >>> count_distinct_characters('Z')\n  -- 1\n  --\n  -- >>> count_distinct_characters('AA')\n\
    \  -- 1\n  --\n  -- >>> count_distinct_characters('AAA')\n  -- 1\n  --\n  -- >>>\
    \ count_distinct_characters('ZZZZ')\n  -- 1\n  --\n  -- >>> count_distinct_characters('Strawberry')\n\
    \  -- 1\n  --\n  -- >>> count_distinct_characters('Z')\n  -- 1\n  --\n  -- >>>\
    \ count_distinct_characters('AB')\n  -- 2\n  --\n  -- >>> count_distinct_characters('a')\n\
    \  -- 1\n  --\n  -- >>> count_distinct_characters('')\n  -- 0\n  --\n  -- >>>\
    \ count_distinct_characters('')\n  -- 0\n  --\n  -- >>> count_distinct_characters(nil)\n\
    \  -- 0\n  --\n  -- >>> count_distinct_characters(nil)\n  -- 0\n  --\n  -- >>>\
    \ count_distinct_characters(nil)\n  -- 0\n  --\n  -- >>> count_distinct_characters(nil)\n\
    \  -- 0\n  --\n  -- >>> count_distinct_characters(nil)\n  -- 0\n  --\n  -- >>>\
    \ count_distinct_characters(nil)\n  -- 0\n  --\n  -- >>> count_distinct_characters(nil)\n\
    \  -- 0\n  --\n  -- >>> count_distinct_characters(nil)\n  -- 0\n  --\n  -- >>>\
    \ count_distinct_characters(nil)\n  -- 0\n  --\n  -- >>> count_distinct_characters(nil)\n\
    \  -- 0\n  --\n  -- >>> count_distinct_characters(nil)\n  -- 0\n  --\n  -- >>>\
    \ count_distinct_characters(nil)\n  -- 0\n  --\n  -- >>> count_distinct_characters(nil)\n\
    \  -- 0\n  --\n  -- >>> count_distinct_characters(' ABC')\n  -- 1\n  --\n  --\
    \ >>> count_distinct_characters('ABC')\n  -- 2\n  --\n  -- >>> \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmxpemafe.lua:106: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal total = 0\n\tlocal currentChar = string.sub(1,1)\n\tlocal prevChar = string.sub(1,1)\n\
    \tfor i = 1, string.len() do\n\t\tif currentChar ~= prevChar then\n\t\t\ttotal\
    \ = total + 1\n\t\tend\n\t\tcurrentChar = string.sub(i,1)\n\t\tprevChar = currentChar\n\
    \tend\n\treturn total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zjdpzms.lua:10:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp4zjdpzms.lua:10: in local 'candidate'\n\t/tmp/tmp4zjdpzms.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for _ in string:gmatch(\"[^%s]+\") do count = count + 1\
    \ end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpced6lrvf.lua:16:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpced6lrvf.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for _, character in pairs(string) do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbpg8as_3.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpbpg8as_3.lua:8: in local 'candidate'\n\t/tmp/tmpbpg8as_3.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #string ~= 0 and (string.lower:gsub(\".\", function (char)\n    return\
    \ string.lower:sub(string.lower:find(char, 1, true) + 1, string.lower:find(char,\
    \ string.lower:len(char), true) - string.lower:find(char, string.lower:len(char),\
    \ true) - 1)\n  end)^0) or 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3ns9a98.lua:15:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpt3ns9a98.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then\n    return 0\n  end\n  local count = 0\n  local uppercase\n\
    \  local lowercase\n  local capital\n  local lower\n  local i\n  for i = 1, #string\
    \ do\n    uppercase = string.upper(string, i)\n    lowercase = string.lower(string,\
    \ i)\n    capital  = string.sub(string, i, i)\n    lower    = string.sub(string,\
    \ i, i)\n    if uppercase ~= nil then\n      if uppercase == lowercase and uppercase\
    \ ~= capital  and lowercase ~= upper then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1uy690bb.lua:34:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp1uy690bb.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for character in string.gmatch('([A-Z]+)') do\n    \
    \    if string.match(string, character) == nil then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswqzrw6s.lua:8:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpswqzrw6s.lua:8: in local 'candidate'\n\t/tmp/tmpswqzrw6s.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string.len == 0 then\n    return 0\n  end\n  local counter = 1\n  local\
    \ new_string\n  local last_char\n  for char in string do\n    if not new_string\
    \ then\n      new_string = char\n      last_char = char\n    else\n      if last_char\
    \ == char then\n        counter = counter + 1\n      else\n        new_string\
    \ = new_string .. last_char\n        last_char = char\n        counter = 1\n \
    \     end\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpypun6znu.lua:13:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpypun6znu.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpypun6znu.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = {}\n  for _, c in pairs(string) do\n    count[c] = count[c] +\
    \ 1 if not count[c] or count[c] < string.len(c) then\n      count[c] = 1\n   \
    \ end\n  end\n  return table.concat(count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjk4z3j21.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpjk4z3j21.lua:8: in local 'candidate'\n\t/tmp/tmpjk4z3j21.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- We use ascii table for fast lookup\n  local char_count = 0\n  for _, v in\
    \ ipairs(string.gmatch'([%a])') do\n    char_count = char_count + 1\n  end\n \
    \ return char_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8dkkatm.lua:9:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpe8dkkatm.lua:9: in local 'candidate'\n\t/tmp/tmpe8dkkatm.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for _, char in string.gmatch(string, '.') do\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_qd5hee.lua:19:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp1_qd5hee.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for _, character in ipairs(string) do\n    table.insert(characters,\
    \ character)\n  end\n  local character_count = #characters\n  for _, character\
    \ in ipairs(string) do\n    character_count = character_count - 1\n    if character_count\
    \ == 0 then\n      return character_count - 1\n    end\n  end\n  return character_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpty0pnppi.lua:25:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpty0pnppi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal number_of_unique_characters = 0\n\tfor _, char in string.gmatch(string,\
    \ '%a+') do\n\t\tnumber_of_unique_characters = number_of_unique_characters + 1\n\
    \tend\n\treturn number_of_unique_characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp115udw1u.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp115udw1u.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local unique = {}\n  for _, char in string:gmatch'(.-)' do unique[tolower(char)]\
    \ = true end\n  local count = 0\n  for char in unique:keys() do count = count\
    \ + 1 end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnkc7_kzp.lua:8:\
    \ attempt to call a nil value (global 'tolower')\nstack traceback:\n\t/tmp/tmpnkc7_kzp.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpnkc7_kzp.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if string.len(string) == 0 then return 0 end\n    local chars = {}\n    local\
    \ count = 0\n    for i = 1, string.len(string) do\n        char = string.sub(\
    \ string, i, i)\n        if not chars[char] then\n            count = count +\
    \ 1\n            table.insert( chars, char)\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd37hd_b4.lua:25:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpd37hd_b4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  local count = 1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbvek9a83.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    local char_map = {}\n    \n    for _, c in ipairs(string)\
    \ do\n        table.insert(characters, c)\n        char_map[c] = true\n    end\n\
    \    \n    for _, c in ipairs(characters) do\n        char_map[c] = nil\n    end\n\
    \    \n    return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxz9xav6.lua:26:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmplxz9xav6.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- Use a lookup table to keep track of character frequency\n  local counts\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpodv9emug.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   if string == nil then\n      string = \"\"\n   end\n   local characters =\
    \ string.gsub(string.gsub(string, '[%a~%A~%w~%W~%p~%P~%_~%-~%-~%w~%W~%p~%P~%_~%-~%-~%p~%P~%_~%-~%-~%]',\
    \ ''), '[~]', '') -- get rid of special chars\n   local lengths = {}\n   for i\
    \ = 1, #characters do\n      local length = #characters[i]\n      if lengths[length]\
    \ == nil then\n         lengths[length] = 1\n      else\n         lengths[length]\
    \ = lengths[length] + 1\n      end\n   end\n   return #lengths\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf692259t.lua:10:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpf692259t.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpf692259t.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for i = 1, #string do\n        if string.sub(string,\
    \ i, i) ~= string.sub(string, i - 1, i) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe8b8kfn.lua:20:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmpxe8b8kfn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   local uniques = {}\n   for _, v in ipairs(string) do\n      if uniques[v]\
    \ == nil then\n         uniques[v] = 1\n      else\n         uniques[v] = uniques[v]\
    \ + 1\n      end\n   end\n   return #uniques\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg235h7s6.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpg235h7s6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local result = 0\n  for i = 1, #string do\n    local char = string.sub(i, i)\n\
    \    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u'\
    \ then\n      result = result + 1\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j47p408.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp0j47p408.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- Iterate over every character in the string\n  local count = 1\n  for _,character\
    \ in string.gmatch(\"(.)(.)\") do\n    -- If the character matches the previous\
    \ character, increment the count\n    if string ~= character and string.gsub(string,\
    \ '^' .. character .. '$') ~= '^' .. character .. '$' then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0y12t06o.lua:9:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp0y12t06o.lua:9: in local 'candidate'\n\t/tmp/tmp0y12t06o.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string.sub or string.gsub or string.match then\n    return #string.gsub(string.lower(string),\
    \ '[%a]+', '')\n  else\n    return #string\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7egxszc4.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp7egxszc4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local c = 0\n    for c = 1, #string do\n        if string.sub(string,c,c)\
    \ == string.sub(string,c,c) then\n            c = c + 1;\n        end\n    end\n\
    \    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yrz352z.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp7yrz352z.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then\n    return 0\n  end\n  local count = 0\n  local prevChar\
    \ = nil\n  for i=1, #string do\n    if string.sub(i, i) ~= prevChar then\n   \
    \   count = count + 1\n    end\n    prevChar = string.sub(i, i)\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmthafbpz.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpmthafbpz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if type(string) ~= 'string' then return 0 end\n  local n = 1\n  for c in string.gmatch(string,\
    \ \"%W\") do\n    n = n + 1 -- Count each distinct character without considering\
    \ case\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjypyhjs1.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjypyhjs1.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local result = 1\n  for _ in string.gmatch(\"%a\", '%W') do\n    result = result\
    \ + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0zjcs0d.lua:17:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpu0zjcs0d.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #set(string) - #set(key:lower(string))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9nhq1hgo.lua:7:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmp9nhq1hgo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9nhq1hgo.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local length = {}\n    for i=1,#string do\n        if string.sub(i, 1, i)~=string.sub(i,\
    \ #string) then\n            length[string.sub(i, 1, i)] = 0\n        else\n \
    \           length[string.sub(i, 1, i)]+=1\n        end\n    end\n    return #length\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqtqvxphh.lua:12: syntax error near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local seen = {}\n  local distinct = 0\n  for _, char in pairs(string) do\n\
    \    if seen[char] ~= nil then\n      seen[char] = nil\n      distinct += 1\n\
    \    end\n    seen[char] = true\n  end\n  return distinct\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9lmxbb65.lua:12: syntax error near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for _, char in pairs(string) do\n        if string.match(string.lower(char),\
    \ '[%z]') then count = count + 1 end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_wvhwnra.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp_wvhwnra.lua:8: in local 'candidate'\n\t/tmp/tmp_wvhwnra.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if string == nil then return 0 end\n    local characters = {}\n    local\
    \ result = 0\n    for i = 1, string.n do\n        local char = string.sub(i, i)\n\
    \        if not characters[char] then\n            characters[char] = 1\n    \
    \    else\n            characters[char] = characters[char] + 1\n        end\n\
    \    end\n    for char, count in pairs(characters) do\n        if count > 1 then\n\
    \            result = result + 1\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9gf02f2_.lua:10:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmp9gf02f2_.lua:10: in\
    \ local 'candidate'\n\t/tmp/tmp9gf02f2_.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal hash = {}\n\tfor _, char in string.gmatch(\"[%a]+\") do\n\t\thash[char]\
    \ = hash[char] + 1 -- Increment the counter for each character in the string\n\
    \tend\n\treturn #hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps54jin9e.lua:8:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmps54jin9e.lua:8: in local 'candidate'\n\t/tmp/tmps54jin9e.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \t-- Count distinct characters in a string\n\t-- Example\n\t-- >>> count_distinct_characters('abracadaba')\n\
    \t-- 4\n\t-- >>> count_distinct_characters('abracadaba')\n\t-- 5\n\t-- >>> count_distinct_characters('abracadaba')\n\
    \t-- 7\n\t-- >>> count_distinct_characters('abracadaba')\n\t-- 8\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprk259vf6.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if not string then return 0 end\n    local char_mapping = {}\n    local count\
    \ = 1\n    for character in string.gmatch(\"[%w]\") do\n        table.insert(char_mapping,\
    \ character)\n        count = count + 1\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgni3vx7s.lua:10:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpgni3vx7s.lua:10: in local 'candidate'\n\t/tmp/tmpgni3vx7s.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal n = 0\n\tstring.gsub(string, \"[%w]\", function(c)\n\t\tn = n + 1\n\t\
    end)\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8s5e922.lua:19:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpi8s5e922.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnhvjabhp.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #string + 1 -- This is necessary for cases like \"Jerry\" where J is\
    \ counted as a distinct character\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b785waa.lua:13:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9b785waa.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal lowercase_letters = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpacy2ny93.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \treturn string.gsub(string.gsub(string, '(.)', '%1'), '.', '~0')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_uvzhwx.lua:13:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpm_uvzhwx.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for i = 1, #string do\n        if string.sub(i, i, i)\
    \ ~= string.sub(i, i) then count = count + 1 end\n    end\n    return count\n\
    end\n</cell>\n<text>\nExercise 3\nWhat is the sum of the digits in each number\
    \ from $0$ to $10$?\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu0ho809g.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct = 0\n  for _ in string.gmatch(string, '(.)') do\n    distinct\
    \ = distinct + 1\n  end\n  return distinct\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4_7x966.lua:19:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpc4_7x966.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = { }\n    for c in string.gmatch(string, \"%a\") do\n      \
    \  count[c] = count[c] + 1 or 1\n    end\n    return #count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptw3iarl9.lua:9:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmptw3iarl9.lua:9: in local 'candidate'\n\t/tmp/tmptw3iarl9.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string.count then\n    return string.count(string.upper, string) + string.count(string.lower,\
    \ string)\n  else\n    return string.upper:len(string) + string.lower:len(string)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5wgpcvku.lua:10:\
    \ attempt to index a function value (field 'upper')\nstack traceback:\n\t/tmp/tmp5wgpcvku.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5wgpcvku.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local unique, count = {}, {}\n    for _, _, _, character in string.gmatch('^(.)(.)')\
    \ do\n        if unique[character] ~= nil then\n            unique[character]\
    \ = unique[character] + 1\n        else\n            unique[character] = 1\n \
    \       end\n    end\n    for _, character in pairs(unique) do\n        count[character]\
    \ = count[character] + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2otrhvm5.lua:8:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp2otrhvm5.lua:8: in local 'candidate'\n\t/tmp/tmp2otrhvm5.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct = 0\n    for i=1,string.leng do\n        if string.sub(i,i,i)\
    \ ~= string.sub(i,i,i) then -- not case-sensitive\n            distinct  = distinct\
    \ + 1\n        end\n    end\n    return distinct\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph9iqh5kb.lua:8:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmph9iqh5kb.lua:8: in\
    \ local 'candidate'\n\t/tmp/tmph9iqh5kb.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then return 0 end\n  local count = 0\n  for c in string.gmatch(\"\
    [^%w]\") do\n    if string.find(string, \"[%w]\", string.len(c), true) ~= nil\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgd5kpysx.lua:9:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpgd5kpysx.lua:9: in local 'candidate'\n\t/tmp/tmpgd5kpysx.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if not string then return 0 end\n    local count = 0\n    for i = 1, #string\
    \ do\n        if string.sub(i, i, i) ~= nil then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpen8at65l.lua:22:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpen8at65l.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return string.gsub(string, '[^%s]+', 1, string, 'jo')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsn72lwr4.lua:7:\
    \ bad argument #4 to 'gsub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpsn72lwr4.lua:7: in local 'candidate'\n\t/tmp/tmpsn72lwr4.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   -- Return an iterator over the characters in the string that have different\
    \ case from all other characters.\n   local chars = {}\n   for _,c in ipairs(string)\
    \ do\n      if chars[c] then\n         chars[c] = chars[c] + 1\n      else\n \
    \        chars[c] = 1\n      end\n   end\n   return table.concat(chars)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5wbyli5.lua:22:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpg5wbyli5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #set(string):gsub(\"[%A]\", \"\"):gsub(\"[%z]\", \"\"):gsub(\"[^%a%z]\"\
    , \"\"):gsub(\"[^%A%Z]\", \"\"):gsub(\"[^%z%A]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd990liyv.lua:7:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpd990liyv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd990liyv.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local result = 1\n  for i = 1, #string do\n    local char = string[i]\n   \
    \ local lower = char:lower()\n    local upper = char:upper()\n    if lower and\
    \ lower ~= upper then\n      result = result + 1\n    else\n      result = result\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagb5zv8g.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpagb5zv8g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for i = 1, string.len do\n    table.insert(characters,\
    \ string.sub(i, 1, i))\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk7i0nxs3.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal hash = {}\n\tfor _,c in ipairs(string) do\n\t\thash[c] = hash[c] + 1 or\
    \ 1\n\tend\n\treturn #hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwl00xnu5.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwl00xnu5.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string.lower(string) ~= string then\n    local table = {}\n    for i = string.len(string),\
    \ 0, -1 do\n      table[i] = string[i]\n    end\n    table.sort(table)\n    local\
    \ count = 0\n    for i = 1, table.len() do\n      if i ~= 1 then\n        count\
    \ = count + 1\n      end\n    end\n    return count\n  end\n  return string.len(string)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1mff8uk1.lua:12:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp1mff8uk1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp1mff8uk1.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- This works by first counting the number of distinct characters, then adding\
    \ up all the characters\n  -- that follow each distinct character.\n  -- This\
    \ algorithm will find all the characters (regardless of the case) that follow\
    \ each distinct character.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7qsu3hw3.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal c = 0\n\tfor i = 1, #string do c = c + (string.sub(string,i,i) == string.sub(string,i,i)\
    \ end) end\n\treturn c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpftc1w5uo.lua:8: ')' expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for c in string.gmatch( string, \"%a\") do\n    count =\
    \ count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8z2jq6y.lua:19:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp_8z2jq6y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string.gmatch(string, '%c') do\n\
    \        table.insert(characters, character)\n    end\n    return table.getn(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq05mxeop.lua:11:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpq05mxeop.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq05mxeop.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   -- First, find the length of the string:\n   local len = 0\n   for _, char\
    \ in string:gmatch('%z') do len = len + 1 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzk2w6d14.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if not string then\n        return 0\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6si4_d76.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- We start by counting the characters in the string without regard to case\n\
    \  local count = 1\n  for i=1, #string do\n    if string.sub(i, i) ~= string.sub(string[i],\
    \ string[i]) then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufts1p8l.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpufts1p8l.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #({}) - count_characters(string)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm5xl254d.lua:7:\
    \ attempt to call a nil value (global 'count_characters')\nstack traceback:\n\t\
    /tmp/tmpm5xl254d.lua:7: in local 'candidate'\n\t/tmp/tmpm5xl254d.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #string.gsub(string.lower(string), '[%z\\1-\\127]', '')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpih5k4b.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmphpih5k4b.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal i = 0\n\tlocal count = 0\n\tfor c in string.gmatch(string, \"([^\\n]+)\"\
    ) do\n\t\tcount = count + 1\n\t\ti = i + 1\n\t\tif i % 26 == 0 then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbif66ri.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmppbif66ri.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- Get the number of distinct characters in the string\n  local count = 0\n\
    \  for _, character in string.gmatch('([A-Z]+)') do\n    count = count + 1\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqtl2r1_u.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string.len > 0 then\n    local alphabet = {}\n    for letter in string.gmatch\
    \ '[%a]:([%a])+', 'match' do\n      alphabet[letter] = true\n    end\n    return\
    \ #alphabet\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lhuoe1p.lua:7:\
    \ attempt to compare number with function\nstack traceback:\n\t/tmp/tmp6lhuoe1p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6lhuoe1p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if string == nil then\n        return 0\n    end\n    if string.bytes ==\
    \ nil then\n        return #string\n    end\n    local count = 0\n    local letter\n\
    \    for letter, index in string.gmatch(string, \"(%a+)\") do\n        if letter\
    \ ~= 'A' and letter ~= 'a' and letter ~= '0' then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7zua73v.lua:28:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpn7zua73v.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local output = {}\n  for i, c in ipairs(string) do\n    table.insert(output,\
    \ tostring(c))\n  end\n  return #output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyofs64_y.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpyofs64_y.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return string.gsub(string.gsub(string, '([^A-Za-z])', ''), '([A-Za-z])', function()\
    \ return #1 end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxc972ih.lua:13:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpxxc972ih.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local counts = {}\n  for char in string:gmatch'[%s]'\n    do\n      counts[#counts+1]\
    \ = #char\n    done\n  return #counts\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe3czcfm_.lua:12: syntax error near 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local counts = {}\n    for i = 1, string.len do\n        local char = string[i]\n\
    \        local count = counts[char]\n        counts[char] = count or 1\n    end\n\
    \    return #counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0t8g6vc.lua:8:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpa0t8g6vc.lua:8: in\
    \ local 'candidate'\n\t/tmp/tmpa0t8g6vc.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local result = 0\n  for _, ch in ipairs(string:gsub(\"%l\", \"\")) - \"_\"\
    \ do\n    local lowercase = ch:lower()\n    local uppercase = ch:upper()\n   \
    \ if lowercase == uppercase then\n      result = result + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphd3buvut.lua:8:\
    \ attempt to perform arithmetic on a function value\nstack traceback:\n\t/tmp/tmphd3buvut.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphd3buvut.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return string\n        :gsub(\"([^\" .. string.char(65) .. \"]+)\", function\
    \ (_) return string.upper(_):byte() end)\n        :gsub(\"([^\" .. string.char(97)\
    \ .. \"]+)\", function (_) return string.lower(_):byte() end)\n        :gsub(\"\
    ^%W\", function (_) return _:byte() end)\n        :gsub(\"%W\", function (_) return\
    \ string.lower(_):byte() end)\n        :byte()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc15_j9p.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpwc15_j9p.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for _, chars in pairs(string:gsub(\"%W\", \"\")) do\n\
    \        count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzl_aulbp.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpzl_aulbp.lua:8: in local 'candidate'\n\t/tmp/tmpzl_aulbp.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #({})+#string.gsub(string.lower(string), '%a'):gsub('(.)%W*$',string[#string]+'\\\
    1')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf9z1s9m.lua:7:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpdf9z1s9m.lua:7: in local 'candidate'\n\t/tmp/tmpdf9z1s9m.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local total = 0\n  for char in string.gmatch (string, '%a') do\n    total =\
    \ total + 1\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkrld54b.lua:19:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpvkrld54b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct = 0\n  for index, letter in string.gmatch(\"^%a\") do\n    local\
    \ character = string.char(letter)\n    if character ~= letter then\n      distinct\
    \ = distinct + 1\n    end\n  end\n  return distinct\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgtis9o9g.lua:8:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpgtis9o9g.lua:8: in local 'candidate'\n\t/tmp/tmpgtis9o9g.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 1\n  for i = 1, #string do\n    if string[i]~=string[i+1] then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3791r6k_.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3791r6k_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string.gmatch(string, \".\") do\n        if\
    \ chars[c] == nil then\n            chars[c] = 0\n        end\n        chars[c]\
    \ = chars[c] + 1\n    end\n    return #chars\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppav1gylp.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppav1gylp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- We assume that input string is lower case\n  -- We also assume that input\
    \ string is always composed of lower case alphabets\n  -- (ASCII letters only)\n\
    \  if string:len() < 1 then\n    return 0\n  end\n  local n = 0\n  for i = 1,\
    \ string:len() do\n    n = n + count_distinct_characters_helper(string, i)\n \
    \ end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps94_y0h8.lua:15:\
    \ attempt to call a nil value (global 'count_distinct_characters_helper')\nstack\
    \ traceback:\n\t/tmp/tmps94_y0h8.lua:15: in local 'candidate'\n\t/tmp/tmps94_y0h8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   local characters = {}\n   for _,v in ipairs(string:gsub(\"%w\",\"%w\"):gsub(\"\
    %d\",\"%d\"):gsub(\"%f\",\"%f\")):gsub(\"[<>]\",\"%\"):gsub(\"%w\",\"%w\"):gsub(\"\
    %d\",\"%d\"):gsub(\"%f\",\"%f\") do\n      table.insert(characters,v)\n   end\n\
    \   return table.sort(characters)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacfvg42g.lua:8:\
    \ missing '[' after '%f' in pattern\nstack traceback:\n\t/tmp/tmpacfvg42g.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpacfvg42g.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal distinct = 0\n\tfor _, char in string.gmatch('[^' .. string.upper(string.char(#string.char))\
    \ .. ']+') do\n\t\tdistinct = distinct + 1\n\tend\n\treturn distinct\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwlrbidnz.lua:8:\
    \ attempt to get length of a function value (field 'char')\nstack traceback:\n\
    \t/tmp/tmpwlrbidnz.lua:8: in local 'candidate'\n\t/tmp/tmpwlrbidnz.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return count_distinct_characters_helper(string, \"\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw5hgqwo0.lua:7:\
    \ attempt to call a nil value (global 'count_distinct_characters_helper')\nstack\
    \ traceback:\n\t/tmp/tmpw5hgqwo0.lua:7: in local 'candidate'\n\t/tmp/tmpw5hgqwo0.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #string > 0 and (#string - 1) or 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyev_rt0a.lua:14:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmpyev_rt0a.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \t-- The string must only consist of uppercase or lowercase alphabets\n\tassert(string\n\
    \t\t:gsub(\"%a\", function()\n\t\t\treturn '%A'\n\t\tend)\n\t\t:gsub(\"%A\", function()\n\
    \t\t\treturn '%a'\n\t\tend)\n\t\t:gsub(\"%A\", function()\n\t\t\treturn '%A'\n\
    \t\tend)\n\t\t:gsub(\"%c\", function()\n\t\t\treturn '%C'\n\t\tend)\n\t\t:gsub(\"\
    %C\", function()\n\t\t\treturn '%c'\n\t\tend)\n\t\t:gsub(\"%d\", function()\n\t\
    \t\treturn '%D'\n\t\tend)\n\t\t:gsub(\"%D\", function()\n\t\t\treturn '%d'\n\t\
    \tend)\n\t\t:gsub(\"%e\", function()\n\t\t\treturn '%E'\n\t\tend)\n\t\t:gsub(\"\
    %E\", function()\n\t\t\treturn '%e'\n\t\tend)\n\t\t:gsub(\"%f\", function()\n\t\
    \t\treturn '%F'\n\t\tend)\n\t\t:gsub(\"%F\", function()\n\t\t\treturn '%f'\n\t\
    \tend)\n\t\t:gsub(\"%g\", function()\n\t\t\treturn '%G'\n\t\tend)\n\t\t:gsub(\"\
    %G\", function()\n\t\t\treturn '%g'\n\t\tend)\n\t\t:gsub(\"%h\", function()\n\t\
    \t\treturn '%H'\n\t\tend)\n\t\t:gsub(\"%H\", function()\n\t\t\treturn '%h'\n\t\
    \tend)\n\t\t:gsub(\"%i\", function()\n\t\t\treturn '%I'\n\t\tend)\n\t\t:gsub(\"\
    %I\", function()\n\t\t\treturn '%i'\n\t\tend)\n\t\t:gsub(\"%j\", function()\n\t\
    \t\treturn '\\a'\n\t\tend)\n\t\t:gsub(\"%j\", function()\n\t\t\treturn '\\a'\n\
    \t\tend)\n\t\t:gsub(\"%j\", function()\n\t\t\treturn '\\a'\n\t\tend)\n\t\t:gsub(\"\
    %j\", function()\n\t\t\treturn '\\a'\n\t\tend)\n\t\t:gsub(\"%j\", function()\n\
    \t\t\treturn '\\a'\n\t\tend)\n\t\t:gsub(\"%k\", function()\n\t\t\treturn '%K'\n\
    \t\tend)\n\t\t:gsub(\"%K\", function()\n\t\t\treturn '%k'\n\t\tend)\n\t\t:gsub(\"\
    %l\", function()\n\t\t\treturn '%L'\n\t\tend)\n\t\t:gsub(\"%L\", function()\n\t\
    \t\treturn '%l'\n\t\tend)\n\t\t:gsub(\"%m\", function()\n\t\t\treturn '%M'\n\t\
    \tend)\n\t\t:gsub(\"%M\", function()\n\t\t\treturn '%m'\n\t\tend)\n\t\t:\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpydumke4w.lua:94: function arguments expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local has_upper_case = false\n    local has_lower_case\
    \ = false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb0kadddu.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal distinct_count = 0\n\tfor _, c in string.gmatch('([A-Za-z0-9]+)') do\n\
    \t\tdistinct_count = distinct_count + string.len(c) - string.len(tolower(c))\n\
    \tend\n\treturn distinct_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa146e_6y.lua:8:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpa146e_6y.lua:8: in local 'candidate'\n\t/tmp/tmpa146e_6y.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #set(string:gsub(\"%c\",function()\n        local ln = string.len(string.sub(string,\
    \ 1, string.len(string)))\n        return string.char(tonumber(string.sub(string,\
    \ 1, ln)))\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpehew7plo.lua:10: 'end' expected (to close 'function' at line\
    \ 7) near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i=1,string.len do\n        table.insert(characters,\
    \ string.sub(string,i,i))\n    end\n    return #characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxzuur4w0.lua:8:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpxzuur4w0.lua:8: in\
    \ local 'candidate'\n\t/tmp/tmpxzuur4w0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return math.ceil(#string / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2z9pzdn.lua:14:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp_2z9pzdn.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp82klskx.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tfor i = 1, #string do\n\t\tcount = count + 1\n\t\tif string.sub(i,\
    \ 1, i) ~= string.sub(i, 1, i) then\n\t\t\treturn count\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjjak22h.lua:22:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmppjjak22h.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   local distinct_chars = {}\n   for _ = 1, string.len() do\n      if distinct_chars[string.sub(string,1,1)]\
    \ then\n         distinct_chars[string.sub(string,1,1)] = distinct_chars[string.sub(string,1,1)]\
    \ + 1\n      else\n         distinct_chars[string.sub(string,1,1)] = 1\n     \
    \ end\n   end\n   return table.concat(distinct_chars, \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxeqs2r1d.lua:8:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpxeqs2r1d.lua:8: in local 'candidate'\n\t/tmp/tmpxeqs2r1d.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string.gmatch(string, \".\") do\n        if\
    \ chars[c] == nil then\n            chars[c] = 1 -- start counting from 1, not\
    \ 0\n        else\n            chars[c] = chars[c] + 1 -- count how many times\
    \ this character was seen\n        end\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvpsxtqjm.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then return 0 end\n  local characters = {}\n  for character\
    \ in string.gmatch'([^%s]+)' do\n    table.insert(characters, character)\n  end\n\
    \  local uniques = {}\n  table.sort(characters)\n  local character_index = 1\n\
    \  for _, character in ipairs(characters) do\n    if character_index == 1 then\n\
    \      table.insert(uniques, character)\n    else\n      if uniques[character_index\
    \ - 1] == character then\n        uniques[character_index] = nil\n      end\n\
    \    end\n    character_index = character_index + 1\n  end\n  return table.concat(uniques)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptlf6pgeg.lua:9:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmptlf6pgeg.lua:9: in local 'candidate'\n\t/tmp/tmptlf6pgeg.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then return 0 end\n  local counts = { }\n  for i = 1, #string\
    \ do\n    local character = string.sub(i, i)\n    if counts[character] == nil\
    \ then counts[character] = 1 else counts[character] = counts[character] + 1 end\n\
    \  end\n  return #counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0zapofq.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpp0zapofq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal chars = {}\n\tfor i, v in ipairs(string) do\n\t\tif chars[v] == nil then\n\
    \t\t\tchars[v] = true\n\t\t\tchars[string.lower(v)] = true\n\t\t\tchars[string.upper(v)]\
    \ = true\n\t\tend\n\tend\n\tlocal count = 0\n\tfor _, char in pairs(chars) do\n\
    \t\tcount = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dcgii0d.lua:26:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp8dcgii0d.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 1\n    for i = 1, #string do\n        count = count + 1\n \
    \       if string:sub(i, i):upper() == string:sub(i, i):lower() then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuveu20cw.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuveu20cw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        table.insert(characters,\
    \ string.sub(i, i))\n    end\n    local result = 0\n    for _, character in ipairs(characters)\
    \ do\n        if characters[character] ~= nil then\n            character = tolower(character)\n\
    \            result = result + 1\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9if8xku.lua:25:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmph9if8xku.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- The original implementation was written by Wasif Hasan (removed@example.com)\n\
    \  local counts = {}\n  for i = 1, #string do\n    local letter = string.sub(i,\
    \ i)\n    local value = string.sub(i, i + 1)\n    if counts[letter] == nil then\n\
    \      counts[letter] = 0\n    end\n    counts[letter] = counts[letter] + 1\n\
    \  end\n  local result = 0\n  for letter, count in pairs(counts) do\n    result\
    \ = result + count * letter\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplh02ntoi.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'letter')\nstack traceback:\n\
    \t/tmp/tmplh02ntoi.lua:19: in local 'candidate'\n\t/tmp/tmplh02ntoi.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local values = {}\n  for _, c in ipairs(string) do\n    if values[c] == nil\
    \ then\n      values[c] = 0\n    end\n    values[c] = values[c] + 1\n  end\n \
    \ return #values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprkiqz4z.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpprkiqz4z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = {}\n    for i = 1, #string do\n        local\
    \ char = string.sub(i, i)\n        -- TODO: Add support for other languages\n\
    \        if char then\n            if char == '~' then\n                -- TODO:\
    \ Support unicode characters\n                -- local count = string.len(string.gsub(string.sub(string,\
    \ '%', '%%'), '+'))\n                local count = string.len(string.gsub(string.sub(string,\
    \ '%', '%%'), '+', '?'))\n                distinct_characters[char] = count\n\
    \            else\n                distinct_characters[char] = string.len(char)\n\
    \            end\n        end\n    end\n    table.sort(distinct_characters)\n\
    \    return #distinct_characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfigv6br6.lua:30:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpfigv6br6.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local counts = {}\n    for _, c in string.gmatch(string, \"([^ ]+)\") do\n\
    \        counts[c] = counts[c] + 1 or 1\n    end\n    return #counts\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_yfhflg.lua:9:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpw_yfhflg.lua:9: in local 'candidate'\n\t/tmp/tmpw_yfhflg.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local counts = {}\n    for character in string.gmatch('^%l') do\n       \
    \ counts[character] = counts[character] + 1 or 1\n    end\n    return #counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmcarmlmu.lua:8:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpmcarmlmu.lua:8: in local 'candidate'\n\t/tmp/tmpmcarmlmu.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local unique = {}\n    local count = 0\n    for _,s in ipairs(string) do\n\
    \        if unique[s] ~= nil then\n            count = count + 1\n        else\n\
    \            unique[s] = true\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49qduamt.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp49qduamt.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #string - count_distinct_characters(select_lower(string)) -- count distinct\
    \ characters, minus lower case letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukyrfbt7.lua:7:\
    \ attempt to call a nil value (global 'select_lower')\nstack traceback:\n\t/tmp/tmpukyrfbt7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpukyrfbt7.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return count_distinct_characters_internal(string, true, true, true, true, nil)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc7guvopx.lua:7:\
    \ attempt to call a nil value (global 'count_distinct_characters_internal')\n\
    stack traceback:\n\t/tmp/tmpc7guvopx.lua:7: in local 'candidate'\n\t/tmp/tmpc7guvopx.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if not string then return 0 end\n    local counts = makedict()\n    local\
    \ c = 0\n    for _, c in ipairs(string) do\n        if counts[c] ~= nil then counts[c]\
    \ = counts[c] + 1 end\n        counts[c] = counts[c] + 1\n    end\n    return\
    \ #counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_9v9115.lua:8:\
    \ attempt to call a nil value (global 'makedict')\nstack traceback:\n\t/tmp/tmpi_9v9115.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpi_9v9115.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local currentChar, previousChar = '', ''\n    for i\
    \ = 1, #string do\n        currentChar = string[i]\n        if previousChar ~=\
    \ '' then\n            if currentChar ~= previousChar then\n                count\
    \ = count + 1\n            end\n        end\n        previousChar = currentChar\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzeq9ysb.lua:25:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpnzeq9ysb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local distinct_characters = {}\n  for _, character in pairs(string) do\n  \
    \  table.insert(distinct_characters, character)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0_3yev2h.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjl3xjz6l.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string.match('^%a+$', string) then\n    return #string\n  end\n  local count\
    \ = 0\n  for i = 1, #string do\n    local char = string.sub(i, i)\n    if string.match(string,\
    \ '[%a'..char..'z]+') then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsghoh59d.lua:25:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpsghoh59d.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if string.len() == 0 then\n        return 0\n    end\n    local result =\
    \ 0\n    for i = 1, string.len() do\n        local char = string.sub(i, i, i)\n\
    \        result = result + 1\n        if string.find(string.lower(char), string.lower(char))\
    \ then\n            result = result + 1\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6md92n3.lua:7:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpy6md92n3.lua:7: in local 'candidate'\n\t/tmp/tmpy6md92n3.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \   if string == nil then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaqn8nkre.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for i = 1, #string do\n    count = count + (string:sub(i):lower():match(\"\
    [%a]+\"):len())\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4t22vtg.lua:18:\
    \ expected: 5, actual: 15\nstack traceback:\n\t/tmp/tmpb4t22vtg.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == nil then return 0 end\n  local count, letter, count = 0, 0, 1\n\
    \  for letter in string:gmatch(\"%a\") do\n    if letter == letter then count\
    \ = count + 1 else count = 1 end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30qaat3r.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp30qaat3r.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == '' then\n    return 1\n  end\n  local total = 0\n  local current\
    \ = ''\n  for i = 1, #string do\n    if current:sub(1, 1) == string.sub(i, i)\
    \ then\n      current = current .. string.sub(i, i)\n    else\n      total = total\
    \ + 1\n      current = string.sub(i, i)\n    end\n  end\n  return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrb4r7nm.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmrb4r7nm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for char in string.gmatch(string, \"%a\") do\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufysxhp6.lua:19:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpufysxhp6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for _, value in ipairs(string:gsub('%D+', '')) do\n\
    \        if _ == value then\n            count = count + 1\n        else\n   \
    \         count = 0\n            break\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q744ci5.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp9q744ci5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string.gmatch(\"[%a%A]+\", \"g\") do\n    if\
    \ chars[char] == nil then\n      chars[char] = 1\n    else\n      chars[char]\
    \ = chars[char] + 1\n    end\n  end\n  return #chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wtqlgya.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp6wtqlgya.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \t-- Use a set to count the distinct characters. A set is a collection of unique\
    \ elements and therefore\n\t-- returns an integer as the number of distinct characters\
    \ found.\n\t-- The set function returns true when a set exists and can be written\
    \ to the output buffer or false otherwise.\n\t-- A set is empty if all elements\
    \ are equal.\n\tlocal distinct_characters = {} -- Create a new set that stores\
    \ all the distinct characters in the string being passed in.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdurwkfzi.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
