name: HumanEval_60_sum_to_n
language: lua
results:
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local c = 0\n \
    \ for i = 1, n do c = c + (n-i+1) end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 2 then return\
    \ n else return (n % 2 == 0) and sum_to_n(n / 2) or n * 3 + 1 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8x894iz.lua:20:\
    \ expected: 21, actual: 10\nstack traceback:\n\t/tmp/tmpq8x894iz.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\n\
    \    return 0\n  elseif n == 1 then\n    return 1\n  else\n    return n * sum_to_n(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm3up2s2.lua:26:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpgm3up2s2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- The sum of an\
    \ arithmetic progression is the sum of the numbers\n  -- from 1 to n.\n  -- For\
    \ a progression A to B, if B = A + k, and k = 1, then the\n  -- sum is A + A +\
    \ A + ... + B.\n  -- So the sum of an arithmetic progression A to n is (n + 1)*(A\
    \ + 1).\n  return math.max(n, 1) + math.min(1 + n, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsy31pgfv.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsy31pgfv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local total = 0\n\
    \  for i = 1, n do\n    total = total + i\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 1 then\
    \ return n else return n % 2 == 0 and n or n * sum_to_n(n-1) / 2 end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponjsks6f.lua:20:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmponjsks6f.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal result =\
    \ 0\n\tlocal i = 1\n\twhile i <= n do\n\t\tresult = result + i\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i = 1, n do\n    s = s + i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return math.floor(n\
    \ * math.log(n, 2) + .5) + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja0ts_bn.lua:20:\
    \ expected: 21, actual: 17\nstack traceback:\n\t/tmp/tmpja0ts_bn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(math.exp(math.log(n)\
    \ / math.log(2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbf72z_0.lua:20:\
    \ expected: 21, actual: 13\nstack traceback:\n\t/tmp/tmpnbf72z_0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal sum = math.rawast\n\
    \tlocal factor = 1\n\twhile n >= 1 do\n\t\tsum = sum + n * factor\n\t\tfactor\
    \ = factor * 10\n\t\tn = n / 10\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo98bpon3.lua:16:\
    \ attempt to perform arithmetic on a nil value (local 'sum')\nstack traceback:\n\
    \t/tmp/tmpo98bpon3.lua:16: in local 'candidate'\n\t/tmp/tmpo98bpon3.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i = 1, n do\n    s = s + i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i = 1,n do s = s + i end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- TODO: Don't\
    \ let the number grow too big\n  local s = 0 -- The accumulator of sums\n  --\
    \ Iterate through the numbers from 1 to n\n  for i in 1,n do\n    s = s + i\n\
    \  end\n  -- Return the accumulator of sums\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_9l7xfe.lua:16:\
    \ attempt to call a number value\nstack traceback:\n\t/tmp/tmpf_9l7xfe.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpf_9l7xfe.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\
    \ return 1 end\n  return n + sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local i, s =\
    \ 0\n    repeat\n        i = i + 1\n        s = s + i\n    until i > n\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xcqeze.lua:16:\
    \ attempt to perform arithmetic on a nil value (local 's')\nstack traceback:\n\
    \t/tmp/tmpl4xcqeze.lua:16: in local 'candidate'\n\t/tmp/tmpl4xcqeze.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- Create a table.\n\
    \  local table = {}\n  -- Start summing from 1.\n  table.n = 1\n  -- While we\
    \ still have numbers to sum...\n  repeat\n    -- Add one to the sum and remove\
    \ one from the value.\n    table.n = table.n + 1\n    table.n = table.n - 1\n\
    \  until table.n >= n\n  -- Return the sum of the table.\n  return table.n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  elseif n > 1 then\n    return sum_to_n(n - 1) + sum_to_n(n -\
    \ 2)\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ayzmp1y.lua:26:\
    \ expected: 21, actual: 8\nstack traceback:\n\t/tmp/tmp6ayzmp1y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then return\
    \ 0 end\n  return n + sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    end\n    return n + sum_to_n(n-1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return assert(n\
    \ >= 1, \"invalid n\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppk_5dj7j.lua:19:\
    \ expected: 1, actual: true\nstack traceback:\n\t/tmp/tmppk_5dj7j.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local result\
    \ = 0\n    for i=1,n do \n        result = result + i\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n > 0 then\n\
    \    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc7jug5zn.lua:14:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpc7jug5zn.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpc7jug5zn.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return function(m)\n\
    \    if m == 0 then\n      return 1\n    else\n      return m + (n % m) * (sum_to_n(m))\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxklhncph.lua:25:\
    \ expected: 1, actual: function: 0x179b9d0\nstack traceback:\n\t/tmp/tmpxklhncph.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n < 0 then\n\
    \t\treturn n\n\telse\n\t\treturn n + sum_to_n(n-1)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlmfka5z.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqlmfka5z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 1 then\n\
    \    return n\n  end\n  return n + sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(math.exp((math.log(n))/math.log(2)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_dajmzfr.lua:20:\
    \ expected: 21, actual: 13\nstack traceback:\n\t/tmp/tmp_dajmzfr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp06iz7t3u.lua:25: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.pow(10,\
    \ math.floor((math.log(n)/math.log(10))*10)+1) - math.pow(10, math.floor(math.log(n)/math.log(10)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_x8rnd7.lua:19:\
    \ expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpg_x8rnd7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n < 1 then\n\
    \t\treturn n\n\telse\n\t\tlocal s = n + n - 1\n\t\twhile n > 0 do\n\t\t\ts = s\
    \ + n\n\t\t\tn = n - 1\n\t\tend\n\t\treturn s\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemt0g1ei.lua:28:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpemt0g1ei.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local result =\
    \ 1\n  for i = 1, n do result = result + 1 end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth0804i6.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpth0804i6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  elseif n < 0 then\n    -- Negative numbers are not summable:\n\
    \    -- >>> sum_to_n(-1)\n    -- Traceback (most recent call last):\n    -- ValueError:\
    \ negative number cannot be summable\n    -- >>> sum_to_n(2)\n    -- Traceback\
    \ (most recent call last):\n    -- ValueError: negative number cannot be summable\n\
    \    -- >>> sum_to_n(3)\n    -- Traceback (most recent call last):\n    -- ValueError:\
    \ negative number cannot be summable\n    -- >>> sum_to_n(10)\n    -- Traceback\
    \ (most recent call last):\n    -- ValueError: negative number cannot be summable\n\
    \    -- >>> sum_to_n(100)\n    -- Traceback (most recent call last):\n    -- ValueError:\
    \ negative number cannot be summable\n    -- >>> sum_to_n(-1)\n    -- Traceback\
    \ (most recent call last):\n    -- ValueError: negative number cannot be summable\n\
    \    -- >>> sum_to_n(-2)\n    -- Traceback (most recent call last):\n    -- ValueError:\
    \ negative number cannot be summable\n    -- >>> sum_to_n(-10)\n    -- Traceback\
    \ (most recent call last):\n    -- ValueError: negative number cannot be summable\n\
    \    -- >>> sum_to_n(-100)\n    -- Traceback (most recent call last):\n    --\
    \ ValueError: negative number cannot be summable\n    -- >>> sum_to_n(-5)\n  \
    \  -- Traceback (most recent call last):\n    -- ValueError: negative number cannot\
    \ be summable\n    -- >>> sum_to_n(-10)\n    -- Traceback (most recent call last):\n\
    \    -- ValueError: negative number cannot be summable\n    -- >>> sum_to_n(-1)\n\
    \    -- Traceback (most recent call last):\n    -- ValueError: negative number\
    \ cannot be summable\n    -- >>> sum_to_n(-2)\n    -- Traceback (most recent call\
    \ last):\n    -- ValueError: negative number cannot be summable\n    -- >>> sum_to_n(-10)\n\
    \    -- Traceback (most recent call last):\n    -- ValueError: negative number\
    \ cannot be summable\n    -- >>> sum_to_n(-100)\n    -- Traceback (most recent\
    \ call last):\n    -- ValueError: negative number cannot be summable\n    -- >>>\
    \ sum_to_n(-5)\n    -- Traceback (most recent call last):\n    -- ValueError:\
    \ negative number cannot be summable\n    -- >>> sum_to_n(-10)\n    -- Traceback\
    \ (most recent call last):\n    -- ValueError: negative number cannot be summable\n\
    \    -- >>> sum_to_n(-1)\n    -- Traceback (most recent call last):\n    -- ValueError:\
    \ negative number cannot be summable\n    -- >>> sum_to_n(-2)\n    -- Traceback\
    \ (most recent call last):\n    -- ValueError: negative number cannot be summable\n\
    \    -- >>> sum_to_n(-10)\n    -- Traceback (most recent call last):\n    -- ValueError:\
    \ negative number cannot be summable\n    -- >>> sum_to_n(-100)\n    -- Traceback\
    \ (most recent call last):\n    -- ValueError: negative number cannot be summable\n\
    \    -- >>> sum_to_n(-5)\n    -- Traceback (most recent call last):\n    -- ValueError:\
    \ negative number cannot be summable\n    -- >>> sum_to_n(-10)\n    -- Traceback\
    \ (most recent call last):\n    -- ValueError: negative number cannot be summable\n\
    \    -- >>> sum_to_n(-1)\n    -- Traceback (most recent call last):\n    -- ValueError:\
    \ negative number cannot be summable\n    -- >>> sum_to_n(-2)\n    -- Traceback\
    \ (most recent call last):\n    -- ValueError: negative number cannot be sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm5xw4919.lua:103: 'end' expected (to close 'if' at line 13)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return math.floor(n\
    \ * (1 + math.log(n, n))) - math.floor(n/2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8mmtgff.lua:19:\
    \ expected: 1, actual: #NaN\nstack traceback:\n\t/tmp/tmpx8mmtgff.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n   if n == 1 then\n\
    \      return 1\n   else\n      return n * sum_to_n(n - 1)\n   end\nend\n</cell>\n\
    <text>\nThe function sum_to_n(n) above is recursive and it uses the same concept\
    \ as sum(n) to sum the numbers from 1 to n. The trick above is that the sum_to_n(n)\
    \ function returns n * sum_to_n(n - 1). For example, sum_to_n(4) is calculated\
    \ as 4 * sum_to_n(3). Let's try the example above.\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuy0t2enz.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local s = 0\n\
    \    for i = 1, n do\n        -- Each number is being added and multiplied by\
    \ 2 until it reaches n.\n        s = s + i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 1 then\n\
    \    return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6o0atqb4.lua:27: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local total = 0\n\
    \  for i=1,n do\n    total = total + i\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n*(n+1)/2\n\
    end\n</cell>\n<text>\nThe following cell contains the entire script from the previous\
    \ cells. In it we define a function to take a file name as an argument, opens\
    \ that file, and writes the output to a new file with the same name but an extension\
    \ of \"csv\". Then we call that function on every file in the directory and save\
    \ the results to the \"output\" directory.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn2ubenal.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then\n\
    \    return 0\n  end\n  local total = 1\n  for i = 1, n do\n    total = total\
    \ + i\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kkqyxua.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp7kkqyxua.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\
    \ return 1 end\n  local sum = 1\n  for i = 1, n do\n    sum = sum + i\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xkw77ax.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp6xkw77ax.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ while n do\n    s = s + n\n    n = n - 1\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  end\n  local function loop(n, sum)\n    if n == 0 then\n    \
    \  return sum\n    end\n    return loop(n-1, sum + n)\n  end\n  return loop(n,0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(n\
    \ * (math.log(n) + math.log(math.max(n - 1, 1))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubg5k3f8.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpubg5k3f8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n > 0 then\n\
    \    return sum_to_n(n - 1) + n\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local accum = 1\n\
    \  while n do\n    accum = accum + n\n    n = n - 1\n  end\n  return accum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local n1 = 1\n\
    \  while n1 < n do\n    n1 = n1 + 1\n  end\n  return n1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4o559df.lua:24:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmpu4o559df.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\n\
    \    return 0\n  end\n  -- We want to return 1 + the previous partial sum.\n \
    \ local partial_sum = 1\n  local i = 1\n  while i <= n do\n    partial_sum = partial_sum\
    \ + i\n    -- We have used up all the numbers to compute partial sum.\n    --\
    \ Now sum up the current partial sum.\n    i = i + 1\n  end\n  -- Return partial\
    \ sum.\n  return partial_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxz4pklxp.lua:32:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxz4pklxp.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n > 0 then\n\
    \    return n + sum_to_n(n-1)\n  else\n    return 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcr375ua.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphcr375ua.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local r = 0\n\
    \    for i = 1, n do\n        r = r + i\n    end\n    return r\nend\n</cell>\n\
    <text>\nExample: Find all the prime numbers less than 100\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpejkz45ga.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1os7md6g.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp1os7md6g.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- Calculate the\
    \ first n numbers using an explicit loop.\n  -- This is slow, but it's OK because\
    \ this code will only ever be\n  -- evaluated on a finite set of input.\n  for\
    \ x = 1, n do\n    local result = x + 1\n    if x == n then break end\n    local\
    \ rest = x - 1\n    local accum = sum_to_n(rest)\n    result = result + accum\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdngjfoj6.lua:29:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpdngjfoj6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local n = 1\n \
    \ local sum = 1\n  while n <= n do\n    sum = sum + n\n    sum = sum + n\n   \
    \ n = n + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd0vsbu4b.lua:27: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then\n\
    \    return 0\n  else\n    local n = math.floor(n)\n    local sum = 0\n    for\
    \ i = 1, n do\n      sum = sum + i\n    end\n    return sum\n  end\nend\n</cell>\n\
    <text>\nExercise: Sum to N!\nWrite a function that sums to infinity. It should\
    \ use the function sum_to_n.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxm4ws41o.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = (n*(n+1)/2)\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for _ = 1, n do\n    sum = sum + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy60s_ont.lua:24:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmpy60s_ont.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n * sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75j86umb.lua:24:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmp75j86umb.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    local ret = 0\n    return ret\n  end\n  if n <= 0 then\n    error(\"arg out\
    \ of range\")\n  end\n  local ret = 0\n  local sum = 1\n  while sum < n do\n \
    \   sum = sum + sum\n    ret = ret + sum\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mfat941.lua:32:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7mfat941.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\
    \ return 0 else return n % 10 + sum_to_n(n / 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu3afgtmp.lua:26: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 1\n\
    \  for _ = 1, n do\n    sum = sum + sum_to_n(sum + 2)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyp0auty7.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpyp0auty7.lua:15: in upvalue 'sum_to_n'\n\
    \t/tmp/tmpyp0auty7.lua:15: in upvalue 'sum_to_n'\n\t/tmp/tmpyp0auty7.lua:15: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpyp0auty7.lua:15: in upvalue 'sum_to_n'\n\t/tmp/tmpyp0auty7.lua:15:\
    \ in upvalue 'sum_to_n'\n\t/tmp/tmpyp0auty7.lua:15: in upvalue 'sum_to_n'\n\t\
    /tmp/tmpyp0auty7.lua:15: in upvalue 'sum_to_n'\n\t/tmp/tmpyp0auty7.lua:15: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpyp0auty7.lua:15: in upvalue 'sum_to_n'\n\t...\n\
    \t/tmp/tmpyp0auty7.lua:15: in local 'candidate'\n\t/tmp/tmpyp0auty7.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.060 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc67xfdqr.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpc67xfdqr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return sum_to_n(n - 1) + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70aiok0e.lua:24:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmp70aiok0e.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n   if n == 0 then\n\
    \      return 1\n   else\n      return n * sum_to_n(n - 1)\n   end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdhp2wdd.lua:24:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpjdhp2wdd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then\n\
    \    return nil\n  end\n  return math.floor(n / 2) + sum_to_n(n - math.floor(n\
    \ / 2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8y__1v_i.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8y__1v_i.lua:16: in upvalue 'sum_to_n'\n\
    \t/tmp/tmp8y__1v_i.lua:16: in upvalue 'sum_to_n'\n\t/tmp/tmp8y__1v_i.lua:16: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmp8y__1v_i.lua:16: in upvalue 'sum_to_n'\n\t/tmp/tmp8y__1v_i.lua:16:\
    \ in upvalue 'sum_to_n'\n\t/tmp/tmp8y__1v_i.lua:16: in upvalue 'sum_to_n'\n\t\
    /tmp/tmp8y__1v_i.lua:16: in upvalue 'sum_to_n'\n\t/tmp/tmp8y__1v_i.lua:16: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmp8y__1v_i.lua:16: in upvalue 'sum_to_n'\n\t...\n\
    \t/tmp/tmp8y__1v_i.lua:16: in local 'candidate'\n\t/tmp/tmp8y__1v_i.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.220 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n == 0 then\
    \ return 1 end\n\tlocal n2 = n*2\n\tif n2 <= n then return n end\n\tlocal m =\
    \ (n - n2)/2\n\treturn n*m + sum_to_n(m) + (n2 - n)*sum_to_n(n2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplapaug6c.lua:23:\
    \ expected: 1, actual: -#Inf\nstack traceback:\n\t/tmp/tmplapaug6c.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(n\
    \ * (n + 1) / 2)\nend\nreturn sum_to_n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprd0_1x_q.lua:16: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\t-- Base cases:\
    \ 0 sum is 1, 1 sum is n, 2 sum is n*n, etc.\n\t-- >>> sum_to_n(0)\n\t-- 1\n\t\
    -- >>> sum_to_n(1)\n\t-- 1\n\t-- >>> sum_to_n(2)\n\t-- 2\n\t-- >>> sum_to_n(3)\n\
    \t-- 6\n\t-- >>> sum_to_n(10)\n\t-- 55\n\t-- >>> sum_to_n(100)\n\t-- 5050\n\t\
    -- >>> sum_to_n(5)\n\t-- 15\n\t-- >>> sum_to_n(10)\n\t-- 55\n\t-- >>> sum_to_n(1)\n\
    \t-- 1\n\tif n == 0 then\n\t\treturn 1\n\telseif n == 1 then\n\t\treturn n\n\t\
    else\n\t\treturn n * sum_to_n(n - 1)\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ivrsdxq.lua:45:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmp_ivrsdxq.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  n = n or 0\n  return\
    \ function(x)\n    if x ~= 0 then\n      x = x + 1\n      return n(x)\n    end\n\
    \    return n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjyn5pe1n.lua:26:\
    \ expected: 1, actual: function: 0x790ac0\nstack traceback:\n\t/tmp/tmpjyn5pe1n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 0\n  else\n    return 1 + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw0odtxs.lua:24:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmpxw0odtxs.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 0\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(math.log10(math.pow(10,math.floor(math.log10(n)-1))+1)+1)*n\
    \ + math.floor(math.log10(math.pow(10,math.floor(math.log10(n)-1)))+1)*(n-1) +\
    \ math.floor(math.log10(n)+1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjf9nb99.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzjf9nb99.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1,n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n+n .. '!'\n\
    end\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp12z7pn0j.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\t-- We start with\
    \ a partial sum of the first n-1 terms.\n\t-- The last term is n*(n-1)/2, so we\
    \ get to (n*n+1)/2\n\tlocal partial_sum = 0\n\tfor i = 1, n do\n\t\t-- Each term\
    \ is i*(i+1)/2, so we get to (i*(i+1))/2\n\t\tpartial_sum = partial_sum + i *\
    \ (i + 1)\n\tend\n\t-- We get the sum of the last term by adding the partial sum\
    \ with the partial sum of the last term + n.\n\t-- This gives us the final sum.\n\
    \treturn partial_sum + sum_to_n(n + 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- Return a sum\
    \ of the numbers from 1 to n.\n  if n == 1 then\n    return 1\n  else\n    return\
    \ n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  else\n    local ns = n - 1\n    return 1 + sum_to_n(ns)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jso8nya.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4jso8nya.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i = 1, n do\n    s = s + i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n > 0 then\n\
    \    return n + sum_to_n(n - 1)\n  else\n    return 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjq23fy_.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprjq23fy_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  end\n  if n == 2 then\n    return 1\n  end\n  if n % 2 == 0 then\n\
    \    local k = sum_to_n(n - 1)\n    return k * k\n  end\n  local k = sum_to_n(n\
    \ - 1)\n  return k + k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjs27fmn.lua:31:\
    \ expected: 21, actual: 64\nstack traceback:\n\t/tmp/tmpnjs27fmn.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local total = 0\n\
    \  for i = 1, n do\n    total = total + i\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(math.sqrt(n))\
    \ * (math.pow(2, math.ceil(math.log(math.abs(n), 2))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0rke2p4.lua:20:\
    \ expected: 21, actual: 16\nstack traceback:\n\t/tmp/tmpm0rke2p4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return 1 .. n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4duwmzsu.lua:19:\
    \ expected: 1, actual: \"11\"\nstack traceback:\n\t/tmp/tmp4duwmzsu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 0 then\n\
    \        return 1\n    end\n    local s = n\n    repeat\n        s = s + 1\n \
    \   until s > n\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzru5iul.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnzru5iul.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\
    \ return end\n  if n > 1 then\n    return n + sum_to_n(n - 1)\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(math.pow(n,\
    \ 2) + math.pow(n, 3))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbt_emee.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzbt_emee.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\
    \ return 0 end\n  local s = 0.0\n  for i=1, n do s = s + i end\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(n\
    \ * (n + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local c = 0\n \
    \ for i=1,n do\n    c = c + i\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  else\n    return n * sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjs0fdscp.lua:24:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpjs0fdscp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- Return a function\
    \ that sums integers from 1 to n.\n  -- >>> sum_to_n(30)()\n  -- 465\n  -- >>>\
    \ sum_to_n(100)()\n  -- 5050\n  -- >>> sum_to_n(5)()\n  -- 15\n  -- >>> sum_to_n(10)()\n\
    \  -- 55\n  -- >>> sum_to_n(1)()\n  -- 1\n  local sum_up_to_n = function(n)\n\
    \    -- Return a function that sums integers from 1 to n.\n    -- >>> sum_up_to_n(30)()\n\
    \    -- 465\n    -- >>> sum_up_to_n(100)()\n    -- 5050\n    -- >>> sum_up_to_n(5)()\n\
    \    -- 15\n    -- >>> sum_up_to_n(10)()\n    -- 55\n    -- >>> sum_up_to_n(1)()\n\
    \    -- 1\n    local num_sums = {}\n    for i = 1, n do\n      num_sums[i] = nil\n\
    \    end\n    return function() -- Return a function that sums integers from 1\
    \ to n.\n    -- >>> num_sums[1]()\n    -- nil\n    -- >>> num_sums[2]()\n    --\
    \ nil\n    -- >>> num_sums[3]()\n    -- nil\n    -- >>> num_sums[4]()\n    --\
    \ nil\n    -- >>> num_sums[5]()\n    -- nil\n    -- >>> num_sums[6]()\n    --\
    \ nil\n    -- >>> num_sums[7]()\n    -- nil\n    -- >>> num_sums[8]()\n    --\
    \ nil\n    -- >>> num_sums[9]()\n    -- nil\n    -- >>> num_sums[10]()\n    --\
    \ nil\n    -- >>> num_sums[11]()\n    -- nil\n    -- >>> num_sums[12]()\n    --\
    \ nil\n    -- >>> num_sums[13]()\n    -- nil\n    -- >>> num_sums[14]()\n    --\
    \ nil\n    -- >>> num_sums[15]()\n    -- nil\n    -- >>> num_sums[16]()\n    --\
    \ nil\n    -- >>> num_sums[17]()\n    -- nil\n    -- >>> num_sums[18]()\n    --\
    \ nil\n    -- >>> num_sums[19]()\n    -- nil\n    -- >>> num_sums[20]()\n    --\
    \ nil\n    -- >>> num_sums[21]()\n    -- nil\n    -- >>> num_sums[22]()\n    --\
    \ nil\n    -- >>> num_sums[23]()\n    -- nil\n    -- >>> num_sums[24]()\n    --\
    \ nil\n    -- >>> num_sums[25]()\n    -- nil\n    -- >>> num_sums[26]()\n    --\
    \ nil\n    -- >>> num_sums[27]()\n    -- nil\n    -- >>> num_sums[28]()\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa2w3kdbf.lua:108: 'end' expected (to close 'function' at line\
    \ 40) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do sum = sum + i end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  end\n  local m = math.floor((n - 1) / 2)\n  local a, b = m -\
    \ 1, n\n  while b <= n do\n    local x = a * 2 + b\n    a = x\n    b = x\n  end\n\
    \  return a * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalc9fpes.lua:30:\
    \ expected: 21, actual: 16\nstack traceback:\n\t/tmp/tmpalc9fpes.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  elseif n <= 1 then\n    return n\n  else\n    return n * sum_to_n(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfl_ilu0.lua:26:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpzfl_ilu0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then\n\
    \    error(\"invalid input\")\n  end\n  return n * sum_to_n(n - 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvawcn3qk.lua:14:\
    \ invalid input\nstack traceback:\n\t/tmp/tmpvawcn3qk.lua:14: in upvalue 'sum_to_n'\n\
    \t/tmp/tmpvawcn3qk.lua:16: in local 'candidate'\n\t/tmp/tmpvawcn3qk.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\
    \ return end\n  if n == 1 then\n    return 1\n  end\n  return n * sum_to_n(n -\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_ti_kza.lua:24:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpc_ti_kza.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 1 then\n\
    \    return n\n  end\n  return sum_to_n(n - 1) + n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal s = 0\n\t\
    for i = 1, n do\n\t\ts = s + i\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\
    \ return 1 else return n * sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4x52z_f4.lua:26: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- if we're dealing\
    \ with a number bigger than the sum of the number series up to the \n  -- first\
    \ n numbers, return that number -- otherwise, return 0 (the sum of number\n  --\
    \ series up to the first n numbers is 1)\n  if n > sum(n) then\n    return n\n\
    \  else\n    -- return sum up to the first n numbers + the sum of the rest of\
    \ the numbers series up\n    -- to the first n numbers\n    return sum(n + sum_to_n(n))\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp96uneth5.lua:16:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp96uneth5.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp96uneth5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n <= 0 then\n\
    \        return 0;\n    elseif n == 1 then\n        return 1;\n    else\n    \
    \    return n*n + sum_to_n(n-1);\n    end\nend\n</cell>\n<text>\nChallenge 9:\
    \ Recursion\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpglmvkxme.lua:21: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(math.sqrt(math.pow(n,\
    \ 2) + 1) + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyibqmkmg.lua:20:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmpyibqmkmg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\
    \ return 1 end\n  return 1 + sum_to_n(n - 1)\nend\n</cell>\n<text>\nIn our algorithm,\
    \ $N$ is a parameter of the algorithm. For example, you can use a larger or smaller\
    \ set $N$, and you can use a higher or lower value $N$ for $k$. Note that the\
    \ same function can be used for different values of $N$.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnkre7_i4.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.min(math.max(sum_to_n(n-1),\
    \ 0), n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36bx2ohq.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp36bx2ohq.lua:13: in upvalue 'sum_to_n'\n\
    \t/tmp/tmp36bx2ohq.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmp36bx2ohq.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmp36bx2ohq.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmp36bx2ohq.lua:13:\
    \ in upvalue 'sum_to_n'\n\t/tmp/tmp36bx2ohq.lua:13: in upvalue 'sum_to_n'\n\t\
    /tmp/tmp36bx2ohq.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmp36bx2ohq.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmp36bx2ohq.lua:13: in upvalue 'sum_to_n'\n\t...\n\
    \t/tmp/tmp36bx2ohq.lua:13: in local 'candidate'\n\t/tmp/tmp36bx2ohq.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.120 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return 1 + sum_to_n(n\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqso5qx7e.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpqso5qx7e.lua:13: in upvalue 'sum_to_n'\n\
    \t/tmp/tmpqso5qx7e.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmpqso5qx7e.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpqso5qx7e.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmpqso5qx7e.lua:13:\
    \ in upvalue 'sum_to_n'\n\t/tmp/tmpqso5qx7e.lua:13: in upvalue 'sum_to_n'\n\t\
    /tmp/tmpqso5qx7e.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmpqso5qx7e.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpqso5qx7e.lua:13: in upvalue 'sum_to_n'\n\t...\n\
    \t/tmp/tmpqso5qx7e.lua:13: in local 'candidate'\n\t/tmp/tmpqso5qx7e.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.250 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor((math.log(n)\
    \ / math.log (10)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ia2tufk.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5ia2tufk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i = 1, n do\n    sum = sum + i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp906osxh0.lua:15:\
    \ attempt to perform arithmetic on a nil value (global 'sum')\nstack traceback:\n\
    \t/tmp/tmp906osxh0.lua:15: in local 'candidate'\n\t/tmp/tmp906osxh0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal function\
    \ sum_to_n_(n)\n\t\tif n > 0 then\n\t\t\treturn sum_to_n_(n-1) + n\n\t\telse\n\
    \t\t\treturn n\n\t\tend\n\tend\n\treturn sum_to_n_(math.max(1,n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\n\
    \    return 0\n  else\n    return sum_to_n(n - 1) + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0mvntks.lua:24:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmpy0mvntks.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n   local n = 1\n\
    \   local result = 1\n   while n > 1 do\n      n = n * 2\n      result = result\
    \ + n\n   end\n   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnhrgfd5.lua:26:\
    \ expected: 21, actual: 1\nstack traceback:\n\t/tmp/tmpjnhrgfd5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 0\n  elseif n == 1 then\n    return 1\n  else\n    local sum = 1\n\
    \    for i = 2, n do\n      sum = sum + i\n    end\n    return sum\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54apbho8.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp54apbho8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(n/2)\
    \ + sum_to_n(n-math.floor(n/2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr3bmylf2.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpr3bmylf2.lua:13: in upvalue 'sum_to_n'\n\
    \t/tmp/tmpr3bmylf2.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmpr3bmylf2.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpr3bmylf2.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmpr3bmylf2.lua:13:\
    \ in upvalue 'sum_to_n'\n\t/tmp/tmpr3bmylf2.lua:13: in upvalue 'sum_to_n'\n\t\
    /tmp/tmpr3bmylf2.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmpr3bmylf2.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpr3bmylf2.lua:13: in upvalue 'sum_to_n'\n\t...\n\
    \t/tmp/tmpr3bmylf2.lua:13: in local 'candidate'\n\t/tmp/tmpr3bmylf2.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.230 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(n\
    \ * (2 * n - 1)) + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe60en2nm.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpe60en2nm.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrr8c4nu.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmplrr8c4nu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local n2 = math.floor(n/2)\n\
    \  if n == n2 then\n    return n\n  end\n  return sum_to_n(n2) + n - n2*2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquf9mdri.lua:24:\
    \ expected: 21, actual: 2\nstack traceback:\n\t/tmp/tmpquf9mdri.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    end\n    if n < 0 then\n        return 0\n    end\n   \
    \ if n < 1000 then\n        return n * sum_to_n(n - 1)\n    end\n    local sum\
    \ = 1\n    for i = 2, n do\n        sum = sum + i\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3jcgkt7.lua:33:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpc3jcgkt7.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n and n\
    \ + (sum_to_n(n-1) or 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkni636gj.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpkni636gj.lua:13: in upvalue 'sum_to_n'\n\
    \t/tmp/tmpkni636gj.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmpkni636gj.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpkni636gj.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmpkni636gj.lua:13:\
    \ in upvalue 'sum_to_n'\n\t/tmp/tmpkni636gj.lua:13: in upvalue 'sum_to_n'\n\t\
    /tmp/tmpkni636gj.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmpkni636gj.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpkni636gj.lua:13: in upvalue 'sum_to_n'\n\t...\n\
    \t/tmp/tmpkni636gj.lua:13: in local 'candidate'\n\t/tmp/tmpkni636gj.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor((math.pow(math.e,\
    \ n) - 1) / math.e) + 1;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpulpn5499.lua:13:\
    \ bad argument #1 to 'pow' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpulpn5499.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpulpn5499.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- Start with n\
    \ = 1.\n  -- Repeat until n is greater than or equal to zero,\n  -- and then subtract\
    \ one from the result.\n  local n = 1\n  -- Store the result.\n  local total =\
    \ 0\n  -- While n is greater than or equal to zero,\n  -- repeat n times:\n  repeat\n\
    \    total = total + n\n    n = n - 1\n  until n > 0 or n == 0\n  return total\
    \ - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9nqnpbl.lua:31:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmph9nqnpbl.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal s = 0\n\t\
    for i = 1, n do s = s + i end\n\treturn s\nend\n</cell>\n<text>\nA recursive function\
    \ is one that is calling itself (calling a function). In Python, this is the word\
    \ function. Note that recursive functions are usually written with def instead\
    \ of function, as functions are first-class values.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp960ec09b.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return math.floor(math.log(n,\
    \ 2)) + math.floor(math.log(n, 2) ^ 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd96k1da_.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpd96k1da_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n < 0 then\
    \ return nil end\n    local s = math.floor(n)\n    return s + sum_to_n(n - s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo09yizjk.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpo09yizjk.lua:14: in upvalue 'sum_to_n'\n\
    \t/tmp/tmpo09yizjk.lua:15: in upvalue 'sum_to_n'\n\t/tmp/tmpo09yizjk.lua:15: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpo09yizjk.lua:15: in upvalue 'sum_to_n'\n\t/tmp/tmpo09yizjk.lua:15:\
    \ in upvalue 'sum_to_n'\n\t/tmp/tmpo09yizjk.lua:15: in upvalue 'sum_to_n'\n\t\
    /tmp/tmpo09yizjk.lua:15: in upvalue 'sum_to_n'\n\t/tmp/tmpo09yizjk.lua:15: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmpo09yizjk.lua:15: in upvalue 'sum_to_n'\n\t...\n\
    \t/tmp/tmpo09yizjk.lua:15: in local 'candidate'\n\t/tmp/tmpo09yizjk.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.180 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n and\
    \ n*(n+1)/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(n/2)\
    \ * math.floor(n/2) + math.floor(n/2) + 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx341sco6.lua:20:\
    \ expected: 21, actual: 13\nstack traceback:\n\t/tmp/tmpx341sco6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n < 1 then return\
    \ 1 end\n\tlocal sum = 0\n\tfor i = 1, n do\n\t\tsum = sum + i\n\tend\n\treturn\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor(math.pow(n,\
    \ math.ceil(math.log(math.max(1, n)) + 0.5))) * math.pow(n, math.ceil(math.log(math.max(1,\
    \ n)) / math.log(2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhtzy7_s.lua:20:\
    \ expected: 21, actual: 46656\nstack traceback:\n\t/tmp/tmpuhtzy7_s.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i = 1, n do\n    s = s + i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 0\n  else\n    local n = n + 1\n    return n * sum_to_n(n)\n  end\n\
    end\n</cell>\n<text>\nLet's try it out using our sum_to_n function.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphq9qh1k7.lua:20: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\
    \ return 1 else return n * sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpey1ga5n_.lua:26: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  end\n  return n * sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqc9qvbqf.lua:23:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpqc9qvbqf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return assert(tonumber(math.fsum(i\
    \ for i in range(1, n))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpumn3_ntd.lua:13: ')' expected near 'for'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  elseif n < 0 then\n    error(\"a number n should be non-negative\"\
    )\n  end\n  return math.max(n + sum_to_n(n-1), 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicbpylc2.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpicbpylc2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 0\n  end\n  local s = 0\n  for i = 1, n do\n    local e = math.floor(i*(i+1)/2\
    \ + 1)\n    local f = math.floor((n-i)*(i+1)/2)\n    s = s + math.floor(i+(i+1)/2)*(e-1)\n\
    \    s = s + math.floor(n-i-1)*f\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrjk3xnk.lua:29:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpdrjk3xnk.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.max(n\
    \ and n - (n % 2 and 1 or 0), 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp5boqki.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphp5boqki.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local result =\
    \ 0\n  for i = 1, n do\n    local tmp = i * i\n    local n = i - 1\n    local\
    \ tmp2 = tmp + tmp\n    local tmp3 = tmp + n\n    result = result + tmp2\n   \
    \ result = result + tmp3\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_aj6j7nf.lua:28:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_aj6j7nf.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local total = 0\n\
    \  for i = 1,n do total = total + i end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- We start with\
    \ n = 1. We'll add 1 to n each time until we get to n.\n  -- So, we start at 1\
    \ and work our way up to n. We'll add n+1 to n\n  -- and so on until we get to\
    \ n.\n  -- So, for example, if we start at n = 5, we add 5+5+5+5+5+5+5+5+5+5 =\
    \ 45.\n  -- So, we can now just add 45 to get our final result. \n  -- Finally,\
    \ we return the result.\n  return n + sum_to_n(n+1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2lr84o0w.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp2lr84o0w.lua:19: in upvalue 'sum_to_n'\n\
    \t/tmp/tmp2lr84o0w.lua:19: in upvalue 'sum_to_n'\n\t/tmp/tmp2lr84o0w.lua:19: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmp2lr84o0w.lua:19: in upvalue 'sum_to_n'\n\t/tmp/tmp2lr84o0w.lua:19:\
    \ in upvalue 'sum_to_n'\n\t/tmp/tmp2lr84o0w.lua:19: in upvalue 'sum_to_n'\n\t\
    /tmp/tmp2lr84o0w.lua:19: in upvalue 'sum_to_n'\n\t/tmp/tmp2lr84o0w.lua:19: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmp2lr84o0w.lua:19: in upvalue 'sum_to_n'\n\t...\n\
    \t/tmp/tmp2lr84o0w.lua:19: in local 'candidate'\n\t/tmp/tmp2lr84o0w.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  n = tonumber(n)\n\
    \  if n == nil then\n    error('n is nil')\n  end\n  if n < 0 then\n    error('sum_to_n\
    \ expects n to be positive')\n  end\n  return math.floor(n * (n / 2)) + math.floor(n\
    \ * (n - 1) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_v4x4d9.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6_v4x4d9.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local result =\
    \ 0\n  for i = 1, n do\n    result = result + i\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\
    \ return 0 end\n  local sum = 0\n  for i = 1, n do sum = sum + i end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\n\
    \    return 0\n  else\n    local k = 1\n    local sum = 0\n    while k <= n do\n\
    \      sum = sum + k\n      k = k + 1\n    end\n    return sum\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 0 then\n\
    \    return nil\n  elseif n < 1 then\n    return 1\n  else\n    return n + sum_to_n(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3475y52t.lua:25:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3475y52t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return function(n)\n\
    \    if n < 1 then\n      return nil\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2qb4bbdc.lua:28: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local n = 0\n \
    \ for i = 1, n do\n    n = n + i\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkojqwhb.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmkojqwhb.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 0 then\n\
    \    return 0\n  end\n  local nsum = 0\n  for i = 1, n do\n    nsum = nsum + i\n\
    \  end\n  return nsum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n < 1 then\n\
    \        error('n must be positive!')\n    end\n    local s = 0\n    while n ~=\
    \ 1 do\n        s = s + n\n        n = math.floor(n/10)\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1pqroda.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpy1pqroda.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then\n\
    \    return n\n  else\n    return sum_to_n(n-1) + n\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\
    \ return 1 end\n  if n == 0 then return 0 end\n  if n < 0 then return nil end\n\
    \  return n + sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- Initialize answer\
    \ to zero\n  local sum = 0\n  -- While n is positive...\n  while n ~= 0 do\n \
    \   -- Add 1 to n\n    sum = sum + 1\n    -- n decreases by 1\n    n = n - 1\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgk5ig2z9.lua:29:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmpgk5ig2z9.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- We use an accumulator\
    \ of 0 to start with.\n  -- In our case, we'll be adding 1 to this number to form\
    \ our total.\n  local accum = 0\n  for i = 0, n do\n    -- The accum is what will\
    \ be added to sum_to_n's total to form our total.\n    accum = accum + 1\n   \
    \ -- We increment i here because each time we do a for loop, we are going to\n\
    \    -- skip over numbers and only add 1 to the total.\n    i = i + 1\n    --\
    \ We return the accumulated total.\n    return accum\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk71fp3dz.lua:31:\
    \ expected: 21, actual: 1\nstack traceback:\n\t/tmp/tmpk71fp3dz.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i=1,n do\n    s = s + i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  end\n  return n * sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gcezu42.lua:23:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmp0gcezu42.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n then\n   \
    \ local s = 1\n    for i = 1, n do\n      s = s + i\n    end\n    return s\n \
    \ else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeliomsvk.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeliomsvk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local r = 0\n \
    \ for i = 1, n do\n    r = r + i\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i = 1, n do\n    s = s + i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n >= 1 then\n\
    \    return n + sum_to_n(n - 1)\n  else\n    return 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmrw6alq.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvmrw6alq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\
    \ return 1 end\n  return n * sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimhn5uip.lua:21:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpimhn5uip.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  n = tonumber(n)\n\
    \  if n == 0 then return 1 end\n  return n*(n+1)/2\nend\n</cell>\n<text>\nLet's\
    \ see if this works:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpubraj780.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\
    \ return nil end\n  local sum = 1\n  for i = 1, n do sum = sum + i end\n  return\
    \ sum\nend\n</cell>\n<text>\nExercise\nCreate your own function sum_to_n which\
    \ sums the numbers from 1 to n.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppz8ssk09.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- If n is negative,\
    \ return -1\n  if n < 0 then\n    return -1\n  -- Else, return n\n  else\n   \
    \ return n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinsi_aoh.lua:26:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmpinsi_aoh.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  else\n    return n * sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9ak4u5g.lua:24:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpq9ak4u5g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.min(n,\
    \ math.floor(n/2) + 1)\nend\n</cell>\n<text>\nExercise 4:\nImplement the binomial_coefficient(a,b)\
    \ function, which returns the coefficient of a binomial coefficient (the number\
    \ of ways you can choose k out of n items) when you can only use k items from\
    \ a list of size n (a list). You should use sum_to_n to simplify your implementations.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8qz2a329.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    local result = 1\n  else\n    local result = 1 + sum_to_n(n - 1)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7g6q_rh.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpv7g6q_rh.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpv7g6q_rh.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n and n\
    \ + (sum_to_n(n-1)) or 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9u3kpvgk.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp9u3kpvgk.lua:13: in upvalue 'sum_to_n'\n\
    \t/tmp/tmp9u3kpvgk.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmp9u3kpvgk.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmp9u3kpvgk.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmp9u3kpvgk.lua:13:\
    \ in upvalue 'sum_to_n'\n\t/tmp/tmp9u3kpvgk.lua:13: in upvalue 'sum_to_n'\n\t\
    /tmp/tmp9u3kpvgk.lua:13: in upvalue 'sum_to_n'\n\t/tmp/tmp9u3kpvgk.lua:13: in\
    \ upvalue 'sum_to_n'\n\t/tmp/tmp9u3kpvgk.lua:13: in upvalue 'sum_to_n'\n\t...\n\
    \t/tmp/tmp9u3kpvgk.lua:13: in local 'candidate'\n\t/tmp/tmp9u3kpvgk.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.240 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n > 1 then\n\
    \    return sum_to_n(n - 1) + n\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local result =\
    \ 0\n  for i = 1, n do\n    result = result + i\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local total = 0\n\
    \  local i = 1\n  while i <= n do\n    total = total + i\n    i = i + 2\n  end\n\
    \  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpct37p0ev.lua:26:\
    \ expected: 21, actual: 9\nstack traceback:\n\t/tmp/tmpct37p0ev.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then return\
    \ 1 end\n  if n == 1 then return 1 end\n  if n == 2 then return 2 end\n  if n\
    \ == 3 then return 3 end\n  return n * sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cci5cih.lua:24:\
    \ expected: 21, actual: 360\nstack traceback:\n\t/tmp/tmp1cci5cih.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then\n\
    \    return n\n  else\n    return sum_to_n(n - 1) + n\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return coroutine.wrap(function()\n\
    \    local total = 0\n    for i = 1, n do total = total + i end\n    return total\n\
    \  end)()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 0 then\n\
    \    error(\"n must be positive number\")\n  elseif n >= 1 then\n    return n\n\
    \  elseif n == 2 then\n    return 1\n  else\n    return sum_to_n(n - 1) + n\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7xawo9m.lua:28:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmpy7xawo9m.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- If n is nil\
    \ or 0, return 0.\n  if not n or n == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpemnizejm.lua:28: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local total = 0\n\
    \  for i = 1,n do\n    total = total + i\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n < 1 then\
    \ return 1 end\n    return n * sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1eoc1w2.lua:21:\
    \ expected: 21, actual: 720\nstack traceback:\n\t/tmp/tmpp1eoc1w2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return math.floor((math.exp(math.log(n)\
    \ - math.log(0.5))\n    + math.sqrt(n)\n    + math.log(0.5))\n    * math.pi *\
    \ 2.0)\nend\nreturn sum_to_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplz73deyh.lua:19: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n   if n == 0 then\n\
    \      return 1\n   elseif n > 0 then\n      return n + sum_to_n(n - 1)\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw31k5ny.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxw31k5ny.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i = 1, n do\n    s = s + i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\n\
    \    return 0\n  end\n  return n + sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n > 0 then\n\
    \    return sum_to_n(n - 1) + 1\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6p6bkcz.lua:24:\
    \ expected: 21, actual: 6\nstack traceback:\n\t/tmp/tmpt6p6bkcz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 0 then\n\
    \        return 1\n    elseif n < 0 then\n        error(\"Sum to negative number:\
    \ \" .. n)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw0hzzu3p.lua:29: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then\n\
    \    error(\"Can't sum_to_n to \" .. tostring(n))\n  end\n  if n == 1 then\n \
    \   return 1\n  end\n  local f = n - 1\n  local s = 0\n  while n > 1 do\n    s\
    \ = s + f\n    f = f - 1\n  end\n  return s\nend\nreturn sum_to_n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjri_8l70.lua:28: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 0 then\n\
    \    return 1\n  else\n    local n = 1\n    while n <= n do\n      n = n + n\n\
    \    end\n    return n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- Return the sum\
    \ of all numbers from 1 to n. Raise an exception\n  -- if n is less than 1.\n\
    \  if n < 1 then\n    error(\"The argument must be positive.\")\n  elseif n ==\
    \ 1 then\n    error(\"The argument must not be 1.\")\n  else\n    local s = 1\n\
    \    for i = 1, n do\n      s = s + i\n    end\n    return s\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp78bvf87x.lua:18:\
    \ The argument must not be 1.\nstack traceback:\n\t/tmp/tmp78bvf87x.lua:18: in\
    \ local 'candidate'\n\t/tmp/tmp78bvf87x.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\n\
    \    return 1\n  end\n  local sum = 1\n  for i = 1, n do\n    sum *= i\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvvmbmv1s.lua:18: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\
    \ return 1\n  else return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
