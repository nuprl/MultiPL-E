name: HumanEval_64_vowels_count
language: lua
prompt: "-- Write a function vowels_count which takes a string representing\n-- a\
  \ word as input and returns the number of vowels in the string.\n-- Vowels in this\
  \ case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only when\
  \ it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"abcde\"\
  )\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
  \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
  \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
  \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
  \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return string.gsub(s, \".\", \"%s\"):match(\"[aeiouAEIOUY]\") or\
    \ (\"%S\"):gsub(\"[aeiouAEIOUY]\", \"\")\nend", "  local vowels = 'aeiou'\n  local\
    \ result = {}\n  for i, c in ipairs(s) do\n    if c == vowels[i] then\n      result[#result\
    \ + 1] = c\n    end\n  end\n  return #result\nend", "    local count, i, len\n\
    \    count = len = 0\n    for i = 1, #s do\n        -- If the character is a vowel,\
    \ increment the count variable\n        -- and add the character to len.\n   \
    \     if s.sub(i, i) == 'a' or\n            s.sub(i, i) == 'e' or\n          \
    \  s.sub(i, i) == 'i' or\n            s.sub(i, i) == 'o' or\n            s.sub(i,\
    \ i) == 'u'\n        then\n            count = count + 1\n            len = len\
    \ + 1\n        end\n    end\n    return count\nend", "  if s == '' or s:match('^')\
    \ then\n    return 0\n  end\n  local vowels = 'aeiou'\n  local vowelsCount = 1\n\
    \  for _, letter in string.gmatch(s, '[%w]') do\n    if letter == 'y' then\n \
    \     break\n    end\n    vowelsCount = vowelsCount + 1\n  end\n  for _, letter\
    \ in string.gmatch(s, '[%W]') do\n    if letter == 'y' then\n      break\n   \
    \ end\n    vowelsCount = vowelsCount + 1\n  end\n  return vowelsCount\nend", " \
    \   local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"ae\", \"ya\",\
    \ \"ye\", \"yi\", \"yu\", \"ay\"}\n    local vowel_count = 0\n    local vowel_words\
    \ = {}\n    for letter in s:gmatch(\"[%aAeEiIoOuUy]\") do\n        if vowels[letter]\
    \ then\n            vowel_count = vowel_count + 1\n        end\n        table.insert(vowel_words,\
    \ letter)\n    end\n    return vowel_count\nend", "  s = string.lower(s)\n  for\
    \ w in string.gmatch(s, \"[aeiouy]\") do\n    s = s:gsub(w, \"%s*\" % w)\n  end\n\
    \  return s:gsub(\"%s*\" % w, \"%s*\" % w)\nend", "  return s:gsub('[^aeiouy]','')\n\
    end", "  return s:match(\"[aeiou]\") ~= nil and s:match(\"[aeiouy]$\")\nend",
  "  return string.gsub(string.gsub(s, \"[aeiou]\", ''))\n  , \"[aeiou]$\"\nend",
  "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal count = #s\n\tlocal i = -1\n\
    \tfor k, v in pairs(s) do\n\t\ti = i + 1\n\t\tif v == 'y' then\n\t\t\tcount =\
    \ count - 1\n\t\tend\n\t\tif v ~= 'a' and v ~= 'e' and v ~= 'i' and v ~= 'o' and\
    \ v ~= 'u' then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "    local count = 0\n    for c in s:gmatch(\"[aeiouy]\") do\n        count = count\
    \ + 1\n    end\n    return count\nend", "  local vowels = {['a','e','i','o','u']}\n\
    \  local counts = {}\n  for char in s do\n    counts[#counts + 1] = #vowels\n\
    \    for i = #vowels+1, #vowels+1 do\n      if char == vowels[i] then counts[#counts\
    \ + 1] = i end\n    end\n  end\n  return table.concat(counts)\nend", "    local\
    \ v = 0\n    for i = 1,#s do\n        if string.sub(s,i,i) ~= 'a' and string.sub(s,i,i)\
    \ ~= 'e' and string.sub(s,i,i) ~= 'i' and string.sub(s,i,i) ~= 'o' and string.sub(s,i,i)\
    \ ~= 'u'\n        then\n            v = v+1\n        end\n    end\n    return\
    \ v\nend", "  local count = 0\n  s:gsub(\"a\",\"a\"):gsub(\"e\",\"e\"):gsub(\"\
    i\",\"i\"):gsub(\"o\",\"o\"):gsub(\"u\",\"u\")\n  for i,v in pairs({\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"}) do\n    if v:sub(1,1) == \"y\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local n = 0\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ == \"\" then break end\n        local j = 1\n        while j > 0 and string.sub(s,i,i+j)\
    \ ~= \"\" do\n            j = j - 1\n        end\n        n = n + 1\n        local\
    \ vowel = string.sub(s,i,i+j)\n        if vowel == \"y\" then break; end\n   \
    \     -- We want to exclude \"y\" from the vowel count\n        -- while considering\
    \ \"y\" as a vowel in some cases.\n        if vowel ~= \"y\" then\n          \
    \  n = n + 1\n            for _, v in pairs(vowels) do\n                if vowel\
    \ == v then break end\n            end\n        end\n    end\n    return n\nend",
  "  if s == nil then\n    return 0\n  end", "  return string.gsub(s, \"[aeiou]\"\
    , \"\")\nend", "   s = string.lower(s)\n   return string.gsub(s, \"[aeiouy]\"\
    , \"\")\nend", "  -- Write your code here.\n  return 0 -- Change this line\nend",
  "   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   local vowels_count = 0\n   for\
    \ i = 1, #s do\n      if vowels[string.sub(s,i,i)] then\n         vowels_count\
    \ = vowels_count + 1\n      end\n   end\n   return vowels_count\nend", "  return\
    \ string.gsub(s, \"[^aeiouAEIOU]\", \"\")\nend", "  local vowels\n  s:gsub(\"\
    ([aeiouy])\", function(c)\n    vowels = c or \"y\"\n  end)\n  return #vowels >\
    \ 0 and #vowels\nend", "  s = s:lower()\n  return s:gsub('[aieouyAIEOUY]','').count('a')\n\
    end", "  -- base case\n  if s == nil then return 0 end\n  -- base case\n  if s\
    \ == \"\" then return 1 end\n  -- base case\n  if string.sub(s,-1,1) == \"y\"\
    \ then return 2 end\n  -- base case\n  if string.sub(s,-1,1) == \"a\" then return\
    \ 1 end\n  -- base case\n  if string.sub(s,-1,1) == \"e\" then return 1 end\n\
    \  -- base case\n  if string.sub(s,-1,1) == \"i\" then return 1 end\n  -- base\
    \ case\n  if string.sub(s,-1,1) == \"o\" then return 1 end\n  -- base case\n \
    \ if string.sub(s,-1,1) == \"u\" then return 1 end\n  -- base case\n  -- return\
    \ vowels_count(string.sub(s,1,-1))\n  return 1 + vowels_count(string.sub(s,1,-1))\n\
    end\n</code>\n<|/ a dscore=4 |>\n<| a tags=lua,lua-patterns dscore=3 |>\nThe question\
    \ is about counting vowels within a string, so let's put a little more effort\
    \ into the problem domain and see how we can do it. We might want to do some operations\
    \ on strings based on their length, rather than their content, so let's do that\
    \ first. We'll use table.concat and table.remove, which are both built-in Lua\
    \ functions. We'll also use table.insert and table.append for convenience. We'll\
    \ also use string.find to find the first vowel in a string, because that's what\
    \ it's for, and string.sub to get the substring:\n<code>", "    return #s * (#s\
    \ + 1) / 2\nend", "  -- Write your code here.\nend", "  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local count_vowels = {}\n  for w in s:gmatch(\"[%a]+\") do\
    \ table.insert(count_vowels, #count_vowels + 1) end\n  return count_vowels[#count_vowels]\n\
    end", "    local vowels = {'a','e','i','o','u'}\n    local n = 1\n    for _, c\
    \ in pairs(s) do\n        if vowels[c] then\n            n=n+1\n        end\n\
    \    end\n    return n\nend", "   local vowels = {'a','e','i','o','u'}\n   if\
    \ string.sub(s, -1) == 'y' then\n      vowels = {'a', 'e', 'i', 'o', 'u'}\n  \
    \ end\n   return string.match(s, '[aeiouyAeiouy]') or 0\nend", "  local vowels\
    \ = \"aeiouy\"\n  local vowels_count = 0\n  for i = 1, #s do\n    if vowels:find(s[i])\
    \ then\n      vowels_count = vowels_count + 1\n    end\n  end\n  return vowels_count\n\
    end", "  -- Remove all vowels.\n  s = s:gsub(\"[aeiou]\", \"\")\n  -- Count all\
    \ vowels.\n  return s:gsub(\"[aeiouy]+$\", \"%1\")\nend", "  return string.gsub(s,\
    \ \"[aeiouAEIOU]\", \"\"):gsub(\"*\", \"\"):gsub(\"?\", \"\"):gsub(\"!\", \"\"\
    )\nend", "  -- YOUR CODE HERE\n  return 0\nend", "    local vowels = { 'a', 'e',\
    \ 'i', 'o', 'u' }\n    local vowelsCount = 0\n    for _, v in ipairs(s) do\n \
    \       if vowels[v] then\n            vowelsCount = vowelsCount + 1\n       \
    \ end\n    end\n    return vowelsCount\nend", "  local count = 0\n  for _, c in\
    \ pairs(s) do\n    if c == \"a\" then\n      if c == \"e\" or c == \"i\" or c\
    \ == \"o\" or c == \"u\" then\n        count = count + 1\n      end\n    end\n\
    \  end\n  return count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local vowels_count = 0\n    for _, letter in string.gmatch(s, \"([^%s]+)\"\
    ) do\n        if letter == 'y' then\n            if string.sub(s,-1) == 'y' then\
    \ return vowels_count end\n        elseif string.sub(s,-1,1) == 'a' or string.sub(s,-1,1)\
    \ == 'e' then\n            vowels_count = vowels_count + 1\n        end\n    end\n\
    \    return vowels_count\nend", "  return string.len(s) - string.sub(s,string.find(s,\"\
    a\")) +\n         string.sub(s,string.find(s,\"e\")) + string.sub(s,string.find(s,\"\
    i\")) +\n         string.sub(s,string.find(s,\"o\")) + string.sub(s,string.find(s,\"\
    u\"))\nend", "  local vowels = { \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" }\n\
    \  local count = 0\n  for i = 1, #s do\n    -- If the character is a vowel, increase\
    \ the count by 1\n    if vowels[s[i]] == true then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "   local count = 0\n   for i = 1, #s do\n\
    \      if string.sub(s, i, i) = \"a\" then\n         count = count + 1\n     \
    \ elseif string.sub(s, i, i) = \"e\" then\n         count = count + 1\n      elseif\
    \ string.sub(s, i, i) = \"i\" then\n         count = count + 1\n      elseif string.sub(s,\
    \ i, i) = \"o\" then\n         count = count + 1\n      elseif string.sub(s, i,\
    \ i) = \"u\" then\n         count = count + 1\n      elseif string.sub(s, i, #s)\
    \ = \"y\" then\n         count = count + 1\n      else\n         count = count\
    \ + 1\n      end\n   end\n   return count\nend", "  -- Write your code here.\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #(s)\n  for i=1,#s\
    \ do\n      if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i]\
    \ == 'u' then\n          vowels_count = vowels_count + 1\n      end\n  end\n \
    \ return vowels_count\nend", "  if #s == 0 then return 0 end\n  local n = 0\n\
    \  for i = 1, #s do\n    if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i]\
    \ == 'o' or s[i] == 'u' then\n      n = n + 1\n    end\n  end\n  return n\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i =\
    \ 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend", "  local num_vowels = 0\n  for i\
    \ = 1, #s do\n    if s:sub(i, i) ~= 'a' and s:sub(i, i) ~= 'e' and s:sub(i, i)\
    \ ~= 'i' and s:sub(i, i) ~= 'o' and s:sub(i, i) ~= 'u'\n      then return 0\n\
    \    end\n    num_vowels = num_vowels + 1\n  end\n  return num_vowels\nend", " \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n  return #(s:gsub('%[aeiou]', vowels))\n\
    end", "  return s:gsub(\"[aeiouy]\", \"\"):gsub(\"y\", \"\"):gsub(\"[^aeiouy]\"\
    , \"\")\nend", "  local vowels = {}\n  table.insert(vowels, 'a')\n  table.insert(vowels,\
    \ 'e')\n  table.insert(vowels, 'i')\n  table.insert(vowels, 'o')\n  table.insert(vowels,\
    \ 'u')", "   -- Your code here\nend", "  -- TODO: implement vowels function\n\
    \  local vowels = {}\n  return 0\nend", "\tlocal vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n\tlocal count = 0\n\tfor w in s:gmatch(\"[%a]+\") do\n\t\tcount = count\
    \ + 1 -- increment vowel count\n\tend\n\treturn count -- return number of vowels\n\
    end", "  return string.sub(s,1,string.find(s,'a')-1) + string.sub(s,string.find(s,'a'),string.find(s,'e')-1)\
    \ + string.sub(s,string.find(s,'e'),string.find(s,'i')-1) + string.sub(s,string.find(s,'i'),string.find(s,'o')-1)\
    \ + string.sub(s,string.find(s,'o'),string.find(s,'u')-1)\nend", "  local count,\
    \ last = 1, s:byte(-1)\n  for i = #s - 1, 1, -1 do\n    local c = s:byte(i)\n\
    \    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\
    \      count = count + 1\n    elseif c == last then\n      if count > 1 then\n\
    \        count = count - 1\n      else\n        count = 0\n      end\n    end\n\
    \    last = c:byte(-1)\n  end\n  return count\nend", "  local vowels = 'aeiouAEIOU'\n\
    \  local vowel_count = 0\n  for i = 1, #s do\n    local char = s[i]\n    if vowels[char]\
    \ ~= nil then\n      vowel_count = vowel_count + 1\n    end\n  end\n  return vowel_count\n\
    end", "    return string.gsub(s, \".\", \"%1%\").\n                gsub(\"a\"\
    , \"%1\").\n                gsub(\"e\", \"%1\").\n                gsub(\"i\",\
    \ \"%1\").\n                gsub(\"o\", \"%1\").\n                gsub(\"u\",\
    \ \"%1\").\n                gsub(\"y\", \"%1\")\nend", "  -- Fill in the code\
    \ below to get it working!\n  local vowels = {'a','e','i','o','u'}\n  local count\
    \ = 0\n  for i = 1, #s do\n    if vowels[s[i]] then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "  local vowels\n  local vowel_end\n  local\
    \ vowel_index\n  local count = 0", "  local count=0\n  for i=1,#s do\n    if string.sub(s,i,i)==\"\
    a\" or string.sub(s,i,i)==\"e\" or string.sub(s,i,i)==\"i\" or string.sub(s,i,i)==\"\
    o\" or string.sub(s,i,i)==\"u\" then\n      count=count+1\n    end\n  end\n  return\
    \ count\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n\
    \  for i=1,#s do\n    count = count + 1\n    if string.sub(s,i,i) ~= \"_\" then\n\
    \      count = count + #vowels\n    end\n  end\n  return count\nend", "    local\
    \ vowels = {}\n    for i=1,#s do\n        if string.sub(s,i,i) == \"a\" then\n\
    \            table.insert(vowels, \"a\")\n        end\n        if string.sub(s,i,i)\
    \ == \"e\" then\n            table.insert(vowels, \"e\")\n        end\n      \
    \  if string.sub(s,i,i) == \"i\" then\n            table.insert(vowels, \"i\"\
    )\n        end\n        if string.sub(s,i,i) == \"o\" then\n            table.insert(vowels,\
    \ \"o\")\n        end\n        if string.sub(s,i,i) == \"u\" then\n          \
    \  table.insert(vowels, \"u\")\n        end\n    end\n    \n    return #vowels\n\
    end", "  return string.gsub(string.format(\"[%a]\", s), \"[^aeiouy]\", \"\"):gsub(\"\
    (.)\", function (c) return string.byte(c) == 65 end)\nend", "\tlocal count = 0\n\
    \twhile true do\n\t\tlocal i = string.find(s, \"[aaiouy]\") -- find first vowel\n\
    \t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\ts = string.sub(s,\
    \ i + 1) -- remove first vowel from string\n\tend\n\treturn count\nend", "   \
    \ local vowels = \"aeiou\"\n    local vowel_count = 0\n    for i = 1, #s do\n\
    \        if vowels[i] ~= s[#s]:sub(1,i) then\n            return false\n     \
    \   end\n        vowel_count = vowel_count + 1\n    end\n    return vowel_count\n\
    end", "   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   -- Remove the first and\
    \ last characters from the string\n   s = s:sub(1, -5)\n   -- Return number of\
    \ vowels in the string\n   return #(filter(function(v) return vowels[v] ~= nil\
    \ end, s:gsub('[AEIOUY]', ''))) - 1\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local vowel_count = 0\n    for word in string.gmatch(s, '([a-z]+)(%1)?')\
    \ do\n        vowel_count = vowel_count + #word[vowels]\n    end\n    return vowel_count\n\
    end", "  return s:gsub(\"[aeiouyAEIOUY]\", \"\"):gsub(\"[^aeiouyAEIOUY]\", \"\"\
    )\nend", "    local n = 1\n    for letter in string.gmatch(s, '[aeiouAEIOU]+')\
    \ do\n        n = n + 1\n    end\n    return n\nend", "  return #((s:gsub('a',\
    \ ''):gsub('e', ''):gsub('i', ''):gsub('o', ''):gsub('u', '')):gmatch('[aeiouy]'))\n\
    end", "  -- Write your function here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  for i,v in ipairs(s) do\n    if vowels[v] ~= nil then\n      count = count+1\n\
    \    end\n  end\n  return count\nend", "    local vowels = \"aeiou\"\n    local\
    \ vowels_count = 0", "\t-- Write your code here\n\tlocal v = 0\n\tfor i,v in pairs(s)do\n\
    \t\tv = v + 1\n\tend\n\treturn v\nend", "  return #s:match\"[aeiouyAEIOUY]\"\n\
    end\n</cell>\n<cell>", "   for i=1, #s do\n      if string.sub(s,i,i) ~= 'a' and\
    \ string.sub(s,i,i) ~= 'e' and string.sub(s,i,i) ~= 'i' and string.sub(s,i,i)\
    \ ~= 'o' and string.sub(s,i,i) ~= 'u' then\n         return i + 1\n      end\n\
    \   end\n   return 0\nend", "\tlocal i = 0\n\tlocal vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n\twhile i < #s do\n\t\tlocal letter = string.sub(s,i,i)\n\t\tif letter\
    \ in vowels then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn i\nend", "    local\
    \ i = 0\n    while i do\n        local c = string.sub(s, i, i)\n        if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            i = i\
    \ + 1\n        else\n            break\n        end\n    end\n    return i - 1\n\
    end", "  return string.match(s, \"[aeiouy]\") ~= nil and (string.len(s) - string.match(s,\
    \ \"[y]\"))\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like your solution but\
    \ I think OP wanted something with less complexity.\n<|/ c |>\n<| a tags=lua |>\n\
    You could do it in a one-liner using pattern matching with string concatenation:\n\
    <code>", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\treturn #(vowels + {string.sub(s,1,-1)})\
    \ -- Add the last character\nend", "  s = s:lower() -- Convert string to lowercase\n\
    \  s = s:gsub(\"[aeiouy]\", \"\") -- remove vowels\n  return s:gsub(\"[^aeiouy]\"\
    , \"\"):gsub(\" \", \"\"):gsub(\"^\", \"\"):gsub(\"$\", \"\"):gsub(\"y\", \"\"\
    ):len()\nend", "  local vowels = \"aeiouAEIOU\"\n  local counts = {}\n  for w\
    \ in string.gmatch(s, \"[^\" .. vowels .. \"]\") do\n    table.insert(counts,\
    \ #counts)\n  end\n  return #counts\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local vowel_count = 0\n  for _ in string.gmatch(s, '[aeiouy]+') do\n\
    \    vowel_count = vowel_count + 1\n  end\n  return vowel_count\nend", "   --\
    \ Write your code here!\n   return 1\nend", "  local i = 1\n  while i <= #s do\n\
    \    if s:sub(i,i) == \"a\" then\n      i = i + 1\n    elseif s:sub(i,i) == \"\
    e\" then\n      i = i + 1\n    elseif s:sub(i,i) == \"i\" then\n      i = i +\
    \ 1\n    elseif s:sub(i,i) == \"o\" then\n      i = i + 1\n    elseif s:sub(i,i)\
    \ == \"u\" then\n      i = i + 1\n    elseif s:sub(i,i) == \"y\" then\n      i\
    \ = i + 1\n    else\n      i = i + 1\n    end\n  end\n  return i - 1\nend", " \
    \ local count = 0\n  for i, v in pairs(s) do\n    if v ~= 'a' and v ~= 'e' and\
    \ v ~= 'i' and v ~= 'o' and v ~= 'u' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  if s == nil or s == '' then\n    return 0\n \
    \ end\n  return string.gsub(s, \"[aeiouy]\", ''):gsub(\"[aeiouy]\", \"\"):gsub(\"\
    [aeiouy]\", \"\")\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ count = #vowels\n    for i = 1, #s - 1 do\n        if s[i] == 'y' and (i ==\
    \ #s - 1 or s[i + 1] == 'y') then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  return #s and #s ~= 0 and v:count(\"aeiou\"\
    ) + #s - (v:sub(1, #s):find(\"aeiou\"))\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local vowels_count = 0\n    for i=1,#s do\n        if vowels[s[i]:lower()]\
    \ then vowels_count = vowels_count + 1 end\n    end\n    return vowels_count\n\
    end", "   local vowels = { 'a', 'e', 'i', 'o', 'u' }\n   for _, v in ipairs(s)\
    \ do\n      if not vowels[v] then\n         return false\n      end\n   end\n\
    \   return true\nend", "  local count = 0\n  for i, v in pairs({'a', 'e', 'i',\
    \ 'o', 'u'}) do\n    count = count + count_letters(s, v, i + 1)\n  end\n  return\
    \ count\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowel_count\
    \ = 0\n\tfor char in s:gmatch(\"[%w]\") do\n\t\tif vowels[char] then\n\t\t\tvowel_count\
    \ = vowel_count + 1\n\t\tend\n\tend\n\treturn vowel_count\nend\n</cell>\n<cell>",
  "  local count = 0\n  for char in string.gmatch(s, '[aeiouAEIOUY]') do\n    count\
    \ = count + 1\n  end\n  return count\nend", "   if #s <= 0 then return 0 end\n\
    \   for i = 1,#s do\n      if string.sub(s,i,i) ~= \"a\" and string.sub(s,i,i)\
    \ ~= \"e\" and string.sub(s,i,i) ~= \"i\" and string.sub(s,i,i) ~= \"o\" and string.sub(s,i,i)\
    \ ~= \"u\" then\n         return 0\n      end\n   end\n   return 1\nend", "\t\
    local vowels = {'a','e','i','o','u'}\n\tlocal result = {}\n\tfor w in s:gmatch('%w')\
    \ do\n\t\tfor v in vowels do\n\t\t\tif w == v then\n\t\t\t\tresult[w] = result[w]\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\n</cell>\n<text>\nThe dictionary\
    \ function", "  return string.gsub(s, \".[aeiou]\", \"\"):gsub(\"[aeiouy][^aeiouy]\"\
    , \"\")\nend", "  local n = 0\n  for i = 1, #s do\n    if s[i] ~= 'a' and s[i]\
    \ ~= 'e' and s[i] ~= 'i' and s[i] ~= 'o' and s[i] ~= 'u' then\n      if i == #s\
    \ - 1 then\n        -- If the last letter is also a vowel, it counts as one\n\
    \        -- (ex: \"i\" in the string \"aiue\" counts as \"i\").\n        n = n\
    \ + 1\n      else\n        -- Otherwise, just add one to the counter\n       \
    \ n = n + 1\n      end\n    end\n  end\n  return n\nend", "  -- Write your code\
    \ here.\n  local vowels = ''\n  local idx\n  for idx = 1,#s do\n      if string.sub(s,idx,idx)\
    \ == ('a' or 'e' or 'i' or 'o' or 'u') then\n          vowels = vowels .. string.sub(s,idx,idx)\n\
    \      end\n  end\n  return #vowels\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local count = 1\n    for i = 1, #s do\n        if vowels[string.sub(s,\
    \ i, i)] then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  local vowels = {'a','e','i','o','u'}\n  local count, i, l =\
    \ 0, #s, 0\n  for i=1,l do count = count + (s[i] .. vowels[i]) end\n  return count\n\
    end", "  local n = 1\n  for _, c in ipairs(s) do\n    if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend", "    local num_vowels = 0\n    for i = 1, #s do\n        if\
    \ string.sub(s, i, i) == \"a\" then\n            num_vowels = num_vowels + 1\n\
    \        end\n        if string.sub(s, i, i) == \"e\" then\n            num_vowels\
    \ = num_vowels + 1\n        end\n        if string.sub(s, i, i) == \"i\" then\n\
    \            num_vowels = num_vowels + 1\n        end\n        if string.sub(s,\
    \ i, i) == \"o\" then\n            num_vowels = num_vowels + 1\n        end\n\
    \        if string.sub(s, i, i) == \"u\" then\n            num_vowels = num_vowels\
    \ + 1\n        end\n    end\n    return num_vowels\nend", "    local i = 1\n \
    \   local vowelsFound = 0\n    local vowels = \"aeiou\"\n    while i < #s do\n\
    \        if string.sub(s, i, i + 1) in vowels then\n            vowelsFound =\
    \ vowelsFound + 1\n        end\n        i = i + 1\n    end\n    return vowelsFound\n\
    end", "  return string.gsub(s, '[aeiouAEIOU]', '')\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    return #vowels - 1 -- subtract 1 so length is\
    \ correct\nend", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i)\
    \ ~= 'y' then\n      if string.sub(s, i, i) == 'a' then\n        n = n + 1\n \
    \     end\n    end\n  end\n  return n\nend", "  local count = 0\n  for _, v in\
    \ pairs(string.gmatch(s, \"[aeiouAEIOU]\") or {}) do\n    count = count + 1\n\
    \  end\n  return count\nend", "  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"\
    }\n  local vowels_count = nil\n  for word in s:gmatch(\"[%w%-]+\") do\n    for\
    \ i=1, #vowels do\n      if string.find(word, vowels[i]) then\n        vowels_count\
    \ = vowels_count + 1\n      end\n    end\n  end\n  return vowels_count\nend",
  "   return string.gsub(s, '[^aeiouAEIOU]', '') + 'y' .. (string.len(s) - string.len(string.gsub(s,\
    \ '[^aeiouAEIOU]', '')))\nend", "\tlocal count, last_vowel = 0, nil\n\tfor _,v\
    \ in ipairs(s) do\n\t\tif v == 'a' then count = count + 1 end\n\t\tif v == 'e'\
    \ then count = count + 1 end\n\t\tif v == 'i' then count = count + 1 end\n\t\t\
    if v == 'o' then count = count + 1 end\n\t\tif v == 'u' then count = count + 1\
    \ end\n\t\tif v == 'y' then\n\t\t\tlast_vowel = last_vowel + 1 \n\t\tend\n\tend\n\
    \treturn count * last_vowel\nend", "  s = string.gsub(s, \"[aeiouy]\", \"\")\n\
    \  return string.gsub(s, \"[^aeiouy]\", \"\")\nend", "  return #(s:gsub(\"[^AEIOUaeiou]\"\
    , \"\")) + ((s:match(\"y$\") or s:match(\"([aeiou])\"))~=0)\nend", "  return s:sub(1,\
    \ #s - 1):gsub(\"[aeiouy]+\", \"\"):gsub(\"[aeiou]+\", \"\")\nend", "\t-- Remove\
    \ leading and trailing spaces, convert string to lowercase\n\ts = s:gsub(\"^%s*(.-)%s*$\"\
    , \"%1\")\n\ts = s:lower()", "  s = string.lower(s)\n  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local vowel_count = 0\n  for _, v in pairs(vowels) do\n  \
    \  if string.find(s, v) then\n      vowel_count = vowel_count + 1\n    end\n \
    \ end\n  return vowel_count\nend", "    local count = 0\n    for i = 1, #s do\n\
    \        if s:sub(i,i) == \"a\" then count = count + 1 end\n        if s:sub(i,i)\
    \ == \"e\" then count = count + 1 end\n        if s:sub(i,i) == \"i\" then count\
    \ = count + 1 end\n        if s:sub(i,i) == \"o\" then count = count + 1 end\n\
    \        if s:sub(i,i) == \"u\" then count = count + 1 end\n        if s:sub(i,i)\
    \ == \"y\" then count = count + 1 end\n    end\n    return count\nend", "  local\
    \ count = 1\n  for i = 1, #s do\n    count = count + count_vowels(s, i)\n  end\n\
    \  return count\nend", "  local count = 0\n  for _, c in string.gmatch(s, '[aeiouAEIOUY]*[aeiouAEIOUY]+')\
    \ do\n    count = count + 1\n  end\n  return count\nend", "  s = s:gsub('[^aeiouAEIOU]',\
    \ '')\n  return string.gsub(s, \"a\", \"\")\nend", "  local vowels = {'a','e','i','o','u'}\n\
    \  local i, j, count = 0, 1, 0\n  for i = 1, #s do\n    if vowels[s[i]] then\n\
    \      j = i+1\n      while j < #s and vowels[s[j]] do j = j+1 end\n      count\
    \ = count+1\n      i = j\n    end\n  end\n  return count\nend", "  -- base case\n\
    \  if #s == 0 then\n    return 0\n  end", "   -- Your code here\n   return #vowels\
    \ -- return the number of vowels\nend", "  -- base case\n  if s:match(\"^[aeiouy]*$\"\
    ) then return 0 end\n  -- recursive case\n  return 1 + vowels_count(s:sub(1, s:len()))\n\
    end", "    local vowels = \"aeiou\"\n    local i = 1\n    while i <= #s do\n \
    \       if vowels:find(s[i - 1]) then\n            i = i + 1\n        else\n \
    \           return i\n        end\n    end\n    return i\nend", "   local count\
    \ = 0\n   for i = 1, #s do\n      if ((s:sub(i,i) == \"a\") or (s:sub(i,i) ==\
    \ \"e\") or (s:sub(i,i) == \"i\")\n          or (s:sub(i,i) == \"o\") or (s:sub(i,i)\
    \ == \"u\") then\n      else\n         count = count + 1\n      end\n   end\n\
    \   return count\nend", "  return string.gsub(s, \"[aeiou]\", function(a)\n  \
    \  return a:end\n  end)\nend\n</cell>\n<cell>", "\tlocal count = 0\n\tfor c in\
    \ s:gmatch'[aeiouy]'\n\t\tcount = count + 1\n\tend\n\treturn count\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] ~= nil then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend", "  s = s:lower()\n  for _,v in pairs({'a','e','i','o','u'})\
    \ do\n    if s[#s] == v then return 1 + vowels_count(s[#s]) end\n  end\n  return\
    \ 0\nend", "    local n = 0\n    for _, c in string.gmatch(s, \"[aeiouy]+\") do\n\
    \        n = n + 1\n    end\n    return n\nend", "  return #s == '' or\n    ((s:sub(1,1))\
    \ == 'a' or\n    (s:sub(1,1)) == 'e' or\n    (s:sub(1,1)) == 'i' or\n    (s:sub(1,1))\
    \ == 'o' or\n    (s:sub(1,1)) == 'u' or\n    (s:sub(2,2)) == 'a' or\n    (s:sub(2,2))\
    \ == 'e' or\n    (s:sub(2,2)) == 'i' or\n    (s:sub(2,2)) == 'o' or\n    (s:sub(2,2))\
    \ == 'u')\nend", "\t-- Your code here\n\treturn 0\nend", "    local vowel_count\
    \ = 0\n    for i=1,#s do\n        if string.sub(s,i,i) ~= 'a' and string.sub(s,i,i)\
    \ ~= 'e' and string.sub(s,i,i) ~= 'i' and string.sub(s,i,i) ~= 'o' and string.sub(s,i,i)\
    \ ~= 'u' then\n            vowel_count = vowel_count + 1\n        end\n    end\n\
    \    return vowel_count\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local count = 0\n  for i = 1, #s do\n    count = count + #vowels[string.sub(s,i,i)]\n\
    \  end\n  return count\nend", "  local vowels = {\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n  local count = 0\n  for i = 1, #s do\n    if vowels[s[i]] == \"y\" and\
    \ (s[i - 1] == 'a' or s[i - 1] == 'e') then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local vowels = \"aeiou\"\n    local vowel_count\
    \ = 0\n    for i = 1, #s do\n        local c = s[i]\n        if vowels[c:byte()]\
    \ then\n            vowel_count = vowel_count + 1\n        end\n    end\n    return\
    \ vowel_count\nend\n</cell>\n<cell>", "\t-- Write your code here\n\tlocal vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n\tlocal count = 0\n\tfor i=1,#s do\n\t\tlocal word\
    \ = tostring(s[i])\n\t\tif word:sub(1,1) ~= word:sub(1,1) then return end\n\t\t\
    local len = word:len()\n\t\tlocal c = word:sub(1,1)\n\t\tif c == 'y' then\n\t\t\
    \tif len == 0 then return end\n\t\t\tlocal last_vowel = word:sub(len-1,len)\n\t\
    \t\tif vowels[last_vowel] == c then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\
    else\n\t\t\tif len == 0 then return end\n\t\t\tif vowels[word:sub(1,1)] == c then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", " \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i =\
    \ 0, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n  \
    \  end\n  end\n  return vowel_count\nend", "    return string.gsub(s, \".\", function\
    \ (c)\n      local v = string.tolower(c) .. c\n      local ok = true\n      for\
    \ i = 1, 5 do\n        ok = ok and\n            string.find(v, \"[aeiouy]\") ==\
    \ nil or\n            string.find(v, string.char(97+i)) != nil\n      end\n  \
    \    return ok\n    end) + 1\nend", "    local count = 0\n    for char in s:gmatch(\"\
    [aeiou]\") do\n        if char == \"y\" then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  return string.gsub(s, \"[aeiouy]+\"\
    , function() return 1 end)\nend", "  return #string.gmatch(s, \"[aeiouAEIOU]\"\
    ) \nend", "    local v\n    v = string.gsub(s, \"[aeiou]\", \"\", 2, true)\n \
    \   return string.len(v)\nend", "    local vowels = {'a','e','i','o','u'}\n  \
    \  local count = 0\n    for i,v in ipairs(s) do\n        if vowels[v] then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", " \
    \   -- Your code here\nend", "  s = string.lower(s)\n  local count = 0\n  for\
    \ i = 1, #s do\n    local v = string.sub(s,i,i)\n    if v ~= 'a' and v ~= 'e'\
    \ and v ~= 'i' and v ~= 'o' and v ~= 'u' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local vowels = 'aieou'\n  local ends_with_vowel\
    \ = s:match '[aeiou]'\n  return #(vowels:sub(1))\n    - ( ends_with_vowel and\
    \ #(vowels:sub(#vowels)) or 0 )\nend", "  local vowels = {\"a\",\"e\",\"i\",\"\
    o\",\"u\"}\n  local words = string.gmatch(s, \"%w+\")\n  local count = 0\n  for\
    \ _, v in ipairs(words) do\n    count = count + string.find(vowels, v) -- string.find\
    \ returns nil if it doesn't find anything\n  end\n  return count\nend", "  return\
    \ #(s:gsub(\"[AEIOUaeiouy]\", \"\"))\nend", "  return string.gsub(s, \"[aeiouy]*[^aeiouy]\"\
    , \"\")\nend", "    local count = 0\n    for i=1,#s do\n        if s[i] == 'a'\
    \ or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ count = s.Count(\"a\")\n  for i = 1, s.Count do\n    if string.sub(s,i,i) ==\
    \ \"a\" then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ local vowels = ''\n  for _,v in pairs({'a', 'e', 'i', 'o', 'u'}) do\n    vowels\
    \ = vowels .. v\n  end\n  return s:find(vowels)\nend", "   local count = 0\n \
    \  for i = 1, #s do\n      if ((s:sub(i,i) == \"a\") or (s:sub(i,i) == \"e\")\
    \ or (s:sub(i,i) == \"i\") or (s:sub(i,i) == \"o\") or (s:sub(i,i) == \"u\") then\n\
    \         count = count + 1\n      end\n   end\n   return count\nend", "  return\
    \ string.gsub(s, \".\", \"\"):gsub(\"[aeiou]\", \"\"):gsub(\"y\", \"\"):gsub(\"\
    *\", \"\"):gsub(\"^\", \"\")\nend", "  -- Base case\n  if #s == '' then return\
    \ 0 end\n  local count = 0\n  -- Iterate through string and check for vowels\n\
    \  for i = 0, #s do\n    -- If current character is a vowel, then increase count\n\
    \    if s[i - 1] == 'a' or s[i - 1] == 'e' or s[i - 1] == 'i' or\n       s[i -\
    \ 1] == 'o' or s[i - 1] == 'u' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  -- Write your function here\n  -- This algorithm iterates\
    \ through the string and counts the number of\n  -- vowels. If the last character\
    \ is a vowel, the vowel count is incremented,\n  -- otherwise, it's not. Then,\
    \ the count is divided by the number of characters\n  -- which were not vowels.\
    \ This will give the number of vowels which exist in\n  -- that portion of the\
    \ string as opposed to the total count\n  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local n = #s\n  if s[n - 1] == \"y\" then n = n - 1 else n = n\n  local\
    \ vowel_count = 0\n  for i = 1, n do\n    if vowels[s[i]] then vowel_count = vowel_count\
    \ + 1 end\n  end\n  return vowel_count\nend", "  s = s:upper()\n  local vowels\
    \ = \"AEIOU\"\n  local vowel_count = 0\n  for i=1,#s do\n    if string.sub(s,\
    \ i, i+1) ~= \"\" then -- only check for letters and space\n      for j=1,#vowels\
    \ do -- only check for vowels\n        if string.sub(s, i, j) == vowels[j] then\n\
    \          vowel_count = vowel_count + 1\n        end\n      end\n    end\n  end\n\
    \  return vowel_count\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal\
    \ vowelsCount = 0\n\tfor _,v in ipairs(s) do\n\t\tif v == vowels[#vowels] then\n\
    \t\t\tvowelsCount = vowelsCount + 1\n\t\tend\n\tend\n\treturn vowelsCount\nend",
  "  s = string.lower(s)\n  local num_vowels = 0\n  for i = 1,#s do\n    if string.sub(s,\
    \ i, i+1)==\"a\" or string.sub(s, i, i+1)==\"e\" or string.sub(s, i, i+1)==\"\
    i\" or string.sub(s, i, i+1)==\"o\" or string.sub(s, i, i+1)==\"u\" then\n   \
    \   num_vowels = num_vowels + 1\n    end\n  end\n  return num_vowels\nend", " \
    \  local count = 0\n   for _,letter in ipairs(s) do\n      if letter == \"a\"\
    \ or letter == \"e\" or letter == \"i\" or letter == \"o\" or letter == \"u\"\
    \ then\n         count = count+1\n      end\n   end\n   return count\nend", " \
    \ local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  -- The first character\
    \ should be checked to be a vowel.\n  return #vowels - 1 -- subtract 1 since the\
    \ array has zero indexing.\nend", "\tlocal count = 0\n\tfor _, c in pairs(s:gsub(\"\
    [aeiouy]\", \"\")..\"y\") do\n\t\tif c == 'a' then\n\t\t\tcount = count + 1\n\t\
    \tend\n\tend\n\treturn count\nend", "  -- Base case:\n  if #s == 0 then\n    return\
    \ 0\n  end", "  return #{ unpack(\n    string.gsub(s, \"[^aeiouyAEIOUY]\", \"\"\
    ) -- remove non vowels\n  ) }\nend", "  s = s:lower() -- Lower-case the input\
    \ string\n  for i = 1, #s do -- Loop through the characters\n    if s[i] ~= 'a'\
    \ and s[i] ~= 'e' and s[i] ~= 'i' and s[i] ~= 'o' and s[i] ~= 'u' then\n     \
    \ -- If the current character is not a vowel, count it\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend", "    local vowels = 'aeiouAEIOU'\n\
    \    local letters = ''\n    for i=1,#s do\n        letters = letters .. string.sub(s,i,i)\n\
    \    end\n    for i=1,#vowels do\n        letters = letters .. string.sub(vowels,i,i)\n\
    \    end\n    return string.len(letters)\nend", "  local count = 0\n  for char\
    \ in s:gmatch'[aeiou]'\n  do\n    count = count + 1\n  end\n  return count\nend",
  "  return string.gsub(s, \".\",\n    function (c)\n      if c == \"a\" or c == \"\
    e\" or c == \"i\" or c == \"o\" or c == \"u\"\n      then\n        return c\n\
    \      elseif c == \"y\" then\n        return c\n      end\n    end\n  ):gsub(\"\
    .\", \"\"):gsub(\",\", \"\")\nend", "  local letters, count = 1, 1\n  s:gsub(\"\
    [aeiouAEIOUY]\",\n    function(letter) count = count + 1 end)\n  return count\n\
    end", "  -- Base case (empty string)\n  if s == nil then return 0 end", "   if\
    \ s == \"\" then return 0 end\n   if s == \"y\" then return 0 end\n   return s.gsub(\"\
    [aieouAEIOUY]\", \"\"):gsub(\"y\", \"\"):gsub(\"[aeiouAEIOUY]\", \"y\"):gsub(\"\
    [aeiou]\", \"y\"):gsub(\"[aeiouAEIOUy]\", \"\"):gsub(\"[aeiouAEIOU]\", \"\")\n\
    end", "  return string.gsub(s, \".\",\n    function (c) return c == 'a' or\n \
    \     c == 'e' or\n      c == 'i' or\n      c == 'o' or\n      c == 'u' end\n\
    \  ) -- Count how many vowels there are\nend", "  s = s:upper()\n  s = s:gsub(\"\
    %A\", \"\"):gsub(\"%O\", \"\")\n  return s:match \"[aeiouAEIOUY]\"\nend", "  return\
    \ string.gsub( s, \"([aeiou])\",\n    function(x) return x:sub(1,1) == 'a' or\
    \ x:sub(1,1) == 'e' or\n      x:sub(1,1) == 'i' or x:sub(1,1) == 'o' or x:sub(1,1)\
    \ == 'u' end\n  ):byte()\nend", "  if s == nil then\n    s = \"nil\"\n  end\n\
    \  -- Count number of vowels and return them\n  local vowels_count = 0\n  local\
    \ last_char = string.sub(s,1,1)\n  if last_char == \"a\" then\n    vowels_count\
    \ = vowels_count + 1\n  end\n  if last_char == \"e\" then\n    vowels_count =\
    \ vowels_count + 1\n  end\n  if last_char == \"i\" then\n    vowels_count = vowels_count\
    \ + 1\n  end\n  if last_char == \"o\" then\n    vowels_count = vowels_count +\
    \ 1\n  end\n  if last_char == \"u\" then\n    vowels_count = vowels_count + 1\n\
    \  end\n  return vowels_count\nend", "    local vowels = {\n        [\"a\"] =\
    \ \"a\",\n        [\"e\"] = \"e\",\n        [\"i\"] = \"i\",\n        [\"o\"]\
    \ = \"o\",\n        [\"u\"] = \"u\",\n        [\"y\"] = \"y\",\n    }\n    return\
    \ s:gsub(\"[^\" .. table.concat(vowels, \", \") .. \"]\", \"\")\nend", "    local\
    \ v = 0\n    for w in string.gmatch(s, \"[aeiouy]\") do\n        v = v + 1\n \
    \   end\n    return v\nend", "    local vowels = {}\n    for i = 1, #s do\n  \
    \      table.insert(vowels, table.match(s, '[aeiou]'..(i==#s and 'y' or '')))\n\
    \    end\n    return #table.concat(vowels, \"\")\nend", "  s = s:lower()\n  local\
    \ vowels = {'a','e','i','o','u','y'}\n  local count = 0\n  for i = 1, #s do\n\
    \    if vowels[s[i]] then count = count+1 end\n  end\n  return count\nend", " \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count, l = 0, 1\n  repeat\n\
    \    count = count + 1\n    local v = s:sub(l,l)\n    if #v > 0 and v:sub(0,1)\
    \ == 'y' then count = count + 1 end\n    l = l + 1\n  until l > #s\n  return count\n\
    end", "  return string.gsub(s, \".\", function(a) vowels(a) end)\nend", "    --\
    \ Your code here\n    return string.gsub(s, \".\", \"%1\").\"%%1\".\n        \
    \      (string.gsub(\"[aeiouy]+\", \"%1\", \"[aeiouy]*\") % \"e%%1\").\n     \
    \         (string.gsub(\"^[aeiouy]+\", \"%1\", \"[aeiouy]*\") % \"e%%1\").\n \
    \             (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\").\n\
    \              (string.gsub(\"^[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]*\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]*\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]*$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]*$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]*$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]*$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]+", "\tlocal vowels = {'a','e','i','o','u'}\n\
    \tlocal count = 0\n\tlocal i, n = 0, #s\n\twhile i < n do\n\t\tif vowels[s[i]]\
    \ then count = count + 1 end\n\t\ti = i + 1\n\tend\n\treturn count\nend", "  if\
    \ s == \"\" then return 0 end\n  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"\
    }\n  local vowel_count = 0\n  for i = 1, #s do\n    if vowels[string.sub(s,i,i)]\
    \ then\n      vowel_count = vowel_count + 1\n    end\n  end\n  return vowel_count\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n   \
    \ for c in string.gmatch(s, '[aeiouy]') do\n        if vowels[c] then\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend", "  return\
    \ string.gsub(s, '[aeiouyAIEOUY]+', '')\nend", "  local vowels = {\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n  local count = {}\n  for i = 1, #s do\n    local v =\
    \ s[i]\n    count[v] = (count[v] or 0) + 1\n  end\n  for _, v in pairs(vowels)\
    \ do\n    count[v] = (count[v] or 0) - 1\n  end\n  return count\nend", "  local\
    \ count = 0\n  for i in string.gmatch(s, \"[aeiouAEIOU]\") do\n    count = count\
    \ + 1\n  end\n  return count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    return #vowels - 1\nend", "  local letters = {}\n  for c in string.gmatch(s,\
    \ \"%S+\") do\n    letters[c] = letters[c] or 0\n    letters[c] = letters[c] +\
    \ 1\n  end\n  for v in \"aeiou\" do\n    if letters[v] and letters[v] > 1 then\n\
    \      return letters[v]\n    end\n  end\n  return 0\nend", "   local vowels =\
    \ {}\n   for _, ch in pairs(s) do\n      if ch == \"a\" or ch == \"e\" or ch ==\
    \ \"i\" or ch == \"o\" or ch == \"u\"\n      then\n         table.insert(vowels,\
    \ ch)\n      end\n   end\n   local vowel_count = #vowels\n   return vowel_count\n\
    end", "   s = string.gsub(s, \".\", \"\") -- Remove all non-letters\n   s = string.gsub(s,\
    \ \" \", \"\") -- Remove all spaces\n   return #string.gmatch(s, \"[aeiouy]+\"\
    ) -- Count the vowels\nend", "  local vowels = {}\n  local i = 1\n  while i <=\
    \ #s do\n    local v = s:sub(i,i)\n    i = i + 1\n    if v == \"a\" or v == \"\
    e\" or v == \"i\" or v == \"o\" or v == \"u\" then\n      vowels[#vowels+1] =\
    \ v\n    end\n  end\n  return #vowels\nend", "  local vowels = {'a','e','i','o','u'}\n\
    \  local count = 0\n  for i=1,#s do\n    if vowels[s[i]] == true then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local vowels = \"aeiouy\"\
    \n  local num_vowels = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if\
    \ vowels:find(c) ~= nil then\n      num_vowels = num_vowels + 1\n    end\n  end\n\
    \  return num_vowels\nend", "  local n = 0\n  for i = 1, #s do\n    if s[i] ==\
    \ \"a\" then\n      n = n + 1\n    else if s[i] == \"e\" then\n      n = n + 1\n\
    \    else if s[i] == \"i\" then\n      n = n + 1\n    else if s[i] == \"o\" then\n\
    \      n = n + 1\n    else if s[i] == \"u\" then\n      n = n + 1\n    end\n \
    \ end\n  return n\nend", "  local n = 0\n  for c in s:gmatch(\".\") do if c ==\
    \ \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\n                       \
    \               c == \"u\" then n = n + 1 end end\n  return n\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    return #vowels - 1 -- subtract 1 because\
    \ count from 1\nend", "  return #(\n    string.gsub(s, \"[aeiouy]\", \"\") --\
    \ \"y\" is considered a vowel\n  ) + 1\nend", "  local count = 0\n  for c in string.gsub(s,\
    \ \"[^aeiouAEIOUY]\", \"\")\n    do\n      count = count + 1\n    end\n  return\
    \ count\nend", "   local vowel_count = 0\n   for char in s:gmatch(\"[aeiouy]+\"\
    ) do\n      vowel_count = vowel_count + 1\n   end\n   return vowel_count\nend",
  "  local count = 0\n  for _, c in ipairs(s) do\n    if c == 'a' or c == 'e' or c\
    \ == 'i' or c == 'o' or c == 'u' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ vowels_counter = 0\n    for i = 1, #s do\n        if vowels[string.sub(s,i,i)]\
    \ then\n            vowels_counter = vowels_counter + 1\n        end\n    end\n\
    \    return vowels_counter\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
