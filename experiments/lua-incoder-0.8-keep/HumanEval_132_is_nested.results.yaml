name: HumanEval_132_is_nested
language: lua
results:
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   -- We need to keep track of the first and last\
    \ bracket we encounter \n   local i1, i2, i3 = 1, #string, -1\n   -- And keep\
    \ track of if we are in a square bracket expression\n   local in_square_bracket\
    \ = false\n   -- We use a stack so that we preserve the order in which brackets\
    \ are encountered\n   local stack = {}\n   -- If the string is empty, we return\
    \ True\n   if string == nil then return true end\n   -- If the string is only\
    \ one character, we return True\n   if #string == 1 then return string == string[1]\
    \ end\n   -- We iterate through the characters and keep track of each bracket\n\
    \   for i = 1, #string do\n      local c = string[i]\n      -- If we are currently\
    \ in a bracket expression, push the bracket to the stack\n      if c == '[' then\n\
    \         if in_square_bracket == false then\n            -- We set the first\
    \ and last index that we encounter as the last index of our stack\n          \
    \  -- We do this because we don't want to consider any brackets after the first\
    \ bracket\n            -- This is because we do not want the square brackets to\
    \ ever be part of a valid expression\n            stack[1] = {\n             \
    \  i1,\n               i2,\n               i3\n            }\n            -- And\
    \ we are going to push all the brackets to the stack\n            in_square_bracket\
    \ = true\n         else\n            stack[#stack + 1] = {\n               i1,\n\
    \               i2,\n               i3\n            }\n         end\n      --\
    \ If we are not in a bracket expression, we just keep track of the last index\n\
    \      elseif c == ']' then\n         -- If this is the last bracket, we can safely\
    \ pop the stack\n         if in_square_bracket == true then\n            -- Set\
    \ the last index as the first index\n            stack[#stack + 1] = {\n     \
    \          i1,\n               i2,\n               i3\n            }\n       \
    \     -- Remove the last bracket from the stack\n            in_square_bracket\
    \ = false\n         end\n      -- If we are currently in a bracket expression,\
    \ we just push it to the stack\n      elseif in_square_bracket == true then\n\
    \         stack[#stack + 1] = {\n            i1,\n            i2,\n          \
    \  i3\n         }\n      end\n      -- We also keep track of the current index\n\
    \      i1, i2, i3 = i + 1, i2, i3 + 1\n   end\n   -- If we encounter a closing\
    \ bracket, we know that at least one bracket was encountered \n   -- So we return\
    \ True\n   return stack[1][3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpknuv2yma.lua:70:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpknuv2yma.lua:70:\
    \ in local 'candidate'\n\t/tmp/tmpknuv2yma.lua:76: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {string}\n    local function is_closed_bracket(character)\n\
    \        if stack[#stack] == nil then\n            return false\n        end\n\
    \        return stack[#stack] == character\n    end\n    \n    while #stack >\
    \ 1 do\n        local current_bracket = stack[1]\n        local stack_size = #stack\n\
    \        if current_bracket ~= '[' and current_bracket ~= '{' then\n         \
    \   return false\n        end\n        if #stack == stack_size then\n        \
    \    return true\n        end\n        local current_closed_bracket = is_closed_bracket(current_bracket)\n\
    \        \n        if not current_closed_bracket then\n            return false\n\
    \        end\n        local new_stack = stack[#stack:1]\n        stack[stack_size]\
    \ = new_stack\n        stack = stack:new_table()\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6j5uqlsm.lua:33: <name> expected near '1'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local index = 1\n  -- Iterate through the string\
    \ and check each character until we find the closing bracket\n  while index <=\
    \ #string do\n    index = string.find(string, ']', index) or #string\n    \n \
    \   -- If the character is a opening bracket, increment index\n    if string.sub(string,index,index+1)=='['\
    \ then\n      index = index + 1\n      \n    -- If the character is a closing\
    \ bracket, decrement index\n    elseif string.sub(string,index,index+1)==']' then\n\
    \      index = index + 1\n      \n    -- If neither opening or closing bracket\
    \ was found, return false\n    else\n      return false\n    end\n  end\n  \n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7p9dkrj.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl7p9dkrj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local open_brackets, closed_brackets = 0, 1\n\
    \  \n  for i, c in string.gmatch( string, '%b[]') do\n    if c == open_brackets\
    \ then open_brackets = open_brackets + 1 \n    if c == closed_brackets then closed_brackets\
    \ = closed_brackets + 1 \n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_j7amxji.lua:37: 'end' expected (to close 'if' at line 14)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open_brackets = { [[[\n        ]]]]] }\n\
    \    local close_brackets = open_brackets\n    local bracket_count = #string\n\
    \    while bracket_count > 0 do\n        local close_bracket = close_brackets[math.random(1,\
    \ #close_brackets)]\n        if open_brackets[close_bracket] then\n          \
    \  close_brackets[close_bracket] = nil\n            bracket_count = bracket_count\
    \ - 1\n        else\n            close_brackets[close_bracket] = true\n      \
    \  end\n    end\n    return (bracket_count > 0 and #open_brackets == 0)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbpoh5jp8.lua:12: '}' expected (to close '{' at line 11) near\
    \ ']'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Write your code here\n  return string.find(string,'[[[{')\
    \  ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5i1bbu1v.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp5i1bbu1v.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp5i1bbu1v.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- A function that checks whether or not a string\
    \ contains only square brackets \n  -- returns True if the string contains only\
    \ brackets, and False otherwise.\n  return string.find(string, '[%[[]') ~= nil\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpue_1be1d.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpue_1be1d.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local opening = {'[', '{', '('}\n  local closing\
    \ = {']', '}', ')'}\n  local opened_brackets = 1\n  local closed_brackets = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkqle3q4l.lua:35: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal bracket_count = 0\n\tlocal open_bracket_count\
    \ = 0\n\t\n\t-- Loop over each character in the string and increase the counter\
    \ if the character is a bracket\n\tfor i,c in pairs(string) do\n\t\tif c == '['\
    \ then\n\t\t\topen_bracket_count = open_bracket_count + 1\n\t\telseif c == ']'\
    \ then\n\t\t\tbracket_count = bracket_count - 1\n\t\tend\n\tend\n\t\n\tif bracket_count\
    \ == 0 and open_bracket_count == 0 then\n\t\treturn false\n\telseif bracket_count\
    \ ~= open_bracket_count then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt2gcfukn.lua:15:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpt2gcfukn.lua:15: in local 'candidate'\n\t/tmp/tmpt2gcfukn.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tif string == nil then\n\t\treturn false\n\tend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuj90p0om.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Check for empty string\n    if string ==\
    \ '' then return end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqyi88vf3.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local brackets = string\n  local open = 0\n  local\
    \ close = 0\n  local open_brackets = 0\n  local is_open = false\n  local is_close\
    \ = false\n  local open_brackets_temp = 0\n  local is_open_brackets_temp = false\n\
    \  local close_brackets_temp = 0\n  local is_close_brackets_temp = false\n  local\
    \ brackets_count = 0\n  while open ~= close do\n    open_brackets_temp = (open_brackets\
    \ + 1) \n    is_open_brackets_temp = open_brackets_temp == 1 or (open_brackets_temp\
    \ == 2 and is_open)\n    close_brackets_temp = (close_brackets + 1) \n    is_close_brackets_temp\
    \ = close_brackets_temp == 1 or (close_brackets_temp == 2 and is_close)\n    brackets\
    \ = brackets .. open\n    open = string.find(brackets, ']')\n    close = string.find(brackets,\
    \ '[') \n    if open == nil then\n      if is_close then\n        return true\n\
    \      else\n        return false\n      end\n    elseif open > close then\n \
    \     if open_brackets == 1 then\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      if open_brackets_temp == 1 then\n        if\
    \ is_open_brackets_temp then\n          return true\n        else\n          return\
    \ false\n        end\n      else\n        if is_close_brackets_temp then\n   \
    \       return true\n        else\n          return false\n        end\n     \
    \ end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyunq1_km.lua:65:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyunq1_km.lua:65:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal pos = 1\n\tlocal brackets = 0\n\twhile pos\
    \ < #string do\n\t\tlocal c = string[pos]\n\t\tif c == '[' then\n\t\t\tbrackets\
    \ = brackets + 1\n\t\telseif c == ']' then\n\t\t\tbrackets = brackets - 1\n\t\t\
    elseif brackets == 0 and c ~= '[' then\n\t\t\treturn false\n\t\tend\n\t\tpos =\
    \ pos + 1\n\tend\n\treturn brackets == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjngd477h.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjngd477h.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  assert(type(string) == 'string', 'string required')\n\
    \  local bracket_count = 0\n  for i=1,#string do\n    if string[i] == '[' then\n\
    \      bracket_count = bracket_count + 1\n    elseif string[i] == ']' then\n \
    \     bracket_count = bracket_count - 1\n    end\n    if bracket_count < 0 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqw_a4q9.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkqw_a4q9.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Iterate over the string, counting the number\
    \ of left brackets\n\t-- encountered. When that number becomes 0, we have found\
    \ a nested brackets\n\t-- sequence.\n\tfor i = 0, string.lenght - 1 do\n\t\tif\
    \ string[i] ~= '[' then\n\t\t\tbreak\n\t\tend\n\t\t-- The counter does not increase\
    \ if we have already seen a left bracket,\n\t\t-- because that means that we have\
    \ encountered a sequence of right\n\t\t-- brackets, which is impossible.\n\t\t\
    if string.sub(i, 1).lenght == 0 then\n\t\t\treturn true\n\t\tend\n\t\ti = i +\
    \ 1\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7sc_rep.lua:14:\
    \ attempt to perform arithmetic on a nil value (field 'lenght')\nstack traceback:\n\
    \t/tmp/tmpb7sc_rep.lua:14: in local 'candidate'\n\t/tmp/tmpb7sc_rep.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Split string by brackets\n\tlocal nested =\
    \ string.gsub(string, '[[]', '{}')\n\t-- Replace all nested brackets\n\tfor i\
    \ = 1, #nested do \n\t\tnested = string.gsub(nested, '{%d}', '{}')\n\tend\n\t\
    -- Split string by braces\n\tlocal not_nested = string.gsub(string, '{}', '[]')\n\
    \t-- Remove all non-nested brackets\n\tnested = string.gsub(nested, '[]', '[')\n\
    \tnot_nested = string.gsub(not_nested, '[]', '[')\n\t\n\t-- If nested is empty,\
    \ there are no brackets in string\n\treturn not nested or #nested == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvswqs0i.lua:20:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpmvswqs0i.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpmvswqs0i.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- If the string contains only square brackets\n\
    \tif string.find(string, '[]') ~= nil then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprc7cajy3.lua:35: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Your code here!\n  -- \u2B07\uFE0F\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmper6_cl4d.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmper6_cl4d.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local bracket_stack = { 0 }\n  return string:gsub(\"\
    %a\", function(c)\n    if not bracket_stack[#bracket_stack] then\n      local\
    \ opening = string.sub(c, 1, 1)\n      local closing = string.sub(c, 1, 2)\n \
    \     if opening ~= '[' or closing ~= ']' then return false end\n      bracket_stack[#bracket_stack]\
    \ = opening and closing and closing:len()\n    else\n      local opening = string.sub(c,\
    \ 1, bracket_stack[#bracket_stack])\n      local closing = string.sub(c, 2, bracket_stack[#bracket_stack]\
    \ - 1)\n      if opening ~= '[' or closing ~= ']' then return false end\n    \
    \  local count = bracket_stack[#bracket_stack] ~= closing:len() and 1 or 0\n \
    \     if count > 0 then bracket_stack[#bracket_stack] = closing end\n    end\n\
    \    bracket_stack[#bracket_stack] = nil\n    return true\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdp2nkpr.lua:33:\
    \ expected: true, actual: \"[[]]\"\nstack traceback:\n\t/tmp/tmpzdp2nkpr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    if string == '' then return false end\n    if\
    \ string[1] == '[' then return is_nested(string) end\n    if string[#string] ==\
    \ '[' then return is_nested(string) end\n    return true\nend\n</cell>\n<cell>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9r5l_p_e.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local opening_bracket = 0\n    local closing_bracket\
    \ = 0\n    local level = 0\n    local open_bracket\n    local close_bracket\n\
    \    for _, character in ipairs(string) do\n        if character == '[' then\n\
    \            open_bracket = opening_bracket\n            opening_bracket = open_bracket\
    \ + 1\n        elseif character == ']' then\n            close_bracket = closing_bracket\n\
    \            closing_bracket = close_bracket + 1\n        elseif character ==\
    \ '[' then\n            level = level + 1\n        elseif character == ']' then\n\
    \            if level == 0 then\n                return false\n            end\n\
    \            level = level - 1\n        end\n    end\n    if opening_bracket ~=\
    \ closing_bracket then return false end\n    if open_bracket ~= close_bracket\
    \ then return false end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z5z8r_z.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9z5z8r_z.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tstring = string or '[]'\n\tlocal open_brackets\
    \ = string.gsub(string, \"%[(%+)\", \"\")\n\tlocal close_brackets = string.gsub(string,\
    \ \"%]%+\", \"\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqu8qcyng.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- If string contains only one square bracket,\
    \ return False\n    if string.find ('[[]]') ~= nil then\n        return false\n\
    \    end\n    local open_bracket = string.find ('[[]')\n    local close_bracket\
    \ = string.find ('[[]]')\n    local i = 1\n    while open_bracket ~= nil do\n\
    \        -- If i is greater than the length of string, return false\n        if\
    \ i > #string then\n            return false\n        end\n        -- If open_bracket\
    \ is less than close_bracket, return false\n        if open_bracket < close_bracket\
    \ then\n            return false\n        end\n        if string[open_bracket]\
    \ == '[' and string[close_bracket] == ']' then\n            open_bracket = string.find\
    \ ('[[]', open_bracket + 1)\n            close_bracket = string.find ('[[]]',\
    \ open_bracket + 1)\n        elseif string[open_bracket] == '[' then\n       \
    \     open_bracket = string.find ('[[]', open_bracket + 1)\n        elseif string[close_bracket]\
    \ == '[' then\n            close_bracket = string.find ('[[]]', close_bracket\
    \ + 1)\n        elseif string[close_bracket] == '}' then\n            close_bracket\
    \ = string.find ('[[]]', close_bracket + 1)\n        else\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    -- If open_bracket is greater\
    \ than the length of string, return false\n    if open_bracket > #string then\n\
    \        return false\n    end\n    -- If close_bracket is greater than the length\
    \ of string, return false\n    if close_bracket > #string then\n        return\
    \ false\n    end\n    -- Otherwise, return true\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2aq01cfe.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp2aq01cfe.lua:12: in local 'candidate'\n\t/tmp/tmp2aq01cfe.lua:56: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Get the brackets, ignoring the inner ones.\n\
    \tlocal open_brackets = string.gsub(string, \"[\", \"\")\n\tlocal closed_brackets\
    \ = string.gsub(string, \"]\", \"\")\n\t-- The result can be False if the string\
    \ has no valid brackets \n\t-- or it can be True if the string has only brackets\
    \ \n\t-- and no valid subsequence.\n\treturn open_brackets == closed_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpla2c6yd3.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpla2c6yd3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpla2c6yd3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local i = 1\n    while i <= string.count ('[[]',\
    \ string) and i <= string.count ('[]]', string) do\n        if string.sub (string,\
    \ 1, i) == '[' then\n            i = i + 1 \n        elseif string.sub (string,\
    \ 1, i) == ']' then\n            i = i + 1\n        elseif i == string.count ('[[]',\
    \ string) + 1 then\n            return false\n        else\n            i = i\
    \ + 1\n        end\n    end\n    return string.sub (string, 1, i) == ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpry980s76.lua:12:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpry980s76.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpry980s76.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   for i = 1, #string do\n      local c = string.sub(i,\
    \ i)\n      if c ~= ']' and c ~= '[' then\n         return false\n      end\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr03o3mt1.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr03o3mt1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Check for empty string\n  if string.lenth <=\
    \ 0 then return end\n  -- Check for brackets at beginning of string\n  if string.sub(1,\
    \ 1):find('[]') ~= nil then return false end\n  -- Check all nesting levels \n\
    \  local is_nested = true\n  local current_level = string.len(string.sub(1, 1))\
    \ + 1\n  local last_open_bracket = string.sub(1, 1)\n  for i = 1, string.len(string)\
    \ do\n    if string.sub(i, 1) ~= '[]' then \n      -- Check for brackets starting\
    \ in current_level\n      if string.sub(i, 1):find('[' .. last_open_bracket) ~=\
    \ nil then\n        last_open_bracket = string.sub(i, 1)\n        current_level\
    \ = string.len(string.sub(i, 1)) + 1\n      else\n        is_nested = false\n\
    \      end\n    else\n      -- Check for the closing bracket\n      if string.sub(i,\
    \ 1) ~= '[' then is_nested = false end\n    end\n  end\n  return is_nested\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpma5nm3s3.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpma5nm3s3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpma5nm3s3.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local opening_char = '['\n    local closing_char\
    \ = ']'\n    local opening_bracket = 1\n    local closing_bracket = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp81sena_2.lua:35: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal count = 0\n\tfor i,c in string.gmatch( string,\
    \ \"%a\" ) do\n\t\tcount = count + 1\n\t\tif c == '[' then\n\t\t\tcount = count\
    \ - 1\n\t\telseif c == ']' then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9s3k_4kx.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9s3k_4kx.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal is_nested = false\n\t\n\tlocal bracket_count\
    \ = 0\n\tlocal last_bracket_found = -1\n\tlocal bracket_start = -1\n\tlocal bracket_end\
    \ = -1\n\t\n\tlocal i, j = string.find(string, '[')\n\twhile i > 0 do\n\t\tif\
    \ string.find(string, '[[', j) then\n\t\t\tbracket_start = string.find(string,\
    \ '[[', j) + 2\n\t\t\tbracket_end = string.find(string, ']]', j)\n\t\t\t\n\t\t\
    \t-- Check every consecutive pair of brackets.\n\t\t\twhile bracket_start < bracket_end\
    \ do\n\t\t\t\tif string.find(string, '[[', bracket_start) then\n\t\t\t\t\t-- Check\
    \ for a nested bracket.\n\t\t\t\t\tlocal nesting_bracket_start = string.find(string,\
    \ '[[', bracket_start) + 2\n\t\t\t\t\tlocal nesting_bracket_end = string.find(string,\
    \ ']]', nesting_bracket_start) -- If there is an even number of nested brackets,\n\
    \t\t\t\t\t-- then the closing bracket must be in the same column.\n\t\t\t\t\t\n\
    \t\t\t\t\t-- If the closing bracket is on the same line, then there are no nested\
    \ brackets.\n\t\t\t\t\tif nesting_bracket_end > nesting_bracket_start then\n\t\
    \t\t\t\t\tif string.find(string, ']]', nesting_bracket_end) then\n\t\t\t\t\t\t\
    \tif nesting_bracket_end - nesting_bracket_start == 2 then\n\t\t\t\t\t\t\t\tis_nested\
    \ = true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\
    \t\t-- Else, the closing bracket is on a different line, so there is a nested\
    \ bracket.\n\t\t\t\t\telse\n\t\t\t\t\t\tbracket_count = bracket_count + 1\n\t\t\
    \t\t\t\t\n\t\t\t\t\t\tif bracket_count == 2 then\n\t\t\t\t\t\t\tis_nested = true\n\
    \t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t-- Increment the bracket\
    \ count and end the inner loop by breaking the outer loop.\n\t\t\t\t\tbracket_count\
    \ = bracket_count + 1\n\t\t\t\t\tj = nesting_bracket_end\n\t\t\t\telse\n\t\t\t\
    \t\t-- Check for the next bracket.\n\t\t\t\t\tlocal next_bracket_start = string.find(string,\
    \ '[[', bracket_start)\n\t\t\t\t\tif next_bracket_start ~= -1 then\n\t\t\t\t\t\
    \tif string.find(string, ']]', next_bracket_start) then\n\t\t\t\t\t\t\tbracket_count\
    \ = bracket_count + 1\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif bracket_count == 2 then\n\
    \t\t\t\t\t\t\t\tis_nested = true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\n\t\t\t\t\t\
    \t\tj = next_bracket_start\n\t\t\t\t\t\tend\n\t\t\t\t\t\t\n\t\t\t\t\t\tbracket_start\
    \ = next_bracket_start\n\t\t\t\t\telse\n\t\t\t\t\t\t-- If there are no brackets\
    \ left in the substring, then there is no \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcj4u6zrn.lua:53: 'end' expected (to close 'while' at line\
    \ 25) near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Check if there is at least one pair of brackets\n\
    \tif string:find(brackets.lbracket, 1) or string:find(brackets.rbracket, 1) then\n\
    \t\t-- Check if the number of open brackets is equal to the number of close brackets\n\
    \t\treturn brackets.openbrackets == brackets.closebrackets\n\telse\n\t\treturn\
    \ false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2go8f6s.lua:12:\
    \ attempt to index a nil value (global 'brackets')\nstack traceback:\n\t/tmp/tmpz2go8f6s.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpz2go8f6s.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {[]}\n    local result = 0\n \
    \   for i,v in string.gmatch(string,'%[[]') do\n        if stack[1] == '[]' then\n\
    \            stack[1] = v\n        else\n            if stack[#stack] == '[]'\
    \ then\n                stack[#stack] = v\n                stack[#stack+1] = '[]'\n\
    \            else\n                stack[#stack] = v\n            end\n      \
    \  end\n        if stack[#stack] == '[]' then\n            result = result + 1\n\
    \        end\n    end\n    return result == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu3483jsk.lua:11: unexpected symbol near ']'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local index = 0\n    while index <= #string\
    \ do\n        if string[index] == '[' then\n            if string[index + 1] ==\
    \ '[' then\n                index = index + 2\n            elseif string[index\
    \ + 1] == ']' then\n                index = index + 2\n            else\n    \
    \            return false\n            end\n        else\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0nixtsy.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu0nixtsy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local brackets = {}\n  for i = 1, #string do\n\
    \    local b = string[i]\n    if b == '[' then\n      if brackets[#brackets+1]\
    \ == nil then\n        brackets[#brackets+1] = {i}\n      else\n        table.insert(brackets[#brackets+1],\
    \ {i})\n      end\n    elseif b == ']' then\n      if brackets[#brackets] ~= nil\
    \ then\n        for j = #brackets[#brackets] - 1, 1, -1 do\n          local i\
    \ = brackets[#brackets][j]\n          brackets[#brackets] = {i}\n        end\n\
    \      end\n    end\n  end\n  return #brackets > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dpzjxjb.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0dpzjxjb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets_stack = stack()\n    for _, char\
    \ in string.gmatch( string, '%[%[()' ) do\n        if char == '[' then\n     \
    \       brackets_stack:push( char )\n        elseif char == ']' then\n       \
    \     if brackets_stack:len() == 1 then\n                return false\n      \
    \      end\n            brackets_stack:pop()\n        end\n    end\n    return\
    \ brackets_stack:len() == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0p1hpyr9.lua:11:\
    \ attempt to call a nil value (global 'stack')\nstack traceback:\n\t/tmp/tmp0p1hpyr9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp0p1hpyr9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = string.gsub(string, \"[[][\"\
    , \"\")\n    local nesting = string.gsub(brackets, \"[][]\", \"\")\n    return\
    \ nesting ~= brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hban_kj.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp6hban_kj.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp6hban_kj.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Base case\n\t-- Return true if string is empty\n\
    \tif string == \"\" then return true end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7_ece8bv.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   -- Define recursive function.\n   local function\
    \ is_nested_helper(string, index, nested, depth)\n      -- Base case: when the\
    \ index is past the end of the string, return True\n      if index == #string\
    \ then\n         return nested\n      end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm7x_ax3t.lua:37: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Initialize the result to the string passed\
    \ in.\n\tlocal result = string\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjt8uvzxl.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   -- Initialize with false because string could\
    \ be empty.\n   local is_nested = false\n   for i = 1, #string do\n      -- If\
    \ current char is not a bracket, set is_nested false.\n      if string[i] ~= '['\
    \ or string[i] ~= ']' then\n         is_nested = false\n         break\n     \
    \ end\n      -- Else, if current char is a bracket, check if bracket is nested.\n\
    \      if string[i] == '[' then\n         if #string < i + 1 then is_nested =\
    \ false break\n         if string[i + 1] == '[' then is_nested = true break end\n\
    \      elseif string[i] == ']' then\n         if #string < i + 1 then is_nested\
    \ = false break\n         if string[i + 1] == ']' then is_nested = true break\
    \ end\n      end\n   end\n   return is_nested\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsz4egwv4.lua:50: 'end' expected (to close 'for' at line 13)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string ~= '' and string.find(string, \"\
    [\") > -1\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3_67cnv0.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal brackets = {}\n\tlocal last = -1\n\tlocal\
    \ open_brackets = 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvu32__6u.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   local brackets = {}\n   for i = 1, string.lent\
    \ -1 do\n      local character = string.sub(i, i + 1)\n      if character ~= '['\
    \ then return false end\n      table.insert(brackets, character)\n   end\n   if\
    \ string.sub((string.lent - 1), string.lent) ~= '[' then return false end\n  \
    \ if #brackets ~= 1 then return false end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvi8r6bkd.lua:12:\
    \ attempt to perform arithmetic on a nil value (field 'lent')\nstack traceback:\n\
    \t/tmp/tmpvi8r6bkd.lua:12: in local 'candidate'\n\t/tmp/tmpvi8r6bkd.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    local open_brackets\n\
    \    local close_brackets\n    for index, value in ipairs(string) do\n       \
    \ if value == ']' and open_brackets == '[' then\n            close_brackets =\
    \ value\n        elseif value == '[' then\n            if open_brackets ~= '['\
    \ then\n                table.insert(stack, value)\n            end\n        \
    \    open_brackets = value\n        elseif value == ']' and open_brackets ~= '['\
    \ then\n            if close_brackets ~= ']' then\n                return false\n\
    \            end\n            open_brackets = close_brackets\n            table.insert(stack,\
    \ close_brackets)\n        elseif open_brackets ~= '[' then\n            close_brackets\
    \ = value\n        end\n    end\n    return stack[1] == '[' and stack[#stack]\
    \ == ']'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nqawbqa.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4nqawbqa.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   if string:find('[', '[')>-1 then\n      return\
    \ true\n   else\n      return false\n   end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz1u706mg.lua:11:\
    \ bad argument #2 to 'find' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpz1u706mg.lua:11: in local 'candidate'\n\t/tmp/tmpz1u706mg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal bracket_count = 0\n\tlocal curly_count =\
    \ 0\n\tlocal open_bracket = 0\n\tlocal open_bracket1 = 0\n\tlocal open_bracket2\
    \ = 0\n\tlocal open_bracket3 = 0\n\tlocal open_bracket4 = 0\n\tlocal open_bracket5\
    \ = 0\n\tlocal open_bracket6 = 0\n\tlocal open_bracket7 = 0\n\tlocal open_bracket8\
    \ = 0\n\tlocal open_bracket9 = 0\n\tlocal open_bracket10 = 0\n\tlocal open_bracket11\
    \ = 0\n\tlocal open_bracket12 = 0\n\tlocal open_bracket13 = 0\n\tlocal open_bracket14\
    \ = 0\n\tlocal open_bracket15 = 0\n\tlocal open_bracket16 = 0\n\tlocal open_bracket17\
    \ = 0\n\tlocal open_bracket18 = 0\n\tlocal open_bracket19 = 0\n\tlocal open_bracket20\
    \ = 0\n\tlocal open_bracket21 = 0\n\tlocal open_bracket22 = 0\n\tlocal open_bracket23\
    \ = 0\n\tlocal open_bracket24 = 0\n\tlocal open_bracket25 = 0\n\tlocal open_bracket26\
    \ = 0\n\tlocal open_bracket27 = 0\n\tlocal open_bracket28 = 0\n\tlocal open_bracket29\
    \ = 0\n\tlocal open_bracket30 = 0\n\tlocal open_bracket31 = 0\n\tlocal open_bracket32\
    \ = 0\n\tlocal open_bracket33 = 0\n\tlocal open_bracket34 = 0\n\tlocal open_bracket35\
    \ = 0\n\tlocal open_bracket36 = 0\n\tlocal open_bracket37 = 0\n\tlocal open_bracket38\
    \ = 0\n\tlocal open_bracket39 = 0\n\tlocal open_bracket40 = 0\n\tlocal open_bracket41\
    \ = 0\n\tlocal open_bracket42 = 0\n\tlocal open_bracket43 = 0\n\tlocal open_bracket44\
    \ = 0\n\tlocal open_bracket45 = 0\n\tlocal open_bracket46 = 0\n\tlocal open_bracket47\
    \ = 0\n\tlocal open_bracket48 = 0\n\tlocal open_bracket49 = 0\n\tlocal open_bracket50\
    \ = 0\n\tlocal open_bracket51 = 0\n\tlocal open_bracket52 = 0\n\tlocal open_bracket53\
    \ = 0\n\tlocal open_bracket54 = 0\n\tlocal open_bra\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgk1vfsa5.lua:89: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   if string == '' or string.sub(1, 1) ~= '[' then\
    \ return false end\n   for i = 1, string.len() - 1 do\n      local char = string.sub(i,\
    \ i)\n      if not (string.sub(i + 1, i + 2) == '[]' and char == ']') then return\
    \ false end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyubym3ip.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyubym3ip.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = 0\n    for i = 1, string.len\
    \ do\n        if string[i] == '[' then\n            brackets = brackets + 1\n\
    \            if string[i+1] == ']' then\n                brackets = brackets -\
    \ 1\n            end\n        elseif string[i] == ']' then\n            brackets\
    \ = brackets - 1\n            if brackets < 1 then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ex13lvc.lua:12:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmp4ex13lvc.lua:12: in\
    \ local 'candidate'\n\t/tmp/tmp4ex13lvc.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    local open = 0\n    local\
    \ close = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdm0l2jc6.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Create a boolean array where each position\
    \ in the array is False \n    -- except for the last character in the string.\n\
    \    local brackets = {string[1] == '[' and string[#string] == ']'}\n    -- The\
    \ string should start and end with a closing bracket.\n    return brackets and\
    \ (brackets and string[#string - 1] == '[')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4face0y.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu4face0y.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Base case\n\tif string == '' then\n\t\treturn\
    \ false\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcag8sy3w.lua:35: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Base case\n  if string == '' or string ~= string.rep('[[]',\
    \ string.len(string) - 1) then\n    return false\n  end\n  \n  local start = string.find(string,\
    \ '[')\n  \n  if start == -1 then\n    return false\n  end\n  \n  -- Create a\
    \ table with all the indices of '['\n  local bracket_count = #(string.sub(string,\
    \ start, start))\n  \n  -- Look at each index in the string from the start\n \
    \ for index = 1, bracket_count do\n    -- If the index has another '[' before\
    \ it\n    if string.sub(string, 1, start) == '[' then\n      -- Return false if\
    \ there is not an empty substring between bracket indices.\n      if string.sub(string,\
    \ 1, index + 1) ~= string.sub(string, 1, index + 2) then\n        return false\n\
    \      end\n      \n      -- If the index has another ']' after it\n      if string.sub(string,\
    \ index + 2, string.len(string) - 1) ~= ']' then\n        return false\n     \
    \ end\n    end\n    \n    -- If the index is the last index, return false\n  \
    \  if index == bracket_count then\n      return false\n    end\n    \n    -- If\
    \ the index is not the last index\n    if index + 1 != bracket_count then\n  \
    \    -- If the character before the last index is '['\n      if string.sub(string,\
    \ 1, index - 1) ~= '[' then\n        return false\n      end\n      \n      --\
    \ If the character after the last index is '['\n      if string.sub(string, (index\
    \ - 1), string.len(string) - 1) ~= '[' then\n        return false\n      end\n\
    \    end\n    \n    -- Set the new start index\n    start = index + 1\n  end\n\
    \  \n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_ga0fv37.lua:46: 'then' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- If the string has no brackets, return False\n\
    \tif not string then return false end\n\t\n\t-- If the string contains only brackets,\
    \ return true\n\tif string.find(string, '[') == string.find(string, ']') then\
    \ return true end\n\t\n\t-- Iterate through the string and check if there are\
    \ any nested brackets\n\t-- by removing brackets and checking the new string.\n\
    \tfor i = 0, string.len(string) do\n\t\t-- Remove the opening bracket\n\t\tstring\
    \ = string.sub(string, 1, i)\n\t\t\n\t\t-- Check if the string has nested brackets\n\
    \t\tif string.find('[') ~= string.find(string, '[')\n\t\t\tthen return false end\n\
    \t\t\n\t\t-- Remove the closing bracket\n\t\tstring = string.sub(string, string.len(i)\
    \ + 1)\n\tend\n\t\n\t-- Return true to indicate that the string contained a nested\
    \ bracket\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqq19ufzd.lua:15:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpqq19ufzd.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpqq19ufzd.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal pattern = \"(^|[^^])[(]([^)]*)[)](.*$)\"\
    \ -- Match a \"[\" at the beginning or start of a line.\n\treturn string.find(string,\
    \ pattern, 1, true) ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zkg1c7c.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4zkg1c7c.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   local open_brackets = 0\n   for i=1, #string\
    \ do\n      if string[i] == '[' then\n         open_brackets = open_brackets +\
    \ 1\n      elseif string[i] == ']' then\n         if open_brackets == 0 then\n\
    \            return false\n         else\n            open_brackets = open_brackets\
    \ - 1\n         end\n      end\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdhl4mn5_.lua:43: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open = {\n        open = \"[\",\n    \
    \    close = \"]\"\n    }\n    local close = {\n        open = \"(\",\n      \
    \  close = \")\"\n    }\n    for index, character in string.gmatch( string, \"\
    ([^\"..open[string.sub(string, 1, 1)]..close[string.sub(string, string.len(string)\
    \ - 1, string.len(string))])\" )\n    do\n        if string.find(character, \"\
    [\") == nil then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp17p9c4ro.lua:19: unfinished string near '\" )'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if string.match then\n    return string:match('[[][[]([^[]*[[]([^[]*)[[]([^[]*)[[][[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_opt6pkl.lua:12: unfinished string near ''[[][[]([^[]*[[]([^[]*)[[]([^[]*)[[][[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)[[]([^[]*)'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  for i, c in ipairs(string) do\n    if c == '['\
    \ then return False end\n    if c == ']' then return False end\n  end\n  return\
    \ True\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbhs7fh9.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprbhs7fh9.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   -- Only count the opening brackets\n   if string.find(string,\
    \ '[') ~= nil then \n      -- Remove everything before the opening bracket\n \
    \     string = string.sub(string, 1, string.find(string, '['))\n      -- If the\
    \ string is empty or only contains brackets, return False\n      if string ~=\
    \ '' then \n         return true\n      else\n         return false\n      end\n\
    \   else \n      return false\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpclhhvhdb.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpclhhvhdb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpclhhvhdb.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   return string=='[]' or string.sub(1,2)=='[['\
    \ or string.sub(1,2)=='[['\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1uj89uz.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph1uj89uz.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  string = string.gsub(string, '[', '') -- Remove\
    \ all brackets.\n  local brackets = string.gsub(string, '[]', '') -- Remove all\
    \ nested brackets.\n  if string.find(brackets, string) == 0 then -- If there are\
    \ no nested brackets.\n    return true\n  else -- Otherwise, there are brackets\
    \ but no nested brackets.\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6wgm7ty.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpy6wgm7ty.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpy6wgm7ty.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local bracket_stack = {}\n    local open_brackets\
    \ = {\n        ['['] = 1, ['{'] = 1, ['('] = 1\n    }\n    local close_brackets\
    \ = {\n        ']' = 1, '}' = 1, ')' = 1\n    }\n    local close_bracket_count\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe7oao1h0.lua:16: '}' expected (to close '{' at line 15) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   return string.FindSubString('[[]') ~= nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbscmtvf9.lua:11:\
    \ attempt to call a nil value (field 'FindSubString')\nstack traceback:\n\t/tmp/tmpbscmtvf9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbscmtvf9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal index = 1\n\twhile true do\n\t\tif string.find('[[]',\
    \ index) == nil then\n\t\t\treturn true\n\t\tend\n\t\tindex = string.find('[[]',\
    \ index) + 2\n\t\tif index > #string - 1 then\n\t\t\treturn false\n\t\tend\n\t\
    \tindex = string.find('[[', index)\n\t\tif index == nil then\n\t\t\treturn false\n\
    \t\tend\n\t\tindex = string.find(']', index)\n\t\tif index == nil then\n\t\t\t\
    return false\n\t\tend\n\t\tindex = string.find('[[]', index)\n\t\tif index ==\
    \ nil then\n\t\t\treturn false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4u0b8n8.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg4u0b8n8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   if string.find(string, '[]') then\n      -- This\
    \ string has at least one nested bracket\n      return true\n   else\n      --\
    \ This string has no nested brackets\n      return false\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts9a6zw.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp7ts9a6zw.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7ts9a6zw.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   local brackets = string\n   brackets = string.gsub(brackets,\
    \ '[', '') -- remove all brackets\n   brackets = string.gsub(brackets, ']', '')\
    \ -- remove all closing brackets\n   if brackets:sub(1, 1) == '[' then\n     \
    \ brackets = brackets:sub(2)\n   end\n   if brackets:sub(1, 1) == ']' then\n \
    \     brackets = brackets:sub(2)\n   end\n   brackets = brackets:gsub('[]','')\n\
    \   return brackets:len() > 0 and brackets:match('[]') ~= nil \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpua9e5f5k.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpua9e5f5k.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpua9e5f5k.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string.gsub('[[]]', '') == '' and string.gsub('[[][]]',\
    \ '') ~= '' and string.gsub('[[]', '') == '' and string.gsub('[[]', '') ~= ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgrud5kz.lua:11:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmplgrud5kz.lua:11: in local 'candidate'\n\t/tmp/tmplgrud5kz.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local function validate(s)\n    local brackets\
    \ = {}\n    local i = 1, #s\n    while i <= #s do\n      if s[i] ~= \"]\" then\n\
    \        brackets[#brackets + 1] = {s, i}\n      end\n      if s[i] == \"]\" then\n\
    \        return brackets\n      end\n      i = i + 1\n    end\n    return nil\n\
    \  end\n  return validate(string)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyz14op.lua:31:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppoyz14op.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string.find('[[]') ~= nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvv6jsdpm.lua:11:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpvv6jsdpm.lua:11: in local 'candidate'\n\t/tmp/tmpvv6jsdpm.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  for match in (string.gsub(string, \"%[%[(%[%[%[\"\
    ):g..\"%]%)]%]%)\") do\n    if match == \"[\" then\n      local closes = false\n\
    \      for match2 in (string.gsub(string, \"%]%[(%[%[%[\"):g..\"%]%)]%)\") do\n\
    \        if match2 == \"]\" then\n          closes = true\n          break\n \
    \       elseif match2 == \"[\" then\n          closes = false\n        end\n \
    \     end\n      if not closes then\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_s4497ag.lua:11: function arguments expected near '..'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal pos = 1\n\t-- Iterate through the string\
    \ and keep track of all brackets\n\twhile pos <= string.len and string[pos] ~=\
    \ '[' do\n\t\tpos = pos + 1\n\tend\n\t\n\t-- Iterate again through string and\
    \ keep track of all nested brackets\n\tlocal nested = 0\n\twhile pos <= string.len\
    \ do\n\t\tif string[pos] == '[' then\n\t\t\tnested = nested + 1\n\t\tend\n\t\t\
    if string[pos] == ']' and nested > 0 then\n\t\t\tnested = nested - 1\n\t\tend\n\
    \t\tpos = pos + 1\n\tend\n\t\n\treturn nested == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbeuc6lha.lua:13:\
    \ attempt to compare number with function\nstack traceback:\n\t/tmp/tmpbeuc6lha.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbeuc6lha.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = 0\n    local open_brackets\
    \ = 0\n    local closing_brackets = 0\n    local open_brackets_positions = {}\n\
    \    local closing_brackets_positions = {}\n    local closing_brackets_positions_count\
    \ = 0\n    local function is_open_bracket(i)\n        local position = i - 1\n\
    \        if open_brackets_positions[position] == nil then\n            open_brackets_positions[position]\
    \ = i\n        end\n        if open_brackets_positions[position] == i then\n \
    \           open_brackets_positions[position] = nil\n            open_brackets_positions[position]\
    \ = i\n            open_brackets_positions[position] = i\n            open_brackets\
    \ = open_brackets + 1\n        else\n            return false\n        end\n \
    \       return true\n    end\n    local function is_closing_bracket(i)\n     \
    \   local position = i - 1\n        if closing_brackets_positions[position] ==\
    \ nil then\n            closing_brackets_positions[position] = i\n           \
    \ closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[position] = i\n            closing_brackets\
    \ = closing_brackets + 1\n        end\n        if closing_brackets_positions[position]\
    \ == i then\n            closing_brackets_positions[position] = nil\n        \
    \    closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[position] = i\n            closing_brackets_positions[position]\
    \ = i\n            closing_brackets_positions[\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnqe3lo4x.lua:62: ']' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = {\n        bracket = 1,\n \
    \       brackets = 1,\n        brackets_closed = false,\n    }\n    local open\
    \ = 0\n    local close = 0\n    for i=1,#string do\n        if string.sub(string,i,i)\
    \ ~= '[' then\n            if brackets.brackets_closed then\n                if\
    \ brackets.bracket == 0 then\n                    brackets.brackets_closed = false\n\
    \                elseif brackets.bracket == open then\n                    brackets.bracket\
    \ = open + 1\n                else\n                    brackets.bracket = open\
    \ - 1\n                end\n            end\n        elseif string.sub(string,i,i)\
    \ = '[' then\n            if brackets.brackets_closed then\n                brackets.bracket\
    \ = brackets.bracket\n            else\n                brackets.bracket = brackets.bracket+1\n\
    \            end\n        elseif string.sub(string,i,i) = ']' then\n         \
    \   if brackets.brackets_closed then\n                brackets.bracket = brackets.bracket\n\
    \            else\n                brackets.bracket = brackets.bracket-1\n   \
    \         end\n        else\n            if brackets.brackets_closed then\n  \
    \              brackets.brackets_closed = true\n            end\n            if\
    \ brackets.brackets_closed then\n                open = brackets.bracket\n   \
    \         else\n                close = brackets.bracket\n            end\n  \
    \      end\n    end\n    return brackets.bracket ~= 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx4ia92vc.lua:29: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local start, depth = 1, 1\n    local bracket_count\
    \ = 1\n    while start <= string.len(string) and depth > 0 do\n        if string[start]\
    \ == '[' then\n            bracket_count = bracket_count + 1\n        end\n  \
    \      if string[start] == ']' then\n            if bracket_count = 1 then\n \
    \               depth = depth - 1\n            else\n                bracket_count\
    \ = bracket_count - 1\n            end\n        end\n        if string[start]\
    \ == '[' then\n            start = start + 1\n        end\n        if string[start]\
    \ == ']' then\n            start = start + 1\n        end\n        start = start\
    \ + 1\n    end\n    return depth == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpei7miv31.lua:18: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- This function assumes that string contains\
    \ only square brackets.\n\t-- It returns False if it contains invalid brackets\
    \ and True\n\t-- if it contains valid brackets.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpklhpu9rk.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   \n   if string.len(string) <= 1 then return false\
    \ end\n   \n   local depth = 0\n   for i = 1, string.len(string) - 1 do\n    \
    \  if string[i] == '[' then\n         depth = depth + 1\n      elseif string[i]\
    \ == ']' then\n         depth = depth - 1\n      end\n      \n      if depth ==\
    \ 0 then return true end\n   end\n   \n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nfu29ih.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3nfu29ih.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local is_nested = false\n    local current_open\
    \ = 0\n    local current_close = 0\n    for i = 1, #string do\n        if string.sub(string,i,i)\
    \ == '[' then\n            current_open = current_open + 1\n        elseif string.sub(string,i,i)\
    \ == ']' then\n            current_close = current_close + 1\n        elseif current_open\
    \ == current_close then\n            is_nested = true\n            break\n   \
    \     end\n    end\n    return is_nested\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfi_kgkdt.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfi_kgkdt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal brackets = 0\n\tfor _, b in pairs(string)\
    \ do\n\t\tif b == '[' then\n\t\t\tbrackets = brackets + 1\n\t\telseif b == ']'\
    \ then\n\t\t\tbrackets = brackets - 1\n\t\tend\n\t\tif brackets < 0 then return\
    \ false end\n\tend\n\treturn brackets == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd57uyyw0.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpd57uyyw0.lua:12: in local 'candidate'\n\t/tmp/tmpd57uyyw0.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local opening_brackets = 0\n  local closing_brackets\
    \ = 0\n  local opening_brackets_found = false\n  local closing_brackets_found\
    \ = false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmnqkmvud.lua:35: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   assert(type(string) == 'string', 'invalid input\
    \ string')\n   if string ~= string.gsub(string, '[', '') then\n      return false\n\
    \   end\n   for i = 1, #string do\n      if string[i - 1] ~= string[i] then\n\
    \         return false\n      end\n      if string.sub(string, 1, i - 1) == ']'\
    \ then\n         return true\n      end\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4kpslzer.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp4kpslzer.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4kpslzer.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    if string == '' or string ~= string then\n \
    \       return false\n    end\n    local openBrackets = 0\n    for i = 1, #string\
    \ do\n        if string[i] == '[' then\n            openBrackets = openBrackets\
    \ + 1\n        elseif string[i] == ']' then\n            openBrackets = openBrackets\
    \ - 1\n        else\n            if openBrackets == 0 then\n                return\
    \ false\n            else\n                openBrackets = 0\n            end\n\
    \        end\n    end\n    return openBrackets > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ljupg9h.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9ljupg9h.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = {\n        bracket,\n     \
    \   bracket,\n        bracket,\n        bracket\n    }\n    local index = -1\n\
    \    local length = 1\n    while length > 0 do\n        index = string:find(brackets[length],\
    \ index + 1)\n        length = length + 1\n    end\n    return index >= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2emy0nby.lua:20:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp2emy0nby.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp2emy0nby.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local bracket_pair = string.match('[]%[[]')\n\
    \    return not bracket_pair and string.match('[[]][][][]', string)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt97aab5j.lua:11:\
    \ bad argument #2 to 'match' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpt97aab5j.lua:11: in local 'candidate'\n\t/tmp/tmpt97aab5j.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local opening = false\n    local closing = false\n\
    \    for i = 1, string.lenght do\n        if string.sub(i, i) == '[' then\n  \
    \          opening = true\n        elseif string.sub(i, i) == ']' then\n     \
    \       closing = true\n        elseif opening then\n            opening = false\n\
    \        elseif closing then\n            closing = false\n        else\n    \
    \        return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoxur_to7.lua:13:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpoxur_to7.lua:13: in\
    \ local 'candidate'\n\t/tmp/tmpoxur_to7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local depth = 1\n    for symbol = '[' .. string\
    \ .. ']', symbol, 1 do\n        if depth > depth then return false end\n     \
    \   if symbol == ']' then depth = depth + 1 else depth = depth end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpedfrgcbf.lua:12:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpedfrgcbf.lua:12: in\
    \ local 'candidate'\n\t/tmp/tmpedfrgcbf.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- No brackets means it isn't nested.\n  if not\
    \ string or not string:match '^\\[.*\\]$' then\n    return false\n  end\n  \n\
    \  -- Get the first bracket, check if there is another open bracket.\n  local\
    \ open_bracket = string.find('^\\[.+?\\]', 1, true)\n  if open_bracket == nil\
    \ then\n    return false\n  end\n  \n  -- Get the rest of the brackets until we\
    \ hit the end of a string.\n  local bracket_count = open_bracket + 2\n  local\
    \ bracket_end_index = string.find('^\\[.+?\\]', bracket_count)\n  \n  -- Check\
    \ if there is a bracket after the open bracket.\n  if bracket_end_index == nil\
    \ then\n    -- Make sure the open bracket is closed.\n    return string[open_bracket-1]\
    \ == '[' \n  else\n    -- If there is a bracket after it means there must be a\
    \ nested bracket.\n    -- Check for any valid brackets inside the brackets.\n\
    \    return string[open_bracket:bracket_end_index+1] == '[' \n  end\nend\n</cell>\n\
    <text>\nNext we write a function which checks if the input is a valid integer.\
    \ This means that we only accept integers and integers between $0$ and $10^9$.\
    \ This is because even if you had a million brackets you would only need $8$ characters\
    \ to represent all the numbers.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp38ev_hu6.lua:12: invalid escape sequence near ''^\\['\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Create two stacks: one that keeps the count\
    \ of open brackets and another that keeps the count of closed brackets.\n\tlocal\
    \ opening_open = 0\n\tlocal opening_closed = 0\n\tlocal closing_open = 0\n\tlocal\
    \ closing_closed = 0\n\t\n\t-- Iterate through the string and count the open and\
    \ closed brackets. \n\tfor i=1, #string, 1 do\n\t\t-- If the current character\
    \ is a left bracket, push it to the stack and increase the count.\n\t\tif string[i]\
    \ == '[' then\n\t\t\topening_open = opening_open + 1\n\t\telseif string[i] ==\
    \ ']' then\n\t\t\topening_closed = opening_closed + 1\n\t\telseif string[i] ==\
    \ '}' then\n\t\t\tclosing_closed = closing_closed + 1\n\t\telseif string[i] ==\
    \ ']' then\n\t\t\tclosing_open = closing_open - 1\n\t\telse\n\t\t\topening_open\
    \ = opening_open + 1\n\t\t\tclosing_open = closing_open - 1\n\t\tend\n\tend\n\t\
    \n\t-- If there are any unclosed brackets, then return false\n\tif opening_open\
    \ > opening_closed then\n\t\treturn false\n\tend\n\t\n\t-- If there are any unopened\
    \ brackets, then return false\n\tif closing_open > closing_closed then\n\t\treturn\
    \ false\n\tend\n\t\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzbhnq_z.lua:50:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptzbhnq_z.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal index = string.find('[', string.len())\n\
    \twhile index != nil do\n\t\tif string.sub(string,index,index+1) ~= '[]' then\n\
    \t\t\treturn false\n\t\tend\n\t\tindex = string.find('[', index+1)\n\tend\n\t\
    return true\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmjt5cyr3.lua:12: 'do' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   for i = 1, string.len do\n      local char =\
    \ string.sub(i, i)\n      if char == '[' and string.sub(i+1, i+2) == '[[' then\n\
    \         return true\n      elseif char == ']' and string.sub(i+1, i+2) == ']]]]][[['\
    \ then\n         return true\n      elseif char == '[' and string.sub(i+1, i+2)\
    \ == '[[[' then\n         return true\n      elseif char == ']' and string.sub(i+1,\
    \ i+2) == '[]' then\n         return true\n      elseif char == ']' and string.sub(i+1,\
    \ i+2) == '[]]' then\n         return true\n      elseif char == '[' and string.sub(i+1,\
    \ i+2) == '[]' then\n         return true\n      else\n         return false\n\
    \      end\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9gtfajj.lua:11:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpq9gtfajj.lua:11: in\
    \ local 'candidate'\n\t/tmp/tmpq9gtfajj.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets_count = 0\n    local i = 1, #string\n\
    \    while i <= #string and string[i] ~= \"]\" do\n        if string[i] == \"\
    [\" then\n            brackets_count = brackets_count + 1\n        elseif string[i]\
    \ == \"]\" then\n            brackets_count = brackets_count - 1\n        end\n\
    \        i = i + 1\n    end\n    return brackets_count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkq10zh_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvkq10zh_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local bracket_count = 0\n    local open_brackets\
    \ = 0\n    local close_brackets = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpek588nc2.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tif string.find(string, '[]') then\n\t\t-- Return\
    \ True if and only if string contains at least one nested bracket\n\t\treturn\
    \ string.find(string, '[]') ~= nil\n\telseif string.find(string, '{}') then\n\t\
    \t-- Return True if and only if string contains at least one nested bracket\n\t\
    \treturn string.find(string, '{}') ~= nil\n\telseif string.find(string, '()')\
    \ then\n\t\t-- Return True if and only if string contains at least one nested\
    \ bracket\n\t\treturn string.find(string, '()') ~= nil\n\telseif string.find(string,\
    \ '[][{}]') then\n\t\t-- Return True if and only if string contains at least one\
    \ nested bracket\n\t\treturn string.find(string, '[][{}]') ~= nil\n\telseif string.find(string,\
    \ '{}[]') then\n\t\t-- Return True if and only if string contains at least one\
    \ nested bracket\n\t\treturn string.find(string, '{}[]') ~= nil\n\telseif string.find(string,\
    \ '[]()') then\n\t\t-- Return True if and only if string contains at least one\
    \ nested bracket\n\t\treturn string.find(string, '[]()') ~= nil\n\telseif string.find(string,\
    \ '[[]') then\n\t\t-- Return True if and only if string contains at least one\
    \ nested bracket\n\t\treturn string.find(string, '[[]') ~= nil\n\telseif string.find(string,\
    \ '[][]') then\n\t\t-- Return True if and only if string contains at least one\
    \ nested bracket\n\t\treturn string.find(string, '[][]') ~= nil\n\telseif string.find(string,\
    \ '{}{}') then\n\t\t-- Return True if and only if string contains at least one\
    \ nested bracket\n\t\treturn string.find(string, '{}{}') ~= nil\n\telseif string.find(string,\
    \ '[]{}') then\n\t\t-- Return True if and only if string contains at least one\
    \ nested bracket\n\t\treturn string.find(string, '[]{}') ~= nil\n\telseif string.find(string,\
    \ '{}[]') then\n\t\t-- Return True if and only if string contains at least one\
    \ nested bracket\n\t\treturn string.find(string, '{}[]') ~= nil\n\telseif string.find(string,\
    \ '[]{}') then\n\t\t-- Return True if and only if string contains at least one\
    \ nested bracket\n\t\treturn string.find(string, '[]{}') ~= nil\n\telseif string.find(string,\
    \ '{}') then\n\t\t-- Return True if and only if string contains at least one nested\
    \ bracket\n\t\treturn string.find(string, '{}') ~= nil\n\telse\n\t\treturn false\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu2auyat0.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpu2auyat0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpu2auyat0.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   assert(type(string) == 'string', 'Expected string')\n\
    \   local open_bracket = '['\n   local close_bracket = ']'\n   local brackets\
    \ = {}\n   for i = 0, #string do\n      local c = string.sub(string, i, i)\n \
    \     if c == '[' then\n         brackets[#brackets + 1] = open_bracket\n    \
    \  elseif c == ']' then\n         local closed_bracket = brackets[#brackets]\n\
    \         if closed_bracket ~= open_bracket then\n            brackets[#brackets+1]\
    \ = closed_bracket\n         end\n      elseif c == open_bracket then\n      \
    \   if brackets[#brackets] ~= open_bracket then\n            brackets[#brackets+1]\
    \ = open_bracket\n         end\n      elseif c == close_bracket then\n       \
    \  local closed_bracket = brackets[#brackets]\n         if closed_bracket ~= open_bracket\
    \ then\n            brackets[#brackets+1] = closed_bracket\n         end\n   \
    \   end\n   end\n   return #brackets > 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_3j9arb.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6_3j9arb.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   for i = 1, #string do\n      if string[i] ==\
    \ '[' then\n         local open_brackets = tonumber(string[i+1])\n         if\
    \ open_brackets == 1 then\n            if #string > i+2 and string[i+2] == ']'\
    \ then\n               return true\n            else\n               return false\n\
    \            end\n         else\n            local close_brackets = tonumber(string[i+2])\n\
    \            if close_brackets == 1 then\n               if open_brackets == 0\
    \ then\n                  return false\n               else\n                \
    \  return true\n               end\n            else\n               return false\n\
    \            end\n         end\n      else\n         return false\n      end\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmod8z_og.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmod8z_og.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  local open = 0\n  \n  for\
    \ i=1,#string do -- Traverse through each character in the string\n    if string[i]\
    \ == '[' then -- If character is opening bracket\n      stack[#stack+1] = i\n\
    \      open = open + 1\n    else if string[i] == ']' then -- If character is closing\
    \ bracket\n      if #stack > 0 then -- Check if there are any open brackets\n\
    \        local last = stack[#stack] -- Get the last bracket\n        local len\
    \ = #string-last -- Get the length of the string without the last bracket\n  \
    \      \n        if open == len and stack[#stack] == i then -- If all brackets\
    \ are closed and the last bracket is the same\n          return true -- Then the\
    \ string is valid\n        end\n      end\n      stack[#stack+1] = nil\n     \
    \ open = open - 1\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4fz7ibwx.lua:53: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal brackets_count = 0\n\tlocal parenthesis_count\
    \ = 0\n\tlocal open_brackets_count = 0\n\tlocal closed_brackets_count = 0\n\t\
    local open_brackets = {}\n\tlocal closed_brackets = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpue5qbh04.lua:37: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal pos = 0\n\twhile pos < #string do\n\t\t\
    local char = string[pos]\n\t\tif char == '[' then\n\t\t\tpos = pos + 1\n\t\t\t\
    if pos == #string then\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif char == ']'\
    \ then\n\t\t\tpos = pos + 1\n\t\t\tif pos == #string then\n\t\t\t\treturn true\n\
    \t\t\tend\n\t\telse\n\t\t\tpos = pos + 1\n\t\tend\n\tend\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzd5y4pd5.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzd5y4pd5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   return string.find(string, '[[[[]') ~= nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1e6ofbf.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz1e6ofbf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    string = string\n                :gsub('()[[]{}]',\
    \ '')\n                :gsub('[[]]', '')\n                :gsub('[[]{}]', '')\n\
    \                :gsub('[]]', '')\n                :gsub('{}]', '')\n        \
    \        :gsub('[]', '')\n                :gsub('{}', '')\n                :gsub('()',\
    \ '')\n                :gsub('[][', '')\n                :gsub('{}[', '')\n  \
    \              :gsub('[]{', '')\n                :gsub('{}{', '')\n          \
    \      :gsub('[[]', '')\n                :gsub('{}[', '')\n                :gsub('[]{',\
    \ '')\n                :gsub('{}{', '')\n                :gsub('[', '', 1)\n \
    \               :gsub('{', '', 1)\n                :gsub('[', '', 1)\n       \
    \         :gsub(']', '', 1)\n                :gsub(']', '', 1)\n             \
    \   :gsub('{', '', 1)\n                :gsub('}', '', 1)\n                :gsub('{',\
    \ '', 1)\n                :gsub('}', '', 1)\n                :gsub('[', '', 1)\n\
    \                :gsub(']', '', 1)\n                :gsub(']', '', 1)\n      \
    \          :gsub('}', '', 1)\n                :gsub('}', '', 1)\n            \
    \    :gsub('(', '', 1)\n                :gsub(')', '', 1)\n                :gsub('{',\
    \ '', 1)\n                :gsub('}', '', 1)\n                :gsub('(', '', 1)\n\
    \                :gsub(')', '', 1)\n                :gsub(',', '', 1)\n      \
    \          :gsub(';', '', 1)\n                :gsub(' ', '', 1)\n            \
    \    :gsub(']', '', 1)\n                :gsub(']', '', 1)\n                :gsub(')',\
    \ '', 1)\n                :gsub(']', '', 1)\n                :gsub(')', '', 1)\n\
    \                :gsub('{', '', 1)\n                :gsub('}', '', 1)\n      \
    \          :gsub('{', '', 1)\n                :gsub('}', '', 1)\n            \
    \    :gsub(',', '', 1)\n                :gsub(';', '', 1)\n                :gsub('\
    \ ', '', 1)\n                :gsub(']', '', 1)\n                :gsub(']', '',\
    \ 1)\n                :gsub(']', '', 1)\n                :gsub(')', '', 1)\n \
    \               :gsub(']', '', 1)\n                :gsub(')', '', 1)\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkfbgiv3e.lua:90: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tif string:sub(1, 1) == string(2, 1) then\n\t\t\
    -- a string\n\t\treturn string\n\telseif string:sub(1, 2) == '[[' then\n\t\t--\
    \ a string with 2 brackets\n\t\treturn is_nested(string)\n\telse\n\t\t-- not a\
    \ string with 2 brackets, assume that string has at least 3\n\t\treturn is_nested(string)\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbupod0w.lua:11:\
    \ attempt to call a string value (local 'string')\nstack traceback:\n\t/tmp/tmpsbupod0w.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpsbupod0w.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if string:len() == 0 then return false end\n \
    \ local bracket = string.sub(string,1,1) -- get the first char\n  if bracket ~=\
    \ '[' then return false end -- if first char is not '['\n  local nest = 0\n  for\
    \ i = 1, string.len() do\n    if string.sub(string,i,i+1) ~= bracket then -- if\
    \ current char is not the bracket\n      if nest == 0 then return false end --\
    \ if this is the first bracket, we return false\n      nest = 0\n      i = string.len()\
    \ -- else we set the current index to end\n    else\n      nest = nest + 1 --\
    \ else we increment the nest\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4xrj0au.lua:15:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpf4xrj0au.lua:15: in local 'candidate'\n\t/tmp/tmpf4xrj0au.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal bracket_count = 1\n\tlocal nested_brackets\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxftsx4so.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Remove leading and trailing brackets\n  \
    \  local s = string.strip(string.gsub(string, \"[%[(%w+)%]%]\", \"\"))\n    --\
    \ Test if there are brackets in the string\n    local bracket_count = string.gsub(string,\
    \ \"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\")\n    \n    return not (bracket_count == \"\" and s == \"\") -- Return\
    \ True if there are no brackets in the string\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzsaixlwm.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Create a stack of open brackets\n  local stack\
    \ = {}\n  -- Initialize stack with first character\n  stack[1] = 1\n  -- Add bracket\
    \ in stack on every position where string is modified\n  for _, c in string:gmatch'([[]')\
    \ do\n    stack[#stack+1] = #stack+1\n    stack[#stack+1] = c\n  end\n  -- If\
    \ there is something in the stack at the end\n  if #stack > 0 then\n    local\
    \ open = stack[#stack]\n    stack[#stack] = nil\n    -- If there was an open bracket,\
    \ return true\n    if open == 1 then return true end\n    -- Else check each open\
    \ bracket to see if it has any nested brackets\n    for i = 2, #stack do\n   \
    \   if open == stack[i] then\n        open = open - 1\n      elseif open == 0\
    \ then return false end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4x24gzp6.lua:16: 'do' expected near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    \n    -- Declare local variables.\n    local\
    \ open_brackets = 0 -- The number of open brackets.\n    local close_brackets\
    \ = 0 -- The number of close brackets.\n    local valid_nesting = false -- A boolean\
    \ indicating whether brackets are valid nesting.\n    \n    -- Iterate over all\
    \ the characters.\n    for i,v in string.gmatch( string, \"%S+\"):gmatch(\"%b()\"\
    ):gmatch(\"%b\") do\n        -- Increment the number of open brackets.\n     \
    \   if v == \"[\" then\n            open_brackets = open_brackets + 1\n      \
    \  \n        -- Decrement the number of close brackets.\n        elseif v == \"\
    ]\" then\n            close_brackets = close_brackets + 1\n            \n    \
    \    -- Set a flag if the brackets are valid nesting.\n        elseif open_brackets\
    \ > 0 and open_brackets == close_brackets then\n            valid_nesting = true\n\
    \        end\n    end\n    \n    -- Return the boolean indicating whether brackets\
    \ are valid nesting.\n    return valid_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwka6yycy.lua:18:\
    \ attempt to index a function value\nstack traceback:\n\t/tmp/tmpwka6yycy.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpwka6yycy.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- First find the position of any opening square\
    \ bracket:\n  local opening_bracket = string.find('[')\n  -- Then find any closing\
    \ square bracket:\n  local closing_bracket = string.find(']')\n  -- If there are\
    \ none, there are no nested brackets:\n  if opening_bracket == nil or closing_bracket\
    \ == nil then\n    return true\n  end\n  -- Create a loop to iterate through all\
    \ possible positions of the closing bracket:\n  local opening_position = 1\n \
    \ while opening_position <= closing_bracket do\n    -- Create a loop to iterate\
    \ through all possible positions of the opening bracket:\n    local closing_position\
    \ = opening_position\n    while closing_position <= closing_bracket do\n     \
    \ -- If the opening bracket, opening position, closing bracket, closing position\
    \ all match\n      -- then there is a nested bracket:\n      if opening_bracket\
    \ == closing_position and string.sub(string, opening_position + 1, closing_position)\
    \ == \"]\" then\n        return true\n      end\n      -- Update the closing position\
    \ by one to reflect the position of the opening bracket\n      -- in the string:\n\
    \      closing_position = closing_position + 1\n    end\n    -- Update the opening\
    \ position by one to reflect the position of the closing bracket\n    -- in the\
    \ string:\n    opening_position = opening_position + 1\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprat5tj12.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmprat5tj12.lua:12: in local 'candidate'\n\t/tmp/tmprat5tj12.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = 0\n    for i,c in string.gmatch(string,\
    \ '%[[]') do brackets = brackets + 1 end\n    return brackets >= 2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyf63vzqz.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpyf63vzqz.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpyf63vzqz.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Create an empty stack of brackets\n  local\
    \ stack = setmetatable({}, { __index = setmetatable({}, { __index = function (t,\
    \ k) return k or t end }) })\n  for char in string.gmatch(string, \"%S\") do --\
    \ Iterate over the string and check if its brackets are nested\n    -- If the\
    \ current character is not an opening bracket then append it to the stack\n  \
    \  -- If the current character is an opening bracket then pop it from the stack\n\
    \    -- If the current character is closing bracket then check whether the stack\
    \ is empty\n    if not stack[char] then\n      stack[char] = true\n    elseif\
    \ stack[char] and not stack[char]() then\n      return false\n    end\n    --\
    \ If the current character is an opening bracket then check whether the stack\
    \ is empty\n    if stack[char] and not stack[char]() then -- If the stack is not\
    \ empty\n      stack[char] = false -- Then pop it from the stack\n    end\n  end\n\
    \  -- If the stack is empty then there is no nesting possible\n  return #stack\
    \ == 0 and true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfiltk9vn.lua:19:\
    \ attempt to call a string value (field '?')\nstack traceback:\n\t/tmp/tmpfiltk9vn.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpfiltk9vn.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local start = 1\n    local stack = {}\n    for\
    \ i = 1, string.lenght do\n        stack[stack#stack+1] = string.sub(i,i)\n  \
    \      if stack#stack > 1 and string[i] == ']' and stack[stack#stack] == ']' then\n\
    \            stack#stack = stack#stack - 1\n        end\n    end\n    return stack#stack\
    \ == 0\nend\n</cell>\n<text>\nExercise 10\nCreate a function that takes a string\
    \ as input that contains a valid square bracket and returns the number of square\
    \ brackets in it.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpckoy82n4.lua:14: ']' expected near '#'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Find a pair of brackets\n  local open = string.find('[')\n\
    \  local close = string.find(']')\n  \n  -- Are they nested?\n  if open ~= close\
    \ then return false end\n  \n  -- Are there enough open brackets?\n  if open <\
    \ 1 or close < open then return false end\n  \n  -- Move on to the first open\
    \ bracket\n  local open_bracket = 1\n  while open_bracket < close do\n    open\
    \ = string.find(string, string.sub(string, 1, open), open_bracket)\n    close\
    \ = string.find(string, string.sub(string, 1, open), close)\n    if open ~= close\
    \ then return false end\n    open_bracket = open + 1\n  end\n  \n  -- Move on\
    \ to the last closed bracket\n  local close_bracket = open + 1\n  while close_bracket\
    \ < close do\n    open = string.find(string, string.sub(string, 1, close), close_bracket)\n\
    \    close = string.find(string, string.sub(string, 1, close), close_bracket)\n\
    \    if open ~= close then return false end\n    close_bracket = close + 1\n \
    \ end\n  \n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyyf5dnpo.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpyyf5dnpo.lua:12: in local 'candidate'\n\t/tmp/tmpyyf5dnpo.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    string = string.gsub(string, '[', '')\n    string\
    \ = string.gsub(string, ']', '')\n    string = string.gsub(string, '{', '')\n\
    \    string = string.gsub(string, '}', '')\n    return string ~= '[]'\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptrhgadyo.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmptrhgadyo.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmptrhgadyo.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  string = string.gsub(string, '[\\[]', '')\n  string\
    \ = string.gsub(string, '[\\]]', '')\n  string = string.gsub(string, '[\\]]]',\
    \ '')\n  string = string.gsub(string, '[\\[', '')\n  string = string.gsub(string,\
    \ '[\\]]', '')\n  return string ~= '[]' and string ~= '[]]' and string ~= '[]]]'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq_kvrn8j.lua:11: invalid escape sequence near ''[\\['\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- base cases\n\tif not string or string == '['\
    \ then return False end\n\tif not string or string == ']' then return False end\n\
    \t-- determine if the string is valid brackets\n\treturn string.find(string, \"\
    [][%{[]\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcc727hjx.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcc727hjx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- base case\n\tif string == '' then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwaj9jr3p.lua:35: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local depth = 0\n    for index, character in\
    \ string.gsub(string, \"%S\", \"%?\") do\n        if character == \"]\" then\n\
    \            depth = depth - 1\n        elseif character == \"[\" then\n     \
    \       depth = depth + 1\n        end\n        if depth ~= 0 then\n         \
    \   return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9__5eqf.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpj9__5eqf.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpj9__5eqf.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 1\n    local depth = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9u0xy0n3.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tif string.find(string, '[]') ~= nil then\n\t\t\
    return True\n\telse\n\t\treturn False\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph0jtivqu.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmph0jtivqu.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmph0jtivqu.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- A bracketed string is valid if the string starts\
    \ with brackets.\n  -- A closing bracket is never part of the string. If a string\
    \ starts \n  -- with a closing bracket, it must be ended by another opening bracket.\n\
    \  return string.find('[') == 0 and string.find(']') == -1 and string.len() >\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplju54jk9.lua:14:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmplju54jk9.lua:14: in local 'candidate'\n\t/tmp/tmplju54jk9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Find the first non-nested bracket\n    for\
    \ i = 1, #string do\n        if string[i] ~= '[' then\n            return false\n\
    \        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf_so3cwp.lua:37: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal bracket = string.match('[][][]')\n\treturn\
    \ bracket ~= nil and (string.find(string, '[]') ~= nil or string.find(string,\
    \ '[]]') ~= nil)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptk68mni3.lua:11:\
    \ bad argument #2 to 'match' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmptk68mni3.lua:11: in local 'candidate'\n\t/tmp/tmptk68mni3.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Check string\n    if string == '' or string\
    \ == nil then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwqhgol9e.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   -- Your code here!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4mg_50i.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpk4mg_50i.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal depth = 0\n\tlocal stack = {string}\n\t\
    local opening = false\n\tlocal opening_depth = -1\n\tlocal closing = false\n\t\
    local closing_depth = -1\n\tfor _,v in ipairs(stack) do\n\t\tif opening then\n\
    \t\t\tif v == '[' then\n\t\t\t\topening = true\n\t\t\t\topening_depth = depth\n\
    \t\t\telseif v == ']' then\n\t\t\t\topening = false\n\t\t\t\topening_depth = opening_depth\
    \ - 1\n\t\t\t\tif opening_depth ~= depth then\n\t\t\t\t\tstack.insert(depth +\
    \ 1, v)\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\telseif v == '{' then\n\t\t\
    \t\tclosing = true\n\t\t\t\tclosing_depth = depth\n\t\t\telseif v == '}' then\n\
    \t\t\t\tclosing = false\n\t\t\t\tclosing_depth = closing_depth - 1\n\t\t\t\tif\
    \ closing_depth ~= depth then\n\t\t\t\t\tstack.insert(depth + 1, v)\n\t\t\t\t\t\
    return false\n\t\t\t\tend\n\t\t\tend\n\t\telseif closing then\n\t\t\tif v == '['\
    \ then\n\t\t\t\tclosing = true\n\t\t\t\tclosing_depth = depth\n\t\t\telseif v\
    \ == ']' then\n\t\t\t\tclosing = false\n\t\t\t\tclosing_depth = closing_depth\
    \ - 1\n\t\t\t\tif closing_depth ~= depth then\n\t\t\t\t\tstack.insert(depth +\
    \ 1, v)\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\telseif v == '{' then\n\t\t\
    \t\topening = true\n\t\t\t\topening_depth = depth\n\t\t\telseif v == '}' then\n\
    \t\t\t\topening = false\n\t\t\t\topening_depth = opening_depth - 1\n\t\t\t\tif\
    \ opening_depth ~= depth then\n\t\t\t\t\tstack.insert(depth + 1, v)\n\t\t\t\t\t\
    return false\n\t\t\t\tend\n\t\t\tend\n\t\telseif opening and opening_depth ==\
    \ depth then\n\t\t\tdepth = depth + 1\n\t\t\tstack.insert(depth + 1, v)\n\t\t\
    elseif closing and closing_depth == depth then\n\t\t\tdepth = depth + 1\n\t\t\t\
    stack.insert(depth + 1, v)\n\t\telse\n\t\t\treturn true\n\t\tend\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt91o42ug.lua:78:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt91o42ug.lua:78:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 1 -- Keep track of how many brackets\
    \ have been encountered.\n    \n    -- Iterate over the string one character at\
    \ a time. \n    -- If the character is a opening bracket increment the count.\n\
    \    -- If the character is a closing bracket decrement the count.\n    -- If\
    \ the count is zero and the character is not a opening bracket, return False.\n\
    \    -- If the count is zero and the character is a closing bracket, return True.\n\
    \    -- If the count is zero and the character is a opening bracket and a closing\
    \ bracket, return the opposite.\n    local function is_nested(string, count, nesting)\n\
    \        count = count + 1\n        if string[count] ~= '[' then return False\
    \ end\n        if nesting > 0 then return False end\n        if string[count]\
    \ ~= ']' then return False end\n        count = count - 1\n        if string[count]\
    \ ~= '[' then return False end\n        if nesting > 0 then return False end\n\
    \        if string[count] ~= ']' then return False end\n        count = count\
    \ - 1\n        if string[count] ~= '[' then return False end\n        if nesting\
    \ > 0 then return False end\n        if string[count] ~= ']' then return False\
    \ end\n        count = count - 1\n        if string[count] ~= '[' then return\
    \ False end\n        if nesting > 0 then return False end\n        if string[count]\
    \ ~= ']' then return False end\n        count = count - 1\n        if string[count]\
    \ ~= '[' then return False end\n        if nesting > 0 then return False end\n\
    \        if string[count] ~= ']' then return False end\n        count = count\
    \ - 1\n        if string[count] ~= '[' then return False end\n        if nesting\
    \ > 0 then return False end\n        if string[count] ~= ']' then return False\
    \ end\n        count = count - 1\n        if string[count] ~= '[' then return\
    \ False end\n        if nesting > 0 then return False end\n        if string[count]\
    \ ~= ']' then return False end\n        count = count - 1\n        if string[count]\
    \ ~= '[' then return False end\n        if nesting > 0 then return False end\n\
    \        if string[count] ~= ']' then return False end\n        count = count\
    \ - 1\n        if string[count] ~= '[' then return False end\n        if nesting\
    \ > 0 then return False end\n        if string[count] ~= ']' then return False\
    \ end\n        count = count - 1\n        if string[count] ~= '[' then return\
    \ False \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy3kexu02.lua:58: 'end' expected (to close 'if' at line 57)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tstring = string.gsub(string, '\\[%%(%%(%+)[^]]*%%\\\
    %)[^]]*%\\]', '') -- Remove nested square brackets\n\tstring = string.gsub(string,\
    \ '%]', ']') -- Add missing closing bracket\n\t-- Validate that string contains\
    \ only square brackets\n\treturn string.gsub('[[]', '') ~= string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4fx7bkqd.lua:11: invalid escape sequence near ''\\['\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string.gsub('[[]', '').gsub('[', '') ~=\
    \ string\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp076dr4hg.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Remove brackets\n    local string = re.sub('[][]',\
    \ '', string)\n    \n    -- Check for nested brackets\n    for i = 1, #string\
    \ do\n        local char = string[i]\n        if string[i] ~= '[' then\n     \
    \       -- Not nested\n            return false\n        end\n    \n        if\
    \ #string == i+1 then\n            -- Nested but at the end\n            return\
    \ false\n        end\n    \n        if string.sub(string+i, i+2) ~= '[' then\n\
    \            -- Not nested\n            return false\n        end\n    \n    \
    \    -- Keep looking for a closing bracket\n        i = i + 2\n    end\n    \n\
    \    -- Found a nested bracket\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkrma3mt.lua:12:\
    \ attempt to index a nil value (global 're')\nstack traceback:\n\t/tmp/tmpfkrma3mt.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpfkrma3mt.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   -- The starting character position is 1 instead\
    \ of 0 to avoid issues with zero indexing.\n   for i = 1, string.len(), 1 do\n\
    \      local ch = string.sub(string, i, i)\n      if ch == '[' then\n        \
    \ return true\n      end\n      if ch == ']' then\n         return false\n   \
    \   end\n   end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfydsdme.lua:12:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmppfydsdme.lua:12: in local 'candidate'\n\t/tmp/tmppfydsdme.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open_brackets = 1 -- Keeps track of number\
    \ of open brackets\n    for i = 1, #string, 1 do\n        if string[i] == '['\
    \ then\n            open_brackets = open_brackets + 1\n        elseif string[i]\
    \ == ']' then\n            open_brackets = open_brackets - 1\n            if open_brackets\
    \ < 0 then return false end\n        elseif open_brackets == 0 then return false\
    \ end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v_gxont.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7v_gxont.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tif type(string) ~= \"string\" then return false\
    \ end\n\tlocal brackets = {\"{\", \"}\", \"[\", \"]\"}\n\tlocal nesting = 0\n\t\
    local start = 0\n\tlocal end = 0\n\tlocal bracket_count = 0\n\tlocal bracket_end\
    \ = 0\n\tfor _, char_index in ipairs(string) do\n\t\tif char_index == brackets[bracket_count]\
    \ then\n\t\t\tnesting = nesting + 1\n\t\telseif char_index == brackets[bracket_end]\
    \ then\n\t\t\tnesting = nesting - 1\n\t\tend\n\t\tif nesting == 0 then\n\t\t\t\
    if bracket_end == 0 then start = char_index else end\n\t\t\tbracket_count = bracket_count\
    \ + 1\n\t\t\tbracket_end = char_index\n\t\telseif nesting > 0 then\n\t\t\tif bracket_count\
    \ == 1 then\n\t\t\t\tif char_index == brackets[bracket_end] then\n\t\t\t\t\treturn\
    \ false\n\t\t\t\tend\n\t\t\telseif bracket_end == 0 then \n\t\t\t\tstart = char_index\n\
    \t\t\t\tbracket_end = char_index\n\t\t\t\tbracket_count = bracket_count - 1\n\t\
    \t\telse\n\t\t\t\tbracket_count = bracket_count - 1\n\t\t\t\tbracket_end = char_index\n\
    \t\t\tend\n\t\tend\n\tend\n\tif start == 0 then return false end\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp74azskq9.lua:15: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    if string == '' then\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp7gpzze9.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\treturn string.find('[[]') ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ca4k7f4.lua:11:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp8ca4k7f4.lua:11: in local 'candidate'\n\t/tmp/tmp8ca4k7f4.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Create a stack to keep track of what brackets\
    \ we've already seen. \n  -- We use the first bracket in the string as the root\
    \ of a nested brackets tree.\n  local stack = {}\n  stack[#stack + 1] = {1, string}\n\
    \  local open_brackets = stack[#stack][2]\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphg9cx5p8.lua:36: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local index = 0\n    local open_bracket = string.find('[')\n\
    \    while open_bracket ~= nil do\n        local close_bracket = string.find(']',\
    \ open_bracket)\n        if close_bracket == nil then\n            return false\n\
    \        else\n            if open_bracket > close_bracket then\n            \
    \    index = close_bracket + 1\n            else\n                index = open_bracket\
    \ + 1\n            end\n            open_bracket = string.find('[', index)\n \
    \       end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0rs82amp.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp0rs82amp.lua:12: in local 'candidate'\n\t/tmp/tmp0rs82amp.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if string == nil then return false end\n  local\
    \ count = 0\n  local open = false\n  local closed = {}\n  for i = 1,#string do\n\
    \    local char = string[i]\n    open = open or char == '['\n    closed = closed[char]\
    \ or {}\n    closed = closed[{char = closed and char or '']} or {char}\n    count\
    \ = count + 1\n    if open == false then count = count - 1 end\n  end\n  return\
    \ count >= 1 and #closed# = 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3cowak2w.lua:19: '}' expected near ']'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local index = 1\n    while index <= string.len()\
    \ do\n        if string.sub(string, index) ~= '[' then\n            return false\n\
    \        end\n        index = index + 1\n        if string.sub(string, index)\
    \ ~= ']' then\n            return false\n        end\n        index = index +\
    \ 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89309_jc.lua:12:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp89309_jc.lua:12: in local 'candidate'\n\t/tmp/tmp89309_jc.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   if string == '' then\n      return false\n  \
    \ else\n      local chars = string\n      local depth = 0\n      local index =\
    \ 1\n      repeat\n         depth = depth + 1\n         local next_index = string.find(chars,'[',index+1)\n\
    \         if next_index == nil then\n            return false\n         elseif\
    \ next_index == 0 then\n            -- End of string.\n            if depth >\
    \ 0 then\n               return true\n            end\n         else\n       \
    \     -- Found a starting bracket\n            if depth > 0 then\n           \
    \    return false\n            end\n            -- We found a starting bracket,\
    \ so look forward to see if there\n            -- is a closing bracket.\n    \
    \        index = next_index + 1\n            local next_index = string.find(chars,']',index+1)\n\
    \            if next_index == nil then\n               return false\n        \
    \    elseif next_index == 0 then\n               return false\n            else\n\
    \               index = next_index + 1\n            end\n         end\n      until\
    \ index >= #chars\n      return true\n   end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpywy9nwa4.lua:48: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  string = string.gsub(string, '[][{}]')\n  local\
    \ brackets\n  for _, bracket in ipairs(string) do\n    brackets = brackets or\
    \ 0\n    if brackets == 1 then\n      return true\n    end\n    if brackets >\
    \ 0 then\n      return false\n    end\n    brackets = brackets + 1\n  end\n  return\
    \ true\nend\n</cell>\n<text>\nExercise 6\nThe function is_nested_list takes in\
    \ a list of strings. A list is a valid nested list if there is a sequence of brackets\
    \ nesting at least 1 bracket throughout the list. is_nested_list should return\
    \ True whenever there is a valid nested list. Otherwise, return False.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvnp1fs7o.lua:25: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local brackets = string\n  local num_open_brackets\
    \ = 0 \n  local num_closed_brackets = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc67e4g5_.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string.Find('[[]') ~= nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0iwrc0f5.lua:11:\
    \ attempt to call a nil value (field 'Find')\nstack traceback:\n\t/tmp/tmp0iwrc0f5.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp0iwrc0f5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   if string == '[]' then return true end\n   if\
    \ string == '[][]' then return true end\n   if string == '[[]' then return true\
    \ end\n   if string == '[[][]' then return true end\n   if string == '[[[]' then\
    \ return true end\n   if string == '[[[][]' then return true end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk_mj_kqg.lua:37: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Create a stack of strings with one character\
    \ in them.\n    -- A stack is a data structure that stores a collection of items\
    \ in \n    -- a last-in-first-out order.\n    local stack = { string }\n    local\
    \ index = 1\n    -- Iterate through the stack and count the number of open brackets.\n\
    \    while true do\n        if stack[index] == '[' then\n            index = index\
    \ + 1\n        elseif stack[index] == ']' then\n            index = index - 1\n\
    \        else\n            index = index + 1\n            break\n        end\n\
    \    end\n    return index == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtc4l13k.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbtc4l13k.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string.gsub('[[]]', '').gsub('[[]', '').gsub(']]]',\
    \ '').gsub(']]', '').gsub('][', '').gsub(']', '').gsub('[]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp736246qj.lua:11:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp736246qj.lua:11: in local 'candidate'\n\t/tmp/tmp736246qj.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local nested = false\n  local i = 0\n  while i\
    \ ~= #string do\n    if string[i] == '[' then\n      if string[i-1] ~= '[' then\n\
    \        nested = false\n      else\n        nested = true\n        i = i + 1\n\
    \      end\n    elseif string[i] == ']' then\n      if string[i-1] ~= ']' then\n\
    \        nested = false\n      else\n        nested = true\n        i = i + 1\n\
    \      end\n    else\n      nested = false\n      i = i + 1\n    end\n  end\n\
    \  return nested\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zng5n1y.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7zng5n1y.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local s = string.gsub(string,'[[]','')\n  s =\
    \ s.gsub(string,'[]]','')\n  return string.len(s) == 0 or string.len(string) >\
    \ 0 and string.find(string,'[[]') == string.find(s,'[]')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqf9cu5k.lua:13:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpqqf9cu5k.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqqf9cu5k.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    if string == nil then return false end\n   \
    \ -- Get the index of the first non-closing bracket\n    local first_bracket_idx\
    \ = string:find('[')\n    if first_bracket_idx == nil then return false end\n\
    \    -- Iterate backwards from the first non-closing bracket to find the last\
    \ non-closing bracket\n    local last_bracket_idx = string:find(']', first_bracket_idx)\n\
    \    if last_bracket_idx == nil then return false end\n    -- Return whether the\
    \ last non-closing bracket is the same as the first non-closing bracket\n    return\
    \ string.sub(string, last_bracket_idx + 1, first_bracket_idx) == string.sub(string,\
    \ first_bracket_idx + 1, last_bracket_idx)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2fcku35u.lua:13:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp2fcku35u.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2fcku35u.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = { string }\n    while #stack >\
    \ 1 do\n        if string.find(stack[1], '[', 1) then\n            stack[1] =\
    \ string.sub(stack[1], 2, string.len(stack[1]))\n            stack:insert(1, string.sub(stack[1],\
    \ 1, string.len(stack[1])))\n        elseif string.find(stack[1], ']', #stack)\
    \ then\n            return true\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwa9w3vv.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnwa9w3vv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tassert(type(string) == 'string')\n\tlocal brackets\
    \ = string.gsub(string, '[', '[%c') -- replace all opening brackets\n\tlocal opens\
    \ = string.gsub(brackets, '%c', function() return '[' end) -- replace all closing\
    \ brackets\n\treturn string.find(opens, '[]') == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8pvmhpy3.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp8pvmhpy3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp8pvmhpy3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local level\n    for level=1,#string do -- Find\
    \ the starting level of brackets\n        if string[level] ~= '[' then return\
    \ false end\n    end\n    -- Now check that the starting level is less than or\
    \ equal to the number of brackets\n    for level=1,#string do -- Make sure each\
    \ level of brackets is closed\n        if string[level] ~= ']' then return false\
    \ end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakdnofse.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpakdnofse.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string.find(string, '[]')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5wc8xslg.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp5wc8xslg.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5wc8xslg.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- TODO: Implement this function\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrmlbjc_.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwrmlbjc_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local opens = { -- opens brackets in the subsequence\
    \ we're searching for\n        open  = '[',\n        close = ']'\n    }\n    local\
    \ closes = { -- closes brackets in the subsequence we're searching for\n     \
    \   open  = ']',\n        close = '[',\n    }\n    local brackets = {}\n    local\
    \ bracket\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa1mfzlno.lua:41: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, #string do\n\
    \        if string.sub(i, i, i) ~= '[' then\n            count = count + 1\n \
    \       end\n    end\n    return count >= 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil61n36q.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpil61n36q.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Create a stack and push the first character\
    \ of our string onto it\n\tlocal stack = stack or {}\n\tstack[1]=string[1]\n\t\
    \n\t-- If the string starts with brackets\n\tif stack[1] == '[' and string[2]\
    \ == '[' and string[3] == '[' then\n\t\t-- Pop each stack until we hit an opening\
    \ bracket\n\t\twhile stack[1] == '[' do\n\t\t\tstack = stack:sub(2)\n\t\tend\n\
    \t\t\n\t\t-- Pop each stack until we hit a closing bracket\n\t\twhile stack[1]==']'\
    \ do\n\t\t\tstack = stack:sub(2)\n\t\tend\n\t\n\t\t-- If the stack is empty, then\
    \ we have a valid subsequence\n\t\tif stack[1] ~= '[' then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\t\n\t-- If the string does not start with brackets\n\tif stack[1]\
    \ ~= '[' then\n\t\treturn false\n\tend\n\t\n\t-- If the string starts with an\
    \ opening bracket, we can still push it onto the stack\n\tif stack[1] == '[' then\n\
    \t\tstack = stack:sub(2)\n\tend\n\t\n\t-- If the string ends with an closing bracket,\
    \ we pop the stack and return true\n\tif stack[1] == ']' then\n\t\tstack = stack:sub(2)\n\
    \t\treturn true\n\tend\n\t\n\t-- Otherwise, we return false\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpti4zfr_9.lua:56:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpti4zfr_9.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Base case: empty string or one bracket.\n\t\
    --   Return true iff the string is empty or one bracket.\n\tif string == '' or\
    \ string == '[' then return true end\n\t\n\t-- Base case: more than one bracket.\n\
    \t--   Return true iff the string contains more than one bracket.\n\tif string.find(']')\
    \ > string.find('[') then return true end\n\t\n\t-- Base case: all brackets nested.\n\
    \t--   Return true iff the string contains at least two brackets.\n\t-- TODO:\
    \ Could be more efficient, using a stack of open brackets and checking whether\
    \ a closing bracket is opened.\n\tfor bracket = 1, #string do\n\t\t-- Skip this\
    \ iteration if the string is empty or all brackets have been checked already.\n\
    \t\tif string == '' or string == '[' or bracket = #string then break end\n\t\t\
    \n\t\t-- Skip this iteration if the string is all brackets.\n\t\tif bracket ==\
    \ #string then break end\n\t\t\n\t\t-- Skip this iteration if the string contains\
    \ an unbalanced bracket pair ([[).\n\t\tif string[bracket] == '[' then\n\t\t\t\
    if string.find(']', bracket) > string.find('[', bracket) then break end\n\t\t\
    end\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvtzhtwv0.lua:24: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local index = 0\n    local depth = 0\n    while\
    \ index >= 0 and index < #string do\n        if string[index] == '[' then\n  \
    \          index = index + 1\n            depth = depth + 1\n        elseif string[index]\
    \ == ']' then\n            index = index + 1\n            depth = depth - 1\n\
    \        end\n        if depth == 0 then\n            return true\n        end\n\
    \        index = index + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpiulqyr.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptpiulqyr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Your code here!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4ec6bhi.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpj4ec6bhi.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = 0\n    local nesting = 0\n\
    \    for i = 1, #string do\n        if string[i] ~= '\"' then\n            nesting\
    \ = nesting + 1\n        elseif string[i] == '\"' then\n            nesting =\
    \ nesting - 1\n        end\n        if nesting > 0 then\n            brackets\
    \ = brackets + 1\n        end\n        if nesting == 0 then\n            if brackets\
    \ > 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_6stthk.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk_6stthk.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- A counter for the number of opening and closing\
    \ brackets\n\tlocal count = 0\n\t\n\t-- Iterate over the string, ignoring all\
    \ non-letter characters\n\tfor c in string.gmatch( string, \"[^a-zA-Z]\" ) do\n\
    \t\tif c == '[' then\n\t\t\tcount = count + 1\n\t\tend\n\t\tif c == ']' then\n\
    \t\t\tcount = count - 1\n\t\tend\n\tend\n\treturn count > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nycjp6h.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3nycjp6h.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal brackets = string:gsub('(%b\\[%b])', '%%%1')\n\
    \treturn (string.match(brackets, '%%%2') ~= nil and string.match(brackets, '%%%3')~=nil)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7argorgl.lua:11: invalid escape sequence near ''(%b\\['\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local index = 0\n  return function()\n    if index\
    \ > #string then return false end\n    index = index + 1\n    if string[index]\
    \ ~= '[' then return false end\n    if string[index+1] == '[' then\n      return\
    \ is_nested(string)()\n    else\n      return index == 2 \n    end\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp520c59yn.lua:27:\
    \ expected: true, actual: function: 0x1220380\nstack traceback:\n\t/tmp/tmp520c59yn.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tif string == nil then\n\t\treturn false\n\tend\n\
    \t\n\tlocal substring = string\n\tlocal i = 1 -- Index of the current character\
    \ in the substring\n\twhile true do\n\t\tlocal bracket_depth = 1 -- Bracket nesting\
    \ level\n\t\twhile i <= #substring do\n\t\t\tif substring[i] == '[' then\n\t\t\
    \t\tbracket_depth = bracket_depth + 1\n\t\t\telseif substring[i] == ']' then\n\
    \t\t\t\tbracket_depth = bracket_depth - 1\n\t\t\tend\n\t\t\tif bracket_depth ==\
    \ 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\ti = i\
    \ + 1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- We use a stack to keep track of brackets.\n\
    \t-- A closing bracket pushes the character 'T' on the stack.\n\t-- A opening\
    \ bracket pushes the character 'F' on the stack.\n\tlocal stack = { string.sub(string,\
    \ 1, 1) }\n\tlocal closing = string.sub(string, 1, 1) == ']'\n\tlocal opening\
    \ = (string.sub(string, 1, 1) ~= '[' and string.sub(string, 1, 1) ~= '^')\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqoxjwiys.lua:37: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   for _,char,_ in string.gmatch(\"[^[\\]]+\") do\
    \ return false end\n   return true\nend\n</code>\n<|/ a |>\n<| c |>\nI like the\
    \ recursive approach, but you really should use a for loop instead of a while\
    \ loop.\n<|/ c |>\n<| c |>\nWhy?\n<|/ c |>\n<| c |>\nBecause for loops are easier\
    \ to read and less error prone. Also, a while loop can make more sense to code\
    \ if you can use the `break` statement.\n<|/ c |>\n<| c |>\nI agree that for loops\
    \ are easier to read, but I wouldn't use them here because the OP asked for a\
    \ recursive solution.\n<|/ c |>\n<| c |>\nRecursion is more appropriate than looping\
    \ here.\n<|/ c |>\n<| a dscore=0 tags=lua-patterns,lua |>\nJust use an infix to\
    \ binary converter and check each bit to find out if the nested pair is present.\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6myxm2ur.lua:11: invalid escape sequence near '\"[^[\\]'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string.find(string, '[]') == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_wxlmz54.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp_wxlmz54.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp_wxlmz54.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   if string.find('[]') then\n      return true\n\
    \   end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqgdkv8e1.lua:11:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpqgdkv8e1.lua:11: in local 'candidate'\n\t/tmp/tmpqgdkv8e1.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- (string) --> (boolean)\n\tstring = string.chars()\n\
    \tlocal brackets = 0\n\t\n\t-- Loop through string\n\tfor i = 1, string.len()\
    \ do\n\t\tif string[i] == '[' then\n\t\t\tbrackets = brackets + 1\n\t\telseif\
    \ string[i] == ']' then\n\t\t\tbrackets = brackets - 1\n\t\tend\n\t\t\n\t\tif\
    \ brackets == 0 and string[i] == '[' then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \t\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvhrm5kkq.lua:12:\
    \ attempt to call a nil value (field 'chars')\nstack traceback:\n\t/tmp/tmpvhrm5kkq.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpvhrm5kkq.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  assert(type(string) == 'string')\n  local open_bracket\
    \ = 1\n  local close_bracket = 1\n  for i = 1, string.len do\n    if string.sub(string,\
    \ i, i) == '[' then\n      if open_bracket == 0 then\n        return false\n \
    \     elseif close_bracket == 0 then\n        open_bracket = 1\n      else\n \
    \       open_bracket = open_bracket - 1\n        close_bracket = close_bracket\
    \ - 1\n      end\n    elseif string.sub(string, i, i) == ']' then\n      if open_bracket\
    \ == 0 then\n        return false\n      else\n        open_bracket = open_bracket\
    \ - 1\n      end\n    else\n      if open_bracket > 0 then\n        open_bracket\
    \ = open_bracket - 1\n      else\n        if close_bracket > 0 then\n        \
    \  close_bracket = close_bracket - 1\n        else\n          return false\n \
    \       end\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzmce8azf.lua:14:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpzmce8azf.lua:14: in\
    \ local 'candidate'\n\t/tmp/tmpzmce8azf.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    if string.find('[[]', 1) ~= nil then\n     \
    \   return true\n    elseif string.find('[[]', -1) ~= nil then\n        return\
    \ false\n    else\n        return nil\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6gsknqq.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpe6gsknqq.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   for i = 1, #string do \n      if string[i] ~=\
    \ '[' then return false end \n      if i == #string then return true end \n  \
    \    if string[(i-1)] == '[' and string[i+1] == ']' then return true end \n  \
    \ end \n   return false \nend \n</code>\n<|/ a dscore=0 tags=string,parsing,lua\
    \ |>\n<| c |>\nThis will not work correctly for '[[[][[][][[]]]]]]' since it thinks\
    \ there is an extra ].\n<|/ c |>\n<| a tags=string,parsing,lua |>\n<code>\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpib3s9lsq.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   -- Create a table of opening brackets\n   local\
    \ opening_brackets = {}\n   for i = 1, string.lenth do\n      if string[i] ~=\
    \ '[' then\n         table.insert(opening_brackets, 1)\n      else\n         table.insert(opening_brackets,\
    \ 0)\n      end\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp96mwj680.lua:40: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Write your code here!\n  assert(false, \"Not\
    \ implemented\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjp1bpwu.lua:12:\
    \ Not implemented\nstack traceback:\n\t/tmp/tmpyjp1bpwu.lua:12: in local 'candidate'\n\
    \t/tmp/tmpyjp1bpwu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal stack = {}\n\tfor i = 1, #string do\n\t\t\
    if string[i] == '[' then\n\t\t\ttable.insert(stack, string[i])\n\t\telseif string[i]\
    \ == ']' then\n\t\t\tif #stack > 0 then\n\t\t\t\tif stack[#stack] == '[' then\n\
    \t\t\t\t\ttable.remove(stack, 1)\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\
    \tend\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tif #stack >\
    \ 0 then\n\t\treturn false\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3asw68e9.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3asw68e9.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Your code here\n  local start, stop = 1, string.len\n\
    \  local open_brackets\n  repeat\n    open_brackets = string.sub(string, start,\
    \ stop)\n    stop = stop - 1\n  until open_brackets == '[]'\n  return open_brackets\
    \ == '[]' \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp56u9pib0.lua:15:\
    \ bad argument #3 to 'sub' (number expected, got function)\nstack traceback:\n\
    \t/tmp/tmp56u9pib0.lua:15: in local 'candidate'\n\t/tmp/tmp56u9pib0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Initialize the string to be the current position\
    \ in the string.\n\tlocal pos = string.len() - 1\n\t\n\t-- Initialize a temporary\
    \ variable that tracks the previous character (the character just before the current\
    \ character).\n\tlocal prev_char = ''\n\t\n\t-- Repeat the following until we\
    \ see a closing bracket.\n\twhile pos ~= 0 do\n\t\t-- Get the character at the\
    \ current position.\n\t\tlocal curr_char = string.sub(string, pos, pos)\n\t\t\n\
    \t\t-- If the previous character was a closing bracket...\n\t\tif prev_char ==\
    \ '[' then\n\t\t\t-- If the previous character was a closing bracket and the current\
    \ character is not a closing bracket...\n\t\t\tif curr_char == ']' then\n\t\t\t\
    \t-- The string contains at least one valid subsequence.\n\t\t\t\treturn true\n\
    \t\t\tend\n\t\telseif prev_char == '{' then\n\t\t\t-- If the previous character\
    \ was a closing brace and the current character is not a closing brace...\n\t\t\
    \tif curr_char == '}' then\n\t\t\t\t-- The string contains at least one valid\
    \ subsequence.\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- If the current\
    \ character is a bracket, increment the position.\n\t\tif curr_char == '[' then\n\
    \t\t\tpos = pos + 1\n\t\telseif curr_char == '{' then\n\t\t\tpos = pos + 1\n\t\
    \tend\n\t\t\n\t\t-- If the previous character was a closing bracket, decrement\
    \ the position.\n\t\tif prev_char == '[' then\n\t\t\tpos = pos - 1\n\t\telseif\
    \ prev_char == '{' then\n\t\t\tpos = pos - 1\n\t\tend\n\t\t\n\t\t-- Remember the\
    \ previous character.\n\t\tprev_char = curr_char\n\tend\n\t\n\t-- There was no\
    \ valid subsequence.\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjlec3_h.lua:12:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpgjlec3_h.lua:12: in local 'candidate'\n\t/tmp/tmpgjlec3_h.lua:62: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if string:len() == 0 or string:sub(1,1) == '['\
    \ then\n    return false\n  else\n    local open = false\n    local closed = false\n\
    \    local i = 0\n    while i <= string:len() do\n      if open == false then\n\
    \        if string:sub(i,i) == ']' then\n          open = true\n        else\n\
    \          open = true\n        end\n      else\n        if string:sub(i,i) ==\
    \ ']' then\n          closed = true\n        else\n          open = false\n  \
    \      end\n      end\n      i = i + 1\n    end\n    return open == true and closed\
    \ == true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjirny8pu.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjirny8pu.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- We must remember if we encountered a left or\
    \ right bracket\n\tlocal left_brackets = false\n\tlocal right_brackets = false\n\
    \t\n\t-- For every character in the string\n\tfor c in string:gmatch(\"[^][]\"\
    ) do\n\t\t-- If the character is a bracket\n\t\tif c == '[' then\n\t\t\t-- If\
    \ we are at the start of a bracket\n\t\t\tif left_brackets == false then\n\t\t\
    \t\t-- Set the left bracket flag\n\t\t\t\tleft_brackets = true\n\t\t\telse\n\t\
    \t\t\t-- Otherwise set the right bracket flag\n\t\t\t\tright_brackets = true\n\
    \t\t\tend\n\t\telseif c == ']' then\n\t\t\t-- If we are at the end of a bracket\n\
    \t\t\tif right_brackets == false then\n\t\t\t\t-- Set the right bracket flag\n\
    \t\t\t\tright_brackets = true\n\t\t\telse\n\t\t\t\t-- Otherwise set the left bracket\
    \ flag\n\t\t\t\tleft_brackets = true\n\t\t\tend\n\t\telseif left_brackets and\
    \ right_brackets then\n\t\t\t-- If the brackets both have to be true\n\t\t\t--\
    \ Then the string is not nested\n\t\t\treturn false\n\t\telseif left_brackets\
    \ then\n\t\t\t-- If the left bracket flag is true\n\t\t\t-- Then the string is\
    \ not nested\n\t\t\treturn false\n\t\telseif right_brackets then\n\t\t\t-- If\
    \ the right bracket flag is true\n\t\t\t-- Then the string is not nested\n\t\t\
    \treturn false\n\t\telse\n\t\t\t-- If neither flag has been set yet\n\t\t\t--\
    \ then the string is not nested\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\t--\
    \ If we reach this point, there are no brackets left to detect\n\t-- so we return\
    \ the string as being valid (no nested brackets)\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79ixiupy.lua:64:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp79ixiupy.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        stack[#stack + 1] = string[i]\n    end\n    \n    -- Pop off the top\
    \ of the stack\n    local popped\n    popped = stack[#stack]\n    stack[#stack]\
    \ = nil\n    \n    -- If the popped character is ] then we have a nested sequence\n\
    \    if popped == ']' then\n        local index = 1\n        \n        while index\
    \ < #stack and stack[index] == popped do\n            index = index + 1\n    \
    \    end\n        \n        -- If the stack is not empty, it is nested\n     \
    \   if index ~= #stack then\n            return true\n        end\n    end\n \
    \   \n    return false\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0zd0cr5h.lua:37: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tstring = string.gsub(string, \"[\", \"\")\n\t\
    string = string.gsub(string, \"]\", \"\")\n\tlocal nesting_found = false\n\tfor\
    \ i = 1, #string do\n\t\tif string[i] == ']' then\n\t\t\tnesting_found = false\n\
    \t\telseif string[i] == '[' and string[i-1] ~= '[' then\n\t\t\tnesting_found =\
    \ true\n\t\telseif string[i] == '[' then\n\t\t\tif nesting_found == false then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\
    \tif nesting_found == false then\n\t\treturn false\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppx8hkxcy.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmppx8hkxcy.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmppx8hkxcy.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local nested = 1\n  local open = 1\n  local open_bracket\
    \ = 0\n  local close_bracket = 0\n  local close = 0\n  for i = 1, #string do\n\
    \    if string[i] == '[' then\n      if open ~= 0 then\n        open_bracket =\
    \ open_bracket + 1\n      end\n      open = open + 1\n    elseif string[i] ==\
    \ ']' then\n      if open ~= 0 then\n        close = close + 1\n      end\n  \
    \    close = close + 1\n      if close == open_bracket then\n        open_bracket\
    \ = open_bracket - 1\n      end\n      if open_bracket == 0 then\n        nested\
    \ = nested + 1\n      end\n    else\n      local close_bracket = close_bracket\
    \ + 1\n      if close_bracket == open_bracket then\n        open_bracket = open_bracket\
    \ - 1\n      end\n    end\n  end\n  return nested == 1 and open > 0 and close\
    \ > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxccxl_bl.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxccxl_bl.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string:sub(1,1) == '[' and string:sub(end-1,end-1)\
    \ == ']' \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn_irb0nh.lua:11: unexpected symbol near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjzb50l5.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppjzb50l5.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string.find(string, \"[[\") == -1 and string.find(string,\
    \ \"[\") == -1 and string.find(string, \"{{\") == -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp519xlpb6.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp519xlpb6.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp519xlpb6.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local depth = 0\n    local function is_bracket(bracket)\n\
    \        if depth > 0 then return false end -- Ignore first bracket\n        if\
    \ string.sub(string, 1, depth) ~= bracket then return false end -- Not nested\
    \ brackets\n        local start = string.find(string, depth, bracket, 1, true)\
    \ + 1\n        local end = string.find(string, depth, bracket, -1)\n        depth\
    \ = end\n        return start < #string and string.sub(string,start,end) ~= '['\n\
    \    end\n    while true do\n        local opening = is_bracket('[') -- Find first\
    \ opening bracket\n        local closing = is_bracket(']') -- Find first closing\
    \ bracket\n        if opening and not closing then return true end -- First bracket\
    \ is open\n        if not opening and not closing then return false end -- No\
    \ brackets found\n    end\nend\n</cell>\n<text>\nFunctions for Parsing Brackets\n\
    The main function in the following section is brackets. It takes as input a string\
    \ of brackets (either singles or doubles) and returns a list containing a substring\
    \ of the original string from which the brackets were opened, and a substring\
    \ of itself from which the brackets were closed.\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdfbja5qa.lua:16: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- TODO: Implement me!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9aeqn3nx.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9aeqn3nx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  local brackets_open = 0\n\
    \  local brackets_closed = 0\n  local brackets_nested = 0\n  for i, c in ipairs(string)\
    \ do\n    if c == '[' then\n      table.insert(stack, c)\n      brackets_open\
    \ = brackets_open + 1\n    else if c == ']' then\n      local open_brackets =\
    \ stack[#stack]\n      if open_brackets ~= brackets_open then\n        return\
    \ false\n      end\n      local closed_brackets = brackets_closed - 1\n      if\
    \ closed_brackets == 0 then\n        return true\n      elseif closed_brackets\
    \ > open_brackets then\n        return false\n      end\n      table.remove(stack,\
    \ #stack)\n      brackets_open = brackets_open - 1\n      brackets_nested = brackets_nested\
    \ + 1\n    elseif c == '[' then\n      brackets_open = brackets_open + 1\n   \
    \ else if c == ']' then\n      brackets_closed = brackets_closed + 1\n    end\n\
    \  end\n  if brackets_nested > 0 then\n    return false\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfhxyek_a.lua:64: 'end' expected (to close 'for' at line 15)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tif string.find('[]') ~= nil then\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1bv70n79.lua:11:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp1bv70n79.lua:11: in local 'candidate'\n\t/tmp/tmp1bv70n79.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   for _, bracket in string.gmatch(\"[[]\") do\n\
    \      if not bracket then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_g5kc3v.lua:11:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp0_g5kc3v.lua:11: in local 'candidate'\n\t/tmp/tmp0_g5kc3v.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {string}\n    for i = 1, #string\
    \ do \n        local char = string.sub(string, i, i)\n        if char == '[' then\n\
    \            table.insert(stack, char)\n        elseif char == ']' then\n    \
    \        if #stack == 0 then\n                return false\n            elseif\
    \ #stack == 1 then\n                table.remove(stack)\n            end\n   \
    \     else\n            assert(#stack > 0)\n            local top = stack[1]\n\
    \            if char == ']' and top == '[' then\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\n</cell>\n\
    <text>\nTask 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz_zju9e0.lua:32: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local brackets = {'[', ']'}\n  return string.find(string,\
    \ \"[\") == -1 and string.find(string, \"]\") == -1\n    and string.find(string,\
    \ \"{\") == -1 and string.find(string, \"}\") == -1\n    and string.find(string,\
    \ \"%[{\") == -1 and string.find(string, \"%}]\") == -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpak0xd5_a.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpak0xd5_a.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpak0xd5_a.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Your code here\nend\n</cell>\n<cell>\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnc9iv7_5.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = 0\n    for i = 1, #string do\n\
    \        if string[i] == '[' then\n            brackets = brackets + 1\n     \
    \   elseif string[i] == ']' then\n            brackets = brackets - 1\n      \
    \  end\n        if brackets == 0 then return true end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop17uixc.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpop17uixc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local pattern = string.rep(string, \"[\")\n  pattern\
    \ = string.format(\"(%s)\", pattern)\n  pattern = \"^\" .. pattern .. \"$\"\n\
    \  return not str:match(pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0xct58s6.lua:11:\
    \ bad argument #2 to 'rep' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp0xct58s6.lua:11: in local 'candidate'\n\t/tmp/tmp0xct58s6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   if #string <= 0 then\n      return false\n  \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd0w3k6uj.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string.find('[', 0, true) ~= nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps6eeiyiu.lua:11:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmps6eeiyiu.lua:11: in local 'candidate'\n\t/tmp/tmps6eeiyiu.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   if string == nil or string == '' then return\
    \ false end\n   for i = 1, #string do \n      local c = string.sub(i, i)\n   \
    \   if not (string.find(c, '[') ~= nil and string.find(c, ']') ~= nil) then return\
    \ false end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmhafvwj.lua:14:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpqmhafvwj.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpqmhafvwj.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   -- Write your solution here\n   -- (you can return\
    \ True or False here)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5avqpj2t.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp5avqpj2t.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  for i, c in string.gmatch('[[]?%w[]?') do -- loop\
    \ through characters\n    if c == '[' then -- if we see an open bracket, return\
    \ true if we see a closing bracket, return false otherwise\n      if not string.sub(string,\
    \ 1, i) == '[]' then\n        return false -- a closing bracket wasn't found\n\
    \      end\n      -- if we see a closing bracket, return true and end the loop\n\
    \      -- by returning true\n      if string.sub(string, i, string.len(string)\
    \ - i) == '[]' then \n        return true\n      end\n    end\n    -- if we see\
    \ a closing bracket, return false if we see another open bracket, return true\
    \ if we see no more characters\n    if c == '' then\n      return false\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpentnu3y2.lua:11:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpentnu3y2.lua:11: in local 'candidate'\n\t/tmp/tmpentnu3y2.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n   assert(type(string) == 'string')\n   -- Special\
    \ case when the string is empty.\n   if string.len() == 0 then return false end\n\
    \   -- Special case when the string is unnested.\n   if string[1] == ']' then\
    \ return true end\n   -- Special case when the string starts with a single bracket.\n\
    \   if string[1] == '[' then return true end\n   -- Recursive case: check every\
    \ valid nested brackets subsequence.\n   return (string.find('[[]', true) and\
    \ \n          string.find('[[]', false) or \n          string.find('[[', true)\
    \ and \n          string.find('[[', false) and \n          string.find(']]', true)\
    \ and \n          string.find(']]', false) or \n          string.find('[', true)\
    \ and \n          string.find('[', false) and \n          string.find(']', true)\
    \ and \n          string.find(']', false))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8a2druzh.lua:13:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp8a2druzh.lua:13: in local 'candidate'\n\t/tmp/tmp8a2druzh.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- Find the first index of a character which\
    \ is unescaped (ie. not '\\').\n    -- This is done by finding the first unescaped\
    \ character and then searching for the next one.\n    local open = string.find('[%U',\
    \ string.find(string, '\\%U') + 1)\n    -- If no unescaped characters are found,\
    \ return false.\n    if open == nil then return false end\n    -- Find the first\
    \ unescaped character.\n    local closing = string.find('%U', open)\n    -- If\
    \ no unescaped characters are found, return false.\n    if closing == nil then\
    \ return false end\n    -- If the length of the subsequence between the unescaped\
    \ and the escaped characters is \n    -- odd, return false.\n    return string[string.find(string,\
    \ '%U', open) + 1]:len() % 2 == 1 \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq8w03gps.lua:13: invalid escape sequence near ''\\%'\n"
  exit_code: 1
  status: Exception
