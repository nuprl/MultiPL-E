name: HumanEval_114_minSubArraySum
language: lua
results:
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz9y1j_lo.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  assert(#nums > 0, 'nums length should >= 0')\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsj89ch20.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzmyth57b.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   local min_sum = nums[1]\n   for i = 2,#nums do\n      if min_sum > nums[i]\
    \ then\n         min_sum = nums[i]\n      else\n         return min_sum\n    \
    \  end\n   end\n   return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9paox7_.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv9paox7_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 1 then\n    return nums[1]\n  end\n  if #nums == 2 then\n    return\
    \ nums[1] + nums[2]\n  end\n  local left = minSubArraySum(nums:sub(1, end - 1))\n\
    \  local right = minSubArraySum(nums:sub(2, end - 1))\n  if left == right then\n\
    \    return left\n  end\n  return left + nums[end]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6ag25jkh.lua:13: unexpected symbol near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal minSum = 0\n\tlocal minSumIndex = 0\n\tlocal index = #nums - 1\n\twhile\
    \ index > 0 do\n\t\tlocal currentSum = nums[index] + nums[index + 1]\n\t\tif minSum\
    \ > currentSum then\n\t\t\tminSum = currentSum\n\t\t\tminSumIndex = index\n\t\t\
    end\n\t\tlocal temp = index\n\t\tindex = index - 1\n\t\tif temp < 0 then\n\t\t\
    \tindex = temp\n\t\tend\n\tend\n\treturn minSumIndex\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad081c12.lua:28:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpad081c12.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local n = #nums\n    local sums = {}\n    for i = 1, n do\n        sums[i]\
    \ = 0\n    end\n    for i = 1, n do\n        local pos = i\n        while pos\
    \ > 1 do\n            pos = pos - 1\n            sums[pos] = sums[pos] + nums[i]\n\
    \        end\n    end\n    local min = nums[1]\n    for i = 2, n do\n        if\
    \ sums[i] < min then\n            min = sums[i]\n        end\n    end\n    return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3fvi9db.lua:31:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpt3fvi9db.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minimum, minimumSum = math.inf, math.inf\n    for _, num in ipairs(nums)\
    \ do\n        minimum = minimum or num\n        minimumSum = minimumSum + num\n\
    \    end\n    return minimumSum < minimum and minimum or math.inf\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8sg0uahb.lua:10:\
    \ attempt to perform arithmetic on a nil value (local 'minimumSum')\nstack traceback:\n\
    \t/tmp/tmp8sg0uahb.lua:10: in local 'candidate'\n\t/tmp/tmp8sg0uahb.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then return 0 end\n  if #nums == 1 then return nums[1] end\n\
    \  local min = sys.maxinteger\n  local i = 1\n  while i <= #nums do\n    local\
    \ s = sys.maxinteger\n    for j = i-1 to 0 do\n      s = s + nums[j]\n    end\n\
    \    if s < min then\n      min = s\n    end\n    i = i + 1\n  end\n  return min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpggyrkztq.lua:13: ',' expected near 'to'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tassert(#nums > 0, 'There must be at least one element')\n\tlocal s = math.min(nums[1]\
    \ + nums[2], math.max(nums[1] + nums[2], nums[1]))\n\tfor i = 2, #nums do\n\t\t\
    s = math.min(s, math.max(nums[i] + nums[i - 1], nums[i] + nums[i - 1]))\n\tend\n\
    \treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpme35itxz.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpme35itxz.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 1 then\n    return nums[1]\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbqrymam3.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpab7ht5me.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums == 0 then\n    return 0\n  end\n  \n  -- Find the\
    \ minimum sum of any non-empty sub-array of nums\n  local subArraySum = nums[1]\n\
    \  for i = 2, #nums do\n    subArraySum = math.min(subArraySum + nums[i], nums[i])\n\
    \  end\n  \n  -- Recursively compute the minimum sum of any non-empty sub-array\
    \ of nums\n  local subArraySum = minSubArraySum(nums, subArraySum)\n  \n  -- Return\
    \ min of current sub-array + minimum sum\n  return subArraySum + subArraySum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4f9u44u.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpz4f9u44u.lua:15: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmpz4f9u44u.lua:19: in upvalue 'minSubArraySum'\n\t/tmp/tmpz4f9u44u.lua:19:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmpz4f9u44u.lua:19: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmpz4f9u44u.lua:19: in upvalue 'minSubArraySum'\n\t/tmp/tmpz4f9u44u.lua:19:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmpz4f9u44u.lua:19: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmpz4f9u44u.lua:19: in upvalue 'minSubArraySum'\n\t/tmp/tmpz4f9u44u.lua:19:\
    \ in upvalue 'minSubArraySum'\n\t...\n\t/tmp/tmpz4f9u44u.lua:19: in local 'candidate'\n\
    \t/tmp/tmpz4f9u44u.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.360\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Return the minimum sum of any non-empty sub-array of nums.\n  if #nums ==\
    \ 0 then return 0 end\n  local min_sum = nums[1]\n  for i = 2, #nums do\n    --\
    \ We keep adding nums[i] until we get to a negative number.\n    local new_sum\
    \ = min_sum + nums[i]\n    -- If the new sum is smaller than the old sum, that's\
    \ a sign that\n    -- the current sub-array should be excluded.\n    if new_sum\
    \ ~= min_sum then\n      min_sum = new_sum\n    end\n  end\n  return min_sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6l0df8ce.lua:25:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp6l0df8ce.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \t-- Find length of subarray in nums.\n\tlocal function subArrayLen(arr, n)\n\t\
    \tlocal i = 0\n\t\tlocal total = 0\n\t\twhile i < n do\n\t\t\tif arr[i] == nil\
    \ then\n\t\t\t\ttotal = total + 1\n\t\t\telse\n\t\t\t\ttotal = total + arr[i]\n\
    \t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\treturn total\n\tend\n\t-- Find the length\
    \ of the array in nums.\n\tlocal function arrayLen(arr)\n\t\tlocal length = 0\n\
    \t\tfor i = 1, #arr do\n\t\t\tlength = length + 1\n\t\tend\n\t\treturn length\n\
    \tend\n\t-- Find length of the smallest array in nums.\n\tlocal function smallestArrayLen(arr,\
    \ n)\n\t\tlocal smallestLength = 1\n\t\tlocal smallestArr = nil\n\t\tfor i = 1,\
    \ n do\n\t\t\tlocal currentArr = arr[i]\n\t\t\tif currentArr == nil then\n\t\t\
    \t\tsmallestArr = smallestArr\n\t\t\t\tsmallestLength = smallestLength + 1\n\t\
    \t\telse\n\t\t\t\tlocal currentLength = arrayLen(currentArr)\n\t\t\t\tif currentLength\
    \ < smallestLength then\n\t\t\t\t\tsmallestLength = currentLength\n\t\t\t\t\t\
    smallestArr = currentArr\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn smallestLength\n\
    \tend\n\t-- Return min sum within subarray.\n\tlocal function findMinSum(arr,\
    \ n)\n\t\tlocal sum = 0\n\t\tlocal smallestSum = nil\n\t\tfor i = 1, n do\n\t\t\
    \tlocal currentArr = arr[i]\n\t\t\tif currentArr == nil then\n\t\t\t\tsmallestSum\
    \ = sum\n\t\t\telse\n\t\t\t\tlocal currentSum = sum + arr[i]\n\t\t\t\tif currentSum\
    \ < smallestSum then\n\t\t\t\t\tsmallestSum = currentSum\n\t\t\t\tend\n\t\t\t\t\
    sum = currentSum\n\t\t\tend\n\t\tend\n\t\treturn smallestSum\n\tend\n\t-- Get\
    \ length of array.\n\tlocal function arrayLen(arr)\n\t\tlocal length = 0\n\t\t\
    for i = 1, #arr do\n\t\t\tlength = length + 1\n\t\tend\n\t\treturn length\n\t\
    end\n\t-- Get smallest array.\n\tlocal function smallestArrayLen(arr, n)\n\t\t\
    local smallestLength = 1\n\t\tlocal smallestArr = nil\n\t\tfor i = 1, n do\n\t\
    \t\tlocal currentArr = arr[i]\n\t\t\tif currentArr == nil then\n\t\t\t\tsmallestArr\
    \ = smallestArr\n\t\t\t\tsmallestLength = smallestLength + 1\n\t\t\telse\n\t\t\
    \t\tlocal currentLength = arrayLen(currentArr)\n\t\t\t\tif currentLength < smallestLength\
    \ then\n\t\t\t\t\tsmallestLength = currentLength\n\t\t\t\t\t\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxa4p0lo3.lua:106: 'end' expected (to close 'if' at line 85)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- We begin by considering every possible sum for an empty list.\n  local sum\
    \ = 0\n  for i = 1, #nums do\n    -- For each element of nums, we consider it\
    \ a valid subarray of length i,\n    -- so the sum is the minimum of the sums\
    \ for each possible subarray of\n    -- nums, where the first element is the only\
    \ element of that subarray.\n    sum = min (sum, sum + nums[i])\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc_0lomk8.lua:13:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpc_0lomk8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpc_0lomk8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local function helper(array, index, minSoFar)\n    if index == #array then\n\
    \      return minSoFar\n    end\n    if minSoFar == nil then\n      minSoFar =\
    \ array[1]\n    end\n    local min = array[index]\n    local nextIndex = index\
    \ + 1\n    local minSum = minSubArraySum(array, nextIndex, minSoFar)\n    if min\
    \ > minSum then\n      minSum = min\n    end\n    return helper(array, nextIndex,\
    \ minSum)\n  end\n  local result = helper(nums, 1, nil)\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqc_ccmor.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpqc_ccmor.lua:16: in local 'helper'\n\
    \t/tmp/tmpqc_ccmor.lua:22: in upvalue 'minSubArraySum'\n\t/tmp/tmpqc_ccmor.lua:16:\
    \ in local 'helper'\n\t/tmp/tmpqc_ccmor.lua:22: in upvalue 'minSubArraySum'\n\t\
    /tmp/tmpqc_ccmor.lua:16: in local 'helper'\n\t/tmp/tmpqc_ccmor.lua:22: in upvalue\
    \ 'minSubArraySum'\n\t/tmp/tmpqc_ccmor.lua:16: in local 'helper'\n\t/tmp/tmpqc_ccmor.lua:22:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmpqc_ccmor.lua:16: in local 'helper'\n\t\
    ...\n\t/tmp/tmpqc_ccmor.lua:22: in local 'candidate'\n\t/tmp/tmpqc_ccmor.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.340 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  return assert(min_subarray_sum(nums))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcrhrfp6l.lua:7:\
    \ attempt to call a nil value (global 'min_subarray_sum')\nstack traceback:\n\t\
    /tmp/tmpcrhrfp6l.lua:7: in local 'candidate'\n\t/tmp/tmpcrhrfp6l.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local function helper(nums, i, j, sum)\n    if i == j then\n      return sum\n\
    \    else\n      return helper(nums, i + 1, j, sum + nums[i])\n    end\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv2ceu2rl.lua:32: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmgphrgqx.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case: When we have no numbers, return the minimum number\n  if #nums\
    \ == 0 then\n    return nums[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp329kudlq.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = #nums\n    for i = 1, #nums do\n        local sum = nums[i]\n\
    \        for j = i+1, #nums do\n            sum = sum + nums[j]\n            if\
    \ sum < min_sum then\n                min_sum = sum\n            end\n       \
    \ end\n    end\n    return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmq2gek9.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptmq2gek9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local n = #nums\n  local min = math.min(unpack(nums))\n  local sum = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpikb8mnrm.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case: no non-empty sub-arrays.\n  if #nums == 0 then\n    return 0\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5jg_5puj.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local numsCopy = table.copy(nums)\n  local minSum = math.inf\n  for i = #nums,\
    \ 1, -1 do\n    local subArraySum = 0\n    for j = i, 1, -1 do\n      if j ==\
    \ i then break end\n      subArraySum = subArraySum + numsCopy[j]\n    end\n \
    \   if subArraySum < minSum then\n      minSum = subArraySum\n    end\n  end\n\
    \  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvncksvnv.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpvncksvnv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvncksvnv.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums <= 1 then\n    return nums[1]\n  end\n  if #nums <= 2 then\n    return\
    \ nums[1] + nums[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu9gbu4_q.lua:31: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   local minValue = 0\n   local minIndex\n   for _, num in ipairs(nums) do\n\
    \      if num > 0 then\n         local sum = 0\n         for i = 0, num do sum\
    \ = sum + nums[i] end\n         if sum < minValue then\n            minValue =\
    \ sum\n            minIndex = math.max(minIndex, 0)\n         end\n      end\n\
    \   end\n   return minValue\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmy68w02.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpvmy68w02.lua:12: in local 'candidate'\n\t/tmp/tmpvmy68w02.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = 0\n    local currentSum = 0\n    for i = 1, #nums do\n      \
    \  currentSum = currentSum + nums[i]\n        if currentSum < min then\n     \
    \       min = currentSum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmlk7h3_.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfmlk7h3_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local result = 0\n  local numsLength = #nums\n  assert(numsLength >= 1)\n \
    \ for i = 1, numsLength do\n    local num = nums[i]\n    local newResult = result\
    \ + num\n    local newNumsLength = i - 1\n    if newResult > newNumsLength then\n\
    \      result = newResult\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i72yf3e.lua:24:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp3i72yf3e.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minimum = #nums\n  for i = #nums, 1, -1 do\n    minimum = math.min(minimum,\
    \ #nums - i)\n  end\n  minimum = minimum - #nums + 1\n  local i = 0\n  for i =\
    \ #nums, 1, -1 do\n    minimum = minimum + nums[minimum + 1]\n  end\n  minimum\
    \ = minimum - 1\n  return minimum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn5owuwef.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpn5owuwef.lua:14: in local 'candidate'\n\t/tmp/tmpn5owuwef.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph68805tm.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.inf\n    for _, v in ipairs(nums) do\n        minSum\
    \ = math.min(minSum, v)\n    end\n    return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = sys.maxint\n  for _, item in ipairs(nums) do\n    min = math.min(item,\
    \ min)\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnixngfmf.lua:7:\
    \ attempt to index a nil value (global 'sys')\nstack traceback:\n\t/tmp/tmpnixngfmf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnixngfmf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minimum = math.inf\n  for _, num in ipairs(nums) do\n    minimum = minimum\
    \ > num and minimum or num\n  end\n  return minimum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zn7r48k.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4zn7r48k.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4zn7r48k.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local subNums = {}\n    for _, v in ipairs(nums) do subNums[v] = 1 end\n\
    \    local numSum = subNums[1]\n    for i = 2, #nums do\n        for j = 0, i\
    \ do\n            if subNums[j] > subNums[i] then\n                numSum = subNums[j]\
    \ + numSum\n                subNums[i] = subNums[j]\n            end\n       \
    \ end\n    end\n    return numSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjm3zh35y.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjm3zh35y.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpjm3zh35y.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = nil\n    for i = 1, #nums do\n        local sum = sumSubArray(nums,\
    \ i, i)\n        if min == nil or min > sum then\n            min = sum\n    \
    \    end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpobpjtmp1.lua:9:\
    \ attempt to call a nil value (global 'sumSubArray')\nstack traceback:\n\t/tmp/tmpobpjtmp1.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpobpjtmp1.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local maxSum = nil\n    for i = 1, #nums do\n        local sum = 0\n    \
    \    for j = 1, i do\n            sum = sum + nums[j]\n        end\n        if\
    \ maxSum == nil or sum > maxSum then\n            maxSum = sum\n        end\n\
    \    end\n    return maxSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb81f2gbl.lua:23:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpb81f2gbl.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.min(table.unpack(nums))\n    for _, v in ipairs(nums)\
    \ do\n        minSum = math.min(minSum, v)\n    end\n    return minSum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v_eo51u.lua:18:\
    \ expected: -6, actual: -3\nstack traceback:\n\t/tmp/tmp2v_eo51u.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \t-- Base Case\n\tif #nums == 0 then\n\t\treturn 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy5pcbn6q.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case 1\n  if #nums == 0 then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptsi4qj3l.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums < 2 then\n    return nums[1]\n  end\n  -- Scan nums\
    \ linearly, add current element to the min\n  local minSoFar = nums[1]\n  for\
    \ i = 2, #nums do\n    local currentElement = nums[i]\n    minSoFar = math.min(currentElement,\
    \ minSoFar + currentElement)\n  end\n  return minSoFar\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsu7vgj_x.lua:23:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpsu7vgj_x.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   if #nums == 0 then\n      return 0\n   elseif #nums == 1 then\n      return\
    \ nums[1]\n   elseif #nums == 2 then\n      return nums[1] + nums[#nums]\n   else\n\
    \      local min = sys.maxint\n      for i = 1, #nums do\n         local s = nums[i]\
    \ + minSubArraySum(nums[i+1])\n         min = math.min(s, min)\n      end\n  \
    \    return min\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwnwx6jja.lua:14:\
    \ attempt to index a nil value (global 'sys')\nstack traceback:\n\t/tmp/tmpwnwx6jja.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpwnwx6jja.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local currentSum = 0\n  local i = 1\n  while i <= #nums do\n\
    \    currentSum = currentSum + nums[i]\n    if currentSum < sum then\n      sum\
    \ = currentSum\n    end\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgak8mxuf.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpgak8mxuf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd_ur2ji6.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum, pos, result\n  sum = pos = 0\n  local i = 1\n  while i < #nums do\n\
    \    if sum > 0 then\n      sum = sum + nums[i]\n    else\n      pos = pos + 1\n\
    \      if pos == #nums then\n        sum = nums[i]\n      else\n        sum =\
    \ sum - nums[pos]\n      end\n    end\n    i = i + 1\n  end\n  result = sum\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp77rmd5y0.lua:8: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal sum = 0\n\tlocal n = #nums\n\tfor i = 1, n do\n\t\tlocal j = i\n\t\twhile\
    \ j > 0 and nums[j] < nums[i] do\n\t\t\tsum = sum + nums[j]\n\t\t\tj = 1\n\t\t\
    end\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkaqwxqp.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfkaqwxqp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  else\n    local minSum = math.max(-math.inf,\
    \ 0)\n    for i = 1, #nums do\n      local j = i - 1\n      while j >= 0 and nums[i]\
    \ < nums[j] do\n        local k = j - 1\n        while k >= 0 and nums[k] < nums[k\
    \ + 1] do\n          k = k - 1\n        end\n        j = k + 1\n      end\n  \
    \    if j > 0 then\n        local sum = 0\n        for j = i, j - 1, -1 do\n \
    \         sum = sum + nums[j]\n        end\n        minSum = math.min(sum, minSum)\n\
    \      end\n    end\n    return minSum\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3y1l36k1.lua:10:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmp3y1l36k1.lua:10: in local 'candidate'\n\t/tmp/tmp3y1l36k1.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sub = 0\n  for i = 1, #nums do\n    if i > 1 then\n      sub = sub +\
    \ nums[i]\n    end\n    if sub < 0 then\n      sub = sub + nums[i]\n    end\n\
    \  end\n  return sub\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4e_yn59.lua:22:\
    \ expected: 1, actual: 14\nstack traceback:\n\t/tmp/tmps4e_yn59.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if nums == nil then\n    return nil\n  end\n  local sum = 0\n  for _, x in\
    \ ipairs(nums) do\n    sum = sum + x\n  end\n  -- TODO: Find a way to make this\
    \ more efficient.\n  for i, x in ipairs(nums) do\n    sum = sum - x\n    if sum\
    \ < 0 then\n      sum = 0\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4kgq1r_.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf4kgq1r_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local result = nums[1]\n  for i = 2, #nums do\n    result = min(result, nums[i]\
    \ + nums[i - 1])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkxmqo6wi.lua:9:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpkxmqo6wi.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkxmqo6wi.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tassert(#nums > 0, 'Must pass nums with length > 0')\n\tlocal minSum = math.min(#nums,\
    \ #nums)\n\tfor i = 1, #nums do\n\t\tlocal currentSum = currentSum + nums[i]\n\
    \t\tif currentSum < minSum then\n\t\t\tminSum = currentSum\n\t\tend\n\tend\n\t\
    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1h773pl.lua:10:\
    \ attempt to perform arithmetic on a nil value (global 'currentSum')\nstack traceback:\n\
    \t/tmp/tmpc1h773pl.lua:10: in local 'candidate'\n\t/tmp/tmpc1h773pl.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case: When there are no elements to sum up\n  if not nums then\n  \
    \  return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgqxz327r.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local ans, lo, hi, sum\n    lo = 1\n    hi = #nums\n    sum = nums[hi]\n\
    \    ans = sum\n    while lo < hi do\n        sum = sum + nums[lo]\n        if\
    \ sum < ans then\n            ans = sum\n            lo = lo + 1\n        elseif\
    \ sum > ans then\n            hi = hi - 1\n        else\n            return ans\n\
    \        end\n    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2z2xp8vo.lua:29:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmp2z2xp8vo.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwz1s5e4h.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    -- base case\n    if not nums or #nums == 1 then\n        return nums[1]\n\
    \    end\n    -- recursive case\n    return #nums > 0 and math.min(nums[1], minSubArraySum(nums[#nums\
    \ - 1]))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8gq4ikq8.lua:8:\
    \ attempt to get length of a number value (local 'nums')\nstack traceback:\n\t\
    /tmp/tmp8gq4ikq8.lua:8: in upvalue 'minSubArraySum'\n\t/tmp/tmp8gq4ikq8.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp8gq4ikq8.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums < 1 then\n    return nil\n  end\n  -- Base case\n\
    \  if #nums == 1 then\n    return nums[1]\n  end\n  -- Recursive case\n  local\
    \ min_so_far = nums[1]\n  for i = 2, #nums do\n    -- Remove the current element\
    \ and add it to the min_so_far\n    -- recursively\n    min_so_far = min_so_far\
    \ + nums[i]\n    -- Update the minimum if it is less than the current minimum\n\
    \    -- recursively\n    if min_so_far < nums[i] then\n      min_so_far = nums[i]\n\
    \    end\n  end\n  return min_so_far\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptiduyu6j.lua:33:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmptiduyu6j.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\n  local sum, minSum = nums[0], nums[0]\n\
    \  for i = 1, #nums do\n    if nums[i] < 0 then\n      return nil\n    end\n \
    \   sum = sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n\
    \  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb5b0o00x.lua:15:\
    \ attempt to perform arithmetic on a nil value (local 'sum')\nstack traceback:\n\
    \t/tmp/tmpb5b0o00x.lua:15: in local 'candidate'\n\t/tmp/tmpb5b0o00x.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal len = #nums\n\tif len == 0 then\n\t\treturn 0\n\tend\n\t\n\tlocal sum\
    \ = 0\n\tlocal cur_min = nil\n\tfor i=1, len do\n\t\tsum = sum + nums[i]\n\t\t\
    if cur_min == nil or sum <= cur_min then\n\t\t\tcur_min = sum\n\t\tend\n\tend\n\
    \treturn cur_min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhldsf6i.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpdhldsf6i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then return 0 end\n  local sum = nums[1]\n  local i, j = 1, #nums\n\
    \  while i < j do\n    sum = min (sum, nums[i] + nums[j])\n    -- Update both\
    \ indices\n    if sum > 0 then\n      i = i + 1\n    else\n      j = j - 1\n \
    \   end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbdv24p8w.lua:11:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpbdv24p8w.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbdv24p8w.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums == 0 then\n    return 0\n  end\n  -- Find the minimum\
    \ sum for any sub array in nums\n  local minimum = nums[1]\n  local minimumSum\
    \ = minimum\n  local sum = 1\n  for i = 2, #nums do\n    sum = sum + nums[i]\n\
    \    if sum > minimum then\n      minimum = sum\n      minimumSum = minimum\n\
    \    else\n      minimum = minimum\n      minimumSum = minimum\n    end\n  end\n\
    \  return minimumSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5r7r0f4.lua:31:\
    \ expected: 1, actual: 15\nstack traceback:\n\t/tmp/tmpc5r7r0f4.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if nums == nil then\n    return nil\n  end\n  local min_sum = math.min(unpack(nums))\n\
    \  for _, v in ipairs(nums) do\n    if min_sum >= v then\n      min_sum = min_sum\
    \ - v\n    end\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvdiqms0t.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvdiqms0t.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpvdiqms0t.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  for i = 2, #nums do\n    local temp = minSum + nums[i]\n\
    \    if temp < minSum then\n      minSum = temp\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf83qb73k.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpf83qb73k.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local subArraySum = 0\n  for i = 1, #nums do\n    local sum = 0\n    for j\
    \ = 1, i do\n      sum = sum + nums[j]\n    end\n    subArraySum = subArraySum\
    \ + sum\n  end\n  return subArraySum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd98b39of.lua:21:\
    \ expected: 1, actual: 54\nstack traceback:\n\t/tmp/tmpd98b39of.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local len = #nums\n    local minsum, bestindex = 0, 1\n    for i = 2, len\
    \ do\n        minsum = minsum + nums[bestindex]\n        if bestindex > len -\
    \ 1 then\n            return minsum\n        end\n        if minsum > nums[bestindex\
    \ + 1] then\n            bestindex = bestindex + 1\n        else\n           \
    \ minsum = nums[bestindex + 1]\n        end\n    end\n    return minsum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj713s0oz.lua:26:\
    \ expected: 1, actual: 13\nstack traceback:\n\t/tmp/tmpj713s0oz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   local minSum = nil\n   for _, num in ipairs(nums) do\n      if minSum == nil\
    \ then\n         minSum = num\n      else\n         minSum = math.min(minSum +\
    \ num, minSum)\n      end\n   end\n   return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_lujwa7.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx_lujwa7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local bestsum, besti = 0, -1\n    for i, v in ipairs(nums) do\n        bestsum\
    \ = bestsum + v\n        if bestsum > 0 then\n            besti = i\n        end\n\
    \    end\n    return besti\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpam5wxoju.lua:20:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpam5wxoju.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  elseif #nums == 1 then\n    return nums[1]\n\
    \  else\n    local min = math.inf\n    local max_val = nums[1]\n    for i = 2,\
    \ #nums do\n      if nums[i] < max_val then\n        max_val = nums[i]\n     \
    \ else\n        local curr_min = max_val + nums[i-1]\n        if curr_min < min\
    \ then\n          min = curr_min\n        end\n      end\n    end\n    return\
    \ min\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmlnymbm1.lua:19:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmlnymbm1.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmlnymbm1.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   assert(#nums > 0)\n   local min = math.min(nums[1])\n   for i = 2, #nums do\n\
    \      local sum = min + nums[i]\n      if sum ~= min and sum ~= math.floor(sum)\
    \ then return sum\n      else\n         min = sum\n      end\n   end\n   return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38kljqck.lua:22:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp38kljqck.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    assert(#nums > 0, \"Array of size greater than zero\")\n    -- start with\
    \ the first element as the min value, and the rest as the max\n    local result\
    \ = nums[1]\n    local i = 1\n    while i < #nums do\n        result = math.min(result,\
    \ nums[i])\n        i = i + 1\n    end\n    -- return the result\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2nxn4wm.lua:23:\
    \ expected: -6, actual: -2\nstack traceback:\n\t/tmp/tmpu2nxn4wm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9pqeg_1d.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minimum = math.min(nums)\n  for i = 1, #nums do\n    minimum = minimum\
    \ + nums[i] - minimum\n  end\n  return minimum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3jetlykb.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'minimum')\nstack traceback:\n\
    \t/tmp/tmp3jetlykb.lua:9: in local 'candidate'\n\t/tmp/tmp3jetlykb.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\n  if #nums == 1 then\n    return nums[1]\n\
    \  end\n  -- Find the minimum sum of a sub-array of length k\n  local function\
    \ minSubArraySumHelper(nums, k)\n    if k == 0 then\n      return nums[1]\n  \
    \  end\n    local minSum = nums[1]\n    for i = 2, #nums do\n      minSum = math.min(minSum\
    \ + nums[i], minSubArraySumHelper(nums, k - 1))\n    end\n    return minSum\n\
    \  end\n  local k = #nums\n  return minSubArraySumHelper(nums, k)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w7kr9s_.lua:31:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3w7kr9s_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then return 0 end\n  local n = #nums\n  local sum, min = nums[1],\
    \ nums[1]\n  for i = 2, n do\n    if min > sum or sum == 0 then\n      sum, min\
    \ = nums[i], nums[i]\n    else\n      sum = sum + nums[i]\n      min = min * nums[i]\n\
    \    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10y3159p.lua:24:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmp10y3159p.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if not nums then\n        return 0\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk92xsone.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  for _, num in ipairs(nums) do\n    sum = sum + num\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdfs4z8i.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmphdfs4z8i.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minimum = math.inf\n    for i = 1, #nums do\n        minimum = minimum\
    \ + nums[i]\n    end\n    return minimum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyn29f64i.lua:9:\
    \ attempt to perform arithmetic on a nil value (local 'minimum')\nstack traceback:\n\
    \t/tmp/tmpyn29f64i.lua:9: in local 'candidate'\n\t/tmp/tmpyn29f64i.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if #nums == 0 then\n        return 0\n    end\n    local min = math.min(nums)\n\
    \    for i = 1, #nums do\n        local tmp = min + nums[i]\n        if tmp <\
    \ min then\n            min = tmp\n        end\n    end\n    return min\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdvlgvoep.lua:12:\
    \ attempt to perform arithmetic on a table value (local 'min')\nstack traceback:\n\
    \t/tmp/tmpdvlgvoep.lua:12: in local 'candidate'\n\t/tmp/tmpdvlgvoep.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    -- Base case\n    if #nums == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy5_bl8th.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   -- Base case\n   if #nums == 1 then\n      return nums[1]\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnemlbrsa.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  assert(#nums > 0, 'The array should not be empty!')\n  local startIdx = 1\n\
    \  local min = sys.maxint\n  local result = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvgbyjev0.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case: array is empty, return zero\n  if #nums == 0 then\n    return\
    \ 0\n  end\n  -- Base case: only one item in the array\n  if #nums == 1 then\n\
    \    return nums[1]\n  end\n  -- Find the minimum sum of the first element\n \
    \ local minElement = nums[1]\n  -- Find minimum sum of the rest of the elements\n\
    \  for i = 2, #nums do\n    minElement = minElement + nums[i]\n  end\n  return\
    \ minElement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7rukpj3.lua:27:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpu7rukpj3.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8405d41d.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   -- Base case\n   if #nums == 0 then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8r3zayk1.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  assert(numel(nums) > 0)\n  local total = 0\n  for i = 1, numel(nums) do\n \
    \   total = total + nums[i]\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz56tr0ij.lua:7:\
    \ attempt to call a nil value (global 'numel')\nstack traceback:\n\t/tmp/tmpz56tr0ij.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpz56tr0ij.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if not nums or #nums == 0 then\n        return 0\n    end\n    local i, j,\
    \ min_sum = 0, 0, 0\n    for i = 1, #nums do\n        local sum = 0\n        j\
    \ = i\n        while j ~= 0 do\n            sum = sum + nums[j] - 1\n        \
    \    j = j - 1\n        end\n        if sum < min_sum then\n            min_sum\
    \ = sum\n        end\n    end\n    return min_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqfuijdi.lua:28:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfqfuijdi.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums == 0 then\n    return 0\n  end\n  \n  -- Sort the\
    \ array\n  table.sort(nums)\n  \n  -- If the first element is negative, add it\
    \ to the running total\n  if nums[1] < 0 then\n    local runningTotal = nums[1]\n\
    \    return runningTotal + minSubArraySum(nums[2:end])\n  end\n  \n  -- If there\
    \ are no negative elements to add, return zero\n  if #nums == 1 then\n    return\
    \ 0\n  end\n  \n  -- Otherwise, find the running total for the first element\n\
    \  local runningTotal = nums[1]\n  \n  -- For every other element, add the smallest\
    \ running total found so far\n  for i = 2, #nums do\n    runningTotal = math.min(runningTotal,\
    \ runningTotal + nums[i])\n  end\n  \n  return runningTotal + minSubArraySum(nums[2:end])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_6cnpz0l.lua:18: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return nil\n  end\n  local minElement = nums[1]\n \
    \ for i = 2, #nums do\n    if nums[i] < minElement then\n      minElement = nums[i]\n\
    \    end\n  end\n  return minElement\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_c9xwrd.lua:23:\
    \ expected: -6, actual: -3\nstack traceback:\n\t/tmp/tmp3_c9xwrd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    assert(type(nums) == 'table')\n    local min = nums[1]\n    for i = 2, #nums\
    \ do\n        local n = nums[i]\n        if n < min then\n            min = n\n\
    \        else\n            min = min(min - n, nums[i])\n        end\n    end\n\
    \    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc4_cw_yr.lua:14:\
    \ attempt to call a number value (local 'min')\nstack traceback:\n\t/tmp/tmpc4_cw_yr.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpc4_cw_yr.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local total = 0\n    local minSum = #nums\n    for i = 1, #nums do\n    \
    \    total = total + nums[i]\n        if total < minSum then\n            minSum\
    \ = total\n        end\n    end\n    return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxui5mwmv.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxui5mwmv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  assert(nums and #nums > 0)\n  if #nums == 1 then\n    return nums[1]\n  end\n\
    \  local sum = 0\n  local min = nums[1]\n  local i = 1\n  for i = 2, #nums do\n\
    \    sum = sum + nums[i]\n    if sum < min then\n      min = sum\n    end\n  end\n\
    \  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz84bg7.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvrz84bg7.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if nums == nil then\n        return nil\n    end\n    local min_sum = nil\n\
    \    for _, num in pairs(nums) do\n        if min_sum == nil then\n          \
    \  min_sum = num\n        else\n            min_sum = min_sum + num\n        end\n\
    \    end\n    return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuljn4eq3.lua:24:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpuljn4eq3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  assert(#nums > 0)\n  \n  local minSum, minSumIndex = {}, 0\n  for i = 1, #nums\
    \ do\n    minSum[minSumIndex] = nums[i]\n    minSumIndex = minSumIndex + 1\n \
    \ end\n  \n  for i = 1, #nums do\n    local sum = 0\n    local j = 0\n    for\
    \ k = 1, minSumIndex - 1 do\n      sum = sum + minSum[k]\n      j = (j + 1) +\
    \ ((k == minSumIndex - 1) or (nums[i] - minSum[k]) < 0)\n    end\n    \n    if\
    \ sum ~= 0 then\n      minSum[minSumIndex] = sum\n      minSumIndex = minSumIndex\
    \ + 1\n    end\n  end\n  \n  return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwtk5au_x.lua:20:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpwtk5au_x.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpwtk5au_x.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Return infinity if there is no non-empty sub-array.\n  if not nums or #nums\
    \ == 0 then\n    return math.inf\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0pq4fb9d.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   -- Initialize minSum.\n   local minSum = nums[1]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcruycvlr.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = math.min(nums)\n    local sum = 0\n    for i = 1, #nums do\n\
    \        sum = sum + nums[i]\n        if sum < min then\n            min = sum\n\
    \        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoeptf78v.lua:11:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpoeptf78v.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpoeptf78v.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.max( nums[1] ) -- The first number should be the minimum.\n\
    \  -- Start with the second element of the array.\n  for i = 2, #nums do\n   \
    \ local sum = minSum + nums[i]\n    minSum = math.min(sum, minSum)\n  end\n  return\
    \ minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6hq_9uk.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx6hq_9uk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \t-- Base cases\n\tif nums == nil then return nil end\n\tif nums == [1] then return\
    \ 1 end\n\tif #nums == 0 then return 0 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6herl11s.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local total = 0\n  local min = nil\n  for i = 1, #nums do\n    total = total\
    \ + nums[i]\n    if min == nil or total < min then\n      min = total\n    end\n\
    \  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw6w8eug.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgw6w8eug.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case: If the array contains no elements or only negative numbers, return\
    \ 0\n  if not nums or #nums == 0 then return 0 end\n  -- Base case: If the array\
    \ contains only positive numbers, return 0\n  if #nums == 1 then return 0 end\n\
    \  -- Get the minimum sum\n  local minimumSum = math.min(nums[#nums-1])\n  --\
    \ Iterate through each element in the array\n  for i = 1, #nums do\n    -- If\
    \ the current element + the current minimum sum is less than the minimum sum,\
    \ update it\n    if minimumSum + nums[i] < minimumSum then minimumSum = nums[i]\
    \ + minimumSum end\n    -- If it's equal to the minimum sum, don't update anything\n\
    \    if minimumSum == nums[i] then continue end\n    -- Otherwise, go through\
    \ the rest of the array\n  end\n  return minimumSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgy04gkd2.lua:18: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local s = math.min(nums, math.min(nums))\n    local m = math.max(nums, math.max(nums))\n\
    \    return m + s - 2 * math.min(m, s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local m = math.min(table.unpack(nums))\n  local s = 0\n  for i = 1, m do\n\
    \    local j = i\n    while j > 0 and nums[j - 1] > nums[j] do\n      s = s +\
    \ nums[j - 1]\n      j -= 1\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwz5ht8gv.lua:13: syntax error near '-'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min, max\n    for i = 1, #nums do\n        min = math.min(min, nums[i])\n\
    \        max = math.max(max, nums[i])\n    end\n    return max - min\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvdv3ljcw.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgp5b_w3s.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minimum, indexMin, currentMin = math.inf,  {}, math.inf\n  for i = 1,\
    \ #nums do\n    local currentMax = nums[i]\n    local currentIndex = i\n    while\
    \ currentIndex > 1 do\n      currentMax = math.max(currentMax, nums[currentIndex\
    \ - 1])\n      currentIndex = currentIndex - 1\n    end\n    if currentMax < minimum\
    \ then\n      minimum = currentMax\n      indexMin = currentIndex\n    end\n \
    \ end\n  return minimum + indexMin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_d9fyxv_.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_d9fyxv_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp_d9fyxv_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal minSum = math.inf\n\tfor _, num in ipairs(nums) do\n\t\tminSum = math.min(minSum,\
    \ num + minSubArraySum(nums))\n\tend\n\treturn minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprgh9ris.lua:8:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpprgh9ris.lua:8: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmpprgh9ris.lua:9: in upvalue 'minSubArraySum'\n\t/tmp/tmpprgh9ris.lua:9:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmpprgh9ris.lua:9: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmpprgh9ris.lua:9: in upvalue 'minSubArraySum'\n\t/tmp/tmpprgh9ris.lua:9:\
    \ in upvalue 'minSubArraySum'\n\t/tmp/tmpprgh9ris.lua:9: in upvalue 'minSubArraySum'\n\
    \t/tmp/tmpprgh9ris.lua:9: in upvalue 'minSubArraySum'\n\t/tmp/tmpprgh9ris.lua:9:\
    \ in upvalue 'minSubArraySum'\n\t...\n\t/tmp/tmpprgh9ris.lua:9: in local 'candidate'\n\
    \t/tmp/tmpprgh9ris.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.060\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if not nums then\n        return 0\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptmnykhxh.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums == 1 then\n    return nums[1]\n  end\n  -- Find minimum\
    \ sum from rest\n  return minSubArraySum(nums[#nums] .. nums[#nums-1])\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdsd_j3i.lua:12:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpwdsd_j3i.lua:12:\
    \ in function </tmp/tmpwdsd_j3i.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpwdsd_j3i.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = 0\n    for i = 1,#nums do\n        sum = sum + nums[i]\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckvk_wv6.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpckvk_wv6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzq1v4rwz.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \t-- Return minimum value of any non-empty sub-array in nums.\n\t-- If no sub-array\
    \ is empty, return 0.\n\tlocal maxSum = 0\n\tfor _, i in pairs(nums) do\n\t\t\
    if maxSum < i then\n\t\t\tmaxSum = i\n\t\tend\n\tend\n\treturn maxSum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bqdpifo.lua:21:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmp0bqdpifo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal i, min_sum, min_idx, num_sum = 1, 0, 0, 0\n\tfor i = 1, #nums do\n\t\t\
    local idx = 1\n\t\tnum_sum = num_sum + nums[i]\n\t\tif num_sum > min_sum then\n\
    \t\t\tmin_sum = num_sum\n\t\t\tmin_idx = idx\n\t\tend\n\tend\n\treturn min_idx\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakhl0b2k.lua:23:\
    \ expected: -6, actual: 0\nstack traceback:\n\t/tmp/tmpakhl0b2k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\n  local startIndex = 1\n  local min\
    \ = nums[startIndex]\n  while startIndex < #nums do\n    local currentSum = sumArray(nums,\
    \ startIndex, #nums)\n    local currentMin = currentSum + min\n    min = currentMin\
    \ < min and currentMin or min\n    startIndex = startIndex + 1\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppl382zs4.lua:13:\
    \ attempt to call a nil value (global 'sumArray')\nstack traceback:\n\t/tmp/tmppl382zs4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmppl382zs4.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal min_sum, min_num = 0, nums[1]\n\tfor i = 2, #nums do\n\t\tlocal sum =\
    \ min_num + nums[i]\n\t\tif min_num < sum then\n\t\t\tmin_num = sum\n\t\tend\n\
    \tend\n\treturn min_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4w3kvt7.lua:20:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpl4w3kvt7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums < 1 then return nil end\n  if #nums == 1 then return nums[1] end\n\
    \  local min = nums[1]\n  for i = 2, #nums do\n    min = min(min, nums[i] - min)\n\
    \  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqrfh2rvj.lua:11:\
    \ attempt to call a number value (local 'min')\nstack traceback:\n\t/tmp/tmpqrfh2rvj.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpqrfh2rvj.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if #nums == 0 then\n        return 0\n    end\n    local min = 0\n    local\
    \ min = nums[1]\n    local i = 2\n    while i <= #nums do\n        if min > nums[i]\
    \ then\n            min = nums[i]\n        else\n            if nums[i] - min\
    \ > 0 then\n                min = nums[i]\n            end\n        end\n    \
    \    i = i + 1\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_zk1o_f.lua:29:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmps_zk1o_f.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4httpff.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpe4httpff.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case\n  if #nums < 1 then return 0 end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc1zqm98b.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal min_value = math.pow(2, math.floor(math.log(nums, 2) + 1))\n\tlocal min_sum\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr7e7g3n7.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case:\n  -- If the input array is empty, return the empty sum.\n  if\
    \ #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi84xtpmc.lua:30: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  assert(type(nums) == 'table')\n  local minSum, minIdx = 0, 1\n  for i = 1,\
    \ #nums do\n    minSum = math.min(minSum, nums[i])\n    local idx = i - 1\n  \
    \  while idx > 0 and nums[idx] > nums[idx] then\n      minSum = math.min(minSum,\
    \ nums[idx] + minSum)\n      idx = idx - 1\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0tr4h_l8.lua:12: 'do' expected near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case: empty array\n  if #nums == 0 then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn3hiaa7v.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = nil\n    for i = 1,#nums do\n        sum = math.max(sum, nums[i]\
    \ + minSubArraySum(nums[(i+1):#nums]))\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4zbx2o55.lua:9: <name> expected near '#'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = 0\n    local minSum = math.inf\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3emxcrf_.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minimum = nil\n    local minimumSum = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp92xg4rci.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  for _, elem in ipairs(nums) do\n    sum = sum + elem\n  end\n\
    \  sum = sum + nums[1]\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    if\
    \ sum < 0 then\n      sum = 0\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe71ddco7.lua:24:\
    \ expected: 1, actual: 34\nstack traceback:\n\t/tmp/tmpe71ddco7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if nums == nil then return nil end\n  local numsSize = #nums\n  local sum =\
    \ 0\n  local subArraySum = 0\n  for i = 1, numsSize do\n    sum = sum + nums[i]\n\
    \    if subArraySum == 0 or sum < subArraySum then\n      subArraySum = sum\n\
    \    end\n  end\n  return subArraySum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76vh_vuf.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp76vh_vuf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  return min_subarray_sum(nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnequ500s.lua:7:\
    \ attempt to call a nil value (global 'min_subarray_sum')\nstack traceback:\n\t\
    /tmp/tmpnequ500s.lua:7: in local 'candidate'\n\t/tmp/tmpnequ500s.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.max( nums[1] , nums[#nums] )\n  for i = 2, #nums do\n    min\
    \ = min + ( nums[i]-min )\n  end\n  return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzq6xlgld.lua:17:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpzq6xlgld.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then return 0 end\n  local s = nums[1]\n  for i = 2, #nums do\n\
    \    s = math.min(s, nums[i] + s)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t0hawq9.lua:18:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp2t0hawq9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   local n = #nums\n   assert(n ~= 0, \"Empty array\")\n   assert(n >= 2, \"\
    Array too short\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfg6j2dle.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local count = 0\n  local n = #nums\n  for i = 1, n do\n  \
    \  local j = i\n    local tmp = nums[i]\n    while j > 0 and tmp < nums[j - 1]\
    \ do\n      sum = sum + tmp\n      count = count + 1\n      j = (j + 1) % n\n\
    \    end\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6a510462.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp6a510462.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp6a510462.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minimum = math.inf\n    local minimumSum = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb51mb9wz.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- base case: when nums is empty, the answer is also empty.\n  if #nums ==\
    \ 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7er_vk7p.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    assert(#nums > 0)\n    local minSum, minIndex = 0, 1\n    for i = 2, #nums\
    \ do\n        local temp = minSum\n        minSum = minSum + nums[minIndex]\n\
    \        if temp > minSum then\n            minIndex = minIndex + 1\n        end\n\
    \    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdle44uw.lua:22:\
    \ expected: 1, actual: 10\nstack traceback:\n\t/tmp/tmpjdle44uw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = -1\n  local minSumIndex = 0\n  for i = 0, #nums do\n    -- Check\
    \ that the current sub-array sum is larger than the current\n    -- minimum sum.\n\
    \    if minSum == -1 then\n      minSum = nums[i]\n      minSumIndex = i\n   \
    \ else\n      if nums[i] + minSum > 0 then\n        minSum = nums[i] + minSum\n\
    \        minSumIndex = i\n      end\n    end\n  end\n  return minSum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68awtg21.lua:16:\
    \ attempt to perform arithmetic on a nil value (local 'minSum')\nstack traceback:\n\
    \t/tmp/tmp68awtg21.lua:16: in local 'candidate'\n\t/tmp/tmp68awtg21.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 1 then\n    return nums[1]\n  end\n  local min = math.min(nums)\n\
    \  local subArraySum = minSubArraySum(nums[#nums])\n  return min + subArraySum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyrqjnd3j.lua:7:\
    \ attempt to get length of a number value (local 'nums')\nstack traceback:\n\t\
    /tmp/tmpyrqjnd3j.lua:7: in upvalue 'minSubArraySum'\n\t/tmp/tmpyrqjnd3j.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpyrqjnd3j.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   -- Base cases\n   if #nums == 0 then return 0 end\n   if #nums == 1 then return\
    \ nums[1] end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3jyks0f4.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- If the list is empty, return the minimum value possible\n  if #nums == 0\
    \ then\n    return math.min(nums)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy0zsow5n.lua:10: 'end' expected (to close 'if' at line 8)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local bestSum = nums[1]\n  for i = 2, #nums do\n    local currentSum = bestSum\
    \ + nums[i]\n    if currentSum > bestSum then\n      bestSum = currentSum\n  \
    \  end\n  end\n  return bestSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsga4sh8a.lua:20:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpsga4sh8a.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then return 0 end\n  if #nums == 1 then return nums[1] end\n\
    \  if nums[1] < 0 then nums[1] = -nums[1] end\n  local low = 1, high = #nums\n\
    \  local middle = (low + high) / 2\n  local sum = 0\n  -- Find the right interval\
    \ and sum the numbers in that subarray\n  while low <= high and nums[low] <= middle\
    \ do\n    sum = sum + nums[low]\n    low = low + 1\n  end\n  -- Find the right\
    \ interval and sum the numbers in that subarray\n  while low <= high and nums[high]\
    \ >= middle do\n    sum = sum + nums[high]\n    high = high - 1\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpperjqh0z.lua:10: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.inf\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq0g8emix.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal result = math.max(nums[1] + nums[2], nums[1] * 2 + nums[2] * 2)\n\tlocal\
    \ len = #nums\n\tfor i = 1, len do\n\t\tresult = math.min(result, nums[i] + nums[len\
    \ + i])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf33as9im.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpf33as9im.lua:10: in local 'candidate'\n\t/tmp/tmpf33as9im.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local function minSubArraySumHelper(subArrayStart, subArrayEnd)\n    if subArrayStart\
    \ > subArrayEnd then\n      return 0\n    end\n    local minSum = math.inf\n \
    \   for subArray = subArrayStart, subArrayEnd do\n      local currentSum = subArray[subArrayEnd]\
    \ - subArray[subArrayStart - 1] + minSum\n      if currentSum < minSum then\n\
    \        minSum = currentSum\n      end\n    end\n    return minSum\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp88oznfre.lua:38: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minimum = #nums and math.min(nums) or 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzbee_zzv.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case: 0 or 1 element\n  if #nums == 0 then\n    return 0\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1397h79n.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local lastSum = 0\n  for i=1,#nums do\n    sum = sum + nums[i]\n\
    \    if lastSum < sum then\n      lastSum = sum\n    end\n  end\n  return lastSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kkllcyw.lua:21:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp5kkllcyw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minimum = math.inf\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6s4k4jb2.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case\n  if #nums == 0 then\n    return 0\n  end\n  -- Reverse the array\n\
    \  local reversed = {}\n  for i = #nums, 1, -1 do\n    table.insert(reversed,\
    \ nums[i])\n  end\n  -- Get the sum\n  local sum = 0\n  for i = #nums, 1, -1 do\n\
    \    sum = sum + reversed[i]\n  end\n  -- Get the sub array with the minimum sum\n\
    \  local min_sub_array = {}\n  local cur_sum = 0\n  local cur_num_i = 0\n  --\
    \ Traverse the array and get the minimum sum\n  for i = #nums, 1, -1 do\n    if\
    \ cur_sum > sum - nums[i] then\n      table.insert(min_sub_array, nums[i])\n \
    \     cur_sum = sum - nums[i]\n      cur_num_i = i\n    end\n  end\n  -- Return\
    \ the minimum sum\n  return cur_sum + minSubArraySum(min_sub_array)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7v3swu_.lua:40:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpq7v3swu_.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal total = 0\n\tfor i = 1,#nums do\n\t\ttotal = total + nums[i]\n\tend\n\t\
    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lfpz3pt.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp2lfpz3pt.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minElement = nums[1]\n    local maxElement = nums[#nums]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpydsr9tbq.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base case 1\n  if #nums == 0 then return 0 end\n  -- Base case 2\n  if #nums\
    \ == 1 then return nums[1] end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5i2x0xx_.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   local minSum = 0 -- The smallest sum we have\n   local firstNonEmpty = 0 --\
    \ The first index where something isn't an empty sub-array\n   for i = 1, #nums\
    \ do\n      if nums[i] ~= nil then\n         local nonEmpty = i + 1 -- The index\
    \ of the next number where something isn't an empty sub-array\n         local\
    \ sum = nums[i] + nums[nonEmpty] -- The sum of the current number and the next\
    \ number\n         if minSum > sum then\n            minSum = sum -- If the sum\
    \ is less than the smallest sum, we replace it\n            firstNonEmpty = nonEmpty\
    \ -- If the sum is less than the smallest sum, we replace it\n         end\n \
    \     end\n   end\n   return minSum + nums[firstNonEmpty] -- Add the first non-empty\
    \ sub-array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4amke47h.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp4amke47h.lua:12: in local 'candidate'\n\t/tmp/tmp4amke47h.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = 1\n  local max_sum = -1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp23d39mh.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   local min = math.inf\n   local index = 0\n   local total = 0\n   for i = 1,\
    \ #nums do\n      if total < min then\n         index = i\n         min = total\n\
    \      elseif total > min then\n         total = total + nums[i]\n      else\n\
    \         total = nums[i]\n      end\n   end\n   return nums[index]\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp41q5ozlo.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp41q5ozlo.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp41q5ozlo.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  for i=1,#nums do\n    sum = sum + nums[i]\n  end\n  local\
    \ subArrSum = 0\n  local posStart = 0\n  local posEnd = 0\n  local posEndSubArr\
    \ = 0\n  for i=1,#nums do\n    posEnd = posEnd + 1\n    subArrSum = subArrSum\
    \ + nums[i]\n    if subArrSum < sum then\n      posEndSubArr = posEnd\n      sum\
    \ = subArrSum\n    end\n  end\n  return sum - subArrSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2pd9iu_.lua:29:\
    \ expected: 1, actual: -14\nstack traceback:\n\t/tmp/tmpm2pd9iu_.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   assert(type(nums) == 'table')\n   local minimumSum = -math.MAX_VALUE\n   for\
    \ i = 1, #nums do\n      if nums[i] then\n         minimumSum = minimumSum + nums[i]\n\
    \      end\n   end\n   return minimumSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yzi7rj9.lua:8:\
    \ attempt to perform arithmetic on a nil value (field 'MAX_VALUE')\nstack traceback:\n\
    \t/tmp/tmp9yzi7rj9.lua:8: in local 'candidate'\n\t/tmp/tmp9yzi7rj9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    if sum <\
    \ 0 then\n      break\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp71wxh8m.lua:20:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpp71wxh8m.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  return math.min(\n    math.min(\n      math.min(\n        math.min(\n     \
    \     math.min(\n            math.min(\n              math.min(\n            \
    \    math.min(\n                  math.min(\n                    math.min(\n \
    \                     math.min(\n                        math.min(\n         \
    \                 math.min(\n                            math.min(\n         \
    \                     math.min(\n                                math.min(\n \
    \                                 math.min(\n                                \
    \    math.min(\n                                      math.min(\n            \
    \                            math.min(\n                                     \
    \     math.min(\n                                            math.min(\n     \
    \                                         math.min(\n                        \
    \                        math.min(\n                                         \
    \         math.min(\n                                                    math.min(\n\
    \                                                      math.min(\n           \
    \                                             math.min(\n                    \
    \                                      math.min(\n                           \
    \                                 math.min(\n                                \
    \                              math.min(\n                                   \
    \                             math.min(\n                                    \
    \                              math.min(\n                                   \
    \                                 math.min(\n                                \
    \                                      math.min(\n                           \
    \                                             math.min(\n                    \
    \                                      math.min(\n                           \
    \                                 math.min(\n                                \
    \                            math.min(\n                                     \
    \                       math.min(\n                                          \
    \                    math.min(\n                                             \
    \                   math.min(\n                                              \
    \                    math.min(\n                                             \
    \                       math.min(\n                                          \
    \                            math.min(\n                                     \
    \                               math.min(\n                                  \
    \                                      math.min(\n                           \
    \                                               math.min(\n                  \
    \                                                          math.min(\n       \
    \                                                                       math.min(\n\
    \                                                                            \
    \    math.min(\n                                                             \
    \                     math.min(\n                                            \
    \                                        math.min(\n                         \
    \                                                             math.min(\n    \
    \                                                                            \
    \        math.min(\n                                                         \
    \                                 math.min(\n                                \
    \                                                            math.min(\n     \
    \                                                                            \
    \             math.min(\n                                                    \
    \                                            math.min(\n                     \
    \                                                                            \
    \ math.min(\n                                                                \
    \                                    math.min(\n                             \
    \                                                                         math.min(\n\
    \                                                                            \
    \                            math.min(\n                                     \
    \                                                                     math.min(\n\
    \                                                                            \
    \                                math.min(\n                                 \
    \                                                                            \
    \ math.min(\n                                                                \
    \                                                math.min(\n                 \
    \                                                                            \
    \                     math.min(\n                                            \
    \                                                                        math.min(\n\
    \                                                                            \
    \                                          math.min(\n                       \
    \                                                                            \
    \                     math.min(\n                                            \
    \                                                                            \
    \  math.min(\n                                                               \
    \                                                             math.min(\n    \
    \                                                                            \
    \                                              math.min(\n                   \
    \                                                                            \
    \                                 math.min(\n                                \
    \                                                                            \
    \                      math.min(\n                                           \
    \                                                                            \
    \             math.min(\n                                                    \
    \                                                                            \
    \    math.min(\n                                                             \
    \                                                                       math.min(\n\
    \                                                                            \
    \                                                        math.min(\n         \
    \                                                                            \
    \                                                 math.min(\n                \
    \                                                                            \
    \                                        math.min(\n                         \
    \                                                                            \
    \                                 math.min(\n                                \
    \                                                                            \
    \                        math.min(\n                                         \
    \                                                                            \
    \                 math.min(\n                                                \
    \                                                                            \
    \        math.min(\n                                                         \
    \                                                                            \
    \ math.min(\n                                                                \
    \                                                                    math.min(\n\
    \                                                                            \
    \                                                          math.min(\n       \
    \                                                                            \
    \                                                 math.min(\n                \
    \                                                                            \
    \                                        math.min(\n                         \
    \                                                                            \
    \                               math.min(\n                                  \
    \                                                                            \
    \                        math.min(\n                                         \
    \                                                                            \
    \               math.min(\n                                                  \
    \                                                                            \
    \        math.min(\n                                                         \
    \                                                                            \
    \ math.min(\n                                                                \
    \                                                                      math.min(\n\
    \                                                                            \
    \                                                          math.min(\n       \
    \                                                                            \
    \                                                   math.min(\n              \
    \                                                                            \
    \                                            math.min(\n                     \
    \                                                                            \
    \                                     math.min(\n                            \
    \                                                                            \
    \                            math.min(\n                                     \
    \                                                                            \
    \                   math.min(\n                                              \
    \                                                                            \
    \          math.min(\n                                                       \
    \                                                                            \
    \ math.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpni1e1zlf.lua:112: ')' expected (to close '(' at line 110)\
    \ near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0 -- initialize sum\n  local min = 1 -- initialize min\n  local\
    \ numsSize = #nums -- initialize numsSize\n  -- Iterate over the array and find\
    \ the min sum\n  for i = 1, numsSize do\n    sum = sum + nums[i]\n    if sum <\
    \ min then\n      min = sum\n    end\n  end\n  return min -- return the min sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjijeobb.lua:29:\
    \ expected: -6, actual: 1\nstack traceback:\n\t/tmp/tmpxjijeobb.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then return 0 end\n  local sum = 0\n  for _, v in ipairs(nums)\
    \ do\n    sum = sum + v\n  end\n  if sum < 0 then return 0 end\n  for _, v in\
    \ ipairs(nums) do\n    sum = sum + v\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapcy24v6.lua:22:\
    \ expected: 1, actual: 32\nstack traceback:\n\t/tmp/tmpapcy24v6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  return #nums > 0 and #nums ~= #nums[1] and #nums - 1 or\n    select(1, nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbrqqw6q4.lua:7:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpbrqqw6q4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbrqqw6q4.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then return 0 end\n  if #nums == 1 then return nums[1] end\n\
    \  local best,i=0,1\n  for i=1,#nums do\n    local subsum = best\n    for j=1,i\
    \ do\n      subsum = subsum + nums[j]\n    end\n    if subsum < best then\n  \
    \    best = subsum\n    end\n  end\n  return best\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzb2hd80.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdzb2hd80.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   assert(#nums > 0, 'Sub-arrays must be non-empty.')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9gnqkpm5.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0a3je4ut.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case: If the nums array is empty, return 0\n  if #nums == 0 then\n\
    \    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1m6i3ed9.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if nums == nil or #nums == 0 then\n        return 0\n    end\n    local minsum\
    \ = math.inf\n    local minsumindex = nil\n    for i = 1, #nums do\n        local\
    \ sum = 0\n        for j = 1, i do\n            sum = sum + nums[j]\n        end\n\
    \        if sum < minsum then\n            minsum = sum\n            minsumindex\
    \ = i\n        end\n    end\n    return minsum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmttmpijf.lua:17:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmttmpijf.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpmttmpijf.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    -- Base case: If the given array is empty or all its elements are negative,\n\
    \    -- then return 0.\n    if #nums == 0 then\n        return 0\n    end\n  \
    \  -- Recursive case: If the given array has one element, return it.\n    if #nums\
    \ == 1 then\n        return nums[1]\n    end\n    -- Recursive case: Find out\
    \ the minimum sum of two elements in the given array.\n    -- The base case is\
    \ the array has only one element, then return the element as is.\n    if nums[1]\
    \ == nil then\n        return nums[1]\n    end\n    -- Find out the minimum sum\
    \ of three elements in the given array.\n    local min_sum = nums[1] + minSubArraySum(nums[2:end])\n\
    \    -- Compare with the element at the second index of the given array,\n   \
    \ -- the third index is the rest of the elements.\n    if nums[2] ~= nil then\n\
    \        min_sum = minSubArraySum(nums, min_sum)\n    end\n    -- Compare with\
    \ the element at the third index of the given array,\n    -- the second index\
    \ is the rest of the elements.\n    if nums[3] ~= nil then\n        min_sum =\
    \ minSubArraySum(nums, min_sum)\n    end\n    return min_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3qicbg11.lua:22: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.nan()\n  local lastSum = math.nan()\n  local lastNum = nil\n\
    \  for i, num in ipairs(nums) do\n    lastSum = lastSum + num\n    if lastNum\
    \ ~= nil and lastSum > 0 then\n      min = math.min(min, lastSum + lastNum)\n\
    \    end\n    lastNum = num\n  end\n  return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4ohdi13.lua:7:\
    \ attempt to call a nil value (field 'nan')\nstack traceback:\n\t/tmp/tmpo4ohdi13.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpo4ohdi13.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then return 0 end\n  local min, max = nums[0], nums[#nums]\n\
    \  for i = 1, #nums do\n    min, max = min > nums[i] and min or nums[i], max <\
    \ nums[i] and max or nums[i]\n  end\n  return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgp4k_vm.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfgp4k_vm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfgp4k_vm.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqbuudd22.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   local min = nil\n   local sum = 0\n   for i = 1, #nums do\n      if nums[i]\
    \ then\n         local j = i\n         while j > 1 do\n            sum = sum +\
    \ nums[j] - nums[j - 1]\n            j = j - 1\n         end\n      else\n   \
    \      sum = 0\n      end\n      if min == nil then\n         min = sum\n    \
    \  elseif min > sum then\n         min = sum\n      end\n   end\n   return min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe4i6tao.lua:31:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfe4i6tao.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \t-- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4izs1bm.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpa4izs1bm.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nil\n  for i, v in pairs(nums) do\n    if min == nil or v < min\
    \ then\n      min = v\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5li04vyq.lua:20:\
    \ expected: -6, actual: -3\nstack traceback:\n\t/tmp/tmp5li04vyq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minimum = math.inf\n    for i = 1, #nums do\n        local val = minimum\n\
    \        for j = 1, #nums do\n            if j > i then\n                if nums[j]\
    \ < val then\n                    val = nums[j]\n                end\n       \
    \     end\n        end\n        if val == math.inf then\n            return math.inf\n\
    \        end\n        minimum = minimum + val\n    end\n    return minimum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqjhyxjm_.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqjhyxjm_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpqjhyxjm_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min, sum = 0, 0\n    for _, x in ipairs(nums) do\n        if x >= sum\
    \ then sum = sum + x else min = x\n        end\n    end\n    return sum + min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcznkiqvw.lua:18:\
    \ expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpcznkiqvw.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal count = 0\n\tlocal maxsum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7c8s2s8u.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ay9dceb.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp9ay9dceb.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   assert(#nums >= 1)\n   local startIndex = nums[1]\n   local sum = nums[1]\n\
    \   for i = 2, #nums do\n      local currentSum = sum + nums[i]\n      if currentSum\
    \ < sum then\n         sum = currentSum\n         startIndex = i\n      end\n\
    \   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi61d_45.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpmi61d_45.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nil\n  for _, num in ipairs(nums) do\n    if min == nil then min\
    \ = num else min = min + num end\n  end\n  return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdztyjw_.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmppdztyjw_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local ans, sum, i, min, l, j\n  for i = 0, #nums - 1 do\n    sum = sum + nums[i]\n\
    \    if sum < 0 then\n      break\n    end\n  end\n  ans = sum\n  min = nums[i]\n\
    \  l = i\n  j = i\n  while j > 0 and j < #nums do\n    sum = sum + nums[j]\n \
    \   if sum < min then\n      ans = min\n      min = sum\n      l = j\n    elseif\
    \ sum > 0 then\n      break\n    end\n    j = j + 1\n  end\n  return ans + min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptcih46j1.lua:9:\
    \ attempt to perform arithmetic on a nil value (local 'sum')\nstack traceback:\n\
    \t/tmp/tmptcih46j1.lua:9: in local 'candidate'\n\t/tmp/tmptcih46j1.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local smallSum = 0\n  local smallNum = 0\n  local smallSumIdx\
    \ = 1\n  for i, v in pairs(nums) do\n    sum = sum + v\n    if smallSum == 0 or\
    \ smallSum < sum then\n      smallSum = sum\n      smallNum = i\n      smallSumIdx\
    \ = i\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpptv834qs.lua:37: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \   -- base case\n   if #nums == 0 then\n      return 0\n   end\n   \n   -- first\
    \ element of array\n   local min = nums[1]\n   \n   -- recursive call\n   local\
    \ subSum = minSubArraySum(nums[2:end])\n   \n   -- update minimum sum of remaining\
    \ elements\n   if subSum < min then\n      min = subSum\n   end\n   \n   return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpano7j6vr.lua:16: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local total = 0\n  local min = nil\n  for _, value in ipairs(nums) do\n   \
    \ if min == nil then\n      min = value\n    else\n      min = math.min(min, value)\n\
    \    end\n    total = total + value\n  end\n  if total < min then\n    return\
    \ nil\n  else\n    return total\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxish0c1_.lua:27:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpxish0c1_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfi3jnrm.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpcfi3jnrm.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8vc1339q.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local n = #nums\n    if n < 1 then\n        return nil\n    end\n    local\
    \ s = nums[1]\n    for i = 2, n do\n        s = math.min(s, nums[i])\n    end\n\
    \    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zbq2z1v.lua:22:\
    \ expected: -6, actual: -3\nstack traceback:\n\t/tmp/tmp7zbq2z1v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case\n  if #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwgf4gcle.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    -- If the list is empty return 0\n    if #nums == 0 then\n        return\
    \ 0\n    end\n    -- The sum of the first number\n    local sum1 = nums[1]\n \
    \   -- The index of the minimum sum\n    local minIndex = 1\n    -- A flag to\
    \ signify if the list is sorted\n    local sorted = false\n    -- Loop through\
    \ all the numbers, summing them and checking if they \n    -- are less than the\
    \ current minimum sum\n    for i = 2, #nums do\n        -- Add the current number\
    \ to the current sum\n        sum1 = sum1 + nums[i]\n        -- Check if the list\
    \ has been sorted\n        if sum1 < sorted then\n            -- If it hasn't\
    \ been sorted, set it as the minimum sum and index\n            minIndex = i\n\
    \            sorted = true\n        else\n            -- If the list has been\
    \ sorted, break out of the loop\n            break\n        end\n    end\n   \
    \ -- Return the minimum sum\n    return sum1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu7b4inw9.lua:23:\
    \ attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmpu7b4inw9.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpu7b4inw9.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sums = { }\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6y0i6ee_.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \t-- Base Case\n\tif not nums then\n\t\treturn nil\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwi_05_u2.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local ans, subArrayLen, i, currentSum, temp\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4lg1sn5a.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minimum = nums[1]\n    for i = 2, #nums do\n        minimum = minimum\
    \ + nums[i]\n    end\n    return minimum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptf35q76m.lua:17:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmptf35q76m.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- Base Case\n  if #nums == 0 then return 0 end\n  -- Return minimum from current\
    \ index\n  -- with current sum.\n  return math.min(\n    minSubArraySum(nums[#nums-1]),\n\
    \    nums[#nums-1] + minSubArraySum(nums[#nums-1]),\n  )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq637sy35.lua:14: unexpected symbol near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  return function(x)\n    local minSum, currSum = x\n    for i = 1, #nums do\n\
    \      currSum = currSum + nums[i]\n      if currSum < minSum then\n        minSum\
    \ = currSum\n      end\n    end\n    return minSum\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6693gz7r.lua:22:\
    \ expected: 1, actual: function: 0x23f3320\nstack traceback:\n\t/tmp/tmp6693gz7r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal minSum = nums[1]\n\tfor i = 2, #nums do\n\t\tlocal current = nums[i]\n\
    \t\tfor j = i - 1, 1, -1 do\n\t\t\tlocal left = j - 1\n\t\t\tlocal right = j\n\
    \t\t\tlocal currentLeft = current - nums[left]\n\t\t\tlocal currentRight = current\
    \ - nums[right]\n\t\t\tif currentLeft > currentRight then\n\t\t\t\tlocal temp\
    \ = currentLeft\n\t\t\t\tcurrentLeft = currentRight\n\t\t\t\tcurrentRight = temp\n\
    \t\t\tend\n\t\t\tlocal sum = currentLeft + currentRight\n\t\t\tif sum < minSum\
    \ and not isInRange(sum, minSum, #nums) then\n\t\t\t\tminSum = sum\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp57x8qhwp.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp57x8qhwp.lua:13: in local 'candidate'\n\t/tmp/tmp57x8qhwp.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  assert(#nums > 0)\n  local sum = 0\n  local min_sum = nil\n  for idx = 1, #nums\
    \ do\n    sum = sum + nums[idx]\n    if sum < 0 then\n      sum = sum + 0\n  \
    \  end\n    if min_sum == nil or sum < min_sum then\n      min_sum = sum\n   \
    \ end\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpff8h98tp.lua:25:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpff8h98tp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.min\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6el6jfu8.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- If empty array, return 0\n  if not nums then return 0 end\n  -- If only\
    \ one element, then 0\n  if #nums == 1 then return 0 end\n  -- Find the first\
    \ negative number\n  local n = #nums\n  local sum = 0\n  for i = 1, n do\n   \
    \ -- If not a negative number, then break\n    if nums[i] < 0 then break end\n\
    \    -- Add the negative number to sum\n    sum = sum + nums[i]\n  end\n  -- Start\
    \ going through the array from the back and add the positive numbers to\n  --\
    \ the sum\n  for i = n-1, 0, -1 do\n    -- Add all numbers larger than the current\
    \ sum\n    sum = sum + nums[i]\n    -- If the sum is negative, then remove it\
    \ from the array\n    if sum < 0 then\n      sum = -sum\n      nums[i] = -nums[i]\n\
    \    end\n  end\n  -- Return the sum\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_s1413s.lua:24:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpi_s1413s.lua:24: in local 'candidate'\n\t/tmp/tmpi_s1413s.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = nums[1]\n    for i = 2, #nums do\n        if minSum > nums[i]\
    \ then\n            minSum = minSum + nums[i]\n        end\n    end\n    return\
    \ minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zz8atn4.lua:19:\
    \ expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmp6zz8atn4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
