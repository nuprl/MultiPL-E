name: HumanEval_45_triangle_area
language: lua
results:
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_e73mkub.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\nstack traceback:\n\t/tmp/tmp_e73mkub.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a <= h\
    \ then\n    local s = 2 * math.sin(math.rad(a))\n    local c = math.cos(math.rad(a))\n\
    \    return s * (h - a) * c / 2 + a * h / (2 * math.pi)\n  end\n  return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0frqc63k.lua:16:\
    \ expected: 7.5, actual: -1\nstack traceback:\n\t/tmp/tmp0frqc63k.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n   --local\
    \ t = h / a\n   --return math.sin(math.rad(a) / 2) * t\n   --return h * t\n  \
    \ return math.sin(math.rad(a)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82284wbt.lua:14:\
    \ expected: 7.5, actual: 0.043577871373829\nstack traceback:\n\t/tmp/tmp82284wbt.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a\
    \ * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local t =\
    \ math.tan(math.pi * a / h)\n  return 1 / 2 * t * t + 1 / 2 * t * (t - 1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0m_5x0zi.lua:12:\
    \ expected: 7.5, actual: 3.8660254037844\nstack traceback:\n\t/tmp/tmp0m_5x0zi.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (\n        (h*h)/(4*a*a) - (h*h*a)/(4*a*a)\n    )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgo41coi.lua:13:\
    \ expected: 7.5, actual: -0.36\nstack traceback:\n\t/tmp/tmpjgo41coi.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n   if a <=\
    \ h then\n      return 0\n   elseif h <= a then\n      return 0.5 * triangle_area(h,\
    \ a - h)\n   else\n      return 0.5 * triangle_area(a - h, h)\n   end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg5prpzh.lua:17:\
    \ expected: 7.5, actual: 0\nstack traceback:\n\t/tmp/tmpxg5prpzh.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((0.5 + h) / 2.0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3ba36z3.lua:11:\
    \ expected: 7.5, actual: 8.75\nstack traceback:\n\t/tmp/tmpa3ba36z3.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    if a ==\
    \ 0 then\n        return 0\n    elseif h == 0 then\n        return 0.5 * (math.sqrt(1\
    \ + 4 * a + 4 * a * a + 4 * a * a / 3) * a * a - math.sqrt(1 + 4 * a + 4 * a *\
    \ a + 4 * a * a / 3) * a * a)\n    elseif h == 1 then\n        return 0.5 * math.sqrt(1\
    \ + 4 * a + 4 * a * a + 4 * a * a / 3)\n    elseif h == 2 then\n        return\
    \ 0.5 * math.sqrt(1 + 4 * a * a)\n    elseif h == 3 then\n        return 0.5 *\
    \ math.sqrt(1 + 4 * a * a * a + 4 * a * a / 3)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcsbxof8.lua:21:\
    \ expected: 7.5, actual: 11.557825631724\nstack traceback:\n\t/tmp/tmplcsbxof8.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (math.sqrt(a)\
    \ * math.sqrt(h)) * 0.5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3_ei20n.lua:11:\
    \ expected: 7.5, actual: 1.9364916731037\nstack traceback:\n\t/tmp/tmpy3_ei20n.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * (a + h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdrxfqsb.lua:11:\
    \ expected: 7.5, actual: 4.4721359549996\nstack traceback:\n\t/tmp/tmpcdrxfqsb.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local s =\
    \ 0.5*a*h\n  if h <= 1 then\n    return s\n  end\n  return s + h*(a+h)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxbw53ad.lua:15:\
    \ expected: 7.5, actual: 31.5\nstack traceback:\n\t/tmp/tmpxxbw53ad.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(math.pow(a,\
    \ 2) + math.pow(h, 2) - math.pow(a * h, 2))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pjnotvu.lua:11:\
    \ expected: 7.5, actual: #NaN\nstack traceback:\n\t/tmp/tmp_pjnotvu.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a\
    \ + h) - math.sqrt(math.pow(a, 2) + math.pow((h - a), 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzthdglqw.lua:11:\
    \ expected: 7.5, actual: 2.6148351928655\nstack traceback:\n\t/tmp/tmpzthdglqw.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local s\
    \ = a + h\n    return (s - a) * 0.5\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5m2hgy1k.lua:12:\
    \ expected: 7.5, actual: 1.5\nstack traceback:\n\t/tmp/tmp5m2hgy1k.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * math.sqrt(3/2*math.pi) * math.pow(h, -3)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdj1_ag1c.lua:11:\
    \ expected: 7.5, actual: 0.40200069697682\nstack traceback:\n\t/tmp/tmpdj1_ag1c.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local b =\
    \ math.pow(a, 2)\n  local c = math.pow(a, 3)\n  local d = math.pow(a, 4)\n  return\
    \ math.sqrt(b + c + d)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2apswjr.lua:14:\
    \ expected: 7.5, actual: 27.83882181415\nstack traceback:\n\t/tmp/tmpa2apswjr.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (math.abs(a\
    \ * (h * h + h * a - a * h)) / math.pow(a, 2)) / 2.0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojy4b8nm.lua:11:\
    \ expected: 7.5, actual: 0.9\nstack traceback:\n\t/tmp/tmpojy4b8nm.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a*(a+h+h)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1w66xbt4.lua:11:\
    \ expected: 7.5, actual: 27.5\nstack traceback:\n\t/tmp/tmp1w66xbt4.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a\
    \ * h * h) / 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qg6txox.lua:11:\
    \ expected: 7.5, actual: 15\nstack traceback:\n\t/tmp/tmp1qg6txox.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h * h / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8ctawo4.lua:12:\
    \ expected: 2, actual: 1.3333333333333\nstack traceback:\n\t/tmp/tmpo8ctawo4.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(h\
    \ * h + a * a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hflb50n.lua:11:\
    \ expected: 7.5, actual: 5.8309518948453\nstack traceback:\n\t/tmp/tmp8hflb50n.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n   return a^2\
    \ / h * h\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjv628z3.lua:11:\
    \ expected: 7.5, actual: 25\nstack traceback:\n\t/tmp/tmpdjv628z3.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\ta = a or\
    \ 1\n\th = h or 1\n\treturn a * h / (math.pow(math.pow(a + h, 2), 0.5))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg0we_01.lua:13:\
    \ expected: 7.5, actual: 1.875\nstack traceback:\n\t/tmp/tmpeg0we_01.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn 0.5\
    \ * (h * h + a * a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf5ypwr0.lua:11:\
    \ expected: 7.5, actual: 17\nstack traceback:\n\t/tmp/tmplf5ypwr0.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.sqrt(a * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16qdlgr6.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\nstack traceback:\n\t/tmp/tmp16qdlgr6.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * ((1 - ((h / a) ** 2)) * ((1 + ((h / a)) / 2)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6_qc79i2.lua:5: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == 0\
    \ then\n    return h\n  elseif h <= 0 then\n    return 0\n  elseif h > a then\n\
    \    return 0\n  elseif h == a then\n    return a / 2\n  else\n    return (3 *\
    \ a) / math.pow(a, 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46uo8kzf.lua:21:\
    \ expected: 7.5, actual: 0.6\nstack traceback:\n\t/tmp/tmp46uo8kzf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  -- Returns\
    \ area of a triangle with side length a and height h\n  if a == 0 then return\
    \ 0 end\n  if h == 0 then return 0 end\n  local u1 = (1 / a) * h\n  local u2 =\
    \ ((2 * h) / a) * h\n  local u3 = (h / a) * h\n  return u1 * u1 * u3\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmks4xw0h.lua:17:\
    \ expected: 7.5, actual: 0.648\nstack traceback:\n\t/tmp/tmpmks4xw0h.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(math.pow(a,\
    \ 2) * math.pow(h, 2) - math.pow(a * h, 2))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ea1ys8x.lua:11:\
    \ expected: 7.5, actual: 0\nstack traceback:\n\t/tmp/tmp9ea1ys8x.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == 0\
    \ then\n    if h == 0 then\n      return 0\n    else\n      return -1\n    end\n\
    \  elseif h == 0 then\n    return a\n  else\n    return a * triangle_area(a-1,\
    \ h) / h\n  end\nend\n</cell>\n<text>\nExercise 2 - Functions from exercise 1\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe8vnlr_z.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * math.pow(math.sqrt(3), 2) * h / math.pow(math.sin(math.radians(90 - math.rad(a))),\
    \ 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz7kosff2.lua:5:\
    \ attempt to call a nil value (field 'radians')\nstack traceback:\n\t/tmp/tmpz7kosff2.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpz7kosff2.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\tlocal s =\
    \ 0.5 * (1 + math.sqrt(1 + 4 * h))\n\tlocal area = math.acos(1 / s)\n\treturn\
    \ area\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vz2zyia.lua:13:\
    \ expected: 7.5, actual: 1.1215813304356\nstack traceback:\n\t/tmp/tmp3vz2zyia.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a <= h\
    \ then\n    return 0 -- Triangle is flat.\n  elseif h <= 2*a + 1 then\n    return\
    \ a/h\n  else\n    return 2 * (a*(h - a) - h + h*(a*(a*(a+1) - a) - a*(a+1)))\
    \ / h\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6yrs0sr.lua:17:\
    \ expected: 7.5, actual: 1.6666666666667\nstack traceback:\n\t/tmp/tmpo6yrs0sr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.pow(h,\
    \ 2) * ((a * (a ^ 2)) / 6 + math.pow(a / 2, 2) * (math.sqrt(3 * (h + a / 2)) -\
    \ math.sqrt(3 * (h - a / 2))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomaoedd1.lua:11:\
    \ expected: 7.5, actual: 347.09668111461\nstack traceback:\n\t/tmp/tmpomaoedd1.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == 0\
    \ then\n    return 0\n  elseif h == 1 then\n    return a\n  else\n    return 0.5\
    \ * triangle_area(a - (h - 1.0), h - 2.0) / (h - 2.0)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49iee3d4.lua:17:\
    \ expected: 7.5, actual: 1.5\nstack traceback:\n\t/tmp/tmp49iee3d4.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn math.pow((h\
    \ ^ 2 + a) / 2, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfm46rtn.lua:11:\
    \ expected: 7.5, actual: 49\nstack traceback:\n\t/tmp/tmpcfm46rtn.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a <= h\
    \ then return 0 end\n  return ((2 * (h - a) * (h + a + 1) * (h + a + 2)) / (6\
    \ * (h - a) * (h + a + 2))) / pi\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2i79vmbc.lua:6:\
    \ attempt to perform arithmetic on a nil value (global 'pi')\nstack traceback:\n\
    \t/tmp/tmp2i79vmbc.lua:6: in local 'candidate'\n\t/tmp/tmp2i79vmbc.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a^2/(h*h-a^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbxkiemf.lua:11:\
    \ expected: 7.5, actual: -1.5625\nstack traceback:\n\t/tmp/tmprbxkiemf.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local u\
    \ = (h - a + 1) / 2\n    local v = h / 2\n    return u * v\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp93e9o7.lua:13:\
    \ expected: 7.5, actual: -0.75\nstack traceback:\n\t/tmp/tmpnp93e9o7.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn (a^2\
    \ - a*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqfaxhs9.lua:11:\
    \ expected: 7.5, actual: 10\nstack traceback:\n\t/tmp/tmpqqfaxhs9.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.sqrt(math.pow(a, 2) + (2 * h) / math.pow(a, 3))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwpg5di6.lua:11:\
    \ expected: 7.5, actual: 5.0047976982092\nstack traceback:\n\t/tmp/tmptwpg5di6.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ ((h * (b - a)) / 2) * (b - a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprcgjzo1b.lua:5:\
    \ attempt to perform arithmetic on a nil value (global 'b')\nstack traceback:\n\
    \t/tmp/tmprcgjzo1b.lua:5: in local 'candidate'\n\t/tmp/tmprcgjzo1b.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local s\
    \ = 0.5 * a * a\n    if h > 0 then\n        s = s * h\n    end\n    return math.sqrt(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplt009zuz.lua:15:\
    \ expected: 7.5, actual: 6.1237243569579\nstack traceback:\n\t/tmp/tmplt009zuz.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local d\
    \ = math.sqrt((h-a)^2)\n    if d <= h then\n        return h/2\n    else\n   \
    \     return math.sqrt(d*(3-h)*(3-h))/2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27o_lot1.lua:16:\
    \ expected: 7.5, actual: 1.5\nstack traceback:\n\t/tmp/tmp27o_lot1.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (h\
    \ * a) / ((a * 6) + (h * 3))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbfewslo.lua:11:\
    \ expected: 7.5, actual: 0.38461538461538\nstack traceback:\n\t/tmp/tmpdbfewslo.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\tlocal a1\
    \ = math.abs(h - a) / 2\n\tlocal a2 = math.abs(h - a + a) / 3\n\treturn a1 * a1\
    \ + a2 * a2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgaia23ay.lua:13:\
    \ expected: 7.5, actual: 2\nstack traceback:\n\t/tmp/tmpgaia23ay.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (math.tan(math.pi/h)/math.tan(math.pi/a))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbt5nq0vh.lua:11:\
    \ expected: 7.5, actual: 11.919817084376\nstack traceback:\n\t/tmp/tmpbt5nq0vh.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfzy6v0w.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\nstack traceback:\n\t/tmp/tmpdfzy6v0w.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    if a ==\
    \ 0 then return 0 end\n    if h == 0 then return 0 end\n    if h == a then return\
    \ 0.5 * a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7w4tlwc_.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (math.pow((math.sqrt(3) * a + 2), 0.5)) / h\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a4_tgv7.lua:11:\
    \ expected: 7.5, actual: 5.4416740780563\nstack traceback:\n\t/tmp/tmp_a4_tgv7.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (a * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn (a\
    \ * h) / (math.pow(math.fabs(a), 2) * math.pow(math.fabs(h), 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg24cob0n.lua:5:\
    \ attempt to call a nil value (field 'fabs')\nstack traceback:\n\t/tmp/tmpg24cob0n.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpg24cob0n.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  -- Get sides\n\
    \  if a <= h then return 0 end\n  if h < 1 then return 0\n  if a == h then return\
    \ 0.5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp61y9cd_r.lua:8: 'end' expected (to close 'if' at line 7) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(3\
    \ * a * h / math.pi)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwq78but.lua:11:\
    \ expected: 7.5, actual: 3.7846987830302\nstack traceback:\n\t/tmp/tmptwq78but.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a < 1\
    \ or h < 1 then return nil end\n  local m = (h + 1) / 2\n  return a * (1 - math.pow((h\
    \ / 2) / m, 2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewqc2xr5.lua:13:\
    \ expected: 7.5, actual: 2.1875\nstack traceback:\n\t/tmp/tmpewqc2xr5.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (math.sqrt(3) * math.pow(a, 2) * h) / (4 * math.pi)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyfi8bmw.lua:11:\
    \ expected: 7.5, actual: 10.337416789159\nstack traceback:\n\t/tmp/tmpyyfi8bmw.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n   return a\
    \ * (h ** 2) / math.sqrt((a ** 2) * ((h / 2) * (h / 2)) + (a ** 2) * ((h / 2)\
    \ * (h / 2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp58tet1nw.lua:5: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwura3i3q.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\nstack traceback:\n\t/tmp/tmpwura3i3q.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(math.sqrt(a)\
    \ * (h - a + 1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25nqslyi.lua:11:\
    \ expected: 7.5, actual: #NaN\nstack traceback:\n\t/tmp/tmp25nqslyi.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == 0\
    \ then\n    return h\n  elseif h == 0 then\n    return a\n  elseif a == h then\n\
    \    return 0.5 * (a + h)\n  elseif h > a then\n    return h * (a + h) - a * (h\
    \ - h + a)\n  else\n    return a * (h - h + a) * 0.5\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7_eq7kn.lua:21:\
    \ expected: 7.5, actual: 12.5\nstack traceback:\n\t/tmp/tmpq7_eq7kn.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a^2\
    \ * math.sin(2.0*math.pi*a/h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6462j12.lua:11:\
    \ expected: 7.5, actual: -21.650635094611\nstack traceback:\n\t/tmp/tmph6462j12.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * h) / 3.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjl8rthto.lua:11:\
    \ expected: 7.5, actual: 1.2909944487358\nstack traceback:\n\t/tmp/tmpjl8rthto.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn math.sqrt(a\
    \ * a - h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw10aequ.lua:11:\
    \ expected: 7.5, actual: 2\nstack traceback:\n\t/tmp/tmprw10aequ.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a/2\
    \ *math.sin(h*math.pi/3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8okwksb.lua:11:\
    \ expected: 7.5, actual: 3.0616169978684e-16\nstack traceback:\n\t/tmp/tmpv8okwksb.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  -- Calculate\
    \ area of a triangle given its sides and height\n  return a*h/math.abs(a-h)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgk8g0q0.lua:13:\
    \ expected: 2, actual: #Inf\nstack traceback:\n\t/tmp/tmpqgk8g0q0.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * h\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecvo_4zz.lua:11:\
    \ expected: 7.5, actual: 15\nstack traceback:\n\t/tmp/tmpecvo_4zz.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + (h * h))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ydhn7_9.lua:11:\
    \ expected: 7.5, actual: 5.8309518948453\nstack traceback:\n\t/tmp/tmp7ydhn7_9.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local b =\
    \ (math.sqrt(3) * math.sqrt(3) / 2)\n  return a * ((1/12) * b - b) + a * h * h\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp859roxr.lua:12:\
    \ expected: 7.5, actual: 38.125\nstack traceback:\n\t/tmp/tmpp859roxr.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (math.sqrt(a * a + h * a * h)) / 2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgsd44dv.lua:11:\
    \ expected: 7.5, actual: 4.1833001326704\nstack traceback:\n\t/tmp/tmpsgsd44dv.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local s =\
    \ (a * h) / (math.sqrt(3)*math.sqrt(3))\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1l3k9aow.lua:12:\
    \ expected: 7.5, actual: 5.0\nstack traceback:\n\t/tmp/tmp1l3k9aow.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local t =\
    \ 2*a\n  local r = t + a/2\n  if r > h then r = h end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfawl_btj.lua:14:\
    \ expected: 7.5, actual: 3\nstack traceback:\n\t/tmp/tmpfawl_btj.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (math.sqrt(pow(a, 2) * pow(h / 3, 2)) - pow(a * h / 3, 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbo5bhg_e.lua:5:\
    \ attempt to call a nil value (global 'pow')\nstack traceback:\n\t/tmp/tmpbo5bhg_e.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpbo5bhg_e.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local function\
    \ triangle(x1, y1, x2, y2)\n        local s = math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))\n\
    \        return s * s\n    end\n    return triangle(a/2, h/2) + triangle(a/2,\
    \ h - a/2) + triangle(a/2+a, h/2+h/2) + triangle(a/2+a, h - a/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvf8bt5s.lua:6:\
    \ attempt to perform arithmetic on a nil value (local 'x2')\nstack traceback:\n\
    \t/tmp/tmpnvf8bt5s.lua:6: in local 'triangle'\n\t/tmp/tmpnvf8bt5s.lua:9: in local\
    \ 'candidate'\n\t/tmp/tmpnvf8bt5s.lua:15: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * math.sqrt(2 * a * h)\nend\n</cell>\n<text>\nProblem 10: Strangle Polygons\n\
    Consider the following polygon:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4023zbqd.lua:7: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n   local side\
    \ = math.abs(a)\n   local area = math.abs((a * h) - ((2 * a) * h))\n   local b\
    \ = (side - (0.5 * area)) / h\n   return area\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9n4am84.lua:14:\
    \ expected: 7.5, actual: 15\nstack traceback:\n\t/tmp/tmpg9n4am84.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    if a <=\
    \ h then return 0.0 end\n    local b  = h / a - 1\n    local c  = math.sqrt(b^2\
    \ + h)\n    return 0.5 * c\nend\n</cell>\n<text>\nExercise (20 pts)\nLet's create\
    \ a function that calculates the volume of a cuboid with $h$ sides and $a$ height.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr4ptbu8u.lua:10: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (math.sqrt(pow(h, 2) * pow(a + 1, 2)) -\n            math.sqrt((pow(h, 2) *\
    \ pow(a - 1, 2)) + (pow(a + 1, 2) * h)))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54uyjxf9.lua:5:\
    \ attempt to call a nil value (global 'pow')\nstack traceback:\n\t/tmp/tmp54uyjxf9.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp54uyjxf9.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local s =\
    \ a + h - a * math.sin(math.pi/2 * math.abs(h))\n  return math.sqrt(s * (s - a)\
    \ * (s - h))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dws5ldl.lua:12:\
    \ expected: 7.5, actual: 32.249030993194\nstack traceback:\n\t/tmp/tmp4dws5ldl.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  -- https://en.wikipedia.org/wiki/Triangle_area\n\
    \  -- triangle area\n  -- formula 4.16\n  return (h - a^2)/(a+h)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtl1hapw.lua:14:\
    \ expected: 7.5, actual: -2.75\nstack traceback:\n\t/tmp/tmphtl1hapw.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (math.sqrt(3) * (h / 4) * (a * a) - h / 4)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4pu_hq8.lua:11:\
    \ expected: 7.5, actual: 31.725952641916\nstack traceback:\n\t/tmp/tmpg4pu_hq8.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (1/6)\
    \ * (a * h)^(3/2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w4d_g43.lua:11:\
    \ expected: 7.5, actual: 9.6824583655185\nstack traceback:\n\t/tmp/tmp9w4d_g43.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local ua,\
    \ va = a / 2, a / 2\n  local ub, vb = b / 2, b / 2\n  if ua > vb and ua > ub then\n\
    \    if h > 0 then return a * h / ua else return 0 end\n  elseif vb > ua and vb\
    \ > ub then\n    if h > 0 then return b * h / vb else return 0 end\n  else\n \
    \   if h > 0 then return (a * h) / (ua + vb) else return 0 end\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdvau6zjg.lua:6:\
    \ attempt to perform arithmetic on a nil value (global 'b')\nstack traceback:\n\
    \t/tmp/tmpdvau6zjg.lua:6: in local 'candidate'\n\t/tmp/tmpdvau6zjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3 * a * h)) + (((3 * a) - h) * math.sin(math.pi / 3))) / 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ss5914j.lua:11:\
    \ expected: 7.5, actual: 42.751271944782\nstack traceback:\n\t/tmp/tmp6ss5914j.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  -- Calculate\
    \ the base area of the triangle:\n  -- a = base (hypotenuse)\n  -- h = height\
    \ (hypotenuse)\n  local base = (math.sqrt(3) / 2) * a\n  -- Calculate the height\
    \ of the triangle by calculating the\n  -- area of a triangle with the triangles\
    \ base and height:\n  -- >>> triangle_area(base, h)\n  -- h = 2 * base / 3 = hypotenuse\n\
    \  local height = 2 * base / h\n  -- Return the area of the triangle as the product\
    \ of the triangle\n  -- area, the hypotenuse, and the height of the triangle:\n\
    \  return a * h * height\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufov_tek.lua:22:\
    \ expected: 7.5, actual: 43.301270189222\nstack traceback:\n\t/tmp/tmpufov_tek.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (1\
    \ / 3) * math.sqrt(a) * math.sqrt(1 - a ^ 2) * h\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7oul8w3f.lua:11:\
    \ expected: 7.5, actual: #NaN\nstack traceback:\n\t/tmp/tmp7oul8w3f.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h / 3) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xu87mc0.lua:11:\
    \ expected: 7.5, actual: 2.6457513110646\nstack traceback:\n\t/tmp/tmp6xu87mc0.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((h / 3) - (((h / 6) * (3 / 2)) - ((3 / 2) * (h / 3)))) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzdjosb8.lua:11:\
    \ expected: 7.5, actual: 4.375\nstack traceback:\n\t/tmp/tmpdzdjosb8.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * math.sqrt( 3 * (a ^ 2) * (h ^ 2)) / math.pi\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_btygk0.lua:11:\
    \ expected: 7.5, actual: 41.349667156634\nstack traceback:\n\t/tmp/tmpi_btygk0.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (math.abs(h) * math.sin((a * math.pi / 180.0)) / math.sin((a * math.pi / 180.0)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyvdcyfq.lua:11:\
    \ expected: 7.5, actual: 3.0\nstack traceback:\n\t/tmp/tmpyyvdcyfq.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local s2\
    \ = a * a + a * h * h\n  local t = s2 / 4\n  if t > h then return h end\n  if\
    \ t < s2 then return 2 * h end\n  return 2 * h / 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps486sgp6.lua:15:\
    \ expected: 7.5, actual: 3\nstack traceback:\n\t/tmp/tmps486sgp6.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + math.sin(math.pi * a) / (1 + math.sin(math.pi * a)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uutxpkw.lua:11:\
    \ expected: 7.5, actual: 15.0\nstack traceback:\n\t/tmp/tmp8uutxpkw.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local d =\
    \ a / 2\n  if h > d then return (a * (d*d - a*h)) / ((h - d) * (h - d)) end\n\
    \  return a * ((h*h - a*h) / d)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpect2u4.lua:13:\
    \ expected: 7.5, actual: -175\nstack traceback:\n\t/tmp/tmplpect2u4.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local s\
    \ = a * math.sqrt(3)\n    local p = math.sqrt(h * h + s * s)\n    return (a +\
    \ p) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7y5uoin.lua:13:\
    \ expected: 7.5, actual: 7.0825756949558\nstack traceback:\n\t/tmp/tmpx7y5uoin.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * (h ** 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv6on7jml.lua:5: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local x\
    \ = a[1]\n    local y = a[2]\n    local z = a[3]\n    local s = a[4]\n    local\
    \ t = a[5] \n    local ux = (a[6] - x)\n    local uy = (b[6] - y)\n    local uz\
    \ = (c[6] - z)\n    local us = (-s * ux + t * uy + uz) / 2\n    local ut = (-t\
    \ * ux + s * uy + uz) / 2\n    local ua = us + ut\n    local ub = ut + ua\n  \
    \  return (ua * ub - ub * ua) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_xkiq8_g.lua:5:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp_xkiq8_g.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp_xkiq8_g.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local tt\
    \ = a * h\n  return tt + a * h * h\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchw03oh2.lua:12:\
    \ expected: 7.5, actual: 60\nstack traceback:\n\t/tmp/tmpchw03oh2.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local b =\
    \ (-h / 2) + (a * h / (2 * math.pi)) - (a * math.sqrt(3 * (h / 4) * (h / 4)))\n\
    \  return b * b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuesdpi1k.lua:12:\
    \ expected: 7.5, actual: 31.44816535842\nstack traceback:\n\t/tmp/tmpuesdpi1k.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == 0\
    \ then\n    return 0\n  end\n  return h * a * (a * (a - 2) * (a - 2) * (a - 2))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4t7ff933.lua:14:\
    \ expected: 7.5, actual: 2025\nstack traceback:\n\t/tmp/tmp4t7ff933.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a\
    \ * (h - 2)) * ((h - 2) * (h + 1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbsa2llp.lua:11:\
    \ expected: 7.5, actual: 20\nstack traceback:\n\t/tmp/tmplbsa2llp.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sin(math.pi/a*a)\
    \ * h\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a31y33r.lua:11:\
    \ expected: 7.5, actual: 3.6739403974421e-16\nstack traceback:\n\t/tmp/tmp3a31y33r.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(h\
    \ * h * 3 - a * a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgd6f7i5p.lua:11:\
    \ expected: 7.5, actual: 1.4142135623731\nstack traceback:\n\t/tmp/tmpgd6f7i5p.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local s =\
    \ 0.5 * (a + h)\n  return s * s * (s - a)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1isf_pt1.lua:12:\
    \ expected: 7.5, actual: -16\nstack traceback:\n\t/tmp/tmp1isf_pt1.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (0.5 - h/math.pi) * (0.5 - h/math.pi)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbytyan_p.lua:11:\
    \ expected: 7.5, actual: 1.0348049711483\nstack traceback:\n\t/tmp/tmpbytyan_p.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (a * h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a^2\
    \ + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qzs5wf7.lua:11:\
    \ expected: 7.5, actual: 5.8309518948453\nstack traceback:\n\t/tmp/tmp6qzs5wf7.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn a\
    \ * b / h -- triangle area in triangle unit\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi0qeh3wi.lua:5:\
    \ attempt to perform arithmetic on a nil value (global 'b')\nstack traceback:\n\
    \t/tmp/tmpi0qeh3wi.lua:5: in local 'candidate'\n\t/tmp/tmpi0qeh3wi.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\tassert(type(a)\
    \ == 'number')\n\tassert(type(h) == 'number')\n\tassert(a > 0)\n\tassert(h > 0)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgrtw__on.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(h\
    \ * h + a * a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqldy2bs.lua:11:\
    \ expected: 7.5, actual: 5.8309518948453\nstack traceback:\n\t/tmp/tmpjqldy2bs.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a <= h\
    \ then\n    return 0.5 * triangle_area(a - 1, h) + triangle_area(a + 1, h)\n \
    \ else\n    return 0.5 * triangle_area(a, h - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_n433a3_.lua:8:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_n433a3_.lua:8: in upvalue 'triangle_area'\n\
    \t/tmp/tmp_n433a3_.lua:8: in upvalue 'triangle_area'\n\t/tmp/tmp_n433a3_.lua:8:\
    \ in upvalue 'triangle_area'\n\t/tmp/tmp_n433a3_.lua:8: in upvalue 'triangle_area'\n\
    \t/tmp/tmp_n433a3_.lua:8: in upvalue 'triangle_area'\n\t/tmp/tmp_n433a3_.lua:8:\
    \ in upvalue 'triangle_area'\n\t/tmp/tmp_n433a3_.lua:8: in upvalue 'triangle_area'\n\
    \t/tmp/tmp_n433a3_.lua:8: in upvalue 'triangle_area'\n\t/tmp/tmp_n433a3_.lua:8:\
    \ in upvalue 'triangle_area'\n\t...\n\t/tmp/tmp_n433a3_.lua:8: in local 'candidate'\n\
    \t/tmp/tmp_n433a3_.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.140\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * 0.5 * (math.sqrt(3) * math.pi * (h ** 3)) * math.pow(math.fmod(math.fmod(a,\
    \ h), h), 1.0 / 3.0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4dtu0beb.lua:5: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n   return (math.sqrt(math.pow(h,\
    \ 2) / 4) - math.sqrt((math.pow(a, 2) + math.pow(a, 2)) / 4)) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fhgkd7b.lua:11:\
    \ expected: 7.5, actual: -1.0177669529664\nstack traceback:\n\t/tmp/tmp4fhgkd7b.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn a*sqrt(h*h*h\
    \ + a*a*a - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp64y5h0vz.lua:5:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmp64y5h0vz.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp64y5h0vz.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return h\
    \ * sqrt(a*(a+h)*(a+h+1) + a*(a-h)*(a-h+1))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3h6abx04.lua:5:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmp3h6abx04.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp3h6abx04.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunzccybo.lua:11:\
    \ expected: 7.5, actual: 2.5\nstack traceback:\n\t/tmp/tmpunzccybo.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local s =\
    \ h / (a + h)\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cl5z5k7.lua:12:\
    \ expected: 7.5, actual: 0.375\nstack traceback:\n\t/tmp/tmp5cl5z5k7.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqiujjyio.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\nstack traceback:\n\t/tmp/tmpqiujjyio.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.sqrt( a * a / ( a * a + h * h ) ) \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34bvvbyy.lua:11:\
    \ expected: 7.5, actual: 0.85749292571254\nstack traceback:\n\t/tmp/tmp34bvvbyy.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn 0.5\
    \ * a * a * (h + h + h) / 4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ibd_lhd.lua:11:\
    \ expected: 7.5, actual: 28.125\nstack traceback:\n\t/tmp/tmp8ibd_lhd.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * a * math.abs(a/h - (a/6 - math.pi/2))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwijnucm.lua:11:\
    \ expected: 7.5, actual: 60.103241503206\nstack traceback:\n\t/tmp/tmpfwijnucm.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if h == 0\
    \ then return 0\n  elseif h < 1 then return 0\n  elseif h == 1 then return a\n\
    \  else return (a * (3 * ((h - 1) * (h - 1)) / 2 * (h + 1)))\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzioolru8.lua:15:\
    \ expected: 7.5, actual: 120\nstack traceback:\n\t/tmp/tmpzioolru8.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    if a <\
    \ 0 or h < 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5upi09sb.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * b / h\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgi4kckaw.lua:5:\
    \ attempt to perform arithmetic on a nil value (global 'b')\nstack traceback:\n\
    \t/tmp/tmpgi4kckaw.lua:5: in local 'candidate'\n\t/tmp/tmpgi4kckaw.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a*h*(a-h)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4n5dxda.lua:11:\
    \ expected: 7.5, actual: 30\nstack traceback:\n\t/tmp/tmpq4n5dxda.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * math.sin(math.rad(h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg898zugb.lua:11:\
    \ expected: 7.5, actual: 0.13088474153937\nstack traceback:\n\t/tmp/tmpg898zugb.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == h\
    \ then return a end\n  local s, r\n  if h > 0 then\n    s, r = div(a, h), a\n\
    \  else\n    s, r = a, 0\n  end\n  return s * (r + s * r) / 4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwo4ex43.lua:8:\
    \ attempt to call a nil value (global 'div')\nstack traceback:\n\t/tmp/tmpkwo4ex43.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkwo4ex43.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.sqrt(a^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb6g9_ha.lua:11:\
    \ expected: 7.5, actual: 5.8309518948453\nstack traceback:\n\t/tmp/tmpfb6g9_ha.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (h\
    \ * h) - (a * a) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxsw3c6h.lua:11:\
    \ expected: 7.5, actual: -3.5\nstack traceback:\n\t/tmp/tmpjxsw3c6h.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local lh\
    \ = h / 2\n  local h2 = h / 2\n  return a * (lh + sqrt(lh * lh + (h2 - lh) * (h2\
    \ - lh))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfjr8hsiz.lua:7: 'end' expected (to close 'function' at line\
    \ 4) near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (((3 * h) + (2 * sqrt(3) * h)) + ((sqrt(3) * h)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuzoe9vr3.lua:5:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmpuzoe9vr3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpuzoe9vr3.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if h == 0\
    \ then\n    return 0\n  elseif h == 1 then\n    return a\n  else\n    return 0.5\
    \ * triangle_area(a, h - 1) + 0.5 * triangle_area(a + 1, h)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa9d6tw8s.lua:10:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa9d6tw8s.lua:10: in upvalue 'triangle_area'\n\
    \t/tmp/tmpa9d6tw8s.lua:10: in upvalue 'triangle_area'\n\t/tmp/tmpa9d6tw8s.lua:10:\
    \ in upvalue 'triangle_area'\n\t/tmp/tmpa9d6tw8s.lua:10: in upvalue 'triangle_area'\n\
    \t/tmp/tmpa9d6tw8s.lua:10: in upvalue 'triangle_area'\n\t/tmp/tmpa9d6tw8s.lua:10:\
    \ in upvalue 'triangle_area'\n\t/tmp/tmpa9d6tw8s.lua:10: in upvalue 'triangle_area'\n\
    \t/tmp/tmpa9d6tw8s.lua:10: in upvalue 'triangle_area'\n\t/tmp/tmpa9d6tw8s.lua:10:\
    \ in upvalue 'triangle_area'\n\t...\n\t/tmp/tmpa9d6tw8s.lua:10: in local 'candidate'\n\
    \t/tmp/tmpa9d6tw8s.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.110\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * ((math.sqrt(3) * h) - (math.sqrt(2) * h)) + a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qfy8hzl.lua:11:\
    \ expected: 7.5, actual: 3.125309373156\nstack traceback:\n\t/tmp/tmp2qfy8hzl.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (a*h)/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  -- return\
    \ 0 if zero side or high side areas.\n  if a == 0 or h == 0 then\n    return 0\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplyuasugx.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a\
    \ * h * h) / ((a * a) - (h * h))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp276xiel5.lua:11:\
    \ expected: 7.5, actual: 2.8125\nstack traceback:\n\t/tmp/tmp276xiel5.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ / math.pow((1 + math.pow(h, 2) / math.pow(h, 2)),\n    1 / 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoh8ehtqq.lua:12:\
    \ expected: 7.5, actual: 3.9685026299205\nstack traceback:\n\t/tmp/tmpoh8ehtqq.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * b * math.sqrt(h * (h - a) * (h - b) * (h - c) * (h - d) * (h - e))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm5t2ssq8.lua:5:\
    \ attempt to perform arithmetic on a nil value (global 'b')\nstack traceback:\n\
    \t/tmp/tmpm5t2ssq8.lua:5: in local 'candidate'\n\t/tmp/tmpm5t2ssq8.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ / 3) * math.pow(h, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6x44tg8o.lua:11:\
    \ expected: 7.5, actual: 11.618950038622\nstack traceback:\n\t/tmp/tmp6x44tg8o.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return 0.25\
    \ * h * h + 0.75 * a * a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3uf2ptm.lua:11:\
    \ expected: 7.5, actual: 21\nstack traceback:\n\t/tmp/tmpi3uf2ptm.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local u\
    \ = (h / 2) + 1\n    local a2 = math.pow(a / u, 2)\n    return math.sqrt(a2 *\
    \ a2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovfeetna.lua:13:\
    \ expected: 7.5, actual: 4\nstack traceback:\n\t/tmp/tmpovfeetna.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (sqrt(a * a + h * h) - a) / (2.0 * h)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6wac1ort.lua:5:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmp6wac1ort.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp6wac1ort.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local ah\
    \ = h\n  if ah <= 0 then ah = 1\n  else ah = math.floor(ah * 100) / 100\n  --\
    \ ah could be 0 here, if ah was negative before.\n  -- In this case, return area\
    \ should be 0.\n  end\n  return a * (aa + bb) * 0.5\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphioxryqr.lua:11:\
    \ attempt to perform arithmetic on a nil value (global 'aa')\nstack traceback:\n\
    \t/tmp/tmphioxryqr.lua:11: in local 'candidate'\n\t/tmp/tmphioxryqr.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local s\
    \ = math.sqrt(math.pow(a, 2) / 4)\n    local e = math.sqrt(math.pow(a, 2) / 3\
    \ + math.pow(h, 2))\n    local i = (math.sqrt(s ^ 2 + (h - e) ^ 2) / 2)\n    local\
    \ area = 0\n    if i ~= 1 then\n        if math.abs(i - math.floor(math.sqrt(i\
    \ ^ 2 + 1)) / 2) < 0.000001 then\n            area = i ^ 2\n        else\n   \
    \         area = math.floor(math.sqrt(i ^ 2 + 1))\n        end\n    end\n    return\
    \ area\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6rnqyp_.lua:22:\
    \ expected: 7.5, actual: 1\nstack traceback:\n\t/tmp/tmpd6rnqyp_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a\
    \ * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  -- This returns\
    \ the area of a triangle given its side length\n  -- along with the high and low\
    \ side lengths of the triangle (the\n  -- triangle's base is at (0,0)). Areas\
    \ and sides are given in\n  -- the triangle coordinate system; h is above the\
    \ triangle\n  -- base and is orthogonal to the triangle's side.\n  -- >>> triangle_area(5,\
    \ 2)\n  -- 7.5\n  -- >>> triangle_area(3, 5)\n  -- 9.375\n  if h == 0 then return\
    \ 0\n  elseif h == 1 then return a * sqrt(3)\n  elseif h == 2 then return a *\
    \ sqrt(3) / 2\n  elseif h == 3 then return a * sqrt(3) / 2 * sqrt(2)\n  else assert(false)\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptpt02flz.lua:17:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmptpt02flz.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmptpt02flz.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a <= 0\
    \ or h <=0 then\n    return nil\n  end\n  local half_side = math.floor(h/2)\n\
    \  return a*(math.sqrt(3)*math.pow(half_side,3))/2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4txi0897.lua:15:\
    \ expected: 7.5, actual: 4.3301270189222\nstack traceback:\n\t/tmp/tmp4txi0897.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n   local s,\
    \ t, r\n   -- Find area of triangle, given sides, by Heron's formula\n   s = math.sqrt(a\
    \ ^ 2 - (h * h) / 2)\n   t = math.sqrt(a ^ 2 - (s * s) / 2)\n   r = math.sqrt(a\
    \ ^ 2 - (t ^ 2) / 2)\n   return s * r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33ky8msq.lua:16:\
    \ expected: 7.5, actual: 19.00822190527\nstack traceback:\n\t/tmp/tmp33ky8msq.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return 0.5\
    \ * (a + h) * 0.5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqla4k_8.lua:11:\
    \ expected: 7.5, actual: 2\nstack traceback:\n\t/tmp/tmpkqla4k_8.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local sq\
    \ = (math.sqrt(3) * a) + (h / 2)\n  return sq * math.sqrt(sq * h - a)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vocn9eg.lua:12:\
    \ expected: 7.5, actual: 51.28741066006\nstack traceback:\n\t/tmp/tmp9vocn9eg.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (math.sqrt(3)\
    \ / 4) * a * ((h - a / 2) ^ 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1v7wgum.lua:11:\
    \ expected: 7.5, actual: 0.54126587736527\nstack traceback:\n\t/tmp/tmpi1v7wgum.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * (1 + 0.5 * h) + 0.5 * a * h\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklwdyx41.lua:11:\
    \ expected: 7.5, actual: 20\nstack traceback:\n\t/tmp/tmpklwdyx41.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a\
    \ / 2) * (h / math.tan(math.pi/(h/2)))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_z4tms7.lua:11:\
    \ expected: 7.5, actual: -4.3301270189222\nstack traceback:\n\t/tmp/tmp1_z4tms7.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ 0.5 * ((math.sqrt(math.pow(a, 2) + math.pow(h, 2)) - math.pow((a - h) / 2, 2))\
    \ / math.pow(a / 2, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3gxd19wf.lua:6: ')' expected (to close '(' at line 5) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (math.sqrt(h * h + a * a))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4txeri1x.lua:11:\
    \ expected: 7.5, actual: 5.8309518948453\nstack traceback:\n\t/tmp/tmp4txeri1x.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local s =\
    \ a*(a+h)\n  return math.sqrt(s*(s-a)*(a+h))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvzeh2rl.lua:12:\
    \ expected: 7.5, actual: 105.83005244258\nstack traceback:\n\t/tmp/tmppvzeh2rl.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    if a ==\
    \ 0 then\n        return 0\n    elseif a == 1 then\n        return h * h\n   \
    \ elseif h == 0 then\n        return 4 * (math.sqrt(3) - 2)\n    elseif h == 1\
    \ then\n        return 2 * math.sqrt(3) * math.sin(math.acos(a) / 3)\n    else\n\
    \        return 0.5 * triangle_area(a / 2, h / 2) * triangle_area(a / 2, h - h)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64q88cfn.lua:21:\
    \ expected: 7.5, actual: 0\nstack traceback:\n\t/tmp/tmp64q88cfn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    if h <=\
    \ 0 then return 0\n    elseif a <= 0 then return 0\n    elseif h > a then return\
    \ 0\n    else return 0.5 * ((a - (h/2)) * (h / 2) + (a + (h/2)) * (h / 2))\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(\n\
    \    (a**2) * (h**2) + (h * math.sqrt(3 * a * h - 6 * a * h**2))\n  ) / math.pi\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbesktzd8.lua:6: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.sqrt(a * a + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2p568fs.lua:11:\
    \ expected: 7.5, actual: 5.8309518948453\nstack traceback:\n\t/tmp/tmpw2p568fs.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(\
    \ \n    ((a - h)^2) * ((a - h)^2) + (((a - h) + ((h - a) / 2)^2) * (((h - a) +\
    \ ((h - a) / 2)^2)))\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplw1sgmp_.lua:13:\
    \ expected: 7.5, actual: 3.605551275464\nstack traceback:\n\t/tmp/tmplw1sgmp_.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  -- Initialize\
    \ variables\n  local a = a or 1\n  local h = h or 1\n  local sb = h\n  local x\n\
    \  local y\n  -- Loop for odd sides\n  for i=1, (a+h-1) do\n    -- Calculate current\
    \ value of x for side i\n    x = ((h-sb)*(i-1))/(a+i-1)\n    -- Calculate current\
    \ value of y for side i\n    y = ((sb-h)*(sb*(i-1+a))/(a+i-1+a))\n    -- Add side\
    \ i to side i+1, and move the result to sb\n    -- Then add y to sb\n    sb =\
    \ sb + y\n  end\n  -- Return side area value\n  return sb\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi93ru6xh.lua:28:\
    \ expected: 7.5, actual: 3\nstack traceback:\n\t/tmp/tmpi93ru6xh.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ h * sqrt(3 - (1.0 / 4) * ((2 / a) - (1 / a)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuxc7xr8a.lua:5:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmpuxc7xr8a.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpuxc7xr8a.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == 0\
    \ then\n    error('Argument must be positive. Got 0 instead.')\n  end\n  return\
    \ math.pi * math.acos(a / math.sqrt(math.pow(a, 2) + math.pow(h,2)))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovfzv4xx.lua:14:\
    \ expected: 7.5, actual: 1.6977779319067\nstack traceback:\n\t/tmp/tmpovfzv4xx.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(h\
    \ * (h - a) * (h - a + a) / 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp212madxs.lua:11:\
    \ expected: 7.5, actual: #NaN\nstack traceback:\n\t/tmp/tmp212madxs.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (a*h)/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h * 0.5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a < h\
    \ then return a end\n  return (2 * math.sin(math.pi / 3 * (a / h)))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoc4j07v4.lua:12:\
    \ expected: 7.5, actual: 1.9696155060244\nstack traceback:\n\t/tmp/tmpoc4j07v4.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (math.pow(a, 2) / 6) * (math.pow(h, 3) / 6)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8hv7lgr.lua:11:\
    \ expected: 7.5, actual: 18.75\nstack traceback:\n\t/tmp/tmpw8hv7lgr.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (math.sqrt(h / a) - math.sqrt(h / a)) / 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqimvk5l2.lua:11:\
    \ expected: 7.5, actual: 0\nstack traceback:\n\t/tmp/tmpqimvk5l2.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (math.abs(a * (h + h)) / 2) / math.tan(math.rad(a / 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vqor200.lua:11:\
    \ expected: 7.5, actual: 343.55648322647\nstack traceback:\n\t/tmp/tmp9vqor200.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n\treturn (1/3)*(math.sin(h)*math.sin(a)\
    \ + math.cos(h)*math.cos(a))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvjcwc4q.lua:11:\
    \ expected: 7.5, actual: -0.13871561218238\nstack traceback:\n\t/tmp/tmpbvjcwc4q.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h * h - a * (h * h + a))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxx2gh3i.lua:11:\
    \ expected: 7.5, actual: -305\nstack traceback:\n\t/tmp/tmpbxx2gh3i.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.pow(h / a, 2) - 1) / math.pow(a / 2, 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuynu8_5e.lua:11:\
    \ expected: 7.5, actual: -0.512\nstack traceback:\n\t/tmp/tmpuynu8_5e.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local s\
    \ = math.sqrt(h * h - (a * a))\n    if s == 0 then return 0 end\n    else return\
    \ a * s / h end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4pl28v6w.lua:7: 'end' expected (to close 'function' at line\
    \ 4) near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ (1/math.sqrt((4*math.pow(a, 2))\n                       + (4*math.pow (h, 2))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskj0u8n7.lua:12:\
    \ expected: 7.5, actual: 0.085749292571254\nstack traceback:\n\t/tmp/tmpskj0u8n7.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n   assert(a\
    \ >= 1, \"area is at least 1\")\n   assert(h >= 0, \"height is at least 0\")\n\
    \   return (a * (h - 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_m34zbtj.lua:13:\
    \ expected: 7.5, actual: 5\nstack traceback:\n\t/tmp/tmp_m34zbtj.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (math.sqrt(math.pow(a,\
    \ 2) / 4)) * (math.pow(h / a, 3) / 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo920sbvl.lua:11:\
    \ expected: 7.5, actual: 0.27\nstack traceback:\n\t/tmp/tmpo920sbvl.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == 0\
    \ then return 0\n  elseif h == 0 then return 0.5 * a * a\n  elseif h == 1 then\
    \ return 0.5 * math.sqrt(3 * a * a)\n  elseif h ~= 2 then return 0.5 * math.sqrt(3\
    \ * a * a * h) / h\n  end \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oh4t7ic.lua:15:\
    \ expected: 7.5, actual: 2.5\nstack traceback:\n\t/tmp/tmp8oh4t7ic.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h ** 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiih3xbv7.lua:5: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == 0\
    \ then\n    return 1\n  elseif h == 0 then\n    return 0\n  elseif h == 1 then\n\
    \    return 0.5 * (a + b)\n  else\n    local half_a = math.floor(a/2)\n    local\
    \ half_h = math.floor(h/2)\n    local ab_l = triangle_area(a-half_a, h-half_h)\n\
    \    local bc_l = triangle_area(b-half_a, h-half_h)\n    local ah_l = triangle_area(a-half_a,\
    \ h-half_h)\n    local ab_h = triangle_area(a-half_a, half_h)\n    local bc_h\
    \ = triangle_area(b-half_a, half_h)\n    local ah_h = triangle_area(a-half_a,\
    \ half_h)\n    return 0.5 * (ab_l * bc_l + (ab_l + ah_l * bc_h - ah_l * bc_l)\
    \ * bc_h)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9etyik8q.lua:10:\
    \ attempt to perform arithmetic on a nil value (global 'b')\nstack traceback:\n\
    \t/tmp/tmp9etyik8q.lua:10: in upvalue 'triangle_area'\n\t/tmp/tmp9etyik8q.lua:14:\
    \ in upvalue 'triangle_area'\n\t/tmp/tmp9etyik8q.lua:14: in local 'candidate'\n\
    \t/tmp/tmp9etyik8q.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a/2\
    \ * math.sqrt(h/math.pi)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmx0wn0bj.lua:11:\
    \ expected: 7.5, actual: 2.4430125595146\nstack traceback:\n\t/tmp/tmpmx0wn0bj.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a\
    \ * h) / ((a+b) * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp44u3fug_.lua:5:\
    \ attempt to perform arithmetic on a nil value (global 'b')\nstack traceback:\n\
    \t/tmp/tmp44u3fug_.lua:5: in local 'candidate'\n\t/tmp/tmp44u3fug_.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a == 0\
    \ or h == 0 then\n    return 0\n  else\n    local s2 = math.sqrt(math.pow(h, 2)\
    \ - math.pow(a, 2))\n    return math.atan(math.pow(s2, 0.5)) * (180 / math.pi)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjduf7br.lua:16:\
    \ expected: 7.5, actual: #NaN\nstack traceback:\n\t/tmp/tmpjjduf7br.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local b\
    \ = math.abs(h * 0.5)\n    local s = (math.sqrt(1 - (b ^ 2) / ((2 * b) + a)) *\
    \ 0.5)\n    return math.sin((h * 0.5) * math.pi) * s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21tg58m1.lua:13:\
    \ expected: 7.5, actual: -0.42389562394533\nstack traceback:\n\t/tmp/tmp21tg58m1.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a/2\
    \ * ((a+h)/2.0 - h/2.0 + a/2.0)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the perimeter of a triangle. Assume that the triangle has sides\
    \ a, b, c. Then, perimeter = a + b + c. Return perimeter in cm.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp92i_pfm9.lua:7: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjq3ip_h9.lua:11:\
    \ expected: 7.5, actual: 22.5\nstack traceback:\n\t/tmp/tmpjq3ip_h9.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  local area\
    \ = 0\n  if a > 0 then\n    area = (a * a) + (h * a)\n  else\n    area = ((-a*h)\
    \ + (a*h))/2\n  end\n  return area\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8yoe2dj.lua:17:\
    \ expected: 7.5, actual: 40\nstack traceback:\n\t/tmp/tmpo8yoe2dj.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * h * h / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmuxdhsw.lua:12:\
    \ expected: 2, actual: 1.3333333333333\nstack traceback:\n\t/tmp/tmptmuxdhsw.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return 0.5\
    \ * (a + h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcr76fspq.lua:11:\
    \ expected: 7.5, actual: 4\nstack traceback:\n\t/tmp/tmpcr76fspq.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    if h ==\
    \ 0 then return 0 end\n    local twopi = 2 * math.pi\n    local s = (math.sqrt(h\
    \ / a) - math.sqrt(h / a)) / 2\n    local t = a * math.asin(math.sqrt(s)) / twopi\n\
    \    local u = (s - math.sqrt(s)) / twopi\n    return t * t + u * u\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicw8_5vc.lua:16:\
    \ expected: 7.5, actual: 0\nstack traceback:\n\t/tmp/tmpicw8_5vc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local s\
    \ = (a*(h/2))^2\n    local t = a*(h/4)\n    local o = a*(h*2)\n    return s +\
    \ t + o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0khrvqa3.lua:14:\
    \ expected: 7.5, actual: 90\nstack traceback:\n\t/tmp/tmp0khrvqa3.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return h\
    \ * h / math.pow((a + h), 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kvwvpra.lua:11:\
    \ expected: 7.5, actual: 0.140625\nstack traceback:\n\t/tmp/tmp6kvwvpra.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a*(a+b)*(a+c))/(h*h*(a+b+c))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5b7dy2b.lua:5:\
    \ attempt to perform arithmetic on a nil value (global 'b')\nstack traceback:\n\
    \t/tmp/tmp_5b7dy2b.lua:5: in local 'candidate'\n\t/tmp/tmp_5b7dy2b.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    local area_per_side\
    \ = 3.14159265358979323846264338327950288\n    return (a * h) / (area_per_side\
    \ * area_per_side * area_per_side)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fjsbrsn.lua:12:\
    \ expected: 7.5, actual: 0.48377301649799\nstack traceback:\n\t/tmp/tmp_fjsbrsn.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  if a <= h\
    \ then\n    return 0\n  elseif h <= 2 * a + 1 then\n    return h * (h + 1) * (h\
    \ - a + 1)\n  elseif 2 * a + 1 <= h then\n    return triangle_area(a - h, h) +\
    \ triangle_area(a - 1, 2 * a + 1) + triangle_area(a + 1, 2 * a + h) - triangle_area(a\
    \ + 1, h)\n  else\n    return triangle_area(a - h, h) + triangle_area(a - 1, 2\
    \ * a + 1) + triangle_area(a + 1, 2 * a + h) + triangle_area(a + 1, h)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09rusg_w.lua:19:\
    \ expected: 7.5, actual: -12\nstack traceback:\n\t/tmp/tmp09rusg_w.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    if h ==\
    \ 0 then\n        return a\n    end\n    return a * (1.0 / 6)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkf74l_p.lua:14:\
    \ expected: 7.5, actual: 0.83333333333333\nstack traceback:\n\t/tmp/tmpmkf74l_p.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.sqrt(a * a + h * h) / 3.0\nend\n</cell>\n<code language=conda-env-.conda-charlie-env-2-py>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptp0lr33m.lua:7: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.pow((1 / 2), a) * math.pow((1 / 2), h) * math.pi\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa45lhjbm.lua:11:\
    \ expected: 7.5, actual: 0.012271846303085\nstack traceback:\n\t/tmp/tmpa45lhjbm.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return (a\
    \ * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
