name: HumanEval_85_add
language: lua
results:
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do -- For each element in the list\
    \ lst\n    if i % 2 == 0 then -- If the element at index i is an even number\n\
    \      sum = sum + lst[i] -- add the element at index i to sum\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__46whd3.lua:18:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp__46whd3.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even\n  for i = 1, #lst do\n    local t = lst[i]\n    if i\
    \ %% 2 == 0 then\n      even = even + t\n    end\n  end\n  return even\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp759q37sw.lua:8: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0 -- To hold the sum of all even numbers found\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptv24by_8.lua:16: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local total = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then total\
    \ = total + lst[i] end\n  end\n  return total\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi7ar_gth.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local new_lst = { }\n  local i = 1\n  local elem = lst[1]\n  while\
    \ i <= #lst do\n    if i % 2 == 0 then\n      new_lst[#new_lst + 1] = elem\n \
    \   end\n    elem = lst[i]\n    i = i + 1\n  end\n  return new_lst\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96wgnrxy.lua:21:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmp96wgnrxy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local even = {}\n    local odd  = {}\n    for i, v in pairs(lst)\
    \ do\n        if v %2 == 0 then\n            table.insert(even, v)\n        else\n\
    \            table.insert(odd, v)\n        end\n    end\n    local sum = {}\n\
    \    for i = 1, #even do\n        table.insert(sum, even[i])\n    end\n    for\
    \ i = 1, #odd do\n        table.insert(sum, odd[i])\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr403kdp.lua:27:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpjr403kdp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\
    \ table.insert(result, lst[i]) end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzq925g3g.lua:15:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpzq925g3g.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0 -- initialize to 0\n  for i = 1, #lst do -- loop\
    \ over length of list\n    if lst[i] % 2 == 0 then -- only add even elements\n\
    \      even = even + lst[i] -- add even\n    end\n  end\n  return even -- return\
    \ sum \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7fbs2i2.lua:17:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpu7fbs2i2.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local lst = lst[1]\n  local index = 1\n  local sum = 0\n  while\
    \ index <= #lst do\n    if index % 2 ~= 0 then\n      sum = sum + lst[index]\n\
    \    end\n    index = index + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnm8i65km.lua:8:\
    \ attempt to get length of a number value (local 'lst')\nstack traceback:\n\t\
    /tmp/tmpnm8i65km.lua:8: in local 'candidate'\n\t/tmp/tmpnm8i65km.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    if #lst < 2 then return lst; end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbzdoo7ie.lua:16: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for _, v in ipairs(lst) do\n        if v %\
    \ 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wrurwx_.lua:17:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp2wrurwx_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = lst:gsub('%d+'):gsub('%d')\n  return evens:gsub('%d'):gsub('%d+')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3r21u9rl.lua:5:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmp3r21u9rl.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp3r21u9rl.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local sum = 0\n   for _, v in ipairs(lst) do\n      if v % 2 ~=\
    \ 0 then\n         sum = sum + v\n      end\n   end\n   return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomnig90x.lua:17:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpomnig90x.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  -- if there are not enough\
    \ even numbers to put in the evens variable\n  -- we add all the even numbers\
    \ until that list is complete (meaning we have at least 1 even number)\n  if #even\
    \ > #lst then\n    local counter = 1\n    local evens = {}\n    while #even >\
    \ counter do\n      table.insert(evens, #even)\n      even = add(even)\n    end\n\
    \    return evens\n  else\n    return even\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s63hkt6.lua:29:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp4s63hkt6.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_index\n  local sum = 0\n  for _, v in pairs(lst) do\n\
    \    if v %2 == 0 then\n      even_index = even_index or 0\n      sum = sum +\
    \ v\n    elseif v % 2 > 0 then\n      even_index = even_index + 1\n    end\n \
    \ end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibt2k654.lua:21:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpibt2k654.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n\
    \      result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6l8zr13u.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp6l8zr13u.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   -- Your code here\n   return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kru6gtj.lua:12:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp1kru6gtj.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst:len() == 0 then\n    return 0\n  end\n  local evenIdx = 0\n\
    \  local oddIdx = 0\n  while evenIdx < lst:len() do\n    if lst[evenIdx] % 2 ==\
    \ 0 then\n      lst[oddIdx] = lst[evenIdx] + lst[oddIdx]\n      evenIdx = evenIdx\
    \ + 1\n    else\n      oddIdx = oddIdx + 1\n    end\n  end\n  return lst[oddIdx]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19dd48kq.lua:5:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp19dd48kq.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp19dd48kq.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local numEven = 0\n  local numOdd = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn2_hpp5t.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst[1] == nil then\n    return nil\n  else\n    return lst[1]\
    \ + add(lst[2:end])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkbyg20hg.lua:8: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local lst2 = {}\n  for i = 1,#lst do\n    if i % 2 == 0 then\n \
    \     lst2[#lst2 + 1] = lst[i]\n    end\n  end\n  return lst2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9loue4zo.lua:17:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp9loue4zo.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return #evens\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5fwjaf5.lua:17:\
    \ expected: 88, actual: 1\nstack traceback:\n\t/tmp/tmpx5fwjaf5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst==0 then\n    return 0\n  elseif #lst==1 then\n    return\
    \ lst[1]\n  end\n  local sum = 0\n  for i=1, #lst do\n    if i%2==1 then\n   \
    \   sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi8lt7nm.lua:22:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpqi8lt7nm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for _, v in pairs(lst) do\n    if v % 2 == 1 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs9zak00.lua:17:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpqs9zak00.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local index = 1\n    local result = 0\n    for i = 1,#lst do\n\
    \        if index % 2 == 0 then\n            result = result + lst[i]\n      \
    \  end\n        index = index + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshs3o1n6.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpshs3o1n6.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local l = {}\n  for i = 1, #lst do\n    if i % 2 == 1 then\n   \
    \   l[i] = lst[i]\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lj9_zzu.lua:17:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmp8lj9_zzu.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst[1] == 0 then\n    return lst[2]\n  else\n    local i = 2\n\
    \    local s = lst[1]\n    while i < #lst do\n      s = s + lst[i]\n      i =\
    \ i +1\n    end\n    return s\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtwy1tk5.lua:21:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprtwy1tk5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i = 1, #lst do\n    result = result + lst[i]\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_ytdlfy.lua:15:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpj_ytdlfy.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  assert(type(lst) == \"table\")\n  local out = {}\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then out[#out + 1] = lst[i] end\n  end\n  return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tc6bjpo.lua:16:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmp9tc6bjpo.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- Base case\n  if lst[1] == 0 then return 0 end\n  local sum =\
    \ 0\n  -- Recursion step\n  for i = 2, #lst do\n    if lst[i] % 2 ~= 0 then return\
    \ sum end\n    sum = sum + lst[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehl9n6x2.lua:20:\
    \ expected: 122, actual: 0\nstack traceback:\n\t/tmp/tmpehl9n6x2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  local even_index = 1\n  while #lst > 0 do\n\
    \    if lst[even_index] % 2 == 0 then\n      result = result + lst[even_index]\n\
    \      lst[even_index] = nil\n    end\n    even_index = even_index + 1\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s71cajt.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp8s71cajt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1,#lst do\n    if i % 2 == 0 then\n   \
    \   sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt91pdfh4.lua:18:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpt91pdfh4.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return lst[#lst]:add(lst[#lst+1]):add(lst[#lst+2]):add(lst[#lst+3]):add(lst[#lst+4]):add(lst[#lst+5])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu5xrp5oe.lua:5:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpu5xrp5oe.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpu5xrp5oe.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local ret = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n  \
    \    ret = ret + lst[i]\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7px0la4.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_7px0la4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst[2]\n  for i = 1, #lst - 1 do\n    if lst[i] % 2\
    \ == 0 then\n      even = even + lst[i]\n    end\n  end\n  return even\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13mw7g_8.lua:17:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp13mw7g_8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = lst[1]\n  for i = 2, #lst do\n    if i % 2 == 1 then\n\
    \      result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsobnpo42.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpsobnpo42.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst <= 0 then\n    return nil\n  end\n  local sum = 0\n  local\
    \ even = nil\n  for i = 1, #lst do\n    if even == nil then\n      sum = lst[i]\n\
    \      even = 1\n    elseif even then\n      sum = sum + lst[i]\n    end\n   \
    \ if i % 2 == 1 then\n      even = not even\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i2qpop8.lua:27:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3i2qpop8.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local result = {}\n   for i, v in pairs(lst) do\n      if i % 2\
    \ == 1 then\n         result[#result+1] = v\n      end\n   end\n   return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54usheye.lua:17:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmp54usheye.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return end\n  local even = lst[#lst]\n  local\
    \ result = lst[1]\n  for i = 2, #lst, 2 do\n    local next_even = lst[i]\n   \
    \ result = next_even + result\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmyt01oq.lua:18:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmyt01oq.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local l2 = {}\n    for i = 1,#lst do\n        if i%2 = 0 then\n\
    \            table.insert(l2, lst[i])\n        end\n    end\n    return table.concat(l2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpol1kd4tf.lua:7: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local odds = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(evens, lst[i])\n    else\n      table.insert(odds,\
    \ lst[i])\n    end\n  end\n  table.insert(evens, table.concat(odds, \",\"))\n\
    \  return table.concat(evens, \",\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpou9bdfkd.lua:21:\
    \ expected: 88, actual: \"88,4\"\nstack traceback:\n\t/tmp/tmpou9bdfkd.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local sum = 0\n  local j = 1\n  local k = 1\n\
    \  for i = 1, #lst do\n    if j % 2 ~= 0 then\n      sum = sum + lst[i]\n    else\n\
    \      evens[k] = lst[i]\n      k = k + 1\n    end\n    j = j + 1\n  end\n  return\
    \ sum + sum(evens)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpei6glp7q.lua:18:\
    \ attempt to call a number value (local 'sum')\nstack traceback:\n\t/tmp/tmpei6glp7q.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpei6glp7q.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evensum = 0\n  local oddsum = 0\n  for i=1,#lst do\n    if\
    \ i % 2 == 0 then\n      evensum = evensum + lst[i]\n    else\n      oddsum =\
    \ oddsum + lst[i]\n    end\n  end\n  return evensum + oddsum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqms0sm1i.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpqms0sm1i.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local ret = 0\n   for _, v in pairs(lst) do\n      if v % 2 ==\
    \ 1 then ret = ret + v end\n   end\n   return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4chia2mw.lua:15:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp4chia2mw.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local index = 1\n  local sum = 0\n  while index < #lst do\n    sum\
    \ = sum + lst[index]\n    if index % 2 == 0 then \n      index = index + 1 \n\
    \    else\n      index = index + 1 \n      sum = sum + lst[index]\n    end\n \
    \ end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowf4z24j.lua:22:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpowf4z24j.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local sum = 0\n   for i = 1, #lst, 1 do\n      if i % 2 == 0 then\n\
    \         sum = sum + lst[i]\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpadp_5oif.lua:18:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpadp_5oif.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local index = 1\n  while index <= #lst do\n    if index % 2 == 1\
    \ then\n      lst[index + 1] = lst[index] + lst[index + 1]\n    end\n    index\
    \ = index + 1\n  end\n  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wm_tdqa.lua:18:\
    \ expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmp_wm_tdqa.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd  = {}, {}\n  for _, v in ipairs(lst) do\n    if\
    \ v %% 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd,\
    \ v)\n    end\n  end\n  return table.concat(even, \",\") + \",\" + table.concat(odd,\
    \ \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnt8mho_l.lua:7: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tif v %2 == 1 then\n\
    \t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9v2h67v.lua:17:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpv9v2h67v.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  assert(#lst ~= 0, \"empty list\")\n  for i = 2, #lst do\n    if\
    \ lst[i] % 2 == 1 then\n      lst[i] = lst[i] + lst[i-1]\n      lst[i-1] = 0\n\
    \    end\n  end\n  return lst[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xhw2mva.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_xhw2mva.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_indices = {}\n  for _, num in pairs(lst) do\n    if num\
    \ % 2 == 0 then\n      table.insert(even_indices, num)\n    end\n  end\n  return\
    \ table.concat(even_indices)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptc4qlf8i.lua:17:\
    \ expected: 88, actual: \"488\"\nstack traceback:\n\t/tmp/tmptc4qlf8i.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst > 0 then\n    local even = 0\n    local odd  = 0\n    for\
    \ i=1,#lst do\n      if i % 2 ~= 0 then\n        even = even + lst[i]\n      else\n\
    \        odd = odd + lst[i]\n      end\n    end\n    return even + odd\n  else\n\
    \    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3mfdotl.lua:24:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpa3mfdotl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    assert(#lst > 0)\n    local even = lst[#lst]\n    local odd =\
    \ lst[#lst]\n    for i = #lst - 1, 1, -1 do\n        if odd % 2 == 0 then\n  \
    \          even = even + odd\n            lst[i] = even\n        end\n       \
    \ odd = lst[i]\n    end\n    return even\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6onsb97.lua:21:\
    \ expected: 88, actual: 176\nstack traceback:\n\t/tmp/tmpb6onsb97.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for _, i in ipairs(lst) do\n    if i\
    \ % 2 == 0 then\n      table.insert(even, i)\n    else\n      table.insert(odd,\
    \ i)\n    end\n  end\n  for _, i in ipairs(even) do\n    table.insert(lst, i +\
    \ 1)\n  end\n  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpps6umdiy.lua:22:\
    \ expected: 88, actual: {4, 88, 5, 89}\nstack traceback:\n\t/tmp/tmpps6umdiy.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    if lst == nil then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd708acy8.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal newList = {}\n\tfor i = 1, #lst do\n\t\tif i % 2 == 1 then\n\
    \t\t\tnewList = newList .. lst[i]\n\t\tend\n\tend\n\treturn newList\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaxrzv4fv.lua:8:\
    \ attempt to concatenate a table value (local 'newList')\nstack traceback:\n\t\
    /tmp/tmpaxrzv4fv.lua:8: in local 'candidate'\n\t/tmp/tmpaxrzv4fv.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens, odds = 2, 3\n  local result = nil\n  for _,v in ipairs(lst)\
    \ do\n    if v % 2 == 0 then\n      evens = evens * v + v\n    else\n      odds\
    \ = odds * v + v\n    end\n  end\n  if evens and odds then\n    local x = evens\
    \ / odds\n    result = evens % odds\n  end\n  return result\nend\nprint(add(lst))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: attempt to index a nil value\nstack traceback:\n\t[C]: in for iterator\
    \ 'for iterator'\n\t/tmp/tmp83hcfy00.lua:7: in local 'add'\n\t/tmp/tmp83hcfy00.lua:20:\
    \ in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:clone()\n  local odd  = lst:clone():map(function(x)\
    \ return math.floor(x/2) end)\n  \n  for i = #even, 1, -1 do\n    if i % 2 ==\
    \ 0 then\n      even[i] = even[i] - math.floor( odd[#odd] * math.pow(2, i - 1)\
    \ )\n    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9vo3bgqx.lua:5:\
    \ attempt to call a nil value (method 'clone')\nstack traceback:\n\t/tmp/tmp9vo3bgqx.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp9vo3bgqx.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i = 1,#lst do\n    if i%2==1 then\n    \
    \  result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp811c7fe4.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp811c7fe4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result, i\n  for i=1,#lst do\n    local even = lst[i]\n  \
    \  if even % 2 == 0 then\n      result = result + even\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzw3eki.lua:9:\
    \ attempt to perform arithmetic on a nil value (local 'result')\nstack traceback:\n\
    \t/tmp/tmplrzw3eki.lua:9: in local 'candidate'\n\t/tmp/tmplrzw3eki.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local ret = 0\n  for i = 1, #lst, 2 do\n    if i % 2 == 1 then\n\
    \      ret = ret + lst[i]\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8o5sigp.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpa8o5sigp.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local result = {}\n    for i, v in pairs(lst) do\n        if i\
    \ % 2 == 0 then table.insert(result, v) end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuz8wm2p.lua:15:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpwuz8wm2p.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local count = 0\n    for _, i in ipairs(lst) do\n        if i\
    \ %2 ~= 0 then\n            count = count + i\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp535zcozz.lua:17:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp535zcozz.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = lst[1]\n  local i = 1\n  while i <= #lst do\n   \
    \ if i %% 2 == 1 then\n      result = result + lst[i]\n    end\n    i = i + 1\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwgfvo64m.lua:8: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1al13yv.lua:11:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_1al13yv.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local n = #lst\n    for i = 2, n do\n        if lst[(i-1) + 1]\
    \ % 2 ~= 0 then\n            lst[i] = lst[i] + lst[(i-1) + 1]\n        end\n \
    \   end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrrkvdjb.lua:17:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpdrrkvdjb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  for i=1,#lst do\n    if i % 2 == 0 then\n    \
    \  even = even + lst[i]\n    end\n  end\n  return even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_fjf0ld.lua:18:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmph_fjf0ld.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      lst = lst + lst[i]\n\
    \    end\n  end\n  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp730d5a1j.lua:7:\
    \ attempt to perform arithmetic on a table value (local 'lst')\nstack traceback:\n\
    \t/tmp/tmp730d5a1j.lua:7: in local 'candidate'\n\t/tmp/tmp730d5a1j.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local s = lst[1]\n    for i = 2, #lst do\n        if i % 2 ==\
    \ 0 then\n            s = s + lst[i]\n        end\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzty0gn6h.lua:17:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpzty0gn6h.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst <= 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpql72_mq2.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local evens = 0\n    local odds = 1\n    for i = 1, #lst do\n\
    \        if i %% 2 == 1 then\n            evens = evens + lst[i]\n        else\n\
    \            odds = odds + lst[i]\n        end\n    end\n    return evens + odds\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp28efrx7w.lua:8: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local new_lst = nil\n    for i, v in ipairs(lst) do\n        if\
    \ v %2 ~= 0 then\n            if new_lst == nil then\n                -- New list\
    \ so start at beginning and add first value at even index\n                new_lst\
    \ = { v }\n            else\n                -- Add value at even index to the\
    \ list\n                new_lst[i + 1] = v\n            end\n        end\n   \
    \ end\n    return new_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jxwv50y.lua:23:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp6jxwv50y.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i = 0, #lst - 1 do\n    local value = lst[i]\n\
    \    if value % 2 == 1 then -- odd\n      result = result + value\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_4cl5aow.lua:8:\
    \ attempt to perform arithmetic on a nil value (local 'value')\nstack traceback:\n\
    \t/tmp/tmp_4cl5aow.lua:8: in local 'candidate'\n\t/tmp/tmp_4cl5aow.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  local i = 1\n  for i = 1, #lst do -- iterate through\
    \ the list one by one\n    if i % 2 == 1 then -- if the index value is odd add\
    \ it to sum\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nprint(add([4,\
    \ 2, 6, 7]))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp162bj9ya.lua:14: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst < 2 then return nil end\n  return lst[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcpd_xlb.lua:12:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdcpd_xlb.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return lst[1]:add(lst[2])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpac_0ujz6.lua:5:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpac_0ujz6.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpac_0ujz6.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for _, item in ipairs(lst) do\n\
    \    if item % 2 == 0 then\n      even = even + item\n    elseif item % 2 == 1\
    \ then\n      odd = odd + item\n    end\n  end\n  return even + odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07761jfb.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp07761jfb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst > 0 then\n    local even = 0\n    local odd = 0\n    for\
    \ i = 1, #lst do\n      if i % 2 == 0 then\n        even = even + lst[i]\n   \
    \   else\n        odd = odd + lst[i]\n      end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5zc725_d.lua:25: 'end' expected (to close 'if' at line 5)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local even = #lst:even()\n    local sum = 0\n    for i = 1, even\
    \ do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnc__662.lua:5:\
    \ attempt to call a nil value (method 'even')\nstack traceback:\n\t/tmp/tmpnnc__662.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpnnc__662.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    assert(lst)\n    assert(#lst > 0)\n    local result = 1\n    for\
    \ i = 2, #lst, 2 do\n        result = result + lst[i]\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2d2x1pco.lua:17:\
    \ expected: 88, actual: 89\nstack traceback:\n\t/tmp/tmp2d2x1pco.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst[1] == 0 then return 0 end\n  local result = lst[2]\n  for\
    \ i = 2, #lst do\n    if lst[i] % 2 == 0 then\n      result = result + lst[i]\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzxqolnr.lua:18:\
    \ expected: 88, actual: 176\nstack traceback:\n\t/tmp/tmpwzxqolnr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local new_lst = lst:clone()\n  for i=1,#lst do\n    if i%2 ~= 0\
    \ then\n      new_lst[i] = new_lst[i] + new_lst[i+1]\n    end\n  end\n  return\
    \ new_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp02_5gd3n.lua:5:\
    \ attempt to call a nil value (method 'clone')\nstack traceback:\n\t/tmp/tmp02_5gd3n.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp02_5gd3n.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst[1] == nil then return nil end\n  local even_indices = lst:sub(1,\
    \ #lst):map(function(x) return x / 2 end):filter(x == 0 or (x > 0 and x % 2 ==\
    \ 0)).sort()\n  return even_indices[1] * 2 + lst:sub(1, #lst)[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1n0225lb.lua:6:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp1n0225lb.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp1n0225lb.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local result = 0\n    for i = 2, #lst, 1 do\n        result =\
    \ result + lst[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiykougp7.lua:16:\
    \ expected: 122, actual: 142\nstack traceback:\n\t/tmp/tmpiykougp7.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst[1] == nil then return end\n  if lst[1] == 1 then\n    return\
    \ lst[1]\n  end\n  local res = 0\n  for i = 2, #lst do\n    if lst[i] == 1 then\n\
    \      res = res + lst[i-1]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3d6c7wlm.lua:21:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp3d6c7wlm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   for i = 1, #lst do\n      if not ((i & 1) == 1) then return 0 end\n\
    \      lst[i] = lst[i] + lst[i + 1]\n   end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfe4k4e2.lua:14:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmptfe4k4e2.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 1 then\n    return lst[1]\n  else\n    return lst[1]\
    \ + add(lst[#lst - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp0hoywic.lua:5:\
    \ attempt to get length of a number value (local 'lst')\nstack traceback:\n\t\
    /tmp/tmpp0hoywic.lua:5: in upvalue 'add'\n\t/tmp/tmpp0hoywic.lua:8: in local 'candidate'\n\
    \t/tmp/tmpp0hoywic.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n\
    \      result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxui524m_.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpxui524m_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  assert(lst)\n  local s = lst[1]\n  for i=2,#lst do\n    if lst[i]\
    \ % 2 == 1 then s = s + lst[i] end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyq5gcfvb.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpyq5gcfvb.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local ret = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n  \
    \    ret = ret + lst[i]\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp486rwmmo.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp486rwmmo.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  assert(#lst > 0, 'must have at least one element')\n  local i =\
    \ 1\n  local even, odd = 0, 1\n  while i <= #lst do\n    if lst[i] % 2 == 0 then\n\
    \      even = even + lst[i]\n      lst[i] = nil\n    else\n      lst[i] = lst[odd:even:end]\n\
    \      odd = odd+1\n    end\n    i = i+1\n  end\n  return even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp08r1zj_.lua:13: function arguments expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local result = 0\n   for _, v in ipairs(lst) do\n      if v%2 ==\
    \ 1 then result = result + v end\n   end\n   return result\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nI think your algorithm is wrong. Suppose we have `lst=[2,4,6,8]`\
    \ which gives us `add([2, 4, 6, 8])`. However your algorithm gives us `add([2,\
    \ 4, 6, 8])` which gives us `12`. So I think that you are missing `6` from the\
    \ result.\n<|/ c |>\n<| c |>\nHmm, my apologies. I was thinking about doing something\
    \ different, I believe I misread your post. My bad.\n<|/ c |>\n<| c |>\nNo problem,\
    \ you were right in your comment :)\n<|/ c |>\n<| c |>\nI fixed my algorithm and\
    \ I used a for loop. Maybe it is more efficient this way and also easier to understand.\n\
    <|/ c |>\n<| a dscore=1 |>\nAn alternative way of doing the same thing but without\
    \ having to iterate through the list. This is more a matter of taste and maybe\
    \ some different taste, but one way could be like this:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp16fxka_z.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local even_index = 1\n  local\
    \ odd_index = 1\n  local sum = 0\n  while even_index < #lst do\n    sum = sum\
    \ + (lst[even_index] % 2)\n    even_index = even_index + 1\n  end\n  while odd_index\
    \ < #lst do\n    sum = sum + (lst[odd_index] % 2)\n    odd_index = odd_index +\
    \ 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33_fu0g4.lua:23:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp33_fu0g4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    if not lst then return end\n    local even = 1\n    local odd\
    \ = 0\n    local sum_of_even = 0\n    for i = 1, #lst do\n        if i % 2 ==\
    \ 1 then\n            even = even + lst[i]\n        else\n            odd = odd\
    \ + lst[i]\n        end\n        if odd == #lst then\n            sum_of_even\
    \ = even + sum_of_even\n        end\n    end\n    return sum_of_even\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgba7h2tj.lua:25:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpgba7h2tj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = 1, 2 -- indices of even and odd elements\n  local\
    \ result = nil -- stores result of the operation\n  for idx, value in ipairs(lst)\
    \ do\n    local current_index = idx + even\n    local next_value = lst[current_index]\
    \ + odd + lst[current_index + 1]\n    if next_value == value then\n      result\
    \ = value\n    elseif next_value < value then\n      even = idx\n    else\n  \
    \    odd = idx\n      result = value\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppsq8v7ju.lua:9:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmppsq8v7ju.lua:9: in local 'candidate'\n\t/tmp/tmppsq8v7ju.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for _, value in ipairs(lst) do\n        if\
    \ value % 2 == 1 then\n            sum = sum + value\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph7w3m873.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal result = lst[1]\n\tfor i = 2, #lst do\n\t\tif lst[i] % 2 ~=\
    \ 0 then\n\t\t\tresult = result + lst[i]\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2np80h8y.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp2np80h8y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst[1] == 0 then return 0 end\n  if lst[1] == 1 then return 0\
    \ end\n  if lst[1] == 2 then return 0 end\n  if lst[1] == 3 then return 0 end\n\
    \  if lst[1] == 4 then return 0 end\n  if lst[1] == 5 then return 0 end\n  if\
    \ lst[1] == 6 then return 0 end\n  if lst[1] == 7 then return 0 end\n  if lst[2]\
    \ == 0 then return 0 end\n  if lst[2] == 1 then return 0 end\n  if lst[2] == 2\
    \ then return 0 end\n  if lst[2] == 3 then return 0 end\n  if lst[2] == 4 then\
    \ return 0 end\n  if lst[2] == 5 then return 0 end\n  if lst[2] == 6 then return\
    \ 0 end\n  if lst[2] == 7 then return 0 end\n  return lst[1] + lst[2]\nend\nprint(add(lst))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwa7pgb58.lua:5: attempt to index a nil value (local 'lst')\n\
    stack traceback:\n\t/tmp/tmpwa7pgb58.lua:5: in local 'add'\n\t/tmp/tmpwa7pgb58.lua:23:\
    \ in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   if lst == nil then return nil end\n   local even = lst[1]\n   local\
    \ sum = even\n   local last = lst[2]\n   for i=3,#lst do\n      local element\
    \ = lst[i]\n      if element ~= last + 1 then\n         sum = element + sum\n\
    \      else\n         sum = sum + even\n      end\n      last = element\n   end\n\
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5za63sj.lua:24:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpx5za63sj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst < 2 then return 0 end\n  local even, odd\n  even, odd =\
    \ lst[1], lst[2]\n  for i = 2, #lst do\n    if i % 2 == 0 then\n      even = even\
    \ + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0a_s4wt.lua:21:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpx0a_s4wt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local lst2 = {}\n  for i = 1, #lst, 1 do\n    if (i % 2) == 1 then\n\
    \      table.insert(lst2, lst[i])\n    end\n  end\n  return lst2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzez7phw.lua:17:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmpkzez7phw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 1\n  local odd = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 0 then\n      even = even + lst[i]\n    elseif i % 2 ==\
    \ 1 then\n      odd = odd + lst[i]\n    end\n  end\n  sum = even + odd\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp045n6lmx.lua:22:\
    \ expected: 88, actual: 93\nstack traceback:\n\t/tmp/tmp045n6lmx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_idx = 1\n  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    sum = sum + v -- adding the even elements to sum\n    if even_idx == 2 then\
    \ -- if even_idx is 2, then add even element to sum\n      sum = sum + v\n   \
    \ end\n    even_idx = even_idx + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzf5xhav7.lua:20:\
    \ expected: 88, actual: 180\nstack traceback:\n\t/tmp/tmpzf5xhav7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa_3s3h9v.lua:16: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 1 then\n    return lst[1]\n  end\n  if #lst == 2 then\n\
    \    return lst[1] + lst[2]\n  end\n  return lst[1] + add(lst[#lst - 1])\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9gwtdwt.lua:17:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpi9gwtdwt.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = lst[1]\n  for i = 2, #lst do\n    if i % 2 == 1 then\n\
    \      result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqvrwfds.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpvqvrwfds.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local total = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      total = total + lst[i]\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbym_hl9_.lua:18:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpbym_hl9_.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return nil end\n  if #lst == 1 then return lst[1]\
    \ end\n  if lst[#lst] == nil then return nil end\n  return lst[#lst] + add(lst[#lst:-1:2])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa35ty9mk.lua:8: <name> expected near '-'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local n = 0\n  for _,v in ipairs(lst) do\n    if v%2 ~= 0 then\n\
    \      n = n + 1\n    end\n  end\n  return lst:reduce((function(x,y) return x+y\
    \ end), n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9af39coo.lua:11:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmp9af39coo.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9af39coo.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 1\n  local odd = 0\n  local result = 0\n  for _, v\
    \ in ipairs(lst) do\n    if even % 2 ~= 0 then\n      even = even + 1\n      result\
    \ = even + v\n    else\n      odd = odd + 1\n      result = odd + v\n    end\n\
    \  end\n  return result\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\nThis solution\
    \ should work for you:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptdf19hu5.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 2, #lst, 2 do\n        sum = sum +\
    \ lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpah52ekhh.lua:16:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpah52ekhh.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst == nil then\n    error(\"not enough arguments\")\n  elseif\
    \ #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsaljorha.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local i, n\n  for i = 2, #lst do\n    n = lst[i] + lst[i - 1]\n\
    \    if n%2 ~= 0 then\n      lst[i + 1] = n\n    end\n  end\n  return lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohdbxi58.lua:18:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpohdbxi58.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 0, #lst - 1 do\n    sum = sum + lst[i]\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp453c0sdx.lua:7:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp453c0sdx.lua:7: in local 'candidate'\n\t/tmp/tmp453c0sdx.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even\n  if lst[1] ~= nil then\n    even = lst[1]\n  end\n\
    \  for i = 2, #lst do\n    if lst[i] ~= nil then\n      even = even + lst[i]\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxz4avnj3.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpxz4avnj3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local i = 0\n  while i < #lst do\n    if not (i % 2) then lst[#lst\
    \ + 1] = lst[i] end\n    i = i + 1\n  end\n  lst[#lst + 1] = nil\n  return lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7w_ikdk.lua:17:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmps7w_ikdk.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local i = 0\n  local ans = lst[1]\n  for i = 2, #lst do \n    if\
    \ lst[i] % 2 == 0 then ans = ans + lst[i] end\n  end\n  return ans\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45d88nh1.lua:16:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp45d88nh1.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n \
    \     even = even + lst[i]\n    end\n  end\n  return even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcaxmfph.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzcaxmfph.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = lst[1]\n  for i = 2, #lst do\n    res = res + lst[i]\n\
    \    if i%2==1 then\n      lst[i] = res\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpfzo3c3.lua:18:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpgpfzo3c3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- base case\n  if #lst < 1 then return 0 end\n  \n  -- two pointers\
    \ approach\n  local even, odd = 0, 1\n  while even <= #lst do\n    if lst[even]\
    \ % 2 == 1 then\n      lst[odd] = lst[even]\n      lst[even] = 0\n      odd =\
    \ odd+1\n    end\n    even = even+1\n  end\n  \n  return lst[#lst]\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjqub5vbz.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpjqub5vbz.lua:11: in local 'candidate'\n\t/tmp/tmpjqub5vbz.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd\n  local n = #lst\n  for i = 1, n do\n    if i %\
    \ 2 == 1 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv15lala.lua:9:\
    \ attempt to perform arithmetic on a nil value (local 'even')\nstack traceback:\n\
    \t/tmp/tmpmv15lala.lua:9: in local 'candidate'\n\t/tmp/tmpmv15lala.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 2, #lst, 2 do\n        if lst[i] ==\
    \ 0 then\n            lst[i] = 1\n        else\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend\nprint(add(lst))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxigg9x3j.lua:6: attempt to get length of a nil value (local\
    \ 'lst')\nstack traceback:\n\t/tmp/tmpxigg9x3j.lua:6: in local 'add'\n\t/tmp/tmpxigg9x3j.lua:15:\
    \ in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal evens = 0\n\tlocal total = 0\n\tfor _, v in ipairs(lst) do\n\
    \t\tif v % 2 == 0 then\n\t\t\tevens = evens + 1\n\t\tend\n\t\ttotal = total +\
    \ v\n\tend\n\treturn evens, total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp58rxmys.lua:19:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmpp58rxmys.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return lst[#lst]:gsub('?', function(i) \n    if i % 2 == 0 then\
    \ return i end\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0haoekl.lua:5:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpx0haoekl.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpx0haoekl.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return lst[#lst] ~= nil and lst[#lst] + lst[#lst - 1] or nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nxvcan_.lua:11:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp6nxvcan_.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    if #lst == 0 then\n        return nil\n    end\n    if lst[1]\
    \ % 2 == 0 then\n        return lst[1]\n    end\n    local sum = 0\n    local\
    \ k = lst[1] - 1\n    for i = 2, #lst do\n        sum = sum + lst[i]\n       \
    \ if k > 0 then\n            if lst[i] % 2 == 0 then\n                sum = sum\
    \ + lst[k] -- add the even index\n                k = k - 1\n            end\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zgepoit.lua:28:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp7zgepoit.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  assert(#lst >= 0, \"Cannot add an empty list\")\n  local result\
    \ = lst[1]\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      result = result\
    \ + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg58nqchl.lua:18:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpg58nqchl.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local lst = lst or {}\n    local even_indices = {}\n    local\
    \ odd_indices = {}\n    for i, v in pairs(lst) do\n        if v % 2 == 0 then\n\
    \            table.insert(even_indices, i)\n        else\n            table.insert(odd_indices,\
    \ i)\n        end\n    end\n    local total = 0\n    for i, v in pairs(even_indices)\
    \ do\n        total = total + v\n    end\n    for i, v in pairs(odd_indices) do\n\
    \        total = total + v\n    end\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz2dnbld.lua:28:\
    \ expected: 88, actual: 3\nstack traceback:\n\t/tmp/tmppz2dnbld.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local total = 0\n    for i = 2, #lst, 2 do\n        total = total\
    \ + lst[i]\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpmajhx2.lua:16:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpnpmajhx2.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = lst:map(function(x)\n    return x % 2 == 0\n  end)\n\
    \  local odds = lst:map(function(x)\n    return x % 2 == 1\n  end)\n  return evens\
    \ + odds\nend\nprint(add(lst))\n</cell>\n<text>\nWe can also use unpacking to\
    \ get the elements of the list in a certain order.\nSuppose we have a list [a,b,c]\
    \ and we want to unpack it into two variables, a and b. We can do:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_66b8krz.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local i = 0\n  local sum = 0\n  while i < #lst do\n    if math.mod(i,\
    \ 2) == 1 then\n      sum = sum + lst[i]\n    end\n    i = i + 1\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkydhun6m.lua:8:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpkydhun6m.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkydhun6m.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  -- loop through the list\n  for i=1,#lst\
    \ do\n    -- if even index is even, then add it\n    if i % 2 == 0 then\n    \
    \  even[#even+1] = lst[i]\n    end\n    -- if odd index is odd, then add it\n\
    \    if i %% 2 == 1 then\n      odd[#odd+1] = lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp60jkhv92.lua:13: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      lst[#lst+1] =\
    \ lst[i]\n    end\n  end\n  return lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6vrjxjg.lua:16:\
    \ expected: 88, actual: {4, 88, 4}\nstack traceback:\n\t/tmp/tmpt6vrjxjg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local result = 0\n    for _, v in pairs(lst) do\n        if v\
    \ % 2 == 1 then\n            result = result + v\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5lb1mwmj.lua:17:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp5lb1mwmj.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local n = 1\n  local evens = []\n  for i = 1, #lst do\n    evens\
    \ = evens + lst[i]\n    n = n*2\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7p5bcyp8.lua:6: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local lst2 = {}\n    for i = 1, #lst do\n        if i %2 ~= 0\
    \ then lst2[#lst2 + 1] = lst[i] end\n    end\n    return lst2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjd2tv0ch.lua:15:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmpjd2tv0ch.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local sum = 0\n   for i = 1, #lst, 1 do\n      sum = sum + lst[i]\
    \ % 2\n   end\n   return sum\nend\n</code>\n<|/ a |>\n<| a tags=lua dscore=0 |>\n\
    This one doesn't use loops. It uses recursion and its simpler :)\n<code>\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx1nu4ld8.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    assert(#lst > 0)\n    local evenIndex = {}\n    for i = 1, #lst,\
    \ 2 do\n        evenIndex[i] = true\n    end\n    local total = 0\n    for i =\
    \ 1, #lst, 2 do\n        if evenIndex[i] then\n            total = total + lst[i]\n\
    \        end\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78muv9hj.lua:22:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp78muv9hj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_index = nil\n  local sum = 0\n  for i = 1, #lst do\n\
    \    if i % 2 == 1 then\n      if even_index == nil then\n        even_index =\
    \ i\n        sum = lst[i]\n      else\n        sum = sum + lst[i]\n      end\n\
    \    end\n  end\n  if even_index then\n    return sum + lst[even_index]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh8r9z3g.lua:26:\
    \ expected: 88, actual: 8\nstack traceback:\n\t/tmp/tmprh8r9z3g.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst==nil then\n    return nil\n  end\n  local sum = 0\n  for\
    \ i,v in ipairs(lst) do\n    if i % 2==0 then\n      sum = sum + v\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgb2xtkp.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmphgb2xtkp.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = lst[1]\n  for i = 2, #lst do\n    if i%2 ~= 0 then\n\
    \      res = res + lst[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xumfk05.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp7xumfk05.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- base case\n  if #lst==0 then return 0 end\n  -- base case\n \
    \ if #lst==1 then return lst[1] end\n  -- recursive case\n  return add(lst[2],lst[1])\
    \ + lst[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojrizi54.lua:6:\
    \ attempt to get length of a number value (local 'lst')\nstack traceback:\n\t\
    /tmp/tmpojrizi54.lua:6: in upvalue 'add'\n\t/tmp/tmpojrizi54.lua:10: in local\
    \ 'candidate'\n\t/tmp/tmpojrizi54.lua:16: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local result = lst[1]\n    for i = 2, #lst do\n        if i %\
    \ 2 == 0 then\n            result = result + lst[i]\n        end\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t3gq69s.lua:17:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp3t3gq69s.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local evens_at_odd = {}\n    for _, val in ipairs(lst) do\n  \
    \      if val % 2 == 0 then\n            table.insert(evens_at_odd, val)\n   \
    \     end\n    end\n    return table.concat(evens_at_odd, \"-\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw49iuuar.lua:17:\
    \ expected: 88, actual: \"4-88\"\nstack traceback:\n\t/tmp/tmpw49iuuar.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\t-- base case\n\tif lst[1] == 0 then\n\t\treturn 0\n\tend\n\t\n\t\
    local even = 0\n\tlocal odd = 1\n\t\n\t-- add even elements that are at odd indices\n\
    \tfor i=2,#lst do\n\t\tif lst[i] % 2 == 0 then\n\t\t\teven = even + lst[i]\n\t\
    \tend\n\t\t\n\t\t-- if any element at odd index is even, \n\t\t-- add the element\
    \ at odd index to the even values\n\t\tif lst[odd] % 2 == 0 then\n\t\t\teven =\
    \ even + lst[odd]\n\t\tend\n\t\n\t\todd = odd + 1 -- increment the odd index\n\
    \tend\n\t\n\treturn even -- return the total even values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wt8b05w.lua:34:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp2wt8b05w.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:select(2, lst:len())\n  local odd = lst:select(1,\
    \ lst:len())\n  local sum = 0\n  for i, v in ipairs(even) do\n    sum = sum +\
    \ v\n  end\n  for i, v in ipairs(odd) do\n    sum = sum + v\n  end\n  return sum\n\
    end\n</code>\nIf you want it shorter:\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpub1yaldw.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = {}\n  local index = 1\n  for _, v in pairs(lst) do\n\
    \    if index % 2 == 1 then\n      result[#result + 1] = v\n    end\n    index\
    \ = index + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sgce92q.lua:19:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmp6sgce92q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in pairs(lst) do\n    if i % 2 == 0 then\
    \ sum = sum + v end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqqewnew.lua:16:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpuqqewnew.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    assert(lst, \"lst cannot be empty\")\n    local even_index = 1\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i]\n     \
    \   if ((i %% 2) == 1) then\n            even_index = even_index + 1\n       \
    \     lst[even_index] = lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzeff0mi7.lua:10: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  assert(type(lst) == \"table\")\n  local lst2 = {}\n  for i = 1,\
    \ #lst do\n    if i % 2 == 0 then\n      lst2[i] = lst[i]\n    end\n  end\n  return\
    \ lst2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllosqf3g.lua:18:\
    \ expected: 88, actual: {2=88}\nstack traceback:\n\t/tmp/tmpllosqf3g.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for _, x in ipairs(lst) do\n    if x\
    \ % 2 == 0 then\n      table.insert(even, x)\n    else\n      table.insert(odd,\
    \ x)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz851t05d.lua:23: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local function evens(a)\n    local b = {}\n    for i, v in ipairs(a)\
    \ do\n      if v %2 == 1 then table.insert(b, v) end\n    end\n    return b\n\
    \  end\n  local function odd(a)\n    local b = {}\n    for i, v in ipairs(a) do\n\
    \      if v %2 == 0 then table.insert(b, v) end\n    end\n    return b\n  end\n\
    \  local lst2 = {}\n  table.insert(lst2, lst[1])\n  for i = 2, #lst do\n    local\
    \ lst3 = evens(lst)\n    local lst4 = odd(lst3)\n    table.insert(lst2, lst4)\n\
    \  end\n  return lst2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppc141xw2.lua:32:\
    \ expected: 88, actual: {4, {}}\nstack traceback:\n\t/tmp/tmppc141xw2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- The list will always contain at least one element\n  -- So we\
    \ test if the first element is a number\n  -- If it is, we return it since it\
    \ is the sum of the given list\n  if type(lst[1]) ~= 'number' then return nil\
    \ end\n  -- If we have a list that has at least one element, then\n  -- we loop\
    \ over it and check if the current element is the even one and if so\n  -- we\
    \ add it to the sum.\n  local sum = 0\n  -- We start at 2 since the first element\
    \ is the number we want to add\n  for i = 2, #lst, 1 do\n    if type(lst[i]) ==\
    \ 'number' and (i % 2 == 0) then\n      sum = sum + lst[i]\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipmh7eaj.lua:26:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpipmh7eaj.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return lst[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxq4k9md.lua:12:\
    \ expected: 122, actual: 5\nstack traceback:\n\t/tmp/tmpzxq4k9md.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local i = 0\n    local n = #lst\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbk3r7wfh.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local new_lst = {}\n  for _, v in ipairs(lst) do\n    if v & 1 ==\
    \ 0 then\n      new_lst[#new_lst + 1] = v\n    end\n  end\n  return new_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtssqbp5.lua:17:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpxtssqbp5.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_lst = lst:sub(1)\n  local even_sum = 0\n  for i = 1,\
    \ #lst do\n    if i % 2 == 0 then\n      even_sum = even_sum + lst[i]\n    end\n\
    \  end\n  return even_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn19mroqp.lua:5:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpn19mroqp.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpn19mroqp.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0 -- add even\n  local odd = 0 -- add odd\n  local\
    \ i = 1\n  while i < #lst do\n    if i % 2 == 0 then\n      even = even+lst[i]\n\
    \    else\n      odd = odd+lst[i]\n    end\n    i = i + 1\n  end\n  return even+odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3m6ev0ap.lua:22:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3m6ev0ap.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  local odd = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptr2grzlu.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n\
    \      result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbh8yo78y.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpbh8yo78y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local evens = 0\n   local odds = 0\n   for i = 1, #lst do\n   \
    \   if i % 2 == 1 then\n         evens = evens + lst[i]\n      else\n        \
    \ odds = odds + lst[i]\n      end\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3_n0i4ok.lua:24: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd\n  for _, i in ipairs(lst) do\n    if i % 2 ~= 0\
    \ then\n      even = even * 2 + (i - 1)\n    end\n  end\n  return even\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyjuqj9g.lua:17:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpdyjuqj9g.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return 0\n  elseif #lst == 1 then\n    return\
    \ lst[0]\n  elseif #lst % 2 == 1 then\n    return add(lst[#lst] + lst[#lst - 1])\n\
    \  else\n    return add(lst[#lst - 1] + lst[#lst - 2])\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxr4m3wd.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpyxr4m3wd.lua:12: in local 'candidate'\n\t/tmp/tmpyxr4m3wd.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local i = 0\n  local sum = 0\n  while i < #lst do\n    sum = sum\
    \ + lst[i]\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy9ylp61c.lua:8:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpy9ylp61c.lua:8: in local 'candidate'\n\t/tmp/tmpy9ylp61c.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local lst = table.sort(lst)\n    local sum = 0\n    for i = 1,\
    \ #lst do\n        if lst[i] % 2 ~= 0 then\n            sum = sum + lst[i]\n \
    \       end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe27dw5cl.lua:7:\
    \ attempt to get length of a nil value (local 'lst')\nstack traceback:\n\t/tmp/tmpe27dw5cl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe27dw5cl.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal even_indices = {}\n\tlocal odd_indices = {}\n\tlocal sum =\
    \ 0\n\tfor i, v in ipairs(lst) do\n\t\tif i % 2 == 0 then\n\t\t\teven_indices[i]\
    \ = true\n\t\t\tsum = sum + v\n\t\telse\n\t\t\todd_indices[i] = true\n\t\tend\n\
    \tend\n\ttable.insert(even_indices, sum)\n\ttable.insert(odd_indices, sum)\n\t\
    for i = #lst,1,-1 do\n\t\tif even_indices[i] then\n\t\t\tlst[i] = lst[i] + even_indices[i-1]\n\
    \t\tend\n\t\tif odd_indices[i] then\n\t\t\tlst[i] = lst[i] + odd_indices[i-1]\n\
    \t\tend\n\tend\n\treturn lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpijo8bsdo.lua:23:\
    \ attempt to perform arithmetic on a boolean value (field '?')\nstack traceback:\n\
    \t/tmp/tmpijo8bsdo.lua:23: in local 'candidate'\n\t/tmp/tmpijo8bsdo.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u6j7fq2.lua:18:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp2u6j7fq2.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local n = 1\n  for _, v in ipairs(lst) do n = n*2+v end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lh4ur9r.lua:13:\
    \ expected: 88, actual: 100\nstack traceback:\n\t/tmp/tmp3lh4ur9r.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local evens, odds = pairs(lst) -- extract even and odd pairs\n\
    \    local res = 0\n    for _, odd in ipairs(odds) do -- loop over odd indices\
    \ and add the even ones\n        res = res + evens[math.floor( odd * 2 ) ] --\
    \ add even to odd index even\n    end\n    return res\nend\n</code>\nThis should\
    \ now work as you want:\n<code>\n> add(lst)\n</code>\n<|/ a |>\n<| c |>\nThank\
    \ you for your help. I really appreciate it.\n<|/ c |>\n<| a tags=lua |>\nThe\
    \ code below is my version of a classic solution:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjr4cmxfh.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then table.insert(even, lst[i]) end\n    table.insert(odd, lst[i])\n  end\n\
    \  return table.concat(even) + table.concat(odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpws0szwi3.lua:16:\
    \ expected: 88, actual: 576\nstack traceback:\n\t/tmp/tmpws0szwi3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   -- base case\n   if #lst == 0 then\n      return 0\n   end\n  \
    \ -- recursive case\n   if #lst == 1 then\n      return lst[1] + lst[2]\n   end\n\
    \   local evens = add(lst[#lst - 1]) + lst[#lst - 2]\n   return lst[1] + evens\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7t4537t.lua:6:\
    \ attempt to get length of a number value (local 'lst')\nstack traceback:\n\t\
    /tmp/tmpm7t4537t.lua:6: in upvalue 'add'\n\t/tmp/tmpm7t4537t.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpm7t4537t.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local newlst = terralib.newlist()\n    local i = 1\n    for k\
    \ in pairs(lst) do\n        if k % 2 == 0 then\n            newlst[i] = k\n  \
    \          i = i + 1\n        end\n    end\n    return newlst\nend\n</code>\n\
    <|/ a tags=lua-table,lua,arrays dscore=1 |>\n<| c |>\nPlease review this answer\
    \ and give feedback where I'm wrong\n<|/ c |>\n<| c |>\nThis is very good but\
    \ please use \"local i = 1\" instead of \"i = i + 1\"\n<|/ c |>\n<| c |>\nPlease\
    \ give feedback if this was helpful. Otherwise please add your own answer when\
    \ you find the solution yourself and accept it.\n<|/ c |>\n<| a dscore=1 tags=lua-table,lua,arrays\
    \ |>\nIn case you want to add an entry to an array in place, you can simply do\
    \ this:\n<code>\nmyArray[#myArray+1] = myEntry\n</code>\n<|/ a |>\n<| a tags=lua-table,lua,arrays\
    \ |>\nHere is an answer for the original question.\nThe original question was\
    \ to add an element to an existing table.\n<code>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg0xb3jz2.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i,\
    \ v in ipairs(lst) do\n    if i % 2 == 1 then\n      sum = sum + v\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmojiumez.lua:20:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpmojiumez.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n  \
    \    sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx17i6ciu.lua:18:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpx17i6ciu.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst==nil then\n    return 0\n  elseif #lst==0 then\n    return\
    \ 0\n  end\n  if #lst==1 then\n    return lst[1]\n  else\n    if lst[#lst]%2==0\
    \ then\n      return add(lst:sub(1,#lst-1))+lst[#lst]/2\n    else\n      return\
    \ add(lst:sub(1,#lst-1))+lst[#lst]/2+lst[#lst]%2\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp35h_zfo9.lua:14:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp35h_zfo9.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp35h_zfo9.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal result = 0\n\tfor i = 1, #lst do\n\t\tif i % 2 == 1 then\n\
    \t\t\tresult = result + lst[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5w_a6cb.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmph5w_a6cb.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local even = 0\n    local odd = 0\n    for i = 1, #lst do\n  \
    \      if i %% 2 == 0 then\n            even = even + lst[i]\n        else\n \
    \           odd = odd + lst[i]\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxof418zt.lua:8: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    if lst[1] == nil then return end\n    if lst[1] == 1 then return\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeq9c73cd.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local new_lst = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(new_lst, lst[i])\n    end\n  end\n  return new_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0pnn7vr.lua:17:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpr0pnn7vr.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst, 2 do\n    even[#even+1] = lst[i]\n\
    \  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow4q344w.lua:15:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmpow4q344w.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local n = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n    \
    \  n = n + (lst[i])\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i1cbti7.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp7i1cbti7.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  for i = 1, #lst do\n    if i % 2 == 0 then lst[#lst + 1] = lst[i]\
    \ end\n  end\n  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbnr5z20.lua:14:\
    \ expected: 88, actual: {4, 88, 88}\nstack traceback:\n\t/tmp/tmpkbnr5z20.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local odds  = {}\n  local i\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then\n      table.insert(odds, lst[i])\n    else\n   \
    \   table.insert(evens, lst[i])\n    end\n  end\n  table.insert(evens, #lst, #lst)\n\
    \  for i = #evens, 1, -1 do\n    table.insert(odds, evens[i])\n  end\n  return\
    \ odds\nend\n</code>\n<|/ a dscore=3 tags=recursion,lua-table,lua,algorithm |>\n\
    <| a dscore=3 |>\nHere is a solution in Lua that is a little simpler than the\
    \ other answers I've seen.\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgblfnkhk.lua:21: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   -- first find the index of odd elements in the given list\n   local\
    \ i = 1\n   while i <= #lst and lst[i] % 2 ~= 0 do\n      i = i + 1\n   end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptjc9hjic.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local result, idx, even = 0, 0, false\n    for i = 1, #lst do\n\
    \        if even then\n            result = (result + lst[i]) / 2\n        else\n\
    \            result = result + lst[i]\n        end\n        even = not even\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkemucr8.lua:20:\
    \ expected: 88, actual: 46\nstack traceback:\n\t/tmp/tmpbkemucr8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   for i = 2, #lst, 2 do\n      lst[i - 1] = lst[i - 1] + lst[i]\n\
    \   end\n   return lst[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ghnan7e.lua:15:\
    \ expected: 122, actual: 5\nstack traceback:\n\t/tmp/tmp0ghnan7e.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens, odds = unpack(lst)\n  local evens_sum = 0\n  for i\
    \ = 1, #odds do\n    evens_sum = evens_sum + evens[i]\n  end\n  return evens_sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzdr00d9z.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzdr00d9z.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpzdr00d9z.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if lst==nil then return nil end\n  local index = 1\n  while index\
    \ < #lst do\n    if index % 2 == 1 then\n      lst[index] = lst[index] + lst[index+1]\n\
    \    end\n    index = index + 1\n  end\n  return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69pyg0ap.lua:19:\
    \ expected: 88, actual: {92, 88}\nstack traceback:\n\t/tmp/tmp69pyg0ap.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0723n4qs.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens, odds = unpack(lst)\n  local sum = 0\n  for i = 1,#evens\
    \ do\n    sum = sum + evens[i]\n  end\n  for i = 1,#odds do\n    sum = sum + odds[i]\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpruqj3rqc.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpruqj3rqc.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpruqj3rqc.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd\n  -- count odd elements\n  table.sort(lst)\n  --\
    \ find first even element\n  even = lst[1]\n  -- find last odd element\n  odd\
    \ = lst[#lst]\n  -- return even\n  return even * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wsnmp_v.lua:19:\
    \ expected: 88, actual: 8\nstack traceback:\n\t/tmp/tmp5wsnmp_v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i = 1, #lst do\n    local even = i % 2 ==\
    \ 0\n    local result = even and even:add(lst[i]) or result\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8clnx8t9.lua:8:\
    \ attempt to index a boolean value (local 'even')\nstack traceback:\n\t/tmp/tmp8clnx8t9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp8clnx8t9.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]\n  \
    \  if i % 2 == 1 then\n      sum = sum + lst[i - 1]\n    end\n  end\n  return\
    \ sum\nend\nprint(add({4, 2, 6, 7}))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp16of2gje.lua:9: attempt to perform arithmetic on a nil value\
    \ (field '?')\nstack traceback:\n\t/tmp/tmp16of2gje.lua:9: in local 'add'\n\t\
    /tmp/tmp16of2gje.lua:14: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then\n    return lst\n  end\n  local index = 1\n  local\
    \ result = 0\n  for _, elt in ipairs(lst) do\n    if index % 2 == 1 then\n   \
    \   result = result + elt\n    end\n    index = index + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqbn_d8a.lua:22:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpgqbn_d8a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wlxi7og.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp_wlxi7og.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local even = 0\n    for _, v in ipairs(lst) do\n        if v %\
    \ 2 == 0 then\n            even = even + 1\n        end\n    end\n    return even\
    \ -- return the sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4tcx98c.lua:17:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmpn4tcx98c.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local evenElement = lst[1]\n    local index = 1\n    while index\
    \ < #lst do\n        if lst[index] % 2 ~= 0 then\n            evenElement = evenElement\
    \ + lst[index]\n        end\n        index = index + 1\n    end\n    return evenElement\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iac09cf.lua:19:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp9iac09cf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local result = lst[1]\n   for i = 2, #lst do\n      if i % 2 ~=\
    \ 0 then\n         result = result + lst[i]\n      end\n   end\n   return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof78p6wi.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpof78p6wi.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local index\n  for index, x in ipairs(lst) do\n    if index % 2\
    \ == 1 then\n      lst[index] = x\n    end\n  end\n  return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5i92z1t.lua:17:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpi5i92z1t.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = 0, 0\n  for i = 1, #lst do\n    if i % 2 == 0\
    \ then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e15njbd.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp3e15njbd.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
