name: HumanEval_101_words_string
language: lua
results:
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = s:gmatch(\"[^,]+\")\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv3zqa55.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x18d24d0\n\
    stack traceback:\n\t/tmp/tmprv3zqa55.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = s:gsub(\"([^,]+)\", function (s) return s.split()\
    \ end)\n  return s[#s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8l4l_n2.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpo8l4l_n2.lua:7:\
    \ in function </tmp/tmpo8l4l_n2.lua:7>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpo8l4l_n2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpo8l4l_n2.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\t-- Your code here!\n\tassert(type(s) == \"string\"\
    , \"input must be string\")\n\treturn {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgallvze.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpjgallvze.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n   -- Your code goes here!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprab27rcx.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmprab27rcx.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return string.gmatch(s, \"%w+\") -- Return a list\
    \ of words\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsd_a1c1t.lua:9: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoztcnwkf.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmpoztcnwkf.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return string.gsub(s, \"([, ])\", \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3ftn0l2.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi  my name\
    \ is John\"\nstack traceback:\n\t/tmp/tmpe3ftn0l2.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n   local words = {}\n   for w in string.gmatch(s,\
    \ \",?(%S+)\") do\n      table.insert(words, w)\n   end\n   return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2co7d9_7.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp2co7d9_7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return table.unpack(s:gmatch(\"%w+\"))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ get length of a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Initialize the array of words\n  local words\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2y85kw1l.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = s.trim():gsub(\"[^a-zA-Z ]\", \"\
    \ \"):gsub(\"[,\\\\s]+\", \" \")\n    return words:gsub(\"\\\\s+\", \" \"):gsub(\"\
    ^\\\\s+\", \"\"):gsub(\"\\\\s+$\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplw48xx29.lua:7:\
    \ attempt to call a nil value (field 'trim')\nstack traceback:\n\t/tmp/tmplw48xx29.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplw48xx29.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Return the array of words in the string\n  --\
    \ Input s:  \"Hi,  my  name  is  John\"\n  -- Output: [\"Hi\",\"my\",\"name\"\
    ,\"is\",\"John\"]\n  local words = string.gmatch(s, \"[%w\\s]+\")\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphqvxlke7.lua:10: invalid escape sequence near '\"[%w\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    -- Your code here\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39kbsz8h.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi, my name\
    \ is John\"\nstack traceback:\n\t/tmp/tmp39kbsz8h.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = string.gsub(s,\" \",\"\")\n    return\
    \ string.gsub(words,\",\",\"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxqyg_tg.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"HimynameisJohn\"\
    \nstack traceback:\n\t/tmp/tmpmxqyg_tg.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]\", \", \")\n  s = string.gsub(s, \"[, ]+\", \", \")\n  s = string.gsub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp19zw424.lua:47: ')' expected (to close '(' at line 46) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = \"\"\n    local space = 0\n    for\
    \ i, v in ipairs(string.gmatch(s, \"[^,]+\")) do\n        if v == \",\" then\n\
    \            words = words .. \" \"\n        elseif v == \" \" then\n        \
    \    space = space + 1\n        else\n            words = words .. v\n       \
    \ end\n    end\n    if space == 0 then\n        words = string.gmatch(s, \"[^\
    \ ]+\")\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = { }\n  local pos = 1\n  local last_space\
    \ = -1\n  for c in s:gmatch(\"%S+\") do\n    local next_space = c:find(\" \",\
    \ pos)\n    if next_space ~= last_space then\n      table.insert(words, c:sub(1,\
    \ next_space - 1))\n    end\n    pos = next_space + 1\n    last_space = c\n  end\n\
    \  table.insert(words, s:sub(1, pos))\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_2o5vcja.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'next_space')\nstack traceback:\n\
    \t/tmp/tmp_2o5vcja.lua:13: in local 'candidate'\n\t/tmp/tmp_2o5vcja.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return s:match(\"(%w+)\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6uv5xpv.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi\"\nstack\
    \ traceback:\n\t/tmp/tmp_6uv5xpv.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Write your code here\n  local result = {}\n \
    \ for _, v in pairs(s) do\n    if v ~= \",\" then\n      result[#result + 1] =\
    \ v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4x6vrcz.lua:9:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpn4x6vrcz.lua:9: in local 'candidate'\n\t/tmp/tmpn4x6vrcz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    -- Convert the string to a table\n    local tbl\
    \ = s:gmatch(\"([^,]+), *([^,]+), *([^,]+), *([^,]+), *([^,]+), *([^,]+)\")\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpckqbufd1.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, \" \") -- Get all\
    \ the words from the given string\n  return words -- Return all the words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc83jjf4t.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x1e15480\n\
    stack traceback:\n\t/tmp/tmpc83jjf4t.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = \"\"\n  local word_list = {}\n  for\
    \ char in s:gmatch(\"[%z():.-]+\") do\n    words = words .. char\n    word_list[#word_list\
    \ + 1] = (word_list[#word_list] + 1) / 2\n  end\n  return word_list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tiko946.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp1tiko946.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = s:gsub(\"(%w+)(%w+)\", function(w1, w2)\n  \
    \  return w1 + w2\n  end)\n  return s:gmatch(\"%w+,?\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp66bxx5p1.lua:8:\
    \ attempt to perform arithmetic on a string value (local 'w1')\nstack traceback:\n\
    \t/tmp/tmp66bxx5p1.lua:8: in function </tmp/tmp66bxx5p1.lua:7>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmp66bxx5p1.lua:7: in local 'candidate'\n\t/tmp/tmp66bxx5p1.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return s:gmatch('[^,]+')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9azt8a6y.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x6d94d0\n\
    stack traceback:\n\t/tmp/tmp9azt8a6y.lua:13: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, \"[^,]+\")\n  for\
    \ i = 1, #words do\n    words[i] = words[i]:lower()\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_vsosbt8.lua:8:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp_vsosbt8.lua:8: in local 'candidate'\n\t/tmp/tmp_vsosbt8.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = string.gmatch(s, \"([^ ]+)\") -- [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\treturn words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_ovwnvy.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0xce8490\n\
    stack traceback:\n\t/tmp/tmpl_ovwnvy.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    -- Check for a valid input\n    if s == nil then\n\
    \        return nil, \"Invalid input\"\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsfc3yw1p.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return s:gsub(\"(%w+)\", function (c) return string.lower(c)\
    \ end):gsub(\"(.)\", function (c) return string.upper(c) end):gsub(\"%S+\", function\
    \ (c) return string.upper(c) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuiww1_3o.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"HI, MY NAME\
    \ IS JOHN\"\nstack traceback:\n\t/tmp/tmpuiww1_3o.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local result = {}\n    s = s:gsub(\"([^\" .. table_concat(_ESCAPES,\
    \ \",\") .. \"]+)\", function(c) result[#result + 1] = c end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm1lcivqa.lua:8:\
    \ attempt to call a nil value (global 'table_concat')\nstack traceback:\n\t/tmp/tmpm1lcivqa.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpm1lcivqa.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = { }\n  for word in string.gmatch(s,\
    \ \",([^,]+)\") do\n    table.insert(words, word)\n  end\n  for word in string.gmatch(s,\
    \ \" \") do\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3bh6uj9.lua:20:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\" my name\
    \ is John\", \" \", \" \", \" \", \" \"}\nstack traceback:\n\t/tmp/tmpc3bh6uj9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\t-- Your code here\n\tlocal words = string.gsub(s,\
    \ '[^ ]+', '')\n\tlocal arr = {}\n\tfor i=1, #words do\n\t\ttable.insert(arr,\
    \ words[i])\n\tend\n\treturn arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ud1iuo1.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp1ud1iuo1.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return string.split(s, \"[^, ]+\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqiqq4sli.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpqiqq4sli.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqiqq4sli.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = \"\"\n  local i = 1\n  while true\
    \ do\n    s = s:gsub(\"([^,]+)(.+)\", \"%1 %2\")\n    if not s then\n      break\n\
    \    end\n    words = words .. s..\" \"\n    i = i + 1\n  end\n  return words:gsub(\"\
    ^ \", \"\"):gsub(\"$ \", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n   -- Your code here\n   return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53zzbrxz.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp53zzbrxz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ewu5qu1.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmp8ewu5qu1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = {}\n    if s == nil or s == \"\"\
    \ then return end\n    local pattern = \"[^,]+\"\n    table.insert(words, table.split(s,\
    \ \",\"))\n    for i = 1, #words do\n        table.insert(words, table.split(words[i],\
    \ pattern))\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnjpt40cg.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpnjpt40cg.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnjpt40cg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\t-- Split the string into words.\n\tlocal words =\
    \ {}\n\tfor word in string.gmatch(s, \"([^,]+)\") do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\t-- Return the words.\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0oximwh.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmpo0oximwh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n   -- Return the array of words.\n   return unpack(s:gmatch(\"\
    [^,]+\")) -- Use gmatch to match non-commas.\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxu6j5eq.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpcxu6j5eq.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpcxu6j5eq.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = s:match(\"(%S+)\")\n  if words then\n\
    \    return words\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlrrjswb.lua:18:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi,\"\nstack\
    \ traceback:\n\t/tmp/tmpdlrrjswb.lua:18: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words\n  if s ~= nil then\n    words = nil\n\
    \    local ts = string.gsub(s, \"%w+\", \"\")\n    words = ts:gsub(\",\", \" \"\
    ):gsub(\"^ \", \"\"):gsub(\"$ \", \"\")\n  else\n    words = \"nil\"\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4iaogav.lua:21:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"    \"\nstack\
    \ traceback:\n\t/tmp/tmpo4iaogav.lua:21: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohlh71k0.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpohlh71k0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  local function split(s, x)\n\
    \  \tlocal function word(...)\n      local v = {}\n      for i = 1, select('#',\
    \ ...) do\n        table.insert(v, select(\"#\", ...))\n      end\n      return\
    \ v\n    end\n  \tlocal words = split(s, x)\n  \treturn words\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplexd32ls.lua:31: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = { }\n  local i = 0\n  repeat\n   \
    \ local c = s[i]\n    if c == \",\" then\n      table.insert(words, { })\n   \
    \ elseif c ~= \" \" then\n      table.insert(words, string.sub(s, i, i - 1))\n\
    \    end\n    i = i + 1\n  until i <= #s\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjz4ukt_p.lua:24:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi, my name\
    \ is John\"}\nstack traceback:\n\t/tmp/tmpjz4ukt_p.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    -- Your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4vtys0i.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpz4vtys0i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal splitter = (s == nil and \",\" or s)\n\ts\
    \ = string.gsub(s, \"%s+\", \" \")\n\ts = string.gsub(s, \"[,%s]+\", \" \")\n\t\
    s = string.gsub(s, \"[ ]+\", \" \")\n\ts = string.gsub(s, \"[,]+\", \" \")\n\t\
    s = string.gsub(s, \"[\\n]+\", \" \")\n\treturn string.gsplit(s, splitter)\nend\n\
    </cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvf57d6z_.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\ts = s:upper()\n\tlocal words = \"\"\n\tlocal word\
    \ = \"\"\n\tlocal spaces = false\n\tfor char in s:gmatch(\"[%W, %S]+\") do\n\t\
    \tif word:len() == 0 and spaces == false then\n\t\t\tspace = char\n\t\t\tspaces\
    \ = true\n\t\telseif spaces then\n\t\t\twords = word..space\n\t\t\tword = \"\"\
    \n\t\t\tspaces = false\n\t\telse\n\t\t\tword = word..char\n\t\tend\n\tend\n\t\
    if spaces then\n\t\twords = word..space\n\tend\n\treturn words:gsub(\"%S+\", \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n_ihajr.lua:32:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"         \"\
    \nstack traceback:\n\t/tmp/tmp5n_ihajr.lua:32: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  assert(type(s) == 'string')\n  local word_table\
    \ = nil\n  local line_counter = 0\n  local word_counter = 0\n  local spaces =\
    \ 0\n  local current_word = ''\n  local space = \"\"\n  local i = 0\n  local j\
    \ = 0\n  local len = #s\n  local result\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpic5flqnw.lua:30: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  return \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecj7jq5y.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpecj7jq5y.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd5sb4ad.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmptd5sb4ad.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- The list that holds our words\n  local words\
    \ = {}\n  -- We need a string to split into words\n  local str_split = torch.Tensor(s)\n\
    \  -- The number of words, and the size of the vectors that we have\n  local num_words\
    \ = str_split.size(1)\n  -- We'll go through each word individually\n  for i =\
    \ 1, num_words do\n    -- If the word is longer than 1 character\n    if str_split:size(i)\
    \ > 1 then\n      -- We don't want words like 'I' or 'a'\n      if str_split:size(i)\
    \ ~= 1 then\n        -- The actual word\n        local word = str_split:index(1,\
    \ i)\n        -- If the word is just whitespace then we skip it\n        if word\
    \ == \"\" then\n          -- This is how we know a word is finished\n        \
    \  words[i] = nil\n        else\n          -- We add it to the words vector\n\
    \          table.insert(words, word)\n        end\n      end\n    end\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnr9bxc98.lua:10:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmpnr9bxc98.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnr9bxc98.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = s:gsub(\"[,| ]+\", \" \"):gsub(\"\
    ^ *| *$\", nil)\n    words = words and words:gsplit(\" \") or nil\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1dfcex9n.lua:7:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp1dfcex9n.lua:7: in local 'candidate'\n\t/tmp/tmp1dfcex9n.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqluhz9wj.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpqluhz9wj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, '([^,]+)')\n  if\
    \ words then\n    for i = 1, #words - 1 do\n      words[i] = words[i]\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjeg6hmdm.lua:9:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpjeg6hmdm.lua:9: in local 'candidate'\n\t/tmp/tmpjeg6hmdm.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = string.gmatch(s, \"([^,]+)\") --\
    \ split string into words\n    if words then\n        words = words[1] -- remove\
    \ first word (empty)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqftrjmwp.lua:9:\
    \ attempt to index a function value (local 'words')\nstack traceback:\n\t/tmp/tmpqftrjmwp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqftrjmwp.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local w = {}\n  for w in string.gmatch(s, \"[^,]+\"\
    ) do end\n  return w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb_pyg04.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpgb_pyg04.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return string.gsub(s, '([^%s]+)' % table.concat({',',\
    \ ' '}, ','), '%(%1)+', '\\0')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu_aomuti.lua:7:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpu_aomuti.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpu_aomuti.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = { }\n    \n    for w in string.gmatch(s,\
    \ \"([^,]+)\") do\n        table.insert(words, w)\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxukozsbg.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return string.gmatch(s, \",?([^,]*)\")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3ktl2xu.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0xd2e490\n\
    stack traceback:\n\t/tmp/tmpa3ktl2xu.lua:13: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, \"[^,]+\")\n  words\
    \ = {[#words]:gsub(\"^%s*\", \"\"), words}\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcgs63add.lua:8: '=' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local str = {}\n  for w in string.gmatch(s, \"([^,]+)(.*)\"\
    ) do\n    table.insert(str, w)\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_yfj7la.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\"}\nstack\
    \ traceback:\n\t/tmp/tmpt_yfj7la.lua:17: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local splitter = string.gmatch\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_vez3tz0.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = string.gsub(s, \"[^ ]+\", \"\")\n\t\
    words = string.gsub(words, \", \", \" \")\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n_dnwai.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"    \"\nstack\
    \ traceback:\n\t/tmp/tmp8n_dnwai.lua:15: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzgp5222.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpgzgp5222.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = string.split(s, \" \")\n    table.sort(words)\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes6xm789.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpes6xm789.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpes6xm789.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwofi28cu.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpwofi28cu.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = s.split(', ') or s.split(' ')\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpto69cpn_.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpto69cpn_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpto69cpn_.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j_1pnqh.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp0j_1pnqh.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  local words = string.gmatch(s,\
    \ \",+\")\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n6gtrqe.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0xb264c0\n\
    stack traceback:\n\t/tmp/tmp2n6gtrqe.lua:15: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qwlilkw.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp7qwlilkw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\t-- Your code here\n\treturn {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lquzm90.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp1lquzm90.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  assert(type(s) == \"string\")\n  s = s:trim()\n\
    \  s = s:gsub(\"%w+\", \"\"):gsub(\"%d+\", \"\")\n  s = s:gsub(\"%d+\", \"\")\n\
    \  s = s:gsub(\"%w+\", \"\")\n  s = s:gsub(\"%s+\", \"\")\n  return s:gsub(\"\
    ,+\", \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8enfxpdd.lua:8:\
    \ attempt to call a nil value (method 'trim')\nstack traceback:\n\t/tmp/tmp8enfxpdd.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp8enfxpdd.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = { }\n\tfor word in s:gmatch(\"[%w-.,]+\"\
    ) do\n\t\ttable.insert(words, word)\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst9hetiq.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpst9hetiq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = s:gsub(\"[%a]+\", \" \")\n  s = s.split(', ')\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6d6teb3r.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp6d6teb3r.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp6d6teb3r.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  assert(type(s) == 'string', 'Input must be a string.')\n\
    \  local words = string.gsub(s, '[,[\\s]+]', '').split('\\n')\n  local words_list\
    \ = {}\n  for _, word in pairs(words) do\n    words_list[#words_list+1] = word\n\
    \  end\n  return words_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp376rfyi0.lua:8: invalid escape sequence near ''[,[\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tassert(type(s) == \"string\")\n\tassert(s ~= \"\"\
    )\n\tlocal words = string.gmatch(s, \"(%w+[,.?!;:])\")\n\treturn words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25cm6fzk.lua:16:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x19c4560\n\
    stack traceback:\n\t/tmp/tmp25cm6fzk.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    return table.remove_by_ref(s:gmatch(\"[^ ]+\"\
    ), nil)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiypof5yt.lua:7:\
    \ attempt to call a nil value (field 'remove_by_ref')\nstack traceback:\n\t/tmp/tmpiypof5yt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpiypof5yt.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = {}\n    local word_list = {}\n \
    \   for _,word in string.gmatch(s, \"[^,]+\") do\n        table.insert(word_list,\
    \ word)\n    end\n    return word_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6zezgi0.lua:18:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp_6zezgi0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = s.Split(\" ,\")\n\ttable.insert(words,\
    \ nil)\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpptvvxljp.lua:7:\
    \ attempt to call a nil value (field 'Split')\nstack traceback:\n\t/tmp/tmpptvvxljp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpptvvxljp.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  \n  local words = s..\",\"\n\
    \  local table = {}\n  for i = 1, #words do\n    table[i] = words[i]\n  end\n\
    \  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzv2o7vq.lua:20:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpbzv2o7vq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, \"[^%s]+\")\n  if\
    \ words == nil then return {s} end\n  table.sort(words)\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9__qni9.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpn9__qni9.lua:9: in local 'candidate'\n\t/tmp/tmpn9__qni9.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dhyictt.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp9dhyictt.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local word_array = s:gmatch(\"[%S]+\")\n  -- print(word_array,\
    \ \"\\n\")\n  return word_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pmrzlyg.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0xe75490\n\
    stack traceback:\n\t/tmp/tmp7pmrzlyg.lua:15: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyjafw15.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpzyjafw15.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = {}\n    local words = string.gmatch(s,\
    \ \",\") or {}\n    words = words or string.gmatch(s, \" \") or {}\n    for i\
    \ = 1, #words do\n        words[i] = string.gsub(words[i], \" \", \"\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_8n5wk3p.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp_8n5wk3p.lua:10: in local 'candidate'\n\t/tmp/tmp_8n5wk3p.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return string.split(s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1e08j0q.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpq1e08j0q.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpq1e08j0q.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = \"\"\n  for w in string.gmatch(s,\
    \ \"[^, ]+\") do\n    words = words .. w .. \" \"\n  end\n  words = words:gsub(\"\
    ^ \", \"\")\n  words = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"^ \",\
    \ \"\")\n  words = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"^ \", \"\"\
    )\n  words = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"^ \", \"\")\n  words\
    \ = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"\
    ^ \", \"\")\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h47khxk.lua:27:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi my name\
    \ is John \"\nstack traceback:\n\t/tmp/tmp_h47khxk.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\ts = s:gsub(\"([^,]+)\",function(x)\n\t\treturn x:lower()\n\
    \tend)\n\ts = s:gsub(\"[,]+\",\" \")\n\tlocal words = s:split(\" \")\n\tfor i=1,#words\
    \ do\n\t\twords[i] = words[i]:lower()\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrvzoya2.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpdrvzoya2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpdrvzoya2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here!\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmsn4fod.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpnmsn4fod.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Initialize your variables here.\n  local words\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpon1e_12s.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n   local words = {}\n   for w in string.gmatch(s,\
    \ \",?([^,]+)(,.*)?\") do\n      table.insert(words, w)\n   end\n   return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgth90gdp.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpgth90gdp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\ts = string.gsub(s, '([%w,]+)', '%1 ')\n\ts = string.gsub(s,\
    \ '([%w'..string.gsub(string.gsub(',', ''), '%[%w]', string.quote)..'-%w])', string.quote)\n\
    \ts = string.gsub(s, '([%w']..string.gsub(string.gsub(',', ''), '%[%w]', string.quote)..'-%w])',\
    \ string.quote)\n\tlocal _, words = string.gfind(s, '[%w]')\n\treturn words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnpgz7az1.lua:9: ')' expected near ']'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal split = {}\n\tfor word in string.gmatch(s,\
    \ \"[^,]+\") do\n\t\ttable.insert(split, word)\n\tend\n\treturn split\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4zsiyno.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmpz4zsiyno.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ndoaoha.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmp_ndoaoha.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = \"\"\n  for w in s:gmatch(\"[%S]+\"\
    ) do\n    words = words .. w .. \", \"\n  end\n  return words:sub(1, -2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmportmiuny.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi,, my, name,\
    \ is, John,\"\nstack traceback:\n\t/tmp/tmportmiuny.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = \"\"\n  local word_count = 1\n  --\
    \ Iterate through the string and record all the words\n  for word in string.gmatch(s,\
    \ \",*\") do\n    words = words .. word .. \" \"\n    word_count = word_count\
    \ + 1\n  end\n  -- Strip last character\n  if string.len(s) > 0 then\n    words\
    \ = string.sub(words, 1, string.len(s) - 1)\n  end\n  return string.gmatch(words,\
    \ \" \") -- Return an array of all the words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzthghi5t.lua:24:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x2427f10\n\
    stack traceback:\n\t/tmp/tmpzthghi5t.lua:24: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for word in s:gmatch(\"[^,]+\"\
    ) do words[#words + 1] = word end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn87guyil.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmpn87guyil.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n   -- Write your function here\n   assert(s ~= nil,\
    \ 'The argument s is nil.')\n   assert(s ~= '', 'The argument s is an empty string.')\n\
    \   return string.gsub(s,' ',''):gsub(',+',' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuz1h4wpi.lua:16:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi mynameisJohn\"\
    \nstack traceback:\n\t/tmp/tmpuz1h4wpi.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, '[%[(%w?),]^%]', function(x)\n\
    \    local words = { }\n    table.insert(words, x)\n    local last = x\n    if\
    \ last:len() == 1 then\n      local word = last:lower()\n      -- We want strings\
    \ surrounded by letters.\n      if word:byte() > 64 and word:byte() < 128 then\n\
    \        -- If the first letter is a letter or a number\n        if word:byte()\
    \ >= 32 and word:byte() <= 126 then\n          -- If the last letter is a letter\
    \ or a number\n          if word:byte() >= 32 and word:byte() <= 126 then\n  \
    \          table.insert(words, word:sub(1, word:len() - 1))\n          else\n\
    \            table.insert(words, word)\n          end\n        else\n        \
    \  -- If it's the only letter\n          if word:byte() >= 32 and word:byte()\
    \ <= 126 then\n            table.insert(words, word:sub(1, word:len() - 1))\n\
    \          else\n            table.insert(words, last)\n          end\n      \
    \  end\n      end\n    end\n    return table.concat(words)\n  end, 'g')\n  return\
    \ string.gsub(s, '[,]', ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr7p4a5j6.lua:7:\
    \ bad argument #4 to 'gsub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpr7p4a5j6.lua:7: in local 'candidate'\n\t/tmp/tmpr7p4a5j6.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local list = s:gmatch(\"([^,]+)\")\n  return list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75rrz0vu.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x149c4a0\n\
    stack traceback:\n\t/tmp/tmp75rrz0vu.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local word_list = {}\n    for w in s:gmatch('(%w+)(%S+)')\
    \ do\n        word_list[#word_list + 1] = {\n            string = w,\n       \
    \     number = tonumber(w)\n        }\n    end\n    return word_list\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9gse4ne.lua:20:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {{string=\"\
    Hi\"}, {string=\"m\"}, {string=\"nam\"}, {string=\"i\"}, {string=\"Joh\"}}\nstack\
    \ traceback:\n\t/tmp/tmpy9gse4ne.lua:20: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = s.split(\", \")\n  return words\n\
    end\n</code>\nAnd lastly your function to call words_string in your main function\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy0f0xazq.lua:10: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local result = {}\n    local i, j = 1, 1\n   \
    \ while j <= #s do\n        if s[i] ~= ' ' and s[i] ~= ',' then\n            result[#result\
    \ + 1] = s[i]\n        end\n        i = i + 1\n        j = j + 1\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tgkiu19.lua:22:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp5tgkiu19.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, \"[%!.,]+\", \" \")\n  local\
    \ words = {}\n  local last = \"\"\n  for i = 1, string.len(s) do\n    if s[i]\
    \ ~= \" \" then\n      last = s[i]\n      words[#words + 1] = last\n    elseif\
    \ s[i] == \" \" then\n      words[#words + 1] = last .. \"\\n\"\n      last =\
    \ \"\"\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxljbt5w.lua:25:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpmxljbt5w.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoivp4u3e.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpoivp4u3e.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, \"[%[(%w+)%)]]\", function(w)\
    \ return w end)\n  return string.gsub(s, \",\", \" \") or \"\"\nend\n</textarea></form>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplcym13bo.lua:10: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtty1l_f.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpvtty1l_f.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for w in string.gmatch(s, \"\
    ([^,]+)(,|$)\") do\n    table.insert(words, w)\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg_797rl.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpyg_797rl.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = { }\n\t\n\ts = string.gsub(s, \"([,\\\
    \\s]+)\", function (x)\n\t\ttable.insert(words, x:lower())\n\tend)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgo9koq2a.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, \"%w+\", \" \");\n  s = string.gsub(s,\
    \ \"%s\", \" \");\n  s = string.gsub(s, \"%s+\", \" \");\n  s = string.gsub(s,\
    \ \"[,]+\", \" \");\n  s = string.gsub(s, \"[,]\", \" \");\n  s = string.gsub(s,\
    \ \"[,]$\", \" \");\n  return string.gsub(s, \"[,]+\", \" \");\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7zvcy86.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"   \"\nstack\
    \ traceback:\n\t/tmp/tmpq7zvcy86.lua:19: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, \"[,\\\\s]+\", \" \")\n  return\
    \ string.gmatch(s, \"[^%s]+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmwx1dbf.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0xc5b500\n\
    stack traceback:\n\t/tmp/tmpsmwx1dbf.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = { }\n  for word in string.gmatch(s,\
    \ \"([^,]+)\") do\n    table.insert(words, word)\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2g690n7r.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmp2g690n7r.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = s.Split(\" \")\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3zzoonzw.lua:7:\
    \ attempt to call a nil value (field 'Split')\nstack traceback:\n\t/tmp/tmp3zzoonzw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3zzoonzw.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = s:gmatch('([^,]*)')\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcdbu3zg.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x247c490\n\
    stack traceback:\n\t/tmp/tmpqcdbu3zg.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\t-- Return the array of words in the string as a\
    \ list.\n\tlocal words = { }\n\tfor word in string.gmatch(s, \"[%w ,]+\") do table.insert(words,\
    \ word) end\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob658mo4.lua:16:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi, my name\
    \ is John\"}\nstack traceback:\n\t/tmp/tmpob658mo4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqz5y8cfl.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpqz5y8cfl.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return s:gsub(\"([^,]+)\", \" \"):gsub(\"([^ ,]+)\"\
    , \" \"):trim()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmgcv7eiw.lua:7:\
    \ attempt to call a nil value (method 'trim')\nstack traceback:\n\t/tmp/tmpmgcv7eiw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmgcv7eiw.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = s:match('^[%w-.,]+%w$') or return\
    \ nil\n\treturn words:gsub(',', ' '):gsub(' ', ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm1jd7xpw.lua:7: unexpected symbol near 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, \"[, ]+\", \",\")\n  return string.gmatch(s,\
    \ \"[^,]+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7569fvcn.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0xbbf690\n\
    stack traceback:\n\t/tmp/tmp7569fvcn.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = s:lower()\n  local words = s:gmatch(\" %s*(.-)%s*\"\
    , true)\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi95g0at3.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x1919550\n\
    stack traceback:\n\t/tmp/tmpi95g0at3.lua:15: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- The order of the words doesn't matter, so split\
    \ on \",\" or \" \" first\n  -- The order of the words doesn't matter, so split\
    \ on \",\" or \" \" first\n  s = s:gsub(\",\", \" \"):gsub(\" \", \",\")\n  --\
    \ Split on \", \" (which separates each word)\n  local words = s:gsub(\"%w+\"\
    , function(w)\n    w = w:lower()\n    local words = { w }\n    return table.concat(words,\
    \ \"_\")\n  end):gsub(\"_%w\", function(w)\n    w = w:lower()\n    table.insert(words,\
    \ w)\n    return \"\"\n  end)\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc09ebn7.lua:26:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"hi,,my,name,is,john\"\
    \nstack traceback:\n\t/tmp/tmplc09ebn7.lua:26: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\ts = s:lower() or \"\"\n\tlocal words = s.split (\"\
    ,\")\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprye9g_zu.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmprye9g_zu.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmprye9g_zu.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = s\n  local delim = \", \"\n  -- Replace\
    \ commas and trim spaces\n  -- Note: This replaces multiple spaces with a single\
    \ space\n  -- But it also replaces commas and spaces within words\n  -- For example,\
    \ if we pass in \"Hello World\" as the input,\n  -- This returns: \"HelloWorld\"\
    \n  words = string.gsub(words, \"[\" .. delim .. \"]+\", \" \")\n  -- Replace\
    \ multiple spaces with single space\n  -- This trims all leading and trailing\
    \ spaces but preserves the multiple spaces\n  -- For example, if we pass in \"\
    \   Hello World\" as the input,\n  -- This returns: \"Hello World\"\n  words =\
    \ string.gsub(words, \"[\" .. \" \" .. \"]+\", \" \")\n  -- Split words by commas\n\
    \  -- This splits words by commas\n  -- For example, if we pass in \"One, two,\
    \ three, four, five, six\" as the input,\n  -- This returns: [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"]\n  words = string.gsub(words, \" \"\
    \ .. delim .. \",\", \", \")\n  -- Split words by spaces\n  -- This splits words\
    \ by spaces\n  -- For example, if we pass in \"One two three four five six\" as\
    \ the input,\n  -- This returns: [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n  words = string.gsub(words, \"[\" .. delim .. \"]+\", \" \")\n  --\
    \ Split words by one or more spaces\n  -- This splits words by one or more spaces\n\
    \  -- For example, if we pass in \"One two three four five six\" as the input,\n\
    \  -- This returns: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n  words = string.gsub(words, \" \" .. delim .. \"?\", \", \")\n  -- Split words\
    \ by one or more commas\n  -- This splits words by one or more commas\n  -- For\
    \ example, if we pass in \"One, two, three, four, five, six\" as the input,\n\
    \  -- This returns: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n  words = string.gsub(words, \" \" .. delim .. \",?\", \", \")\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3dy_eaz.lua:46:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi my name\
    \ is John\"\nstack traceback:\n\t/tmp/tmpw3dy_eaz.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, \"([^ ,]+)\", nil)\n\
    \  if #words == 0 then\n    words = {}\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfcvvieoo.lua:8:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpfcvvieoo.lua:8: in local 'candidate'\n\t/tmp/tmpfcvvieoo.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = string.gmatch(s, '([^,]+)')\n  \
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptuq58q7r.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x25084b0\n\
    stack traceback:\n\t/tmp/tmptuq58q7r.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal str = {}\n\tfor str in string.gmatch(s, '[^\
    \ ]+') do\n\t\ttable.insert(str, str)\n\tend\n\treturn str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptivjk_9d.lua:9:\
    \ bad argument #1 to 'insert' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmptivjk_9d.lua:9: in local 'candidate'\n\t/tmp/tmptivjk_9d.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local function explode(str)\n    local words = {}\n\
    \    local last = 0\n    while true do\n      local idx = string.find(str, \"\
    ,\", last)\n      if idx then\n        table.insert(words, str:sub(last, idx-1))\n\
    \        last = idx + 1\n      else\n        table.insert(words, str:sub(last))\n\
    \        return words\n      end\n    end\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo4jticce.lua:33: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx96dvkyv.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpx96dvkyv.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words\n    if string.find(s, \",\") then\n\
    \        words = string.gsub(s, \"([^ ]+)\", \" \")\n    else\n        words =\
    \ string.gsub(s, \"([^,]+)\", \" \")\n    end\n    words = string.gsub(words,\
    \ \"[ ]+\", \" \")\n    words = string.gsub(words, \"[,]+\", \" \")\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_zrn45j.lua:21:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \" \"\nstack\
    \ traceback:\n\t/tmp/tmpv_zrn45j.lua:21: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp415x3it4.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp415x3it4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = string.gsub(s, \"[,( )]\", \"\")\n\
    \twords = string.gsub(words, \"[%a][%a]+\", \"%a\")\n\treturn string.gsub(words,\
    \ \"[%w]\", function(x)\n\t\treturn string.gsub(x, \"([%w_.%-]*)(%.*)\", function(a,\
    \ b, c) return b..string.lower(c) end)\n\tend)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpumxp_sgs.lua:8:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpumxp_sgs.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpumxp_sgs.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = string.gmatch(s, \"[^,]+\")\n\tfor\
    \ i = 1, #words do\n\t\twords[i] = words[i] or \"\"\n\tend\n\treturn words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfmippp8l.lua:8:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpfmippp8l.lua:8: in local 'candidate'\n\t/tmp/tmpfmippp8l.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3gub1iq.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmpp3gub1iq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return string.gmatch(s, \" ?([%s]+)\", true)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98ch6y_q.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x1471470\n\
    stack traceback:\n\t/tmp/tmp98ch6y_q.lua:13: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local function words(str, list)\n    list = list\
    \ or {}\n    str:gsub('([^%s]+)', function(c) list:insert(c) end)\n    return\
    \ list\n  end\n  \n  local list = {}\n  local last_comma = nil\n  s:gsub('([^%s]+)',\
    \ function(c) last_comma = c end)\n  last_comma:gsub('(,|$)', function(c) list:insert(c)\
    \ end)\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bpexndx.lua:23:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp9bpexndx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = s:gsub(\"[,\\\\s]\", \"\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeq345joy.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = s:gsub(\"(^|[, ])([^,]+)($|[, ])\", \"%2\")\
    \ -- remove commas and spaces from string\n  s = s:gsub(\"[, ]+\", \" \") -- split\
    \ by space\n  return string.gmatch(s, \"([^%s]+)\") -- split by non-space\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_z_jy4_.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x12b5600\n\
    stack traceback:\n\t/tmp/tmpc_z_jy4_.lua:15: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    -- Remove whitespace\n    s = gsub(s, \" \", \"\
    \")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplim0qp84.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for word in string.gmatch(s,\
    \ \"([^,]+?)\", 1) do\n    table.insert(words, word)\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0izt77z.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpm0izt77z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words\n\t-- Explode string into words\n\t\
    words = string.explode(\",\", s)\n\t-- Return array of words\n\treturn words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptnp4ax9m.lua:9:\
    \ attempt to call a nil value (field 'explode')\nstack traceback:\n\t/tmp/tmptnp4ax9m.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptnp4ax9m.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    -- Remove spaces and commas from string\n    s\
    \ = s:gsub('%w+[,.]', '') -- Remove any words with commas and periods\n    \n\
    \    -- Split into words\n    local words = {}\n    s:gsub('([^,.]+)[,.]?', function(word)\
    \ table.insert(words, word) end)\n    \n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp883y9a6a.lua:20:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\" my name\
    \ is John\"}\nstack traceback:\n\t/tmp/tmp883y9a6a.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65j9709i.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi, my name\
    \ is John\"\nstack traceback:\n\t/tmp/tmp65j9709i.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  local delim = \",\"\n  for w\
    \ in s:gmatch(\"([^\" .. delim .. \"]+)\") do\n    table.insert(words, w)\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpij2t6u8r.lua:18:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmpij2t6u8r.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = \"\"\n  for w in string.gmatch(s,\
    \ \"([^,]+)\") do\n    words = words .. w .. \" \"\n  end\n  return words:gsub(\"\
    ^ +\", \"\"):gsub(\"$ +\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokx5aqel.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi  my name\
    \ is John \"\nstack traceback:\n\t/tmp/tmpokx5aqel.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = s.Split(\" ,\")\n    words[#words]:sub(1,\
    \ #words[#words]-1)\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7j_r7thv.lua:7:\
    \ attempt to call a nil value (field 'Split')\nstack traceback:\n\t/tmp/tmp7j_r7thv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7j_r7thv.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\t-- Your code here\n\treturn {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zl9vkhf.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp6zl9vkhf.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = \"\"\n  -- In Lua 5.2 string.gmatch\
    \ returns an array of tables.\n  for w in string.gmatch(s, \"[%w()]+\") do\n \
    \   words = words .. w .. \" \"\n  end\n  return words:match(\"^%s*(%d+)%s*$\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8s2cw2l.lua:18:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmph8s2cw2l.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here!\n  local words = string.split(s,\
    \ \",\")\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp18c4tugp.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp18c4tugp.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp18c4tugp.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- +++your code here+++\n  local words = string.gmatch(s,\
    \ \" [%w_,]+\")\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1n02r0r.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x15a84b0\n\
    stack traceback:\n\t/tmp/tmpb1n02r0r.lua:15: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for _, word in string.gmatch(s,\
    \ \"[^, ]+\") do\n    table.insert(words, word)\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurq53jmr.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpurq53jmr.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Return the string as a list of words.\n  -- The\
    \ list will contain only non-empty strings.\n  -- The result will be sorted.\n\
    \  return table.sort(\n    string.gmatch (\n      s,\n      \"[^,]+\"\n    ))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5fz6r5c6.lua:10:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp5fz6r5c6.lua:10: in local 'candidate'\n\t/tmp/tmp5fz6r5c6.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  local s = string.gsub(s, \"\
    [, ]+\", \" \")\n  return string.gmatch(s, \"[^,]+\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjo6rz59.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x1247590\n\
    stack traceback:\n\t/tmp/tmpbjo6rz59.lua:15: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = s:gmatch(\"(%w+)\")\n  local new_words\
    \ = {}\n  for i = 1, #words do\n    new_words[#new_words + 1] = words[i]\n  end\n\
    \  return new_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0tjk8_hj.lua:9:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp0tjk8_hj.lua:9: in local 'candidate'\n\t/tmp/tmp0tjk8_hj.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  local words = string.gsub(s,\
    \ \" \", \"\"):gsub(\",\", \"<w>\"):gsub(\"<w>\", \"%w\"):gsub(\"%w\", \"%w\"\
    )\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplj_yemnb.lua:8:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmplj_yemnb.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmplj_yemnb.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, \"[%w'-]+\")\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8co4yru.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x1f294d0\n\
    stack traceback:\n\t/tmp/tmpu8co4yru.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = s.split(\", \")\n    local words\
    \ = {}\n    for _, word in pairs(words) do\n        words[#words + 1] = word\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_kkhzq3k.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp_kkhzq3k.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_kkhzq3k.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local a = {}\n    for word in string.gmatch(s,\
    \ \"([^,]+)(,|$)\") do\n        a[#a + 1] = word\n    end\n    return a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_8b278f.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp1_8b278f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return s.split( ',' ) or s.split( ' ' ) \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5m_nedts.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp5m_nedts.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5m_nedts.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n   local words = { }\n   for w in string.gmatch(s,\
    \ \"([^,]+)|([^ ]+)\") do\n      if w ~= \"\" then\n         table.insert(words,\
    \ w)\n      end\n   end\n   return words\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=lua-table,lua |>\nI guess this is what you want:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppfpxq0hv.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Write your function here!\n  return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu6d19u5.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpxu6d19u5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return string.gmatch(s, \"([^,]+)\")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie_uy1y5.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x12ac4e0\n\
    stack traceback:\n\t/tmp/tmpie_uy1y5.lua:13: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Write your code here\n  return nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9fae3bw.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpm9fae3bw.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do table.insert(words, word) end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20crm_uy.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmp20crm_uy.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = s.split(\"[, ]+\")\n    table.insert(words,\
    \ \"\")\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qpcuycb.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp5qpcuycb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5qpcuycb.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local result = {}\n  for s in string.gmatch(s, \"\
    [^,]+\") do\n    table.insert(result, s)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jnrqx7k.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmp3jnrqx7k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\t-- Split string on commas.\n\t-- Split result to\
    \ words (remove commas)\n\t-- Rejoin word with commas\n\ts = s:gsub(',', ' ',\
    \ 'g')\n\ts = s:gsub(' ', ' ')\n\treturn s:gsub(' %w+', ' %1')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfx8nwg0_.lua:10:\
    \ bad argument #3 to 'gsub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpfx8nwg0_.lua:10: in local 'candidate'\n\t/tmp/tmpfx8nwg0_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\t-- Your code here\n\treturn nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ih2a7zs.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp9ih2a7zs.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposet13av.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmposet13av.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, \"[%z %,]+\", \" \")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_9hh9cbd.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = { }\n\tfor _, word in string.gmatch(s,\
    \ \"([^,]+)(,|$)\") do\n\t\ttable.insert(words, word)\n\tend\n\treturn words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvixrcrhy.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpvixrcrhy.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = { }\n\tfor word in s:gmatch(\"[^ ]+\"\
    ) do table.insert(words, word) end\n\treturn words\nend\n</cell>\n<text>\nProblem\
    \ 10\nComplete the function below that takes a list of numbers and returns the\
    \ sum of the numbers.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpedz2son9.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local strArr = string.split(s, \",\")\n  local arr\
    \ = {nil}\n  for i = 1, #strArr do\n    table.insert(arr, strArr[i])\n  end\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkuflfi0c.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpkuflfi0c.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkuflfi0c.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = string.gmatch(s, \"([^,]+)\", nil,\
    \ \"c\")\n    if words then\n        return words\n    end\n    return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj4uudr8.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x8ed590\n\
    stack traceback:\n\t/tmp/tmpoj4uudr8.lua:17: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, \"[,\\\\s]\", \"\")\n  return\
    \ string.gmatch(s, \"[^%s]+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshdioqjh.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x24e34f0\n\
    stack traceback:\n\t/tmp/tmpshdioqjh.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = s.Words(2, #s - 1)\n\tassert(#words\
    \ > 0, \"Invalid input: empty string\")\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp92odl9z2.lua:7:\
    \ attempt to call a nil value (field 'Words')\nstack traceback:\n\t/tmp/tmp92odl9z2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp92odl9z2.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n   s = string.gsub(s, \",\", \" \")\n   s = string.gsub(s,\
    \ \" \", \"\")\n   s = string.gsub(s, \",\", \" \")\n   return string.gmatch(s,\
    \ \"%w+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsss6yuz0.lua:16:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x1aa35c0\n\
    stack traceback:\n\t/tmp/tmpsss6yuz0.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Write your code! This may look like a lot of\
    \ code to you, but coding is\n  -- an important part of writing successful software!\
    \ As we always say, this\n  -- is a very important skill for any software developer.\n\
    \  -- When you have finished this, you can return to the challenge by clicking\n\
    \  -- on the \"Check\" button at the top of the page.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwpzvzk8h.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = {}\n  local i = 0\n  while true do\n\
    \    i = i + 1\n    if i > #s then\n      break -- we're done\n    end\n    local\
    \ pos = find(s, ',', i)\n    if pos == nil then\n      pos = find(s, ' ', i)\n\
    \    end\n    if pos == nil then\n      pos = #s\n    end\n    table.insert(words,\
    \ sub(s, i, pos))\n    i = pos + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptrk9fw9l.lua:14:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmptrk9fw9l.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmptrk9fw9l.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return str:split(s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnm25s4c8.lua:7:\
    \ attempt to index a nil value (global 'str')\nstack traceback:\n\t/tmp/tmpnm25s4c8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnm25s4c8.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = s.split(\" \");\n    for idx = 1,\
    \ #words do\n        words[idx] = tostring(words[idx]);\n    end\n    return words;\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1diu_fkk.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp1diu_fkk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1diu_fkk.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\n  local t = {}\n  local words\
    \ = s:gmatch(\"([^,]+)(,[^,]+)*\")\n  table.insert(t, words)\n  return t\nend\n\
    print(words_string(\"Hi, my name is John\"))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "table: 0x1b108b0\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpqmybi14_.lua:18: expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    }\nactual: {function: 0x1b59530}\nstack traceback:\n\t/tmp/tmpqmybi14_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n\tlocal words = nil\n\ts = s.strip()\n\ts = s:gsub(\"\
    [%[%^ ]%]\", \"\")\n\ts = s:gsub(\"[%[ ]%]\", \"\")\n\ts = s:gsub(\"[%[ ]%]\"\
    , \"\")\n\ts = s:gsub(\"[%[ ]%]\", \"\")\n\ts = s:gsub(\",\", \" \")\n\ts = s:gsub(\"\
    [%[%^ ]%]\", \"\")\n\ts = s:gsub(\"[%[ ]%]\", \"\")\n\ts = s:gsub(\"[%[ ]%]\"\
    , \"\")\n\ts = s:gsub(\"[%[ ]%]\", \"\")\n\twords = s:split(\" \")\n\treturn words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ul15ycn.lua:8:\
    \ attempt to call a nil value (field 'strip')\nstack traceback:\n\t/tmp/tmp4ul15ycn.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4ul15ycn.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, \"([^,]*)\")\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgkq1dog.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x13b0480\n\
    stack traceback:\n\t/tmp/tmpqgkq1dog.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = \"\"\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    words = words .. word .. \", \"\n  end\n  return string.gmatch(words,\
    \ \"%w+\") -- We return an array of words.\nend\nprint(words_string(\"Hi, my name\
    \ is John\")) -- Hi, my name is John\nprint(words_string(\"One, two, three, four,\
    \ five, six\")) -- One, two, three, four, five, six\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "function: 0x70d260\nfunction: 0x710690\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpehn8zoie.lua:19: expected: {\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}\nactual: function: 0x75abd0\nstack traceback:\n\t/tmp/tmpehn8zoie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = s:gsub(\"([^ ,]+)\", \" \"):gsub(\"\
    ,\", \" \")\n    local result = {word}\n    for i = 1, #words do\n        result[#result\
    \ + 1] = words[i]\n    end\n    return result\nend\n</cell>\n<text>\n3. Write\
    \ a function that returns the last n elements of a list.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuufmc368.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, '[%c%p]+', ' ')\n  s = string.gsub(s,\
    \ '[%c%p]+', ' %%%1$t')\n  local ts = { }\n  assert(s:gmatch('%1$t %1$t'), s)\n\
    \  local i = 1\n  for s in s:gmatch('%%%1$t') do\n    ts[i + 1] = s\n    i = i\
    \ + 1\n  end\n  assert(i == #ts, i)\n  return ts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n1\nstack\
    \ traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = \"\"\n  for word in string.gmatch(s,\
    \ \",([^,]+)\") do words = words .. word end -- add each word to a words-array\
    \ with a comma\n  return string.gmatch(s, \" \") -- add each space-separated word\
    \ to the words-array with a space\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnoq689u.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x1b9d9a0\n\
    stack traceback:\n\t/tmp/tmpjnoq689u.lua:15: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local w = { }\n    for w in string.gmatch(s, \"\
    ([^,]+)(,|$)\") do\n        w[#w+1] = w\n    end\n    return w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmjaifh6.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmphmjaifh6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, \"([^,]+)\") --Split\
    \ on any number of commas.\n  local arr = {}\n  for i=1,#words do --Iterate over\
    \ all the words\n    table.insert(arr,words[i]) --Append the word to the array\n\
    \  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmffe4cl5.lua:9:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpmffe4cl5.lua:9: in local 'candidate'\n\t/tmp/tmpmffe4cl5.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local t = {}\n  for _,v in string.gmatch(s, \"[^,]+\"\
    ) do\n    table.insert(t, v)\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v41avuk.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp9v41avuk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gmatch(s, '([^,]+)') -- Split\
    \ on commas\n  local result = {}\n  for _,v in pairs(words) do\n    result[#result\
    \ + 1] = pony.string.split(v)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf3rc2z11.lua:9:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpf3rc2z11.lua:9: in local 'candidate'\n\t/tmp/tmpf3rc2z11.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    return s:match(\"([^,]+)\"):gsub(\"%w\", function(c)\n\
    \        return c\n    end):gsub(\",+\", \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfr6wt7q.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"Hi\"\nstack\
    \ traceback:\n\t/tmp/tmpvfr6wt7q.lua:15: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.split(s, \" \")\n  table.sort(words)\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi5_67geh.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpi5_67geh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpi5_67geh.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  s = string.gsub(s, '[%[(%[%)]%[,)]]', '')\n  s =\
    \ string.gsub(s, '[,]', ' ')\n  s = string.gsub(s, '[%[%]]', ' ')\n  s = string.gsub(s,\
    \ '[%]', ' ')\n  s = string.gsub(s, '[%]%', ' ')\n  s = string.gsub(s, '%%%',\
    \ ' ')\n  s = string.gsub(s, '%%', ' ')\n  s = string.gsub(s, '%%', ' ')\n  s\
    \ = string.gsub(s, '%%%', ' ')\n  s = string.gsub(s, '%%%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', '\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5fy4xwsu.lua:55: unfinished string near '''\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local words = ''\n    local comma_idx = 1\n  \
    \  local word_idx = 1\n    while true do\n        -- Get next word\n        if\
    \ s[comma_idx] == ',' then\n            comma_idx = comma_idx + 1\n        end\n\
    \        if s[word_idx] == ' ' then\n            word_idx = word_idx + 1\n   \
    \     elseif s[word_idx] == ',' then\n            words = words .. ',' -- Add\
    \ a comma before the next word\n            comma_idx = comma_idx + 1\n      \
    \      word_idx = word_idx + 1\n        else\n            words = words .. s[word_idx]\n\
    \            word_idx = word_idx + 1\n        end\n        if s[word_idx] == ''\
    \ then\n            break\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_qvzsn9.lua:22:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpz_qvzsn9.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpz_qvzsn9.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  local words = string.gsub(s,\" \",\"\")\n  return\
    \ string.gsub(words,\",\",\"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9by6bis.lua:14:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: \"HimynameisJohn\"\
    \nstack traceback:\n\t/tmp/tmpl9by6bis.lua:14: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  return string.gmatch(s, \"[%w\\s]+\");\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp60amknd3.lua:7: invalid escape sequence near '\"[%w\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpouwyb7dd.lua:13:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpouwyb7dd.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- Write your logic here\n  -- This line will split\
    \ string by space character and return array of words\n  return string.gmatch(s,\
    \ \".+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdqb8zjq.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: function: 0x116d490\n\
    stack traceback:\n\t/tmp/tmpzdqb8zjq.lua:15: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n  -- The code below will return a list with the words\
    \ in s\n  -- Use a list comprehension to do so.\n  return [\n    for w in s:gmatch(\"\
    (%w+)\") do\n      w\n    end\n  ]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu260v5f0.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return an array of the words.\n\
    -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal\
    \ function words_string(s)\n    local tokens = s.split(\" ,\")\n    local words\
    \ = {}\n    for index, word in ipairs(tokens) do\n        words[#words + 1] =\
    \ word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg6y2103a.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpg6y2103a.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpg6y2103a.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
