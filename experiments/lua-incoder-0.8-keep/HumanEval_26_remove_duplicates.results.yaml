name: HumanEval_26_remove_duplicates
language: lua
results:
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ setmetatable(numbers, {__index = function() return numbers; end})\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tvh0uyj.lua:14:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp0tvh0uyj.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n   if\
    \ #numbers == 0 then\n      return nil\n   end\n   local result = {}\n   for i\
    \ = 1, #numbers do\n      local found = false\n      for j = 1, #result do\n \
    \        if result[j] == numbers[i] then\n            found = true\n         \
    \   break\n         end\n      end\n      if found then\n         table.insert(result,\
    \ numbers[i])\n      else\n         result[#result+1] = numbers[i]\n      end\n\
    \   end\n   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcelzm6hs.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpcelzm6hs.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, value in pairs(numbers) do\n    if\
    \ seen[value] then\n      output[#output + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhh4lxyl.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwhh4lxyl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ hash = {}\n  for i = 1, #numbers do\n    if hash[numbers[i]] then\n      table.remove(numbers,\
    \ i)\n    else\n      hash[numbers[i]] = true\n    end\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjzxy8spf.lua:11:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpjzxy8spf.lua:11: in local 'candidate'\n\
    \t/tmp/tmpjzxy8spf.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  for\
    \ i = 1, #numbers do\n    for j = 1, #numbers do\n      if numbers[i] == numbers[j]\
    \ then\n        table.insert(numbers, numbers[i])\n      end\n    end\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo9pmgc8.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 1, 2, 3, 4}\nstack traceback:\n\
    \t/tmp/tmpvo9pmgc8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ num_map = {}\n    local num_count = 1\n    for _, value in ipairs(numbers) do\n\
    \        if num_map[value] == nil then\n            num_map[value] = num_count\n\
    \            num_count = num_count + 1\n        else\n            num_count =\
    \ num_map[value]\n        end\n    end\n    for _, value in pairs(num_map) do\n\
    \        table.insert(numbers, value)\n    end\n    return numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v9599e7.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 1, 2, 3, 4}\nstack traceback:\n\
    \t/tmp/tmp9v9599e7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, number in ipairs(numbers) do\n        if seen[number]\
    \ == nil then\n            seen[number] = true\n            return number\n  \
    \      end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2b9fvp7k.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2b9fvp7k.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    --\
    \ Handle empty list\n    if #numbers <= 1 then\n        return numbers\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn24lf6ah.lua:9: 'end' expected (to close 'if' at line 7) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ new = {}\n\tlocal last_el\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpywbswn11.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[v] ~= nil then\n\
    \      result[v] = true\n    else\n      result[v] = true\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj309ebz.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpxj309ebz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ sorted_numbers = table.sort(numbers)\n  local unique_numbers = {}\n  for _,\
    \ value in ipairs(sorted_numbers) do\n    table.insert(unique_numbers, value)\n\
    \  end\n  return table.sort(unique_numbers)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a nil value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] then\n\
    \      result[value] = true\n    else\n      result[value] = true\n      result[value]\
    \ = true\n      result[value] = true\n      result[value] = true\n      result[value]\
    \ = true\n      result[value] = true\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17yvpvvs.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp17yvpvvs.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ unique_numbers = {}\n\tlocal index\n\tfor index, number in ipairs(numbers) do\n\
    \t\tif unique_numbers[number] == nil then\n\t\t\tunique_numbers[number] = true\n\
    \t\tend\n\tend\n\treturn unique_numbers, index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdce0g7iw.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpdce0g7iw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ last_seen = {}\n  local last_seen_so_far = {}\n  for _, item in pairs(numbers)\
    \ do\n    if last_seen[item] then\n      last_seen_so_far[#last_seen_so_far +\
    \ 1] = item\n    else\n      last_seen[item] = true\n      last_seen_so_far[#last_seen_so_far\
    \ + 1] = item\n    end\n  end\n  return last_seen_so_far\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v7pm39u.lua:24:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp4v7pm39u.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ new_numbers = {}\n\tfor i, n in ipairs(numbers) do\n\t\tif new_numbers[n] ==\
    \ nil then\n\t\t\tnew_numbers[#new_numbers + 1] = n\n\t\telse\n\t\t\tnew_numbers[#new_numbers]\n\
    \t\tend\n\tend\n\treturn new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2esas86b.lua:12: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ function count(x)\n    return x == nil or x == 0 or #numbers + 1 -- count of\
    \ x\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptybkw5m4.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, elem in ipairs(numbers) do\n        if seen[elem] == nil\
    \ then\n            seen[elem] = 1\n        else\n            seen[elem] = seen[elem]\
    \ + 1\n        end\n    end\n    return pairs(seen)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5oytpn94.lua:20:\
    \ expected: {}\nactual: function: 0x41b1a0\nstack traceback:\n\t/tmp/tmp5oytpn94.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ torch.sort(numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1k6njzm.lua:6:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmpl1k6njzm.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpl1k6njzm.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for k, v in pairs(numbers) do\n        unique[k] = true\n \
    \   end\n    return numbers[#numbers]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g9wrw3d.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp_g9wrw3d.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 0 then\n    return {}\n  end\n  local output = {}\n  for i = 1,\
    \ #numbers do\n    local key = numbers[i]\n    if output[key] then\n      output[key]\
    \ = output[key] or {}\n      table.insert(output[key], i)\n    end\n  end\n  local\
    \ count = #output\n  output[count] = nil\n  -- Reverse output to get rid of unused\
    \ elements\n  for i = #output, 1, -1 do\n    output[i - 1] = output[i]\n  end\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89tun5tl.lua:30:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp89tun5tl.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers <= 1 then\n    return numbers\n  else\n    local result = {}\n    for\
    \ i = 1, #numbers, 1 do\n      if result[numbers[i]] ~= nil then\n        -- Element\
    \ is in result already so remove it from result and continue.\n        table.insert(result,\
    \ numbers[i])\n      else\n        -- Element is not in result so add it.\n  \
    \      table.insert(result, numbers[i])\n      end\n    end\n    -- Add the remaining\
    \ elements to the result list which are not in the result list.\n    for i = #numbers,\
    \ 1, -1 do\n      table.insert(result, numbers[i])\n    end\n    return result\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnunxmii5.lua:31:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 4, 3, 2, 1}\nstack traceback:\n\
    \t/tmp/tmpnunxmii5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ sort(\n    table.concat(\n      select(\n        numbers,\n        function(x)\
    \ return table.remove_by_ref(x, 1) end,\n      ),\n      0,\n    ),\n    1,\n\
    \  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv7q9dyz5.lua:11: unexpected symbol near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if not result[value]\
    \ then\n      result[value] = true\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuse5qj8m.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpuse5qj8m.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ numbers == nil then\n    return nil\n  end\n  local hash = {}\n  local output\
    \ = {}\n  for _, number in pairs(numbers) do\n    if numbers[number] ~= number\
    \ then\n      table.insert(output, number)\n    end\n    hash[number] = number\n\
    \  end\n  for _, number in pairs(output) do\n    hash[number] = number\n  end\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurw8s4tf.lua:27:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpurw8s4tf.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local last_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    if last_number == number then\n      table.insert(result, number)\n    else\n\
    \      last_number = number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tot78o1.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp9tot78o1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  for i = 1, #numbers do\n    local number = numbers[i]\n\
    \    if not new_numbers[number] then\n      table.insert(new_numbers, number)\n\
    \    end\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplujeig_7.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmplujeig_7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  for _, number in pairs(numbers) do\n    if not new_numbers[number]\
    \ then\n      new_numbers[number] = true\n    else\n      new_numbers[number]\
    \ = nil\n    end\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavbfyy3t.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpavbfyy3t.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    for _, value in pairs(numbers) do\n        if #result[value]\
    \ > 0 then\n            table.insert(result, value)\n        end\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy7w46ss6.lua:8:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmpy7w46ss6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpy7w46ss6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(type(numbers)\
    \ ~= 'table' or #numbers == 0, 'Input must be a list of integers')\n  local results\
    \ = {}\n  for i = 1, #numbers do\n    if numbers[i] ~= nil then\n      table.insert(results,\
    \ numbers[i])\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpin9fhfme.lua:6:\
    \ Input must be a list of integers\nstack traceback:\n\t/tmp/tmpin9fhfme.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpin9fhfme.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique_elements = {}\n    for _, number in ipairs(numbers) do\n        if unique_elements[number]\
    \ ~= nil then\n            unique_elements[number] = nil\n        else\n     \
    \       unique_elements[number] = true\n        end\n    end\n    return table.sort(unique_elements)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduzon7rj.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpduzon7rj.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result\n  local numbers_size = #numbers\n  if numbers_size == 0 then\n    result\
    \ ={}\n  else\n    result = {}\n    table.sort(numbers)\n    for i = 1, #numbers\
    \ do\n      local current_value = numbers[i]\n      if result[current_value] ~=\
    \ nil then\n        table.insert(result, current_value)\n      else\n        table.insert(result,\
    \ current_value)\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtxs1hpa.lua:30:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 2, 3, 3, 4, 5}\nstack traceback:\n\t/tmp/tmphtxs1hpa.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    if\
    \ #numbers == 0 then\n        return nil\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk89otq2c.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ new_numbers = {}\n\tlocal seen = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptu7inv8t.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  local new_order = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(new_numbers, number)\n    table.insert(new_order, number)\n\
    \  end\n  -- First find out how many times each element appears in the list.\n\
    \  for _, number in ipairs(new_order) do\n    local num_occurrences = 1\n    for\
    \ _, number_2 in ipairs(new_order) do\n      if number == number_2 then\n    \
    \    num_occurrences = num_occurrences + 1\n      end\n    end\n    -- We want\
    \ to keep the original order of the elements.\n    if num_occurrences > 1 then\n\
    \      table.insert(new_order, number)\n    end\n  end\n  return new_order, new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ seen = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif seen[number] then\n\
    \t\t\ttable.insert(numbers, seen[number])\n\t\telse\n\t\t\ttable.insert(numbers,\
    \ number)\n\t\t\tseen[number] = true\n\t\tend\n\tend\n\treturn numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_list = terralib.newlist()\n  for _, elem in ipairs(numbers) do\n    if new_list\
    \ == nil then\n      new_list = terralib.newlist({elem})\n    else\n      new_list:insert(elem)\n\
    \    end\n  end\n  return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw61pxqqo.lua:6:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpw61pxqqo.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpw61pxqqo.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  for\
    \ _, v in ipairs(numbers) do\n    if numbers[v] == v then -- skip if already in\
    \ the list\n      table.remove(numbers, v)\n    end\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg281jy26.lua:18:\
    \ expected: {1, 2, 3, 4}\nactual: {2, 3, 4}\nstack traceback:\n\t/tmp/tmpg281jy26.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ output = {}\n  for _, value in pairs(numbers) do\n    if output[value] == nil\
    \ then\n      output[value] = 1\n    else\n      output[value] = output[value]\
    \ + 1\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvudv20h.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmplvudv20h.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ then\n      table.insert(new_numbers, number)\n    else\n      table.insert(new_numbers,\
    \ number)\n    end\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3guq6i8.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp_3guq6i8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  for\
    \ i = 1, #numbers do\n    local found = false\n    for j = 1, #numbers do\n  \
    \    if numbers[i] == numbers[j] then\n        found = true\n        break\n \
    \     end\n    end\n    if not found then\n      table.insert(numbers, numbers[i])\n\
    \    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpww661n_b.lua:26:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpww661n_b.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 0 then return numbers end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0gzek7kr.lua:16: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(type(numbers)\
    \ == \"table\", \"numbers should be a table\")\n  -- For small tables, use an\
    \ iterator instead.\n  if #numbers < 100 then\n    return { numbers[i] for i in\
    \ range(#numbers) }\n  end\n  return setmetatable({ numbers = numbers }, { __index\
    \ = sets })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmzz01cx1.lua:9: '}' expected near 'for'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ num_seen = setmetatable(0, { __mode = \"v\" })\n  for _, num in pairs(numbers)\
    \ do\n    num_seen[num] = true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc09jpv3v.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ new_numbers = {}\n    for i, n in pairs(numbers) do\n        if new_numbers[n]\
    \ == nil then\n            new_numbers[n] = true\n        else\n            table.remove(new_numbers,\
    \ n)\n        end\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoaz3jsm.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmppoaz3jsm.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local i = 1\n  for _, number in pairs(numbers) do\n    if seen[number]\
    \ then\n      i = i + 1\n    else\n      seen[number] = true\n    end\n  end\n\
    \  return numbers[i]:concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpezzf0g4q.lua:15:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpezzf0g4q.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpezzf0g4q.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ setmetatable(numbers, { __index = function(t, i)\n      local seen = {}\n  \
    \    for j = 1, #t do\n        seen[t[j]] = true\n      end\n      local new_t\
    \ = {}\n      for j = 1, #t do\n        if seen[t[j]] then\n          table.insert(new_t,\
    \ t[j])\n        end\n      end\n      return new_t\n    end })\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpay_jt2nn.lua:26:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpay_jt2nn.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local new_numbers = {}\n    for i,v in ipairs(numbers) do\n \
    \       if seen[v] then\n            new_numbers[#new_numbers+1] = v\n       \
    \ else\n            seen[v] = true\n        end\n    end\n    return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pxcghfk.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp7pxcghfk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ new_numbers = {}\n    local current_number = 1\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp60idh13f.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers <= 0 then return numbers end\n  local counts = {}\n  for i = 1, #numbers\
    \ do\n    counts[numbers[i]] = (counts[numbers[i]] or 0) + 1\n    if counts[numbers[i]]\
    \ > 1 then\n      table.remove(numbers, i)\n      i = i - 1\n    end\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvro1wque.lua:9:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpvro1wque.lua:9: in local 'candidate'\n\
    \t/tmp/tmpvro1wque.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ new_numbers = {}\n    for _, number in pairs(numbers) do\n        if new_numbers[number]\
    \ == nil then\n            new_numbers[number] = true\n        else\n        \
    \    return nil\n        end\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzburk1re.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpzburk1re.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local index = 1\n    for i = 1, #numbers do\n        if numbers[i]\
    \ ~= numbers[index] then\n            result[#result + 1] = numbers[i]\n     \
    \       index = i\n        end\n    end\n    return result:map(function(x) return\
    \ x end):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxvoslrpv.lua:14:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpxvoslrpv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpxvoslrpv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    return table.unpack(numbers, 1, #numbers) -- the second argument\
    \ is \"how many elements to return\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlqhw4ld.lua:13:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmptlqhw4ld.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ == nil then\n      result[#result + 1] = num\n      seen[num] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebmzw63j.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpebmzw63j.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ hash = {}\n  for i = 1, #numbers do\n    hash[numbers[i]] = true\n  end\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    if hash[numbers[i]] then\n      result[#result\
    \ + 1] = numbers[i]\n      hash[numbers[i]] = nil\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qko347o.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp5qko347o.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ num_map = {}\n  for i = 1, #numbers do\n    table.insert(num_map, numbers[i])\n\
    \  end\n  local result = {}\n  for i = 1, #numbers do\n    if num_map[numbers[i]]\
    \ == nil then\n      result[#result + 1] = numbers[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfzhvfs3.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpmfzhvfs3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ Create a dictionary by indexing the input list.  O(1).\n  local counts = {}\n\
    \  for _, value in ipairs(numbers) do\n    counts[value] = counts[value] or 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd6kx3zo5.lua:20: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ function count(x)\n    return setmetatable(x, {__index = _G})\n  end\n  local\
    \ function remove(x)\n    local i, count = count(x)\n    if not count then\n \
    \     x[i] = nil\n      true\n    end\n  end\n  return set:from_list(numbers):map(remove)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphmfp_hag.lua:13: unexpected symbol near 'true'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ table.sort(table.uniq(numbers)) or numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm5b6mvky.lua:6:\
    \ attempt to call a nil value (field 'uniq')\nstack traceback:\n\t/tmp/tmpm5b6mvky.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpm5b6mvky.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    if\
    \ numbers == nil then return nil end\n    -- Return true if we haven't reached\
    \ the end of the input yet.\n    if #numbers == 0 then return true end\n    --\
    \ Keep a list of numbers that we already saw.\n    local seen = {}\n    -- Iterate\
    \ through the numbers.\n    for i = 1, #numbers do\n        -- Check to see if\
    \ the current number we've seen is in our seen list.\n        if seen[numbers[i]]\
    \ ~= nil then\n            -- We have seen this number before, so just remove\
    \ it.\n            numbers[i] = nil\n        else\n            -- We have not\
    \ seen this number before, so keep it.\n            seen[numbers[i]] = true\n\
    \        end\n    end\n    -- Return the updated list.\n    return numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_5tbs8k.lua:29:\
    \ expected: {}\nactual: true\nstack traceback:\n\t/tmp/tmpz_5tbs8k.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(type(numbers)\
    \ ~= 'table')\n  local new_numbers = {}\n  local seen = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1ebeymb1.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {\n    [1] = numbers[1],\n  }\n  for i = 2, #numbers\
    \ do\n    if seen[numbers[i]] ~= nil then\n      seen[numbers[i]] = nil\n    else\n\
    \      table.insert(result, numbers[i])\n      seen[numbers[i]] = numbers[i]\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29o0djas.lua:26:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp29o0djas.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique_numbers = {}\n  for _, value in pairs(numbers) do\n    if not find_index(unique_numbers,\
    \ value) then\n      table.insert(unique_numbers, value)\n    end\n  end\n  return\
    \ unique_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxsfjfl0.lua:8:\
    \ attempt to call a nil value (global 'find_index')\nstack traceback:\n\t/tmp/tmpbxsfjfl0.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpbxsfjfl0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ numbers == nil then return end\n  local new_list = terralib.newlist()\n  for\
    \ i, elem in ipairs(numbers) do\n    if new_list[i] ~= elem then\n      table.insert(new_list,\
    \ elem)\n    end\n  end\n  return new_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwby3mnkf.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpwby3mnkf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwby3mnkf.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local output = {}\n    for i=1, #numbers do\n        if seen[numbers[i]]\
    \ then\n            table.insert(output, numbers[i])\n        else\n         \
    \   table.insert(seen, numbers[i])\n        end\n    end\n    return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhdjih2v.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpvhdjih2v.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbwi0gnyo.lua:16: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 0 then return nil end\n  local counts = {}\n  local new_numbers\
    \ = {}\n  local last_index = {}\n  for i = 1, #numbers do\n    local element =\
    \ numbers[i]\n    if not counts[element] then\n      counts[element] = 1\n   \
    \   new_numbers[element] = element\n      last_index[element] = i\n    else\n\
    \      counts[element] = counts[element] + 1\n    end\n  end\n  local i = #new_numbers\n\
    \  while i > 0 do\n    if not counts[new_numbers[i]] then\n      table.remove(new_numbers,\
    \ i)\n      last_index[new_numbers[i]] = i - 1\n    else\n      counts[new_numbers[i]]\
    \ = counts[new_numbers[i]] + 1\n    end\n    i = i - 1\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2uxwk2b.lua:36:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpv2uxwk2b.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(type(numbers)\
    \ == 'table')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsv57nmlm.lua:16: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ i = 0\n  local j = 1\n  while i < #numbers and j < #numbers do\n    if numbers[i]\
    \ ~= numbers[j] then\n      numbers[#numbers + 1] = numbers[i]\n      i = i +\
    \ 1\n    end\n    j = j + 1\n  end\n  return numbers:sub(1, i - 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfxuzxcu_.lua:15:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpfxuzxcu_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpfxuzxcu_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    --\
    \ Set up list to hold result\n    local new_numbers = {}\n    -- Iterate through\
    \ list and add element if it doesn't occur more than once\n    for _, number in\
    \ ipairs(numbers) do\n        if not (new_numbers[number] or 0) > 1 then\n   \
    \         new_numbers[number] = true\n        end\n    end\n    -- Return new\
    \ list\n    return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptp_cooif.lua:10:\
    \ attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmptp_cooif.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptp_cooif.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  local i = 1\n  while i < #numbers and i <= #numbers do\n\
    \    local found = false\n    for j = i; j < #numbers do\n      if numbers[i]\
    \ == numbers[j] then\n        found = true\n        break\n      end\n    end\n\
    \    if not found then\n      new_numbers[#new_numbers + 1] = numbers[i]\n   \
    \ end\n    i = i + 1\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiu2ess_u.lua:10: ',' expected near ';'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ new_list = {}\n    for _, i in pairs(numbers) do\n        table.insert(new_list,\
    \ i)\n    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp143uic_j.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp143uic_j.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      new_numbers[number] = true\n    else\n      new_numbers[number]\
    \ = false\n    end\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvatkk2vt.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpvatkk2vt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 1 then\n    return numbers\n  else\n    local sorted_numbers = numbers.sorted()\n\
    \    local unique_numbers = {}\n    local count = 0\n    for index = 1, #sorted_numbers\
    \ do\n      local current_number = sorted_numbers[index]\n      if not unique_numbers[current_number]\
    \ then\n        unique_numbers[current_number] = count\n        count = count\
    \ + 1\n      end\n    end\n    return table.sortedinsert(unique_numbers, #unique_numbers)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp90ahkaaw.lua:9:\
    \ attempt to call a nil value (field 'sorted')\nstack traceback:\n\t/tmp/tmp90ahkaaw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp90ahkaaw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local counts = {}\n    for _, value in pairs(numbers) do\n\
    \        if counts[value] ~= nil then\n            counts[value] = counts[value]\
    \ + 1\n        else\n            counts[value] = 1\n        end\n    end\n   \
    \ for value, count in pairs(counts) do\n        if value ~= nil then\n       \
    \     if count > 1 then\n                table.insert(result, value)\n       \
    \     end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47l0421e.lua:29:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp47l0421e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ Store in memory and use a dictionary to remove dupes\n  local seen = {}\n  for\
    \ _, item in ipairs(numbers) do\n    seen[item] = nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzceh9tqs.lua:20: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ list:foldl(\n    function(a, b) assert(type(b) == 'number') then\n        if\
    \ (a[b] == nil) then\n          a[b] = true\n        else\n          a[b] = false\n\
    \        end\n        return a\n    end,\n    {},\n    numbers\n  )\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx_r7o16g.lua:7: unexpected symbol near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  for _, number in ipairs(numbers) do\n    table.insert(new_numbers,\
    \ number)\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k_bues8.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp1k_bues8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    for _, num in pairs(numbers) do\n        local count = result[num]\
    \ or 0\n        result[num] = count + 1\n    end\n    for _, num in pairs(result)\
    \ do\n        if num == 1 then\n            table.remove(numbers, num)\n     \
    \   end\n    end\n    return table.remove(numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9e58sga.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpx9e58sga.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(#numbers\
    \ ~= 0, 'remove_duplicates: numbers list cannot be empty')\n  local removed =\
    \ {}\n  local index = 1\n  while true do\n    local value = numbers[index]\n \
    \   index = index + 1\n    if value in removed then -- Already processed this\
    \ number\n      index = index - 1\n      -- If the number isn't in the remaining\
    \ elements, try the next one\n      if index <= #numbers then\n        local next_value\
    \ = numbers[index]\n        index = index + 1\n        removed[value] = true\n\
    \        removed[next_value] = true\n      end\n    else -- First time seeing\
    \ this number\n      removed[value] = true\n    end\n    if #removed == #numbers\
    \ or #removed == 0 then\n      break\n    end\n  end\n  -- Sort removed numbers\
    \ in order of appearance in the input list\n  table.sort(removed)\n  -- Remove\
    \ elements that occur more than once\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    if removed[numbers[i]] then\n      table.insert(new_numbers, numbers[i])\n\
    \    end\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz7y7b2mm.lua:12: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ results = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp30qb71m.lua:16: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, num in pairs(numbers) do\n    if not seen[num] then\n  \
    \    seen[num] = true\n      return true\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0r3rjmn6.lua:19:\
    \ expected: {}\nactual: false\nstack traceback:\n\t/tmp/tmp0r3rjmn6.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ hash = {}\n    for _, v in ipairs(numbers) do\n        hash[v] = hash[v] or\
    \ 1\n    end\n    local output = {}\n    for k, v in pairs(hash) do\n        table.insert(output,\
    \ v)\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jksxas2.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmp0jksxas2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ output = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num]\
    \ then\n      table.insert(output, num)\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfj96uza9.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpfj96uza9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ Copy the numbers into a table.\n  local copy_numbers = {}\n  for i, number in\
    \ ipairs(numbers) do\n    copy_numbers[number] = true\n  end\n  -- Now remove\
    \ dupes from the original table.\n  local last_number = numbers[1]\n  numbers\
    \ = {}\n  for i, number in ipairs(copy_numbers) do\n    if number ~= last_number\
    \ then\n      table.insert(numbers, last_number)\n    end\n    last_number = number\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppee30kqa.lua:27:\
    \ expected: {1, 2, 3, 4}\nactual: {1}\nstack traceback:\n\t/tmp/tmppee30kqa.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local new_numbers = terralib.newlist()\n  local N = #numbers\n\
    \  for i = 1, N do\n    if seen[numbers[i]] then\n      new_numbers:insert(numbers[i])\n\
    \      seen[numbers[i]] = nil\n    else\n      seen[numbers[i]] = true\n    end\n\
    \  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiu9mtlkg.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpiu9mtlkg.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpiu9mtlkg.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  for\
    \ i, v in pairs(numbers) do\n    table.insert(numbers, v)\n  end\n  table.sort(numbers,\
    \ function(a,b) return a < b end)\n  local unique_numbers = {}\n  for i = 1, #numbers\
    \ do\n    if numbers[i] ~= unique_numbers[numbers[i]] then\n      unique_numbers[numbers[i]]\
    \ = numbers[i]\n    end\n  end\n  return unique_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 0 then\n    return {}\n  end\n  local counts = {}\n  local unique_numbers\
    \ = {}\n  for i = 1, #numbers do\n    counts[numbers[i]] = (counts[numbers[i]]\
    \ or 0) + 1\n    if counts[numbers[i]] > 1 then\n      unique_numbers[numbers[i]]\
    \ = 1\n    end\n  end\n  table.sort(unique_numbers)\n  for i = 1, #unique_numbers\
    \ do\n    table.insert(numbers, unique_numbers[i])\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x8sanf0.lua:29:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp3x8sanf0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local keys = {}\n  for i = 1, #numbers do\n    if keys[numbers[i]]\
    \ then\n      table.insert(result, numbers[i])\n      table.insert(result, numbers[i])\n\
    \    else\n      keys[numbers[i]] = true\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19ylfb9k.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp19ylfb9k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  for\
    \ i = 1, #numbers, 1 do\n    local last = numbers[i]\n    for j = i + 1, #numbers,\
    \ 1 do\n      if numbers[j] == last then\n        numbers[i] = nil\n        numbers[j]\
    \ = nil\n      end\n    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1itxooe.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 5=4, 7=5}\nstack traceback:\n\t/tmp/tmpv1itxooe.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    --\
    \ Make an iterable to iterate over and return an iterator that has already been\
    \ exhausted.\n    local iterator = toiter(numbers)\n    return function() return\
    \ next(iterator) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7d___km8.lua:7:\
    \ attempt to call a nil value (global 'toiter')\nstack traceback:\n\t/tmp/tmp7d___km8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7d___km8.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ uniques = {}\n    for _, num in pairs(numbers) do\n        if uniques[num] ==\
    \ nil then\n            uniques[num] = true\n        end\n    end\n    for _,\
    \ num in pairs(uniques) do\n        table.insert(numbers, num)\n    end\n    return\
    \ numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaiqtcmmi.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, true, true, true, true}\nstack\
    \ traceback:\n\t/tmp/tmpaiqtcmmi.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ new_list = {}\n    local unique_nums = setmetatable({}, { __mode = \"v\" })\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj9mbflbo.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    if\
    \ #numbers == 0 then\n        return numbers\n    end\n    local old_array = numbers\n\
    \    local old_hash = setmetatable({}, {__mode=\"v\"})\n    for i, v in ipairs(old_array)\
    \ do\n        old_hash[v] = true\n    end\n    local new_array = old_array\n \
    \   for i = #old_array, 1, -1 do\n        local v = old_array[i]\n        if not\
    \ old_hash[v] then\n            new_array = new_array:remove(v)\n        end\n\
    \    end\n    return new_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xe3l9ny.lua:29:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp1xe3l9ny.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, v in ipairs(numbers) do\n        if seen[v] then\n   \
    \         for _, v2 in ipairs(seen) do\n                if v == v2 then\n    \
    \                seen[v] = nil\n                end\n            end\n       \
    \ else\n            seen[v] = true\n        end\n    end\n    return table.concat(seen)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5oihw6g.lua:24:\
    \ expected: {}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpo5oihw6g.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 0 then\n    return numbers\n  end\n  local result = {}\n  local\
    \ index = true\n  for i = 1, #numbers do\n    if not index then\n      index =\
    \ numbers[i] == numbers[i - 1]\n    end\n    if index then\n      result[#result\
    \ + 1] = numbers[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0zny_7w.lua:27:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpa0zny_7w.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ map = {}\n  local uniques = {}\n  for i = 1, #numbers do\n    local element\
    \ = numbers[i]\n    if not map[element] then\n      map[element] = true\n    \
    \  uniques[#uniques + 1] = element\n    end\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5a6890gz.lua:24: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ then\n      table.insert(new_numbers, number)\n    end\n    new_numbers[number]\
    \ = true\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstgu2wng.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpstgu2wng.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(type(numbers)\
    \ == 'table')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd0euxg7v.lua:16: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ output = {}\n  for _, num in ipairs(numbers) do\n    table.insert(output, num)\n\
    \  end\n  for i, num in ipairs(output) do\n    local old = output[i]\n    output[i]\
    \ = num\n    for _, val in ipairs(output) do\n      if val == old then\n     \
    \   table.insert(output, val)\n      end\n    end\n  end\n  return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, num in ipairs(numbers) do\n        if seen[num] == 1 then\
    \ continue end\n        seen[num] = 1\n        table.insert(numbers, num)\n  \
    \  end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn01wfvgo.lua:8: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ nums = {}\n  for _, num in pairs(numbers) do\n    if nums[num] == nil then\n\
    \      nums[num] = 1\n    else\n      nums[num] = nums[num] + 1\n    end\n  end\n\
    \  local result = {}\n  for _, num in pairs(nums) do\n    if nums[num] > 1 then\n\
    \      result[#result + 1] = num\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvok37juy.lua:27:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpvok37juy.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ results = {}\n  for _, num in pairs(numbers) do\n    results[num] = true\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwni90m_5.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ table.sort(\n      table.unpack(\n          table.map_pairs(\n             \
    \ function(value) return value end, numbers\n          )\n      )\n  )\nend\n\
    </code>\n<|/ a dscore=3 |>\n<| a |>\nI have used the code below to remove duplicates\
    \ in table of strings. Hope it helps someone.\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpslmnhpvi.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n   --\
    \ Create a list to store the numbers that occur more than once.\n   -- Also initialize\
    \ a list to store the result. \n   local occur = {}\n   local result = {}\n  \
    \ -- Traverse numbers once.\n   for _, number in pairs(numbers) do\n      -- If\
    \ the number is not in occur, add it to result and add 1 to occur.\n      if occur[number]\
    \ == nil then\n         result[#result + 1] = number\n         occur[number] =\
    \ 1\n      -- If it does occur, add one to occur.\n      else\n         occur[number]\
    \ = occur[number] + 1\n      end\n   end\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kmevuow.lua:29:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp8kmevuow.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local uniques = {}\n  for _, number in ipairs(numbers) do\n \
    \   if uniques[number] then\n      result[uniques[number]] = number\n    else\n\
    \      uniques[number] = true\n      result[number] = number\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzbqkmz2.lua:24:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5, true=3}\nstack traceback:\n\t/tmp/tmpfzbqkmz2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  for\
    \ i, v in ipairs(numbers) do\n    if numbers.count(v) == 1 then\n      table.remove(numbers,\
    \ v)\n    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k062psv.lua:7:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmp7k062psv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7k062psv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    --\
    \ Using an accumulator to store the unique values.\n    local unique_numbers =\
    \ {}\n    for _, number in pairs(numbers) do\n        if unique_numbers[number]\
    \ ~= nil then\n            unique_numbers[number] = unique_numbers[number] + 1\n\
    \        else\n            unique_numbers[number] = 1\n        end\n    end\n\
    \    -- Return the unique values only.\n    return unique_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnauuxs4n.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpnauuxs4n.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 0 then return {} end\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    if not new_numbers[i] then new_numbers[i] = numbers[i] end\n  end\n\
    \  local uniques = {}\n  for i = 1, #new_numbers do\n    local n = new_numbers[i]\n\
    \    if #uniques == 0 then\n      uniques = {n}\n    else\n      for j = 1, #uniques\
    \ do\n        if uniques[j] == n then\n          uniques[j] = nil\n        end\n\
    \      end\n    end\n  end\n  if #uniques > 1 then\n    for i = 1, #uniques do\n\
    \      table.insert(new_numbers, uniques[i])\n    end\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4i1ays2.lua:37:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp_4i1ays2.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    if\
    \ #numbers == 0 then\n        return nil\n    end\n    if #numbers == 1 then\n\
    \        return numbers\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4ycolcyz.lua:21: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ last_seen = {}\n  for i = 1, #numbers do\n    local value = numbers[i]\n   \
    \ if last_seen[value] == nil then\n      last_seen[value] = true\n    else\n \
    \     numbers[#numbers + 1] = value\n    end\n  end\n  return numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4yhvtzz.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5, 2, 3}\nstack traceback:\n\
    \t/tmp/tmpx4yhvtzz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(numbers:size()\
    \ >= 1, 'remove_duplicates:numbers:size() < 1')\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0gbiowp6.lua:16: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ new_numbers = {}\n    local i = 1\n    while i <= #numbers do\n        if new_numbers[numbers[i]]\
    \ == nil then\n            new_numbers[numbers[i]] = numbers[i]\n        else\n\
    \            i = i + 1\n        end\n    end\n    return new_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxez24flm.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxez24flm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers <= 1 then return numbers end\n  local counts = {}\n  for _, x in ipairs(numbers)\
    \ do counts[x] = 1 + counts[x] end\n  -- Reverse the table to keep the same order.\n\
    \  local reversed = {}\n  for key, value in pairs(counts) do\n    reversed[key]\
    \ = math.max(value, reversed[key])\n  end\n  -- Make a new list with only unique\
    \ elements.\n  local ret = {}\n  for key, value in pairs(reversed) do\n    table.insert(ret,\
    \ key)\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_bnc_c6m.lua:8:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp_bnc_c6m.lua:8: in local 'candidate'\n\t/tmp/tmp_bnc_c6m.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n   local\
    \ seen = nil\n   for _, value in ipairs(numbers) do\n      if seen then\n    \
    \     if seen == value then\n            seen = nil\n         else\n         \
    \   table.insert(numbers, seen)\n         end\n      else\n         seen = value\n\
    \      end\n   end\n   return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4qbo236.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 1, 1, 1}\nstack traceback:\n\t\
    /tmp/tmps4qbo236.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(#numbers\
    \ > 0, 'List cannot be empty')\n  local i = 0\n  local j = 1\n  local newarray\
    \ = {}\n  while i <= #numbers do\n    while j <= #numbers do\n      if numbers[i]\
    \ == numbers[j] then\n        table.insert(newarray, numbers[i])\n        i =\
    \ i + 1\n      else\n        j = j + 1\n      end\n    end\n  end\n  return newarray\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplj4haq5a.lua:6:\
    \ List cannot be empty\nstack traceback:\n\t/tmp/tmplj4haq5a.lua:6: in local 'candidate'\n\
    \t/tmp/tmplj4haq5a.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ numbers == nil then return nil end\n  local counts = {}\n  for i = 1, #numbers\
    \ do\n    table.insert(counts, numbers[i])\n  end\n  local new_numbers = {}\n\
    \  for i = 1, #counts do\n    if counts[i] == 1 then\n      table.insert(new_numbers,\
    \ numbers[i])\n    end\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6prvzq2.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {1}\nstack traceback:\n\t/tmp/tmpj6prvzq2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for i=1,#numbers do\n        seen[numbers[i]] = true\n    end\n\
    \    local result = {}\n    for i=1,#numbers do\n        if not seen[numbers[i]]\
    \ then\n            result[#result + 1] = numbers[i]\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygo8pvf6.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpygo8pvf6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in pairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = true\n    else\n      result[value] = false\n  \
    \  end\n  end\n  return setmetatable(result, list)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dc18znt.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp4dc18znt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnz_chw42.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    --\
    \ start with the numbers that are not repeated, remove them from the remaining\n\
    \    -- numbers, return the result.\n    -- This requires O(n) memory and O(n)\
    \ time.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8ksjqymx.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    if result[numbers[i]] ~= nil then\n\
    \      result[numbers[i]] = true\n    else\n      result[numbers[i]] = i\n   \
    \ end\n  end\n  local keys = pairs(result)\n  table.sort(keys)\n  for i = 1, #keys\
    \ do\n    numbers[tonumber(keys[i])] = nil\n  end\n  return numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3d69jad3.lua:15:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp3d69jad3.lua:15: in local 'candidate'\n\t/tmp/tmp3d69jad3.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n   local\
    \ output = {}\n   for _, x in ipairs(numbers) do\n      output[#output + 1] =\
    \ x\n   end\n   return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcz45perq.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpcz45perq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  for\
    \ i, value in ipairs(numbers) do\n    local count = numbers[i]\n    for j = i+1,\
    \ #numbers do\n      count = count and numbers[j] or 0\n      count = count -\
    \ 1\n      if count == 0 then\n        table.insert(numbers, j)\n      end\n \
    \   end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv8b9jza.lua:24:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmplv8b9jza.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if result[value] == nil\
    \ then\n      result[value] = value\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoc7istft.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpoc7istft.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local new_numbers = {}\n  for _, i in pairs(numbers) do\n    table.insert(seen,\
    \ i)\n    table.insert(new_numbers, i)\n  end\n  return new_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxux19vqo.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpxux19vqo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ numbers == nil then\n    return nil\n  end\n  local removed = {}\n  local current_idx\
    \ = 1\n  local result = {}\n  for i = 1, #numbers do\n    local j = current_idx\n\
    \    if numbers[i] ~= numbers[j] then\n      removed[numbers[j]] = true\n    \
    \  result[current_idx] = numbers[j]\n      current_idx = current_idx + 1\n   \
    \ end\n  end\n  table.insert(result, current_idx)\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcpx02oe7.lua:27:\
    \ expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmpcpx02oe7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  for\
    \ i = #numbers, 1, -1 do\n    if numbers[i] ~= numbers[i - 1]  then\n      table.insert(numbers,\
    \ numbers[i - 1])\n    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5ovv4m_.lua:18:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 3, 2, 1}\nstack traceback:\n\t\
    /tmp/tmpq5ovv4m_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ new_list = []\n\tfor _, x in ipairs(numbers) do\n\t\tif new_list[x] == nil then\n\
    \t\t\ttable.insert(new_list, x)\n\t\tend\n\tend\n\treturn new_list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9opj7s3p.lua:6: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ numbers == nil then return end\n  if #numbers == 1 then return numbers end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp_50gln0.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    for i, number in ipairs(numbers) do\n        local n = result[number]\n\
    \        if n == nil then\n            n = 1\n        else\n            n = n\
    \ + 1\n        end\n        result[number] = n\n    end\n    for k, number in\
    \ ipairs(result) do\n        if number == 1 then\n            table.remove(numbers,\
    \ k)\n        end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpex45t5x9.lua:18:\
    \ bad argument #1 to 'remove' (position out of bounds)\nstack traceback:\n\t/tmp/tmpex45t5x9.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpex45t5x9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ removed = {}\n  for i, v in ipairs(numbers) do\n    if not removed[v] then\n\
    \      removed[v] = true\n      numbers[i] = v\n    end\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglsme9kh.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpglsme9kh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  local i = 0\n  for _, num in pairs(numbers) do\n    if new_numbers[i]\
    \ ~= nil then\n      table.insert(new_numbers, num)\n    else\n      new_numbers[i]\
    \ = num\n    end\n    i = i + 1\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkypfkwkg.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpkypfkwkg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(#numbers\
    \ > 0)\n  local counts = {}\n  local output = {}\n  for i = 1, #numbers do\n \
    \   if counts[numbers[i]] == nil then\n      output[#output + 1] = numbers[i]\n\
    \      counts[numbers[i]] = 1\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi__s7nq2.lua:6:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpi__s7nq2.lua:6: in local 'candidate'\n\
    \t/tmp/tmpi__s7nq2.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, num in pairs(numbers) do\n        if seen[num] then\n\
    \            return numbers[#numbers]:reverse()\n        end\n        seen[num]\
    \ = true\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ms06vq0.lua:9:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp1ms06vq0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1ms06vq0.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    for _, x in ipairs(numbers) do\n        if x ~= nil and #result\
    \ < x then\n            result[#result+1] = x\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzx7_y4en.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpzx7_y4en.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result + 1] ==\
    \ v then\n      result[#result + 1] = nil\n    else\n      result[#result + 1]\
    \ = v\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpszer8x_5.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ Use list comprehension to avoid using \"for\" loops.\n  return setmetatable(\n\
    \    numbers,\n    {__index = function(self, index)\n      -- Don't include numbers\
    \ more than once.\n      if index < self.count then\n        return self[index]\n\
    \      end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp53pp7p34.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 1 then\n    return numbers\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6r0b25w3.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ hash = {}\n\tlocal i = 1\n\tfor _,n in ipairs(numbers) do\n\t\thash[n] = hash[n]\
    \ or i\n\t\ti = i + 1\n\tend\n\tfor _,n in ipairs(numbers) do\n\t\tnumbers[hash[n]]\
    \ = nil\n\tend\n\treturn numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u_uc3k4.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp0u_uc3k4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local n = 0\n    local new_numbers = {}\n    for _, v in pairs(numbers)\
    \ do\n        if seen[v] then\n            new_numbers[n] = v\n            n =\
    \ n + 1\n        else\n            seen[v] = true\n        end\n    end\n    if\
    \ n > 0 then\n        new_numbers[n + 1] = nil\n    end\n    return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3s6rj_8.lua:27:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpz3s6rj_8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local new_numbers = {}\n  local last_number = nil\n  for i = 1,\
    \ #numbers do\n    if not seen[numbers[i]] then\n      seen[numbers[i]] = true\n\
    \      new_numbers[#new_numbers + 1] = numbers[i]\n    end\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbz89aduw.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpbz89aduw.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ hash = {}\n    for _, value in ipairs(numbers) do\n        if hash[value] ==\
    \ nil then\n            hash[value] = true\n            table.insert(numbers,\
    \ value)\n        end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzn285lmg.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 1, 2, 3, 4}\nstack traceback:\n\
    \t/tmp/tmpzn285lmg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, value in ipairs(numbers) do\n    if seen[value] then\n \
    \     table.insert(numbers, seen[value])\n    else\n      seen[value] = true\n\
    \    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmprjx5gu.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ new_numbers = {}\n\tlocal counts = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaex7ejcq.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ visited = {}\n  local new_numbers = {}\n  local i = 1\n  while i < #numbers\
    \ and i <= #visited do\n    visited[#visited + 1] = numbers[i]\n    i = i + 1\n\
    \  end\n  if i < #numbers - 1 then\n    new_numbers = {}\n  else\n    new_numbers\
    \ = numbers\n  end\n  i = 1\n  while i < #visited do\n    if visited[#visited\
    \ + 1] == visited[i] then\n      i = i + 1\n    else\n      new_numbers[i] = visited[#visited\
    \ + 1]\n      i = i + 1\n    end\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4hagu5u.lua:34:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpo4hagu5u.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ Sort list\n  table.sort(numbers)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppjov_xnj.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, item in ipairs(numbers) do\n        if seen[item] then\n\
    \            numbers[#numbers+1] = item\n        else\n            seen[item]\
    \ = true\n        end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ map = {}\n    local new_numbers = {}\n    for _, number in ipairs(numbers) do\n\
    \        map[number] = true\n        new_numbers[#new_numbers + 1] = number\n\
    \    end\n    return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_fe9vpo.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp5_fe9vpo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, value in ipairs(numbers) do\n        if seen[value] ~=\
    \ nil then\n            table.remove(numbers, seen[value])\n        else\n   \
    \         seen[value] = true\n        end\n    end\n    return numbers\nend\n\
    </cell>\n<cell>\nprint(remove_duplicates([1, 2, 3, 2, 4]))\n</cell>\n<text>\n\
    Exercise 1: Remove Duplicates\nWrite a function that takes a table of numbers\
    \ and returns another table with all the numbers removed from the first table.\
    \ Make sure you remove numbers that occur more than once.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppnmjv1ix.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ setmetatable(numbers, {\n    __index = function(t, k)\n      local value = rawget(t,\
    \ k)\n      if value ~= nil then\n        if value ~= t then\n          -- Found\
    \ an entry for key 'k' that is different than 'value'\n          -- so we remove\
    \ 'value' from the set.\n          rawset(t, k, nil)\n        end\n      else\n\
    \        -- There was no entry for the key 'k' so add 'value' to the set.\n  \
    \      rawset(t, k, true)\n      end\n      return value\n    end\n  })\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpup0eb60r.lua:29:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpup0eb60r.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, number in ipairs(numbers) do\n    if seen[number] then\n\
    \      table.insert(numbers, seen[number])\n    end\n    seen[number] = number\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, x in pairs(numbers) do\n        if seen[x] then\n    \
    \        numbers[#numbers] = x\n        else\n            seen[x] = true\n   \
    \     end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1eyo2qyi.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 3}\nstack traceback:\n\t/tmp/tmp1eyo2qyi.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    if result[numbers[i]] == nil then\n\
    \      result[numbers[i]] = true\n    else\n      table.insert(result, numbers[i])\n\
    \    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare two boolean values\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, num in pairs(numbers) do\n        if not seen[num] then\n\
    \            seen[num] = true\n            table.insert(numbers, num)\n      \
    \  end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom9c69om.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 1, 2, 3, 4}\nstack traceback:\n\
    \t/tmp/tmpom9c69om.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ map = {}\n  for _, number in pairs(numbers) do\n    map[number] = true\n  end\n\
    \  table.sort(numbers, true)\n  local index = 1\n  local results = {}\n  for _,\
    \ number in pairs(numbers) do\n    if map[number] then\n      table.insert(results,\
    \ number)\n      index = index + 1\n      map[number] = nil\n    end\n  end\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5tts_wi0.lua:10:\
    \ bad argument #2 to 'sort' (function expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp5tts_wi0.lua:10: in local 'candidate'\n\t/tmp/tmp5tts_wi0.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique_numbers = terralib.newlist()\n  local unique_number_i = 0\n  for i =\
    \ 1, #numbers do\n    if i > unique_number_i then\n      unique_numbers:insert(numbers[i])\n\
    \      unique_number_i = i + 1\n    end\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpafhq32ut.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 0 then\n    return numbers\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpstvckcb0.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ table = {}\n  for _, value in ipairs(numbers) do\n    if not table[value] then\n\
    \      table.insert(table, value)\n    end\n  end\n  return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvkbg63ny.lua:9:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpvkbg63ny.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvkbg63ny.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  for _, v in ipairs(numbers) do\n    local k = new_numbers[v]\n\
    \    new_numbers[v] = k or 1\n  end\n  new_numbers[1] = nil\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7u5nl0h0.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {2=1, 3=1, 4=1}\nstack traceback:\n\t/tmp/tmp7u5nl0h0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(#numbers\
    \ > 0, \"remove_duplicates: empty list\")\n  local seen = {}\n  local output =\
    \ {}\n  local i = 1\n  for v in numbers do\n    if seen[v] then\n      output[#output\
    \ + 1] = v\n    else\n      seen[v] = true\n      output[#output + 1] = v\n  \
    \  end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpriqq78yf.lua:6:\
    \ remove_duplicates: empty list\nstack traceback:\n\t/tmp/tmpriqq78yf.lua:6: in\
    \ local 'candidate'\n\t/tmp/tmpriqq78yf.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ sorted_numbers = table.sort(numbers)\n    local result = {}\n    local i = 1\n\
    \    for j = 1, #sorted_numbers do\n        if sorted_numbers[i - 1] == sorted_numbers[j]\
    \ then\n            table.remove(result, i - 1)\n        else\n            i =\
    \ i + 1\n        end\n    end\n    return table.remove(result, i - 1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiquk2o4c.lua:9:\
    \ attempt to get length of a nil value (local 'sorted_numbers')\nstack traceback:\n\
    \t/tmp/tmpiquk2o4c.lua:9: in local 'candidate'\n\t/tmp/tmpiquk2o4c.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in pairs(numbers) do\n    if result[number] ~=\
    \ nil then\n      result[number] = true\n    else\n      result[number] = number\n\
    \    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp35b1x8qa.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local i = 1\n    while i <= #numbers do\n        if table.getn(result)\
    \ < table.getn(numbers) then\n            table.insert(result, numbers[i])\n \
    \       else\n            i = i + 1\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz1i_cg5j.lua:9:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpz1i_cg5j.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpz1i_cg5j.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ table.sort(numbers) -- Orders elements left the same\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tmx50cl.lua:12:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp6tmx50cl.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, number in pairs(numbers) do\n        if seen[number] ==\
    \ 1 then\n            numbers[#numbers] = nil\n        else\n            seen[number]\
    \ = 1\n        end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7p0hmoz.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4}\nstack traceback:\n\t/tmp/tmpg7p0hmoz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, x in pairs(numbers) do\n        if seen[x] then\n    \
    \        for j = 1, #numbers do\n                if numbers[j] == x then\n   \
    \                 table.remove(numbers, j)\n                    break\n      \
    \          end\n            end\n        else\n            table.insert(seen,\
    \ x)\n        end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmgv6sui.lua:27:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpnmgv6sui.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local last_number = nil\n  for _, number in pairs(numbers) do\n\
    \    if number ~= last_number then\n      result[#result + 1] = number\n     \
    \ last_number = number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzpbcu3w6.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpzpbcu3w6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  for\
    \ i = 1, #numbers do\n    local element = numbers[i]\n    local j = 1\n    while\
    \ j < i do\n      local found = true\n      local k = j + 1\n      while k < #numbers\
    \ do\n        found = found and numbers[k] == element\n        k = k + 1\n   \
    \   end\n      if found then\n        numbers[j] = nil\n      else\n        j\
    \ = j + 1\n      end\n    end\n  end\n  table.sort(numbers, function(a, b) return\
    \ a < b end)\n  table.insert(numbers, nil)\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  local num_seen = {}\n  local current_value = nil\n  for\
    \ i, v in ipairs(numbers) do\n    if num_seen[v] then\n      current_value = current_value\
    \ .. \", \" .. v\n    else\n      new_numbers[i] = v\n      num_seen[v] = true\n\
    \    end\n  end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkzkj9hjz.lua:11:\
    \ attempt to concatenate a nil value (local 'current_value')\nstack traceback:\n\
    \t/tmp/tmpkzkj9hjz.lua:11: in local 'candidate'\n\t/tmp/tmpkzkj9hjz.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(type.islist(numbers))\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if #new_numbers\
    \ ~= 0 then\n      table.insert(new_numbers, number)\n      table.insert(new_numbers,\
    \ number)\n    else\n      table.insert(new_numbers, number)\n    end\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv4qhms3y.lua:25: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique = {}\n  for _, value in ipairs(numbers) do\n    if not table.includes(unique,\
    \ value) then\n      table.insert(unique, value)\n    end\n  end\n  return table.concat(unique)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptfknhqj.lua:18:\
    \ expected: {}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpptfknhqj.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, v in pairs(numbers) do\n    if seen[v] == 1 then\n     \
    \ table.remove(numbers, v)\n    end\n    seen[v] = 1\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25uyxl8r.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 3, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp25uyxl8r.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ Create a list of unique elements.\n  local unique_numbers = {}\n  for i = 1,\
    \ #numbers do\n    -- If an element is not unique, then add it to the unique_numbers\
    \ list with the associated index.\n    if not find_unique_index(unique_numbers,\
    \ numbers[i]) then\n      unique_numbers[#unique_numbers+1] = numbers[i]\n   \
    \ end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprf8kpa02.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n   local\
    \ seen = {}\n   for _, value in ipairs(numbers) do\n      if seen[value] then\n\
    \         table.remove(numbers, value)\n      else\n         seen[value] = true\n\
    \      end\n   end\n   return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2v_48p4.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 3, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpw2v_48p4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new = {}\n  for _, v in ipairs(numbers) do\n    if not rawcontains(new, v) then\n\
    \      table.insert(new, v)\n    end\n  end\n  return new\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnwn2to1k.lua:8:\
    \ attempt to call a nil value (global 'rawcontains')\nstack traceback:\n\t/tmp/tmpnwn2to1k.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpnwn2to1k.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 1 then\n    return numbers\n  end\n  local seen = {}\n  for i =\
    \ 1, #numbers do\n    if seen[numbers[i]] then\n      table.remove(numbers, i)\n\
    \    else\n      seen[numbers[i]] = true\n    end\n  end\n  return numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu7ielh_l.lua:14:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpu7ielh_l.lua:14: in local 'candidate'\n\
    \t/tmp/tmpu7ielh_l.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ new_numbers = {}\n  for _, value in pairs(numbers) do\n    if new_numbers[value]\
    \ == nil then\n      table.insert(new_numbers, value)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplywf05be.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmplywf05be.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ set = setmetatable({}, { __mode = \"v\" })\n    for _, value in ipairs(numbers)\
    \ do\n        if set[value] == nil then\n            set[value] = 1\n        else\n\
    \            set[value] = set[value] + 1\n        end\n    end\n    return setmetatable(set,\
    \ { __mode = \"k\" })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppy02f4rh.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmppy02f4rh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ t = {}\n  table.sort(numbers)\n  for _, number in ipairs(numbers) do\n    if\
    \ #t[number] == 1 then\n      t[number] = number\n    else\n      t[number] =\
    \ t[number]\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpne8u5fy7.lua:9:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmpne8u5fy7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpne8u5fy7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n   local\
    \ result = {}\n   for _, number in ipairs(numbers) do\n      result[number] =\
    \ true\n   end\n   return ipairs(result) and result[true]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vujqwjo.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp0vujqwjo.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ t = {}\n  for _, v in ipairs(numbers) do\n    table.insert(t, v)\n  end\n  table.sort(t)\n\
    \  table.insert(t, 1, table.max(t))\n  for i = 2, #t do\n    table.insert(t, t[i\
    \ - 2])\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphtwcdmgh.lua:11:\
    \ attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmphtwcdmgh.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphtwcdmgh.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ results = {}\n  for i, number in ipairs(numbers) do\n    if results[number]\
    \ then\n      results[number] = nil\n    else\n      table.insert(results, number)\n\
    \    end\n  end\n  return table.concat(results)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl23_lxnj.lua:20:\
    \ expected: {}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpl23_lxnj.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ new = {}\n    for _, item in ipairs(numbers) do\n        if next(new) == item\
    \ then\n            continue\n        end\n        table.insert(new, item)\n \
    \   end\n    return new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpztt7of1q.lua:10: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ removed = {}\n  for i = 1, #numbers do\n    if removed[numbers[i]] then\n  \
    \    numbers[i] = nil\n    else\n      removed[numbers[i]] = true\n    end\n \
    \ end\n  return table.concat(numbers)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3909u7az.lua:20:\
    \ expected: {}\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3909u7az.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ hash_table = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpipc8kjga.lua:16: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n   local\
    \ res = {}\n   for _, v in pairs(numbers) do\n      if res.includes(v) then continue\
    \ end\n      table.insert(res, v)\n   end\n   return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5nrw0y6m.lua:8: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(#numbers\
    \ > 0, 'remove_duplicates: empty list of numbers')\n  local new_numbers = {}\n\
    \  for _, value in ipairs(numbers) do\n    if new_numbers[value] == nil then\n\
    \      new_numbers[value] = 1\n    else\n      new_numbers[value] = new_numbers[value]\
    \ + 1\n    end\n  end\n  for i = 1, #numbers do\n    if new_numbers[numbers[i]]\
    \ > 1 then\n      table.remove(new_numbers, numbers[i])\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01908swe.lua:6:\
    \ remove_duplicates: empty list of numbers\nstack traceback:\n\t/tmp/tmp01908swe.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp01908swe.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    result[number] = number\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0decb62.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpn0decb62.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ table.unpack(table.sort(numbers))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ get length of a nil value\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n   if\
    \ #numbers == 0 then return nil end\n   local removed = {}\n   for i = 1, #numbers\
    \ do\n      removed[numbers[i]] = true\n   end\n   local new_numbers = {}\n  \
    \ for i = 1, #numbers do\n      if removed[i] then\n         new_numbers[#new_numbers\
    \ + 1] = numbers[i]\n      end\n   end\n   return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7v20df9.lua:23:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpq7v20df9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ 0 == #numbers then return numbers end\n  local seen = {}\n  local res = {}\n\
    \  local i = 0\n  while i < #numbers and numbers[i] ~= nil do\n    if seen[numbers[i]]\
    \ then\n      -- keep element\n      i = i + 1\n    else\n      -- add element\n\
    \      table.insert(res, numbers[i])\n      seen[numbers[i]] = true\n    end\n\
    \  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61gcbdkb.lua:28:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp61gcbdkb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local ret = {}\n  for i = 1, #numbers do\n    if seen[numbers[i]]\
    \ then -- Already encountered this number\n      -- Reuse last seen number\n \
    \     ret[i] = seen[numbers[i]]\n    else\n      -- Remember new number, including\
    \ order\n      seen[numbers[i]] = i\n      ret[i] = numbers[i]\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpveip13rp.lua:26:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpveip13rp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local i = 0\n  for n in numbers do\n    if result[i] == nil then\n\
    \      result[i] = n\n    else\n      i = i + 1\n      result[i] = n\n    end\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0200n6ry.lua:25: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    if\
    \ #numbers == 0 then\n        return nil\n    end\n    local seen = {}\n    local\
    \ output = {}\n    for _, num in ipairs(numbers) do\n        if seen[num] then\n\
    \            return output\n        end\n        output[#output+1] = num\n   \
    \     seen[num] = true\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy95u73o.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpiy95u73o.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ result = {}\n\tlocal hash = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw2_zcre3.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  assert(type(numbers)\
    \ == 'table', 'remove_duplicates needs a table')\n  local result = {}\n  local\
    \ num_seen = {}\n  for _, num in pairs(numbers) do\n    if not num_seen[num] then\n\
    \      result[#result + 1] = num\n      num_seen[num] = true\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hy9zent.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp8hy9zent.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ table.unpack(\n    table.sort(\n      table.unique(\n        table.map(\n  \
    \        function(self, num)\n            return self:find(num) ~= nil\n     \
    \     end,\n          numbers\n        )\n      )\n    )\n  )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6m1anwm8.lua:9:\
    \ attempt to call a nil value (field 'map')\nstack traceback:\n\t/tmp/tmp6m1anwm8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6m1anwm8.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  for _, value in ipairs(numbers) do\n    if not result[value]\
    \ then\n      result[value] = value\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04zyq5np.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp04zyq5np.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    for i = 1, #numbers do\n        local number = numbers[i]\n\
    \        if table.contains(result, number) then\n            for j = 1, #result\
    \ do\n                if result[j] == number then\n                    table.remove(result,\
    \ j)\n                    break\n                end\n            end\n      \
    \  else\n            table.insert(result, number)\n        end\n    end\n    return\
    \ result\nend\n</code>\nNow you can just copy your example code to this new function\
    \ and everything will work just fine.\n<|/ a dscore=2 |>\n<| c |>\nThank you very\
    \ much. This is really good solution. I know that this is not the best approach\
    \ in terms of speed, however I just want to learn some basics about Lua and I\
    \ wanted to make something with it (just for fun) and this is what I needed.\n\
    <|/ c |>\n<| a |>\nThe other answers make good points that you should probably\
    \ try to avoid, but if you really want to do this here's a modified version of\
    \ your current solution that doesn't require a loop:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphdn3mf1t.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ output = {}\n    for _, v in ipairs(numbers) do\n        table.insert(output,\
    \ v)\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm81f0dt1.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpm81f0dt1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
