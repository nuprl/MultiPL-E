name: HumanEval_98_count_upper
language: lua
results:
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal n = 0\n\ts:gsub('[A-Z]', function(c) n = n + 1 end)\n\treturn n % 2 ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11l1av39.lua:15:\
    \ expected: 1, actual: false\nstack traceback:\n\t/tmp/tmp11l1av39.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] == 'a' then count = count\
    \ + 1 end\n    if s[i] == 'e' then count = count + 1 end\n    if s[i] == 'i' then\
    \ count = count + 1 end\n    if s[i] == 'o' then count = count + 1 end\n    if\
    \ s[i] == 'u' then count = count + 1 end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9k9jd_4.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpm9k9jd_4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local num_upper = 0\n    for i=1,#s do\n        if string.sub(s, i, i+1)\
    \ ~= 'A' and string.sub(s, i, i+1) ~= 'a' then\n            num_upper = num_upper\
    \ + 1\n        end\n    end\n    return num_upper\nend\n</code>\n<|/ a |>\n<|\
    \ a |>\nJust for fun, here's my attempt at the question with a different solution.\
    \  It also includes some error checking.\n<code>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe78bwo0d.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i=1,#s do\n    if string.sub(s,i,i)=='a' or string.sub(s,i,i)=='A'\
    \ then\n      n = n+1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqaeabl8j.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqaeabl8j.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  for i, c in ipairs(s:gmatch'[%s]{2,}') do\n    local uc, _ = c:upper():find(unicode.char(i))\n\
    \    if uc ~= nil then\n      return uc:byte() == 1\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num_vowels = 0\n  for i = 1, #s do\n    if string.sub(s, i, i+1) == \"\
    a\" then\n      num_vowels = num_vowels + 1\n    end if string.sub(s, i, i+1)\
    \ == \"e\" then\n      num_vowels = num_vowels + 1\n    end if string.sub(s, i,\
    \ i+1) == \"i\" then\n      num_vowels = num_vowels + 1\n    end if string.sub(s,\
    \ i, i+1) == \"o\" then\n      num_vowels = num_vowels + 1\n    end if string.sub(s,\
    \ i, i+1) == \"u\" then\n      num_vowels = num_vowels + 1\n    end\n  end\n \
    \ return num_vowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ms5qvbx.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9ms5qvbx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local num_upper = 0\n    for i = 1, #s do\n        if s[i] <= 'z' and s[i]\
    \ >= 'a' then\n            num_upper = num_upper + 1\n        end\n    end\n \
    \   return num_upper\nend\n</cell>\n<text>\nProblem 7\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpztzu7m9p.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 1\n  s:gsub(\"^([a-z]+)%((.).*[^a-z])$\", function(_, s)\n  \
    \  count = count + s:upper():match(\"[aeiou]\"):gsub(\"[aeiou]\",\"\"):len()\n\
    \  end)\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkjs7was.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwkjs7was.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   for i = 1,string.len(s) do\n      if string.sub(s,i,i) == 'A' then return\
    \ 1+count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i) == 'E'\
    \ then return 1+count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'I' then return 1+count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'O' then return 1+count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'U' then return 1+count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'a' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'b' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'c' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'd' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'e' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'f' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'g' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'h' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'i' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'j' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'k' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'l' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'm' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'n' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'o' then return count_upper(string.sub(s,i+1,i+1))\n      elseif string.sub(s,i,i)\
    \ == 'p' then return count_upper(string.sub(s,i+\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjkfobzdp.lua:29: ')' expected (to close '(' at line 28) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count=0\n\tlocal i=1\n\tfor c in s:gmatch'[AEIOU]'\n\tdo\n\t\tcount=count+1\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfovd60qy.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfovd60qy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i, v in ipairs(string.gmatch(s, '%u')) do\n        if\
    \ v == string.upper(v) then n = n + 1 end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local even = {}\n  local i = 0\n  while i < #s do\n    if string.sub(s,i,i+1)\
    \ ~= 'A' then\n      even[#even+1] = string.sub(s,i,i+1)\n      i = i + 1\n  \
    \  end\n    i = i + 1\n  end\n  i = 1\n  -- For each even index, if s is longer\
    \ than it, return 0\n  -- If s isn't even longer, return #even\n  return #even\
    \ > #s and i or #even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mnqn_yk.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp2mnqn_yk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i in string.gmatch(s, '%a') do\n    i = string.byte(i)\n\
    \    if i ~= 0 and ((i ~= 1) and ((i ~= 4) and ((i ~= 7) and ((i ~= 8))))) then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqer7xa7.lua:20:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpoqer7xa7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- This solution is O(n)\n  local upper = 0\n  for i = 1, #s do\n    if string.upper(s[i])==s[i]\
    \ then\n      upper = upper + 1\n    end\n  end\n  return upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz6yqk0_0.lua:10:\
    \ bad argument #1 to 'upper' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpz6yqk0_0.lua:10: in local 'candidate'\n\t/tmp/tmpz6yqk0_0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1,#s do\n    if string.sub(s, i, i) == 'A' or string.sub(s,\
    \ i, i) == 'a' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uj7418.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmps6uj7418.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return string.gsub(s, \".\", function (c)\n    return (string.char(c) >= \"\
    A\" and string.char(c) <= \"Z\" and c ~= string.upper(c)) or (c == \"D\")\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpckzbapkp.lua:8:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpckzbapkp.lua:8: in function </tmp/tmpckzbapkp.lua:7>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpckzbapkp.lua:7: in local 'candidate'\n\t/tmp/tmpckzbapkp.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == 'A' then\n   \
    \   n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1ylrnq1.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpi1ylrnq1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- Initialize the count at 1.\n  local count = 0\n  for i = 1, #s do\n    --\
    \ If the character is an upper case vowel, then add 1 to the count.\n    if s[i]\
    \ == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n  \
    \    count = count + 1\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq_936i7p.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local i = 1\n    while i <= #s do\n        if string.sub(s, i, i) ~= 'A'\
    \ then\n            return i - 1\n        end\n        i = i + 1\n    end\n  \
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcm2bx8_3.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpcm2bx8_3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s:find('^') == nil then\n    return 0\n  end\n  local vowels = s:gsub('([aeiouAEIOU])',\
    \ function(c) \n    if c:sub(1, 1) == 'a' then\n      return 1\n    else \n  \
    \    return 0\n    end\n  end)\n  return #vowels & 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuun4vv9c.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpuun4vv9c.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local counted = {}\n  for _, ch in ipairs(s) do\n    if ch == 'a' then\n  \
    \    counted[1] = counted[1] + 1\n    else if ch == 'e' then\n      counted[2]\
    \ = counted[2] + 1\n    else if ch == 'i' then\n      counted[3] = counted[3]\
    \ + 1\n    else if ch == 'o' then\n      counted[4] = counted[4] + 1\n    else\
    \ if ch == 'u' then\n      counted[5] = counted[5] + 1\n    end\n  end\n  local\
    \ result = counted[1] + (counted[2] or 0)\n  assert(result >= 0 and result <=\
    \ 5)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp70cs4vwr.lua:38: 'end' expected (to close 'if' at line 11)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return s:gsub('^%u', '', 1):gsub('u+$', 'u'):gsub('[^u]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb714rimw.lua:13:\
    \ expected: 1, actual: \"\"\nstack traceback:\n\t/tmp/tmpb714rimw.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local upper, lower = {}, {}\n    for i = 1, #s do\n        if s:sub(i,i)\
    \ == s:sub(i,i) then\n            upper[#upper + 1] = 'a'\n        end\n    end\n\
    \    for i = 1, #s do\n        if s:sub(i,i) == s:sub(i,i) then\n            lower[#lower\
    \ + 1] = 'a'\n        end\n    end\n    return #upper * 2 - #lower\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89n6k215.lua:24:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmp89n6k215.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- Reverse the string, then convert to a string. Since a string\n  -- has no\
    \ indices in an optimized implementation, the easiest way to\n  -- find all the\
    \ indices is to use a string conversion.\n  local str_reverse = str:reverse()\n\
    \  local str_conv = str:to_string(true)\n  -- To avoid having to reverse the string\
    \ twice, use a loop.\n  -- This code will be faster than the code using string.match\
    \ because\n  -- of how match works.\n  for i = 0, str:len() do\n    -- Only consider\
    \ uppercase if the index is even.\n    if i %% 2 == 0 then\n      -- Convert to\
    \ lowercase and count the characters in it.\n      local str_match = str_conv:match(str_reverse:sub(i))\n\
    \      -- The match function returns nil if there is no match.\n      if str_match\
    \ then\n        return str_match:len() + 1\n      end\n    end\n  end\n  return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzzaxwa_7.lua:17: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowels = \"aieou\"\n  local n = #s\n  for i = 1, n do\n    if string.sub(vowels,\
    \ i, i + 1) ~= \"\" then\n      return i\n    end\n  end\n  return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_8c1x0f.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpz_8c1x0f.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local counted = {}\n   for i=1,#s do\n      if string.sub(s, i, i) ~= string.upper(s)\
    \ then\n\t table.insert(counted, 0)\n      else\n\t table.insert(counted, 1)\n\
    \      end\n   end\n   return table.concat(counted, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayia5isq.lua:21:\
    \ expected: 1, actual: \"00000000000\"\nstack traceback:\n\t/tmp/tmpayia5isq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then count = count + 1 end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_spbttz.lua:17:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpn_spbttz.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s == nil then return 0 end\n  local count = 1\n  for i in string.gmatch(s,\
    \ '[^aeiouAEIOU]+') do\n    count = count * 2\n    if i:sub(1, 1) == 'E' then\
    \ count = count - 1 end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5asj7bp.lua:19:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpn5asj7bp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if string.sub(s,i,i) == 'A' or\
    \ string.sub(s,i,i) == 'a'\n      then\n         count = count + 1\n      end\n\
    \   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ogs2xxs.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0ogs2xxs.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 1\n  for i = 1,#s do\n    if string.sub(s,i,i)=='a' then\n      n\
    \ = n + 1 -- Counting only the 'a' character (even)\n    elseif string.sub(s,i,i)=='A'\
    \ then\n      n = n + 1 -- Counting only the 'A' character (odd)\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98fgfft9.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp98fgfft9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i + 1) ~= 'A'\
    \ and string.sub(s, i, i + 1) ~= 'a'\n    then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvpbmuwp.lua:20:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmptvpbmuwp.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- initialize count with zero\n  local count = 0\n  -- iterate through each\
    \ letter\n  for i=1,#s do\n    -- if the letter is uppercase\n    if string.sub(s,i,i)\
    \ == string.sub(s,i,i) then\n      -- increment count by 1\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe4c23wd.lua:23:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpbe4c23wd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1,#s do\n        if string.sub(s,i,i) == \"\
    a\" or string.sub(s,i,i) == \"e\" or string.sub(s,i,i) == \"i\" or string.sub(s,i,i)\
    \ == \"o\" or string.sub(s,i,i) == \"u\" then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5lxijss.lua:20:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp_5lxijss.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s:sub(1,1) == \"a\" and s:sub(2,2) == \"b\" then\n    return 1\n  end\n\
    \  if s:sub(1,1) == \"b\" and s:sub(2,2) == \"c\" then\n    return 1\n  end\n\
    \  if s:sub(1,1) == \"c\" and s:sub(2,2) == \"d\" then\n    return 1\n  end\n\
    \  if s:sub(1,1) == \"d\" and s:sub(2,2) == \"e\" then\n    return 1\n  end\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_wig3m_.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1_wig3m_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local uppercase_count = 0\n  local i, j = 0, 0\n  while j < #s do\n    if string.sub(s,\
    \ i, j) ~= 'A' and string.sub(s, i, j) ~= 'a' then\n      uppercase_count = uppercase_count\
    \ + 1\n    end\n    i = j + 1\n    j = i + 2\n  end\n  return uppercase_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa630hv1s.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpa630hv1s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  assert(#s >= 1, 's is empty')\n  local count = 0\n  for i=1,#s do\n    if string.sub(s,\
    \ i, i+1) == 'A' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod6co5qi.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpod6co5qi.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= string.upper(string.sub(s,\
    \ i, i)) then n = n + 1 end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5fhel_k.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpq5fhel_k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    local c = s[i]\n    if c == 'A' then\n      vowels_count = vowels_count\
    \ + 1\n    else if vowels[c] then -- c is vowel\n      if c == 'U' then -- count\
    \ all vowels\n        vowels_count = vowels_count + 1\n      else\n        vowels_count\
    \ = vowels_count + 1\n      end\n    end\n  end\n  return vowels_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkjah0lua.lua:36: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  assert(s:match('([A-Z]+)'))\n  return s:gsub('(%w+)', function(c) return c:upper():match('(.)'):sub(1,1)\
    \ end):match'(.):*$'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbull2am.lua:14:\
    \ expected: 1, actual: \"A\"\nstack traceback:\n\t/tmp/tmpcbull2am.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   if s:sub(1,1) ~= 'A' then return 0 end\n   for i=2,#s do\n      if s[i]:sub(1,1)\
    \ ~= 'a' then return 0 end\n   end\n   return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp926ml7b5.lua:17:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp926ml7b5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i, c in string.gmatch(s, \"([A-Z]+)\") do\n    \
    \    if i % 2 == 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxz5v0ix8.lua:9:\
    \ attempt to perform arithmetic on a string value (local 'i')\nstack traceback:\n\
    \t/tmp/tmpxz5v0ix8.lua:9: in local 'candidate'\n\t/tmp/tmpxz5v0ix8.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' or string.sub(s, i, i)\
    \ ~= 'a' then\n      return 0\n    end\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeijp5scf.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpeijp5scf.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  assert(type(s) ~= 'string')\n  s = string.gsub(s, '[%s]', '')\n  local upper\
    \ = 0\n  for i=1, #s, 2 do\n    if string.sub(s, i, i+1) ~= 'A' then\n      return\
    \ upper\n    end\n    upper = upper + 1\n  end\n  return upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpezicbyls.lua:7:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpezicbyls.lua:7: in local 'candidate'\n\
    \t/tmp/tmpezicbyls.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local even = s:match('^(.)%(([%u]+)$)')\n    local odd = s:match('^(.)%((%*)$)')\n\
    \    return #even - #odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3zdwaopc.lua:9:\
    \ attempt to get length of a nil value (local 'even')\nstack traceback:\n\t/tmp/tmp3zdwaopc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3zdwaopc.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local n = 0\n  for i = 1, #s do\n\
    \    if string.sub(vowels, i .. 1, i) ~= s[#s]:lower() then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend\ncount_upper = string.gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkws7cj1k.lua:21:\
    \ bad argument #2 to 'candidate' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpkws7cj1k.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    if s == nil then return end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpifh74l9r.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local count = 1\n  for i = 1, #s do\n    if\
    \ string.sub(vowels, i, i) ~= string.sub(vowels, i + 1, i + 1) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83moilco.lua:20:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmp83moilco.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i, c in pairs(s) do\n        if c:upper() == 'A'\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<text>\nExercise 2: Write a function that checks whether the string\
    \ is a palindrome. If it is, then return the string. If not, then return nil.\
    \ Do not use \"==\" or \"~=\" to compare strings but rather use a single equals\
    \ sign (=) to assign the string. For example:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr24grm25.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local cnt = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) == string.upper(string.sub(s,\
    \ i, i)) then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t4icxnh.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1t4icxnh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if string.sub(s, i, i) ~= 'A'\
    \ then return 0 end\n      count = count + 1\n   end\n   return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jra941d.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1jra941d.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.upper(s[i]) = 'A' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg55sx9qo.lua:9: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local upper = s:upper()\n  local count = 0\n  for _, c in ipairs(upper) do\n\
    \    if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U' then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_sr17m4.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpk_sr17m4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count=0\n    for i=1,#s do\n        if string.sub(s,i,i)=='A' and string.sub(s,i,i+1)=='a'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='B' and string.sub(s,i,i+1)=='b'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='C' and string.sub(s,i,i+1)=='c'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='D' and string.sub(s,i,i+1)=='d'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='E' and string.sub(s,i,i+1)=='e'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='F' and string.sub(s,i,i+1)=='f'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='G' and string.sub(s,i,i+1)=='g'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='H' and string.sub(s,i,i+1)=='h'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='I' and string.sub(s,i,i+1)=='i'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='J' and string.sub(s,i,i+1)=='j'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='K' and string.sub(s,i,i+1)=='k'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='L' and string.sub(s,i,i+1)=='l'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='M' and string.sub(s,i,i+1)=='m'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='N' and string.sub(s,i,i+1)=='n'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='O' and string.sub(s,i,i+1)=='o'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='P' and string.sub(s,i,i+1)=='p'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='Q' and string.sub(s,i,i+1)=='q'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='R' and string.sub(s,i,i+1)=='r'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='S' and string.sub(s,i,i+1)=='s'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd0z53hd6.lua:47: unfinished string near '''\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s ~= nil then\n    local c = 0\n    for i = 1, #s do\n      if ((s[i] >=\
    \ 65) and (s[i] <= 90)) then\n        c = c + 1\n      end\n    end\n    return\
    \ c\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9kqoy8f.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpx9kqoy8f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpx9kqoy8f.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5fjospe.lua:19:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpk5fjospe.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= 'A' then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua2j5r93.lua:19:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpua2j5r93.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i=1,#s do\n        if string.sub(s,i,i) ~= 'A' then\n\
    \            n = n+1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1h_ql7yc.lua:19:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmp1h_ql7yc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  assert(s ~= nil)\n  local count = 0\n  for i = 1, #s, 2 do\n    local c = tostring(s:sub(i,i))\n\
    \    if c:find('[^aeiou]') then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07ukqc7r.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp07ukqc7r.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return string.gsub(s, [[[([^]]*)]]*%[[a-z]{2,}]])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvm67zear.lua:7: unexpected symbol near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s:sub(1,1) == 'a' and s:sub(2,2) == 'b' and s:sub(1,2) == 'c' then\n   \
    \ return 1\n  elseif s:sub(1,1) == 'd' and s:sub(2,2) == 'e' and s:sub(1,2) ==\
    \ 'f' then\n    return 0\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpem3o3q6u.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpem3o3q6u.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then continue\
    \ end\n    num = num + 1\n  end\n  return num\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyr560y29.lua:9: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  -- If the string ends in a vowel, then the last character\
    \ is\n  -- a vowel. Otherwise, we assume that it is an upper case letter.\n  if\
    \ s:sub(-1, 1, \"aeiou\") then count = count + 1 end\n  for i = 1, #s do -- Count\
    \ the number of uppercase vowels.\n    if i % 2 == 1 then\n      if s:sub(i, i,\
    \ \"aeiou\") then count = count + 1 end\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamz5oiaq.lua:22:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpamz5oiaq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local i, j = 0, #s\n  while i < j do\n    if s[i] == 'A' or s[i] == 'a' then\n\
    \      i = i + 1\n      j = j - 1\n    else if s[i] == 'B' or s[i] == 'b' then\n\
    \      i = i + 1\n      j = j - 1\n    else if s[i] == 'C' or s[i] == 'c' then\n\
    \      i = i + 1\n      j = j - 1\n    else if s[i] == 'D' or s[i] == 'd' then\n\
    \      i = i + 1\n      j = j - 1\n    else if s[i] == 'E' or s[i] == 'e' then\n\
    \      i = i + 1\n      j = j - 1\n    else if s[i] == 'F' or s[i] == 'f' then\n\
    \      i = i + 1\n      j = j - 1\n    else if s[i] == 'G' or s[i] == 'g' then\n\
    \      i = i + 1\n      j = j - 1\n    else\n      i = i + 1\n    end\n  end\n\
    \  return j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7_b8niru.lua:49: 'end' expected (to close 'if' at line 18)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local upper = {}\n  local i = 0\n  while s[i] ~= nil do\n    if s[i] == 'a'\
    \ then upper[i] = 1 end\n    if s[i] == 'A' then upper[i] = 1 end\n    if s[i]\
    \ == 'e' then upper[i] = 1 end\n    if s[i] == 'E' then upper[i] = 1 end\n   \
    \ if s[i] == 'i' then upper[i] = 1 end\n    if s[i] == 'I' then upper[i] = 1 end\n\
    \    if s[i] == 'o' then upper[i] = 1 end\n    if s[i] == 'O' then upper[i] =\
    \ 1 end\n    if s[i] == 'u' then upper[i] = 1 end\n    if s[i] == 'U' then upper[i]\
    \ = 1 end\n    i = i + 1\n  end\n  \n  local j = 1\n  while j <= #upper do\n \
    \   if upper[j] == 1 then upper[j] = j end\n    j = j + 1\n  end\n  \n  return\
    \ #upper + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e5kldf9.lua:36:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7e5kldf9.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal num_upper = 0\n\tfor _, c in string.gmatch(s, '[AEIOUaeiou]+') do\n\t\t\
    if c:sub(1, 1):upper() ~= c:sub(1, 1):lower() then\n\t\t\tnum_upper = num_upper\
    \ + 1\n\t\tend\n\tend\n\treturn num_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe77bgrqq.lua:9:\
    \ attempt to index a nil value (local 'c')\nstack traceback:\n\t/tmp/tmpe77bgrqq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe77bgrqq.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal n = 0\n\ts:gsub('([^%z])', function(c) n = n + 1 end)\n\treturn n % 2\
    \ == 0 and n or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdi352mq.lua:15:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpmdi352mq.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local t = 0 -- number of uppercase vowels\n    for i = 1, #s do\n       \
    \ if string.sub(s, i, i) ~= 'A' and string.sub(s, i, i) ~= 'a' then\n        \
    \    -- even indices are consonants\n            -- odd indices are vowels\n \
    \           if string.sub(s, i, i) ~= 'A' and string.sub(s, i, i) ~= 'a' then\n\
    \                t = t + 1\n            end\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyghqw_s.lua:23:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmpcyghqw_s.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local upper = 0\n    local i, j = 0, #s\n    while i <= j do\n        if\
    \ s[i] == 'A' or s[i] == 'a' then\n            upper = upper + 1\n        end\n\
    \        i = i + 1\n    end\n    return upper\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiw2uv3u.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoiw2uv3u.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local uppercased = 0\n  for i = 0, #s do -- iterate over all characters in\
    \ s\n    if string.sub(s,i,i) == string.sub(s,i,i) then -- if the character matches\
    \ the character itself\n      if i % 2 == 0 then -- if it's even\n        uppercased\
    \ = uppercased + 1\n      end\n    end\n  end\n  return uppercased\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptk_c6anl.lua:21:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmptk_c6anl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal vowels = {'A','a','E','e','I','i','O','o','U','u'}\n\tlocal count = 0\n\
    \tfor c in s:gmatch(\"[%aEIIOU]+\") do\n\t\tcount = count + (#vowels - #c) / 2\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkukjylc.lua:18:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvkukjylc.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local i = 0\n    while s[i] do\n        if ((i + 1) % 2 == 0) then\n    \
    \        if string.sub(s, i, i + 1) ~= 'aeiouAEIOU' then\n                return\
    \ 0\n            end\n        end\n        i = i + 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc76cucd.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdc76cucd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return s:sub(1, #s)/#(s..'AEIOU'):gsub('U', 'x'):gsub('x', 'U')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3vco8jhk.lua:7:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp3vco8jhk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3vco8jhk.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if tonumber(s[i:i + 1]) >= tonumber(string.sub(s,\
    \ 'a', i + 1)) or tonumber(s[i + 1:i + 3]) >= tonumber(string.sub(s, 'a', i +\
    \ 1)) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1cb7nm54.lua:9: function arguments expected near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal n = 0\n\tfor i = 1, #s do\n\t\tn = n + (string.sub(s, i, i):upper():find(string.upper(string.sub(s,i,i)))>0)\n\
    \tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjtsu1klx.lua:9:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpjtsu1klx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjtsu1klx.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return s:gsub('([bcdfghijklmnopqrstuvwxyz])\\1', '%1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\\
    1)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n   \
    \ :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\\
    1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n  \
    \  :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\\
    1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n  \
    \  :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\\
    1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n  \
    \  :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\\
    1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n  \
    \  :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\\
    1$)', '\\1')\n    :gsub('(.)(?=([bcdfghijklmnopqrstuvwxyz])\\1$)', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv91pj883.lua:24: unfinished string near '''\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   for i = 1, #s do\n      if s[i] >= 'a' and s[i] <= 'z' then\n         if s[i]\
    \ == 'z' then\n            return 1\n         else\n            -- Count the vowels\
    \ in even indices (1, 3, 5)\n            if i % 2 == 0 then\n               return\
    \ (s[i] - 'a' + 1) / 2\n            else\n               return 0\n          \
    \  end\n         end\n      end\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuo01px_u.lua:8:\
    \ attempt to compare string with nil\nstack traceback:\n\t/tmp/tmpuo01px_u.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpuo01px_u.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    if s then\n        local count, i = 1\n        for i = 1, #s do\n       \
    \     if ((s[i] >= 'a' and s[i] <= 'z') or (s[i] >= 'A' and s[i] <= 'Z')) then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn6vix1ui.lua:10:\
    \ attempt to compare string with nil\nstack traceback:\n\t/tmp/tmpn6vix1ui.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpn6vix1ui.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i=1,string.len(s) do\n        if string.sub(s,i,i)\
    \ == string.sub(s,i,i) then\n            if string.sub(s,i,i)=='a' then count\
    \ = count+1 end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflj963c5.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpflj963c5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count\n  for _, c in ipairs(s:gmatch'[%w]') do\n    if c:upper() ~= c\
    \ then\n      count = count\n    end \n  end \n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local u = 0\n   for i = 1, #s, 2 do -- Iterate over string from both ends\n\
    \      if string.sub(s, i, i+1) = 'A' or string.sub(s, i, i+1) = 'a' then -- Check\
    \ for uppercase letters\n         u = u + 1\n      end\n   end\n   return u\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwtf4r2fu.lua:9: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local c = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == \"A\" then\n \
    \     c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzbavkzu.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqzbavkzu.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count=0\n\tfor i=1,#s do\n\t\tif string.sub(s, i, i+1) ~= s:sub(i, i-1:len(s))\
    \ then\n\t\t\tcount = count+1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjgnc865b.lua:9: ')' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local upper = 0\n  for i = 1, #s do\n    local c = s[i]\n    if c == 'A' or\
    \ c == 'a' then\n      upper = upper + 1\n    elseif c == 'B' or c == 'b' then\n\
    \      upper = upper + 1\n    elseif c == 'C' or c == 'c' then\n      upper =\
    \ upper + 1\n    elseif c == 'D' or c == 'd' then\n      upper = upper + 1\n \
    \   elseif c == 'E' or c == 'e' then\n      upper = upper + 1\n    elseif c ==\
    \ 'F' or c == 'f' then\n      upper = upper + 1\n    else\n      upper = upper\
    \ + 1\n    end\n  end\n  return upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rla38_z.lua:32:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmp3rla38_z.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for _, c in pairs(s:gmatch'[AEIOUaeiou]') do\n    if string.sub(c,\
    \ 2, 2) ~= 'x' then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97v8ao2e.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp97v8ao2e.lua:8: in local 'candidate'\n\t/tmp/tmp97v8ao2e.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) == 'A' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8b1ccurz.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8b1ccurz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    if #s <= 1 then\n        return 0\n    end\n    -- If the first letter is\
    \ uppercase, return 1.\n    if s[1] ~= tolower(s[1]) then\n        return 1\n\
    \    end\n    -- Iterate over the string in reverse.\n    for i = #s - 1, 1, -1\
    \ do\n        if s[i] ~= tolower(s[i]) then\n            return 0\n        end\n\
    \    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0u_furr0.lua:11:\
    \ attempt to call a nil value (global 'tolower')\nstack traceback:\n\t/tmp/tmp0u_furr0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp0u_furr0.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i + 1) ~= 'A' then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8ld6z7p5.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    count = count + is_vowel(s[i], true)\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pf1ndia.lua:9:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmp0pf1ndia.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0pf1ndia.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local upper = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= 'A' and string.sub(s,i,i)\
    \ ~= 'a' then\n      upper = upper + 1\n    end\n  end\n  return upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_kb7bmj.lua:19:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmp5_kb7bmj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) == uppercase\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6_07so8.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf6_07so8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowels = \"AEIOUaeiou\"\n  local count = 1\n  local index = 1 -- index\n\
    \  while index <= #s do\n    index = index:find(vowels, 1, index)\n    if index\
    \ == nil then\n      return count\n    end\n    index = index + 1 -- increment\
    \ index\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizssubf2.lua:11:\
    \ attempt to index a number value (local 'index')\nstack traceback:\n\t/tmp/tmpizssubf2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpizssubf2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i = 1,#s do\n      count = count + ( string.sub(s,i,i)\
    \ == string.sub(s,i,i) ):byte()\n   end\n   return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozjmb49t.lua:9:\
    \ attempt to index a boolean value\nstack traceback:\n\t/tmp/tmpozjmb49t.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpozjmb49t.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s == '' then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgvru3nj3.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        if string.sub(s, i, i) ~= 'A'\
    \ then\n            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfkprc2_.lua:19:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpsfkprc2_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal cap_vowels = #string.gmatch(s, '[AEIOUaeiou]')\n\tif cap_vowels == nil\
    \ then\n\t\treturn 0\n\telseif cap_vowels % 2 == 0 then\n\t\treturn cap_vowels\
    \ / 2\n\telse\n\t\treturn cap_vowels\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprek2ls4x.lua:7:\
    \ attempt to get length of a function value\nstack traceback:\n\t/tmp/tmprek2ls4x.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprek2ls4x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i\
    \ = 1, #s do\n        if string.sub(s,i,i) == string.sub(s,i,i) then\n       \
    \     count = count + 1\n        end\n    end\n    count = count - #s\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoc1q3gkm.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoc1q3gkm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        if string.sub(s,i,i) == 'A' then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2ewdq8q.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf2ewdq8q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1,#s do\n    if string.sub(s,i,i) ~= nil then\n\
    \      if string.sub(s,i,i) ~= 'A' then\n        count = count+1\n      end\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnldlk_a6.lua:21:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpnldlk_a6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return s:gsub('([%w])', function(c) return c == 'a' or c == 'A' or c == 'e'\
    \ or c == 'E' or c == 'i' or c == 'I' or c == 'o' or c == 'O' or c == 'u' or c\
    \ == 'U' end):reverse():gsub('(.)', function(c) return string.upper(c) end):reverse():gsub('(.)',\
    \ function(c) return string.upper(c) end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq62ne576.lua:7:\
    \ invalid replacement value (a boolean)\nstack traceback:\n\t/tmp/tmpq62ne576.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpq62ne576.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local i = 0\n  while i < #s do\n    if not is_vowel(s[i]) then\n      return\
    \ 0\n    end\n    if s[i] == 'a' then\n      i = i + 1\n      if i % 2 == 0 then\
    \ return 1 end\n    elseif s[i] == 'e' then\n      i = i + 1\n      if i % 2 ==\
    \ 0 then return 1 end\n    elseif s[i] == 'i' then\n      i = i + 1\n      if\
    \ i % 2 == 0 then return 1 end\n    elseif s[i] == 'o' then\n      i = i + 1\n\
    \      if i % 2 == 0 then return 1 end\n    elseif s[i] == 'u' then\n      i =\
    \ i + 1\n      if i % 2 == 0 then return 1 end\n    else\n      i = i + 1\n  \
    \  end\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxyoqv45e.lua:9:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpxyoqv45e.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxyoqv45e.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local upper, count = {}, {}\n  for\
    \ i = 1, #s do\n    if i % 2 == 0 then\n      for j = 1, #vowels do\n\tupper[vowels[j]]=upper[vowels[j]]+1\n\
    \      end\n    end\n    count[tostring(upper)] = count[tostring(upper)] + 1\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwykfuo0p.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpwykfuo0p.lua:15: in local 'candidate'\n\t/tmp/tmpwykfuo0p.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local upper = 0\n   for i = 1, #s do\n      if s[i] == 'A' or s[i] == 'a'\
    \ then\n         upper = upper + 1\n      else\n         upper = upper\n     \
    \ end\n   end\n   return upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96a7wv2a.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp96a7wv2a.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    if s ~= string.gsub(s, \"[aeiouAEIOU]\", \"\")\n    then\n        return\
    \ 0\n    end\n    local total = 0\n    for i = 1, string.len(s) do\n        total\
    \ = total + 1\n        if string.sub(s, i, i + 1) ~= 'A' and\n           string.sub(s,\
    \ i, i + 1) ~= 'E' and\n           string.sub(s, i, i + 1) ~= 'I'\n        then\n\
    \            total = total - 1\n        end\n    end\n    return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelain8_w.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpelain8_w.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local cnt = 0\n  for i=1,#s do\n    if string.sub(s,i,i):sub(1,1):upper()=='A'\
    \ or string.sub(s,i,i):sub(1,1):upper()=='a' then\n      cnt = cnt + 1\n    end\n\
    \  end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cp2jo1d.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0cp2jo1d.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s:match('^[aeiou]*$') then\n    return s:gsub('^[aeiou]+$', ''):gsub('[^aeiou]',\
    \ ''):gsub('[^aeiou]+$', '')\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbredqq_a.lua:17:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbredqq_a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return #s:gsub('%a',''):gsub('%d',''):gsub('%e',''):gsub('%f',''):gsub('%g',''):gsub('%h',''):gsub('%i',''):gsub('%j',''):gsub('%k',''):gsub('%l',''):gsub('%m',''):gsub('%n',''):gsub('%p',''):gsub('%q',''):gsub('%r',''):gsub('%s',''):gsub('%t',''):gsub('%u',''):gsub('%v',''):gsub('%w',''):gsub('%x',''):gsub('%y',''):gsub('%z','')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_dnen9l0.lua:7:\
    \ missing '[' after '%f' in pattern\nstack traceback:\n\t/tmp/tmp_dnen9l0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_dnen9l0.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for c in s:gmatch(\"[aeiouAEIOU]+\") do count = count +\
    \ 1 end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv74q4ze.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnv74q4ze.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s[i]\n        if\
    \ c:match '[aeiou]' then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsb30lzs3.lua:10:\
    \ attempt to index a nil value (local 'c')\nstack traceback:\n\t/tmp/tmpsb30lzs3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpsb30lzs3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  for i = 1, #s, 2 do\n    if string.sub(s, i, i) ~= 'A' or string.sub(s, i -\
    \ 1, i) ~= 'a' then\n      return 0\n    end\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7b5vxv5.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpd7b5vxv5.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local uppers = { }\n    for i = 1, #s do\n        local c = toupper(s[i])\n\
    \        if (c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U') then\n\
    \            uppers[#uppers+1] = 1\n        end\n    end\n    return #uppers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9f0__lkw.lua:9:\
    \ attempt to call a nil value (global 'toupper')\nstack traceback:\n\t/tmp/tmp9f0__lkw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9f0__lkw.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  assert(type(s) == \"string\", \"s should be a string\")\n  assert(s:len() >\
    \ 0, \"s cannot be empty\")\n  local n = 0\n  for i = 1, s:len() do\n    if string.sub(s,\
    \ i, i + 1) ~= \"\" then n = n + 1 end\n  end\n  for i = 1, s:len() do\n    if\
    \ string.sub(s, i, i + 1) ~= \"_\" then n = n + 1 end\n  end\n  return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn10q267_.lua:22:\
    \ expected: 1, actual: 12\nstack traceback:\n\t/tmp/tmpn10q267_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    if s then\n        local n, i, l\n        for i = 1, #s do\n            if\
    \ string.sub(s,i,i) == 'A' then\n                n = n + 1\n            end\n\
    \        end\n        for i = 2, #s do\n            if string.sub(s,i,i) == 'A'\
    \ then\n                n = n - 1\n            end\n        end\n        n = n\
    \ - 1\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmnivin6a.lua:19:\
    \ attempt to perform arithmetic on a nil value (local 'n')\nstack traceback:\n\
    \t/tmp/tmpmnivin6a.lua:19: in local 'candidate'\n\t/tmp/tmpmnivin6a.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s == nil then return 0 end\n  local vowels = {'a','e','i','o','u'}\n  local\
    \ uppers = 0\n  local i = 1 -- Index\n  for i,v in ipairs(vowels) do\n    if v\
    \ == s[i] then\n      uppers = uppers + 1\n    end\n  end\n  return uppers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tyua0rw.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_tyua0rw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    count = count + s.sub(i, i).upper():bytes():len()\
    \ % 2\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsg_gnpad.lua:9:\
    \ bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpsg_gnpad.lua:9: in local 'candidate'\n\t/tmp/tmpsg_gnpad.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for _, c in ipairs(s) do\n    if c:lower() == \"a\" then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3h02b4i5.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3h02b4i5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local even = false\n  local count = 0\n  for letter in s:gmatch(\"[^A-Za-z]\"\
    ) do\n    count = count + 1\n    if letter:sub(1, 1):upper() == letter then\n\
    \      even = not even\n    end\n  end\n  return even and count / 2 \nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptp30_sow.lua:21:\
    \ expected: 1, actual: false\nstack traceback:\n\t/tmp/tmptp30_sow.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4scvoho6.lua:19:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmp4scvoho6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    if s[i] and ((s[i] >= 'a' and s[i] <=\
    \ 'z') or (s[i] >= 'A' and s[i] <= 'Z')) then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg0fozw3.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpcg0fozw3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal cnt = 0\n\tfor i = 1, #s do\n\t\tlocal v = string.sub(s,i,i)\n\t\tif v\
    \ == \"A\" or v == \"a\" then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptu9s88ow.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptu9s88ow.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local upper = 0\n  for _, c in pairs(s) do\n    local v = tostring(c):upper()\n\
    \    if v == 'A' then upper = upper + 1 end\n  end\n  return upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp13t14cwb.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp13t14cwb.lua:8: in local 'candidate'\n\t/tmp/tmp13t14cwb.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num_upper = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= 'A' then\n\
    \      num_upper = num_upper + 1\n    end\n  end\n  return num_upper\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphq8v44ja.lua:19:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmphq8v44ja.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- We loop from 2 to # of characters in s and check if\n  -- s[i] is uppercase.\
    \ Since s[i] is uppercase, we increment i by 1.\n  for i = 2, #s do\n    if string.sub(s,\
    \ i, i):upper() ~= 'A' then\n      return i\n    end\n  end\n  return #s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5kzs_3j.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpe5kzs_3j.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count=0\n  local i=1\n  while i<=#s do\n    if string.sub(s, i, i)==\"\
    A\" then\n      count=count+1\n    end\n    i=i+1\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6k0ihej.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpd6k0ihej.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = true\n\tfor i = 1, #s do\n\t\tcount = count and is_upper(s[i])\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbosdvieh.lua:9:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpbosdvieh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbosdvieh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    if s == '' or s ~= s:upper() then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5y9__nql.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return s:gsub(\"[aeiouAEIOU]\", function(c) \n    return (string.byte(c) >=\
    \ 65 and string.byte(c) <= 90) or c % 2 ~= 0 and 1 or 0\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqnxtkby6.lua:8:\
    \ attempt to perform arithmetic on a string value (local 'c')\nstack traceback:\n\
    \t/tmp/tmpqnxtkby6.lua:8: in function </tmp/tmpqnxtkby6.lua:7>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpqnxtkby6.lua:7: in local 'candidate'\n\t/tmp/tmpqnxtkby6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1,#s do\n    if s[i] == 'A' or s[i] == 'a' then\n  \
    \    n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x_0nxll.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_x_0nxll.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return s:gsub('([%w])', function(c) \n    return c == 'A' or c == 'a' then\
    \ 1 \n    else 0 end\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmn78ifxh.lua:8: 'end' expected (to close 'function' at line\
    \ 7) near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local i = 0\n    local n = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppnsotoi7.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- Initialize count to zero\n  local count = 0\n  -- Initialize a boolean value\
    \ to false\n  local bool = false\n  -- Loop through all the characters in the\
    \ string\n  for i=1,#s do\n    -- If the character at index i is an uppercase\
    \ letter\n    if string.sub(s, i, i):upper() ~= 'A' then\n      -- Set bool to\
    \ true\n      bool = true\n      break\n    end\n  end\n  -- If the string contains\
    \ any uppercase letters\n  if bool then\n    -- Add 1 to count\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim_j71z7.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpim_j71z7.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local counter = {}\n  local i, n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp70tl3s95.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 0, #s - 1 do\n        if string.sub(s, i, i\
    \ + 1) ~= \"\" then count = count + 1 end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyurb51t6.lua:17:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpyurb51t6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local cnt = 0\n  for i = 1, #s do\n    cnt = cnt + tostring(s[i])\n    if i%2\
    \ == 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\n</cell>\n\
    <text>\nExercise 2\nUse the count_upper function you defined above to count the\
    \ number of uppercase vowels in each line of the file words.txt and print the\
    \ results out to the console. Remember to open and read the file first!\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2r0z8svi.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  -- Count the number of uppercase vowels in even indices\n\
    \  for i = 1, #s do\n    if i % 2 == 0 then\n      if tostring(s:sub(i,i)) ~=\
    \ 'a' and\n         tostring(s:sub(i,i)) ~= 'A' then\n        count = count +\
    \ 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gpkyaqd.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4gpkyaqd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\tfor i = 1, #s do\n\t\tlocal c = string.sub(s, i, i)\n\t\t\
    if c == 'a' then count = count + 1 end\n\t\tif c == 'e' then count = count + 1\
    \ end\n\t\tif c == 'i' then count = count + 1 end\n\t\tif c == 'o' then count\
    \ = count + 1 end\n\t\tif c == 'u' then count = count + 1 end\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngaej57b.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpngaej57b.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local upper = 0\n  for i = 1, #s do\n    if s[i] == 'a' or s[i] == 'A' then\n\
    \      if i % 2 == 0 then\n        upper = upper + 1\n      end\n    end\n  end\n\
    \  return upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla4jpmbj.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpla4jpmbj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local counter = 1\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n\
    \      counter = counter + 1\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddxvi22x.lua:19:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpddxvi22x.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if c\
    \ == \"A\" or c == \"E\" or c == \"I\" or c == \"O\" or c == \"U\" then\n    \
    \  n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbq6hzlw.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpnbq6hzlw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i=1,#s do\n    if string.sub(s, i, i+1) ~= 'A' and string.sub(s,\
    \ i, i+1) ~= 'a' then\n      count = count+1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxo98chbp.lua:19:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpxo98chbp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    local v = tonumber(s[i])\n    if v\
    \ ~= nil and ((v <= 'Z' and v ~= 'z') or (v >= 'a' and v <= 'z') or (v >= '0'\
    \ and v < 'a')) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqm040rk_.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqm040rk_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local count = 0\n    for i = 1,\
    \ #s do\n        local c = string.sub(s,i,i)\n        if c then\n            if\
    \ vowels[string.find(c,'[aeiou]')] then\n                count = count + 1\n \
    \           end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuor9133a.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpuor9133a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    if #s == 0 then\n        return 0\n    end\n    local count = 0\n    local\
    \ i = 2\n    while i <= #s do\n        if s[i] == 'A' then\n            count\
    \ = count + 1\n        end\n        i = i + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp471zri94.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp471zri94.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i)\
    \ .. 'A' then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ny2i0ke.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6ny2i0ke.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return s:gsub('([%w_])', function(x)\n    return x:sub(1, 1):upper():sub(2)\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntdckxqc.lua:15:\
    \ expected: 1, actual: \"\"\nstack traceback:\n\t/tmp/tmpntdckxqc.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1, #s, 2 do\n    local c = string.sub(s,i,i)\n    if\
    \ c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n  \
    \    n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe341mm7x.lua:21:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpe341mm7x.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowels = 'aeiou'\n  local result = 0\n  for i = 1, #s do\n    if string.sub(vowels,\
    \ i, i) ~= 'A' then\n      result = result + 1\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnf9irr3.lua:20:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpdnf9irr3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 1\n    for i, letter in string.gmatch(s, \"[%u]\") do\n   \
    \     if letter:sub(1, 1) ~= 'A' then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpunxlwpo_.lua:9:\
    \ attempt to index a nil value (local 'letter')\nstack traceback:\n\t/tmp/tmpunxlwpo_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpunxlwpo_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local upper = string.gsub(s, '([a-z])([A-Z])')\n   return upper:len() / 2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnwr5fvzl.lua:7:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpnwr5fvzl.lua:7: in local 'candidate'\n\t/tmp/tmpnwr5fvzl.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    count = count + (s[i] == 'A' or s[i]\
    \ == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U')\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowx8j4oz.lua:9:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpowx8j4oz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpowx8j4oz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count\n  local i = 0\n  -- The outer loop starts from i = 1 because we\
    \ need at least 1 upper case letter to count towards our result.\n  -- The inner\
    \ loop starts from i = 1 since we don't want to count an upper case letter for\
    \ its neighbor.\n  for i = 1, #s do\n    if string.sub(s,i,i) == uppercase then\n\
    \      count = count + 1\n    else\n      count = count + (i - 1)\n    end\n \
    \ end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5sdcz5q.lua:15:\
    \ attempt to perform arithmetic on a nil value (local 'count')\nstack traceback:\n\
    \t/tmp/tmpe5sdcz5q.lua:15: in local 'candidate'\n\t/tmp/tmpe5sdcz5q.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s == '' then return 0 end\n  local count = 0\n  for i = 1, #s, 1 do\n  \
    \  local c = string.sub(s,i,i)\n    if c == 'A' or c == 'a' or c == 'E' or c ==\
    \ 'e' or c == 'I' or c == 'i' or c == 'O' or c == 'o' or c == 'U' or c == 'u'\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08m8ukc1.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp08m8ukc1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local vowel_count = 0\n    local idx = 1\n    while idx <= #s do\n      \
    \  if s[idx] ~= s[(idx-1) * 2] then\n            vowel_count = vowel_count + 1\n\
    \        end\n        idx = idx + 1\n    end\n    return vowel_count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6o_a4xn.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpm6o_a4xn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \t-- Write your code here\n\tlocal c = 0\n\tfor i = 1, #s do\n\t\tif s[i] == 'a'\
    \ or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n\t\t\tc =\
    \ c + 1 \n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r6l1wsk.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5r6l1wsk.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  for idx, letter in ipairs(s) do\n    if letter ~= 'A' and letter ~= 'a' then\n\
    \      return idx\n    end\n  end\n  return 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yipk76a.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_yipk76a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return s:gsub('[A-Z]', ''):gsub('%z', ''):gsub('%Z', ''):match('%z'):gsub('(.)',\
    \ '\\\\1'):gsub('(.)', '%1'):gsub('(.)', '%1')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd91imkxw.lua:7:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmpd91imkxw.lua:7: in\
    \ local 'candidate'\n\t/tmp/tmpd91imkxw.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i\
    \ = 1, #s do\n        if vowels[s:sub(i,i)] ~= 'a' then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvx7el8l.lua:20:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmprvx7el8l.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local l = 0\n    for i = 1, #s do\n        if string.sub(s, i, i) ~= 'A'\
    \ and string.sub(s, i, i) ~= 'a' then\n            l = l + 1\n        end\n  \
    \  end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt_rqdgd.lua:19:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmpdt_rqdgd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local i = 0\n   while i < #s do\n      if s[i] == \"A\" or s[i] == \"E\" or\
    \ s[i] == \"I\" or s[i] == \"O\" or s[i] == \"U\" then\n         i = i + 1 \n\
    \      else\n         return 0\n      end\n   end\n   return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputt3q5c_.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmputt3q5c_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num_upper = 0\n  for i = 0, #s do\n    if s[i] == 'A' or s[i] == 'E'\
    \ or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n      num_upper = num_upper\
    \ + 1\n    end\n  end\n  return num_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppuns98g7.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppuns98g7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local upper = 'a'\n   for i = 1, #s do\n      if string.sub(s,i,i) ~= upper\
    \ then\n         upper = upper:byte()\n      else\n         upper = upper:byte()\
    \ + 32\n      end\n   end\n   return upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2iruaw2w.lua:10:\
    \ attempt to index a number value (local 'upper')\nstack traceback:\n\t/tmp/tmp2iruaw2w.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2iruaw2w.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local n = 0\n   for i = 1, #s do\n      if s[i] == 'A' or s[i] == 'E' or s[i]\
    \ == 'I' or s[i] == 'O' or s[i] == 'U' then\n         n = n + 1\n      end\n \
    \  end\n   return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyyinipy.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppyyinipy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        -- If current character is a vowel,\
    \ ignore it and continue\n        if s[i - 1] ~= 'a' and s[i - 1] == 'A' then\n\
    \            n = n + 1\n        else\n            -- If current character is an\
    \ uppercase vowel,\n            -- the previous character must be a vowel.\n \
    \           if s[i - 1] ~= 'A' then\n                n = n + 1\n            end\n\
    \        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgsgazvk.lua:26:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpvgsgazvk.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local even = string.gsub(s, '[AEiou]', '\\0')\n    local count   = 0\n  \
    \  for i, v in ipairs(string.gsub(even, '[AEiou]', '\\0')) do\n        if string.find(string.upper(v),\
    \ 'A') then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6roztxd7.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6roztxd7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if tonumber(s[i] ~= string.sub(s,i,i))\
    \ then\n         return 0\n      elseif s[i] == 'a' or s[i] == 'e' or s[i] ==\
    \ 'i' or s[i] == 'o' then\n         count = count + 1\n      end\n   end\n   return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzft2y51.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplzft2y51.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num_upper = 0\n  for i=1,#s do\n    if string.sub(s,i,i) == string.sub(s,i,i)\
    \ .. 'A' then\n      num_upper = num_upper + 1\n    end\n  end\n  return num_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdx5fyg_m.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdx5fyg_m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then n = n + 1 end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7akjkdy.lua:17:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpc7akjkdy.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num = 0\n  for i=1, #s do\n    num = num + is_upper_case(s[i])\n  end\n\
    \  return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppc8pzynu.lua:9:\
    \ attempt to call a nil value (global 'is_upper_case')\nstack traceback:\n\t/tmp/tmppc8pzynu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppc8pzynu.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- TODO: Check for non-letters\n  local even_indexes = {}\n  for i = 1,#s do\n\
    \    local c = toupper(s[i])\n    if c >= 'A' and c <= 'Z' then\n      if c:byte()\
    \ % 2 == 0 then\n        even_indexes[#even_indexes + 1] = tolower(s[i])\n   \
    \   end\n    end\n  end\n  return #even_indexes / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9bacdzd.lua:10:\
    \ attempt to call a nil value (global 'toupper')\nstack traceback:\n\t/tmp/tmpj9bacdzd.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpj9bacdzd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i=1,#s do\n        if string.sub(s,i,i) ~= 'A' and string.sub(s,i,i)\
    \ ~= 'a' then\n            n = n + 1\n        end\n    end\n    return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcqzip_r.lua:19:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmptcqzip_r.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- Find the even-indexed characters.\n  local even_indexed_characters = {}\n\
    \  for i = 1, #s do\n    if i % 2 == 0 then\n      table.insert(even_indexed_characters,\
    \ s[i])\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpubvxb7cm.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1,#s do\n    if string.sub(s, i, i) == string.char(string.upper(string.sub(s,i,i)))\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwm294et.lua:9:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmphwm294et.lua:9: in local 'candidate'\n\t/tmp/tmphwm294et.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i, c in string.gmatch(s, '[%u..%u]+') do\n    local uv =\
    \ string.byte(c, 'u')\n    if uv > 0 and uv % 2 == 1 then\n      n = n + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt59n_3z9.lua:9:\
    \ bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpt59n_3z9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpt59n_3z9.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = nil\n  for i=1, #s do\n    local c = s[i]\n    local is_upper\
    \ = ((c:byte() >= 65) and (c:byte() <= 90))\n    if count ~= nil then\n      count\
    \ = count + ((is_upper and i%2 == 1) or is_upper)\n    else\n      count = is_upper\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprovx2irl.lua:10:\
    \ attempt to index a nil value (local 'c')\nstack traceback:\n\t/tmp/tmprovx2irl.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprovx2irl.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local u = 0\n  for i = 1, #s do\n    if s[i] and s[i] ~= ' ' then\n      u\
    \ = u + 1\n      if i % 2 == 0 then\n\tbreak\n      end\n    end\n  end\n  return\
    \ u\nend\n</code>\n<|/ a tags=lua,string-matching,string-count dscore=2 |>\n<|\
    \ a tags=lua,string-matching,string-count |>\nIn case you don't mind using regular\
    \ expressions, the following code counts occurrences of uppercase vowels.\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphtwndxf1.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num_upper = 0\n  for i=1,#s do\n    if s[i] == 'A' or s[i] == 'a' then\n\
    \      num_upper = num_upper + 1\n    end\n  end\n  return num_upper\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkb5mi1f.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqkb5mi1f.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local n = 0\n   for i = 1, #s do\n      if string.sub(s,i,i) ~= 'A' then\n\
    \         n = n + 1\n      end\n   end\n   return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphk2lsuo3.lua:19:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmphk2lsuo3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   for i = 1, #s do\n      if string.sub(s, i, i) ~= 'A' and string.sub(s, i,\
    \ i) ~= 'a'\n      then\n         return 0\n      end\n   end\n   return 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzn36rk8.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjzn36rk8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' or string.sub(s,\
    \ i, i) ~= 'a'\n    or string.sub(s, i, i) ~= 'E' or string.sub(s, i, i) ~= 'e'\n\
    \    or string.sub(s, i, i) ~= 'I' or string.sub(s, i, i) ~= 'i'\n    or string.sub(s,\
    \ i, i) ~= 'O' or string.sub(s, i, i) ~= 'o'\n    or string.sub(s, i, i) ~= 'U'\
    \ or string.sub(s, i, i) ~= 'u'\n    then count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhp13tqa.lua:23:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpkhp13tqa.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i,c in pairs(s) do\n    local t = c:byte()\n    if t ~=\
    \ #s then\n      n = n + 1 -- Not an uppercase character\n    elseif t%2 ~= 0\
    \ then\n      n = n + 1 -- Not an even-indexed character\n    end\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxgn2z72j.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpxgn2z72j.lua:8: in local 'candidate'\n\t/tmp/tmpxgn2z72j.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if string.sub(s, i, i+1) ~= 'A'\
    \ then\n         count = count+1\n      end\n   end\n   return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos1ony4_.lua:19:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpos1ony4_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return s:gsub('([%aA])',function(a)\n        return a:upper():byte() == 1\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1b944ah0.lua:15:\
    \ expected: 1, actual: \"aBCdEf\"\nstack traceback:\n\t/tmp/tmp1b944ah0.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 1\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n \
    \     return n\n    end\n    n = n + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcl59hx5s.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcl59hx5s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  for i = 1, #s do\n    if string.sub(s, i, i) == string.sub(s, 'A', 1, i) then\n\
    \      return i\n    end\n  end\n  return 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxpbhog8p.lua:8:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpxpbhog8p.lua:8: in local 'candidate'\n\t/tmp/tmpxpbhog8p.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local counter = { }\n   for i = 1, #s do\n      if string.sub(s, i, i) ==\
    \ \"a\" or string.sub(s, i, i) == \"e\" or string.sub(s, i, i) == \"i\" then\n\
    \         counter[#counter+1] = 1\n      end\n   end\n   return #counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuexir40a.lua:20:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpuexir40a.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then count = count+1 end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_3rf14g.lua:17:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmp0_3rf14g.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num_upper = 0\n  for i = 1, #s, 2 do\n    if string.sub(s, i, i+2) ==\
    \ \"AEIOUaeiou\" then\n      num_upper = num_upper + 1\n    end\n  end\n  return\
    \ num_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8poe5yb.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpj8poe5yb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  for i = 1,#s do\n    if string.sub(s,i,i) == 'a' or string.sub(s,i,i) == 'e'\
    \ or string.sub(s,i,i) == 'i' or string.sub(s,i,i) == 'o' or string.sub(s,i,i)\
    \ == 'u' then\n      if i ~= 1 or i ~= 2 or i ~= 4 or i ~= 6 then\n        return\
    \ i\n      end\n    end\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4osseaw7.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4osseaw7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == 'A' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs6fai0q.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprs6fai0q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if s:sub(i, i) == toupper(s:sub(i,\
    \ i)) then\n\t count = count + 1\n      end\n   end\n   return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvb9drj3v.lua:9:\
    \ attempt to call a nil value (global 'toupper')\nstack traceback:\n\t/tmp/tmpvb9drj3v.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvb9drj3v.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local c = 0\n    for i = 1, #s, 2 do\n        local char = string.sub(s,\
    \ i, i + 1)\n        if char == string.upper(char) then\n            c = c + 1\n\
    \        end\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphld4nj2y.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphld4nj2y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local upper = 0\n    for i = 1, #s, 2 do\n        if string.sub(s,i,i) ==\
    \ 'A' and string.sub(s,i+1,i+1) ~= 'E' then\n            upper = upper + 1\n \
    \       end\n    end\n    return upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sq255yk.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4sq255yk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local result = 0\n  for i = 0, #s - 1 do\n    local c = tostring(s:sub(i,i))\n\
    \    if c == \"a\" or c == \"A\" then\n      result = result + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u0wua4m.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2u0wua4m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local uppercase_count = 0\n  for i,c in ipairs(s:gmatch\"[A-Z]+\") do\n   \
    \ local is_vowel = c:byte() ~= 64\n    if is_vowel then\n      uppercase_count\
    \ = uppercase_count + 1\n    end\n  end\n  return uppercase_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s == nil then return 0 end\n  return s:gsub('([A-Z])', function(c) return\
    \ c:upper() end):gsub('%z',''):gsub('(.)%z','%1'):gsub('%z','')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wtivn0s.lua:14:\
    \ expected: 1, actual: \"aBCdEf\"\nstack traceback:\n\t/tmp/tmp5wtivn0s.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num_upper = s:sub(1, 1):upper():len()\n  local num_even = s:sub(1, 1):upper():len()\n\
    \  while num_even > 0 do\n    local idx = s:sub(1, num_even)\n    if idx:find(\"\
    A\") then\n      num_upper = num_upper + 1\n    end\n    num_even = num_even -\
    \ 1\n  end\n  return num_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_bbfov0.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpp_bbfov0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local t = ''\n  for _, c in string.gmatch(s, '%a') do\n    t = t .. c\n  end\n\
    \  -- Count consecutive vowels\n  local n = 0\n  for i = 1, #t do\n    local c\
    \ = t[i]\n    if c == 'a' then\n      n = n + 1 -- consecutive vowels\n    elseif\
    \ c == 'e' then\n      n = n + 1 -- consecutive vowels\n    elseif c == 'i' then\n\
    \      n = n + 1 -- consecutive vowels\n    elseif c == 'o' then\n      n = n\
    \ + 1 -- consecutive vowels\n    elseif c == 'u' then\n      n = n + 1 -- consecutive\
    \ vowels\n    end\n  end\n  -- Count consecutive vowels in odd indices\n  for\
    \ i = 1, #t - 1 do\n    local c = t[i]\n    if c == 'a' then\n      n = n + 1\
    \ -- consecutive vowels\n    elseif c == 'e' then\n      n = n + 1 -- consecutive\
    \ vowels\n    elseif c == 'i' then\n      n = n + 1 -- consecutive vowels\n  \
    \  elseif c == 'o' then\n      n = n + 1 -- consecutive vowels\n    elseif c ==\
    \ 'u' then\n      n = n + 1 -- consecutive vowels\n    end\n  end\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa2e5txf3.lua:9:\
    \ attempt to concatenate a nil value (local 'c')\nstack traceback:\n\t/tmp/tmpa2e5txf3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpa2e5txf3.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  for i = 1,string.len(s) do\n    if string.sub(s,i,i) ~= 'A' or string.sub(s,i,i)\
    \ ~= 'a' then\n      return 0\n    end\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2fqdm7x.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpk2fqdm7x.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return s:gsub('([%a])%u', function(c) return (string.byte(c) ~= 0 and c or\
    \ nil) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkf4ydg0p.lua:13:\
    \ expected: 1, actual: \"aCdf\"\nstack traceback:\n\t/tmp/tmpkf4ydg0p.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   -- Check whether s is nil or empty\n   if s == nil or s == \"\" then\n   \
    \   return 0\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpov3wvdv7.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   if #s <= 1 then return 0 end\n   local even = math.floor((#s - 1) / 2)\n \
    \  if s[even] ~= 'A' then return 0 end\n   if s[even+1] ~= 'A' then return 0 end\n\
    \   local result = 0\n   for i = even+2, #s, 2 do\n      if s[i] ~= 'A' then break\
    \ end\n      result = result + 1\n   end\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipnwkgin.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpipnwkgin.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
