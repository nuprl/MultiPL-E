name: HumanEval_111_histogram
language: lua
results:
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    table.insert(counts, letter)\n  end\n  for i = #counts, 1, -1 do\n    counts[i]\
    \ = counts[i] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwlqczqyp.lua:16:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmpwlqczqyp.lua:16: in local 'candidate'\n\t/tmp/tmpwlqczqyp.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histo = {}\n  for c in test:gmatch(\"[%a]+\") do histo[c]\
    \ = histo[c] + 1 end\n  local max = 1\n  for k, v in pairs(histo) do\n    if v\
    \ > max then max = v end\n  end\n  if max ~= 0 then\n    for k, v in pairs(histo)\
    \ do histo[k] = v/max end\n  end\n  return histo\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq78y21dw.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpq78y21dw.lua:12: in local 'candidate'\n\t/tmp/tmpq78y21dw.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal counts = {}\n\t\n\tfor letter in string.gmatch(test,\
    \ \"%a\") do\n\t\tif counts[letter] then\n\t\t\tcounts[letter] = counts[letter]\
    \ + 1\n\t\telse\n\t\t\tcounts[letter] = 1\n\t\tend\n\tend\n\t\n\treturn counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4z781qg.lua:28:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpg4z781qg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local res = {}\n  for letter in string.gmatch(test, \"([^\
    \ ]+)\") do\n    res[letter] = string.len(letter)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubgde9c9.lua:21:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmpubgde9c9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local letters = {}\n    for letter, count in string.gmatch(test,\
    \ \"([^ ]+)\") do\n        count = tonumber(count)\n        if letters[letter]\
    \ ~= nil then\n            letters[letter] = letters[letter] + count\n       \
    \ else\n            letters[letter] = count\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp31zllrxj.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\t-- If the string is empty, return an empty map.\n\tif test\
    \ == nil then\n\t\treturn {}\n\tend\n\t-- Count the occurrences of each letter\n\
    \tlocal map = { }\n\tfor letter, occurrences in pairs(test:gsub(' ','')) do\n\t\
    \tmap[letter] = occurrences or 1\n\tend\n\t-- Sort the letters in descending order\n\
    \t-- In ascending order, we sort by value, but in descending order, we sort by\
    \ key.\n\ttable.sort(map, function(x, y) return y[#x] <=> y[#y] end)\n\treturn\
    \ map\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxm7hco3w.lua:22: unexpected symbol near '>'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in test:gmatch(\"[a-z]+\"\
    ) do\n    table.insert(letters, letter)\n  end\n  table.sort(letters)\n  local\
    \ count = {}\n  for _, letter in ipairs(letters) do\n    count[letter] = count[letter]\
    \ + 1 or 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrphisdj.lua:18:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpvrphisdj.lua:18: in local 'candidate'\n\t/tmp/tmpvrphisdj.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a] +\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max_count = math.max(counts)\n  local result_counts = {}\n\
    \  for i, letter in ipairs(counts) do\n    result_counts[letter] = result_counts[letter]\
    \ or {}\n    result_counts[letter][i] = counts[i]\n  end\n  table.sort(result_counts,\
    \ function(a, b) return a[2] > b[2] end)\n  local result = {}\n  for i, letter\
    \ in ipairs(result_counts) do\n    if i == 1 then\n      result[letter] = letter\n\
    \    else\n      result[letter] = result[letter] .. \" \" .. letter\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9g62sg4.lua:37:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmph9g62sg4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal counts = {}\n\tfor k in string.gmatch(test, \"([^ ]+)\"\
    )\n\tdo\n\t\tif not counts[k] then\n\t\t\tcounts[k] = 1\n\t\telse\n\t\t\tcounts[k]\
    \ = counts[k] + 1\n\t\tend\n\tend\n\treturn counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0efuhcv.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpl0efuhcv.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local frequency = {}\n  for letter in test:gmatch('.') do\n\
    \    local count = frequency[letter] or 0\n    count = count + 1\n    frequency[letter]\
    \ = count\n  end\n  local max = {\n    count = -1\n  }\n  local letters = {}\n\
    \  for letter in pairs(frequency) do\n    if frequency[letter] > max.count then\n\
    \      max = { letter = letter, count = frequency[letter] }\n    end\n  end\n\
    \  for letter in pairs(frequency) do\n    if frequency[letter] == max.count then\n\
    \      table.insert(letters, letter)\n    end\n  end\n  return letters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgghb2_mm.lua:37:\
    \ expected: {a=2, b=2}\nactual: {\" \"}\nstack traceback:\n\t/tmp/tmpgghb2_mm.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in string.gmatch(test, \"\
    (.)\") do\n    letters[letter] = letters[letter] or 0\n    letters[letter] = letters[letter]\
    \ + 1\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvj4a4sj.lua:22:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmpbvj4a4sj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for letter in test:gmatch('([a-z])\
    \ ') do\n        local count = 1\n        for c in letter:gmatch('([a-z]) ') do\n\
    \            count = count + 1\n        end\n        table.insert(counts, { letter\
    \ = letter, count = count })\n    end\n    local max = 0\n    for _, value in\
    \ ipairs(counts) do\n        if value.count > max then\n            max = value.count\n\
    \        end\n    end\n    local results = {}\n    for _, value in ipairs(counts)\
    \ do\n        if value.count == max then\n            results[value.letter] =\
    \ value.count\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3q8rrvl.lua:37:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmpl3q8rrvl.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in test:gmatch('[^ ]+') do\n\
    \    local count = result[ letter ]\n    if count == nil then\n      count = 1\
    \ -- count starts at 1 instead of 0\n    end\n    result[ letter ] = count + 1\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx76kdgi.lua:25:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmpvx76kdgi.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in test:gmatch(\"([a-z]+)\
    \ \") do\n    table.insert(letters, letter)\n  end\n  return table.getn(letters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmparh_j3d4.lua:15:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmparh_j3d4.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmparh_j3d4.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = { }\n    for _, letter in pairs(test) do\
    \ counts[letter] = counts[letter] + 1 end\n    local maxCount = { }\n    for letter,\
    \ count in pairs(counts) do\n        if count > maxCount[letter] then\n      \
    \      maxCount[letter] = count\n        end\n    end\n    return maxCount\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxsglshnq.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpxsglshnq.lua:12: in local 'candidate'\n\t/tmp/tmpxsglshnq.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- Return immediately if test is nil\n  local function f(test)\n\
    \    return function(x)\n      if x == nil then\n        return nil\n      end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3aotg80t.lua:31: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   if test == nil then\n      return {}\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp85iuuu4g.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local ret = {}\n    for letter, count in string.gmatch(test,\
    \ \"[%a]\") do\n        ret[letter] = ret[letter] or count\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagqc6xij.lua:21:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpagqc6xij.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = { }\n    for letter in test:gmatch(\".\"\
    ) do\n        count = counts[letter] or 0\n        counts[letter] = count + 1\n\
    \    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ky0vude.lua:22:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmp5ky0vude.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  return test:gsub('.', function(letter)\n    local letterCode\
    \ = letter:byte()\n    if not letterCode then return nil end\n    local count\
    \ = tonumber(letter:sub(1, 1):gsub(\" \", \"\"))\n    if not count then return\
    \ nil end\n    local counts = table.insert(letters, count) or count\n    counts[letter]\
    \ = counts[letter] or 1\n    return counts\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qnbtjau.lua:14:\
    \ bad argument #2 to 'tonumber' (base out of range)\nstack traceback:\n\t/tmp/tmp9qnbtjau.lua:14:\
    \ in function </tmp/tmp9qnbtjau.lua:11>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmp9qnbtjau.lua:11: in local 'candidate'\n\t/tmp/tmp9qnbtjau.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local count = {}\n  for letter in test:gmatch(\"[^ ]\") do\n\
    \    count[letter] = count[letter] or 0\n    count[letter] = count[letter] + 1\n\
    \  end\n  -- sort by the value descending and then alphabetically\n  return table.OrderedDict(\n\
    \    table.sort(count, function (a, b) return b - a end)\n  )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_v8omgq.lua:17:\
    \ attempt to call a nil value (field 'OrderedDict')\nstack traceback:\n\t/tmp/tmpi_v8omgq.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpi_v8omgq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   local mapping = {}\n   local counts = {}\n   for char in\
    \ test:gmatch(\".\") do\n      local count = counts[char]\n      if count == nil\
    \ then\n         count = 1\n      else\n         count = count + 1\n      end\n\
    \      counts[char] = count\n      local old_count = mapping[char]\n      if old_count\
    \ == nil then\n         mapping[char] = count\n      else\n         if old_count\
    \ < count then\n            mapping[char] = count\n         end\n      end\n \
    \  end\n   return mapping\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ydx55bj.lua:36:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmp2ydx55bj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local map = {}\n    for _, letter in pairs(test:gsub('\
    \ ', ''):gsub(' ', '')) do\n        map[letter] = (map[letter] or 0) + 1\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsofk0x7f.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histogram = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp72_6saw1.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  local letters = {}\n  for letter in\
    \ test:gmatch(\"[%a- ]\") do\n    if letters[letter] ~= nil then\n      letters[letter]\
    \ = letters[letter] + 1\n    else\n      letters[letter] = 1\n    end\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmw2mclk_.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for c in test:gmatch'(.)'do\n  \
    \      if counts[c] == nil then\n            counts[c] = 1\n        else\n   \
    \         counts[c] = counts[c] + 1\n        end\n    end\n    return counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc3kfq0p.lua:25:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmpyc3kfq0p.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local count = {}\n  for i, v in string.gmatch(test, \"%a\"\
    ) do\n    count[v] = count[v] or 1\n    count[v] = count[v] + 1\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8iyco1w3.lua:13:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp8iyco1w3.lua:13: in local 'candidate'\n\
    \t/tmp/tmp8iyco1w3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in test:gmatch('(.-)')\n\
    \  do\n    table.insert(letters, letter)\n  end\n  local dict = {}\n  for letter\
    \ in letters\n  do\n    if dict[letter] == nil then\n      dict[letter] = 0\n\
    \    end\n    dict[letter] = dict[letter] + 1\n  end\n  return dict\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnja54grn.lua:17:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpnja54grn.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpnja54grn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- Initialize result and count of letters\n  local results\
    \ = {}\n  local count = {}\n  for i = 1, #test do\n    local letter = test[i]\n\
    \    -- Increment letter count\n    count[letter] = count[letter] + 1 or 1\n \
    \   -- Check if letter already exists, update count if so\n    if count[letter]\
    \ > 1 then\n      -- Use existing letter\n      local _, letter = unpack(unpack(results))\
    \ -- Remove old letter\n      count[letter] = count[letter] + 1 or 1 -- Increment\
    \ new letter\n    else\n      -- Add new letter and set count to 1\n      results[letter]\
    \ = {count = 1, letter = letter}\n    end\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpein1g4ya.lua:42: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local count, letters = {}, {}\n    for char in test:gmatch('[%a]+')\
    \ do count = count[char] or 1 + count[#count] end\n    for letter, count in pairs(count)\
    \ do letters[letter] = count end\n    return letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxezf1bv5.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpxezf1bv5.lua:12: in local 'candidate'\n\t/tmp/tmpxezf1bv5.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5r6z0dfm.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counter = {}\n    for letter in string.gmatch(test,\
    \ \"[%a]\") do\n        counter[letter] = counter[letter] or 1\n        counter[letter]\
    \ = counter[letter] + 1\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2frpe4uy.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmp2frpe4uy.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local count = {}\n  for c in test:gmatch('(.)') do\n    count\
    \ = count[c] or 0\n    count[c] = 1 + count[c]\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0metjza.lua:14:\
    \ attempt to index a number value (local 'count')\nstack traceback:\n\t/tmp/tmpn0metjza.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpn0metjza.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  if test == '' then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppovm2i86.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local count = {}\n  for letter in string.gmatch(test, \"\
    (%a+)\") do\n    count = count[letter] or 0\n    count[letter] = count + 1\n \
    \ end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9ppyv6n.lua:14:\
    \ attempt to index a number value (local 'count')\nstack traceback:\n\t/tmp/tmpq9ppyv6n.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpq9ppyv6n.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal words = test.Split(\" \")\n\tlocal map = {}\n\tlocal\
    \ max = 0\n\tlocal maxLetter\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp00hkqfmp.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   local testTable = {}\n   for letter in string.gmatch(test,\
    \ \"%a\") do\n      testTable[letter] = testTable[letter] or 1\n      testTable[letter]\
    \ = testTable[letter] + 1\n   end\n   local maxVal, maxLetter = nil, \"\"\n  \
    \ for letter in pairs(testTable) do\n      -- Only keep the letter that appears\
    \ most often\n      if testTable[letter] > maxVal then\n         maxVal = testTable[letter]\n\
    \         maxLetter = letter\n      end\n   end\n   return maxLetter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjyf4zx5.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdjyf4zx5.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpdjyf4zx5.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for c in string.gmatch(test, '%a') do\n\
    \    counts[c] = counts[c] or 0\n    counts[c] = counts[c] + 1\n  end\n  return\
    \ counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjc0ebyya.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpjc0ebyya.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in test:gmatch'(.)' do\n\
    \    local count = 1\n    local letterCount = result\n    for letter2 in letter:gmatch'(.)'\
    \ do\n      if letter2 in letterCount then\n        letterCount = letterCount[letter2]\n\
    \      else\n        letterCount[letter2] = count\n        count = count + 1\n\
    \      end\n    end\n    result[letter] = count\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprqodxjfj.lua:16: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local letters = test:gsub(\"^%s*(%l+)%s*$\", \"%1\"):gsub(\"\
    [^%l]+\", \"\")\n    local counts = {}\n    local max_count = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpit6q1vit.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  if test == nil then return end\n  local letters = {}\n  for\
    \ letter, count in pairs(test:gsub(' ', ''):gsub('%c', ''):gsub('%S+', '')) do\n\
    \    letters[letter] = letters[letter] + 1 or count\n  end\n  local max = letters[letters[1]]\n\
    \  for i, letter in pairs(letters) do\n    if letters[letter] > max then\n   \
    \   max = letters[letter]\n      max = letter\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjacd4fxo.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpjacd4fxo.lua:13: in local 'candidate'\n\t/tmp/tmpjacd4fxo.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for _, letter in ipairs(test) do\n \
    \   if not counts.hasOwnProperty(letter) then\n      counts[letter] = 1\n    else\n\
    \      counts[letter] = counts[letter] + 1\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwsdz0gte.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  local max = 0\n  for letter in test:gmatch(\"\
    %a\") do\n    local count = result[[letter]] or 0\n    result[letter] = count\
    \ + 1\n    if count > max then max = count end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsl3o67q0.lua:32: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = terralib.newlist()\n    for letter, count\
    \ in pairs(splittable(test)) do\n        count = tonumber(count)\n        if count\
    \ > 1 then\n            local letters, count = unpack(pairs(splittable(letter)))\n\
    \            counts[letters] = counts[letters] or 1\n            for i=1,count\
    \ do\n                counts[letters] = counts[letters] + 1\n            end\n\
    \        end\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp58naskxq.lua:11:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp58naskxq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp58naskxq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local letters = {}\n    local counts = {}\n    for letter\
    \ in test:gmatch(\"%a\") do\n        if not letters[letter] then\n           \
    \ letters[letter] = 1\n        else\n            letters[letter] = letters[letter]\
    \ + 1\n        end\n        -- Check if the current letter is in the counts table.\n\
    \        if counts[letter] == nil then\n            counts[letter] = 1\n     \
    \   else\n            counts[letter] = counts[letter] + 1\n        end\n    end\n\
    \    -- If no letters were found, return an empty dictionary.\n    if next(letters)\
    \ == nil then\n        return {}\n    end\n    -- Find all the letters having\
    \ the highest number of occurrences and sort them\n    -- alphabetically. As we\
    \ now have the dictionary with the highest number of occurrences,\n    -- we can\
    \ just remove the letters one by one from the dictionary. As we have the\n   \
    \ -- dictionary, just iterate through it again and print the letters and their\
    \ counts\n    -- alphabetically. \n    -- Note: sort() returns a copy of the input\
    \ table in order to be able to change it.\n    for _, letter in pairs(letters)\
    \ do\n        table.insert(letters, letter)\n        table.insert(counts, letters[letter])\n\
    \    end\n    -- Remove all the letters from the dictionary alphabetically. \n\
    \    table.sort(letters)\n    -- Return the letters sorted alphabetically\n  \
    \  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsz3wi8m4.lua:49:\
    \ expected: {a=2, b=2}\nactual: {2, 2, a=2, b=2}\nstack traceback:\n\t/tmp/tmpsz3wi8m4.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local max = {}\n  local ret = {}\n  for i, c in ipairs(string.gmatch(test,\
    \ \"([a-z]+)\") do\n    local count = max[c] or 0\n    max[c] = count + 1\n  end\n\
    \  for i = 1, #max do\n    ret[max[i]] = i\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5nsgpsnc.lua:13: ')' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = terralib.newlist()\n  for _, c in ipairs(string.gmatch(test,\
    \ \"[%a]+\")) do\n    local count = #counts\n    for i = 1, #counts do\n     \
    \ if counts[i] < count then\n        count = counts[i]\n        counts[i] = c\n\
    \      end\n    end\n    counts[#counts + 1] = count\n  end\n  return counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1vbxg9u7.lua:11:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp1vbxg9u7.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1vbxg9u7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local histogram = {}\n    local counts = {}\n    for letter\
    \ in string.gmatch(test, \"([^ ]+)\") do\n        histogram[letter] = histogram[letter]\
    \ or 1\n        counts[letter] = counts[letter] + 1\n    end\n    for letter in\
    \ pairs(histogram, 1) do\n        histogram[letter] = counts[letter]\n    end\n\
    \    return histogram\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05jx9tfk.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp05jx9tfk.lua:15: in local 'candidate'\n\t/tmp/tmp05jx9tfk.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local function count_char(char)\n    count = tonumber(counts[char])\n\
    \    if not count then\n      count = 0\n      counts[char] = count\n    end\n\
    \    count = count + 1\n    if count > max_count then\n      max_count = count\n\
    \      max_char = char\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0mwwkp_a.lua:37: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = test\n      :gsub('(^|%s):(%S+)', function(x,\
    \ _, word)\n\tcounts[word] = counts[word] or 0\n\tcounts[word] = counts[word]\
    \ + 1\n\tend)\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00s3tbmz.lua:22:\
    \ expected: {a=2, b=2}\nactual: \"a b b a\"\nstack traceback:\n\t/tmp/tmp00s3tbmz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    result[letter] = result[letter] or 0\n    result[letter]\
    \ = result[letter] + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3cc3_vv.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmpj3cc3_vv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local letters = test:lower()\n    local counts = {}\n \
    \   for letter in letters:gmatch(\"[%a]+\") do\n        local count = counts[letter]\
    \ or 0\n        counts[letter] = count + 1\n    end\n    local max = {count =\
    \ 0, letter = \"\"}\n    for key, value in pairs(counts) do\n        if value.count\
    \ > max.count then\n            max = value\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ytz_jpo.lua:19:\
    \ attempt to index a number value (local 'value')\nstack traceback:\n\t/tmp/tmp4ytz_jpo.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp4ytz_jpo.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histo = {}\n  for c in string.gmatch(test, \"%a\")\
    \ do\n    histo[c] = histo[c] or 1\n    histo[c] = histo[c] + 1\n  end\n  return\
    \ histo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp055q4onr.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmp055q4onr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counter = {}\n  for letter, count in test:gmatch('(%S)(%d+)')\
    \ do\n    table.insert(counter, count, letter)\n  end\n  return counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgj3g9om.lua:21:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmplgj3g9om.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local table = {}\n  local count = {}\n  for letter in test:gmatch(\"\
    [%a]\") do table.insert(count, letter, 1) end\n  return unpack(table.sort.apply(null,\
    \ unpack(table)))\nend\n</code>\n<|/ a |>\n<| c |>\nI love the use of table.sort\
    \ for this.  I like it.\n<|/ c |>\n<| a tags=lua-table,lua |>\nThe answers here\
    \ are great but didn't work in my case. I used a slightly different approach by\
    \ making use of table.concat and table.sort as such:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmc7rtkwy.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local count = {}\n  for letter, count in pairs(test) do count[letter]\
    \ = count or 1 end\n  local max = 1\n  for letter, count in pairs(count) do\n\
    \    if count > max then max = count end\n  end\n  local result = {}\n  for letter,\
    \ count in pairs(count) do\n    if count == max then\n      table.insert(result,\
    \ letter)\n    end\n  end\n  if #result > 1 then\n    for i = 2, #result do\n\
    \      local letter = result[i]\n      local count = result[i - 1]\n      result[i\
    \ - 1] = {letter, count}\n      result[i] = {letter, count}\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfmxn9dz3.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpfmxn9dz3.lua:12: in local 'candidate'\n\t/tmp/tmpfmxn9dz3.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histo = {}\n  for c in test:gmatch(\"[%a]\") do\n \
    \   histo[c] = histo[c] or 1\n    histo[c] = histo[c] + 1\n  end\n  local max\
    \ = 0\n  for k, v in pairs(histo) do\n    if max < v then\n      max = v\n   \
    \ end\n  end\n  local histo2 = {}\n  for k, v in pairs(histo) do\n    if v ==\
    \ max then\n      table.insert(histo2, k)\n    end\n  end\n  return histo2, max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gb_99r8.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmp9gb_99r8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for letter, count in gsub(test,\
    \ \"%a\"):gmatch(\"(.-)\\\\1+\") do\n        table.insert(counts, letter, count)\n\
    \    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpehfpbvi3.lua:12:\
    \ attempt to call a nil value (global 'gsub')\nstack traceback:\n\t/tmp/tmpehfpbvi3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpehfpbvi3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    local max = 0\n    local letters\
    \ = nil\n    for c in test:gmatch('%a') do\n        local letter = c:lower()\n\
    \        count = counts[letter]\n        counts[letter] = count + 1\n        if\
    \ count > max then\n            max = count\n            letters = letter\n  \
    \      end\n    end\n    return counts, letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00kal5o2.lua:17:\
    \ attempt to perform arithmetic on a nil value (global 'count')\nstack traceback:\n\
    \t/tmp/tmp00kal5o2.lua:17: in local 'candidate'\n\t/tmp/tmp00kal5o2.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  if test == '' then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpklrwm0_f.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for c in test:gmatch(\"%a\") do\n  \
    \  local count = counts[c] or 0\n    counts[c] = count + 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmponz6qxtm.lua:30: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = { }\n  for letter, count in string.gmatch(test,\
    \ \"([%a]+)\") do\n    if counts[letter] == nil then\n      counts[letter] = 0\n\
    \    end\n    counts[letter] = counts[letter] + 1\n  end\n  if #counts == 0 then\n\
    \    return {}\n  end\n  local letter, count = #counts, 1\n  local letters = {\
    \ }\n  while count > 1 do\n    count = count - 1\n    letter = counts[letter]\
    \ and letters[count] and letters[count] or letter\n  end\n  table.insert(letters,\
    \ letter)\n  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kntafyq.lua:34:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp0kntafyq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal result = {}\n\tlocal counts = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwekp_3rh.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local result = {}\n    for char in string.gmatch(test,\
    \ \"%a\") do\n        local value = result[char] or 0\n        result[char] =\
    \ value + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tgt3zl4.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp1tgt3zl4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local count = {}\n    for _, c in ipairs(test) do\n   \
    \     if count.hasOwnProperty(c) then count[c] = count[c] + 1 else count[c] =\
    \ 1 end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpehwb8y5p.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters, letters_count = unpack(test)\n  local counts\
    \ = terralib.newlist()\n  for i = 1, #letters do\n    local letter = letters[i]\n\
    \    if not letters_count[letter] then\n      table.insert(counts, 1, 0)\n   \
    \ else\n      local count = letters_count[letter]\n      counts[count] = counts[count]\
    \ + 1\n    end\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp61dwagrp.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp61dwagrp.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp61dwagrp.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- If no letters provided, return empty dict\n  test = test\
    \ or ''\n  local letters = {}\n  for letter in test:gmatch('([a-z]+)')do\n   \
    \ -- Add this letter to the table if it doesn't exist yet\n    table.insert(letters,\
    \ letter)\n    -- Increment its frequency count if it doesn't exist yet\n    local\
    \ count = letters[letter] or 0\n    count = count + 1\n    letters[letter] = count\n\
    \  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4yf_0zd.lua:28:\
    \ expected: {a=2, b=2}\nactual: {\"a\", \"b\", \"b\", \"a\", a=2, b=2}\nstack\
    \ traceback:\n\t/tmp/tmpo4yf_0zd.lua:28: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for letter in test:gmatch(\"[%a]\"\
    ) do\n        local count = counts[letter] or 0\n        counts[letter] = count\
    \ + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc95p1wu5.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpc95p1wu5.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histo = {}\n  for letter in test:gmatch(\"[%a]+\")\
    \ do\n    histo[letter] = histo[letter] or 1\n    histo[letter] = histo[letter]\
    \ + 1\n  end\n  return histo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3jk377z.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmpy3jk377z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local alphabet = {}\n  local result\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpldqmyibq.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for letter in unpack(test:gmatch('([%a]+)')\
    \ do\n        local occurrences = counts[letter] or 0\n        counts[letter]\
    \ = occurrences + 1\n    end)\n    return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp21yiyqxz.lua:12: ')' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local max_count = 1\n  local letters = {}\n  for letter in\
    \ test:gmatch(\"[%a] \") do\n    letters[letter] = letters[letter] + 1\n    if\
    \ letters[letter] > max_count then\n      max_count = letters[letter]\n    end\n\
    \  end\n  local result = {}\n  for letter, count in pairs(letters) do\n    result[letter]\
    \ = count\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7307i6c_.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp7307i6c_.lua:14: in local 'candidate'\n\t/tmp/tmp7307i6c_.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counter = {}\n  for char in test:gmatch('%a') do counter[char]\
    \ = counter[char] + 1 end\n  local maxCount = -1\n  local maxChar = ''\n  for\
    \ char,count in pairs(counter) do\n    if count > maxCount then\n      maxCount\
    \ = count\n      maxChar = char\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9glgde17.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp9glgde17.lua:12: in local 'candidate'\n\t/tmp/tmp9glgde17.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for c in test:gmatch('%c') do\n    counts[c]\
    \ = counts[c] or 0\n    counts[c] = counts[c] + 1\n  end\n  return counts\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxeu1kto.lua:22:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmptxeu1kto.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local histogram = {}\n    local splitted = test:gsub('\
    \ ', string.lower)\n    for i = 1, #splitted do\n        histogram[splitted[i]]\
    \ = histogram[splitted[i]] or 1\n        histogram[splitted[i]] = histogram[splitted[i]]\
    \ + 1\n    end\n    return histogram\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgrq7aq3b.lua:14:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpgrq7aq3b.lua:14: in local 'candidate'\n\
    \t/tmp/tmpgrq7aq3b.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal letters = {}\n\tlocal count = 0\n\tfor letter in test:gmatch(\"\
    [%a]+\") do\n\t\tif letters[letter] == nil then\n\t\t\tletters[letter] = 1\n\t\
    \t\tcount = count + 1\n\t\telse\n\t\t\tletters[letter] = letters[letter] + 1\n\
    \t\tend\n\tend\n\t\n\tif count == 0 then\n\t\treturn nil\n\tend\n\t\n\tfor key,\
    \ value in pairs(letters) do\n\t\tif value > count then\n\t\t\treturn {key = key,\
    \ count = count}\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40d7ei15.lua:36:\
    \ expected: {a=2, b=2}\nactual: nil\nstack traceback:\n\t/tmp/tmp40d7ei15.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histogram = {}\n  local count = {}\n  for ch in test:gmatch(\"\
    [%a%A]+\") do\n    histogram[ch] = histogram.get(ch, 0) + 1\n  end\n  for letter,\
    \ count in pairs(histogram) do\n    count[letter] = count[letter] or 0\n    count[letter]\
    \ = count[letter] + 1\n  end\n  return count\nend\n_G.histogram = histogram\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk1bvu9_8.lua:14:\
    \ attempt to call a nil value (field 'get')\nstack traceback:\n\t/tmp/tmpk1bvu9_8.lua:14:\
    \ in function 'histogram'\n\t/tmp/tmpk1bvu9_8.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch('[%s]+') do\n\
    \    if counts.has_key(letter) then\n      counts[letter] = counts[letter] + 1\n\
    \    else\n      counts[letter] = 1\n    end\n  end\n  local maxVal = counts[#counts]\n\
    \  local maxKey\n  local maxCount\n  for i, val in pairs(counts) do\n    if maxCount\
    \ and maxCount < val then\n      maxVal = maxCount\n      maxKey = maxKey\n  \
    \  elseif val > maxCount then\n      maxVal = val\n      maxKey = i\n    end\n\
    \  end\n  local histogram = {}\n  for i = 1, #counts do\n    if maxCount and counts[maxKey]\
    \ == maxCount then\n      table.insert(histogram, maxKey)\n    end\n  end\n  return\
    \ histogram\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppiw8q9ex.lua:13:\
    \ attempt to call a nil value (field 'has_key')\nstack traceback:\n\t/tmp/tmppiw8q9ex.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmppiw8q9ex.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   local letters = string.gsub(test, \"[ ]+\", \"\")\n   local\
    \ letterCounter = {}\n   local letterIndex = 1\n   for letter in string.gmatch(test,\
    \ \"[%s]+\") do\n      letterCounter[letter] = letterCounter[letter] + 1 or 1\n\
    \   end\n   return letterIndex == #letterCounter ? letterCounter : letterIndex\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgiszz219.lua:17: 'end' expected (to close 'function' at line\
    \ 10) near '?'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter, count = test.Split(' ').pairs()\
    \ do\n    count = tonumber(count)\n    if not counts[letter] then\n      counts[letter]\
    \ = count\n    else\n      counts[letter] = counts[letter] + count\n    end\n\
    \  end\n  -- remove empty keys\n  counts = setmetatable(counts, {__mode = \"v\"\
    })\n  counts = { [#counts]:=counts[#counts] }\n  -- return the result\n  return\
    \ counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6fhg1ki2.lua:12: 'in' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local tests = string.split(test, \"\\n\")\n  local histo\
    \ = {}\n  for _, test in ipairs(tests) do\n    histo = update_histogram(histo,\
    \ \"\\n\" .. test)\n  end\n  return histo\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbd9ukft0.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpbd9ukft0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbd9ukft0.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    local count = counts[letter]\n    if not count then\n      count = 1\n  \
    \  else\n      count = count + 1\n    end\n    counts[letter] = count\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp49scvuk2.lua:35: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  local counts = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7u_qs4yi.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgeeg2ne.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpdgeeg2ne.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- Initialise the return value\n  local counts = {}\n  for\
    \ char in test:gmatch(\"([%l%a]+)\") do\n    -- If this letter has not been seen\
    \ in the return value, then add it to the return value\n    if not counts[char]\
    \ then\n      counts[char] = 1\n      return\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz7j4lnuc.lua:33: 'end' expected (to close 'for' at line 13)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"([a-z]+)\"\
    ) do\n    table.insert(counts, letter, 1)\n  end\n  local maxCount = table.max(counts)\n\
    \  local maxLetter = counts[maxCount]\n  counts = {}\n  for letter in test:gmatch(\"\
    ([a-z]+)\") do\n    if letter ~= maxLetter then\n      table.insert(counts, letter,\
    \ 1)\n    else\n      counts[letter] = counts[letter] + 1\n    end\n  end\n  return\
    \ counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeo652ok9.lua:13:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpeo652ok9.lua:13: in local 'candidate'\n\t/tmp/tmpeo652ok9.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histo = {}\n  for char in test:gmatch'([%a])' do\n\
    \    histo[char] = histo[char] or 1\n    histo[char] = histo[char] + 1\n  end\n\
    \  return histo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvdxdlxp.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmpbvdxdlxp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counter = {}\n  local max = -1\n  local i = 0\n  for\
    \ letter in test:gmatch(\"%a\") do\n    local count = counter[letter] or 0\n \
    \   counter[letter] = count + 1\n    if max < count then\n      max = count\n\
    \    end\n    i = i + 1\n  end\n  \n  if max == 0 then\n    return {}\n  end\n\
    \  \n  -- Build a dictionary to hold all occurrences, grouped by letter\n  local\
    \ counts = {}\n  local letters = {}\n  for letter in pairs(counter) do\n    counts[letter]\
    \ = counter[letter]\n    letters[letter] = true\n  end\n  \n  local result = {}\n\
    \  \n  for letter in pairs(counter) do\n    -- Add the letter to the result\n\
    \    if letters[letter] then\n      result[letter] = counts[letter]\n    end\n\
    \  end\n  \n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq443apzs.lua:51:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpq443apzs.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    (%S+)\") do\n    table.insert(counts, letter)\n  end\n  table.sort(counts, function(a,\
    \ b)\n    return counts[a] > counts[b]\n  end)\n  local letters = {}\n  for i\
    \ = 1, #counts do\n    table.insert(letters, counts[i])\n  end\n  return letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvhz8x8g.lua:16:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpsvhz8x8g.lua:16:\
    \ in function </tmp/tmpsvhz8x8g.lua:15>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpsvhz8x8g.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpsvhz8x8g.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local count = {}\n  for _, x in ipairs(test:gmatch(\"([a-z]+)\"\
    )) do\n    count[x] = (count[x] or 0) + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal result = {}\n\tfor _,c in ipairs(test:gsub('%w', \"\
    \ \")) do\n\t\tresult[#result+1] = {count=result[#result+1].count or 0, letter=c}\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7is87atf.lua:21:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp7is87atf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- Split string at spaces and remove empty string\n  test\
    \ = test:gsub(' ', ''):gsub('', '')\n  if test[1] == \"\" then test = test[2]\
    \ end\n  local letters = {}\n  local count = 0\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    count = letters[letter] or count\n    letters[letter] = count\
    \ + 1\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpme9o1wvr.lua:26:\
    \ expected: {a=2, b=2}\nactual: {abba=1}\nstack traceback:\n\t/tmp/tmpme9o1wvr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  local letters = string.gsub(test, \"\
    [ \\t]+\", \"\")\n  for i = 1, #letters do\n    local letter = letters[i]\n  \
    \  local count = letters[string.find(letters, letter, 1) + 1]\n    if result[letter]\
    \ == nil then\n      result[letter] = count\n    else\n      result[letter] =\
    \ result[letter] + count\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqqaoryu.lua:15:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmplqqaoryu.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplqqaoryu.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for c in test:gmatch(\"[%a]\") do\n\
    \    table.insert(letters, c)\n  end\n  local letterCount = {}\n  for _, letter\
    \ in ipairs(letters) do\n    letterCount[letter] = letterCount[letter] or 1\n\
    \  end\n  local maxCount = 1\n  local maxLetter\n  for _, letter in ipairs(letters)\
    \ do\n    if letterCount[letter] > maxCount then\n      maxCount = letterCount[letter]\n\
    \      maxLetter = letter\n    end\n  end\n  \n  local counts = terralib.newlist()\n\
    \  for _, letter in ipairs(letters) do\n    if letter == maxLetter then\n    \
    \  table.insert(counts, letterCount[letter])\n    end\n  end\n  if #counts > 1\
    \ then\n    return maxLetter, counts\n  else\n    return maxLetter\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl7ffxj3v.lua:28:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpl7ffxj3v.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpl7ffxj3v.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for w in test:gmatch'([%a%s]+)' do\n\
    \    if counts[w] == nil then\n      counts[w] = 1\n    else\n      counts[w]\
    \ = counts[w] + 1\n    end\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmhew2us.lua:25:\
    \ expected: {a=2, b=2}\nactual: {\"a b b a\"=1}\nstack traceback:\n\t/tmp/tmpnmhew2us.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local count = { }\n  for letter in test:gmatch(\"%a\") do\n\
    \    count = { [letter] = count[letter] or 1 }\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkcniyba.lua:21:\
    \ expected: {a=2, b=2}\nactual: {a=1}\nstack traceback:\n\t/tmp/tmpkkcniyba.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- If there are no letters to count, or if the input is not\
    \ string type, return an empty dictionary.\n  if test == nil or type(test) ~=\
    \ 'string' then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxlcq3pvp.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local words = test:gsub(' ', ''):gsub(' ', '')\n  local result\
    \ = {}\n  for letter in string.gmatch(words, '[%a]') do\n    local count = 0\n\
    \    for w in words do\n      if w:find(letter) == 1 then\n        count = count\
    \ + 1\n      end\n    end\n    result[letter] = count\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_hjkxmd.lua:15:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpf_hjkxmd.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpf_hjkxmd.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in test:gmatch(\"[%a]\"\
    ) do\n    table.insert(letters, letter)\n  end\n  local max = 0\n  local max_letter\
    \ = nil\n  local max_count = 0\n  for i,v in pairs(letters) do\n    local count\
    \ = letters[v]\n    if count > max then\n      max = count\n      max_letter =\
    \ v\n      max_count = count\n    end\n  end\n  return { [max_letter] = max_count\
    \ }\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpycwi5rkw.lua:28: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  local letters = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0zxg2z0l.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal letters = {}\n\tfor letter in unpack(string.gmatch(test,\
    \ \"([a-z]+)\"))\n\tdo\n\t\tletters[letter] = letters[letter] + 1 or 1\n\tend\n\
    \treturn letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpps5gb6bz.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpps5gb6bz.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpps5gb6bz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local alphabet = {}\n  for _, _ in string.gmatch(test, \"\
    ([\" .. string.letters() .. \"]+)\") do\n    alphabet[#alphabet+1] = alphabet[#alphabet+1]\
    \ or 1\n    alphabet[#alphabet+1] = alphabet[#alphabet+1] + 1\n  end\n  -- Return\
    \ empty dictionary if all letters are unique\n  if #alphabet == 1 then\n    return\
    \ {}\n  end\n  -- Sort dictionary in descending order and keep only the first\
    \ entry (with maximum frequency)\n  table.sort(alphabet, function(n)\n    return\
    \ -n -- Reverse sort by frequency\n  end)\n  local max = 1\n  for key, val in\
    \ pairs(alphabet) do\n    if val > max then\n      max = val\n    end\n  end\n\
    \  local result = {}\n  for key, val in pairs(alphabet) do\n    if val == max\
    \ then\n      result[key] = test\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe9ccd6rt.lua:12:\
    \ attempt to call a nil value (field 'letters')\nstack traceback:\n\t/tmp/tmpe9ccd6rt.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpe9ccd6rt.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   local histo = {}\n   for letter in test:gmatch(\"%a\") do\n\
    \      histo[letter] = histo[letter] or 1\n      histo[letter] = histo[letter]\
    \ + 1\n   end\n   return histo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o0b8f_g.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmp2o0b8f_g.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in test:gmatch(\"[%a]\")\
    \ do\n    result[letter] = result[letter] or 1\n    result[letter] = result[letter]\
    \ + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5__xy6s2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmp5__xy6s2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- Split input string into a list.\n  local s = string.gsub(test,\
    \ \"([^%s]+)\", \" \")\n  -- Create a dictionary with empty values.\n  local h\
    \ = { }\n  -- Loop over the list of letters.\n  for k in pairs(s) do\n    local\
    \ n = h[k]\n    if n ~= nil then\n      -- Increase count of current letter.\n\
    \      h[k] = n + 1\n    else\n      -- Add new letter to dictionary and set count\
    \ to 1.\n      h[k] = 1\n    end\n  end\n  return h\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp039oe35v.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp039oe35v.lua:16: in local 'candidate'\n\t/tmp/tmp039oe35v.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local letters = {}\n    for letter in string.gmatch(test,\
    \ \"([^ ]+)\") do\n        letters[letter] = letters[letter] or 1\n        letters[letter]\
    \ = letters[letter] + 1\n    end\n    return letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp733sf2mr.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmp733sf2mr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histogram = {}\n  for letter in test:gmatch(\"%a\"\
    ) do\n    histogram[letter] = histogram[letter] or 0\n    histogram[letter] =\
    \ histogram[letter] + 1\n  end\n  return histogram\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qry40xt.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp_qry40xt.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local ret = {}\n  test = '' .. test .. ' '\n  for k, v in\
    \ ipairs(test:gmatch('([%w]+)'))do ret[k] = ret[k] or 1 end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local letters = test\n    if letters ~= '' then\n     \
    \   letters = string.gsub(letters, ' ', '')\n        local letters_count = #letters\n\
    \        if letters_count > 0 then\n            local letter_counts = {}\n   \
    \         local count = 1\n            for letter in string.gmatch(letters, '%a')\
    \ do\n                local letter_key = letter\n                if letter_counts[letter_key]\
    \ == nil then\n                    letter_counts[letter_key] = 1\n           \
    \     else\n                    letter_counts[letter_key] = letter_counts[letter_key]\
    \ + 1\n                end\n            end\n            for letter in pairs(letter_counts)\
    \ do\n                if letter_counts[letter] >= count then\n               \
    \     count = letter_counts[letter]\n                end\n            end\n  \
    \          -- Sort by count descending and remove duplicates\n            local\
    \ sorted_letters = { }\n            for letter in pairs(letter_counts) do\n  \
    \              table.insert(sorted_letters, letter)\n            end\n       \
    \     table.sort(sorted_letters, function(a, b)\n                local compare_val\
    \ = letter_counts[a] - letter_counts[b]\n                if compare_val then\n\
    \                    return compare_val\n                else\n              \
    \      return a..b\n                end\n            end)\n            -- Return\
    \ the letters with the most repetition\n            local most_frequent_letters\
    \ = {}\n            for i=1,#sorted_letters do\n                local key = sorted_letters[i]\n\
    \                if most_frequent_letters[key] == nil then\n                 \
    \   most_frequent_letters[key] = count\n                elseif count > most_frequent_letters[key]\
    \ then\n                    most_frequent_letters[key] = count\n             \
    \   end\n            end\n            -- Return the letters and their counts\n\
    \            return {\n                most_frequent_letters = most_frequent_letters,\n\
    \                letters = sorted_letters\n            }\n        else\n     \
    \       return {}\n        end\n    else\n        return {}\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjapn8fng.lua:70:\
    \ expected: {a=2, b=2}\nactual: {letters={\"b\", \"a\"}, most_frequent_letters={a=2,\
    \ b=2}}\nstack traceback:\n\t/tmp/tmpjapn8fng.lua:70: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = { }\n    for c in test:gmatch(\"%w\") do\n\
    \        counts[c] = counts[c] or 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5020jia.lua:21:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmpe5020jia.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histogram = {}\n  for letter in test:gmatch(\"%a\"\
    ) do histogram[letter] = histogram[letter] + 1 end\n  local maxValue = #test\n\
    \  for letter in pairs(histogram) do\n    if histogram[letter] > maxValue then\
    \ maxValue = histogram[letter] end\n  end\n  -- Return the letter with the most\
    \ occurrence.\n  local bestLetter = ''\n  for letter in pairs(histogram) do\n\
    \    if histogram[letter] == maxValue then bestLetter = letter end\n  end\n  return\
    \ bestLetter, maxValue\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm5yxv06n.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpm5yxv06n.lua:12: in local 'candidate'\n\t/tmp/tmpm5yxv06n.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  local tokens = string.gmatch(test, \"\
    ([%a]+)()\") -- Split the input string at spaces.\n  for i = 1, #tokens do\n \
    \   local letter = tokens[i]\n    if result[letter] == nil then\n      result[letter]\
    \ = 1\n    else\n      result[letter] = result[letter] + 1\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp44bewakb.lua:13:\
    \ attempt to get length of a function value (local 'tokens')\nstack traceback:\n\
    \t/tmp/tmp44bewakb.lua:13: in local 'candidate'\n\t/tmp/tmp44bewakb.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- Initialization\n  local letters = {}\n  local max = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk752mey3.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- Get counts for each letter.\n  local counts = {}\n  for\
    \ c in string.gmatch(test, \"(%S+)\") do\n    counts[c] = counts[c] or 0\n   \
    \ counts[c] = counts[c] + 1\n  end\n  -- Get the letter with the highest count.\n\
    \  local max = 0\n  for k, v in pairs(counts) do\n    if max < v then\n      max\
    \ = v\n    end\n  end\n  local hist = {}\n  local letter, count = max\n  for k,\
    \ v in pairs(counts) do\n    if v == max then\n      hist[letter] = count\n  \
    \  end\n  end\n  return hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtov00d9.lua:37:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmphtov00d9.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = terralib.newlist()\n    for _, c in ipairs(string.gmatch(test,\
    \ \"[%a]+\")) do\n        counts[c] = counts[c] or 0\n        counts[c] = counts[c]\
    \ + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4fqwvoxx.lua:11:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp4fqwvoxx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4fqwvoxx.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local result = {}\n    for letter in string.gmatch(test,\
    \ \"([%a]+)\") do\n        table.insert(result, letter, 1)\n    end\n    return\
    \ table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1skjts5_.lua:13:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp1skjts5_.lua:13: in local 'candidate'\n\t/tmp/tmp1skjts5_.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in string.gmatch(test, \"\
    [%a]+\") do\n    if result[letter] == nil then\n      result[letter] = 0\n   \
    \ end\n    result[letter] = result[letter] + 1\n  end\n  if #result > 0 then\n\
    \    return result\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbaz4nn4.lua:28:\
    \ expected: {a=2, b=2}\nactual: nil\nstack traceback:\n\t/tmp/tmpsbaz4nn4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local letters = test:gsub(' ', ''):gmatch('%a'):gmatch('%s*%w*%b')\n\
    \    if #letters == 0 then return {} end\n    local counts = {}\n    for _, letter\
    \ in ipairs(letters) do\n        table.insert(counts, letter)\n    end\n    table.sort(counts)\n\
    \    local result = {}\n    for _, count in ipairs(counts) do\n        table.insert(result,\
    \ count, letters[count])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf0nfdpw8.lua:11:\
    \ attempt to index a function value\nstack traceback:\n\t/tmp/tmpf0nfdpw8.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpf0nfdpw8.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in string.gmatch(test, \"\
    ([^ ]+)\") do\n    table.insert(letters, letter)\n  end\n  local frequency = {}\n\
    \  local max = 0\n  local maxLetter\n  for _, letter in ipairs(letters) do\n \
    \   if not frequency[letter] then\n      frequency[letter] = 1\n    else\n   \
    \   frequency[letter] = frequency[letter] + 1\n    end\n    if frequency[letter]\
    \ > max then\n      max = frequency[letter]\n      maxLetter = letter\n    end\n\
    \  end\n  local histogram = {}\n  for letter, count in pairs(frequency) do\n \
    \   if count > max then\n      table.insert(histogram, letter)\n    end\n  end\n\
    \  table.sort(histogram)\n  if #histogram > 1 then\n    for _ = 1, #histogram\
    \ do\n      histogram[#histogram + 1] = {\n        letter = histogram[_ - 1]\n\
    \      }\n    end\n  end\n  return histogram\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyxmfi5f.lua:49:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpxyxmfi5f.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for _, letter in pairs(string.gmatch(test,\
    \ \"([a-z]+)\") or {}) do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpev26mr5w.lua:30: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local chars = { }\n    for char in test:gmatch(\"%a\")\
    \ do table.insert(chars, char) end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc22v0ezz.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  if test == nil then return nil end\n  local letters = {}\n\
    \  for letter in test:gmatch('%a') do\n    letters[letter] = letters[letter] or\
    \ 0\n    letters[letter] = letters[letter] + 1\n  end\n  local max = 0\n  for\
    \ key in pairs(letters) do\n    if letters[key] > max then\n      max = letters[key]\n\
    \    end\n  end\n  -- Return all that have the same occurrence\n  local ret =\
    \ {}\n  for key in pairs(letters) do\n    if letters[key] == max then\n      table.insert(ret,\
    \ key)\n    end\n  end\n  table.sort(ret)\n  -- Return the most frequently occurring\
    \ letter\n  return ret[1], ret[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70k4zwby.lua:38:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp70k4zwby.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([\" .. table.concat(alphabetical, \",\") .. \"]+)\") do\n    counts[letter] =\
    \ counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgwzehg5c.lua:12:\
    \ bad argument #1 to 'concat' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpgwzehg5c.lua:12: in local 'candidate'\n\t/tmp/tmpgwzehg5c.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    if not result[letter] then\n      result[letter] = 1\n    else\n\
    \      result[letter] = result[letter] + 1\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwplemy8.lua:26:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfwplemy8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  local keys = {}\n  for c in test:gmatch(\"\
    [%a%a]\") do\n    local count = counts[c] and counts[c] + 1 or 1\n    counts[c]\
    \ = count\n    if keys[c] ~= nil then\n      keys[c] = keys[c] + 1\n    else\n\
    \      keys[c] = 1\n    end\n  end\n  return keys\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvr7hmb0.lua:29:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpmvr7hmb0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   if test == nil then return end\n   local result = {}\n \
    \  for i,c in ipairs(test) do\n      result[c] = (result[c] and result[c]+1 or\
    \ 1)\n   end\n   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxmo9veu.lua:22:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpzxmo9veu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- Split space separated list\n  local letters = test:gsub('\
    \ ','')\n  -- Initialize hash table\n  local freq = {}\n  for i = 1, #letters\
    \ do\n    -- Initialize letter to zero\n    freq[letters[i]] = 0\n  end\n  --\
    \ Count the letter\n  for i = 1, #letters do\n    freq[letters[i]]=freq[letters[i]]+1\n\
    \  end\n  -- Return dictionary\n  return freq\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfirrkmpr.lua:17:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpfirrkmpr.lua:17: in local 'candidate'\n\
    \t/tmp/tmpfirrkmpr.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for char in test:gmatch('%a') do\n \
    \   counts[char] = counts[char] + 1 or 1\n  end\n  local maxValue = maxn(counts)\n\
    \  local keys = {}\n  for i=1,maxValue do\n    if counts[i] ~= 0 then\n      table.insert(keys,\
    \ i)\n    end\n  end\n  local histogram = {}\n  for i=1,#keys do\n    histogram[i]\
    \ = counts[keys[i]]\n  end\n  return histogram\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprephoj4_.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmprephoj4_.lua:13: in local 'candidate'\n\t/tmp/tmprephoj4_.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local histogram = {}\n    for c in test:gmatch('.') do\n\
    \        histogram[c] = histogram[c] or 0\n        histogram[c] = histogram[c]\
    \ + 1\n    end\n    return histogram\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ci7xzfw.lua:22:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmp8ci7xzfw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local s = {}\n    for word in test:gmatch('%w+') do\n \
    \       s[word] = s[word] or 0\n        s[word] = s[word] + 1\n    end\n    \n\
    \    for k, v in pairs(s) do\n        if v == s[v] then\n            s[v] = nil\n\
    \        else\n            s[v] = s[v]\n        end\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm1mjgij.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmprm1mjgij.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([^ ]+) \") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  local result = {}\n  for letter, count in pairs(counts)\
    \ do\n    if count == result[letter] then\n      result[letter] = count\n    else\n\
    \      result[letter] = count\n      result[letter].count = count\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu6omnk8k.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpu6omnk8k.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpu6omnk8k.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local result = {}\n    for c in string.gmatch(test, \"\
    ([^ ]+) \") do\n        if not result[#result] then\n            result[c] = 1\n\
    \        else\n            result[c] = 1 + result[c]\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86x8c1id.lua:25:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmp86x8c1id.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = Dict()\n  for i = 1, #test do\n    local letter\
    \ = test[i]\n    if counts.hasOwnProperty(letter) then\n      counts[letter] =\
    \ counts[letter] + 1\n    else\n      counts[letter] = 1\n    end\n  end\n  return\
    \ counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpow_vybho.lua:11:\
    \ attempt to call a nil value (global 'Dict')\nstack traceback:\n\t/tmp/tmpow_vybho.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpow_vybho.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal result = {}\n\t\n\tfor letter in test:gmatch(\"[%a]+\"\
    ) do\n\t\tif result[letter] == nil then\n\t\t\tresult[letter] = 1\n\t\telse\n\t\
    \t\tresult[letter] = result[letter] + 1\n\t\tend\n\tend\n\t\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p60x0hs.lua:28:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp9p60x0hs.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for c in test:gmatch(\"%S+\") do\n\
    \        local count = counts[c] or 0\n        counts[c] = count + 1\n    end\n\
    \    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplme27v95.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmplme27v95.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for c in test:gmatch(\"%a\") do\n  \
    \  local letter = string.lower(c)\n    local count = 1\n    local tmp = {}\n \
    \   for k, v in pairs(result) do\n      if v and (v >= count) then\n        count\
    \ = (count + v) / 2\n        if tmp[k] < count then\n          tmp[k] = count\n\
    \        end\n      end\n    end\n    result[letter] = count\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vqjbmje.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2vqjbmje.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp2vqjbmje.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal s = string.gsub(test, \"(%A+)\", function (letter)\n\
    \t\tlocal count = 1\n\t\tfor _, repcount in ipairs(histogram.counts) do\n\t\t\t\
    if letter == histogram.counts[repcount] then\n\t\t\t\tcount = count + 1\n\t\t\t\
    end\n\t\tend\n\t\treturn letter\n\tend)\n\tlocal counts = {}\n\tfor i = 1, #s\
    \ do\n\t\ttable.insert(counts, counts[i])\n\tend\n\ttable.sort(counts)\n\thistogram.counts\
    \ = counts\n\treturn histogram.counts\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9jx13h8.lua:13:\
    \ attempt to index a function value (upvalue 'histogram')\nstack traceback:\n\t\
    /tmp/tmpx9jx13h8.lua:13: in function </tmp/tmpx9jx13h8.lua:11>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpx9jx13h8.lua:11: in local 'candidate'\n\t/tmp/tmpx9jx13h8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histogram = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    histogram[letter] = histogram[letter] or 0\n    histogram[letter]\
    \ = histogram[letter] + 1\n  end\n  return histogram\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_pmzd80.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmps_pmzd80.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local t = {}\n  for c in string.gmatch(test, '%a') do\n \
    \   t[c] = t[c] or 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeaigbnn3.lua:21:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmpeaigbnn3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local frequency = {}\n  for letter in string.gmatch(test,\
    \ \"([a-zA-Z]+)\") do\n    local count = frequency[letter]\n    if count == nil\
    \ then\n      frequency[letter] = 1\n    else\n      frequency[letter] = frequency\
    \ [letter] + 1\n    end\n  end\n  local max_count = -1\n  local max_letter = nil\n\
    \  for letter, count in pairs(frequency) do\n    if count > max_count then\n \
    \     max_count = count\n      max_letter = letter\n    end\n  end\n  local letters\
    \ = {}\n  for letter, count in pairs(frequency) do\n    if count == max_count\
    \ then\n      table.insert(letters, letter)\n    end\n  end\n  return letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzp7bc6n.lua:40:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpyzp7bc6n.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    table.insert(letters, letter)\n  end\n  local count = {}\n\
    \  for _, letter in ipairs(letters) do\n    local count = count[letter] or 0\n\
    \    count = count + 1\n    count[letter] = count\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukj8cpnj.lua:19:\
    \ attempt to index a number value (local 'count')\nstack traceback:\n\t/tmp/tmpukj8cpnj.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpukj8cpnj.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local table = {}\n  local counts = {}\n  for letter in test:gmatch(\"\
    %a\") do\n    if not counts[letter] then\n      counts[letter] = 0\n    end\n\
    \    counts[letter] = counts[letter] + 1\n  end\n  for letter, count in pairs(counts)\
    \ do\n    if table[letter] then\n      table[letter] = table[letter] + count\n\
    \    else\n      table[letter] = count\n    end\n  end\n  return table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pnwyo9x.lua:33:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp6pnwyo9x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local dict = {}\n  for letter in test:gmatch(\"[%a]+\") do\
    \ dict[letter] = dict[letter] + 1 or 1 end\n  local max = 0\n  for k, v in pairs(dict)\
    \ do if v > max then max = v end end\n  for k, v in pairs(dict) do dict[k] = max\
    \  end -- Making sure the keys remain unique\n  return dict\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6mlh0ccf.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp6mlh0ccf.lua:12: in local 'candidate'\n\t/tmp/tmp6mlh0ccf.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   local count = {}\n   for letter in test:gmatch('(.-)') do\n\
    \      count[letter] = count[letter] + 1 or 1\n   end\n   return {\n      count\
    \ = count,\n      letter = count\n   }\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp918_wner.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp918_wner.lua:13: in local 'candidate'\n\t/tmp/tmp918_wner.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local result = {}\n    local letters = {}\n    local values\
    \ = {}\n    for letter, value in string.gmatch(test, \"(%a+)\") do\n        if\
    \ letters[letter] == nil then\n            letters[letter] = value\n        else\n\
    \            letters[letter] = letters[letter] + value\n        end\n        if\
    \ values[letter] == nil then\n            values[letter] = value\n        else\n\
    \            values[letter] = values[letter] + 1\n        end\n    end\n    for\
    \ letter, value in pairs(letters) do\n        if values[letter] > result[letter]\
    \ then\n            result[letter] = value\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_eezuc44.lua:37:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp_eezuc44.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local maxValue = 0\n  local maxLetter\n  for letter, count in\
    \ pairs(counts) do\n    if count > maxValue then\n      maxValue = count\n   \
    \   maxLetter = letter\n    end\n  end\n  return maxLetter, maxValue\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29fw4gpm.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"b\"\nstack traceback:\n\t/tmp/tmp29fw4gpm.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in unpack(test:gmatch('.'))\n\
    \    do\n      table.insert(letters, letter)\n    end\n  table.sort(letters)\n\
    \  local counts = {}\n  for _,letter in ipairs(letters) do\n    table.insert(counts,\
    \ 1, letters[letter])\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6l32e0h.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpo6l32e0h.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpo6l32e0h.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for letter in string.gmatch(test,\
    \ \"%a\") do counts[letter] = counts[letter] + 1 end\n    local maxVal, maxCount\
    \ = nil, 0\n    for letter in pairs(counts) do if counts[letter] > maxCount then\
    \ maxVal = letter; maxCount = counts[letter] end end\n    return maxCount and\
    \ { maxVal = maxVal, count = maxCount } or { value = test, count = 1}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3uycv77.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpc3uycv77.lua:12: in local 'candidate'\n\t/tmp/tmpc3uycv77.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for c in test:gmatch('%a') do counts[c]\
    \ = counts[c] + 1 end\n    return counts\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp33mug5bg.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp33mug5bg.lua:12: in local 'candidate'\n\t/tmp/tmp33mug5bg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local result = {}\n    local counts = {}\n    for letter\
    \ in test:gmatch(\"[%a]+\") do\n        if counts.hasOwnProperty(letter) then\n\
    \            counts[letter] = counts[letter] + 1\n        else\n            counts[letter]\
    \ = 1\n        end\n    end\n    for letter, occurrences in pairs(counts) do\n\
    \        if occurrences > result[letter] then\n            result[letter] = occurrences\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpik00v9om.lua:14:\
    \ attempt to call a nil value (field 'hasOwnProperty')\nstack traceback:\n\t/tmp/tmpik00v9om.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpik00v9om.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local dict = { }\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphlmzicss.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    count = counts[letter] or 0\n    count = count + 1\n    counts[letter] =\
    \ count\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm0dae_c.lua:24:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpdm0dae_c.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for c in test:gmatch(\"[%a]\") do\n\
    \    counts[c] = counts[c] or 0\n    counts[c] = counts[c] + 1\n  end\n  return\
    \ counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1pk5bx1.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpl1pk5bx1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local letters = string.gsub(test, \"[^a-z]\", \"\")\n \
    \   local letterDict = {}\n    for letter in string.gmatch(letters, \"([^ ]+)\"\
    )\n        do\n            letterDict[letter] = letterDict[letter] + 1 or 1\n\
    \        end\n    return letterDict\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsc0vvp9d.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpsc0vvp9d.lua:15: in local 'candidate'\n\t/tmp/tmpsc0vvp9d.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for ch in test:gmatch(\"%w+\") do\n\
    \    counts[ch] = counts[ch] or 0\n    counts[ch] = counts[ch] + 1\n  end\n  \n\
    \  -- Sorting the dictionary is cheaper than sorting each key-value pair.\n  for\
    \ k,v in pairs(counts) do\n    table.insert(counts, k, v)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp32v2zoxe.lua:35: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local dict = { }\n  for letter in test:gmatch(\"%a\") do\n\
    \    dict[letter] = dict[letter] or 1\n    dict[letter] = dict[letter] + 1\n \
    \ end\n  for key, value in pairs(dict) do\n    if value == dict[maxvalue] then\n\
    \      dict[maxvalue] = value\n    end\n  end\n  return dict\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2x1pixqs.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmp2x1pixqs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histo = {}\n  local words = string.gmatch(test, \"\
    [%a]+\")\n  for _, word in pairs(words) do\n    histo[word] = histo[word] or 1\n\
    \  end\n  for letter, _ in pairs(histo) do\n    histo[letter] = histo[letter]\
    \ + 1\n    if histo[letter] > max[letter] then\n      max[letter] = histo[letter]\n\
    \    end\n  end\n  return histo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84577_75.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp84577_75.lua:13: in local 'candidate'\n\t/tmp/tmp84577_75.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in string.gmatch(test, \"\
    (.-)\") do\n    table.insert(letters, letter)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7g29buv8.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   local counts = {}\n   for letter, count in string.gmatch(test,\
    \ \"([^ ]+)\") do\n      counts[letter] = counts[letter] or 0\n      counts[letter]\
    \ = counts[letter] + 1\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3o2w2r_4.lua:30: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counter = { }\n    for c in test:gmatch(\"%[bcda]+\"\
    ) do\n        counter[c] = counter[c] or 1\n    end\n    return counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfhsqp0b.lua:21:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpgfhsqp0b.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in unpack(test:gmatch'(%l+)')\
    \ do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local maxValue = max(1, counts[#counts])\n  for letter in pairs(counts)\
    \ do\n    if counts[letter] == maxValue then\n      counts[letter] = nil\n   \
    \ end\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprh_st1_r.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmprh_st1_r.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprh_st1_r.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  local letters = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8w79t09f.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal counts = {}\n\tfor letter in test:gmatch('([a-z]+ +)')\
    \ do\n\t\tcounts[letter] = counts[letter] or 1\n\tend\n\treturn counts\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxdboap1.lua:21:\
    \ expected: {a=2, b=2}\nactual: {\"a \"=1, \"b \"=1}\nstack traceback:\n\t/tmp/tmptxdboap1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do table.insert(letters, letter) end\n  local histo = {}\n  local nletters =\
    \ 0\n  for letter in pairs(letters) do\n    local count = letters[letter]\n  \
    \  histo[letter] = histo[letter] or count\n    nletters = nletters + count\n \
    \ end\n  if nletters == 0 then return end\n  return histo\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7argpw0n.lua:18:\
    \ attempt to perform arithmetic on a string value (local 'count')\nstack traceback:\n\
    \t/tmp/tmp7argpw0n.lua:18: in local 'candidate'\n\t/tmp/tmp7argpw0n.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for _, c in pairs(test) do\n   \
    \     if counts[c] == nil then\n            counts[c] = 1\n        else\n    \
    \        counts[c] = counts[c] + 1\n        end\n    end\n    return counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01yvydal.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp01yvydal.lua:12: in local 'candidate'\n\t/tmp/tmp01yvydal.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local histogram = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    if not histogram[letter] then\n      histogram[letter] = 0\n    end\n\
    \    histogram[letter] = histogram[letter] + 1\n  end\n  return histogram\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuwnzfgm.lua:25:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmphuwnzfgm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local words = split(test, \"%s\")\n    local d = {}\n \
    \   local letters = {}\n    for i = 1, #words do\n        local l = words[i]\n\
    \        if #letters == 0 then\n            table.insert(letters, l)\n       \
    \ elseif letters[#letters] ~= l then\n            letters[#letters] = l\n    \
    \        if #letters == 1 then\n                table.insert(d, letters[#letters])\n\
    \            else\n                table.insert(d, letters[#letters])\n      \
    \      end\n            letters[#letters] = l\n        else\n            letters[#letters]\
    \ = l\n            table.insert(d, letters[#letters])\n        end\n    end\n\
    \    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpewxun0m3.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpewxun0m3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpewxun0m3.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local result = {}\n    local spaces = \"\"\n    for letter,\
    \ count in string.gmatch(test, \"([^ ]+)\") do\n        local repeated = spaces:find(letter)\n\
    \        if repeated == nil then\n            spaces = spaces + letter\n     \
    \       result[letter] = count\n        else\n            local count = result[repeated]\n\
    \            if count < count then\n                spaces = spaces + letter\n\
    \                result[letter] = count\n            end\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4auplka.lua:16:\
    \ attempt to perform arithmetic on a string value (local 'spaces')\nstack traceback:\n\
    \t/tmp/tmph4auplka.lua:16: in local 'candidate'\n\t/tmp/tmph4auplka.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   local results = {}\n   for letter in string.gmatch(test,\
    \ \"%S\") do\n      local count = results[letter] or 0\n      results[letter]\
    \ = count + 1\n   end\n   return table.concat(results, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq38gzsx.lua:22:\
    \ expected: {a=2, b=2}\nactual: \"\"\nstack traceback:\n\t/tmp/tmplq38gzsx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for _, letter in ipairs(test) do\n \
    \   local occurrence = counts[letter]\n    if not occurrence then\n      occurrence\
    \ = 1\n    end\n    counts[letter] = occurrence + 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcy0_1i1d.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local counts = {}\n    for char in test:gmatch(\"[%a]+\"\
    ) do counts[char] = counts[char] or 1 end\n    return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hgt5174.lua:19:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmp1hgt5174.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local spaces = ' ' .. test .. ' '\n  local letters = {}\n\
    \  for i = 1, #spaces do\n    letters[spaces:sub(i,i)] = letters[spaces:sub(i,i)]\
    \ or 1\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprisegj12.lua:22:\
    \ expected: {a=2, b=2}\nactual: {\" \"=1, a=1, b=1}\nstack traceback:\n\t/tmp/tmprisegj12.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counter = { }\n  for char in string.gmatch(test, \"\
    %a\") do\n    counter[char] = counter[char] + 1 or 1\n  end\n  return counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgbaa5n2q.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpgbaa5n2q.lua:13: in local 'candidate'\n\t/tmp/tmpgbaa5n2q.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbau0k4af.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpbau0k4af.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local count = {}\n  for char in test:gmatch(\"[%l%a]+\")\
    \ do\n    if count[char] == nil then\n      count[char] = 1\n    else\n      count[char]\
    \ = count[char] + 1\n    end\n  end\n  local letters = {}\n  local max = 0\n \
    \ for k, v in pairs(count) do\n    if v > max then\n      max = v\n      letters\
    \ = k\n    end\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62pwc8uo.lua:33:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp62pwc8uo.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  local maxCount = 0\n  for c in test:gmatch('[%a]+')\
    \ do\n    local count = counts[c] or 0\n    counts[c] = count + 1\n    maxCount\
    \ = math.max(count, maxCount)\n  end\n  return maxCount, counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89gds19_.lua:24:\
    \ expected: {a=2, b=2}\nactual: 1\nstack traceback:\n\t/tmp/tmp89gds19_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal result = {}\n\tfor letter in test:gmatch('%a+') do\n\
    \t\tresult[letter] = result[letter] or 0\n\t\tresult[letter] = result[letter]\
    \ + 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59z7jwj2.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp59z7jwj2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n   local count = {}\n   for letter in test:gmatch('%a+') do\n\
    \      count[letter] = count[letter] or 0\n      count[letter] = count[letter]\
    \ + 1\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcft2rkee.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcft2rkee.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for c in test:gmatch('%a') do\n    counts[c]\
    \ = counts[c] or 1\n    counts[c] = counts[c] + 1\n  end\n  local maxCount = #counts\n\
    \  local results = {}\n  for c in pairs(counts) do\n    if counts[c] > maxCount\
    \ then\n      maxCount = counts[c]\n      results = {}\n      results[c] = counts[c]\n\
    \    end\n  end\n  if maxCount == 0 then\n    return {}\n  end\n  if #results\
    \ == 1 then\n    return results\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0j8d2bj.lua:37:\
    \ expected: {a=2, b=2}\nactual: {a=3}\nstack traceback:\n\t/tmp/tmpd0j8d2bj.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local letters = {}\n    local chars = {}\n    for ch in\
    \ test:gmatch(\"[%a]+\") do\n        if chars[ch] == nil then\n            chars[ch]\
    \ = 1\n        else\n            chars[ch] = chars[ch] + 1\n        end\n    end\n\
    \    for ch in pairs(chars) do\n        if letters[ch] == nil then\n         \
    \   letters[ch] = 1\n        else\n            letters[ch] = letters[ch] + 1\n\
    \        end\n    end\n    return letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzn0smkfr.lua:33:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmpzn0smkfr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n\tlocal result = {}\n\tfor k in string.gmatch(test, \"[^ ]+\"\
    ) do\n\t\tlocal count = 0\n\t\tif result[k] then\n\t\t\tcount = result[k]\n\t\t\
    end\n\t\tcount = count + 1\n\t\tresult[k] = count\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpest5l7sq.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpest5l7sq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local count = {}\n  for letter in test:gmatch(\"([a-z]+)\"\
    ) do \n    if not count[letter] then\n      count[letter] = 1\n    else\n    \
    \  count[letter] = count[letter] + 1\n    end\n  end\n  \n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8c7ja6dw.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp8c7ja6dw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([^ ]+)\") do\n    if not counts[letter] then\n      counts[letter] = 0\n    end\n\
    \    counts[letter] = counts[letter] + 1\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph6_lryej.lua:32: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter, count in str:gmatch(\"(%w+)(\
    \ +)(%d+)\") do\n    table.insert(counts, {letter, count})\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6da5mllj.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in test:gmatch('%a') do\n\
    \    result[letter] = result[letter] or 1\n    result[letter] = result[letter]\
    \ + 1\n  end\n  for key, value in pairs(result) do\n    if value > result[test]\
    \ then\n      result = { key, value }\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ea0pm6o.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2ea0pm6o.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp2ea0pm6o.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    if counts[letter] == nil then\n      counts[letter] = 1\n    else\n\
    \      counts[letter] = counts[letter] + 1\n    end\n  end\n  return counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppla7x2xv.lua:26:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmppla7x2xv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counter = {}\n  for letter in string.gmatch(test, \"\
    %S\") do\n    counter[letter] = counter[letter] or 1\n    counter[letter] = counter[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxletter = \"\"\n  for letter, count in\
    \ pairs(counter) do\n    if count > max then\n      max = count\n      maxletter\
    \ = letter\n    end\n  end\n  maxletter = maxletter or \"a\"\n  local ret = {}\n\
    \  for letter, count in pairs(counter) do\n    if count == max then\n      ret[letter]\
    \ = count\n    end\n  end\n  if ret[maxletter] == 0 then\n    return nil\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62xu9xxr.lua:40:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmp62xu9xxr.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local alphabet = {}\n  local totals = {}\n  for c in test:gmatch('%a')\
    \ do\n    alphabet[c] = alphabet[c] or 0\n    alphabet[c] = alphabet[c] + 1\n\
    \    totals[c] = totals[c] or 0\n    totals[c] = totals[c] + 1\n  end\n  local\
    \ max = 0\n  local maxcount = 0\n  for c in alphabet do\n    if alphabet[c] >\
    \ max then\n      max = alphabet[c]\n    end\n    if alphabet[c] > maxcount then\n\
    \      maxcount = alphabet[c]\n    end\n  end\n  local result = {}\n  for c in\
    \ alphabet do\n    if alphabet[c] == max then\n      result[#result + 1] = c\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpir7hav12.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpir7hav12.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpir7hav12.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  -- Split string into words and sort letters by frequency.\n\
    \  local words = test\n    :gsub(' ','+') -- replace spaces with plus signs\n\
    \    :gsub('%w+','-') -- replace alphanumeric characters with dashes\n    :gsub('-+','-')\
    \ -- replace dashes with dashes\n    :gsub('-','+') -- replace dashes with plus\
    \ signs\n    ::split('-') -- split string into words\n    ::sort() -- sort letters\n\
    \  local wordCounts = {}\n  for _, word in ipairs(words) do\n    wordCounts[word]\
    \ = wordCounts[word] or 0\n    wordCounts[word] = wordCounts[word] + 1\n  end\n\
    \  -- Return letter and number of occurrences\n  for letter, count in pairs(wordCounts)\
    \ do\n    if count == wordCounts[letter] then\n      table.insert(letters, letter)\n\
    \    end\n  end\n  table.sort(letters)\n  return letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp87ecoz5w.lua:17: '::' expected near '('\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for _, letter in ipairs(test) do\n \
    \   counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = table.max(counts)\n  local map = {}\n  for letter,\
    \ count in pairs(counts) do\n    if count == max then\n      map[letter] = count\n\
    \    end\n  end\n  return map\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqrza8hms.lua:16:\
    \ attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmpqrza8hms.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpqrza8hms.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local ret = {}\n    for letter, count in pairs(string.gmatch(test,\
    \ \"%a+\")) do\n        ret[letter] = ret[letter] or 0\n        ret[letter] =\
    \ ret[letter] + count\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvib2yn35.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpvib2yn35.lua:12: in local 'candidate'\n\t/tmp/tmpvib2yn35.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local count = {}\n    for letter in string.gmatch(test,\
    \ \"([%a]+)\") do\n        local value = count[letter]\n        count[letter]\
    \ = value + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpas5qz5vd.lua:30: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local result = {}\n    for letter, count in gmatch (test,\
    \ \" \") do\n        local l = letter:lower()\n        if not result[l] then\n\
    \            result[l] = count\n        else\n            result[l] = result[l]\
    \ + count\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt1fn4nbh.lua:12:\
    \ attempt to call a nil value (global 'gmatch')\nstack traceback:\n\t/tmp/tmpt1fn4nbh.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpt1fn4nbh.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = {}\n  for letter in test:gmatch(\"([a-z]+)\"\
    ) do\n    letters[letter] = letters[letter] or 0\n    letters[letter] = letters[letter]\
    \ + 1\n  end\n  local max = {}\n  for k,v in pairs(letters) do\n    if v > max[v]\
    \ then\n      max[v] = k\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ehwi854.lua:18:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2ehwi854.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp2ehwi854.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local count = {}\n    for char in string.gmatch(test, \"\
    [%a]+\") do\n        local _, count = count[char] or 0, 1\n        count[char]\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnwdubj5.lua:14:\
    \ attempt to index a number value (local 'count')\nstack traceback:\n\t/tmp/tmpnnwdubj5.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpnnwdubj5.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local letters = test:gsub(' ', ''):lower()\n  local count\
    \ = letters:gsub(' ', ''):count(' ')\n  local letters_count = letters:gsub(' ',\
    \ ''):count(' ', 1, 1)\n  if letters_count == 0 then\n    letters_count = 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptutvmsdz.lua:31: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local t = {}\n    for char in test:gmatch(\"[%a]+\") do\n\
    \        local count = t[char]\n        t[char] = count or 0\n        t[char]\
    \ = t[char] + 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodl3bhbc.lua:24:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpodl3bhbc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n    local chars = {}\n    local result = {}\n    for c in test:gmatch'([%z]+)'\
    \ do\n        if chars[c] ~= nil then chars[c] = chars[c] + 1 else chars[c] =\
    \ 1 end\n    end\n    for k, v in pairs(chars) do\n        if chars[k] > result[k]\
    \ then\n            result[k] = v\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2053w4bl.lua:27:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp2053w4bl.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in test:gmatch(\"[%a]\")\
    \ do \n    local n = tonumber(test) \n    if n > 0 and letters[letter] then\n\
    \      result[ letter ] = result[ letter ] + n \n    else \n      result[ letter\
    \ ] = 1 \n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg5m02rtt.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpg5m02rtt.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpg5m02rtt.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local d = {}\n  for c in test:gmatch('([a-z]+)')  do d[c]\
    \ = string.len(c) end\n  for c in pairs(d) do d[c] = d[c] end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrv37ava.lua:20:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmprrv37ava.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
