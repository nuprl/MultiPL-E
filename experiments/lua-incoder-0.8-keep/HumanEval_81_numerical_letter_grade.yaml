name: HumanEval_81_numerical_letter_grade
language: lua
prompt: "-- It is the last week of the semester and the teacher has to give the grades\n\
  -- to students. The teacher has been making her own algorithm for grading.\n-- The\
  \ only problem is, she has lost the code she used for grading.\n-- She has given\
  \ you a list of GPAs for some students and you have to write \n-- a function that\
  \ can output a list of letter grades using the following table:\n-- GPA       |\
  \    Letter grade\n-- 4.0                A+\n-- > 3.7                A \n-- > 3.3\
  \                A- \n-- > 3.0                B+\n-- > 2.7                B \n--\
  \ > 2.3                B-\n-- > 2.0                C+\n-- > 1.7                C\n\
  -- > 1.3                C-\n-- > 1.0                D+ \n-- > 0.7              \
  \  D \n-- > 0.0                D-\n-- 0.0                E\n-- Example:\n-- grade_equation([4.0,\
  \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
  \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n\
  \    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
  \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
  \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
  \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local grades_sum = 0\n    local letter_grades = {}\n    for i,\
    \ grade in pairs(grades) do\n        grades_sum = grades_sum + grade\n    end\n\
    \    for i = 1, 10 do\n        if grades_sum >= i then\n            letter_grades[i]\
    \ = 'A+'\n        elseif grades_sum >= i - 1 then\n            letter_grades[i]\
    \ = 'A-'\n        elseif grades_sum >= i - 2 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grades_sum >= i - 3 then\n            letter_grades[i]\
    \ = 'B-'\n        elseif grades_sum >= i - 4 then\n            letter_grades[i]\
    \ = 'C+'\n        elseif grades_sum >= i - 5 then\n            letter_grades[i]\
    \ = 'C'\n        elseif grades_sum >= i - 6 then\n            letter_grades[i]\
    \ = 'C-'\n        elseif grades_sum >= i - 7 then\n            letter_grades[i]\
    \ = 'D+'\n        elseif grades_sum >= i - 8 then\n            letter_grades[i]\
    \ = 'D'\n        elseif grades_sum >= i - 9 then\n            letter_grades[i]\
    \ = 'D-'\n        elseif grades_sum >= 10 then\n            letter_grades[i] =\
    \ 'E'\n        end\n    end\n    return letter_grades\nend", "  if #grades ==\
    \ 0 then\n    return 'E'\n  elseif #grades == 1 then\n    return 'D'\n  elseif\
    \ #grades == 2 then\n    return 'C'\n  elseif #grades == 3 then\n    return 'B'\n\
    \  elseif #grades == 4 then\n    return 'A'\n  elseif #grades == 5 then\n    return\
    \ 'A+'\n  else\n    return 'E'\n  end\nend", "  local function get_gpas_sorted(grades)\n\
    \    local gpas = {}\n    for _, grade in ipairs(grades) do\n      table.insert(gpas,\
    \ grade)\n    end\n    table.sort(gpas)\n    return gpas\n  end\n  \n  local function\
    \ get_letter_grade_function(gpas)\n    local function add_sign(gpas)\n      local\
    \ sign = '+'\n      if #gpas > 1 then\n        sign = string.format('%s-', sign)\n\
    \      end\n      return sign\n    end\n    \n    local function add_grade(gpas)\n\
    \      local grade = 'A'\n      if #gpas > 1 then\n        grade = string.format('%s+',\
    \ grade)\n      elseif gpas[1] ~= 0 then\n        grade = string.format('%s+',\
    \ grade)\n      end\n      return grade\n    end\n    \n    local function subtract_grade(gpas)\n\
    \      local grade = 'B'\n      if #gpas > 1 then\n        grade = string.format('%s-',\
    \ grade)\n      elseif gpas[1] ~= 0 then\n        grade = string.format('%s-',\
    \ grade)\n      end\n      return grade\n    end\n    \n    local function multiply_grade(gpas)\n\
    \      local grade = 'C'\n      if #gpas > 1 then\n        grade = string.format('%s*',\
    \ grade)\n      elseif gpas[1] ~= 0 then\n        grade = string.format('%s*',\
    \ grade)\n      end\n      return grade\n    end\n    \n    local function divide_grade(gpas)\n\
    \      local grade = 'D'\n      if #gpas > 1 then\n        grade = string.format('%s/',\
    \ grade)\n      elseif gpas[1] ~= 0 then\n        grade = string.format('%s/',\
    \ grade)\n      end\n      return grade\n    end\n    \n    local function get_letter_grade(gpas)\n\
    \      if #gpas == 1 then\n        return gpas[1]\n      else\n        local grade\
    \ = string.format('%s%+d', gpas)\n        if gpas[1] > 0 then\n          return\
    \ grade\n        else\n          return 'E'\n        end\n      end\n    end\n\
    \    \n    local function get_letter_grade_function_by_sign(gpas)\n      if gpas[1]\
    \ > 0 then\n        return add_grade\n      elseif gpas[1] == 0 then\n       \
    \ return subtract_grade\n      else\n        return multiply_grade\n      end\n\
    \    end\n    \n    local letter_grades = {}\n    for _, grade in ipairs(get_",
  "  -- TODO: Finish this function\nend", "   if grades > 4.0 or grades < 0.0 then\n\
    \       return nil -- No grade given \n   end", "    local grades_sorted = table.remove(grades,\
    \ 1)\n    for i = 1,#grades_sorted do \n        grades_sorted[i] = grades_sorted[i]\
    \ ~= 0 and grades_sorted[i] or 0.0\n    end\n    local grades_mean = table.remove(grades_sorted,\
    \ 1)\n    local grades_standard_deviation = math.pow(math.hypot(grades_mean, 1),\
    \ 1 / 2)\n    local lettergrade\n    if grades_mean > 3.7 then\n        lettergrade\
    \ = 'A+'\n    elseif grades_mean > 3.3 then\n        lettergrade = 'A'\n    elseif\
    \ grades_mean > 3 then\n        lettergrade = 'A-'\n    elseif grades_mean > 2.7\
    \ then\n        lettergrade = 'B+'\n    elseif grades_mean > 2.3 then\n      \
    \  lettergrade = 'B'\n    elseif grades_mean > 2 then\n        lettergrade = 'B-'\n\
    \    elseif grades_mean > 1.7 then\n        lettergrade = 'C+'\n    elseif grades_mean\
    \ > 1.3 then\n        lettergrade = 'C'\n    elseif grades_mean > 1 then\n   \
    \     lettergrade = 'C-'\n    elseif grades_mean > 0.7 then\n        lettergrade\
    \ = 'D+'\n    elseif grades_mean > 0 then\n        lettergrade = 'D'\n    else\n\
    \        lettergrade = 'D-'\n    end\n    table.insert(grades_sorted, 0)\n   \
    \ local grades_median = table.remove(grades_sorted, 1)\n    local grades_quartile\
    \ = table.remove(grades_sorted, 1)\n    local grades_iqr = (grades_quartile -\
    \ grades_median) / math.pow(grades_mean, 2)\n    local grades_lower_iqr = grades_median\
    \ - grades_iqr\n    local grades_upper_iqr = grades_median + grades_iqr\n    table.insert(grades_sorted,\
    \ 0)\n    table.insert(grades_sorted, 0)\n    table.insert(grades_sorted, 0)\n\
    \    table.insert(grades_sorted, 0)\n    table.insert(grades_sorted, 0)\n    local\
    \ grades_lowest_iqr = grades_lower_iqr\n    local grades_highest_iqr = grades_upper_iqr\n\
    \    for i = 1, #grades_sorted do\n        grades_sorted[i] = grades_sorted[i]\
    \ ~= 0 and grades_sorted[i] or 0.0\n    end\n    local grades_median = table.remove(grades_sorted,\
    \ 1)\n    for i = 1, #grades_sorted do\n        grades_sorted[i] = grades_sorted[i]\
    \ ~= 0 and grade", "\t-- This function will return a list with letters representing\
    \ grades in an algorithm\n\t-- that takes a list of GPA numbers and returns a\
    \ list with letters representing the grades.\n\t-- Arguments:\n\t--\tgrades (list)\
    \ -- List of GPA numbers\n\t--\n\t-- Returns:\n\t--\tgrades (list) -- List of\
    \ letter grades\n\t--\n\t-- This function should return a list of grades in the\
    \ same order as the GPAs, starting with the letter \"E\"\n\t-- if there are no\
    \ students who were assigned a grade.\n\t--\n\t-- Your function should not modify\
    \ the input list and its elements should be numbers, not strings or chars.\n\t\
    -- Use the following table to help you write the algorithm:\n\t-- GPA       |\
    \    Letter grade\n\t-- 4.0                A+\n\t-- > 3.7                A \n\t\
    -- > 3.3                A- \n\t-- > 3.0                B+\n\t-- > 2.7        \
    \        B \n\t-- > 2.3                B-\n\t-- > 2.0                C+\n\t--\
    \ > 1.7                C\n\t-- > 1.3                C-\n\t-- > 1.0           \
    \     D+ \n\t-- > 0.7                D \n\t-- > 0.0                D-\n\t--\t\n\
    \t-- Example:\n\t-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n\tlocal letters = {'E'}\n\tfor i = 1, #grades do\n\t\tlocal gpa\
    \ -- GPA number\n\t\tlocal letter -- Letter grade\n\t\tif grades[i] < 3.7 then\n\
    \t\t\tgpa = 4\n\t\t\tletter = 'A+'\n\t\telseif grades[i] < 3.3 then\n\t\t\tgpa\
    \ = 3\n\t\t\tletter = 'A'\n\t\telseif grades[i] < 3 then\n\t\t\tgpa = 2\n\t\t\t\
    letter = 'B+'\n\t\telseif grades[i] < 2.7 then\n\t\t\tgpa = 2\n\t\t\tletter =\
    \ 'B'\n\t\telseif grades[i] < 2.3 then\n\t\t\tgpa = 1\n\t\t\tletter = 'B-'\n\t\
    \telseif grades[i] < 2 then\n\t\t\tgpa = 0\n\t\t\tletter = 'C+'\n\t\telseif grades[i]\
    \ < 1.7 then\n\t\t\tgpa = 1\n\t\t\tletter = 'C'\n\t\telseif grades[i] < 1.3 then\n\
    \t\t\tgpa = 0\n\t\t\tletter = 'C-'\n\t\telseif grades[i] < 1 then\n\t\t\tgpa =\
    \ 0\n\t\t\tletter = 'D+'\n\t\telseif grades[i] < 0.7 then\n\t\t\tgpa = 1\n\t\t\
    \tletter", "\t-- Sort the grades\n\tgrades = table.sort(grades)\n\tlocal grades_sum\
    \ = 0\n\tlocal grades_count = 0\n\t\n\t-- Find the highest grade and the lowest\
    \ grade\n\tlocal highest_grade = grades[1]\n\tlocal lowest_grade = grades[1]\n\
    \tfor i = 2, #grades do\n\t\tif grades[i] > highest_grade then\n\t\t\thighest_grade\
    \ = grades[i]\n\t\tend\n\t\tif grades[i] < lowest_grade then\n\t\t\tlowest_grade\
    \ = grades[i]\n\t\tend\n\t\tgrades_sum = grades_sum + grades[i]\n\t\tgrades_count\
    \ = grades_count + 1\n\tend", "    local max_GPA  = tonumber(grades[#grades] or\
    \ 0)\n    local min_GPA  = tonumber(grades[1] or 0)\n    local sum      = 0\n\
    \    local sum2     = 0\n    local index    = 1\n    local index2   = 1\n    local\
    \ GPA      = 0\n    \n    for i = 1, #grades, 2 do\n        GPA = tonumber(grades[i])\
    \ or 0\n        if GPA > max_GPA then\n            max_GPA = GPA\n        end\n\
    \        if GPA < min_GPA then\n            min_GPA = GPA\n        end\n     \
    \   sum = sum + GPA\n        sum2 = sum2 + GPA * GPA\n        index = index +\
    \ 1\n        index2 = index2 + GPA * GPA\n    end\n    if sum == 0 then\n    \
    \    return 'E'\n    end\n    local precision = sum2 * 1.0 / index2\n    local\
    \ grade    = ''\n    local GPAround = 0\n    local isPositive = true\n    if index\
    \ > 0 and sum2 > 0 then\n        GPAround = sum * 1.0 / index\n        isPositive\
    \ = GPAround > 0\n    end\n    if isPositive then\n        grade = max_GPA > 0\
    \ and (max_GPA - GPAround) * 1.0 / max_GPA or 0\n    else\n        grade = max_GPA\
    \ < 0 and (-GPAround - max_GPA) * 1.0 / -max_GPA or 0\n    end\n    if grade \
    \ == 0 then\n        if GPAround ~= 0 then\n            grade = string.format('%f',\
    \ GPAround)\n        else\n            grade = string.format('%f', 0)\n      \
    \  end\n    end\n    return grade\nend", "    local grades_len  = #grades\n  \
    \  local grades_table = {}\n    \n    for i = 1, grades_len do\n        local\
    \ grade = grades[i]\n        \n        if grade ~= 0 and grade < 3.0 then\n  \
    \          grades_table[i + 1] = grade + \"+\"\n        elseif grade ~= 0 and\
    \ grade >= 3.0 and grade < 4.0 then\n            grades_table[i + 1] = grade +\
    \ \"-\"\n        elseif grade ~= 0 and grade >= 4.0 then\n            grades_table[i\
    \ + 1] = grade + \"+\"\n        end\n    end\n    \n    return grades_table\n\
    end", "  local function to_int(grade)\n    if type(grade) ~= 'number' then return\
    \ 0 end\n    if grade >= 1 then return grade end\n    return grade\n  end\n  local\
    \ function to_char(grade)\n    local result = ''\n    for i = 1, 6 do\n      if\
    \ grade >= i then\n        result = result .. '+'\n      end\n      if grade <\
    \ i then\n        result = result .. '-'\n      end\n    end\n    return result:sub(1,\
    \ 1)\n  end\n  local function sum_of_grades(grades, count)\n    local result =\
    \ count\n    for i = 1, #grades do\n      result = result + grades[i]\n    end\n\
    \    return result\n  end\n  local function grade_to_gpa(grade)\n    if grade\
    \ < 1 then return 0 end\n    if grade < 3.7 then return grade * 4 end\n    if\
    \ grade < 3.3 then return grade * 3.7 end\n    if grade < 3 then return grade\
    \ * 3.3 end\n    if grade < 2.7 then return grade * 3 end\n    if grade < 2.3\
    \ then return grade * 2.7 end\n    if grade < 2 then return grade * 2.3 end\n\
    \    if grade < 1.7 then return grade * 2 end\n    if grade < 1.3 then return\
    \ grade * 1.7 end\n    if grade < 1 then return grade * 1.3 end\n    return grade\
    \ * 1\n  end\n  local function letter_grade(grades, grade)\n    local grade =\
    \ to_int(grade)\n    local grades = to_int(grades)\n    local result = grade\n\
    \    for i = 1, grades do\n      result = result + to_char((grade / grades) *\
    \ i + 1)\n    end\n    return result\n  end\n  local grade = to_int(grade)\n \
    \ local grades = to_int(grades)\n  local result = ''\n  for i = 1, grades do\n\
    \    result = result .. letter_grade(grade, i)\n  end\n  return result:sub(1,\
    \ grade)\nend", "   local letter_grades = {\"A+\", \"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"F\"}\n   local\
    \ function grade_to_letter_grade(grade)\n      if grade > 0 and grade < 4 then\n\
    \         return letter_grades[grade]\n      elseif grade >= 3.5 and grade <=\
    \ 3.7 then\n         return \"A+\"\n      elseif grade >= 3.3 and grade <= 3.7\
    \ then\n         return \"A\"\n      elseif grade >= 3.0 and grade <= 3.3 then\n\
    \         return \"A-\"\n      elseif grade >= 2.7 and grade <= 2.3 then\n   \
    \      return \"B+\"\n      elseif grade >= 2.0 and grade <= 2.7 then\n      \
    \   return \"B\"\n      elseif grade >= 1.7 and grade <= 1.3 then\n         return\
    \ \"B-\"\n      elseif grade >= 1.0 then\n         return \"C+\"\n      elseif\
    \ grade >= 0.7 then\n         return \"C\"\n      else\n         return \"C-\"\
    \n      end\n   end\n   local grades_as_letters = {}\n   for _,grade in ipairs(grades)\
    \ do\n      grades_as_letters[grade] = grade_to_letter_grade(grade)\n   end\n\
    \   return grades_as_letters\nend", "  return string.gsub(grades, '^([0-9.]+)/([0-9.]+)$',\
    \ '\\1\\2')\nend", "\tlocal letter_grades = {}\n\tfor i = 1, #grades do\n\t\t\
    if grades[i] > 0 then\n\t\t\tif grades[i] < 3 then\n\t\t\t\tletter_grades[i] =\
    \ 'A+'\n\t\t\telseif grades[i] < 6 then\n\t\t\t\tletter_grades[i] = 'A-'\n\t\t\
    \telseif grades[i] < 9 then\n\t\t\t\tletter_grades[i] = 'B+'\n\t\t\telseif grades[i]\
    \ < 12 then\n\t\t\t\tletter_grades[i] = 'B'\n\t\t\telseif grades[i] < 14 then\n\
    \t\t\t\tletter_grades[i] = 'B-'\n\t\t\telseif grades[i] < 17 then\n\t\t\t\tletter_grades[i]\
    \ = 'C+'\n\t\t\telseif grades[i] < 20 then\n\t\t\t\tletter_grades[i] = 'C'\n\t\
    \t\telseif grades[i] < 22 then\n\t\t\t\tletter_grades[i] = 'C-'\n\t\t\telseif\
    \ grades[i] < 24 then\n\t\t\t\tletter_grades[i] = 'D+'\n\t\t\telseif grades[i]\
    \ < 27 then\n\t\t\t\tletter_grades[i] = 'D'\n\t\t\telseif grades[i] < 30 then\n\
    \t\t\t\tletter_grades[i] = 'D-'\n\t\t\telseif grades[i] < 32 then\n\t\t\t\tletter_grades[i]\
    \ = 'E'\n\t\t\telse\n\t\t\t\tletter_grades[i] = 'F'\n\t\t\tend\n\t\telse\n\t\t\
    \tletter_grades[i] = 'F'\n\t\tend\n\tend\n\treturn letter_grades\nend", "  if\
    \ #grades < 2 then\n    return \"E\"\n  end\n  local min_gpa = grades[1]\n  local\
    \ max_gpa = grades[#grades]\n  local letter_grades = {}\n  local gpa_diff = 1\n\
    \  for i = 1, #grades, 1 do\n    local gpa = grades[i]\n    -- Don't include low-gpa\
    \ grades in final grades\n    if not gpa then\n      continue\n    end\n    local\
    \ letter_grade = nil\n    if gpa > min_gpa then\n      -- Scale gpa difference\
    \ so we are comparing values on the same scale.\n      gpa_diff = gpa - min_gpa\n\
    \      -- Compute letter grade by adjusting gpa_diff to the gpa we are comparing.\n\
    \      letter_grade = string.char(\n        string.char(\"A\", gpa_diff + 0.5)\
    \ + string.char(\"B\", gpa_diff + 1) + string.char(\"C\", gpa_diff + 2)\n    \
    \  )\n    end\n    table.insert(letter_grades, letter_grade)\n  end\n  return\
    \ table.concat(letter_grades, \"\")\nend", "   -- Make sure the grades are numbers\n\
    \   if type(grades) ~= \"table\" then grades = {grades} end\n   -- Make a list\
    \ of all the grades\n   local grades_out = {}\n   for i = 1, #grades do\n    \
    \  -- If the grade is an integer, then put it into the grades_out table\n    \
    \  if type(grades[i]) == \"number\" then\n         grades_out[i] = grades[i]\n\
    \      -- If the grade is a string, then convert it to a number and put it into\
    \ the grades_out table\n      elseif type(grades[i]) == \"string\" then\n    \
    \     grades[i] = tonumber(grades[i])\n         if grades[i] >= 0 then\n     \
    \       grades_out[i] = grades[i]\n         end\n      -- If the grade isn't a\
    \ number or string, just put it in the grades_out table\n      else\n        \
    \ grades_out[i] = grades[i]\n      end\n   end\n   -- Get all the grade letters\
    \ and put them into the grades_out table\n   local letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n   for i = 1, #grades_out do grades_out[i] = letters[i] end\n   -- Return grades_out\n\
    \   return grades_out\nend", "    assert(#grades == 5, \"The number of grades\
    \ provided must be 5!\")\n    local grades_sorted = table.sort(grades)\n    local\
    \ grades_count = #grades_sorted\n    local grades_length = grades_sorted [1]\n\
    \    local letter_grades = \"\"\n    -- first we need a range to generate the\
    \ grades\n    local range_start = grades_length - 1\n    local range_end = 0\n\
    \    while range_end < range_start do\n        local grade = grades_sorted[range_end]\n\
    \        local new_range_start = range_end\n        local new_range_end = range_start\
    \ + 1\n        if grade < grades_count then\n            -- check if the grade\
    \ is lower than the end grade\n            if grade <= grades_sorted[new_range_end]\
    \ then\n                -- grade is lower than the end grade, so it must be lower\
    \ than the start grade\n                range_start = new_range_start + 1\n  \
    \          else\n                -- grade is lower than the start grade, so it\
    \ must be higher than the end grade\n                range_end = new_range_end\n\
    \            end\n        else\n            -- grade is higher than the end grade\n\
    \            range_end = new_range_end\n        end\n    end\n    grades_length\
    \ = range_end - range_start + 1\n    -- we now know the length of the grades range\n\
    \    local letter_grades_range = {}\n    -- we now know the length of the grades\
    \ range + 1 because we include the end grade\n    local gpa_min = grades_sorted[range_start]\n\
    \    local gpa_max = grades_sorted[range_end]\n    local gpa_increment = grades_sorted[range_end]\
    \ - grades_sorted[range_start]\n    local letter_grades_range = string.gsub(table.concat(grades_sorted[range_start:range_end+1],\
    \ \"|\"), \"^\", \"\")\n    -- we need to add one more for rounding\n    local\
    \ final_gpa_range = {}\n    local i = 0\n    for i = range_start + 1, range_end\
    \ do\n        table.insert(final_gpa_range, grades_sorted[i])\n    end\n    --\
    \ now we create the letter grades using the GPAs and letter grades range\n   \
    \ local letter_grades_count_range = {}\n    local gpa_count_range = string.gsub(table.concat(final_gpa_range,\
    \ \"|\"), \"^\", \"\")\n    local letter_grades_count = gpa_min + gpa_increment\n\
    \    -- calculate the total number of grade points\n    for i = range_start, range_end\
    \ do\n        table.insert(letter_grades_count_range, grades_sorted[i])\n    end\n\
    \    -- calculate the total number of grade points\n    for i = 1, grades_count\
    \ do\n        table.insert(letter_grades_count_range, grades_sorted[i])\n    end",
  "  local grades_sorted = table.sort(grades)\n  local grades_sorted_length = #grades_sorted",
  "  local grades_table = {}\n  for _, grade in pairs(grades) do\n    local temp =\
    \ {}\n    local temp_grade = grade\n    local i = 0\n    while temp_grade ~= 0\
    \ and i <= 4 do\n      temp[i] = temp_grade\n      temp_grade = math.abs(temp_grade\
    \ - temp[i])\n      i = i + 1;\n    end\n    grades_table[i] = temp\n  end\n \
    \ local temp = {}\n  for i = 1, 4 do\n    for j = 1, 5 do\n      temp[i .. '-'\
    \ .. j] = grades_table[i][j]\n    end\n  end\n  return table.concat(temp)\nend",
  '   local final_grade = string.char()', "    local alphabet = {\n        A = 'A',\n\
    \        B = 'B',\n        C = 'C',\n        D = 'D',\n        E = 'E',\n    \
    \    F = 'F',\n        G = 'G',\n        H = 'H',\n        I = 'I',\n        J\
    \ = 'J',\n        K = 'K',\n        L = 'L',\n        M = 'M',\n        N = 'N',\n\
    \        O = 'O',\n        P = 'P',\n        Q = 'Q',\n        R = 'R',\n    \
    \    S = 'S',\n        T = 'T',\n        U = 'U',\n        V = 'V',\n        W\
    \ = 'W',\n        Y = 'Y',\n    }\n    local grades_string = '{' .. table.concat(grades,\
    \ ',') .. '}'\n    local grades_table = {\n        A = -1,\n        B = -0.8,\n\
    \        C = -0.5,\n        D = -0.3,\n        E = -0.2,\n        F = -0.1,\n\
    \        G = 0.0,\n        H = -0.1,\n        I = -0.2,\n        J = -0.3,\n \
    \       K = -0.4,\n        L = -0.4,\n        M = -0.4,\n        N = -0.4,\n \
    \       O = -0.4,\n        P = -0.4,\n        Q = -0.4,\n        R = -0.4,\n \
    \       S = -0.4,\n        T = -0.4,\n        U = -0.4,\n        V = -0.4,\n \
    \       W = -0.4,\n        Y = -0.4,\n    }\n    local letters = {}\n    for i\
    \ = 1, #alphabet, 1 do\n        local grade = grades_table[ alphabet[i] ]\n  \
    \      if grade > 0 then\n            letters[ i ] = alphabet[ i ] .. grade\n\
    \        end\n    end\n    return table.concat(letters, '')\nend", "  if #grades\
    \ <= 0 then\n    return 'E'\n  end\n  local total = 0\n  local i = 0\n  while\
    \ i < #grades do\n    total = total + grades[i]\n    if total < 0 then\n     \
    \ total = total + 100\n    end\n    i = i + 1\n  end\n  local result = {}\n  for\
    \ i = 1, #grades do\n    if grades[i] > 0 then\n      result[i] = 'C'\n      local\
    \ devider = (grades[i] - 1) / 100\n      if devider ~= 0 then\n        local grade\
    \ = math.floor(devider)\n        if grade >= 2 then\n          result[i] = 'B-'\
    \ .. grade -- The teacher's algorithm for grading has B- as the letter grade.\n\
    \        else\n          result[i] = 'A-' .. grade -- The teacher's algorithm\
    \ for grading has A-\n        end\n      else\n        result[i] = 'B-' .. 1\n\
    \      end\n    else\n      result[i] = 'D-' .. 1\n    end\n  end\n  return result\n\
    end", "  -- First we convert each grade into a decimal point value\n  local grades_float\
    \ = grades\n  -- To round the decimal points up\n  grades_float = grades_float\
    \ + 0.01\n  -- Here we create a table containing all of the grade values rounded\
    \ to a whole number\n  local grades_decimal_point = {\n    4.0 = '4.0',\n    3.7\
    \ = '3.7',\n    3.3 = '3.3',\n    3.0 = '3.0',\n    2.7 = '2.7',\n    2.3 = '2.3',\n\
    \    2.0 = '2.0',\n    1.7 = '1.7',\n    1.3 = '1.3',\n    1.0 = '1.0',\n    0.7\
    \ = '0.7',\n    0.0 = '0.0',\n  }\n  -- We then convert each decimal point value\
    \ into a letter grade using the grades_decimal_point table\n  local grades_letter\
    \ = {}\n  for i = 1, #grades_decimal_point do\n    grades_letter[i] = grades_decimal_point[i]:sub(1,\
    \ 1)\n  end\n  -- We then loop through each grade and check to see if the decimal\
    \ point value \n  -- should be used to determine grade\n  for i = 1, #grades_float\
    \ do\n    if grades_float[i] == grades_decimal_point[grades_float[i]] then\n \
    \     -- If the decimal point value is equal to one of the grade decimal points,\n\
    \      -- we add the letter grade to the grades_letter table\n      grades_letter[#grades_letter+1]\
    \ = grades_letter[#grades_letter+1] + grades_letter[i]\n    end\n  end\n  -- Finally,\
    \ we convert each letter grade into a proper letter grade string\n  grades_letter[1]\
    \ = grades_letter[1]:sub(1, 2)\n  return grades_letter\nend", "   local letters\
    \ = {}\n   for _, grade in ipairs(grades) do\n      if grade >= 4.0 then\n   \
    \      table.insert(letters, {'A+', grade})\n      elseif grade > 3.7 then\n \
    \        table.insert(letters, {'A', grade})\n      elseif grade > 3.3 then\n\
    \         table.insert(letters, {'A-', grade})\n      elseif grade > 3.0 then\n\
    \         table.insert(letters, {'B+', grade})\n      elseif grade > 2.7 then\n\
    \         table.insert(letters, {'B', grade})\n      elseif grade > 2.3 then\n\
    \         table.insert(letters, {'B-', grade})\n      elseif grade > 2.0 then\n\
    \         table.insert(letters, {'C+', grade})\n      elseif grade > 1.7 then\n\
    \         table.insert(letters, {'C', grade})\n      elseif grade > 1.3 then\n\
    \         table.insert(letters, {'C-', grade})\n      elseif grade > 1.0 then\n\
    \         table.insert(letters, {'D+', grade})\n      elseif grade > 0.7 then\n\
    \         table.insert(letters, {'D', grade})\n      elseif grade > 0.0 then\n\
    \         table.insert(letters, {'D-', grade})\n      else\n         table.insert(letters,\
    \ {'E', grade})\n      end\n   end\n   return letters\nend", "    local grades_sum\
    \ = 0\n    for i = 1, #grades, 1 do \n        grades_sum = grades_sum + grades[i]\n\
    \    end\n    grades_sum = grades_sum + 0.5", "   local table = {}\n   local last_index\
    \ = #grades - 1\n   for i = 1, #grades do\n      table.insert(table, grades[i]/last_index)\n\
    \   end\n   return table\nend", "\tlocal a_p = math.ceil(grades[1] / 3.0)\n\t\
    local a_n = grades[1] - a_p * 3.0\n\tlocal b_p = math.ceil(grades[2] / 3.0)\n\t\
    local b_n = grades[2] - b_p * 3.0\n\tlocal c_p = math.ceil(grades[3] / 3.0)\n\t\
    local c_n = grades[3] - c_p * 3.0\n\tlocal d_p = math.ceil(grades[4] / 3.0)\n\t\
    local d_n = grades[4] - d_p * 3.0\n\tlocal e_p = math.ceil(grades[5] / 3.0)\n\t\
    local e_n = grades[5] - e_p * 3.0\n\tlocal f = grades[6]\n\tlocal a\n\tlocal b\n\
    \tlocal c\n\tlocal d\n\tlocal e", "    local grade_list = {}\n    for i = 1, #grades\
    \ do\n        if grades[i] > 0 and grades[i] <= 2.0 then\n            table.insert(grade_list,\
    \ lettergrade(grades[i]))\n        end\n    end\n    return grade_list\nend\n\
    </cell>\n<cell>", "    local result = []\n    \n    for i = 1, #grades do\n  \
    \      if grades[i] > 0 then\n            if grades[i] < 3.0 then\n          \
    \      result[#result + 1] = string.char(string.byte('A' + grades[i] + 1))\n \
    \           elseif grades[i] < 5.0 then\n                result[#result + 1] =\
    \ string.char(string.byte('A' + grades[i] - 1))\n            elseif grades[i]\
    \ < 7.0 then\n                result[#result + 1] = string.char(string.byte('B'\
    \ + grades[i] + 1))\n            elseif grades[i] < 9.0 then\n               \
    \ result[#result + 1] = string.char(string.byte('B' + grades[i] - 1))\n      \
    \      elseif grades[i] < 11.0 then\n                result[#result + 1] = string.char(string.byte('B'\
    \ + grades[i] - 1))\n            elseif grades[i] < 13.0 then\n              \
    \  result[#result + 1] = string.char(string.byte('C' + grades[i] + 1))\n     \
    \       elseif grades[i] < 15.0 then\n                result[#result + 1] = string.char(string.byte('C'\
    \ + grades[i] - 1))\n            elseif grades[i] < 17.0 then\n              \
    \  result[#result + 1] = string.char(string.byte('C' + grades[i] - 1))\n     \
    \       elseif grades[i] < 19.0 then\n                result[#result + 1] = string.char(string.byte('D'\
    \ + grades[i] + 1))\n            elseif grades[i] < 21.0 then\n              \
    \  result[#result + 1] = string.char(string.byte('D' + grades[i] - 1))\n     \
    \       elseif grades[i] < 23.0 then\n                result[#result + 1] = string.char(string.byte('D'\
    \ + grades[i] - 1))\n            elseif grades[i] < 25.0 then\n              \
    \  result[#result + 1] = string.char(string.byte('D' + grades[i] - 1))\n     \
    \       elseif grades[i] < 27.0 then\n                result[#result + 1] = string.char(string.byte('D'\
    \ + grades[i] - 1))\n            else\n                result[#result + 1] = string.char(string.byte('F'))\n\
    \            end\n        else\n            result[#result + 1] = string.char(string.byte('E'))\n\
    \        end\n    end\n    return result\nend", "    assert(type(grades) == 'table',\
    \ string.format(\"Expected a table, received %s instead\", type(grades)))\n  \
    \  assert(#grades > 0, string.format(\"Expected table with at least one entry,\
    \ received %s instead\", #grades))\n    assert(#grades == 2, string.format(\"\
    Expected a table with two entries, received %d entries instead\", #grades))\n\
    \    assert(grades[1] >= 0 and grades[1] <= 10, string.format(\"Expected table\
    \ entry 1 to be between 0 and 10, received %f instead\", grades[1]))\n    assert(grades[2]\
    \ >= 0 and grades[2] <= 10, string.format(\"Expected table entry 2 to be between\
    \ 0 and 10, received %f instead\", grades[2]))\n    local a, b, c = grades\n \
    \   if a >= b and a >= c then\n        return 'A+' -- A+ is a top grade\n    elseif\
    \ a > b and a > c then\n        return 'A' -- A is a middle grade\n    elseif\
    \ b > a and b > c then\n        return 'B+' -- B+ is a bottom grade\n    elseif\
    \ b > a and b > c then\n        return 'B' -- B is a middle grade\n    elseif\
    \ c > a and c > b then\n        return 'C+' -- C+ is a bottom grade\n    elseif\
    \ c > a and c > b then\n        return 'C' -- C is a middle grade\n    elseif\
    \ c > a and c > b then\n        return 'C-' -- C- is a bottom grade\n    elseif\
    \ c > a then\n        return 'C' -- C is a middle grade\n    elseif b > a then\n\
    \        return 'B+' -- B+ is a bottom grade\n    elseif b > a then\n        return\
    \ 'B' -- B is a middle grade\n    elseif b > a then\n        return 'B' -- B is\
    \ a middle grade\n    elseif a > a then\n        return 'A+' -- A+ is a top grade\n\
    \    elseif b == b then\n        return 'D' -- D is a middle grade\n    elseif\
    \ c == c then\n        return 'E' -- E is a middle grade\n    else\n        return\
    \ 'F' -- F is a bottom grade\n    end\nend", "    local grade = grades[#grades]\n\
    \    local grade_lower, grade_upper = grade - 0.2, grade + 0.2\n    if grade <\
    \ 0 then\n        grade = 0\n        grade_lower = -grade_lower\n        grade_upper\
    \ = -grade_upper\n    end\n    if grade_lower < grade_upper then\n        local\
    \ grade_range = grade_upper - grade_lower\n        local grade_average = grade\
    \ / grade_range\n        local grade_diff = grade_average - grade_lower\n    \
    \    return table.concat({\n            table.concat({'A+'}, math.round(grade_average,\
    \ 2), ','),\n            table.concat({'A'}, math.round(grade_diff, 2), ','),\n\
    \            table.concat({'B+'}, math.round(grade_average, 2), ','),\n      \
    \      table.concat({'B'}, math.round(grade_diff, 2), ','),\n            table.concat({'B-'},\
    \ math.round(grade_average, 2), ','),\n            table.concat({'C+'}, math.round(grade_average,\
    \ 2), ','),\n            table.concat({'C'}, math.round(grade_diff, 2), ','),\n\
    \            table.concat({'C-'}, math.round(grade_average, 2), ','),\n      \
    \      table.concat({'D+'}, math.round(grade_average, 2), ','),\n            table.concat({'D'},\
    \ math.round(grade_diff, 2), ','),\n            table.concat({'D-'}, math.round(grade_average,\
    \ 2), ','),\n            table.concat({'E'}, math.round(grade_average, 2), ','),\n\
    \        }, ' ')\n    else\n        local grade = math.round(grade, 2)\n     \
    \   local grade_average = grade / 2\n        local grade_diff = grade_average\
    \ - grade_lower\n        return table.concat({\n            table.concat({'A+'},\
    \ grade_average, ','),\n            table.concat({'A'}, grade_diff, ','),\n  \
    \          table.concat({'B+'}, grade_average, ','),\n            table.concat({'B'},\
    \ grade_diff, ','),\n            table.concat({'B-'}, grade_average, ','),\n \
    \           table.concat({'C+'}, grade_average, ','),\n            table.concat({'C'},\
    \ grade_diff, ','),\n            table.concat({'C-'}, grade_average, ','),\n \
    \           table.concat({'D+'}, grade_average, ','),\n            table.concat({'D'},\
    \ grade_diff, ','),\n            table.concat({'D-'}, grade_average, ','),\n \
    \           table.concat({'E", "    -- First check if there are enough grades\
    \ to do something\n    local minimum = grades[1]\n    if #grades < minimum - 1\
    \ then\n        return nil\n    end\n    \n    -- Then convert the grades to an\
    \ array\n    local grades_array = table.unpack(grades)\n    \n    -- Then find\
    \ the difference between the highest grade and the lowest grade\n    local highest_grade\
    \ = grades_array[1]\n    local lowest_grade = grades_array[2]\n    local difference\
    \ = highest_grade - lowest_grade\n    \n    -- Then multiply the difference\n\
    \    local multiplier = 100 - difference\n    \n    -- Finally find the percentage\
    \ of each grade\n    local percentage_of_grades = (grades_array[3] / 100) * multiplier\n\
    \    \n    -- Then calculate the letter grade\n    local letters = {\n       \
    \ [\"A+\"] = grades_array[1],\n        [\"A\"] = grades_array[1],\n        [\"\
    A-\"] = grades_array[1],\n        [\"B+\"] = grades_array[2],\n        [\"B\"\
    ] = grades_array[2],\n        [\"B-\"] = grades_array[2],\n        [\"C+\"] =\
    \ grades_array[3],\n        [\"C\"] = grades_array[3],\n        [\"C-\"] = grades_array[3],\n\
    \        [\"D+\"] = grades_array[4],\n        [\"D\"] = grades_array[4],\n   \
    \     [\"D-\"] = grades_array[4],\n        [\"E\"] = grades_array[5],\n    }\n\
    \    \n    -- Return the letter grades\n    return letters[math.floor(percentage_of_grades)]\n\
    end\n</cell>\n<text>\nTests", "   local grade_table = {\"A+\", \"A\", \"A-\",\
    \ \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n\
    \   local min_grade = grades[1]\n   local max_grade = grades[#grades]\n   local\
    \ letter_grade = \"\"\n   for _, grade in ipairs(grades) do\n      if grade <\
    \ min_grade then return letter_grade end\n      if grade > max_grade then return\
    \ letter_grade end\n      letter_grade = letter_grade .. grade_table[grade]\n\
    \   end\n   return letter_grade\nend", "  local output = {}\n  local n = table.count(grades)\n\
    \  \n  for i = 1, n do\n    -- if grades[i] > 2.0 then\n    --   output[#output+1]\
    \ = 'B-'\n    -- elseif grades[i] < -1.0 then\n    --   output[#output+1] = 'D-'\n\
    \    -- elseif grades[i] > -0.7 then\n    --   output[#output+1] = 'C-'\n    --\
    \ elseif grades[i] < -1.7 then\n    --   output[#output+1] = 'C'\n    -- elseif\
    \ grades[i] < -0.7 then\n    --   output[#output+1] = 'C+'\n    -- elseif grades[i]\
    \ < 0.0 then\n    --   output[#output+1] = 'C'\n    -- elseif grades[i] < 0.7\
    \ then\n    --   output[#output+1] = 'D'\n    -- elseif grades[i] < 1.3 then\n\
    \    --   output[#output+1] = 'D+'\n    -- elseif grades[i] < 1.7 then\n    --\
    \   output[#output+1] = 'D'\n    -- elseif grades[i] < 2.0 then\n    --   output[#output+1]\
    \ = 'D+'\n    -- elseif grades[i] < 3.0 then\n    --   output[#output+1] = 'D+'\n\
    \    -- elseif grades[i] < 3.3 then\n    --   output[#output+1] = 'D+'\n    --\
    \ elseif grades[i] < 3.7 then\n    --   output[#output+1] = 'D+'\n    -- elseif\
    \ grades[i] < 4.0 then\n    --   output[#output+1] = 'A+'\n    -- elseif grades[i]\
    \ < 4.3 then\n    --   output[#output+1] = 'A+'\n    -- elseif grades[i] < 4.7\
    \ then\n    --   output[#output+1] = 'A+'\n    -- elseif grades[i] < 5.0 then\n\
    \    --   output[#output+1] = 'A'\n    -- elseif grades[i] < 5.3 then\n    --\
    \   output[#output+1] = 'A'\n    -- elseif grades[i] < 5.7 then\n    --   output[#output+1]\
    \ = 'A'\n    -- elseif grades[i] < 6.0 then\n    --   output[#output+1] = 'A'\n\
    \    -- elseif grades[i] < 6.3 then\n    --   output[#output+1] = 'A'\n    --\
    \ elseif grades[i] < 6.7 then\n    --   output[#output+1] = 'A'\n    -- elseif\
    \ grades[i] < 7.0 then\n    --   output[#output+1] = 'A'\n    -- elseif grades[i]\
    \ < 7.3 then\n    --", "  local lettergrade = \"\"\n  for _, grade in ipairs(grades)\
    \ do\n    local percent = grade / 4.0\n    if percent > 3.7 then\n      if percent\
    \ > 3.0 then\n        if percent > 2.7 then\n          if percent > 2.3 then\n\
    \            if percent > 2.0 then\n              if percent > 1.7 then\n    \
    \            if percent > 1.3 then\n                  if percent > 1.0 then\n\
    \                    if percent > 0.7 then\n                      if percent >\
    \ 0.0 then\n                        if percent > -0.0 then\n                 \
    \         if percent > -0.7 then\n                            if percent > -0.3\
    \ then\n                              if (percent > 0.0) then\n              \
    \                  if percent > -0.3 then\n                                  if\
    \ (percent > -0.7) then\n                                    if percent > -0.9\
    \ then\n                                      if percent > -0.1 then\n       \
    \                                 if percent > 0.0 then\n                    \
    \                      if percent > -0.1 then\n                              \
    \              if percent > -0.1 then\n                                      \
    \        if percent > 0.0 then\n                                             \
    \   if percent > 0.1 then\n                                                  if\
    \ percent > 1.0 then\n                                                    if percent\
    \ > 1.1 then\n                                                      if percent\
    \ > 1.2 then\n                                                        if percent\
    \ > 1.3 then\n                                                          if percent\
    \ > 1.4 then\n                                                            lettergrade\
    \ = \"A-\"\n                                                            return\n\
    \                                                          end\n             \
    \                                           end\n                            \
    \                          end\n                                             \
    \       end\n                                                  end\n         \
    \                                       end\n                                \
    \              end\n                                            end\n        \
    \                                  end\n                                     \
    \   end\n                                      end\n                         \
    \           end\n                                  end\n                     \
    \           end\n                              end\n                         \
    \   end\n                          end\n                        end\n        \
    \              end\n                    end\n                  end\n         \
    \       end\n              end\n            end\n          end\n        end\n\
    \      end\n    end\n  end\n  return lettergrade\nend", "  local count = 0\n \
    \ local grade_table = {}\n  for i = 1, #grades do\n    if grades[i] ~= nil and\
    \ grades[i] ~= '' then\n      count = count + 1\n    end\n  end\n  count = count\
    \ + 1\n  for i = 1, #grades do\n    grade_table[count] = grade_table[count] ..\
    \ grades[i]\n  end\n  return grade_table\nend", "    local lettergrades = {}\n\
    \    for i = 1, #grades do\n        local grade = grades[i]\n        if grade\
    \ < 3.0 then\n            table.insert(lettergrades, \"A-\")\n        elseif grade\
    \ < 3.7 then\n            table.insert(lettergrades, \"A-\")\n        elseif grade\
    \ < 4.0 then\n            table.insert(lettergrades, \"B+\")\n        elseif grade\
    \ < 4.7 then\n            table.insert(lettergrades, \"B\")\n        elseif grade\
    \ < 5.0 then\n            table.insert(lettergrades, \"B-\")\n        elseif grade\
    \ < 5.7 then\n            table.insert(lettergrades, \"B+\")\n        elseif grade\
    \ < 6.0 then\n            table.insert(lettergrades, \"C+\")\n        elseif grade\
    \ < 6.7 then\n            table.insert(lettergrades, \"C\")\n        elseif grade\
    \ < 7.0 then\n            table.insert(lettergrades, \"C-\")\n        elseif grade\
    \ < 7.7 then\n            table.insert(lettergrades, \"C+\")\n        elseif grade\
    \ < 8.0 then\n            table.insert(lettergrades, \"D+\")\n        elseif grade\
    \ < 8.7 then\n            table.insert(lettergrades, \"D\")\n        elseif grade\
    \ < 9.0 then\n            table.insert(lettergrades, \"D-\")\n        elseif grade\
    \ < 9.7 then\n            table.insert(lettergrades, \"D+\")\n        elseif grade\
    \ < 10.0 then\n            table.insert(lettergrades, \"E\")\n        else\n \
    \           table.insert(lettergrades, \"?\")\n        end\n    end\n    return\
    \ table.concat(lettergrades, \" \")\nend", "\t-- The first thing we need to do\
    \ is find the number of points the student\n\t-- has earned. So the total of all\
    \ the numbers in the list. For instance,\n\t-- 4.0 = 4.0, 3.7 = 7, 3.3 = 1, etc.\n\
    \tlocal total_points = #grades\n\t-- The next thing we need to do is find the\
    \ largest number in the list. We\n\t-- can do this because there are only 4 possible\
    \ grades.\n\tlocal max_points = {}\n\tfor i = 0, 4 do\n\t\tlocal score = grades[i]\n\
    \t\tif max_points[score] ~= nil then\n\t\t\tmax_points[score] = max_points[score]\
    \ + 1\n\t\telse\n\t\t\tmax_points[score] = 1\n\t\tend\n\tend\n\t-- We then need\
    \ to find the grade for each number in each possible grade.\n\t-- Since there\
    \ are only 4 possible grades, a loop will suffice.\n\tlocal grade_points = {}\n\
    \tfor points = 0, 4 do\n\t\t-- Find the grade point for this number\n\t\tlocal\
    \ grade = string.sub(max_points, points, points + 1)\n\t\t-- Check if this grade\
    \ point exists in the grades list. If it does not,\n\t\t-- then add it to the\
    \ grades list\n\t\tif grades[grade] == nil then\n\t\t\tgrades[grade] = points\n\
    \t\tend\n\t\t-- Store the grade point for this number\n\t\tgrade_points[points]\
    \ = grades[grade]\n\tend\n\t-- Now that the grades have been found, we can return\
    \ the letter grades\n\t-- using the following table:\n\t-- GPA       |    Letter\
    \ grade\n\t-- 4.0                A+\n\t-- > 3.7                A \n\t-- > 3.3\
    \                A- \n\t-- > 3.0                B+\n\t-- > 2.7               \
    \ B \n\t-- > 2.3                B-\n\t-- > 2.0                C+\n\t-- > 1.7 \
    \               C\n\t-- > 1.3                C-\n\t-- > 1.0                D+\
    \ \n\t-- > 0.7                D \n\t-- > 0.0                D-\n\t-- 0.0     \
    \           E\n\t-- Example:\n\t-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+',\
    \ 'B', 'C-', 'C', 'A-']\n\tlocal final_grades = {}\n\tfor points = 0 to 4 do\n\
    \t\t-- Find the grade for this number of points\n\t\tlocal grade = grade_points[points]\n\
    \t\t-- Use the grade to find the letter\n\t\tlocal letter = string.sub({ 'A+',\
    \ 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E' }, grade,\
    \ grade + 1)\n\t\t-- Add the letter", "\tlocal grade\n\tlocal result\n\tlocal\
    \ current_sum\n\tlocal current_letter\n\t\n\tfor i, v in ipairs(grades) do\n\t\
    \tgrade = v * 100 / 10\n\t\t\n\t\tif grade < 3.0 then\n\t\t\tlocal new_grade =\
    \ grade - 3.0\n\t\t\t\n\t\t\tif new_grade > current_sum then\n\t\t\t\tcurrent_sum\
    \ = new_grade\n\t\t\t\tcurrent_letter = 'D-'\n\t\t\telse\n\t\t\t\tcurrent_sum\
    \ = new_grade + 3.0\n\t\t\t\tcurrent_letter = 'D+'\n\t\t\tend\n\t\telseif grade\
    \ < 3.5 then\n\t\t\tlocal new_grade = grade - 3.5\n\t\t\t\n\t\t\tif new_grade\
    \ > current_sum then\n\t\t\t\tcurrent_sum = new_grade\n\t\t\t\tcurrent_letter\
    \ = 'C-'\n\t\t\telse\n\t\t\t\tcurrent_sum = new_grade + 3.5\n\t\t\t\tcurrent_letter\
    \ = 'C+'\n\t\t\tend\n\t\telseif grade < 4.0 then\n\t\t\tlocal new_grade = grade\
    \ - 4.0\n\t\t\t\n\t\t\tif new_grade > current_sum then\n\t\t\t\tcurrent_sum =\
    \ new_grade\n\t\t\t\tcurrent_letter = 'B-'\n\t\t\telse\n\t\t\t\tcurrent_sum =\
    \ new_grade + 4.0\n\t\t\t\tcurrent_letter = 'B+'\n\t\t\tend\n\t\telseif grade\
    \ < 4.7 then\n\t\t\tlocal new_grade = grade - 4.7\n\t\t\t\n\t\t\tif new_grade\
    \ > current_sum then\n\t\t\t\tcurrent_sum = new_grade\n\t\t\t\tcurrent_letter\
    \ = 'B-'\n\t\t\telse\n\t\t\t\tcurrent_sum = new_grade + 4.7\n\t\t\t\tcurrent_letter\
    \ = 'B+'\n\t\t\tend\n\t\telseif grade < 5.0 then\n\t\t\tlocal new_grade = grade\
    \ - 5.0\n\t\t\t\n\t\t\tif new_grade > current_sum then\n\t\t\t\tcurrent_sum =\
    \ new_grade\n\t\t\t\tcurrent_letter = 'B-'\n\t\t\telse\n\t\t\t\tcurrent_sum =\
    \ new_grade + 5.0\n\t\t\t\tcurrent_letter = 'B+'\n\t\t\tend\n\t\telseif grade\
    \ < 5.7 then\n\t\t\tlocal new_grade = grade - 5.7\n\t\t\t\n\t\t\tif new_grade\
    \ > current_sum then\n\t\t\t\tcurrent_sum = new_grade\n\t\t\t\tcurrent_letter\
    \ = 'B-'\n\t\t\telse\n\t\t\t\tcurrent_sum = new_grade + 5.7\n\t\t\t\tcurrent_letter\
    \ = 'B+'\n\t\t\tend\n\t\telseif grade < 6.0 then\n\t\t\tlocal new_grade = grade\
    \ - 6.0\n\t\t\t\n\t\t\tif new_grade > current_sum then\n\t\t\t\tcurrent_sum =\
    \ new_grade\n\t\t\t\tcurrent_letter = 'B-'\n\t\t\telse\n\t\t\t\tcurrent_sum =\
    \ new_grade + 6.0\n\t\t\t\tcurrent_letter = 'B+'\n\t\t\tend\n\t\telseif grade\
    \ < 6.7 ", "\tlocal student_grades = {} -- store student grades\n\tlocal gpa --\
    \ grade point\n\tlocal letter -- letter grade\n\tlocal temp_letter -- temporary\
    \ letter grade", "  -- TODO: Implement this function\n  return \"A+\"\nend", "\t\
    local letters = {}\n\tfor i = 1, #grades do\n\t\tlocal GPA = grades[i]\n\t\tif\
    \ GPA < 0 then\n\t\t\tGPA = 0.0001\n\t\telse\n\t\t\tGPA = GPA * 10\n\t\tend\n\t\
    \tlocal numericalGPA = math.floor(GPA)\n\t\tlocal letter = string.sub(\n\t\t\t\
    string.sub('ABCD',\n\t\t\t\tmath.abs(numericalGPA - 0.5)),\n\t\t\t-2)\n\t\ttable.insert(letters,\
    \ letter)\n\tend\n\treturn letters\nend", "  local letter_grades = { \"A+\", \"\
    A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\" }\n  local letter_index = #letter_grades\n  local gpa_index = #grades\
    \ - 1\n  \n  for i = gpa_index, gpa_index, -1 do\n    if grades[i] == 0.0 then\n\
    \      return letter_grades[letter_index]\n    end\n  end\n  \n  return letter_grades[letter_index]\n\
    end", "\t-- If there are no grades, return an empty string (the grade is zero)\n\
    \tif not grades or #grades == 0 then\n\t\treturn \"\"\n\tend", "  local alphabet\
    \ = { ['A+'] = 4.0, 'A' = > 3.7, 'A-' = > 3.3, 'B+' = > 3.0, 'B' = > 2.7, 'B-'\
    \ = > 2.3, 'C+' = > 2.0, 'C' = > 1.7, 'C-' = > 1.3, 'D+' = > 1.0, 'D' = > 0.7,\
    \ 'D-' = > 0.0, 'E' = > 0.0 }\n  local gradesLen = #grades\n  local gradesAlphabet\
    \ = {}\n  for i = 1, gradesLen do\n    gradesAlphabet[i] = alphabet[grades[i]]\n\
    \  end\n  table.sort(gradesAlphabet)\n  return gradesAlphabet\nend", "   local\
    \ grades_sorted = {}\n   for i,v in ipairs(grades) do\n      if type(v) ~= 'number'\
    \ then\n         return 'Wrong input: Expected a number but got ' .. tostring(type(v))\n\
    \      elseif v == 0 then\n         return 'Wrong input: Expected a positive number\
    \ but got 0'\n      elseif v ~= grades[i] then\n         return 'Wrong input:\
    \ Expected the number ' .. tostring(v) .. ' but got ' .. tostring(grades[i])\n\
    \      else\n         grades_sorted[i] = v\n      end\n   end\n   local grade_sum\
    \ = 0\n   for i = 1, #grades_sorted do\n      grade_sum = grade_sum + grades_sorted[i]\n\
    \   end\n   if grade_sum == 1 then\n      return 'E'\n   else\n      for i = 1,\
    \ #grades_sorted do\n         if grades_sorted[i] > 0 and grades_sorted[i] < 3.5\
    \ then\n            if grades_sorted[i] * ( grade_sum - 1 ) / ( grade_sum + 1\
    \ ) >= 4.0 then\n               return 'A+'\n            elseif grades_sorted[i]\
    \ * ( grade_sum - 1 ) / ( grade_sum + 1 ) >= 3.7 then\n               return 'A'\n\
    \            elseif grades_sorted[i] * ( grade_sum - 1 ) / ( grade_sum + 1 ) >=\
    \ 3.3 then\n               return 'A-'\n            elseif grades_sorted[i] *\
    \ ( grade_sum - 1 ) / ( grade_sum + 1 ) >= 3.0 then\n               return 'B+'\n\
    \            elseif grades_sorted[i] * ( grade_sum - 1 ) / ( grade_sum + 1 ) >=\
    \ 2.7 then\n               return 'B'\n            elseif grades_sorted[i] * (\
    \ grade_sum - 1 ) / ( grade_sum + 1 ) >= 2.3 then\n               return 'B-'\n\
    \            elseif grades_sorted[i] * ( grade_sum - 1 ) / ( grade_sum + 1 ) >=\
    \ 2.0 then\n               return 'C+'\n            elseif grades_sorted[i] *\
    \ ( grade_sum - 1 ) / ( grade_sum + 1 ) >= 1.7 then\n               return 'C'\n\
    \            elseif grades_sorted[i] * ( grade_sum - 1 ) / ( grade_sum + 1 ) >=\
    \ 1.3 then\n               return 'C-'\n            elseif grades_sorted[i] *\
    \ ( grade_sum - 1 ) / ( grade_sum + 1 ) >= 1.0 then\n               return 'D+'\n\
    \            ", "    local grades_list = {}\n    local gpa_list = grades", " \
    \  local student_gpa = table.unpack(grades)\n   local student_lettergrades = {}\n\
    \   local grade_index = 1\n   \n   -- Add A+ grade\n   student_lettergrades[grade_index]\
    \ = ('A+'):gsub('%d+$', '\\\\1')\n   grade_index += 1\n   \n   -- Add A grade\n\
    \   for i = 1, #student_gpa do\n      local gpa_range = student_gpa:range(i, i)\n\
    \      \n      if gpa_range ~= 0 then\n         student_lettergrades[grade_index]\
    \ = ('A'):gsub('%d+$', '\\\\1')\n         grade_index += 1\n      end\n      \n\
    \      if gpa_range ~= 0 then\n         student_lettergrades[grade_index] = ('A-'):gsub('%d+$',\
    \ '\\\\1')\n         grade_index += 1\n      end\n   end\n   \n   -- Add B+ grade\n\
    \   for i = 1, #student_gpa do\n      local gpa_range = student_gpa:range(i, i)\n\
    \      \n      if gpa_range ~= 0 then\n         student_lettergrades[grade_index]\
    \ = ('B+'):gsub('%d+$', '\\\\1')\n         grade_index += 1\n      end\n     \
    \ \n      if gpa_range ~= 0 then\n         student_lettergrades[grade_index] =\
    \ ('B'):gsub('%d+$', '\\\\1')\n         grade_index += 1\n      end\n   end\n\
    \   \n   -- Add B grade\n   for i = 1, #student_gpa do\n      local gpa_range\
    \ = student_gpa:range(i, i)\n      \n      if gpa_range ~= 0 then\n         student_lettergrades[grade_index]\
    \ = ('B-'):gsub('%d+$', '\\\\1')\n         grade_index += 1\n      end\n     \
    \ \n      if gpa_range ~= 0 then\n         student_lettergrades[grade_index] =\
    \ ('B-'):gsub('%d+$', '\\\\1')\n         grade_index += 1\n      end\n   end\n\
    \   \n   -- Add C+ grade\n   for i = 1, #student_gpa do\n      local gpa_range\
    \ = student_gpa:range(i, i)\n      \n      if gpa_range ~= 0 then\n         student_lettergrades[grade_index]\
    \ = ('C+'):gsub('%d+$', '\\\\1')\n         grade_index += 1\n      end\n     \
    \ \n      if gpa_range ~= 0 then\n         student_lettergrades[grade_index] = ",
  "   if grades < 2.0 then\n       return 'A+' \n   elseif grades < 3.0 then\n   \
    \    return 'A'\n   elseif grades < 3.3 then\n       return 'A-'\n   elseif grades\
    \ < 3.7 then\n       return 'B+'\n   elseif grades < 4.0 then\n       return 'B'\n\
    \   elseif grades < 4.3 then\n       return 'B-'\n   elseif grades < 4.7 then\n\
    \       return 'C+'\n   elseif grades < 5.0 then\n       return 'C'\n   elseif\
    \ grades < 5.3 then\n       return 'C-'\n   elseif grades < 5.7 then\n       return\
    \ 'D+'\n   elseif grades < 6.0 then\n       return 'D'\n   elseif grades < 6.3\
    \ then\n       return 'D-'\n   elseif grades < 6.7 then\n       return 'F'\n \
    \  else\n       return 'F'\n   end\nend", "  local grades_len = len(grades)\n\
    \  local gpa_sum = 0\n  local gpa_avg = 0.0", "    -- Calculate the sum of grades\n\
    \    local total_grades = grades[1] + grades[2] + grades[3] + grades[4] + grades[5]\n\
    \    -- Calculate the number of correct answers according to the formula\n   \
    \ local number_of_correct_answers = grade / total_grades\n    -- Create the list\
    \ of letters according to the formula\n    local letters = {}\n    if number_of_correct_answers\
    \ == 0 then\n        -- If the total number of correct answers is 0, then the\
    \ total grade must be \n        -- greater than 0 so we give the letter B\n  \
    \      letters[1] = 'B'\n    elseif number_of_correct_answers == 1 then\n    \
    \    -- If the total number of correct answers is 1, then the total grade must\
    \ be \n        -- greater than 1 so we give the letter C\n        letters[2] =\
    \ 'C'\n    elseif number_of_correct_answers == 2 then\n        -- If the total\
    \ number of correct answers is 2, then the total grade must be \n        -- greater\
    \ than 2 so we give the letter D\n        letters[3] = 'D'\n    elseif number_of_correct_answers\
    \ == 3 then\n        -- If the total number of correct answers is 3, then the\
    \ total grade must be \n        -- greater than 3 so we give the letter E\n  \
    \      letters[4] = 'E'\n    end\n    return letters\nend", "\t-- First we sort\
    \ them in decreasing order.\n\tgrades:sort(function(a, b)\n\t\treturn b - a \n\
    \tend)", "  local gpa =  grades[1]\n  local letter_grade\n  if gpa < 4.0 then\n\
    \    letter_grade = 'A+'\n  elseif gpa > 3.7 then\n    letter_grade = 'A'\n  elseif\
    \ gpa > 3.3 then\n    letter_grade = 'A-'\n  elseif gpa > 3.0 then\n    letter_grade\
    \ = 'B+'\n  elseif gpa > 2.7 then\n    letter_grade = 'B'\n  elseif gpa > 2.3\
    \ then\n    letter_grade = 'B-'\n  elseif gpa > 2.0 then\n    letter_grade = 'C+'\n\
    \  elseif gpa > 1.7 then\n    letter_grade = 'C'\n  elseif gpa > 1.3 then\n  \
    \  letter_grade = 'C-'\n  elseif gpa > 1.0 then\n    letter_grade = 'D+'\n  elseif\
    \ gpa > 0.7 then\n    letter_grade = 'D'\n  else\n    letter_grade = 'D-'\n  end\n\
    \  return letter_grade\nend", "   local score = 0.0\n   for _, grade in ipairs(grades)\
    \ do\n      score = score + (grade * gpa_weights[grade])\n   end\n   local letter_grade\
    \ = letters[math.ceil(score)]\n   return letter_grade\nend\nprint(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5])) -- ['A+', 'B', 'C-', 'C', 'A-']\nprint(numerical_letter_grade([4.0,\
    \ 3.8, 3.6, 3.4, 3.2])) -- ['B+', 'B', 'B+', 'B', 'B+']\nprint(numerical_letter_grade([4.0,\
    \ 3.8, 3.6, 3.4, 3.2])) -- ['B+', 'B', 'B+', 'B', 'B+']", "  local function check_for_zero(grade,\
    \ digit)\n    if grade > 0.0 then\n      return math.floor((grade/digit)) * digit\
    \ .. '+'\n    else\n      return grade\n    end\n  end\n  \n  local function check_for_positive(grade,\
    \ digit)\n    if grade > 0.0 then\n      return math.floor((grade/digit) * digit)\n\
    \    else\n      return grade\n    end\n  end\n  \n  local function check_for_negative(grade,\
    \ digit)\n    if grade < 0.0 then\n      return math.floor((grade/digit)) * digit\
    \ .. '-'\n    else\n      return grade\n    end\n  end\n  \n  local function check_for_number(grade,\
    \ digit)\n    if grade == 0.0 then\n      return digit\n    else\n      return\
    \ math.floor((grade/digit))\n    end\n  end\n  \n  local function check_for_padded(grade,\
    \ digit, value)\n    if grade > 0.0 then\n      return check_for_number(grade,\
    \ digit) .. value\n    else\n      return check_for_number(check_for_negative(grade,\
    \ digit), digit) .. value\n    end\n  end\n  \n  local function check_for_balanced(grade,\
    \ digit, value)\n    if grade > 0.0 then\n      return check_for_padded(check_for_negative(grade,\
    \ digit), digit, value) .. value\n    else\n      return check_for_padded(check_for_positive(grade,\
    \ digit), digit, value) .. value\n    end\n  end\n  \n  local function check_for_three_digit(grade,\
    \ digit, value)\n    if grade > 0.0 then\n      return check_for_balanced(check_for_number(grade,\
    \ digit), digit, value) .. value\n    else\n      return check_for_balanced(check_for_number(check_for_negative(grade,\
    \ digit), digit), digit, value) .. value\n    end\n  end\n  \n  local function\
    \ check_for_two_digit(grade, digit, value)\n    if grade > 0.0 then\n      return\
    \ check_for_three_digit(check_for_number(grade, digit), digit, value) .. value\n\
    \    else\n      return check_for_three_digit(check_for_number(check_for_negative(grade,\
    \ digit), digit), digit, value) .. value\n    end\n  end\n  \n  local function\
    \ check_for_one(grade, digit, value)\n    if grade > 0.0 then\n      return check_for_two_digit(check_for_number(grade,\
    \ digit), digit, value) .. value\n    else\n      return check_for_two_digit(check_for_number(check_for_negative(grade,\
    \ digit), digit), digit, value) ", "    --grades is a list of grades\n    local\
    \ letters = {} \n    local GPA = sum(grades)\n    local grades_length = #grades\n\
    \    local index = 1\n    while GPA > 0 do\n        local GPA_reduced = GPA %\
    \ 10 \n        GPA = GPA - GPA_reduced\n        if GPA_reduced == 0 then\n   \
    \         letters[index] = letters[index]..'E'\n        elseif GPA_reduced <=\
    \ 7 then\n            letters[index] = letters[index]..'D+', \n              \
    \          letters[index-1]..'D-'\n        else\n            letters[index] =\
    \ letters[index]..'C-',\n                        letters[index-1]..'C'\n     \
    \   end\n        index = index + 1\n    end\n    return letters\nend", "  local\
    \ grade_list = {}\n  for i = 1, #grades do\n    local gpa = grades[i]\n    local\
    \ grade = gpa > 0 and 'A+' or\n                 gpa <= 0 and 'B' or\n        \
    \         gpa <= 1.7 and 'C+' or\n                 gpa <= 2.3 and 'C' or\n   \
    \              gpa <= 2.7 and 'C-' or\n                 gpa <= 3.0 and 'A-' or\n\
    \                 gpa <= 3.3 and 'A' or\n                 gpa <= 3.7 and 'A+'\
    \ or\n                 gpa <= 4.0 and 'B+' or\n                 gpa <= 4.7 and\
    \ 'B' or\n                 gpa <= 5.0 and 'B-' or\n                 gpa <= 5.3\
    \ and 'B' or\n                 gpa <= 5.7 and 'B-' or\n                 'D'\n\
    \    grade_list[i] = grade\n  end\n  return grade_list\nend", "    -- TODO: Implement\
    \ this\n    \nend", "  -- The base case, when grades is a single number.\n  --\
    \ This means that we return 'D-' as a grade (since there are no grades greater\
    \ than 0)\n  if type(grades) == 'number' and grades == 0 then\n    return 'D-';\n\
    \  else\n    -- The recursive case.\n    -- The logic here is that we keep adding\
    \ grades to a list until we have gone\n    -- to an increasing list of grades.\
    \ After this point we will return the current\n    -- list of grades.\n    local\
    \ current_grades = [];\n    local previous_grade = grades;\n    local num_grades\
    \ = 0;\n    while current_grades ~= nil and previous_grade > 0 do\n      -- If\
    \ the current grade is above the previous grade, then add this grade.\n      if\
    \ previous_grade > grades then\n        current_grades:insert(grades);\n     \
    \ else\n        -- If the current grade is less than the previous grade, then\
    \ subtract this grade.\n        current_grades:insert(previous_grade - grades);\n\
    \      end\n      -- Count the number of grades we have.\n      num_grades = num_grades\
    \ + 1;\n      -- The previous grade.\n      previous_grade = grades;\n    end\n\
    \    -- Once we have gone through all of the grades, return the final list.\n\
    \    -- We return 'D-' because we can't go any higher than the lowest grade.\n\
    \    return table.concat(current_grades, '-');\n  end\nend", "  -- First, let's\
    \ sort the grades from lowest to highest so we don't have to\n  -- go through\
    \ multiple passes later.\n  table.sort(grades)\n  local grades_index = 1\n  local\
    \ lettergrades = {}\n  local grade, next_grade = grades[1], grades[1]\n  -- Iterate\
    \ through the rest of the grades and add lettergrades to \n  -- lettergrades if\
    \ they are < the corresponding grades.\n  for _, next_grade in ipairs(grades)\
    \ do\n    if next_grade < grade then\n      -- Add the next lettergrade to the\
    \ current lettergrade.\n      -- Grade is < lettergrade so just add it.\n    \
    \  lettergrades[grades_index] = next_grade\n      grade = next_grade\n      grades_index\
    \ = grades_index + 1\n    else\n      -- Add the current lettergrade to the current\
    \ grade.\n      -- Grade is >= lettergrade so add the current lettergrade to the\
    \ \n      -- current grade and start a new letter grade.\n      lettergrades[grades_index]\
    \ = grade\n      grade = next_grade\n      grades_index = grades_index + 1\n \
    \     lettergrades[grades_index] = next_grade\n    end\n  end\n  -- Add the last\
    \ lettergrade to the last grade and add it to the list.\n  lettergrades[grades_index]\
    \ = grade\n  return table.concat(lettergrades, '+')\nend", "   \n   -- The list\
    \ of GPAs for the students, this list has one entry per student id.\n   -- The\
    \ list has the structure [ [student_id, gpa] ]\n   \n   local student_gpas = {}\
    \ -- The dictionary that stores the GPAs for each student\n   local gpa -- The\
    \ GPA for the current student\n   \n   -- Iterate through the students and store\
    \ the GPAs for the students in the\n   -- student dictionary. \n   for _, student_gpa\
    \ in pairs(grades) do\n      -- If the student id is not in the student dictionary\
    \ yet, add it to\n      -- it. This is the case for the first student.\n     \
    \ if not(student_gpas[student_gpa[1]]) then\n         student_gpas[student_gpa[1]]\
    \ = student_gpa\n      end\n   end\n   \n   -- Iterate through the student dictionary\
    \ and calculate the letter grade\n   -- for each student. After each GPA is calculated,\
    \ remove the GPA from the\n   -- dictionary to avoid memory leaks. Return the\
    \ students dictionary with the\n   -- calculated letter grades.\n   local letter_grades\
    \ = {}\n   for student_gpa, student in pairs(student_gpas) do\n      -- Calculate\
    \ the letter grade for the current student\n      local letter_grade = student['letter_grade']\n\
    \      \n      -- Add the calculated letter grade to the list of letter grades\n\
    \      table.insert(letter_grades, letter_grade)\n      \n      -- Remove the\
    \ GPA from the dictionary to avoid memory leaks\n      student['letter_grade']\
    \ = nil\n      student_gpa['letter_grade'] = nil\n      student_gpa = nil\n  \
    \ end\n   \n   return letter_grades\nend\n</cell>\n<text>\nExercise\nThe function\
    \ grade_equation returns the list of letter grades given the grades of one or\
    \ more students in the same semester. \nThis function should work for the following\
    \ cases:", "    local i = 0\n    local grade = ''\n    while i < #grades do\n\
    \        local grade_number = grades[i]\n        local letter_grade = ''\n   \
    \     local j = 0\n        while j + 2 < #grades and grades[j + 1] > grade_number\
    \ do\n            j = j + 2\n        end\n        local letter_grade_level = grades[j\
    \ + 1] - grade_number\n        if letter_grade_level <= -1 then\n            letter_grade\
    \ = 'E'\n        elseif letter_grade_level >= 1 then\n            letter_grade\
    \ = 'D-' .. letter_grade_level\n        elseif letter_grade_level > -1 then\n\
    \            letter_grade = 'D+' .. letter_grade_level\n        end\n        if\
    \ j + 2 < #grades then\n            if grades[j + 2] > grade_number then\n   \
    \             letter_grade = letter_grade .. '+'\n            else\n         \
    \       letter_grade = letter_grade .. '-'\n            end\n        end\n   \
    \     grade = grade .. letter_grade\n        i = i + 1\n    end\n    return grade\n\
    end", "    local results = {}\n    for i = 1, #grades do\n        local grade\
    \ = grades[i]\n        if grade > 0 then\n            if grade > 3.0 then\n  \
    \              results[#results+1] = 'C+'\n            elseif grade > 2.0 then\n\
    \                results[#results+1] = 'C'\n            elseif grade > 1.7 then\n\
    \                results[#results+1] = 'B-'\n            elseif grade > 1.3 then\n\
    \                results[#results+1] = 'B'\n            elseif grade > 1.0 then\n\
    \                results[#results+1] = 'A-'\n            elseif grade > 0.7 then\n\
    \                results[#results+1] = 'A'\n            elseif grade > 0.3 then\n\
    \                results[#results+1] = 'A+'\n            elseif grade > 0.0 then\n\
    \                results[#results+1] = 'D+'\n            else\n              \
    \  results[#results+1] = 'D'\n            end\n        else\n            results[#results+1]\
    \ = 'E'\n        end\n    end\n    return results\nend", "    local grades_table\
    \ = {\n        A+ = 0.7,\n        A = 0.3,\n        B = 1,\n        B+ = 0.4,\n\
    \        B- = 0.1,\n        C = 1,\n        C+ = 0.5,\n        C- = 0.1,\n   \
    \     D = 0.5,\n        D+ = 0.4,\n        E- = 0.1,\n        D- = 0.1,\n    }",
  "    local i\n    local grades_length = #grades\n    local letters = {}", "    local\
    \ results = {}\n    local max_value = grades[1]\n    local current_value = 1\n\
    \    for i = 2, #grades do\n        if grades[i] >= current_value then\n     \
    \       results[i] = grades[i]\n        else\n            results[i] = current_value\
    \ - grades[i]\n        end\n        max_value = max_value * grades[i]\n      \
    \  current_value = current_value + grades[i]\n    end\n    return results\nend",
  "    local sum, average, min_grade, min_grade_index = 0, 0, 0.0, 0\n    for i =\
    \ 1, #grades, 1 do\n        local grade = grades[i]\n        if grade ~= nil and\
    \ grade ~= 0 then\n            sum = sum + grade\n            if grade < average\
    \ then\n                average = grade\n                min_grade = grade\n \
    \               min_grade_index = i\n            end\n        end\n    end\n \
    \   -- Compute the average\n    local divisor = #grades\n    if divisor == 0 then\n\
    \        average = 1.0\n    else\n        average = sum / divisor\n    end\n \
    \   \n    -- Compute letter grade\n    local result\n    if min_grade_index <\
    \ #grades then\n        -- Get the final grade\n        local final_grade = grades[min_grade_index]\n\
    \        -- Compute the final letter grade\n        if final_grade < average then\n\
    \            result = 'B+'\n        elseif final_grade == average then\n     \
    \       result = 'A+'\n        elseif final_grade > average then\n           \
    \ result = 'B-'\n        end\n    end", "  local grades_reversed = {}\n  -- reverse\
    \ the order\n  for _, grade in pairs(grades) do\n    grades_reversed[#grades_reversed\
    \ + 1] = grade\n  end\n  -- reverse the order\n  grades_reversed = reverse.new(grades_reversed)\n\
    \  -- remove duplicates\n  grades_reversed = remove.duplicate(grades_reversed)\n\
    \  -- count the frequency of each grade\n  local grades_count = grade_count(grades_reversed)\n\
    \  -- return the letter grade for the student\n  return lettergrade(grades_count)\n\
    end", "  local total_gpa = grades[1]\n  local total_letter = grades[2]\n  local\
    \ gpa_per_two_points = grades[3]", "  local result = {}\n  local last_gpa \n \
    \ local last_letter\n  for _, grade in ipairs(grades) do\n    if grade == 0 then\n\
    \      result[#result + 1] = 'E'\n    elseif last_gpa ~= grade and last_gpa ~=\
    \ 0 then\n      result[#result + 1] = last_letter\n    end\n    last_letter =\
    \ grade_to_letter(grade)\n    last_gpa = grade\n  end\n  result[#result + 1] =\
    \ last_letter\n  return result\nend", "    -- Make sure the grades list is sorted\n\
    \    if grades == nil or #grades < 1 then\n        ngx.log(ngx.ERR, \"grades list\
    \ is nil or empty\")\n        return nil\n    end\n    if #grades == 1 then\n\
    \        return grades[1]\n    end\n    local i = 1\n    while i <= #grades do\n\
    \        local gpa = grades[i]\n        if gpa <= 4.0 then\n            local\
    \ grade = 'A+'\n        elseif gpa > 3.7 then\n            local grade = 'A'\n\
    \        elseif gpa > 3.3 then\n            local grade = 'A-'\n        elseif\
    \ gpa > 3.0 then\n            local grade = 'B+'\n        elseif gpa > 2.7 then\n\
    \            local grade = 'B'\n        elseif gpa > 2.3 then\n            local\
    \ grade = 'B-'\n        elseif gpa > 2.0 then\n            local grade = 'C+'\n\
    \        elseif gpa > 1.7 then\n            local grade = 'C'\n        elseif\
    \ gpa > 1.3 then\n            local grade = 'C-'\n        elseif gpa > 1.0 then\n\
    \            local grade = 'D+'\n        elseif gpa > 0.7 then\n            local\
    \ grade = 'D'\n        elseif gpa > 0.0 then\n            local grade = 'D-'\n\
    \        else\n            local grade = 'E'\n        end\n        return grade\
    \ .. grade\n        i = i + 1\n    end\nend", "    local grade\n    local grades\n\
    \    local letter_grades", "  -- Initialize the list for letter grades.\n  local\
    \ letter_grades = {}\n  \n  -- Loop through the grades until you get an A or D\n\
    \  for _, grade in ipairs(grades) do\n    local grade_index = 1\n    -- If the\
    \ grade is an A or D, skip to the following grade index.\n    while grade <= 0.0\
    \ or (grade > 0.0 and grade <= 0.7 then\n      grade_index = grade_index + 1\n\
    \      -- Otherwise, increment the grade index.\n      grade = grades[grade_index\
    \ + 1]\n    end\n    -- Add the grade letter to the list.\n    letter_grades[grade_index]\
    \ = ['A+', 'B', 'C-', 'C', 'A-'][grade_index]\n  end\n  return letter_grades\n\
    end", "    local results = {}\n    for i = 0, #grades do\n        local grade\
    \ = grades[i]\n        local grade_value = i - 1 -- We begin our grade count at\
    \ the students index\n        local letter_value\n        if grade <= 3 then\n\
    \            letter_value = grade + 1\n        elseif grade <= 6 then\n      \
    \      letter_value = 3\n        elseif grade <= 9 then\n            letter_value\
    \ = 2\n        elseif grade <= 12 then\n            letter_value = 1\n       \
    \ else\n            letter_value = 0\n        end\n        table.insert(results,\
    \ string.rep(\"A+\", letter_value))\n        table.insert(results, string.rep(\"\
    A\", letter_value))\n        table.insert(results, string.rep(\"A-\", letter_value))\n\
    \        table.insert(results, string.rep(\"B+\", letter_value))\n        table.insert(results,\
    \ string.rep(\"B\", letter_value))\n        table.insert(results, string.rep(\"\
    B-\", letter_value))\n        table.insert(results, string.rep(\"C+\", letter_value))\n\
    \        table.insert(results, string.rep(\"C\", letter_value))\n        table.insert(results,\
    \ string.rep(\"C-\", letter_value))\n        table.insert(results, string.rep(\"\
    D+\", letter_value))\n        table.insert(results, string.rep(\"D\", letter_value))\n\
    \        table.insert(results, string.rep(\"D-\", letter_value))\n        table.insert(results,\
    \ string.rep(\"E\", letter_value))\n    end\n    return table.concat(results)\n\
    end", "  if grades == nil then\n    return \"E\"\n  elseif grades == 0 then\n\
    \    return \"D-\" \n  elseif grades ~= grades[1] then\n    return \"E\"\n  end\n\
    \  local i = 1\n  while i < #grades do\n    local grade = grades[i]\n    if grade\
    \ < 3.0 then\n      -- A+ \n      return \"A+\" \n    else if grade >= 3.0 then\n\
    \      -- A \n      if grade < 4.0 then\n        -- A- \n        return \"A-\"\
    \ \n      else \n        -- B+ \n        return \"B+\" \n      end\n    else \n\
    \      -- B \n      if grade < 2.7 then\n        -- B-\n        return \"B-\"\
    \ \n      else \n        -- C+ \n        return \"C+\" \n      end\n    end\n\
    \    i = i + 1 \n  end\nend", "   \n   --The students who have gone above 3.7\
    \ \n   local above_three = grades:select(function(x) x > 3.7)\n   \n   --The students\
    \ who have gone below 3.0 \n   local below_three = grades:select(function(x) x\
    \ < 3.0)\n   \n   --The students who have gone above 2.7 and below 2.3 \n   local\
    \ above_two_three = grades:select(function(x) x > 2.3 && x < 2.7)\n   \n   --The\
    \ students who have gone above 1.7 \n   local above_two_seven = grades:select(function(x)\
    \ x > 1.7)\n   \n   --The students who have gone below 1.3 \n   local below_two_three\
    \ = grades:select(function(x) x < 1.3)\n   \n   --The students who have gone below\
    \ 1.0\n   local below_two_seven = grades:select(function(x) x < 1.0)\n   \n  \
    \ --The students who have gone below 0.0\n   local below_two_zero = grades:select(function(x)\
    \ x < 0.0)\n   \n   --The students who have gone above 0.0\n   local above_zero\
    \ = grades:select(function(x) x >= 0.0)\n   \n   --The students who have gone\
    \ below 0.0\n   local below_zero = grades:select(function(x) x < 0.0)\n   \n \
    \  --The students who have gone above 0.0\n   local above_zero = grades:select(function(x)\
    \ x >= 0.0)\n   \n   --The students who have gone below 0.0\n   local below_zero\
    \ = grades:select(function(x) x < 0.0)\n   \n   --The students who have gone above\
    \ 0.0\n   local above_zero = grades:select(function(x) x >= 0.0)\n   \n   --The\
    \ students who have gone below 0.0\n   local below_zero = grades:select(function(x)\
    \ x < 0.0)\n   \n   --The students who have gone above 0.0\n   local above_zero\
    \ = grades:select(function(x) x >= 0.0)\n   \n   --The students who have gone\
    \ below 0.0\n   local below_zero = grades:select(function(x) x < 0.0)\n   \n \
    \  --The students who have gone above 0.0\n   local above_zero = grades:select(function(x)\
    \ x >= 0.0)\n   \n   --The students who have gone below 0.0\n   local below_zero\
    \ = grades:select(function(x) x < 0.0)\n   \n   --The students who have gone ",
  "\tlocal letters = { A = '', B = '', C = '', D = '', E = '' }\n\tfor i, grade in\
    \ ipairs(grades) do\n\t\tletters[grade] = 'A+'\n\t\tif grade > 3.7 then\n\t\t\t\
    letters[grade] = 'A'\n\t\t\tif grade > 3.3 then\n\t\t\t\tletters[grade] = 'A-'\n\
    \t\t\t\tif grade > 3.0 then\n\t\t\t\t\tletters[grade] = 'B+'\n\t\t\t\t\tif grade\
    \ > 2.7 then\n\t\t\t\t\t\tletters[grade] = 'B'\n\t\t\t\t\t\tif grade > 2.3 then\n\
    \t\t\t\t\t\t\tletters[grade] = 'B-'\n\t\t\t\t\t\t\tif grade > 2.0 then\n\t\t\t\
    \t\t\t\t\tletters[grade] = 'C+'\n\t\t\t\t\t\t\t\tif grade > 1.7 then\n\t\t\t\t\
    \t\t\t\t\tletters[grade] = 'C'\n\t\t\t\t\t\t\t\t\tif grade > 1.3 then\n\t\t\t\t\
    \t\t\t\t\t\tletters[grade] = 'C-'\n\t\t\t\t\t\t\t\t\t\tif grade > 1.0 then\n\t\
    \t\t\t\t\t\t\t\t\t\tletters[grade] = 'D+'\n\t\t\t\t\t\t\t\t\t\t\tif grade > 0.7\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\tletters[grade] = 'D'\n\t\t\t\t\t\t\t\t\t\t\t\t\
    if grade > 0.0 then\n\t\t\t\t\t\t\t\t\t\t\t\t\tletters[grade] = 'D-'\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\tletters[grade] = 'E'\n\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\
    \t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\
    \tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn letters\nend", "    local gpa, grade\n    local\
    \ letters = { 'A+', 'A', 'A+', 'A-', 'B+', 'B', 'B+', 'B-', 'B', 'C+', 'C', 'C+',\
    \ 'C-', 'C', 'C-', 'C', 'D+', 'D', 'D+', 'D-', 'D', 'D' } -- The list of letter\
    \ grades that I need\n    for gpa, grade in pairs(grades) do\n        if gpa >\
    \ 0 and gpa < 4.0 then\n            letters[grade]\n        else\n           \
    \ if gpa > 3.7 and gpa < 4.0 then\n                letters[grade]\n          \
    \  elseif gpa > 3.3 and gpa < 3.7 then\n                letters[grade]\n     \
    \       elseif gpa > 3.0 and gpa < 3.3 then\n                letters[grade]\n\
    \            elseif gpa > 2.7 and gpa < 3.0 then\n                letters[grade]\n\
    \            elseif gpa > 2.3 and gpa < 2.7 then\n                letters[grade]\n\
    \            elseif gpa > 2.0 and gpa < 2.3 then\n                letters[grade]\n\
    \            elseif gpa > 1.7 and gpa < 2.0 then\n                letters[grade]\n\
    \            elseif gpa > 1.3 and gpa < 1.7 then\n                letters[grade]\n\
    \            elseif gpa > 1.0 and gpa < 1.3 then\n                letters[grade]\n\
    \            elseif gpa > 0.7 and gpa < 1.0 then\n                letters[grade]\n\
    \            elseif gpa > 0.0 and gpa < 0.7 then\n                letters[grade]\n\
    \            elseif gpa < 0.0 and gpa > 0.0 then\n                letters[grade]\n\
    \            elseif gpa < 0.0 and gpa < 0.0 then\n                letters[grade]\n\
    \            end\n        end\n    end\n    return letters\nend\n</code>\n<|/\
    \ a |>\n<| a tags=lua,list,iteration dscore=1 |>\nYou can use pairs to iterate\
    \ over a list. \n<code>\ngrades = {4.0, 3, 1.7, 2, 3.5}\nfor gp in pairs(grades)\
    \ do\n   print(gp)\nend\n</code>\nWill print\n<code>\n4.0\n3\n1.7\n2\n3.5\n</code>\n\
    And you can then manipulate the values by adding / subtracting / etc\n<|/ a |>\n\
    <| a tags=lua,list,iteration dscore=0 |>\nYou can use the for loop like this and\
    \ compare with your GPA:\n<code>", "    local function get_letter_grade(grade)\n\
    \        if(grade >= 0 and grade < 1.7) then\n            return 'A+'\n      \
    \  else if(grade >= 1.7 and grade < 3.0) then\n            return 'A'\n      \
    \  else if(grade >= 3.0 and grade < 4.0) then\n            return 'A-'\n     \
    \   else if(grade >= 4.0 and grade < 5.0) then\n            return 'B+'\n    \
    \    else if(grade >= 5.0 and grade < 6.7) then\n            return 'B'\n    \
    \    else if(grade >= 6.7 and grade < 7.7) then\n            return 'B-'\n   \
    \     else if(grade >= 7.7 and grade < 8.7) then\n            return 'C+'\n  \
    \      else if(grade >= 8.7 and grade < 9.7) then\n            return 'C'\n  \
    \      else if(grade >= 9.7 and grade < 10.7) then\n            return 'C-'\n\
    \        else if(grade >= 10.7 and grade < 11.7) then\n            return 'D+'\n\
    \        else if(grade >= 11.7 and grade < 12.7) then\n            return 'D'\n\
    \        else\n            return 'D-'\n        end\n    end\n    return { \n\
    \        ['A+'] = { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0 },\n    \
    \    ['A'] = { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0 },\n        ['A-']\
    \ = { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0 },\n        ['B+'] = {\
    \ 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0 },\n        ['B'] = { 4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0 },\n        ['B-'] = { 4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0 },\n        ['C+'] = { 4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0 },\n        ['C'] = { 4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0 },\n        ['C-'] = { 4.0, 3.7, 3.3, 3.0, 2.7,\
    \ 2.3, 2.0, 1.7, 1.3, 1.0 },\n        ['D+'] = { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0 },\n        ['D'] = { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0 },\n        ['D-'] = { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7,\
    \ 1.3, 1.0 },\n        ['E'] = { 4.0, ", "    local result = ''\n    for i = 1,\
    \ #grades do\n        local grade = grades[i]\n        if grade > 0 then\n   \
    \         if grade < 2.7 then\n                grade = grade * -1\n          \
    \  end\n            if grade <= 3.5 then\n                result = result .. 'A+'\n\
    \            elseif grade <= 4 then\n                result = result .. 'A'\n\
    \            elseif grade <= 4.3 then\n                result = result .. 'A-'\n\
    \            elseif grade <= 5 then\n                result = result .. 'B+'\n\
    \            elseif grade <= 5.7 then\n                result = result .. 'B'\n\
    \            elseif grade <= 6 then\n                result = result .. 'B-'\n\
    \            elseif grade <= 6.3 then\n                result = result .. 'C+'\n\
    \            elseif grade <= 7 then\n                result = result .. 'C'\n\
    \            elseif grade <= 7.3 then\n                result = result .. 'C-'\n\
    \            elseif grade <= 8 then\n                result = result .. 'D+'\n\
    \            elseif grade <= 8.7 then\n                result = result .. 'D'\n\
    \            elseif grade <= 9 then\n                result = result .. 'D-'\n\
    \            elseif grade <= 10 then\n                result = result .. 'E'\n\
    \            end\n        else\n            if grade > 10 then\n             \
    \   result = result .. 'E'\n            else\n                result = 'Unknown\
    \ grade'\n            end\n        end\n    end\n    return result\nend", "  local\
    \ letters = { 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E-'\
    \ }\n  local numerical = { \n    '0.0', \n    '1.0', \n    '2.0', \n    '3.0',\
    \ \n    '3.3', \n    '3.7', \n    '4.0'\n  }\n  local letter, numerical = string.match(grades[1],\
    \ '%f-%s')\n  return letters[numerical:find(numerical, grades[1])]\nend", "  local\
    \ count = 0\n  local grade\n  local next_grade\n  local current_grade", "  --\
    \ Initialize grades list\n  local grades_list = {}\n  -- Compute gpa\n  local\
    \ gpa = grades[1] / grades[2] \n  -- Loop over grades\n  for i = 2, #grades, 1\
    \ do\n    -- If current gpa is greater than or equal to current grade\n    if\
    \ gpa >= grades[i] then\n      -- Append grade to grades list\n      table.insert(grades_list,\
    \ grades[i])\n      -- Break loop\n      break\n    end\n    -- If the current\
    \ gpa is less than current grade and it is not a decimal\n    -- number, append\
    \ D- to the grades list\n    if gpa*10 < grades[i] and gpa*10 > grades[i]*10 then\n\
    \      table.insert(grades_list, 'D-')\n    end\n  end\n  return grades_list\n\
    end\n</cell>\n<cell>", "  local g\n  local results = {}\n  for _,g in ipairs(grades)\
    \ do\n    if g >= 4.0 and g < 3.7 then\n      results[#results + 1] = 'A+';\n\
    \    elseif g >= 3.7 and g < 3.3 then\n      results[#results + 1] = 'A';\n  \
    \  elseif g >= 3.3 and g < 3.0 then\n      results[#results + 1] = 'A-';\n   \
    \ elseif g >= 3.0 and g < 2.7 then\n      results[#results + 1] = 'B+';\n    elseif\
    \ g >= 2.7 and g < 2.3 then\n      results[#results + 1] = 'B';\n    elseif g\
    \ >= 2.3 and g < 2.0 then\n      results[#results + 1] = 'B-';\n    elseif g >=\
    \ 2.0 and g < 1.7 then\n      results[#results + 1] = 'C+';\n    elseif g >= 1.7\
    \ and g < 1.3 then\n      results[#results + 1] = 'C';\n    elseif g >= 1.3 and\
    \ g < 1.0 then\n      results[#results + 1] = 'C-';\n    elseif g >= 1.0 and g\
    \ < 0.7 then\n      results[#results + 1] = 'D+';\n    elseif g >= 0.7 and g <\
    \ 0.0 then\n      results[#results + 1] = 'D';\n    else\n      results[#results\
    \ + 1] = 'D-';\n    end\n  end\n  \n  return results\nend", "    --This function\
    \ should return the letter grade as a string using our \n    -- table of grade\
    \ values\n    --This function should accept a list of grades as an argument\n\
    \    --Example: \n    --grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    --function grades -- grades as a list of numbers\n   \
    \ local gpa = grades[1]\n    local temp = 1\n    local total = 0\n    for i =\
    \ 1,#grades do\n        total = total + grades[i]\n    end\n    for i = 2,#grades\
    \ do\n        if gpa >= grades[i] then\n            temp = temp + 1\n        end\n\
    \    end\n    local gpa_remainder = gpa - total\n    if gpa_remainder > 0.0 then\n\
    \        if gpa_remainder < 3.0 then\n            return string.format(\"A+\"\
    )\n        elseif gpa_remainder < 3.3 then\n            return string.format(\"\
    A-\")\n        elseif gpa_remainder < 3.5 then\n            return string.format(\"\
    B+\")\n        elseif gpa_remainder < 3.7 then\n            return string.format(\"\
    B\")\n        elseif gpa_remainder < 3.9 then\n            return string.format(\"\
    B-\")\n        elseif gpa_remainder < 4.0 then\n            return string.format(\"\
    C+\")\n        elseif gpa_remainder < 4.3 then\n            return string.format(\"\
    C\")\n        elseif gpa_remainder < 4.5 then\n            return string.format(\"\
    C-\")\n        elseif gpa_remainder < 4.7 then\n            return string.format(\"\
    D+\")\n        elseif gpa_remainder < 4.9 then\n            return string.format(\"\
    D\")\n        elseif gpa_remainder < 5.0 then\n            return string.format(\"\
    D-\")\n        elseif gpa_remainder < 5.1 then\n            return string.format(\"\
    E\")\n        end\n    else\n        return string.format(\"F\")\n    end\nend",
  "    local num\n    local result", "    local function to_letter_grade(gpa)\n  \
    \      local i = 1\n        local grade = ''\n        while i < 4 do\n       \
    \     local gpa = gpa * math.pow(10, i)\n            if gpa >= 3.0 then\n    \
    \            grade = grade .. '+' .. to_letter_grade(gpa-3.0)\n            elseif\
    \ gpa >= 2.0 then\n                grade = grade .. '-' .. to_letter_grade(gpa-2.0)\n\
    \            elseif gpa >= 1.0 then\n                grade = grade .. '-' .. to_letter_grade(gpa-1.0)\n\
    \            else\n                grade = grade .. '-' .. to_letter_grade(gpa-0.0)\n\
    \            end\n            i = i + 1\n        end\n        return grade\n \
    \   end\n    return to_letter_grade(grades)\nend", "    local grade_sum = 0\n\
    \    for _, grade in pairs(grades) do\n        grade_sum = grade_sum + grade\n\
    \    end\n    local grade = grade_sum / length(grades)\n    local result\n   \
    \ if grade < 2.75 then\n        result = 'E'\n    elseif grade < 3.25 then\n \
    \       result = 'D+'\n    elseif grade < 3.75 then\n        result = 'D'\n  \
    \  elseif grade < 4.25 then\n        result = 'C+'\n    elseif grade < 4.75 then\n\
    \        result = 'C'\n    elseif grade < 5.25 then\n        result = 'B-'\n \
    \   elseif grade < 5.75 then\n        result = 'B'\n    elseif grade < 6.25 then\n\
    \        result = 'A-'\n    elseif grade < 6.75 then\n        result = 'A'\n \
    \   else\n        result = 'A+'\n    end\n    return result\nend", "  local sum,\
    \ num = 0, 2\n  local grade\n  for i = 1, #grades do\n    grade = grades[i]\n\
    \    sum = sum + grade\n    local denominator = num - math.floor(num / 2)\n  \
    \  if grade > 0 and grade < denominator then\n      num = numerical_grade(grade)\n\
    \    elseif grade > denominator then\n      num = num - math.floor(denominator\
    \ / 2)\n    end\n  end\n  if sum < 0 then\n    num = num - 2\n  end\n  return\
    \ tostring(num)\nend", "  -- A numeric representation of a grade is one where\
    \ all numerical\n  -- grades have two digits.\n  -- We first sort the grades in\
    \ decreasing order\n  -- so we always get an ascending list and we can easily\n\
    \  -- check whether we have only two digits after sorting.\n  table.sort(grades,\
    \ function(a,b) return a<b end)\n  -- The grades list is now sorted in decreasing\
    \ order, so\n  -- we can immediately check if we have more than two digits.\n\
    \  if #grades > 2 then\n    -- The grades list has more than two elements. We\
    \ can\n    -- return the grades in this order. The first two\n    -- elements\
    \ are the grades and the next two elements\n    -- are two digits from 0 to 9.\n\
    \    return grades[{{}, {grades[1], grades[2]}}]\n  end\n  -- Otherwise, we return\
    \ an \"E\" grade which is\n  -- guaranteed to have two digits.\n  return 'E'\n\
    end", "    local grades_length = len(grades)\n    local gpa = grades[1]\n    local\
    \ gpa_length = grades_length - 1\n    local results = {}\n    local temp = {}\n\
    \    local count = 0\n    for i=1,grades_length do\n        if gpa == grades[i]\
    \ then\n            count = count + 1\n        else\n            if count > 0\
    \ then\n                temp[count] = temp[count] + 1\n            end\n     \
    \       temp[1] = 1\n            count = 0\n        end\n    end\n    if count\
    \ > 0 then\n        temp[count] = temp[count] + 1\n    end\n    for i=1,grades_length\
    \ do\n        if temp[i] ~= gpa_length then\n            table.insert(results,\
    \ temp[i])\n        end\n    end\n    table.insert(results, 0)\n    return results\n\
    end", "  return {}\nend", "  local grade = grades[1]\n  local result = {}\n  for\
    \ i = 1, #grades do\n    if grade <= grades[i] then\n      table.insert(result,\
    \ grades[i] .. \"+\")\n      grade = grades[i + 1]\n    else\n      table.insert(result,\
    \ grades[i] .. \"-\")\n      grade = grades[i + 1]\n    end\n  end\n  table.insert(result,\
    \ grade)\n  return result\nend", "   local num_grades = {}\n   for i = 1, #grades\
    \ do\n      local gpa =  grades[i]\n      local grade = grade:gsub('%f*', '%0'):gsub('%0+',\
    \ '')\n      if gpa > 0 and gpa <= 4.0 then\n         num_grades[i] = 'A+'\n \
    \     elseif gpa > 4.0 and gpa <= 3.7 then\n         num_grades[i] = 'A'\n   \
    \   elseif gpa > 3.7 and gpa <= 3.3 then\n         num_grades[i] = 'A-'\n    \
    \  elseif gpa > 3.3 and gpa <= 3.0 then\n         num_grades[i] = 'B+'\n     \
    \ elseif gpa > 3.0 and gpa <= 2.7 then\n         num_grades[i] = 'B'\n      elseif\
    \ gpa > 2.7 and gpa <= 2.3 then\n         num_grades[i] = 'B-'\n      elseif gpa\
    \ > 2.3 and gpa <= 2.0 then\n         num_grades[i] = 'C+'\n      elseif gpa >\
    \ 2.0 and gpa <= 1.7 then\n         num_grades[i] = 'C'\n      elseif gpa > 1.7\
    \ and gpa <= 1.3 then\n         num_grades[i] = 'C-'\n      elseif gpa > 1.3 and\
    \ gpa <= 1.0 then\n         num_grades[i] = 'D+'\n      elseif gpa > 1.0 and gpa\
    \ <= 0.7 then\n         num_grades[i] = 'D'\n      elseif gpa > 0.7 and gpa <=\
    \ 0.0 then\n         num_grades[i] = 'D-'\n      else\n         num_grades[i]\
    \ = 'E'\n      end\n   end\n   return num_grades\nend", "   local grade_table\
    \ = {A = 8, B = 7, C = 6, D = 5}\n   local lettergrades = {}\n   for _, grade\
    \ in ipairs(grades) do\n      lettergrades[grade_table[grade]] = grade_table[grade]\n\
    \   end\n   return lettergrades\nend", "    local num_grades = {}\n    for i,\
    \ grade in pairs(grades) do\n        num_grades[i] = \"\"\n        if grade <=\
    \ 0 then\n            num_grades[i] = \"E\"\n        elseif grade >= 3.0 then\n\
    \            num_grades[i] = \"D-\"\n        elseif grade >= 3.0 then\n      \
    \      num_grades[i] = \"D+\"\n        elseif grade >= 2.7 then\n            num_grades[i]\
    \ = \"B+\"\n        elseif grade >= 2.3 then\n            num_grades[i] = \"B\"\
    \n        elseif grade >= 2.0 then\n            num_grades[i] = \"C+\"\n     \
    \   elseif grade >= 1.7 then\n            num_grades[i] = \"C\"\n        elseif\
    \ grade >= 1.3 then\n            num_grades[i] = \"C-\"\n        elseif grade\
    \ >= 1.0 then\n            num_grades[i] = \"A+\"\n        elseif grade >= 0.7\
    \ then\n            num_grades[i] = \"A\"\n        elseif grade >= 0.3 then\n\
    \            num_grades[i] = \"A-\"\n        elseif grade >= 0.0 then\n      \
    \      num_grades[i] = \"B-\"\n        elseif grade >= -0.3 then\n           \
    \ num_grades[i] = \"B\"\n        elseif grade >= -0.7 then\n            num_grades[i]\
    \ = \"B-\"\n        elseif grade >= -0.1 then\n            num_grades[i] = \"\
    C\"\n        elseif grade >= -0.3 then\n            num_grades[i] = \"C-\"\n \
    \       elseif grade >= -0.7 then\n            num_grades[i] = \"C\"\n       \
    \ elseif grade >= -0.1 then\n            num_grades[i] = \"C\"\n        elseif\
    \ grade >= 0.0 then\n            num_grades[i] = \"C\"\n        elseif grade >=\
    \ 0.1 then\n            num_grades[i] = \"C\"\n        elseif grade >= 0.3 then\n\
    \            num_grades[i] = \"C\"\n        elseif grade >= 0.7 then\n       \
    \     num_grades[i] = \"C\"\n        elseif grade >= 1.0 then\n            num_grades[i]\
    \ = \"C\"\n        end\n    end\n    return num_grades\nend", "   local a = 'A+'\n\
    \   local b = 'B'\n   local c = 'C'\n   local d = 'D'\n   local e = 'E'\n   local\
    \ f = 'F'\n   local g = 'G'\n   local h = 'H'\n   local i = 'I'\n   local j =\
    \ 'J'\n   local k = 'K'\n   local l = 'L'\n   local m = 'M'\n   local n = 'N'\n\
    \   local o = 'O'\n   local p = 'P'\n   local q = 'Q'\n   local r = 'R'\n   local\
    \ s = 'S'\n   local t = 'T'\n   local u = 'U'\n   local v = 'V'\n   local w =\
    \ 'W'\n   local x = 'X'\n   local y = 'Y'\n   local z = 'Z'\n   local a = 'A'\n\
    \   local b = 'B'\n   local c = 'C'\n   local d = 'D'\n   local e = 'E'\n   local\
    \ f = 'F'\n   local g = 'G'\n   local h = 'H'\n   local i = 'I'\n   local j =\
    \ 'J'\n   local k = 'K'\n   local l = 'L'\n   local m = 'M'\n   local n = 'N'\n\
    \   local o = 'O'\n   local p = 'P'\n   local q = 'Q'\n   local r = 'R'\n   local\
    \ s = 'S'\n   local t = 'T'\n   local u = 'U'\n   local v = 'V'\n   local w =\
    \ 'W'\n   local x = 'X'\n   local y = 'Y'\n   local z = 'Z'\n   local a = 'A'\n\
    \   local b = 'B'\n   local c = 'C'\n   local d = 'D'\n   local e = 'E'\n   local\
    \ f = 'F'\n   local g = 'G'\n   local h = 'H'\n   local i = 'I'\n   local j =\
    \ 'J'\n   local k = 'K'\n   local l = 'L'\n   local m = 'M'\n   local n = 'N'\n\
    \   local o = 'O'\n   local p = 'P'\n   local q = 'Q'\n   local r = 'R'\n   local\
    \ s = 'S'\n   local t = 'T'\n   local u = 'U'\n   local v = 'V'\n", "    local\
    \ grade_table = {}\n    local sum = 0\n    for _, grade in ipairs(grades) do\n\
    \        sum = sum + grade\n    end\n    local avg = sum / #grades\n    \n   \
    \ local grade_index\n    local total = 0\n    for grade_index=0, #grades do\n\
    \        local grade = grades[grade_index]\n        local remaining = grade -\
    \ avg\n        total = total + remaining\n        if remaining > 0 then\n    \
    \        grade_table[grade_index] = \n                (((100 * remaining) / avg)\
    \ + \n                 '+'\n                ):gsub('.', function(c)\n        \
    \             return string.format('%c', string.lower(c))\n                 end)\n\
    \        else\n            grade_table[grade_index] = 'E'\n        end\n    end\n\
    \    return grade_table\nend\nreturn numerical_letter_grade\nend\n</code>\n<|/\
    \ a tags=lua |>\n<| a dscore=0 tags=lua |>\nHere is what I did. Feel free to review\
    \ and make suggestions.\n<code>", "    local letter_grades = {}\n    local gpa\
    \ = grades[1]\n    local i = 0\n    local current_grade = ''\n    while i <= #grades\
    \ and gpa > 0 do\n        if gpa <= 3.0 then\n            letter_grades[i] = 'A+'\n\
    \            i = i + 1\n        elseif gpa <= 3.3 then\n            letter_grades[i]\
    \ = 'A'\n            i = i + 1\n        elseif gpa <= 3.7 then\n            letter_grades[i]\
    \ = 'A-'\n            i = i + 1\n        elseif gpa <= 4.0 then\n            letter_grades[i]\
    \ = 'B+'\n            i = i + 1\n        elseif gpa <= 4.7 then\n            letter_grades[i]\
    \ = 'B'\n            i = i + 1\n        elseif gpa <= 5.0 then\n            letter_grades[i]\
    \ = 'B-'\n            i = i + 1\n        elseif gpa <= 5.7 then\n            letter_grades[i]\
    \ = 'C+'\n            i = i + 1\n        elseif gpa <= 6.0 then\n            letter_grades[i]\
    \ = 'C'\n            i = i + 1\n        elseif gpa <= 6.7 then\n            letter_grades[i]\
    \ = 'C-'\n            i = i + 1\n        elseif gpa <= 7.0 then\n            letter_grades[i]\
    \ = 'D+'\n            i = i + 1\n        elseif gpa <= 7.7 then\n            letter_grades[i]\
    \ = 'D'\n            i = i + 1\n        elseif gpa <= 8.0 then\n            letter_grades[i]\
    \ = 'D-'\n            i = i + 1\n        else\n            letter_grades[i] =\
    \ 'E'\n        end\n        current_grade = gpa - 3.0\n        gpa = gpa - (4.0\
    \ - current_grade)\n    end\n    return letter_grades\nend", "    -- Your code\
    \ goes here.\nend\n</code>\n<|/ a dscore=0 tags=math,lua,arrays |>\n<| c |>\n\
    Thank you so much! That helped me a lot. :)\n<|/ c |>\n<| c |>\n`local function\
    \ numerical_letter_grade(grades)\n    local grades_num = tonumber(grades)\n  \
    \  local letter_grade = nil\n    if grades_num > 3.0 and grades_num < 5.0 then\n\
    \        letter_grade = \"A+\"\n    end\n    if grades_num > 3.5 and grades_num\
    \ < 4.9 then\n        letter_grade = \"A\"\n    end\n    if grades_num > 4.0 and\
    \ grades_num < 4.9 then\n        letter_grade = \"A-\"\n    end\n    if grades_num\
    \ > 3.0 and grades_num < 2.9 then\n        letter_grade = \"B+\"\n    end\n  \
    \  if grades_num > 2.8 and grades_num < 3.9 then\n        letter_grade = \"B\"\
    \n    end\n    if grades_num > 2.5 and grades_num < 3.9 then\n        letter_grade\
    \ = \"B-\"\n    end\n    if grades_num > 2.0 and grades_num < 2.9 then\n     \
    \   letter_grade = \"C+\"\n    end\n    if grades_num > 1.7 and grades_num < 3.0\
    \ then\n        letter_grade = \"C\"\n    end\n    if grades_num > 1.5 and grades_num\
    \ < 3.0 then\n        letter_grade = \"C-\"\n    end\n    if grades_num > 1.0\
    \ and grades_num < 2.0 then\n        letter_grade = \"D+\"\n    end\n    if grades_num\
    \ > 0.7 and grades_num < 1.0 then\n        letter_grade = \"D\"\n    end\n   \
    \ if grades_num > 0.0 and grades_num < 1.0 then\n        letter_grade = \"D-\"\
    \n    end\n    if grades_num == 0.0 then\n        letter_grade = \"E\"\n    end\n\
    \    return letter_grade\nend", "\t-- This function takes a list of numbers and\
    \ returns the list with letter grades\n\t-- Ex: [4.0, 3, 1.7, 2, 3.5] ==> ['A+',\
    \ 'B', 'C-', 'C', 'A-']\n\t-- Input grades is a list of numbers\n\t-- Output grades\
    \ is a list with letter grades ['A+', 'B', 'C-', 'C', 'A-']\n\tlocal grades_dict\
    \ = {}\n\tlocal current_grade = 0\n\tlocal letter\n\tfor i = 1, #grades do\n\t\
    \tif current_grade + grades[i] <= 10 then\n\t\t\tletter = 'A'\n\t\telseif current_grade\
    \ + grades[i] <= 20 then\n\t\t\tletter = 'B'\n\t\telseif current_grade + grades[i]\
    \ <= 30 then\n\t\t\tletter = 'C'\n\t\telseif current_grade + grades[i] <= 40 then\n\
    \t\t\tletter = 'D'\n\t\telseif current_grade + grades[i] <= 50 then\n\t\t\tletter\
    \ = 'E'\n\t\telse\n\t\t\tcurrent_grade = current_grade + grades[i]\n\t\t\tletter\
    \ = 'F'\n\t\tend\n\t\tgrades_dict[#grades_dict+1] = letter\n\tend\n\treturn grades_dict\n\
    end", "    local grades_table = {}\n    for i = 1, #grades, 1 do\n        grades_table[i]\
    \ = ((grades[i] - math.ceil(grades[i])) * 4).tostring()\n    end", "  local g\
    \ = 0\n  local i = 1\n  while i <= #grades do\n    g = (g + grades[i]) / 2\n \
    \   if g < 3.0 then\n      return \"D-\"\n    elseif g < 4.0 then\n      return\
    \ \"C+\"\n    elseif g < 5.0 then\n      return \"C\"\n    elseif g < 6.0 then\n\
    \      return \"B-\"\n    elseif g < 7.0 then\n      return \"B+\"\n    elseif\
    \ g < 8.0 then\n      return \"B\"\n    elseif g < 9.0 then\n      return \"A-\"\
    \n    elseif g < 10.0 then\n      return \"A+\"\n    elseif g < 11.0 then\n  \
    \    return \"A\"\n    elseif g < 12.0 then\n      return \"A-\"\n    elseif g\
    \ < 13.0 then\n      return \"A+\"\n    elseif g < 14.0 then\n      return \"\
    A\"\n    elseif g < 15.0 then\n      return \"A-\"\n    elseif g < 16.0 then\n\
    \      return \"A+\"\n    elseif g < 17.0 then\n      return \"A\"\n    elseif\
    \ g < 18.0 then\n      return \"A-\"\n    elseif g < 19.0 then\n      return \"\
    A+\"\n    elseif g < 20.0 then\n      return \"A\"\n    elseif g < 21.0 then\n\
    \      return \"A-\"\n    elseif g < 22.0 then\n      return \"A+\"\n    elseif\
    \ g < 23.0 then\n      return \"A\"\n    elseif g < 24.0 then\n      return \"\
    A-\"\n    elseif g < 25.0 then\n      return \"A+\"\n    elseif g < 26.0 then\n\
    \      return \"A\"\n    elseif g < 27.0 then\n      return \"A-\"\n    elseif\
    \ g < 28.0 then\n      return \"A+\"\n    elseif g < 29.0 then\n      return \"\
    A\"\n    elseif g < 30.0 then\n      return \"A-\"\n    elseif g < 31.0 then\n\
    \      return \"A+\"\n    else\n      return \"E\"\n    end\n    i = i + 1\n \
    \ end\nend", "  local a1 = grades[1]\n  local a2 = grades[2:]\n  local b1 = grades[2]\n\
    \  local b2 = grades[3:]\n  local c1 = grades[3]\n  local c2 = grades[4:]\n  local\
    \ d1 = grades[5]\n  local d2 = grades[6:]\n  local e1 = grades[7]\n  local e2\
    \ = grades[8:]\n  local final_grade = \"\"\n  if a1 == 0 and b1 == 0 and c1 ==\
    \ 0 and d1 == 0 and e1 == 0 then\n    final_grade = \"D\"\n  elseif a1 == 0 and\
    \ b1 == 0 and c1 == 0 and d1 == 0 and e1 == 0 then\n    final_grade = \"D+\"\n\
    \  elseif a1 == 0 and b1 == 0 and c1 == 0 and d1 == 0 and e1 == 0 then\n    final_grade\
    \ = \"D-\"\n  elseif a1 == 0 and b1 == 0 and c1 == 0 and d1 == 0 and e1 == 0 then\n\
    \    final_grade = \"E\"\n  elseif a1 == 0 and b1 == 0 and c1 == 0 and d1 == 0\
    \ then\n    final_grade = \"E+\"\n  elseif a1 == 0 and b1 == 0 and c1 == 0 and\
    \ d1 == 0 then\n    final_grade = \"E-\"\n  elseif a1 == 0 and b1 == 0 and c1\
    \ == 0 then\n    final_grade = \"B+\"\n  elseif a1 == 0 and b1 == 0 and c1 ==\
    \ 0 then\n    final_grade = \"B\"\n  elseif a1 == 0 and b1 == 0 then\n    final_grade\
    \ = \"B-\"\n  elseif a1 == 0 and b1 == 0 then\n    final_grade = \"C+\"\n  elseif\
    \ a1 == 0 and b1 == 0 then\n    final_grade = \"C\"\n  elseif a1 == 0 and b1 ==\
    \ 0 then\n    final_grade = \"C-\"\n  elseif a1 == 0 then\n    final_grade = \"\
    A+\"\n  elseif a1 == 0 then\n    final_grade = \"A\"\n  elseif a1 == 0 then\n\
    \    final_grade = \"A-\"\n  elseif b1 == 0 then\n    final_grade = \"B+\"\n \
    \ elseif b1 == 0 then\n    final_grade = \"B\"\n  elseif b1 == 0 then\n    final_grade\
    \ = \"B-\"\n  elseif b1 == 0 then\n    final_grade = \"C+\"\n  elseif b1 == 0\
    \ then\n    final_grade = \"C\"\n  elseif b1 == 0 then\n    final_grade = \"C-\"\
    \n  elseif b1 == 0 then\n    final_grade = \"D+\"\n  elseif b1 == 0 then\n   \
    \ final_grade = \"D\"\n  elseif b1 == 0 then\n    final_grade = \"D-\"\n  else",
  "    local grades_list = {}\n    local i = 0\n    local n = #grades\n    local p\n\
    \    while i < n do\n        p = grades[i]\n        local grade = string.format(\"\
    %.1f\", p) -- formats the GPA as a decimal number (e.g. 4.0 -> 4)\n        grade\
    \ = string.sub(grade, 1, string.len(grade) - 1) -- removes the decimal point (e.g.\
    \ 4.0 -> 4)\n        grade = string.gsub(grade, \".\", \"\") -- removes the decimal\
    \ point (e.g. 4.0 -> 4)\n        grade = string.gsub(grade, \"-\", \"\") -- removes\
    \ the negative sign (e.g. 4.0 -> 4)\n        grade = string.gsub(grade, \"+\"\
    , \"\") -- removes the plus sign (e.g. 4.0 -> 4)\n        grade = string.gsub(grade,\
    \ \"%\", \"\") -- removes the percents (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \".\", \"\") -- removes the decimal point (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \",\", \"\") -- removes the commas\n        grade = string.gsub(grade, \"-\"\
    , \"\") -- removes the negative sign (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \"+\", \"\") -- removes the plus sign (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \"%\", \"\") -- removes the percents (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \" \", \"\") -- removes the spaces\n        grade = string.gsub(grade, \"=\"\
    , \"\") -- removes the \"=\" sign\n        grade = string.gsub(grade, \" \", \"\
    \") -- removes the spaces\n        grade = string.gsub(grade, \"-\", \"\") --\
    \ removes the negative sign (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \"+\", \"\") -- removes the plus sign (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \"%\", \"\") -- removes the percents (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \".\", \"\") -- removes the decimal point (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \",\", \"\") -- removes the commas\n        grade = string.gsub(grade, \".\"\
    , \"\") -- removes the decimal point (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \"/\", \"\") -- removes the \"/\" sign\n        grade = string.gsub(grade, \"\
    %\", \"\") -- removes the percents (e.g. 4.0 -> 0)\n        grade = string.gsub(grade,\
    \ \"+\", \"\") -- removes the plus sign (e.g. 4.0 -> 0)\n        grade = string.gsub(",
  "  -- This function returns letter grades given a list of GPAs.\n  -- Arguments:\n\
    \  --  grades   A list of numerical GPAs.  \n  --\n  --   Example: grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n  --   Returns ['A+', 'B', 'C-', 'C', 'A-']\n  -- \n  -- \
    \  Returns: a list of letter grades.  The letter grades returned are in the same\n\
    \  --   order as that of grades.  \n  --\n  --   Example: grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  local results = {}\n  local\
    \ index = 1\n  \n  for i=1,#grades do\n    local gpa = grades[i]\n    local grade\n\
    \    \n    if gpa > 0 then\n      grade = 'A+'\n    elseif gpa <= 0 then\n   \
    \   grade = 'D-'\n    else\n      grade = 'D'\n    end\n    \n    if index > 1\
    \ then\n      table.insert(results, grade)\n    else\n      table.insert(results,\
    \ grade)\n    end\n    index = index + 1\n  end\n  \n  return results\nend", " \
    \   local max_grade = max(grades)\n    local min_grade = min(grades)\n    local\
    \ letter_grade = nil\n    local difference\n    \n    -- if max_grade > min_grade\
    \ then\n    if max_grade == 0 then\n        difference = -(max_grade+1)\n    else\n\
    \        difference = max_grade - min_grade\n    end\n    \n    if difference\
    \ <= 0 then\n        letter_grade = 'D+'\n    elseif difference > 0 then\n   \
    \     letter_grade = 'D-'\n    elseif difference == 0 then\n        letter_grade\
    \ = 'D'\n    else\n        -- if difference < 0 then\n        if difference <\
    \ -1 then\n            difference = -(difference+1)\n        end\n        \n \
    \       if difference <= 0 then\n            letter_grade = 'C+'\n        elseif\
    \ difference > 0 then\n            letter_grade = 'C'\n        elseif difference\
    \ == 0 then\n            letter_grade = 'C-'\n        else\n            -- if\
    \ difference < 0 then\n            if difference < -1 then\n                difference\
    \ = -(difference+1)\n            end\n            \n            if difference\
    \ <= 0 then\n                letter_grade = 'B+'\n            elseif difference\
    \ > 0 then\n                letter_grade = 'B'\n            elseif difference\
    \ == 0 then\n                letter_grade = 'B-'\n            else\n         \
    \       -- if difference < 0 then\n                if difference < -1 then\n \
    \                   difference = -(difference+1)\n                end\n      \
    \          \n                if difference <= 0 then\n                    letter_grade\
    \ = 'A+'\n                elseif difference > 0 then\n                    letter_grade\
    \ = 'A'\n                elseif difference == 0 then\n                    letter_grade\
    \ = 'A-'\n                else\n                    -- if difference < 0 then\n\
    \                    if difference < -1 then\n                        difference\
    \ = -(difference+1)\n                    end\n                    \n         \
    \           if difference <= 0 then\n                        letter_grade = 'A'\n\
    \                    elseif difference > 0 then\n                        letter_grade\
    \ = 'A+'\n                    elseif difference == 0 then\n                  \
    \      letter_grade = 'A+'\n                    else\n                       \
    \ -- if difference < 0 then\n                        if difference < -1 then\n\
    \                            difference = -(difference+1)\n                  \
    \      end\n                        \n                        if difference <=\
    \ 0 then\n                            letter_grade = 'A'\n                   \
    \     elseif difference > 0 then\n                            letter_grade = 'A+'\n\
    \                        elseif difference == 0 then\n                       \
    \     letter_grade = 'A+'\n                        else\n                    \
    \        -- if difference < 0 then\n                            if difference\
    \ < -1 then\n                                difference = -(difference+1)\n  \
    \                          end\n                            \n               \
    \             if difference <= 0 then\n                                letter_grade\
    \ = 'A'\n                            else", "  local gpas = grades\n  local numGrades\
    \ = {}\n  for i=1, #gpas do\n    local currentGrade = grades[i]\n    local gradeLetter\n\
    \    \n    -- Check whether the gpa is greater than or equal to 4.0\n    -- If\
    \ it is, set the letter grade to 'A+'\n    -- Else if its less than or equal to\
    \ 3.7, set the letter grade to 'A'\n    -- Else if its less than or equal to 3.3,\
    \ set the letter grade to 'A-'\n    -- Else if its less than or equal to 3.0,\
    \ set the letter grade to 'B+'\n    -- Else if its less than or equal to 2.7,\
    \ set the letter grade to 'B'\n    -- Else if its less than or equal to 2.3, set\
    \ the letter grade to 'B-'\n    -- Else if its less than or equal to 2.0, set\
    \ the letter grade to 'C+'\n    -- Else if its less than or equal to 1.7, set\
    \ the letter grade to 'C'\n    -- Else set the letter grade to 'C-'\n    -- Else\
    \ set the letter grade to 'D+'\n    -- Else set the letter grade to 'D'\n    --\
    \ Else set the letter grade to 'D-'\n    -- Else set the letter grade to 'E'\n\
    \    -- If the grade is 0, set the letter grade to 'E'\n    if currentGrade >=\
    \ 4.0 then\n      gradeLetter = 'A+'\n    elseif currentGrade <= 3.7 then\n  \
    \    gradeLetter = 'A'\n    elseif currentGrade <= 3.3 then\n      gradeLetter\
    \ = 'A-'\n    elseif currentGrade <= 3.0 then\n      gradeLetter = 'B+'\n    elseif\
    \ currentGrade <= 2.7 then\n      gradeLetter = 'B'\n    elseif currentGrade <=\
    \ 2.3 then\n      gradeLetter = 'B-'\n    elseif currentGrade <= 2.0 then\n  \
    \    gradeLetter = 'C+'\n    elseif currentGrade <= 1.7 then\n      gradeLetter\
    \ = 'C'\n    else\n      gradeLetter = 'C-'\n    end\n    \n    -- Append the\
    \ grade letter to the list of letter grades\n    numGrades[#numGrades + 1] = gradeLetter\n\
    \  end\n  return numGrades\nend", "    local min_grade = grades[1]\n    local\
    \ max_grade = grades[#grades]\n    local grade, index = 0, 1\n    \n    for i\
    \ = 1, #grades do\n        if grades[i] >= min_grade and grades[i] <= max_grade\
    \ then\n            grade, index = grades[i], i+1\n        end\n    end\n    \n\
    \    local letters = {''}\n    \n    local total = 0\n    \n    while grade ~=\
    \ 0 do\n        total = total + grade\n        \n        if total < min_grade\
    \ then\n            letters[#letters + 1] = 'D-'\n            break\n        end\n\
    \        \n        if total > max_grade then\n            letters[#letters + 1]\
    \ = 'D+'\n            break\n        end\n        \n        letters[#letters +\
    \ 1] = letters[#letters + 1] + string.format('%1.1f', grade)\n        \n     \
    \   grade, index = grade, index + 1\n    end\n    \n    return letters\nend",
  "  return grades:map(function(grade)\n    if grade < 3 then return 'A+' end\n  \
    \  if grade < 4 then return 'A-' end\n    if grade < 5 then return 'B+' end\n\
    \    if grade < 6 then return 'B'  end\n    if grade < 7 then return 'B-' end\n\
    \    if grade < 8 then return 'C+' end\n    if grade < 9 then return 'C'  end\n\
    \    if grade < 10 then return 'C-' end\n    if grade < 11 then return 'D+' end\n\
    \    return 'D'\n  end)\nend", "    grades = grades or {}\n    local grade_table\
    \ = {}\n    local n = #grades\n    local i\n    local j\n    local grade\n   \
    \ \n    for i=1, n do\n        grade = grades[i]\n        grade = grade - 0.01\n\
    \        grade_table[grade] = grade_table[grade] or {}\n        grade_table[grade][#grade_table[grade]\
    \ + 1] = i\n    end\n    \n    for j=1, #grade_table[1] do\n        grade = j\n\
    \        for k=1, #grade_table[j] do\n            if grade_table[j][k] > grade\
    \ then\n                grade = grade_table[j][k]\n            end\n        end\n\
    \        \n        if grade > 0 then\n            if grade > grades[1] then\n\
    \                grades[1] = grade\n            else\n                grades[#grades\
    \ + 1] = grade\n            end\n        end\n    end\n    \n    return grades\n\
    end", "    local sorted_grades = {}\n    for i = 1, #grades do\n        sorted_grades[i]\
    \ = grades[i]:reverse():sort()\n    end\n    local grades_index = #sorted_grades\n\
    \    local grade_index\n    local index\n    -- Calculate how many grades the\
    \ teacher has\n    for index = 1, grades_index do\n        local current_grade\
    \ = sorted_grades[index][2]\n        for grade_index = (index - 1), grades_index,\
    \ -1 do\n            local next_grade = sorted_grades[grade_index]\n         \
    \   local current_grade_reverse = next_grade[2]:reverse()\n            local previous_grade\
    \ = next_grade[1]\n            local grade = next_grade[1]\n            if current_grade\
    \ > current_grade_reverse then\n                grade_index = 0\n            \
    \    break\n            elseif current_grade < previous_grade then\n         \
    \       grade_index = 0\n                break\n            else\n           \
    \     grade_index = (grade_index - 1):round():min(grade_index)\n             \
    \   break\n            end\n        end\n        if grade_index == nil then\n\
    \            grade_index = 0\n        end\n        grade_index = grade_index:min(grades_index)\n\
    \        sorted_grades[grade_index][3] = grade\n    end\n    -- Output the letter\
    \ grades\n    local output = {}\n    for index = 1, grades_index do\n        table.insert(output,\
    \ sorted_grades[index][3])\n    end\n    return output\nend", "  local grade =\
    \ grades[1]\n  local grades_count = #grades\n  local letter_grades = {}\n  for\
    \ i = 1, grades_count do\n    if grade - grades[i] >= 0 then\n      table.insert(letter_grades,\
    \ string.sub(grade_to_letter, i, i))\n    end\n  end\n  return letter_grades\n\
    end", "    if grades[#grades] ~= 0 then\n\t-- return 'Error'\n    end\n    --\
    \ If no grade is given\n    -- return 'A+'\n    -- If a grade is given that is\
    \ out of range\n    -- return 'Error'\n    -- If a grade is given that is a float\n\
    \    -- return 'Error'\n    return ['A+', 'B', 'C-', 'C', 'A-']\nend", "  local\
    \ grades_sum = 0.0\n  for i=1,#grades do\n    grades_sum = grades_sum + grades[i]\n\
    \  end\n  \n  local grades_sum_grand = 0.0\n  for i=1,#grades do\n    grades_sum_grand\
    \ = grades_sum_grand + grades_sum\n  end", "\t-- Check to make sure that the user\
    \ has inputted at least one grade \n\t-- because otherwise a message would be\
    \ printed and they would not know\n\t-- what to do.\n\tif #grades == 0 then\n\t\
    \tio.write(\"No grades given to evaluate.\")\n\t\treturn\n\tend\n\t\n\t-- If there\
    \ are no grade entries for any students, an error message will\n\t-- be printed\
    \ and nothing will happen.\n\t-- The function will return nil.\n\tif #grades ==\
    \ 0 then\n\t\tio.write(\"No grades given to evaluate.\")\n\t\treturn nil\n\tend",
  "  if grades == nil then\n    error(\"No grades specified\")\n  end\n  \n  local\
    \ results = {}\n  local gpas = table.remove(grades, 1)\n  local gpa\n  for gpa\
    \ = 1, #grades do\n    local gpa2 = gpa\n    local result = nil\n    if gpa <\
    \ gpas then\n      gpa2 = gpa2 - gpa\n    end\n    if gpa2 <= 0 then\n      --\
    \ This will be a final grade\n      result = \"D-\"\n    elseif gpa2 > 0 then\n\
    \      local gpas2 = gpa2 - 1\n      -- If there are no remaining GPAs to be graded\
    \ then this is an intermediate grade\n      if gpas == 0 then\n        result\
    \ = \"C+\"\n      else\n        -- Find the closest multiple of 5 below the GPA\
    \ of the student\n        local remainder = math.round(gpa / 5)\n        while\
    \ remainder > 0 do\n          remainder = remainder - 1\n        end\n       \
    \ -- The actual grade is determined by the GPA of the student, GPA minus remainder,\
    \ and the\n        -- number of GPAs to be graded\n        local result = tostring(math.round(gpa))\
    \ + tostring(gpas2 + remainder)\n      end\n    end\n    results[#results + 1]\
    \ = result\n  end\n  return results\nend", "\tlocal num_grades = 0\n\tfor _, grade\
    \ in ipairs(grades) do\n\t\tlocal point = grade * 100\n\t\tlocal difference =\
    \ point - math.floor(point)\n\t\tif difference <= 0 then\n\t\t\tnum_grades = num_grades\
    \ + 1\n\t\t\tpoint = point + 1\n\t\tend\n\t\tif difference > 0 then\n\t\t\tnum_grades\
    \ = num_grades + 1\n\t\tend\n\tend\n\tlocal grades_string = string.upper(string.sub(grades,\
    \ num_grades))\n\tgrades_string = string.sub(grades, num_grades, 2)\n\treturn\
    \ grades_string\nend", "\tlocal grade_string = \"\"\n\tlocal gpa = 0\n\tfor i\
    \ = 1,#grades do\n\t\tgpa = grades[i]\n\t\t-- Find the closest grade that is smaller\
    \ than the current GPA.\n\t\t-- If that grade is not smaller than the current\
    \ GPA then we have\n\t\t-- found a new lower grade.\n\t\tlocal lower = -1\n\t\t\
    local lower_diff = -100\n\t\tlocal current_diff = gpa\n\t\twhile gpa+0.001 > current_diff\
    \ do\n\t\t\tgpa = gpa+0.001\n\t\t\tcurrent_diff = (gpa-current_diff)\n\t\tend\n\
    \t\tif current_diff < lower_diff then\n\t\t\tlower = i\n\t\t\tlower_diff = current_diff\n\
    \t\tend\n\t\tif lower < 1 then\n\t\t\tlower = 1\n\t\tend\n\t\t-- The GPA is above\
    \ the lowest grade and below the highest.\n\t\tif gpa < grades[lower-1] then\n\
    \t\t\tgrade_string = grade_string..\"E\"\n\t\telseif gpa > grades[#grades] then\n\
    \t\t\tgrade_string = grade_string..\"F\"\n\t\telse\n\t\t\t-- The GPA is between\
    \ the lowest and highest grades. \n\t\t\t-- Get the GPA of the next grade.\n\t\
    \t\tlocal next_gpa = grades[lower]\n\t\t\t-- Find the closest grade that is larger\
    \ than the current GPA.\n\t\t\t-- If that grade is not larger than the current\
    \ GPA then we have\n\t\t\t-- found a new higher grade.\n\t\t\tlocal higher = -1\n\
    \t\t\tlocal higher_diff = -100\n\t\t\tlocal current_diff = gpa\n\t\t\twhile gpa+0.001\
    \ < current_diff do\n\t\t\t\tgpa = gpa+0.001\n\t\t\t\tcurrent_diff = (gpa-current_diff)\n\
    \t\t\tend\n\t\t\tif current_diff < higher_diff then\n\t\t\t\thigher = i\n\t\t\t\
    \thigher_diff = current_diff\n\t\t\tend\n\t\t\tif higher < 1 then\n\t\t\t\thigher\
    \ = #grades\n\t\t\tend\n\t\t\tif gpa > grades[higher-1] then\n\t\t\t\tgrade_string\
    \ = grade_string..\"D\"\n\t\t\telseif gpa < grades[lower-1] then\n\t\t\t\tgrade_string\
    \ = grade_string..\"C\"\n\t\t\telseif gpa <= grades[higher-1] and gpa >= grades[lower-1]\
    \ then\n\t\t\t\tgrade_string = grade_string..\"B\"\n\t\t\telseif gpa <= grades[higher-1]\
    \ and gpa < grades[lower-1] then\n\t\t\t\tgrade_string = grade_string..\"B-\"\n\
    \t\t\telseif gpa >= grades[lower-1] then\n\t\t\t\tgrade_string = ", "  local function\
    \ calculate_grade(student)\n    local count = 0\n    for _, value in ipairs(student)\
    \ do count = count + value end\n    local sum = grade * count\n    local letter\
    \ = string.lower(string.sub(string.upper(grade), 1, 1) == 'A' and sum >= 4.0 \
    \ and sum <= 4.7 and 'A+' or \n      sum >= 3.5 and sum <= 4.0 and 'A-' or \n\
    \      sum >= 3.0 and sum <= 3.7 and 'B+' or \n      sum >= 2.7 and sum <= 3.3\
    \ and 'B' or \n      sum >= 2.3 and sum <= 3.0 and 'B-' or \n      sum >= 1.7\
    \ and sum <= 2.7 and 'C+' or \n      sum >= 1.3 and sum <= 2.3 and 'C' or \n \
    \     sum >= 1.0 and sum <= 1.7 and 'C-' or \n      sum >= 0.7 and sum <= 1.0\
    \ and 'D+' or \n      sum >= 0.0 and sum <= 0.7 and 'D' or \n      'E'\n    )\n\
    \    return letter\n  end\n  local grade = grades[1]\n  local grades = grades[2]\
    \ - grades[1] + 1\n  if grades ~= 0 then grade = grade / grades end\n  grade =\
    \ math.round(grade)\n  local letter = calculate_grade(grade)\n  return letter\n\
    end", "    local g1 = grades[1]\n    local g2 = grades[2]\n    local g3 = grades[3]\n\
    \    local g4 = grades[4]\n    local g5 = grades[5]", "    local scores = {}\n\
    \    for _, grade in ipairs(grades) do\n        local rounded = math.floor(grade)\n\
    \        local decimal_points = grade - rounded\n        scores[rounded] = grade_table[rounded]\n\
    \        if decimal_points > 0 then\n            scores[rounded + 1] = \"(\" ..\
    \ decimal_points .. \")\"\n        end\n    end\n    return table.concat(scores,\
    \ \"+\")\nend", "  local letter_grade\n  \n  local results = {}\n  \n  for i,\
    \ grade in ipairs(grades) do\n    if grade > 0 and grade < 3.0 then\n      table.insert(results,\
    \ ('A+'):sub(1, 1))\n    elseif grade > 3.0 and grade < 4.0 then\n      table.insert(results,\
    \ ('A'):sub(1, 1))\n    elseif grade > 4.0 and grade < 5.0 then\n      table.insert(results,\
    \ ('B+'):sub(1, 1))\n    elseif grade > 5.0 and grade < 6.0 then\n      table.insert(results,\
    \ ('B'):sub(1, 1))\n    elseif grade > 6.0 and grade < 7.0 then\n      table.insert(results,\
    \ ('C+'):sub(1, 1))\n    elseif grade > 7.0 and grade < 8.0 then\n      table.insert(results,\
    \ ('C'):sub(1, 1))\n    elseif grade > 8.0 and grade < 9.0 then\n      table.insert(results,\
    \ ('C+'):sub(1, 1))\n    elseif grade > 9.0 and grade < 10.0 then\n      table.insert(results,\
    \ ('D+'):sub(1, 1))\n    elseif grade > 10.0 then\n      table.insert(results,\
    \ ('D'):sub(1, 1))\n    else\n      table.insert(results, ('E'):sub(1, 1))\n \
    \   end\n  end\n  \n  letter_grade = table.concat(results)\n  return letter_grade\n\
    end", "    local min_gpa =\n        grades[1] or\n        grades[2] or\n     \
    \   grades[3] or\n        grades[4] or\n        grades[5] or\n        grades[6]",
  "    local grades_lower = {}\n    local grades_upper = {}", "  -- Write your function\
    \ here\nend\n</code>\n<|/ q tags=lua dscore=0 |>\n<| c |>\nPlease try to rephrase\
    \ your question. I'm having a hard time understanding it.\n<|/ c |>\n<| c |>\n\
    The question has two parts: how to write a function that uses this table as input\
    \ and outputs the letters A, B, C, and D; how to write this function.\n<|/ c |>\n\
    <| c |>\nThat was my first thought too, but I wouldn't even know how to go about\
    \ it. That's why I came here. :)\n<|/ c |>\n<| a dscore=1 |>\nI wrote this as\
    \ a quick draft, it should give some idea of how to approach this. \n<code>",
  "    local grade_string = ''\n    local n = #grades\n    for i=1,n do\n        if\
    \ grades[i] < 4.0 then\n            grade_string = grade_string .. 'A+'\n    \
    \    elseif grades[i] < 3.7 then\n            grade_string = grade_string .. 'A'\n\
    \        elseif grades[i] < 3.3 then\n            grade_string = grade_string\
    \ .. 'A-'\n        elseif grades[i] < 3.0 then\n            grade_string = grade_string\
    \ .. 'B+'\n        elseif grades[i] < 2.7 then\n            grade_string = grade_string\
    \ .. 'B'\n        elseif grades[i] < 2.3 then\n            grade_string = grade_string\
    \ .. 'B-'\n        elseif grades[i] < 2.0 then\n            grade_string = grade_string\
    \ .. 'C+'\n        elseif grades[i] < 1.7 then\n            grade_string = grade_string\
    \ .. 'C'\n        elseif grades[i] < 1.3 then\n            grade_string = grade_string\
    \ .. 'C-'\n        elseif grades[i] < 1.0 then\n            grade_string = grade_string\
    \ .. 'D+'\n        elseif grades[i] < 0.7 then\n            grade_string = grade_string\
    \ .. 'D'\n        elseif grades[i] < 0.0 then\n            grade_string = grade_string\
    \ .. 'D-'\n        else\n            grade_string = grade_string .. 'E'\n    \
    \    end\n    end\n    return grade_string\nend", "   local grades_rounded = math.round(grades*100)\n\
    \   local letter_grade\n   if grades_rounded < 60 then\n      letter_grade = \"\
    F\"\n   elseif grades_rounded < 70 then\n      letter_grade = \"D+\"\n   elseif\
    \ grades_rounded < 80 then\n      letter_grade = \"D\"\n   elseif grades_rounded\
    \ < 90 then\n      letter_grade = \"C-\"\n   elseif grades_rounded < 100 then\n\
    \      letter_grade = \"C\"\n   elseif grades_rounded < 110 then\n      letter_grade\
    \ = \"B-\"\n   elseif grades_rounded < 120 then\n      letter_grade = \"B\"\n\
    \   elseif grades_rounded < 130 then\n      letter_grade = \"A+\"\n   elseif grades_rounded\
    \ < 140 then\n      letter_grade = \"A\"\n   elseif grades_rounded < 150 then\n\
    \      letter_grade = \"A-\"\n   elseif grades_rounded < 160 then\n      letter_grade\
    \ = \"+\"\n   else\n      letter_grade = \"E\"\n   end\n   return letter_grade\n\
    end\n</code>\n<|/ a tags=arrays,lua dscore=1 |>\n<| a tags=arrays,lua |>\nAnother\
    \ solution would be to create a map with the letter grades as keys and grades\
    \ as values.\n<code>\ngrades = {\n  4.0=\"A+\",\n  3.7=\"A\",\n  3.3=\"A-\",\n\
    \  3.0=\"B+\",\n  2.7=\"B\",\n  2.3=\"B-\",\n  2.0=\"C+\",\n  1.7=\"C\",\n  1.3=\"\
    C-\",\n  1.0=\"D+\",\n  0.7=\"D\",\n  0.0=\"D-\",\n  0.0=\"E\"\n}\n</code>\nThen\
    \ you can just loop over each grade and return the corresponding letter grade:\n\
    <code>", "    local grades_with_letters = {}\n    for i = 1, #grades do\n    \
    \    local grade = grades[i]\n        if grade >= 4 then\n            grades_with_letters[i]\
    \ = 'A+', -- Grade >= 4 gets A+ grade\n        elseif grade >= 3.7 then\n    \
    \        grades_with_letters[i] = 'A', -- Grade >= 3.7 gets A grade\n        elseif\
    \ grade >= 3.3 then\n            grades_with_letters[i] = 'A-', -- Grade >= 3.3\
    \ gets A-\n        elseif grade >= 3 then\n            grades_with_letters[i]\
    \ = 'B+', -- Grade >= 3 gets B+ grade\n        elseif grade >= 2.7 then\n    \
    \        grades_with_letters[i] = 'B', -- Grade >= 2.7 gets B grade\n        elseif\
    \ grade >= 2.3 then\n            grades_with_letters[i] = 'B-', -- Grade >= 2.3\
    \ gets B-\n        elseif grade >= 2 then\n            grades_with_letters[i]\
    \ = 'C+', -- Grade >= 2 gets C+ grade\n        elseif grade >= 1.7 then\n    \
    \        grades_with_letters[i] = 'C', -- Grade >= 1.7 gets C grade\n        elseif\
    \ grade >= 1.3 then\n            grades_with_letters[i] = 'C-', -- Grade >= 1.3\
    \ gets C-\n        elseif grade >= 1 then\n            grades_with_letters[i]\
    \ = 'D+', -- Grade >= 1 gets D+ grade\n        elseif grade >= 0.7 then\n    \
    \        grades_with_letters[i] = 'D', -- Grade >= 0.7 gets D grade\n        elseif\
    \ grade >= 0 then\n            grades_with_letters[i] = 'D-', -- Grade >= 0 gets\
    \ D- grade\n        else\n            grades_with_letters[i] = 'E', -- Grade <\
    \ 0 gets E grade\n        end\n    end\n    return grades_with_letters\nend",
  "   local grades_length = 1\n   for _, grade in ipairs(grades) do grades_length\
    \ = grades_length*grade end\n   \n   local grades_average = grades_length/#grades\n\
    \   \n   if grades_average < 2.5 then\n      return 'F'\n   elseif grades_average\
    \ < 3.0 then\n      return 'D-'\n   elseif grades_average < 3.5 then\n      return\
    \ 'C-'\n   elseif grades_average < 4.0 then\n      return 'B-'\n   elseif grades_average\
    \ < 4.5 then\n      return 'B+'\n   elseif grades_average < 5.0 then\n      return\
    \ 'A-'\n   elseif grades_average < 5.5 then\n      return 'A+'\n   elseif grades_average\
    \ < 6.0 then\n      return 'A'\n   elseif grades_average < 6.5 then\n      return\
    \ 'A-'\n   elseif grades_average < 7.0 then\n      return 'B'\n   elseif grades_average\
    \ < 7.5 then\n      return 'B+'\n   elseif grades_average < 8.0 then\n      return\
    \ 'C'\n   elseif grades_average < 8.5 then\n      return 'C+'\n   elseif grades_average\
    \ < 9.0 then\n      return 'D'\n   elseif grades_average < 9.5 then\n      return\
    \ 'D+'\n   elseif grades_average < 10.0 then\n      return 'D-'\n   elseif grades_average\
    \ < 10.5 then\n      return 'E'\n   else\n      return 'F'\n   end\nend", "  \
    \  local grade = {}\n    local i, num_grades, j, letter_grade\n    local numerical_grades\
    \ = {}\n    for i, num_grades in pairs(grades) do\n        -- num_grades is floating\
    \ point number > 0 \n        -- 0 <= num_grades <= 20\n        local numerical_grade\
    \ = 0\n        for j = 1, num_grades do\n            local numerical_grade +=\
    \ 0.5 * (j - math.floor((j - 1) / 2) + 1)\n        end\n        numerical_grades[i]\
    \ = numerical_grade\n        -- letter grade is one of A, B, C, D, E\n       \
    \ -- E is the last one, so it must include final number\n        if i == #grades\
    \ then\n            letter_grade = letter_grades[math.floor(num_grades)] -- A\
    \ or B or C or D+\n        else\n            -- if numerical grade is less than\
    \ 4, output letter grade as 'E'\n            if numerical_grade < 4 then\n   \
    \             letter_grade = letter_grades[i]\n            else\n            \
    \    -- if numerical grade is between 4 and 7, output letter grade as 'A-'\n \
    \               -- '-' is not included because final number is not included\n\
    \                if numerical_grade >= 4 and numerical_grade <= 7 then\n     \
    \               letter_grade = letter_grades[i]\n                else\n      \
    \              -- if numerical grade is greater than 7, output letter grade as\
    \ 'D+'\n                    if numerical_grade > 7 then\n                    \
    \    letter_grade = letter_grades[i]\n                    else\n             \
    \           -- if numerical grade is equal to 10, output letter grade as 'D'\n\
    \                        letter_grade = letter_grades[i]\n                   \
    \ end\n                end\n            end\n        end\n        table.insert(grade,\
    \ letter_grade)\n    end\n    return grade\nend", "    local grades_copy = {}\n\
    \    local index = 1\n    for _, grade in pairs(grades) do\n        grades_copy[index]\
    \ = grade\n        index = index + 1\n    end\n    local gpa = grades_copy[1]\n\
    \    for i = 1, #grades_copy - 1 do\n        if grades_copy[i] > gpa then\n  \
    \          gpa = grades_copy[i]\n        end\n    end\n    local grade_letter\
    \ = ''\n    if gpa > 4.0 then\n        grade_letter = 'A+'\n    elseif gpa > 3.7\
    \ then\n        grade_letter = 'A'\n    elseif gpa > 3.3 then\n        grade_letter\
    \ = 'A'\n    elseif gpa > 3.0 then\n        grade_letter = 'B+'\n    elseif gpa\
    \ > 2.7 then\n        grade_letter = 'B'\n    elseif gpa > 2.3 then\n        grade_letter\
    \ = 'B'\n    elseif gpa > 2.0 then\n        grade_letter = 'C+'\n    elseif gpa\
    \ > 1.7 then\n        grade_letter = 'C'\n    elseif gpa > 1.3 then\n        grade_letter\
    \ = 'C'\n    elseif gpa > 1.0 then\n        grade_letter = 'D+'\n    elseif gpa\
    \ > 0.7 then\n        grade_letter = 'D'\n    elseif gpa > 0.0 then\n        grade_letter\
    \ = 'D'\n    else\n        grade_letter = 'E'\n    end\n    return grade_letter\n\
    end", "   -- This function should return an array of letter grades given a list\
    \ of GPAs. \n   -- For example, if the input is [4.0, 3.7, 3.3, 2.7, 2.3, 2.0]\
    \ then your function should return ['A+', 'B', 'C-', 'C', 'A-'].\n   -- It is\
    \ the last week of the semester and the teacher has to give the grades\n   --\
    \ to students. The teacher has been making her own algorithm for grading.\n  \
    \ -- The only problem is, she has lost the code she used for grading.\n   -- She\
    \ has given you a list of GPAs for some students and you have to write \n   --\
    \ a function that can output a list of letter grades using the following table:\n\
    \   -- GPA       |    Letter grade\n   -- 4.0                A+\n   -- > 3.7 \
    \               A \n   -- > 3.3                A- \n   -- > 3.0              \
    \  B+\n   -- > 2.7                B \n   -- > 2.3                B-\n   -- > 2.0\
    \                C+\n   -- > 1.7                C\n   -- > 1.3               \
    \ C-\n   -- > 1.0                D+ \n   -- > 0.7                D \n   -- > 0.0\
    \                D-\n   -- 0.0                E\n   -- Example:\n   -- grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n   local function grades_to_letters(grades)\n\
    \      -- This function should return an array of letter grades given a list of\
    \ GPAs. \n      -- For example, if the input is [4.0, 3.7, 3.3, 2.7, 2.3, 2.0]\
    \ then your function should return ['A+', 'B', 'C-', 'C', 'A-'].\n      -- It\
    \ is the last week of the semester and the teacher has to give the grades\n  \
    \    -- to students. The teacher has been making her own algorithm for grading.\n\
    \      -- The only problem is, she has lost the code she used for grading.\n \
    \     -- She has given you a list of GPAs for some students and you have to write\
    \ \n      -- a function that can output a list of letter grades using the following\
    \ table:\n      -- GPA       |    Letter grade\n      -- 4.0                A+\n\
    \      -- > 3.7                A \n      -- > 3.3                A- \n      --\
    \ > 3.0                B+\n      -- > 2.7                B \n      -- > 2.3  \
    \              B-\n      -- > 2.0                C+\n      -- > 1.7          \
    \      C\n      -- > 1.3                C-\n      -- > 1.0                D+ \n\
    \      -- > 0.7", "   local function add_term(grades, n)\n      if n < 3 then\n\
    \         grades:insert( grades[1] .. '+' )\n         n = n + 1\n      else\n\
    \         grades:insert( grades[1] .. '-' )\n      end\n      if n > 3 then\n\
    \         grades:insert( grades[2] .. '+' )\n         n = n - 1\n      else\n\
    \         grades:insert( grades[2] .. '-' )\n      end\n   end\n   local grade\
    \ = grades[1] .. grades[2]\n   if grade == 'A+' then\n      add_term(grades, 3)\n\
    \   elseif grade == 'A' then\n      add_term(grades, 2)\n   elseif grade == 'B+'\
    \ then\n      add_term(grades, 2)\n   elseif grade == 'B' then\n      add_term(grades,\
    \ 1)\n   elseif grade == 'C+' then\n      add_term(grades, 1)\n   elseif grade\
    \ == 'C' then\n      add_term(grades, 0)\n   elseif grade == 'D+' then\n     \
    \ add_term(grades, 0)\n   elseif grade == 'D' then\n      add_term(grades, -1)\n\
    \   elseif grade == 'E' then\n      grades:insert( 'D-' )\n   end\n   return grades\n\
    end", "  -- If the grades are negative or zero then just return the grades as\
    \ a string.\n  if grades == 0 then\n    return 'D'\n  end\n  -- If the grades\
    \ are less than 3.0 then return a D grade\n  if grades < 3.0 then\n    return\
    \ 'D'\n  end\n  -- If the grades are greater than 2.9 then return a C grade\n\
    \  if grades > 2.9 then\n    return 'C'\n  end\n  -- If the grades are between\
    \ 2.3 to 2.9 then return a B grade\n  if grades >= 2.3 and grades < 2.9 then\n\
    \    return 'B'\n  end\n  -- If the grades are between 1.4 and 2.9 then return\
    \ a A grade\n  if grades >= 1.4 and grades < 2.9 then\n    return 'A'\n  end\n\
    \  -- If the grades are between 1.5 and 3.0 then return a C grade\n  if grades\
    \ >= 1.5 and grades < 3.0 then\n    return 'C'\n  end\n  -- If the grades are\
    \ between 1.6 and 3.7 then return a B grade\n  if grades >= 1.6 and grades < 3.7\
    \ then\n    return 'B'\n  end\n  -- If the grades are between 1.7 and 3.3 then\
    \ return a B grade\n  if grades >= 1.7 and grades < 3.3 then\n    return 'B'\n\
    \  end\n  -- If the grades are between 1.7 and 3.0 then return a A grade\n  if\
    \ grades >= 1.7 and grades < 3.0 then\n    return 'A'\n  end\n  -- If the grades\
    \ are greater than or equal to 3.0 then return a D grade\n  if grades > 3.0 then\n\
    \    return 'D'\n  end\nend", "    -- Return the first letter grade for a grade\
    \ list\n    -- For example, if grades is [4.0, 3, 1.7, 2, 3.5], the function will\
    \ return\n    -- ['A+', 'B', 'C-', 'C', 'A-']\n    return grades[1]\nend", " \
    \   local g = {}\n    \n    for i = 1, #grades do\n        g[i] = {}\n       \
    \ \n        if grades[i] > 4.0 then\n            g[i][1] = g[i][1] or 'A+'\n \
    \       elseif grades[i] <= 3.7 then\n            g[i][1] = g[i][1] or 'A'\n \
    \       elseif grades[i] <= 3.3 then\n            g[i][1] = g[i][1] or 'A-'\n\
    \        elseif grades[i] <= 3.0 then\n            g[i][1] = g[i][1] or 'B+'\n\
    \        elseif grades[i] <= 2.7 then\n            g[i][1] = g[i][1] or 'B'\n\
    \        elseif grades[i] <= 2.3 then\n            g[i][1] = g[i][1] or 'B-'\n\
    \        elseif grades[i] <= 2.0 then\n            g[i][1] = g[i][1] or 'C+'\n\
    \        elseif grades[i] <= 1.7 then\n            g[i][1] = g[i][1] or 'C'\n\
    \        elseif grades[i] <= 1.3 then\n            g[i][1] = g[i][1] or 'C-'\n\
    \        elseif grades[i] <= 1.0 then\n            g[i][1] = g[i][1] or 'D+'\n\
    \        elseif grades[i] <= 0.7 then\n            g[i][1] = g[i][1] or 'D'\n\
    \        elseif grades[i] <= 0.0 then\n            g[i][1] = g[i][1] or 'D-'\n\
    \        else\n            g[i][1] = g[i][1] or 'E'\n        end\n    end\n  \
    \  return g\nend", "\tlocal total = 0\n\tlocal i = 0\n\twhile i < #grades do\n\
    \t\ttotal = total + grades[i]\n\t\ti = i + 1\n\t\tif i == #grades then break end\n\
    \tend\n\tlocal remainder = 0\n\tlocal count = 0\n\twhile true do\n\t\tremainder\
    \ = remainder + (math.floor(total / 4.0) * 2)\n\t\ttotal = total - remainder\n\
    \t\tif total == 0 then break end\n\t\tcount = count + 1\n\t\tif count == 4 then\
    \ break end\n\tend\n\tlocal letter = ''\n\tlocal grade = ''\n\twhile true do\n\
    \t\tif total > 0 then\n\t\t\tlocal letter_index = 0\n\t\t\twhile letter_index\
    \ < #letter_grade and total >= letter_grade[letter_index] do\n\t\t\t\tletter_index\
    \ = letter_index + 1\n\t\t\t\tif letter_index == #letter_grade then break end\n\
    \t\t\tend\n\t\t\tif letter_index > 0 then\n\t\t\t\tgrade = letter_grade[letter_index]\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\ttotal = total - remainder\n\t\tremainder\
    \ = math.floor(remainder / 2.0) * 2\n\tend\n\tif grade == 'D' then grade = 'E'\
    \ end\n\treturn grade\nend", "  if grades[1] ~= grades[#grades] then\n    error(\"\
    grades list has incorrect length\")\n  end\n  \n  local student_grades = {}\n\
    \  for i=1,#grades do\n    local grade = grades[i]\n    if grade < 0 then\n  \
    \    grade = grade * -1\n    end\n    local gpa = grades[i - 1]\n    local student_grade\
    \ = lettergrade(gpa, grade)\n    table.insert(student_grades, student_grade)\n\
    \  end\n  \n  return table.concat(student_grades, \"\")\nend", "    local grades_table\
    \ = { } \n    local max_value = grades[1]\n    local min_value = grades[1]\n \
    \   local grades_length = #grades\n    local index = 1\n    while index <= grades_length\
    \ do\n        local value = grades[index]\n        max_value = math.max(max_value,\
    \ value)\n        min_value = math.min(min_value, value)\n        grades_table[index]\
    \ = max_value - min_value \n        index = index + 1\n    end\n    \n    local\
    \ grades_list = {}\n    index = 1\n    while index <= grades_length do\n     \
    \   local grade_letter = max_value - min_value + index\n        if grade_letter\
    \ >= 0 then\n            grades_list[grade_letter] = grades_table[index]\n   \
    \     end\n        index = index + 1\n    end\n    return grades_list\nend\n</cell>\n\
    <cell>", "\tlocal student_grades = {}\n\tlocal num_grades = 0", "  local grades_sorted\
    \ = {}\n  for i = 1, #grades do grades_sorted[i] = grades[i] end\n  table.sort(grades_sorted,\
    \ function(a,b) return b < a end)\n  local index = 1\n  local result = ''\n  while\
    \ index <= #grades_sorted do\n    local grade = grades_sorted[index]\n    local\
    \ new_grade, new_index = grade_indexes(grade, grades_sorted)\n    if new_grade\
    \ then\n      if index == 1 then\n        result = result .. new_grade .. '+'\n\
    \      else\n        result = result .. new_grade .. '-'\n      end\n      index\
    \ = new_index + 1\n    end\n  end\n  return result\nend", "    -- the first number\
    \ is the GPA of the first person\n    -- the second is the GPA of the second person\n\
    \    local gpa_1 = grades[1]\n    local gpa_2 = grades[2]\n    local gpa_3 = grades[3]\n\
    \    local gpa_4 = grades[4]", "    local gpa = grades[1]\n    local letters =\
    \ \"\"\n    local sign = \"\"\n    if gpa < 2.0 then\n        sign = \"-\"\n \
    \       gpa = sign..gpa\n    end\n    if gpa < 3.0 then\n        letters = \"\
    B+\"\n        gpa = sign..gpa\n    elseif gpa < 3.5 then\n        letters = \"\
    B-\"\n        gpa = sign..gpa\n    elseif gpa < 4.0 then\n        letters = \"\
    C+\"\n        gpa = sign..gpa\n    elseif gpa < 4.5 then\n        letters = \"\
    C\"\n        gpa = sign..gpa\n    elseif gpa < 5.0 then\n        letters = \"\
    C-\"\n        gpa = sign..gpa\n    elseif gpa < 5.5 then\n        letters = \"\
    D+\"\n        gpa = sign..gpa\n    elseif gpa < 6.0 then\n        letters = \"\
    D\"\n        gpa = sign..gpa\n    elseif gpa < 6.5 then\n        letters = \"\
    D-\"\n        gpa = sign..gpa\n    elseif gpa < 7.0 then\n        letters = \"\
    E\"\n    end\n    return letters\nend", "\tlocal grade_list = \"\"\n\tlocal max_grade\
    \ = tonumber(grades[1])\n\tlocal min_grade = tonumber(grades[2])\n\tfor i = 1,\
    \ #grades do\n\t\tlocal grade = tonumber(grades[i])\n\t\tif grade > max_grade\
    \ then\n\t\t\tmax_grade = grade\n\t\tend\n\t\tif grade < min_grade then\n\t\t\t\
    min_grade = grade\n\t\tend\n\tend\n\tgrade_list = \"\"\n\tfor i = 1, #grades do\n\
    \t\tlocal grade = tonumber(grades[i])\n\t\tif grade > max_grade then\n\t\t\tgrade_list\
    \ = grade_list .. \"+\" \n\t\telseif grade < min_grade then\n\t\t\tgrade_list\
    \ = grade_list .. \"-\"\n\t\telse\n\t\t\tgrade_list = grade_list .. \"+\"\n\t\t\
    end\n\tend\n\tgrade_list = grade_list[#grade_list]\n\tgrade_list = \"[\"..grade_list..\"\
    ]\"\n\treturn grade_list\nend", "  local function is_greater_equal_to_ten(number)\n\
    \    return math.floor(number) >= 10\n  end", "\tlocal lettergrades = {}\n\tfor\
    \ i=1,#grades do\n\t\tlocal gpa = grades[i]\n\t\tlocal lettergrade\n\t\tif (gpa\
    \ >= 4.0 and gpa <= 4.9) then\n\t\t\tlettergrade = 'A+'\n\t\telseif (gpa >= 3.9\
    \ and gpa <= 4.9) then\n\t\t\tlettergrade = 'A'\n\t\telseif (gpa >= 3.9 and gpa\
    \ <= 4.8) then\n\t\t\tlettergrade = 'A-'\n\t\telseif (gpa >= 3.9 and gpa <= 4.7)\
    \ then\n\t\t\tlettergrade = 'B+'\n\t\telseif (gpa >= 3.9 and gpa <= 4.7) then\n\
    \t\t\tlettergrade = 'B'\n\t\telseif (gpa >= 3.9 and gpa <= 4.6) then\n\t\t\tlettergrade\
    \ = 'B-'\n\t\telseif (gpa >= 3.9 and gpa <= 4.5) then\n\t\t\tlettergrade = 'C+'\n\
    \t\telseif (gpa >= 3.9 and gpa <= 4.5) then\n\t\t\tlettergrade = 'C'\n\t\telseif\
    \ (gpa >= 3.9 and gpa <= 4.4) then\n\t\t\tlettergrade = 'C-'\n\t\telseif (gpa\
    \ >= 3.9 and gpa <= 4.3) then\n\t\t\tlettergrade = 'D+'\n\t\telseif (gpa >= 3.9\
    \ and gpa <= 4.3) then\n\t\t\tlettergrade = 'D'\n\t\telseif (gpa >= 3.9 and gpa\
    \ <= 4.2) then\n\t\t\tlettergrade = 'D-'\n\t\telseif (gpa >= 3.9 and gpa <= 4.1)\
    \ then\n\t\t\tlettergrade = 'E'\n\t\telseif (gpa >= 3.9 and gpa <= 4.0) then\n\
    \t\t\tlettergrade = 'E-'\n\t\telseif (gpa >= 3.9 and gpa <= 3.9) then\n\t\t\t\
    lettergrade = 'F'\n\t\telse\n\t\t\tlettergrade = 'F-'\n\t\tend\n\t\ttable.insert(lettergrades,\
    \ lettergrade)\n\tend\n\treturn table.concat(lettergrades)\nend", "    local i,\
    \ j, total = 0, {}, 0\n    for i = 1, #grades do\n        j = math.floor(grades[i]\
    \ * 100)\n        total = total + j\n        j = j - 100\n        j = j + 1\n\
    \        total[j] = 1\n    end\n    local num_grades = {}\n    total = total -\
    \ 1\n    for i = 1, #total do\n        local j = math.floor(total[i])\n      \
    \  if j ~= 1 then\n            num_grades[i] = num_grades[i] .. tostring(j)\n\
    \        end\n    end\n    return num_grades\nend", "\t-- This function is only\
    \ called with the input parameter grades, which is an array of GPAs.\n\t-- The\
    \ function should return an array of letter grades.", '    local letters = { "A",
    "B", "B-", "C", "C+", "C+", "D", "D-", "E", "F", "F+", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-", "F-",
    "F-', "    local table = {}\n    local i\n    for i = 1, #grades do\n        if\
    \ grades[i] ~= nil then\n            table.insert(table, numerical_grade_function(grades[i]))\n\
    \        end\n    end\n    return table\nend", "  local letter_grades = { ['A+']\
    \ = 'A+',\n                         ['A'] = 'A',\n                         ['A-']\
    \ = 'A-',\n                         ['B+'] = 'B+',\n                         ['B']\
    \ = 'B',\n                         ['B-'] = 'B-',\n                         ['C+']\
    \ = 'C+',\n                         ['C'] = 'C',\n                         ['C-']\
    \ = 'C-',\n                         ['D+'] = 'D+',\n                         ['D']\
    \ = 'D',\n                         ['D-'] = 'D-',\n                         ['E']\
    \ = 'E' }\n  local total_grades = grades[1]\n  for i = 2, #grades do\n      total_grades\
    \ = total_grades + grades[i]\n  end\n  local letter_grade\n  if total_grades <\
    \ 0 then\n    letter_grade = 'D'\n  elseif total_grades < 3.0 then\n    letter_grade\
    \ = 'C'\n  elseif total_grades < 3.3 then\n    letter_grade = 'C'\n  elseif total_grades\
    \ < 3.7 then\n    letter_grade = 'B'\n  elseif total_grades < 4.0 then\n    letter_grade\
    \ = 'B'\n  elseif total_grades < 4.3 then\n    letter_grade = 'B'\n  elseif total_grades\
    \ < 4.7 then\n    letter_grade = 'A'\n  elseif total_grades < 5.0 then\n    letter_grade\
    \ = 'A'\n  elseif total_grades < 5.3 then\n    letter_grade = 'A'\n  elseif total_grades\
    \ < 5.7 then\n    letter_grade = 'A'\n  elseif total_grades < 6.0 then\n    letter_grade\
    \ = 'A'\n  elseif total_grades < 6.3 then\n    letter_grade = 'A'\n  elseif total_grades\
    \ < 6.7 then\n    letter_grade = 'A'\n  else\n    letter_grade = 'A'\n  end\n\
    \  return letter_grades[letter_grade]\nend", "  local grades_sum = sum(grades)\n\
    \  local grades_avg = grades_sum / grades:size() \n  return grades:map(function(grade)\n\
    \    local grade_value = grade - grades_avg\n    if grade_value < 0 then\n   \
    \   return 'D'\n    end\n    if grade_value >= 0.1 and grade_value <= 1.0 then\n\
    \      return ('A+' .. 'A' * (grade_value - 0.1)) -- A - 0.1 gives A+\n    end\n\
    \    if grade_value <= 2.0 and grade_value >= 2.1 then\n      return ('A+' ..\
    \ 'A' * (grade_value - 2.0)) -- A + 2.1 gives A+\n    end\n    if grade_value\
    \ <= 2.1 and grade_value >= 2.2 then\n      return ('A+' .. 'A' * (grade_value\
    \ - 2.1)) -- A + 2.2 gives A+\n    end\n    if grade_value <= 2.2 and grade_value\
    \ >= 2.3 then\n      return ('A+' .. 'B' * (grade_value - 2.2)) -- A + 2.3 gives\
    \ A+\n    end\n    if grade_value <= 2.3 and grade_value >= 2.4 then\n      return\
    \ ('A+' .. 'B' * (grade_value - 2.3)) -- A + 2.4 gives A+\n    end\n    if grade_value\
    \ <= 2.4 and grade_value >= 2.5 then\n      return ('A+' .. 'B' * (grade_value\
    \ - 2.4)) -- A + 2.5 gives A+\n    end\n    if grade_value <= 2.5 and grade_value\
    \ >= 2.6 then\n      return ('A+' .. 'B' * (grade_value - 2.5)) -- A + 2.6 gives\
    \ A+\n    end\n    if grade_value <= 2.6 and grade_value >= 2.7 then\n      return\
    \ ('A+' .. 'B' * (grade_value - 2.6)) -- A + 2.7 gives A+\n    end\n    if grade_value\
    \ <= 2.7 and grade_value >= 2.8 then\n      return 'B'\n    end\n    if grade_value\
    \ <= 2.8 and grade_value >= 2.9 then\n      return 'B'\n    end\n    if grade_value\
    \ <= 2.9 and grade_value >= 3.0 then\n      return 'B'\n    end\n    if grade_value\
    \ <= 3.0 and grade_value >= 3.1 then\n      return 'B'\n    end\n    if grade_value\
    \ <= 3.1 and grade_value >= 3.2 then\n      return 'C'\n    end\n    if grade_value\
    \ <= 3.2 and grade_value >= 3.3 then\n      return 'C'\n    end\n    if grade_value\
    \ <= 3.3 and grade_value >= 3.4 ", "   -- Write your implementation here\n   --\
    \ You have to return a list of letter grades.\n   \n   -- Example implementation\n\
    \   local grades = grade_equation([4.0, 3, 1.7, 2, 3.5])\n   \n   local grades_length\
    \ = {}\n   for _, grade in ipairs(grades) do\n      grades_length[#grades_length\
    \ + 1] = grade\n   end\n   \n   local index = 1\n   local grades_temp = {}\n \
    \  for grade, length in pairs(grades_length) do\n      grades_temp[index] = {grade,\
    \ length}\n      index = index + 1\n   end\n   \n   local index = 1\n   local\
    \ grades_sorted = {}\n   for _, grade in ipairs(grades_temp) do\n      grades_sorted[#grades_sorted\
    \ + 1] = grade\n      index = index + 1\n   end\n   \n   -- Return the sorted\
    \ grades\n   \nend", "    local sum = 0\n    for i = 1, #grades do\n        sum\
    \ = sum + grades[i]\n    end\n    return string.format('%+.1f', sum/#grades)\n\
    end", "  local grade = grades[1]\n  if grade > 3.0 then\n    local letter = \"\
    B+\"\n    if grade > 3.7 then\n      letter = \"B\"\n      if grade > 3.3 then\n\
    \        letter = \"B-\"\n        if grade > 3.0 then\n          letter = \"C+\"\
    \n          if grade > 3.7 then\n            letter = \"C\"\n            if grade\
    \ > 3.3 then\n              letter = \"C-\"\n              if grade > 3.0 then\n\
    \                letter = \"D+\"\n                if grade > 3.7 then\n      \
    \            letter = \"D\"\n                  if grade > 3.3 then\n         \
    \           letter = \"D-\"\n                    if grade > 3.0 then\n       \
    \               letter = \"E\"\n                    end\n                  end\n\
    \                end\n              end\n            end\n          end\n    \
    \    end\n      end\n    end\n    return letter\n  end\n  return \"E\"\nend",
  "\t-- First check if the GPA is more than a half of the highest GPA allowed\n\t\
    -- by the teacher (it would be easier to use this than to rewrite the\n\t-- algorithm\
    \ for determining letter grades).\n\tlocal highest_gpa = -999999999\n\tlocal max_gpa\
    \ = math_functions.max(grades)\n\t-- If the GPA of the highest GPA is less than\
    \ 0.5\n\t-- then this means we are not allowed to make any grade changes\n\tif\
    \ max_gpa < 0.5 then\n\t\treturn 'E'\n\tend\n\t-- The highest GPA of the semester\
    \ will be between 1.1 and 2.5 \n\t-- but only 1.1 will be the correct grade\n\t\
    local highest_gpa_for_teacher = math_functions.max(grades,\n\t\tfunction(x)\n\t\
    \t\treturn math_functions.min(x, 1.1)\n\t\tend\n\t)\n\t-- If the teacher has a\
    \ GPA of less than 1.1,\n\t-- then we will need to make some changes\n\tif highest_gpa_for_teacher\
    \ < 1.1 then\n\t\t-- This means we are not allowed to make any grade changes\n\
    \t\tif highest_gpa < 1.1 then\n\t\t\treturn 'E'\n\t\tend\n\t\t-- If the highest\
    \ GPA we are allowed to make is 3.5,\n\t\t-- then we will need to make some changes\n\
    \t\tif highest_gpa_for_teacher == 3.5 then\n\t\t\treturn 'C'\n\t\tend\n\t\t--\
    \ If the highest GPA we are allowed to make is 3.3,\n\t\t-- then we will need\
    \ to make some changes\n\t\tif highest_gpa_for_teacher == 3.3 then\n\t\t\treturn\
    \ 'C'\n\t\tend\n\t\t-- If the highest GPA we are allowed to make is 3.1,\n\t\t\
    -- then we will need to make some changes\n\t\tif highest_gpa_for_teacher == 3.1\
    \ then\n\t\t\treturn 'C'\n\t\tend\n\t\t-- If the highest GPA we are allowed to\
    \ make is 3.0,\n\t\t-- then we will need to make some changes\n\t\tif highest_gpa_for_teacher\
    \ == 3.0 then\n\t\t\treturn 'C'\n\t\tend\n\t\t-- If the highest GPA we are allowed\
    \ to make is 2.5,\n\t\t-- then we will need to make some changes\n\t\tif highest_gpa_for_teacher\
    \ == 2.5 then\n\t\t\treturn 'B'\n\t\tend\n\t\t-- If the highest GPA we are allowed\
    \ to make is 2.3,\n\t\t-- then we will need to make some changes\n\t\tif highest_gpa_for_teacher\
    \ == 2.3 then\n\t\t\treturn 'B'\n\t\tend\n\t\t-- If the highest GPA we are allowed\
    \ to make is 2.1,\n\t\t-- then ", "   if grades == nil then\n      return nil\n\
    \   end", "  local letter_grade = ''\n  for _, grade in ipairs(grades) do\n  \
    \  local gpa = grade*100\n    -- This section checks if the GPA is greater than\
    \ 3.5\n    -- If it is, it calculates the GPA based on a linear equation\n   \
    \ -- y = mx + c\n    local m = ((gpa*4.5)+40)/100\n    local c = (gpa*3.5+35)/100\n\
    \    if gpa > 3.5 then\n      letter_grade = 'D+'\n    elseif gpa > 3.0 then\n\
    \      letter_grade = 'D-'\n    elseif gpa > 2.7 then\n      letter_grade = 'D'\n\
    \    elseif gpa > 2.3 then\n      letter_grade = 'C-'\n    elseif gpa > 2.0 then\n\
    \      letter_grade = 'C'\n    elseif gpa > 1.7 then\n      letter_grade = 'B-'\n\
    \    elseif gpa > 1.3 then\n      letter_grade = 'B'\n    elseif gpa > 1.0 then\n\
    \      letter_grade = 'B+'\n    elseif gpa > 0.7 then\n      letter_grade = 'A'\n\
    \    elseif gpa > 0.3 then\n      letter_grade = 'A+'\n    elseif gpa > 0.0 then\n\
    \      letter_grade = 'A'\n    else\n      letter_grade = 'E'\n    end\n  end\n\
    \  return letter_grade\nend", "  local grades_arr = {grades[1],grades[2]}\n  local\
    \ grades_arr = grades_arr:gsort()\n  return table.concat(grades_arr,\" \")\nend",
  "    if grades == nil then\n        return nil\n    end\n    local result = {}\n\
    \    for i = 1, #grades do\n        local gpa = grades[i]\n        local lettergrade\n\
    \        if gpa > 0 then\n            lettergrade = \"A+\"\n        elseif gpa\
    \ < 0 then\n            lettergrade = \"A-\"\n        else\n            lettergrade\
    \ = \"B+\"\n        end\n        result[#result + 1] = lettergrade\n    end\n\
    \    return result\nend", "\tlocal i, max = 0, #grades\n\tlocal grade", "    local\
    \ letters = {\n        'A+','A','A-','B+','B','B-','C+','C','C-','D+','D','D-','E'\n\
    \    }\n    local letters_len = #letters\n    local grades_len = #grades\n   \
    \ local grades_sum = grades:sum()\n    if grades_sum < 3.0 then\n        return\
    \ letters[grades_sum]\n    end\n    local index = 1\n    local total = 0.0\n \
    \   for i = 1,grades_len do\n        total = total + grades[i]\n        index\
    \ = index + 1\n        if index == letters_len then\n            return letters[grades_sum]\n\
    \        end\n    end\n    return letters[total/grades_len]\nend", "  local function\
    \ letter_grade(grade)\n    if grade < 0.0 then\n      return \"D-\"\n    elseif\
    \ grade < 1.0 then\n      return \"C+\"\n    elseif grade < 1.1 then\n      return\
    \ \"C\"\n    elseif grade < 1.2 then\n      return \"B-\"\n    elseif grade <\
    \ 1.3 then\n      return \"B\"\n    elseif grade < 1.4 then\n      return \"A-\"\
    \n    elseif grade < 1.5 then\n      return \"A\"\n    elseif grade < 1.6 then\n\
    \      return \"A+\"\n    elseif grade < 1.7 then\n      return \"B+\"\n    elseif\
    \ grade < 1.8 then\n      return \"B\"\n    elseif grade < 1.9 then\n      return\
    \ \"B-\"\n    elseif grade < 2.0 then\n      return \"C-\"\n    elseif grade <\
    \ 2.1 then\n      return \"C\"\n    elseif grade < 2.2 then\n      return \"C+\"\
    \n    elseif grade < 2.3 then\n      return \"D\"\n    elseif grade < 2.4 then\n\
    \      return \"D+\"\n    elseif grade < 2.5 then\n      return \"D-\"\n    elseif\
    \ grade < 2.6 then\n      return \"E\"\n    else\n      return \"E+\"\n    end\n\
    \  end", "   local output = {}\n   for i = 1, #grades do\n      output[i] = {}\n\
    \      if grades[i] < 4 then\n         output[i][2] = 'A+'\n      elseif grades[i]\
    \ <= 3.7 then\n         output[i][2] = 'A'\n      elseif grades[i] <= 3.3 then\n\
    \         output[i][2] = 'A-'\n      elseif grades[i] <= 3 then\n         output[i][2]\
    \ = 'B+'\n      elseif grades[i] <= 2.7 then\n         output[i][2] = 'B'\n  \
    \    elseif grades[i] <= 2.3 then\n         output[i][2] = 'B-'\n      elseif\
    \ grades[i] <= 2 then\n         output[i][2] = 'C+'\n      elseif grades[i] <=\
    \ 1.7 then\n         output[i][2] = 'C'\n      elseif grades[i] <= 1.3 then\n\
    \         output[i][2] = 'C-'\n      elseif grades[i] <= 1 then\n         output[i][2]\
    \ = 'D+'\n      elseif grades[i] <= 0.7 then\n         output[i][2] = 'D'\n  \
    \    elseif grades[i] <= 0 then\n         output[i][2] = 'D-'\n      elseif grades[i]\
    \ == 0 then\n         output[i][2] = 'E'\n      end\n   end\n   return output\n\
    end\n</cell>\n<code language=julia-1.5>", "    local grade1, grade2 = grades[1],grades[2]\n\
    \    if grade1 == 0 and grade2 == 0 then return \"E\" end\n    if grade1 ~= 0\
    \ and grade2 ~= 0 then\n        return string.format(\"%.2f\", (grade1 + grade2)\
    \ / 2)\n    elseif grade1 ~= 0 and grade2 == 0 then\n        return \"D\"\n  \
    \  elseif grade1 == 0 and grade2 ~= 0 then\n        return \"D+\"\n    end\nend",
  "  local letters = {'A', 'B', 'C', 'D', 'E'}\n  local results = {}\n  for i = 1,\
    \ #grades do\n    local grade = grades[i]\n    local max_value_index = #letters\
    \ - 1\n    for j = 1, #letters do\n      if letter > letters[j] then\n       \
    \ max_value_index = j\n      end\n    end\n    results[i] = letters[max_value_index]\n\
    \  end\n  return table.concat(results)\nend", "  -- This function calculates letter\
    \ grade given a list of numerical grades.\n  -- Input:\n  --   - grades: List\
    \ of numerical grades given by teacher.\n  -- Output:\n  --   - List of letter\
    \ grades given by teacher.", "\tlocal gpa = grades[1]\n\tlocal letter_grades =\
    \ {}\n\tlocal count = 0\n\tlocal result\n\t\n\t-- Find the highest GPA value\n\
    \tfor i = 0, #grades do\n\t\tif grades[i] > gpa then\n\t\t\tgpa = grades[i]\n\t\
    \tend\n\tend\n\t\n\t-- Iterate through each GPA and find the letter grade\n\t\
    for i = 0, gpa - gpa % 4 do\n\t\tif gpa > 0 then\n\t\t\tif count % 2 == 1 then\n\
    \t\t\t\tletter_grades[#letter_grades + 1] = string.format('%+2.1f', gpa)\n\t\t\
    \telse\n\t\t\t\tletter_grades[#letter_grades + 1] = string.format('%2.1f', gpa)\n\
    \t\t\tend\n\t\tend\n\t\tgpa = gpa - gpa % 4\n\t\tcount = count + 1\n\tend\n\t\n\
    \t-- Determine the letter grade\n\tif gpa > 0 then\n\t\tif count % 2 == 1 then\n\
    \t\t\tresult = string.format('%+2.1f', gpa)\n\t\telse\n\t\t\tresult = string.format('%2.1f',\
    \ gpa)\n\t\tend\n\telse\n\t\tresult = 'E'\n\tend\n\t\n\treturn letter_grades,\
    \ result\nend", "  -- The first grade in the list must be the smallest one. \n\
    \  -- We return \"D-\" if there is no grade.\n  local smallst_grade = grades[1]\n\
    \  local grades_string = ''\n  for i = 1, #grades do\n    local grade_symbol =\
    \ ''\n    if grades[i] <= smallst_grade then\n      grade_symbol = 'D-'\n    elseif\
    \ grades[i] >= 3.0 then\n      grade_symbol = 'D+'\n    elseif grades[i] <= 2.0\
    \ and grades[i] > 2.0 then\n      grade_symbol = 'C+'\n    elseif grades[i] <=\
    \ 1.7 and grades[i] > 1.7 then\n      grade_symbol = 'C'\n    elseif grades[i]\
    \ <= 1.3 and grades[i] > 1.3 then\n      grade_symbol = 'C-'\n    elseif grades[i]\
    \ <= 1.0 and grades[i] > 1.0 then\n      grade_symbol = 'B+'\n    elseif grades[i]\
    \ <= 0.7 and grades[i] > 0.7 then\n      grade_symbol = 'B'\n    elseif grades[i]\
    \ <= 0.2 and grades[i] > 0.2 then\n      grade_symbol = 'B-'\n    elseif grades[i]\
    \ <= 0.05 then\n      grade_symbol = 'A-'\n    elseif grades[i] <= 0.0 and grades[i]\
    \ > 0.0 then\n      grade_symbol = 'A+'\n    elseif grades[i] <= -0.0 and grades[i]\
    \ > -0.0 then\n      grade_symbol = 'E'\n    else\n      error('Illegal grade')\n\
    \    end\n    grades_string = grades_string .. grade_symbol\n  end\n  return grades_string\n\
    end", "    local grade, letter, grade2 = 0.0, 0.0, 0.0\n    for i = 1, #grades\
    \ do\n        grade = grades[i]\n        letter = math.floor((grade - grade2)\
    \ * 100 / 3.0 + 0.5)\n        grade2 = grade - math.floor(grade * 100 / 3.0 +\
    \ 0.5)\n        if grade2 > 0 then\n            letter = letter + string.format('%+',\
    \ grade2)\n        end\n        grades[i] = letter\n    end\n    return grades\n\
    end", "    local grade_array = {}\n    for i = 1, #grades, 1 do\n        local\
    \ GPA = grades[i]\n        if GPA < 4.0 then\n            table.insert(grade_array,\
    \ \"A+\")\n        elseif GPA > 3.7 then\n            table.insert(grade_array,\
    \ \"A\")\n        elseif GPA > 3.3 then\n            table.insert(grade_array,\
    \ \"A+\")\n        elseif GPA > 3.0 then\n            table.insert(grade_array,\
    \ \"B+\")\n        elseif GPA > 2.7 then\n            table.insert(grade_array,\
    \ \"B\")\n        elseif GPA > 2.3 then\n            table.insert(grade_array,\
    \ \"B+\")\n        elseif GPA > 2.0 then\n            table.insert(grade_array,\
    \ \"C+\")\n        elseif GPA > 1.7 then\n            table.insert(grade_array,\
    \ \"C\")\n        elseif GPA > 1.3 then\n            table.insert(grade_array,\
    \ \"C+\")\n        elseif GPA > 1.0 then\n            table.insert(grade_array,\
    \ \"D+\")\n        elseif GPA > 0.7 then\n            table.insert(grade_array,\
    \ \"D\")\n        elseif GPA > 0.0 then\n            table.insert(grade_array,\
    \ \"D-\")\n        else\n            table.insert(grade_array, \"E\")\n      \
    \  end\n    end\n    return grade_array\nend", "    local sum = 0\n    local max_grade\
    \ = 0\n    local grade_sum = 0", "  if #grades == 0 then return 'E' end\n  local\
    \ grade, i = grades[1], 1\n  local letters = {}\n  while i <= #grades do\n   \
    \ local gpa = grades[i]\n    -- A student with a GPA of 0 has a letter grade of\
    \ 'E'\n    -- A student with a GPA of < 0 has a letter grade of 'D-'\n    -- A\
    \ student with a GPA of > 0 has a letter grade of 'D+'\n    -- A student with\
    \ a GPA of == 0 has a letter grade of 'D'\n    if gpa == 0 then letters[i] = 'E'\
    \ \n    else if gpa < 0 then letters[i] = 'D-' \n    else if gpa > 0 then letters[i]\
    \ = 'D+' \n    else letters[i] = 'D' end -- A student with a GPA of == 0 has a\
    \ letter grade of 'D'\n    i = i + 1\n  end\n  -- Now we need to combine all of\
    \ the letters together to form a letter grade string\n  local result = \"\"\n\
    \  local last_letter = letters[1]\n  for i, letter in pairs(letters) do\n    --\
    \ The first letter grade is just the last letter grade added\n    if i == 1 then\n\
    \      result = last_letter\n    end\n    -- If the last letter grade was not\
    \ 'E', then we need to add a dash\n    if letters[i] ~= 'E' then result = result\
    \ .. \"-\" end\n    -- Add the letter grade \n    result = result .. letter\n\
    \    -- Store the letter grade for the next iteration\n    last_letter = letter\n\
    \  end\n  return result\nend", "    --local gpas -- GPA list\n    local letter_grades\
    \ -- Letter grades list\n    -- gpas = GPA list\n    -- letter_grades = Letter\
    \ grades list\n    -- gpas = gpa list\n    -- gpas = gpa list\n    -- For some\
    \ reason we have to make a new table in local scope for GPA list.\n    -- This\
    \ code below is for grading a list of GPA grades.\n    -- For some reason I have\
    \ to make a local scope table for gpa grades so that\n    -- I can use the gpa\
    \ list for my new function.\n    local gpas_local = {}\n    -- local gpas = gpa\
    \ list\n    -- local letter_grades = letter grades list\n    local i\n    local\
    \ sum = 0\n    local j\n    -- i = 0\n    -- i = 0\n    -- For some reason we\
    \ have to make a new table in local scope for GPA list.\n    -- This code below\
    \ is for grading a list of GPA grades.\n    -- For some reason I have to make\
    \ a local scope table for gpa grades so that\n    -- I can use the gpa list for\
    \ my new function.\n    -- gpas_local = gpa list\n    -- gpas = gpa list\n   \
    \ -- gpas = gpa list\n    -- For some reason I have to make a local scope table\
    \ for gpa grades so that\n    -- I can use the gpa list for my new function.\n\
    \    for i = 1, #grades do\n        sum = sum + grades[i]\n    end\n    local\
    \ gpa = sum\n    -- local letter_grades = letter grades list\n    -- local i\n\
    \    -- local sum = 0\n    -- local j\n    -- i = 0\n    -- i = 0\n    -- For\
    \ some reason we have to make a new table in local scope for GPA list.\n    --\
    \ This code below is for grading a list of GPA grades.\n    -- For some reason\
    \ I have to make a local scope table for gpa grades so that\n    -- I can use\
    \ the gpa list for my new function.\n    -- gpas_local = gpa list\n    -- gpas\
    \ = gpa list\n    -- gpas = gpa list\n    -- For some reason I have to make a\
    \ local scope table for gpa grades so that\n    -- I can use the gpa list for\
    \ my new function.\n    -- gpas_local = gpa list\n    -- gpas = gpa list\n   \
    \ -- gpas = gpa list\n    local grade_table = {}\n    -- local i\n    -- local\
    \ sum = 0\n    -- local j\n    -- i = 0\n    -- i = 0\n    -- For some reason\
    \ we have to make a new table in local scope for GPA list.\n    -- This code below\
    \ is for gra", "    local result = '' -- A letter\n    for i = 0, #grades do\n\
    \        local grade = grades[i]\n        if grade ~= 0 then\n            if grade\
    \ <= 3.0 then\n                -- Lowest grade\n                result = 'A+'\n\
    \            elseif grade <= 3.3 then\n                -- Second lowest\n    \
    \            result = 'A'\n            elseif grade <= 3.7 then\n            \
    \    -- Third lowest\n                result = 'A-'\n            elseif grade\
    \ <= 4.0 then\n                -- Lowest grade\n                result = 'B+'\n\
    \            elseif grade <= 2.7 then\n                -- Second lowest\n    \
    \            result = 'B'\n            elseif grade <= 2.3 then\n            \
    \    -- Third lowest\n                result = 'B-'\n            elseif grade\
    \ <= 2.0 then\n                -- Lowest grade\n                result = 'C+'\n\
    \            elseif grade <= 1.7 then\n                -- Second lowest\n    \
    \            result = 'C'\n            elseif grade <= 1.3 then\n            \
    \    -- Third lowest\n                result = 'C-'\n            elseif grade\
    \ <= 1.0 then\n                -- Lowest grade\n                result = 'D+'\n\
    \            elseif grade <= 0.7 then\n                -- Second lowest\n    \
    \            result = 'D'\n            elseif grade <= 0.0 then\n            \
    \    -- Lowest grade\n                result = 'D-'\n            elseif grade\
    \ ~= nil then\n                -- No letter grade found\n                result\
    \ = 'E'\n            end\n        end\n    end\n    return result\nend\nreturn\
    \ numerical_letter_grade(grades)\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\nI'm\
    \ voting to close this question as off-topic because this is neither a tutorial\
    \ site nor web search replacement. We expect you to do some research before asking\
    \ questions on Stack Overflow. We're not a tutorial service. Perhaps you could\
    \ review your question and make some attempts to solve it before asking a question.\
    \ Then, if you have a specific question about a specific problem you are having\
    \ with your code, you can post a question with your code and explain what you've\
    \ tried, and we'll try to help. But we won't write your code for you.\n<|/ c |>\n\
    <| c |>\nI'm just looking for a way to write that function and that's all\n<|/\
    \ c |>\n<| a |>\nYou can do something like this:\n<code>", "    local result =\
    \ ''\n    local grades_copy = table.copy(grades)\n    for i=1,#grades_copy do\
    \ -- go through each GPA\n        if grades_copy[i]>0 then\n            local\
    \ x = grades_copy[i]%1 -- get the grade\n            if x~=0 then\n          \
    \      if x>0 then\n                    result = 'A+'\n                elseif\
    \ x<0 then\n                    result = 'A-'\n                else\n        \
    \            result = 'B+'\n                end\n            end\n        end\n\
    \    end\n    return result\nend", "   if grades[1] > grades[2] then\n      return\
    \ ('A+'):sub(1):sub(1)\n   elseif grades[1] == grades[2] then\n      if grades[1]\
    \ < 4.0 then\n         return 'A'\n      else\n         return 'B'\n      end\n\
    \   elseif grades[2] < 4.0 then\n      return ('B+'):sub(1):sub(1)\n   else\n\
    \      return ('B'):sub(1):sub(1)\n   end\nend", "\tlocal grades_table = { }\n\
    \tlocal i = 1\n\twhile i <= #grades do\n\t\tif grades[i] < 4.0 then\n\t\t\tgrades_table.['A+']\
    \ = grades[i]\n\t\telseif grades[i] >= 4.0 and grades[i] < 3.7 then\n\t\t\tgrades_table.['A']\
    \ = grades[i]\n\t\telseif grades[i] >= 3.7 and grades[i] < 3.3 then\n\t\t\tgrades_table.['A-']\
    \ = grades[i]\n\t\telseif grades[i] >= 3.3 and grades[i] < 3.0 then\n\t\t\tgrades_table.['B+']\
    \ = grades[i]\n\t\telseif grades[i] >= 3.0 and grades[i] < 2.7 then\n\t\t\tgrades_table.['B']\
    \ = grades[i]\n\t\telseif grades[i] >= 2.7 and grades[i] < 2.3 then\n\t\t\tgrades_table.['B-']\
    \ = grades[i]\n\t\telseif grades[i] >= 2.3 and grades[i] < 2.0 then\n\t\t\tgrades_table.['C+']\
    \ = grades[i]\n\t\telseif grades[i] >= 2.0 and grades[i] < 1.7 then\n\t\t\tgrades_table.['C']\
    \ = grades[i]\n\t\telseif grades[i] >= 1.7 and grades[i] < 1.3 then\n\t\t\tgrades_table.['C-']\
    \ = grades[i]\n\t\telseif grades[i] >= 1.3 and grades[i] < 1.0 then\n\t\t\tgrades_table.['D+']\
    \ = grades[i]\n\t\telseif grades[i] >= 1.0 and grades[i] < 0.7 then\n\t\t\tgrades_table.['D']\
    \ = grades[i]\n\t\telseif grades[i] >= 0.7 and grades[i] < 0.0 then\n\t\t\tgrades_table.['D-']\
    \ = grades[i]\n\t\telseif grades[i] >= 0.0 then\n\t\t\tgrades_table.['E'] = grades[i]\n\
    \t\telse\n\t\t\tprint('The grades in GPA list is not valid. Check the GPA list.')\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\t\n\treturn grades_table\nend\n ", "  local grade_letters\
    \ = {}\n  local gpa = grades[1]\n  grade_letters[gpa] = 'A+' -- 4.0\n  if gpa\
    \ > 3.7 then \n    grade_letters[gpa] = 'A' -- > 3.7\n    grade_letters[gpa -\
    \ 3.7] = 'A-' -- > 3.3\n  end\n  if gpa > 3.3 then\n    grade_letters[gpa] = 'B+'\
    \ -- > 3.3\n    grade_letters[gpa - 3.3] = 'B-' -- > 3.0\n  end\n  if gpa > 3.0\
    \ then\n    grade_letters[gpa] = 'B' -- > 3.0\n    grade_letters[gpa - 3.0] =\
    \ 'B-' -- > 2.7\n  end\n  if gpa > 2.7 then\n    grade_letters[gpa] = 'B+' --\
    \ > 2.7\n    grade_letters[gpa - 2.7] = 'B-' -- > 2.3\n  end\n  if gpa > 2.3 then\n\
    \    grade_letters[gpa] = 'C+' -- > 2.3\n    grade_letters[gpa - 2.3] = 'C-' --\
    \ > 2.0\n  end\n  if gpa > 2.0 then\n    grade_letters[gpa] = 'C' -- > 2.0\n \
    \   grade_letters[gpa - 2.0] = 'C-' -- > 1.7\n  end\n  if gpa > 1.7 then\n   \
    \ grade_letters[gpa] = 'C+' -- > 1.7\n    grade_letters[gpa - 1.7] = 'C-' -- >\
    \ 1.3\n  end\n  if gpa > 1.3 then\n    grade_letters[gpa] = 'D+' -- > 1.3\n  \
    \  grade_letters[gpa - 1.3] = 'D-' -- > 1.0\n  end\n  if gpa > 1.0 then\n    grade_letters[gpa]\
    \ = 'D' -- > 1.0\n    grade_letters[gpa - 1.0] = 'D-' -- > 0.7\n  end\n  if gpa\
    \ > 0.7 then\n    grade_letters[gpa] = 'D+' -- > 0.7\n    grade_letters[gpa -\
    \ 0.7] = 'D-' -- > 0.0\n  end\n  grade_letters[gpa] = 'E' -- 0.0\n  return table.concat(grade_letters)\n\
    end", "    local function check(grade)\n        if grade < 1 then\n          \
    \  return grade\n        end\n        \n        if grade < 4.0 then\n        \
    \    return 'A+'\n        end\n        if grade < 4.7 then\n            return\
    \ 'A'\n        end\n        if grade < 5.3 then\n            return 'A-'\n   \
    \     end\n        if grade < 5.7 then\n            return 'B+'\n        end\n\
    \        if grade < 6.3 then\n            return 'B'\n        end\n        if\
    \ grade < 6.7 then\n            return 'B-'\n        end\n        if grade < 7.3\
    \ then\n            return 'C+'\n        end\n        if grade < 7.7 then\n  \
    \          return 'C'\n        end\n        if grade < 8.3 then\n            return\
    \ 'C-'\n        end\n        if grade < 8.7 then\n            return 'D+'\n  \
    \      end\n        if grade < 9.3 then\n            return 'D'\n        end\n\
    \        if grade < 9.7 then\n            return 'D-'\n        end\n        if\
    \ grade < 10.7 then\n            return 'E'\n        end\n    end\n    return\
    \ map(check, grades)\nend", "    local gpas = grades\n    local n = #grades\n\
    \    local gpa = gpas(math.floor(n / 3))\n    local grade\n    if gpa < 3.0 then\n\
    \        grade = \"D\"\n    elseif gpa > 3.0 and gpa < 3.7 then\n        grade\
    \ = \"C-\"\n    elseif gpa > 3.7 and gpa < 4.0 then\n        grade = \"C-\"\n\
    \    elseif gpa > 4.0 and gpa < 4.3 then\n        grade = \"B-\"\n    elseif gpa\
    \ > 4.3 and gpa < 4.7 then\n        grade = \"B-\"\n    elseif gpa > 4.7 and gpa\
    \ < 5.0 then\n        grade = \"A+\"\n    elseif gpa > 5.0 and gpa < 5.3 then\n\
    \        grade = \"A+\"\n    elseif gpa > 5.3 and gpa < 5.7 then\n        grade\
    \ = \"A\"\n    elseif gpa > 5.7 and gpa < 6.0 then\n        grade = \"A\"\n  \
    \  else\n        grade = \"E\"\n    end\n    return grade\nend", "  local count\
    \ = 0\n  local current_gpa = grades[1]\n  local current_letter = ''\n  for i =\
    \ 1, #grades do\n    if current_gpa <= grades[i] then\n      count = count + 1\n\
    \      current_letter = current_letter..'+'\n    elseif current_gpa > grades[i]\
    \ then\n      if count == 0 then\n        current_letter = current_letter..'-'\n\
    \      elseif count > 1 then\n        current_letter = current_letter..'-'\n \
    \     else\n        current_letter = current_letter..'/'\n      end\n      count\
    \ = 0\n    end\n    current_gpa = grades[i]\n  end\n  if count == 0 then\n   \
    \ current_letter = current_letter..'-'\n  end\n  return current_letter\nend",
  "  local gpas = tostring(grades[1])\n  gpas = gpas:gsub('(%-.%d+%.%d)(%.%d+)', '\\\
    1')\n  local lettergrades = gpas:gsub('(%-.%d+)', '\\1') \n  local grade_table\
    \ = { ['']='E' , ['A+']='A' , ['A']='A-' , ['B+']='B' , ['B']='B-' , ['C+']='C'\
    \ , ['C']='C-' , ['D+']='D' , ['D']='D-' , ['E']='E' }\n  return tostring(grade_table[gpas])\n\
    end", "    -- Write your code below\n    local letter_grades={}\n    for i=1,#grades,1\
    \ do\n        if grades[i]==0 then \n            letter_grades[i]='E'\n      \
    \  elseif grades[i]<=3.7 then\n            letter_grades[i]='A+' \n        elseif\
    \ grades[i]<=3.3 then\n            letter_grades[i]='A' \n        elseif grades[i]<=3.0\
    \ then\n            letter_grades[i]='B+' \n        elseif grades[i]<=2.7 then\n\
    \            letter_grades[i]='B' \n        elseif grades[i]<=2.3 then\n     \
    \       letter_grades[i]='B-' \n        elseif grades[i]<=2.0 then\n         \
    \   letter_grades[i]='C+' \n        elseif grades[i]<=1.7 then\n            letter_grades[i]='C'\
    \ \n        elseif grades[i]<=1.3 then\n            letter_grades[i]='C-' \n \
    \       elseif grades[i]<=1.0 then\n            letter_grades[i]='D+' \n     \
    \   elseif grades[i]<=0.5 then\n            letter_grades[i]='D' \n        elseif\
    \ grades[i]<=0.0 then\n            letter_grades[i]='D-'\n        else\n     \
    \       letter_grades[i]='E'\n        end\n    end\n    return letter_grades\n\
    end\n</code>\n<|/ a tags=lua |>\n<| a |>\n<code>", "  -- Write your code below!\n\
    \  -- It is a simple formula:\n  -- grades * 'A' + '+', grades * 'B' + '-' ...\n\
    \  -- It works because there are 12 different grades.\n  -- The grades are converted\
    \ to strings so that they are numerical, \n  -- then multiplied with the letters\
    \ 'A', 'B', 'C' etc.\n  -- Then we add '+' (+) or '-' (-) depending on the grade.\n\
    \  -- So for example:\n  -- grades * 'A' + '+' ==> 4*'A' + '+' = 'AA+', grades\
    \ * 'A' + '-' == 'A-'\n  -- grades * 'B' + '+' ==> 3*'A' + '+' = 'AB+', grades\
    \ * 'B' + '-' == 'B-'\n  -- grades * 'C' + '+' ==> 2*'A' + '+' = 'AC+', grades\
    \ * 'C' + '-' == 'C-'\n  -- ...\n  -- grades * 'A' + '+' ==> 3*'A' + '+' = 'AA+',\
    \ grades * 'B' + '-' == 'B-'\n  -- grades * 'A' + '-' ==> 3*'A' + '-' == 'A-',\
    \ grades * 'B' + '-' == 'B-'\n  -- grades * 'B' + '-' ==> 3*'A' + '-' == 'A-',\
    \ grades * 'B' + '-' == 'B-'\n  -- ...\n  -- grades * 'B' + '+' ==> 2*'A' + '+',\
    \ grades * 'B' + '-' == 'B-'\n  -- grades * 'B' + '-' ==> 2*'A' + '-' == 'A-',\
    \ grades * 'B' + '-' == 'B-'\n  -- grades * 'C' + '+' ==> 1*'A' + '+', grades\
    \ * 'C' + '-' == 'C-'\n  -- grades * 'C' + '-' ==> 1*'A' + '-' == 'A-', grades\
    \ * 'C' + '-' == 'C-'\n  -- ...\n  -- grades * 'C' + '+' ==> 1*'A' + '+', grades\
    \ * 'C' + '-' == 'C-'\n  -- grades * 'C' + '-' ==> 1*'A' + '-' == 'A-', grades\
    \ * 'C' + '-' == 'C-'\n  -- ...\n  -- grades * 'C' + '+' ==> 1*'A' + '+', grades\
    \ * 'C' + '-' == 'C-'\n  -- grades * 'C' + '-' ==> 1*'A' + '-' ", "\tlocal result\
    \ = {}\n\tfor i = 1, #grades do\n\t\tlocal gpa = grades[i]\n\t\tif gpa >= 4.0\
    \ then\n\t\t\tresult[i] = 'A+'\n\t\telseif gpa >= 3.7 then\n\t\t\tresult[i] =\
    \ 'A'\n\t\telseif gpa >= 3.3 then\n\t\t\tresult[i] = 'A-'\n\t\telseif gpa >= 3.0\
    \ then\n\t\t\tresult[i] = 'B+'\n\t\telseif gpa >= 2.7 then\n\t\t\tresult[i] =\
    \ 'B'\n\t\telseif gpa >= 2.3 then\n\t\t\tresult[i] = 'B-'\n\t\telseif gpa >= 2.0\
    \ then\n\t\t\tresult[i] = 'C+'\n\t\telseif gpa >= 1.7 then\n\t\t\tresult[i] =\
    \ 'C'\n\t\telseif gpa >= 1.3 then\n\t\t\tresult[i] = 'C-'\n\t\telseif gpa >= 1.0\
    \ then\n\t\t\tresult[i] = 'D+'\n\t\telseif gpa >= 0.7 then\n\t\t\tresult[i] =\
    \ 'D'\n\t\telseif gpa >= 0.0 then\n\t\t\tresult[i] = 'D-'\n\t\telseif gpa >= 0.0\
    \ then\n\t\t\tresult[i] = 'E'\n\t\tend\n\tend\n\treturn result\nend", "\tlocal\
    \ num_grades = {}\n\t\n\t-- Add student grade to num_grades\n\tlocal count = 0\n\
    \tfor _, grade in pairs(grades) do\n\t\tcount = count + 1\n\t\tlocal gpa = math.floor(grade\
    \ / 2.0)\n\t\tif gpa > 0 then\n\t\t\tnum_grades[count] = gpa .. '+'\n\t\telseif\
    \ gpa < 0 then\n\t\t\tnum_grades[count] = '-' .. gpa .. '-'\n\t\telse\n\t\t\t\
    num_grades[count] = 'E'\n\t\tend\n\tend", "    local sum = 0.0\n    for i = 1,\
    \ #grades do\n        sum = sum + grades[i]\n    end\n    local numerical_grade\
    \ = ''\n    local index = round(sum/10)\n    numerical_grade = string.format('%1.1f',\
    \ index * 10)\n    if index < 10 then\n        numerical_grade = string.format('%1.1f',\
    \ index * 10) + numerical_grade\n    end\n    return numerical_grade\nend", "\t\
    local grades_string = string.format(\" {%.2f}+\", grades)\n\tlocal result = \"\
    \"\n\tlocal gpas_number = tonumber(grades_string)\n\t\n\tif gpas_number ~= nil\
    \ then\n\t\tlocal a = math.floor(grades / (4.0 / 3.0))\n\t\tlocal b = math.floor((grades\
    \ - (a * 4.0 / 3.0)) / (3.0 / 2.0))\n\t\tlocal c = math.floor((grades - (a * 4.0\
    \ / 3.0) - b * 3.0 / 2.0) / (3.0 / 2.0))\n\t\tlocal d = math.floor((grades - (a\
    \ * 4.0 / 3.0) - b * 3.0 / 2.0) - c * 3.0 / 2.0)\n\t\tlocal e = math.floor((grades\
    \ - (a * 4.0 / 3.0) - b * 3.0 / 2.0) - c * 3.0 / 2.0) - d\n\t\tlocal lettergrade\
    \ = \"F\"\n\t\tif a > 0 then\n\t\t\tif b > 0 then\n\t\t\t\tlettergrade = \"D-\"\
    \n\t\t\telseif c > 0 then\n\t\t\t\tlettergrade = \"C-\"\n\t\t\telseif d > 0 then\n\
    \t\t\t\tlettergrade = \"B-\"\n\t\t\telseif e > 0 then\n\t\t\t\tlettergrade = \"\
    B-\"\n\t\t\telse\n\t\t\t\tlettergrade = \"A-\"\n\t\t\tend\n\t\telseif b > 0 then\n\
    \t\t\tlettergrade = \"D\"\n\t\telseif c > 0 then\n\t\t\tlettergrade = \"C\"\n\t\
    \telseif d > 0 then\n\t\t\tlettergrade = \"B\"\n\t\telseif e > 0 then\n\t\t\t\
    lettergrade = \"B\"\n\t\telse\n\t\t\tlettergrade = \"A\"\n\t\tend\n\t\t\n\t\t\
    result = string.format(\"{%s}\", lettergrade)\n\telse\n\t\tresult = \"E\"\n\t\
    end", "\tlocal grades_sorted = table.sort(grades)\n\t\n\t-- Find the minimum and\
    \ maximum\n\tlocal minimum = grades_sorted[1]\n\tlocal maximum = grades_sorted[#grades_sorted]",
  "    local gpa = grades[1]\n    local letterGrades = {}\n    if gpa >= 4.0 then\n\
    \        letterGrades[#letterGrades + 1] = 'A+'\n    elseif gpa > 3.7 then\n \
    \       letterGrades[#letterGrades + 1] = 'A'\n    elseif gpa > 3.3 then\n   \
    \     letterGrades[#letterGrades + 1] = 'A-'\n    elseif gpa > 3.0 then\n    \
    \    letterGrades[#letterGrades + 1] = 'B+'\n    elseif gpa > 2.7 then\n     \
    \   letterGrades[#letterGrades + 1] = 'B'\n    elseif gpa > 2.3 then\n       \
    \ letterGrades[#letterGrades + 1] = 'B-'\n    elseif gpa > 2.0 then\n        letterGrades[#letterGrades\
    \ + 1] = 'C+'\n    elseif gpa > 1.7 then\n        letterGrades[#letterGrades +\
    \ 1] = 'C'\n    elseif gpa > 1.3 then\n        letterGrades[#letterGrades + 1]\
    \ = 'C-'\n    elseif gpa > 1.0 then\n        letterGrades[#letterGrades + 1] =\
    \ 'D+'\n    elseif gpa > 0.7 then\n        letterGrades[#letterGrades + 1] = 'D'\n\
    \    elseif gpa > 0.0 then\n        letterGrades[#letterGrades + 1] = 'D-'\n \
    \   else\n        letterGrades[#letterGrades + 1] = 'E'\n    end\n    return letterGrades\n\
    end\n</code>\n<|/ a tags=lua,garrys-mod |>\n<| a |>\nI assume that the problem\
    \ of obtaining GPA grades is to find a way to find the best grade (according to\
    \ the criteria of your problem statement).\nIf you just want to do it, you can\
    \ use the following algorithm:", "    local first_grade = string.sub(grades[1],\
    \ 1, 1)\n    local second_grade = string.sub(grades[3], 1, 1)\n    local third_grade\
    \ = string.sub(grades[2], 1, 1)\n    local fourth_grade = string.sub(grades[4],\
    \ 1, 1)\n    local fifth_grade = string.sub(grades[5], 1, 1)\n    if first_grade\
    \ == '+' and second_grade == '+' and third_grade == '-' and fourth_grade == '+'\
    \ and fifth_grade == '-' then\n        return 'E'\n    else\n        local gpA\
    \ = tonumber(grades[1])\n        if gpA <= 3.0 and gpA > 0.0 then\n          \
    \  return 'A+'\n        elseif gpA <= 2.7 and gpA > 3.0 then\n            return\
    \ 'A'\n        elseif gpA <= 2.3 and gpA > 2.7 then\n            return 'A-'\n\
    \        elseif gpA <= 1.0 and gpA > 2.3 then\n            return 'B+'\n     \
    \   elseif gpA <= 0.7 and gpA > 1.0 and third_grade == '+' then\n            return\
    \ 'B'\n        elseif gpA <= 0.3 and gpA > 0.7 and third_grade == '-' then\n \
    \           return 'B-'\n        elseif gpA <= 0.0 and gpA > 0.3 and third_grade\
    \ == '-' then\n            return 'C+'\n        elseif gpA <= -0.3 and gpA > 0.0\
    \ and third_grade == '+' then\n            return 'C'\n        elseif gpA <= -0.7\
    \ and gpA > -0.3 and third_grade == '-' then\n            return 'C-'\n      \
    \  elseif gpA <= -1.0 and gpA > -0.7 and third_grade == '-' then\n           \
    \ return 'D+'\n        elseif gpA <= -0.0 and gpA > -1.0 and third_grade == '+'\
    \ then\n            return 'D'\n        elseif gpA <= -1.7 and gpA > -0.0 and\
    \ third_grade == '+' then\n            return 'D-'\n        else\n           \
    \ return 'E'\n        end\n    end\nend", "    local output = {}\n    for i =\
    \ 1, #grades do\n        if (grades[i] > 0 and grades[i] <= 3.7) and (i~=1) then\n\
    \            output[i] = \"A+\"\n        end\n        if (grades[i] > 3.7 and\
    \ grades[i] <= 3.3) and (i~=#grades) then\n            output[i] = \"A\"\n   \
    \     end\n        if (grades[i] > 3.3 and grades[i] <= 3.0) and (i~=#grades)\
    \ then\n            output[i] = \"A-\"\n        end\n        if (grades[i] > 3.0\
    \ and grades[i] <= 2.7) and (i~=#grades) then\n            output[i] = \"B+\"\n\
    \        end\n        if (grades[i] > 2.7 and grades[i] <= 2.3) and (i~=#grades)\
    \ then\n            output[i] = \"B\"\n        end\n        if (grades[i] > 2.3\
    \ and grades[i] <= 2.0) and (i~=#grades) then\n            output[i] = \"B-\"\n\
    \        end\n        if (grades[i] > 2.0 and grades[i] <= 1.7) and (i~=#grades)\
    \ then\n            output[i] = \"C+\"\n        end\n        if (grades[i] > 1.7\
    \ and grades[i] <= 1.3) and (i~=#grades) then\n            output[i] = \"C\"\n\
    \        end\n        if (grades[i] > 1.3 and grades[i] <= 1.0) and (i~=#grades)\
    \ then\n            output[i] = \"C-\"\n        end\n        if (grades[i] > 1.0\
    \ and grades[i] <= 0.7) and (i~=#grades) then\n            output[i] = \"D+\"\n\
    \        end\n        if (grades[i] > 0.7 and grades[i] <= 0.0) and (i~=#grades)\
    \ then\n            output[i] = \"D\"\n        end\n        if (grades[i] == 0.0)\
    \ then\n            output[i] = \"D-\"\n        end\n        if (grades[i] ==\
    \ 0.0) then\n            output[i] = \"E\"\n        end\n    end\n    return output\n\
    end", "  local letters = {'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+',\
    \ 'D', 'D-', 'E-'}\n  local grades_count = #grades\n  local letter_grades = {\
    \ }\n  \n  -- Make sure the grades are in descending order.\n  for _, grade in\
    \ ipairs(grades) do\n    grades[grade] = -grade\n  end", "\tlocal grade_table\
    \ = {}\n\tgrade_table['0'] = 'E'\n\tgrade_table['1'] = 'A'\n\tgrade_table['2']\
    \ = 'B'\n\tgrade_table['3'] = 'C'\n\tgrade_table['4'] = 'D'\n\tgrade_table['5']\
    \ = 'E'\n\tgrade_table['6'] = 'F'\n\tgrade_table['7'] = 'G'\n\tgrade_table['8']\
    \ = 'H'\n\tgrade_table['9'] = 'I'\n\tgrade_table['10'] = 'J'\n\tgrade_table['11']\
    \ = 'K'\n\tgrade_table['12'] = 'L'\n\tgrade_table['13'] = 'M'\n\tgrade_table['14']\
    \ = 'N'\n\tgrade_table['15'] = 'O'\n\tgrade_table['16'] = 'P'\n\tgrade_table['17']\
    \ = 'Q'\n\tgrade_table['18'] = 'R'\n\tgrade_table['19'] = 'S'\n\tgrade_table['20']\
    \ = 'T'\n\tgrade_table['21'] = 'U'\n\tgrade_table['22'] = 'V'\n\tgrade_table['23']\
    \ = 'W'\n\tgrade_table['24'] = 'X'\n\tgrade_table['25'] = 'Y'\n\tgrade_table['26']\
    \ = 'Z'\n\tlocal num = 0\n\tfor i, _ in pairs(grades) do\n\t\tif num < math.floor(grades[i])\
    \ then\n\t\t\tnum = math.floor(grades[i])\n\t\tend\n\tend\n\treturn grade_table[num]\n\
    end", "    local ret = \"\"\n    for i = 1, #grades do\n        local gpa =  grades[i]\n\
    \        if gpa < 4.0 then\n            ret = ret + \"'A+'\"\n        elseif gpa\
    \ > 3.7 then\n            ret = ret + \"'A'\"\n        elseif gpa > 3.3 then\n\
    \            ret = ret + \"'A-'\"\n        elseif gpa > 3.0 then\n           \
    \ ret = ret + \"'B+'\"\n        elseif gpa > 2.7 then\n            ret = ret +\
    \ \"'B'\"\n        elseif gpa > 2.3 then\n            ret = ret + \"'B-'\"\n \
    \       elseif gpa > 2.0 then\n            ret = ret + \"'C+'\"\n        elseif\
    \ gpa > 1.7 then\n            ret = ret + \"'C'\"\n        elseif gpa > 1.3 then\n\
    \            ret = ret + \"'C-'\"\n        elseif gpa > 1.0 then\n           \
    \ ret = ret + \"'D+'\"\n        elseif gpa > 0.7 then\n            ret = ret +\
    \ \"'D'\"\n        elseif gpa > 0.0 then\n            ret = ret + \"'D-'\"\n \
    \       elseif gpa == 0.0 then\n            ret = ret + \"'E'\"\n        end\n\
    \    end\n    return ret\nend", "   local grades_set = { }\n   local i = 0\n \
    \  for _, grade in pairs(grades) do\n      grades_set[#grades_set+1] = grade\n\
    \      i = i+1\n   end", "   local results = {}\n   local grade_sum = 0\n   for\
    \ _, grade in ipairs(grades) do\n      if grade > 0 then\n         grade_sum =\
    \ grade_sum + grade\n      end\n   end\n   if grade_sum then\n      if grade_sum\
    \ > 0 then\n         local gpa = grade_sum / 4.0\n         if gpa < 3.7 then\n\
    \            results[#results+1] = 'A+'\n         elseif gpa > 3.3 then\n    \
    \        results[#results+1] = 'A'\n         elseif gpa > 3 then\n           \
    \ results[#results+1] = 'A-'\n         elseif gpa > 2.7 then\n            results[#results+1]\
    \ = 'B+'\n         elseif gpa > 2.3 then\n            results[#results+1] = 'B'\n\
    \         elseif gpa > 2 then\n            results[#results+1] = 'B-'\n      \
    \   elseif gpa > 1.7 then\n            results[#results+1] = 'C+'\n         elseif\
    \ gpa > 1.3 then\n            results[#results+1] = 'C'\n         elseif gpa >\
    \ 1 then\n            results[#results+1] = 'C-'\n         elseif gpa > 0.7 then\n\
    \            results[#results+1] = 'D+'\n         elseif gpa > 0 then\n      \
    \      results[#results+1] = 'D'\n         else\n            results[#results+1]\
    \ = 'D-'\n         end\n      else\n         results[#results+1] = 'E'\n     \
    \ end\n   end\n   return results\nend\n</cell>\n<cell>", "    local letters =\
    \ { 'A', 'B', 'C', 'D', 'E' }\n    local results = {}\n    for i, grade in pairs(grades)\
    \ do\n        results[i] = letters[math.ceil(grade)]\n    end\n    return results\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
