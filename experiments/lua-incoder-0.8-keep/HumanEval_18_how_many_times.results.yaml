name: HumanEval_18_how_many_times
language: lua
results:
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == '' or substring\
    \ == '' then return 0 end\n  local matches = 0\n  for i, c in ipairs(string) do\n\
    \    if c == '' and substring[i] ~= '' then matches += 1 end\n    if c == substring[i]\
    \ then matches += 1 end\n  end\n  return matches\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0fsx48w4.lua:12: syntax error near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  local last_index\
    \ = 0\n  for index = 1, #string do\n    if string.sub(string, index, index) ==\
    \ substring then\n      count = count + 1\n      last_index = index\n    end\n\
    \  end\n  return count, last_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5ave8de.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpy5ave8de.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub( substring,\
    \ string, \"%0\" .. string.len(substring) .. \"%\" ):gsub(\"%0*([%d]+)\", nil)\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpywlfjuap.lua:10: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  local pos\
    \ = 1\n  while pos <= #string do\n    count = count + 1\n    if string.sub(i,\
    \ pos) == substring then\n      count = count + 1\n      pos = string.find(string,\
    \ substring, pos)\n    end\n    pos = pos + 1\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsomq22zl.lua:13:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpsomq22zl.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpsomq22zl.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, string.len() do\n    if string.sub(i, i, i + string.len(substring)) = substring\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzn5o25h9.lua:11: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if not string or not substring\
    \ then return 0 end\n    local count = 0\n    local i, j = string.find(string,\
    \ substring, 1, true)\n    while j do\n        i = j - 1\n        count = count\
    \ + 1\n        j = string.find(string, substring, i + 1)\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count, start, index\
    \ = 0, 0, 1\n    local substring_index\n    for index = 1, #string do\n      \
    \  substring_index = string.find(substring, string, index)\n        if substring_index\
    \ == nil then\n            break\n        end\n        index = substring_index\
    \ + #substring\n        if substring_index == 0 then\n            count = count\
    \ + 1\n        else\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1qhlqew.lua:30:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx1qhlqew.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local i, count = 0, 1\n  for\
    \ i = 1, #string do\n    if string[i] == substring then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tcte6gf.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_tcte6gf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i, c in ipairs(string) do\n        if c == substring then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo0fudo7.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpbo0fudo7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == nil then\n\
    \        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr7dv41_d.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local found = {}\n    for\
    \ _, c in string.gmatch('([^' .. substring .. ']+)') do\n        if not found[c]\
    \ then\n            found[c] = 1\n        else\n            found[c] = found[c]\
    \ + 1\n        end\n    end\n    return #found\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5edi55xo.lua:10:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp5edi55xo.lua:10: in local 'candidate'\n\t/tmp/tmp5edi55xo.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, string.len() do\n    if string.sub(i, i, i + substring.len()) == substring\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97n7hkq2.lua:10:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp97n7hkq2.lua:10: in local 'candidate'\n\t/tmp/tmp97n7hkq2.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   return string.gsub(string,\
    \ string, \"%#\"..substring..\"a\").gsub(string, string, \"%#\"..substring..\"\
    b\").gsub(string, string, \"%#\"..substring..\"c\").gsub(string, string, \"%#\"\
    ..substring..\"d\").gsub(string, string, \"%#\"..substring..\"e\").gsub(string,\
    \ string, \"%#\"..substring..\"f\").gsub(string, string, \"%#\"..substring..\"\
    g\").gsub(string, string, \"%#\"..substring..\"h\").gsub(string, string, \"%#\"\
    ..substring..\"i\").gsub(string, string, \"%#\"..substring..\"j\").gsub(string,\
    \ string, \"%#\"..substring..\"k\").gsub(string, string, \"%#\"..substring..\"\
    l\").gsub(string, string, \"%#\"..substring..\"m\").gsub(string, string, \"%#\"\
    ..substring..\"n\").gsub(string, string, \"%#\"..substring..\"o\").gsub(string,\
    \ string, \"%#\"..substring..\"p\").gsub(string, string, \"%#\"..substring..\"\
    q\").gsub(string, string, \"%#\"..substring..\"r\").gsub(string, string, \"%#\"\
    ..substring..\"s\").gsub(string, string, \"%#\"..substring..\"t\").gsub(string,\
    \ string, \"%#\"..substring..\"u\").gsub(string, string, \"%#\"..substring..\"\
    v\").gsub(string, string, \"%#\"..substring..\"w\").gsub(string, string, \"%#\"\
    ..substring..\"x\").gsub(string, string, \"%#\"..substring..\"y\").gsub(string,\
    \ string, \"%#\"..substring..\"z\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpssp44lky.lua:9:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpssp44lky.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpssp44lky.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local length = 0\n  local i = 0\n  while\
    \ i <= #string do\n    length = length + 1\n    if string.find(substring, string[i],\
    \ i) ~= nil then\n      i = string.find(substring, string[i], i + 1)\n    end\n\
    \    i = i + 1\n  end\n  return length\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpso278env.lua:16:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpso278env.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpso278env.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local num_times = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprunwu974.lua:20: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local match = {}\n  for i\
    \ = 1, string.find(string, substring) do\n    table.insert(match, i)\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9kcp7im3.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\twhile string.find(substring,\
    \ string) >= 0 do\n\t\tcount = count + 1\n\t\tstring = string.sub(string, 1, string.len(string)\
    \ - string.len(substring))\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local counter = 0\n  for i\
    \ = 1, #string do\n    if string.sub(i, i) == substring then\n      counter =\
    \ counter + 1\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqohvepz.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpaqohvepz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\t-- We have to do some extra\
    \ checking to deal with overlaps.\n\tif string:len() >= substring:len() then\n\
    \t\treturn 0\n\telseif string:len() < substring:len() then\n\t\treturn string.tolower()\
    \ - substring:lower()\n\telse\n\t\tlocal count = 0\n\t\tlocal i = 1\n\t\twhile\
    \ i <= (string:len() - substring:len()) do\n\t\t\tcount = count + (string:sub(i,\
    \ i + substring:len()):lower():len())\n\t\t\ti = i + substring:len()\n\t\tend\n\
    \t\treturn count\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjah2gvkl.lua:13:\
    \ attempt to call a nil value (field 'tolower')\nstack traceback:\n\t/tmp/tmpjah2gvkl.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjah2gvkl.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tstring.gsub(substring,\
    \ function(c)\n\t\tcount = count + 1\n\tend)\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprvvukkft.lua:10:\
    \ bad argument #2 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmprvvukkft.lua:10: in local 'candidate'\n\t/tmp/tmprvvukkft.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tif string == nil or substring\
    \ == nil then\n\t\treturn 0\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp92b64fdv.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  -- Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n  if\
    \ string == '' or string == nil then\n    return 0\n  end\n  local len_string\
    \ = string.len\n  if len_string == nil then\n    len_string = function() return\
    \ #string end\n  end\n  -- Return early if substring can't be found anywhere in\
    \ the string.\n  if string == substring or string.sub(string, 1, len_string(substring)\
    \ - 1) ~= substring then\n    return 0\n  end\n  local len_substring = string.len\n\
    \  if len_substring == nil then\n    len_substring = function() return #substring\
    \ end\n  end\n  local i = 0\n  while i <= len_string(substring) - 1 do\n    --\
    \ Find the beginning and end indexes of substring.\n    local start_index = string.find(string,\
    \ substring, 1, i)\n    if start_index == nil then\n      break\n    end\n   \
    \ local end_index = string.find(string, substring, start_index + 1, len_string(string))\n\
    \    if end_index == nil then\n      break\n    end\n    i = end_index + 1\n \
    \   local start_index = string.find(string, substring, 1, i)\n    if start_index\
    \ == nil then\n      break\n    end\n    local end_index = string.find(string,\
    \ substring, start_index + 1, len_string(string))\n    if end_index == nil then\n\
    \      break\n    end\n    i = end_index + 1\n    local start_index = string.find(string,\
    \ substring, 1, i)\n    if start_index == nil then\n      break\n    end\n   \
    \ local end_index = string.find(string, substring, start_index + 1, len_string(string))\n\
    \    if end_index == nil then\n      break\n    end\n    i = end_index + 1\n \
    \   local start_index = string.find(string, substring, 1, i)\n    if start_index\
    \ == nil then\n      break\n    end\n    local end_index = string.find(string,\
    \ substring, start_index + 1, len_string(string))\n    if end_index == nil then\n\
    \      break\n    end\n    i = end_index + 1\n    local start_index = string.find(string,\
    \ substring, 1, i)\n    if start_index == nil then\n      break\n    end\n   \
    \ local end_index = string.find(string, substring, start_index + 1, len_string(string))\n\
    \    if end_index == nil then\n      break\n    end\n    i = end_index + 1\n \
    \   -- Return how many times the substring was found.\n    return string.len(string)\
    \ - end_index\n  end\n  -- Return 0 if no substring was found.\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ca1x6or.lua:84:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9ca1x6or.lua:84: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = string\n \
    \   count = string..substring\n    for i = 1, #string do\n        count = count:sub(1,#count)\n\
    \        if string.find(string, substring) >= 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sd7y_4u.lua:23:\
    \ expected: 0, actual: \"x\"\nstack traceback:\n\t/tmp/tmp4sd7y_4u.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string[i] == substring then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg03yiacl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg03yiacl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ substring, \"%1\") == \"\" or\n    string.gsub(string, substring, \"\") == \"\
    \" or\n    string.gsub(string, substring, \"\") == \"1\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3m1zz1oe.lua:17:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmp3m1zz1oe.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   for i = 1, string.len(string)\
    \ do\n      if string.sub(i, i) ~= substring then return 0 end\n   end\n   return\
    \ string.len(string)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1adkzej.lua:19:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpr1adkzej.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ substring, function(c)\n    return string.len(string.sub(c, -1, -1))\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18jat7gm.lua:17:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmp18jat7gm.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  repeat\n\
    \    count = count + 1\n  until string.find(substring, string) ~= nil\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhvlcw6b.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdhvlcw6b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string:gsub(\"(\"\
    \ .. substring .. \")\", string.match or function(substring, substring)\n    \
    \    return string.gsub(substring, string, 1)\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xt13knm.lua:17:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmp9xt13knm.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if substring == \"\" then\n\
    \    return 0\n  end\n  if string.find(substring) then\n    return string.find(substring)\
    \ - string.sub(string, 1, string.find(substring) - 1)\n  end\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpybpm4zlp.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpybpm4zlp.lua:12: in local 'candidate'\n\t/tmp/tmpybpm4zlp.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string:gsub(\"(^|\\\
    \\W)\" .. substring .. \"($|\\\\W)\", ''):match(\"^%D\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuvpn0py.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpvuvpn0py.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string.gsub(string,\
    \ substring)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79uvt7yy.lua:9:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp79uvt7yy.lua:9: in local 'candidate'\n\t/tmp/tmp79uvt7yy.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string.find(string) ==\
    \ nil then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps2vzya2q.lua:20: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\treturn string.match(string,\
    \ \"%W\") ~= nil and string.match(string, substring) or nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lt2owhz.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp6lt2owhz.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ substring in string.gmatch(string, \"(.-)%S+\") do\n        count = count +\
    \ 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xn_b608.lua:20:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp0xn_b608.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local n = #string - (#substring\
    \ + 2)\n  local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz98zrckc.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   -- Find the starting index\
    \ where the first occurrence of substring starts in the string.\n   local index\
    \ = string.find(string, \"^\" .. substring)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp49sur4d9.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   if string == nil then\n \
    \     return 0\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd6543kg7.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ substring, \"%d*\"):match(\"%d*\"):gsub(\"%d*\", \"%2\"):gsub(\"%2\", \"\"):gsub(\"\
    %d*\", \"%d\"):gsub(\"%d*\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps6iev9sc.lua:9:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmps6iev9sc.lua:9: in local\
    \ 'candidate'\n\t/tmp/tmps6iev9sc.lua:15: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == nil then return\
    \ 0 end\n    if string.find(substring, '') then\n        local count = 0\n   \
    \     local pos = 1\n        local max_pos = string.find(substring, '^') -- Find\
    \ where the substring starts in the string\n        while string.find(substring,\
    \ '^', pos) do -- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n            count = count + 1\n           \
    \ pos = pos + 1\n        end\n        return count\n    else\n        return 0\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcp_87emk.lua:27:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpcp_87emk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ substring, ''):gsub('()', ''):gsub(',', ''):gsub(' ', ''):gsub('.', '')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjt7jpa1.lua:15:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpkjt7jpa1.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == '' or string\
    \ == nil then\n    return 0\n  end\n  local index = string.find(substring, 1,\
    \ 1)\n  if index == nil then\n    return 0\n  elseif index ~= 1 then\n    return\
    \ index\n  end\n  index = string.find(substring, 1, 2)\n  if index == nil then\n\
    \    return 1\n  elseif index == 2 then\n    return 2\n  end\n  index = string.find(substring,\
    \ 1, 3)\n  if index == nil then\n    return 3\n  elseif index == 3 then\n    return\
    \ 4\n  end\n  return 4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqa_11zi.lua:37:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpiqa_11zi.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local pattern = \"(^|[\"\
    \ .. string.gsub(string.gsub(substring, string.gsub('^a', '', substring), pattern=''),\
    \ '$', pattern='') .. \"])\"\n    return string.gsub(string, '' .. pattern ..\
    \ '\\1([^' .. pattern .. ']*)', function(a, b)\n        -- Count the number of\
    \ overlapping matches\n        local matches = string.match(string, b)\n     \
    \   if not matches then\n            return 0\n        end\n        if matches[1]\
    \ == '' then\n            -- The first match will always be '', so subtract one\
    \ to count only the non-overlapping matches\n            return string.len(a)\
    \ - string.len(b)\n        else\n            return string.len(b) - string.len(matches[1])\n\
    \        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmnc2pe8k.lua:9: ')' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == '' or substring\
    \ == '' then return 0 end\n  local count = 1\n  local pos = 0\n  local len = #string\n\
    \  while pos < len do\n    local substr_len = #substring\n    if string.sub(string,\
    \ pos, pos + substr_len) == substring then\n      count = count + 1\n      pos\
    \ = pos + substr_len\n    else\n      count = count - 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for str\
    \ in string.gmatch(string, \"(\" .. substring .. \")+\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyr4z0hb.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpfyr4z0hb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local len_string = string.len(string)\n\
    \    local len_substring = string.len(substring)\n    local count, i, j\n    local\
    \ count_all = 0\n    local count_unique = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz6vu8sn4.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string:gsub('%c'):gsub('%d'):gsub('%w'):gsub('%f'):gsub('%b'):gsub('%i'):gsub('%p'):gsub('%s'):gsub('%x'):gsub('%o'):gsub('%'):gsub('%d%d'):gsub('%+'):gsub('%.'):gsub('%-'):gsub('%.'):gsub('%+.'):gsub('%-.'):gsub('%.'):gsub('%d%d%d'):gsub('%d%d%d%d'):gsub('%d%d%d%d%d'):gsub('%+d'):gsub('%d%d%d'):gsub('%d%d%d%d'):gsub('%d%d%d%d%d'):gsub('%d%d%d%d%d%d'):gsub('%+dd'):gsub('%d%d%d'):gsub('%d%d%d%d'):gsub('%d%d%d%d%d'):gsub('%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d'):gsub('%+dddd'):gsub('%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%+ddddd'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5deglmda.lua:9: unfinished string near ''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = -1\n  string.gsub(substring,\
    \ function(substring)\n    if string.find(string, substring) then\n      count\
    \ = count + 1\n    end\n  end)\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6yxjjdz.lua:10:\
    \ bad argument #2 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmpa6yxjjdz.lua:10: in local 'candidate'\n\t/tmp/tmpa6yxjjdz.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == substring then\
    \ return 1 end\n  local index = 1\n  while true do\n    index = string.find(substring,\
    \ index, true)\n    if index == nil then return end\n    if index == 0 then return\
    \ 0 end\n    index = index + 1\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps7ak1gms.lua:12:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmps7ak1gms.lua:12: in local 'candidate'\n\t/tmp/tmps7ak1gms.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf2i9s__x.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local result = 1\n    for\
    \ i = 1, #string do\n        if string.sub(i, i) == substring then\n         \
    \   result = result + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps30s37v2.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmps30s37v2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   return string.gsub(string,\
    \ \".\", {\n      local count = 1\n      local pos = string.find(string, \".\"\
    , 1, true)\n      while pos do\n         count = count + 1\n         pos = string.find(string,\
    \ substring, pos + 1, true)\n      end\n      return count\n   })\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt5cbs9_z.lua:10: unexpected symbol near 'local'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for c in\
    \ string.gmatch('%' .. substring .. '%') do\n    if string.find(string, c) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5h5uhtza.lua:10:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp5h5uhtza.lua:10: in local 'candidate'\n\t/tmp/tmp5h5uhtza.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string.gsub('%['\
    \ .. substring .. '%.]', function(c) return string.char(tonumber(c)) end, 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxe9j2u20.lua:9:\
    \ bad argument #2 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmpxe9j2u20.lua:9: in local 'candidate'\n\t/tmp/tmpxe9j2u20.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\t-- if there are no occurrences,\
    \ it can't be a substring.\n\tif string == '' or substring == '' then\n\t\treturn\
    \ 0\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0timoc9c.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local result = 0\n  local\
    \ substring_length = #substring\n  for i = 1, #string do\n    if string[i] ==\
    \ substring then\n      result = result + 1\n      if result > substring_length\
    \ then\n        return result\n      end\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp329d02x7.lua:26:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp329d02x7.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0nfia9zw.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  elseif string == '' or substring == '' then\n \
    \   return 1\n  elseif string ~= substring then\n    return 0\n  else\n    --\
    \ Find the first position of substring in the string.\n    local position = 1\n\
    \    local position = string.find(string, substring, position)\n    -- If the\
    \ substring is not found, count the substring as zero.\n    if position == nil\
    \ then\n      return 0\n    end\n    -- If the substring is found, find the first\
    \ position of last character and count the substring.\n    local start = position\n\
    \    while start < string.len() do\n      position = string.find(string, substring,\
    \ start + 1)\n      if position == nil then\n        return string.len() - start\
    \ - 1\n      end\n      start = position\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52men57c.lua:38:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp52men57c.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\treturn string.gsub(string,\
    \ substring, function(...)\n\t\treturn tonumber(...)\n\tend)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsu8icd69.lua:17:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpsu8icd69.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string.find(substring)\
    \ ~= nil then return 1 + string.find(substring, 1, string.len(string)) end\n \
    \ local matches = 0\n  while string.find(substring) ~= nil do\n    matches = matches\
    \ + 1\n    string = string.sub(string, string.find(substring) + string.len(substring))\n\
    \  end\n  return matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw147ppqi.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpw147ppqi.lua:9: in local 'candidate'\n\t/tmp/tmpw147ppqi.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, char in string:gmatch(\"%S+\") do\n        if char == substring then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yjqb3u2.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp1yjqb3u2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return #string + #substring\
    \ - (string.find(string) or 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6cflyox9.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp6cflyox9.lua:9: in local 'candidate'\n\t/tmp/tmp6cflyox9.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local substring_index =\
    \ 1\n    local count = 0\n    for index, chars in ipairs(string) do\n        if\
    \ chars == substring then\n            count = count + 1\n            if count\
    \ > substring_index then\n                substring_index = index\n          \
    \  end\n        end\n    end\n    return substring_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xqaqtqb.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6xqaqtqb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, i - #substring) == substring then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzlqjx1u.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpxzlqjx1u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 1\n    for\
    \ i = 1, #string do\n        if string.sub(i, #i - 1) == substring then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx2w0gj6.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjx2w0gj6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local matches = 0\n  for _,\
    \ chars in pairs(string.gmatch(string, \"(.-)\"..substring..\"(.-)\", 'o')) do\n\
    \    if chars == nil then break end\n    matches = matches + 1\n  end\n  return\
    \ matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcs4kwab3.lua:10:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpcs4kwab3.lua:10: in local 'candidate'\n\t/tmp/tmpcs4kwab3.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string.gsub(string.gsub(string,\
    \ substring, 1), substring, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl86z3lrp.lua:15:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpl86z3lrp.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == substring then\
    \ return 1 end\n    if substring == '' then return 0 end\n    local num_occurrences\
    \ = 0\n    local current_start = 1\n    local current_end = #string\n    while\
    \ current_start <= current_end do\n        local search_start = string.find(substring,\
    \ string, current_start, 'last')\n        local search_end = string.find(substring,\
    \ string, current_start, 'last')\n        if search_start ~= nil and search_end\
    \ ~= nil then\n            num_occurrences = num_occurrences + 1\n           \
    \ current_start = search_end\n        else\n            return num_occurrences\n\
    \        end\n    end\n    return num_occurrences\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zy_0p14.lua:31:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp5zy_0p14.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == substring then\n\
    \        return 0\n    end\n    local count = 0\n    for i = 1, #string do\n \
    \       if string.sub(i, #string) == substring then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsy4lq7o.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpcsy4lq7o.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"[^\" .. substring .. \"]+\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82wjgust.lua:20:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp82wjgust.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"[^\"..substring..\"]\") do\n        if string.sub(c,\
    \ 1, 1) == substring then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mh2f6s2.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp0mh2f6s2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local start = 0 -- index in\
    \ the original string\n  local substring_index = string.find(string, substring)\n\
    \  while substring_index do\n    -- find next character in original string\n \
    \   local index_in_substring = substring_index + 1\n    if index_in_substring\
    \ > #string then break end\n    local index = string.find(string, substring, index_in_substring)\n\
    \    -- If the substring has been found, get the string between the start and\
    \ end indices\n    if index then\n      start = start + index\n      substring_index\
    \ = substring_index + string.sub(string, index, index_in_substring) - index\n\
    \    end\n    -- move to next character in the original string\n    substring_index\
    \ = string.find(string, substring, index_in_substring)\n  end\n  return start\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj43r1n3i.lua:19:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpj43r1n3i.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpj43r1n3i.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ substring, function()\n    return string[#string] + 1\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdikyy0b.lua:17:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpjdikyy0b.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tif string == nil then\n\t\t\
    return 0\n\tend\n\tif substring == nil then\n\t\treturn 1\n\tend\n\tlocal count\
    \ = 0\n\tfor i, c in ipairs(string) do\n\t\tif c == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpdlvs4t.lua:28:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmphpdlvs4t.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == nil or substring\
    \ == nil then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzrymp2g0.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count=0\n\tfor char=string.sub(string,1,string.len(substring))\
    \ do\n\t\tif char==substring then\n\t\t\tcount=count+1\n\t\telse\n\t\t\tcount=count+1\
    \ -- count overlaping cases\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz6xakuyy.lua:10: ',' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ \"(\" .. substring .. \")\", function(match)\n    return string.match(match,\
    \ substring) + 1 -- Match case-insensitive, therefore add 1.\n  end)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrqe2s76.lua:17:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpkrqe2s76.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local matched, offset =\
    \ 0,0\n    local substring_len = string.len\n    while offset < string.len do\n\
    \        offset = offset + substring_len\n        if string.sub(string, offset,\
    \ offset) == substring then matched = matched + 1 end\n    end\n    return matched\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu8jt3jrn.lua:11:\
    \ attempt to compare number with function\nstack traceback:\n\t/tmp/tmpu8jt3jrn.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpu8jt3jrn.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return nil\n  end\n  -- Count overlapping cases\n  local count_matches\
    \ = 0\n  local current_start = string.find(string, \"^\"):byte()\n  local end_offset\
    \ = string.find(string, \"$\", start_offset, nil, true):byte()\n  while true do\n\
    \    local found = string.find(string, substring, current_start, true)\n    if\
    \ found == nil then\n      break\n    end\n    count_matches = count_matches +\
    \ 1\n    current_start = found + substring.len()\n  end\n  return count_matches\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphdfcwl16.lua:14:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmphdfcwl16.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmphdfcwl16.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = substring ==\
    \ '' or string == nil then 0 else\n    string.gsub('[^' .. substring .. ']', '',\
    \ ''):gsub('[' .. substring .. ']', ''):gsub('%W', ''):gsub('%W', '')\n  -- print(\"\
    string: \", string)\n  -- print(\"substring: \", substring)\n  -- print(\"count:\
    \ \", count)\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5az21nkq.lua:9: unexpected symbol near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.find(substring, string[i]) then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmumw3x8.lua:11:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmphmumw3x8.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphmumw3x8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local n = 0\n  while true\
    \ do\n    local _n = string.find(string, substring, 1, true)\n    if _n == nil\
    \ then break end\n    if string.sub(string, _n + #substring) == substring then\
    \ n = n + 1 end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor _,\
    \ sub in ipairs(string) do\n\t\tif sub == substring then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vr7pve0.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp6vr7pve0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  while true\
    \ do\n    local index = string:find(substring, 1, true) or string\n    if index\
    \ == string then return count end\n    count = count + 1\n    string = index\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplv1sd598.lua:11:\
    \ attempt to index a number value (local 'string')\nstack traceback:\n\t/tmp/tmplv1sd598.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmplv1sd598.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   local count = 0\n   for i\
    \ = 1, #string do\n      if string.sub(i, i, #substring) == substring then\n \
    \        count = count + 1\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo56jhsi.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpbo56jhsi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ match in string.gsub(string, substring, \"([^\" .. substring .. \"]*)\", true)\
    \ do\n        count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14mywpsf.lua:10:\
    \ bad argument #4 to 'gsub' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp14mywpsf.lua:10: in local 'candidate'\n\t/tmp/tmp14mywpsf.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then return 0 end\n  local index = string.find(string, substring, 1)\n\
    \  if index == nil then return 0 end\n  return index + 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkkn22mz.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpbkkn22mz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal num_times = 0\n\tfor\
    \ i, v in ipairs(string.gmatch(string, \"%\" .. substring .. \"(.-)\")) do\n\t\
    \tif v == substring then\n\t\t\tnum_times = num_times + 1\n\t\tend\n\tend\n\t\
    return num_times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ match in string.gmatch(string, \"[^\" .. substring .. \"]\") do\n        count\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxngmc9c.lua:20:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpzxngmc9c.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if not string or not substring\
    \ then return 0 end\n    local count = 0\n    for s in string.gmatch(string, \"\
    (%S+)\") do\n        if substring == s or string.find(string, s, 1, true) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdu_oh62.lua:23:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmphdu_oh62.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local index = 0\n  local index2\
    \ = 0\n  while index <= #string do\n    index2 = string.find(substring, string,\
    \ index + 1) -- Find position of substring\n    if index2 > index then\n     \
    \ return math.max(index2 - index, 1)\n    end\n    index = index2 + 1\n  end\n\
    \  return 0 -- The substring wasn't found\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvcugfky.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsvcugfky.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == '' or substring\
    \ == '' then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, i) == substring then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nhow_many_times = wrap_string(how_many_times)\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr8xxgy0k.lua:20: attempt to call a nil value (global 'wrap_string')\n\
    stack traceback:\n\t/tmp/tmpr8xxgy0k.lua:20: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if not string or not substring\
    \ then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8e4akhrb.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ pos, c in ipairs(string) do\n        if string.sub(c, pos, pos) == substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69fzdjz0.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp69fzdjz0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local cnt = 0\n  for _, c\
    \ in string.gmatch(string, '[^'..substring..']+') do\n    cnt = cnt + (string.sub(c,\
    \ 1, string.len(substring)) == substring)\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp83v1ia1b.lua:11:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp83v1ia1b.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp83v1ia1b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tif string == '' or string\
    \ == '^' then return 0 end\n\tlocal i, j = 1, #string\n\twhile i <= j do\n\t\t\
    if string.sub(i, j) == substring then return i end\n\t\ti, j = i + 1, j + 1\n\t\
    end\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ substring, \"\"):gsub(\"%S+\", function (x)\n    return (#substring) * (#x +\
    \ 1)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuc9485vb.lua:17:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpuc9485vb.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   return string.gsub(string,\
    \ substring, 1).gsub(substring, string, 1, string.len(substring))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1sv4sf_c.lua:15:\
    \ expected: 0, actual: \"1x\"\nstack traceback:\n\t/tmp/tmp1sv4sf_c.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local substring = string.gsub('.', {\n \
    \   ['[%w]'] = function(c) return c end,\n    ['%w'] = function(c) return string.lower(c)\
    \ end,\n  }[substring])\n  local count = 0\n  local index = 1\n  while index <=\
    \ #string do\n    if string.sub(string,index,index+#substring) == substring then\n\
    \      count = count + 1\n      index = index + 1\n    else\n      index = index\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg5si6rp8.lua:15: ')' expected (to close '(' at line 12) near\
    \ '['\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local substring_length = #substring\n\
    \  if substring_length == 0 then return 0 end\n  local count = 0\n  for match\
    \ in (string.gsub(string, '[^'..substring.']+', function(x) return x:len() end))\
    \ do\n    count = count + 1\n    if match == substring then return count end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqxk72cb2.lua:12: <name> expected near '']+''\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 1\n  while true\
    \ do\n    count = count + 1\n    local _, index = string.find(string, substring,\
    \ 1)\n    if index == nil then break end\n    if string.sub(string, index, index\
    \ + 1) ~= substring then break end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsg0hi5qj.lua:22:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpsg0hi5qj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\treturn string:gsub('%a'..substring..'a',\
    \ function(c) -- Find how many times substring occurs in string.\n\t\tif string.find(string,\
    \ substring, 1, true) ~= nil then\n\t\t\t-- Find the start position of the current\
    \ match. Substring has already been counted before.\n\t\t\t-- Substring can be\
    \ found in the original string. Count overlaping cases.\n\t\t\t-- >>> how_many_times('aaaa',\
    \ 'aa')\n\t\t\t-- 3\n\t\t\t-- >>> how_many_times('aaaaa', 'aa')\n\t\t\t-- 3\n\t\
    \t\treturn string.find(string, substring, 1, true) - 1 -- Substring has been counted\
    \ already, so use it's start position to count the overlapping case.\n\t\telse\n\
    \t\t\treturn 0 -- No overlapping case.\n\t\tend\n\tend)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8t27kl9.lua:27:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpy8t27kl9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == '' or substring\
    \ == '' or string ~= substring then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjfg7aqst.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   local count = 0\n   if string\
    \ and substring then\n      local index_string = 1\n      while index_string <=\
    \ string.len and string.sub(1, index_string) == substring do\n         count =\
    \ count + 1\n         index_string = index_string + 1\n      end\n   end\n   return\
    \ count\nend\nreturn how_many_times\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjzqe__0w.lua:20: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ substring):gsub('%W', function() return '\\\\1' end):gsub('%d', '%d'):gsub('%D',\
    \ '%d'):gsub('%%', '%'):gsub('%b', '%b'):gsub('%s', '%s'):gsub('%x', '%x'):gsub('%u',\
    \ '%u'):gsub('%x', '%x'):gsub('%X', '%X'):gsub('%d%d%d', '%d%d%d'):gsub('%d%d%d%d%d',\
    \ '%d%d%d%d%d%d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d', '%+d'):gsub('%+d',\
    \ '\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0s_1lqor.lua:9: unfinished string near '''\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == '' or substring\
    \ == '' then\n    return 0\n  end\n  local count_of_times = 0\n  for substring_start\
    \ in string.gmatch('<(.*?)>') do\n    count_of_times = count_of_times + 1\n  \
    \  local substring = string.sub(substring_start, substring_start + 1)\n    if\
    \ substring == substring then\n      count_of_times = count_of_times + 1\n   \
    \ end\n  end\n  return count_of_times\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjkjg2j6o.lua:13:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpjkjg2j6o.lua:13: in local 'candidate'\n\t/tmp/tmpjkjg2j6o.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal matches = 0\n\tfor i\
    \ = 1, #string do\n\t\tlocal substring_index = string.find(substring, string,\
    \ i)\n\t\tif substring_index ~= nil then\n\t\t\tmatches = matches + 1\n\t\t\t\
    i = substring_index - 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn matches\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78az2v71.lua:26:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp78az2v71.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.find(substring, string, 1, i) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o1mfxib.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp7o1mfxib.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tif string == '' then return\
    \ 0 end\n\tlocal count = 0\n\tfor _, char in string.gmatch(string, '%a'..substring)\
    \ do count = count + 1 end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8re72ot.lua:19:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmph8re72ot.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal i, count = 1, 1\n\t\
    for i = 1, #string do\n\t\tif string.sub(i, i - #substring) == substring then\
    \ count = count + 1 end\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyf40t8i.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphyf40t8i.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ '^%s*'):gsub('%s*$', ''):gsub('%s+', function(c) return c:lower() end):match(tostring(substring))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpth89w0g3.lua:9:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpth89w0g3.lua:9: in local 'candidate'\n\t/tmp/tmpth89w0g3.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _ in\
    \ string.gfind(string, '^' .. substring .. '$') do\n    count = count + 1\n  end\n\
    \  return count\nend\n</cell>\n<text>\nString manipulation and pattern matching\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4zv6qoqr.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == '' then return\
    \ 0 end\n  if substring == '' then return 1 end\n  local i = 0\n  while true do\n\
    \    i = string.find(substring, i, #string)\n    if i == nil then\n      return\
    \ i + 1\n    end\n    i = i + 1\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphy_3dmiq.lua:15:\
    \ attempt to perform arithmetic on a nil value (local 'i')\nstack traceback:\n\
    \t/tmp/tmphy_3dmiq.lua:15: in local 'candidate'\n\t/tmp/tmphy_3dmiq.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    local\
    \ pos = 1\n    while pos <= #string do\n        if string.find(substring, string,\
    \ pos) == pos then\n            count = count + 1\n        end\n        pos =\
    \ pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtdc3bwz.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmprtdc3bwz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if not string or not substring\
    \ then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzrdpoq90.lua:20: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = #string\n\
    \    for i = 1, #substring do\n        if string.find(string, substring) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqg8aeog.lua:22:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpiqg8aeog.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tif string.find(substring,\
    \ string, 1, true) then\n\t\treturn string.find(substring, string, 1, true) -\
    \ string.find(substring, string, 1, 1)\n\telse\n\t\treturn 0\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytvr5yyn.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpytvr5yyn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == '' then\n   \
    \ return 0\n  end\n  if substring == '' then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp342e0_rv.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   for j = 1, string.len(substring)\
    \ do\n      if string.find(string, substring, 1, j) ~= nil then\n         return\
    \ string.len(substring) - j - 1\n      end\n   end\n   return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolkm09a4.lua:20:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpolkm09a4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\t-- First get all the matches\
    \ of our substring within the original string.\n\t-- If there are no matches,\
    \ return 0.\n\tlocal matches = string:gsub(\"(^\" .. substring .. \"$)|($\" ..\
    \ substring .. \"$)\", ''):gsub(\"(.)(\" .. substring .. \"..)(.)\",'\\2'):gsub(\"\
    (.)(\" .. substring .. \")(.)\",'\\2'):gsub(\"(.)(\" .. substring .. \"..)(.)\"\
    ,'\\2')\n\t-- If there are no matches at all, return 0.\n\tif not matches then\n\
    \t\treturn 0\n\tend\n\t-- Else, return the number of matches.\n\treturn matches:match(\"\
    (.)\"):match(\"(\" .. substring .. \"*):*\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpws1yceio.lua:17:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmpws1yceio.lua:17: in\
    \ local 'candidate'\n\t/tmp/tmpws1yceio.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    -- Make all characters lower\
    \ case\n    string = string.lower(string)\n    -- Remove spaces from the substring\
    \ if they exist\n    if substring ~= \"\" then substring = substring.lower() end\n\
    \    -- The count is how many times the substring can be found in the original\
    \ string\n    return string.gsub(substring, \".\", function()\n        local result\
    \ = 1\n        -- If the substring matches at least one time in the original string\n\
    \        for i = 1, #string do\n            -- Check if this character is equal\
    \ to the one at the current index\n            if string.sub(i, i, #substring)\
    \ == substring then\n                -- Increment the result by 1\n          \
    \      result = result + 1\n            end\n        end\n        return result\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfniqigb.lua:12:\
    \ bad argument #1 to 'lower' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpmfniqigb.lua:12: in local 'candidate'\n\t/tmp/tmpmfniqigb.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   -- Special case where substring\
    \ is empty string.\n   if string == '' and substring == '' then\n      return\
    \ 0\n   end\n   if string == '' or substring == '' then\n      return 1\n   end\n\
    \   -- If the substring is longer, substring is longer\n   if #substring > #string\
    \ then\n      return how_many_times(substring, string)\n   end\n   -- The substrings\
    \ cannot be the same, just compare\n   if string == substring then\n      return\
    \ 0\n   end\n   -- Start with 0 times to avoid zero substring matches.\n   --\
    \ For substring 'abc', the count of 'abc' is 0 + 1 + 2 + 3 = 6\n   -- For substring\
    \ 'ab', the count of 'ab' is 0 + 1 + 2 = 4\n   local count = 0\n   -- Start comparing\
    \ from the end of the string, to ensure substrings are compared starting from\
    \ the end of a string.\n   for i = #string, 1, -1 do\n      if string[i] == substring\
    \ then\n         count = count + 1\n      else\n         break\n      end\n  \
    \ end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5lusx1d6.lua:42:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5lusx1d6.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    -- If the substring doesn't\
    \ even exist in the original string, return 0.\n    if not string or string ==\
    \ substring or string == '' then return 0 end\n    -- If the original string is\
    \ empty, return a 0.\n    if string == '' then return 0 end\n    -- Start by finding\
    \ the start index of the substring.\n    local index = 1\n    while string.sub(string,\
    \ 1, index) == substring do\n        index = index + 1\n    end\n    -- Now that\
    \ the start index is found, the substring was found for the first time.\n    --\
    \ Now find where the substring ends.\n    index = string.find(string, substring,\
    \ index) + 1\n    -- The substring was found for the first time, now loop through\
    \ and subtract any overlaps.\n    local count = 0\n    while index > 1 do\n  \
    \      index = string.find(string, substring, index)\n        if index == 0 then\
    \ break end\n        count = count + 1\n        index = index - 1\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == nil then return\
    \ 0 end\n    local num_times = 1\n    for i = 1, string.len() do\n        if string.sub(i,\
    \ i) == substring then num_times = num_times + 1 end\n    end\n    return num_times\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo7rdlymm.lua:11:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpo7rdlymm.lua:11: in local 'candidate'\n\t/tmp/tmpo7rdlymm.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gsub(substring, \".\") do\n        count = count + 1\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiucgbnmt.lua:10:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpiucgbnmt.lua:10: in local 'candidate'\n\t/tmp/tmpiucgbnmt.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string.gsub(string,\
    \ '[^' .. substring .. ']') ~= nil and string.gsub(string, '(' .. substring ..\
    \ ')', '').. string.gsub(string, '(' .. substring .. ')', '') or 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpse01hw4o.lua:9:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpse01hw4o.lua:9: in local 'candidate'\n\t/tmp/tmpse01hw4o.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, '[^' .. substring .. ']') do\n        count = count\
    \ + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcgmt79y.lua:20:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpxcgmt79y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  -- Create a hash table to\
    \ store how many times a substring was found in a string.\n  local hash = {}\n\
    \  for i = 1, #string do\n    hash[string[i]] = hash[string[i]] + 1 -- Start from\
    \ 1 instead of 0.\n  end\n  -- Find the number of times the substring could be\
    \ found in a string.\n  local count = 0\n  -- Iterate through all characters in\
    \ the string.\n  for i = 1, #substring do\n    -- If the current character is\
    \ found in the hash table, increment the count.\n    count = count + hash[substring[i]]\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3yjzuld.lua:19:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpw3yjzuld.lua:19: in local 'candidate'\n\t/tmp/tmpw3yjzuld.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count_a = 0\n\tlocal\
    \ count_b = 0\n\tfor i = 1, #string do\n\t\tif string.sub(string, i, i+#substring)\
    \ == substring then\n\t\t\tcount_a = count_a + 1\n\t\telseif string.sub(string,\
    \ i, i+#substring) < substring then\n\t\t\tcount_b = count_b + 1\n\t\tend\n\t\
    end\n\tif count_a + count_b > 0 then\n\t\treturn count_a + count_b\n\telse\n\t\
    \treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kce_sfz.lua:29:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp3kce_sfz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local num_matches = 0\n\
    \    for i = 1, string.gsub(substring, string, 1, 1) do\n        -- If the substring\
    \ is not found on the string, then return 0 since it will not match\n        if\
    \ not string.sub(i, string.len(substring), i) then return 0 end\n        num_matches\
    \ = num_matches + 1\n    end\n    return num_matches\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuu9obpxg.lua:10:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpuu9obpxg.lua:10: in\
    \ local 'candidate'\n\t/tmp/tmpuu9obpxg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i,\
    \ v in ipairs(string) do\n\t\tif v == substring then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwrkzn3y.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmprwrkzn3y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  local i\
    \ = 1, #string\n  while i <= #string do\n    local j = string.find(substring,\
    \ string[i])\n    if j == nil then\n      count = count + 1\n    else\n      if\
    \ i == j then\n        count = count + 1\n      else\n        count = count +\
    \ 1\n        i = j\n      end\n    end\n    i = i + 1\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp37lplpth.lua:12:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp37lplpth.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp37lplpth.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  local start\
    \ = substring.start\n  local index = string.find(string, start, \"..\")\n  while\
    \ index == do\n    count = count + 1\n    index = string.find(string, index +\
    \ 1, start)\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo74aeuzy.lua:12: unexpected symbol near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string:gsub(substring,\
    \ function() return 1 end):match(\"%d+\") - 1 -- Overlapping cases.\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqoqgb4dl.lua:9:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpqoqgb4dl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqoqgb4dl.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\treturn string.gsub(string,\
    \ substring, \"([^\" .. substring .. \"]+)\") - 1 -- Remove the first match +\
    \ count overlapping matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2rwwmip4.lua:9:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp2rwwmip4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2rwwmip4.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local matches = string.gsub(string.gsub(string.gsub(string.gsub(string,\
    \ '(.-)(.+$)', '%2'), '(^[^%]+)', '%1'), '(.-)(.-%2)', '%3'), '(.-)(.-%2)', '%4')\n\
    \  return #matches + #string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string,\
    \ '(.-)(.+$)', '%2'), '(^[^%]+)', '%1'), '(.-)(.-%2)', '%3'), '(.-)(.-%2)', '%4')\n\
    \  return #matches + #string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string,\
    \ '(.-)(.+$)', '%2'), '(^[^%]+)', '%1'), '(.-)(.-%2)', '%3'), '(.-)(.-%2)', '%4')\n\
    \  return #matches + #string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string,\
    \ '(.-)(.+$)', '%2'), '(^[^%]+)', '%1'), '(.-)(.-%2)', '%3'), '(.-)(.-%2)', '%4')\n\
    \  return #matches + #string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string,\
    \ '(.-)(.+$)', '%2'), '(^[^%]+)', '%1'), '(.-)(.-%2)', '%3'), '(.-)(.-%2)', '%4')\n\
    \  return #matches + #string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string,\
    \ '(.-)(.+$)', '%2'), '(^[^%]+)', '%1'), '(.-)(.-%2)', '%3'), '(.-)(.-%2)', '%4')\n\
    \  return #matches + #string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string,\
    \ '(.-)(.+$)', '%2'), '(^[^%]+)', '%1'), '(.-)(.-%2)', '%3'), '(.-)(.-%2)', '%4')\n\
    \  return #matches + #string.gsub(string.gsub(\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp55xwnb5x.lua:11: ')' expected (to close '(' at line 10) near\
    \ 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"(.-)\"..substring..\"(.-)\") do\n        count\
    \ = count + 1\n    end -- end for\n    return count\nend -- end how_many_times\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8yzurqv.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpa8yzurqv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.find(substring, string, 1, i) == i then\n     \
    \ count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdl4hshd_.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdl4hshd_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local start = 0 -- Start index\
    \ in the original string.\n  while start <= #string do\n    local substring_index\
    \ = string:find(substring, start)\n    if substring_index == nil then\n      start\
    \ = start + 1 -- Found the last occurrence of the substring.\n    elseif substring_index\
    \ > start then\n      return substring_index - start + 1 -- Found the first occurrence\
    \ of the substring.\n    end\n    start = substring_index + 1 -- Increment the\
    \ start index in the original string.\n  end\n  return 0 -- No occurrence of the\
    \ substring was found.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1lkd7gv.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'substring_index')\nstack\
    \ traceback:\n\t/tmp/tmpe1lkd7gv.lua:17: in local 'candidate'\n\t/tmp/tmpe1lkd7gv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\t-- This code does not work\
    \ when substring is empty\n\tif not string then\n\t\treturn 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdms5grkq.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   if string == '' or substring\
    \ == '' then return 0 end\n   local string_length = #string\n   local substring_length\
    \ = #substring\n   if string_length <= 0 or substring_length <= 0 then return\
    \ 0 end\n   local count = string_length - substring_length\n   for i = 1, string_length\
    \ do\n      if string.sub(i, substring_length) == substring then count = count\
    \ + 1 end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj3uq7sy.lua:24:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmpcj3uq7sy.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local number_of_substrings\
    \ = 0\n  local index = string.find(string, substring)\n  while index do\n    index\
    \ = string.find(substring, index, string) + 1\n    number_of_substrings = number_of_substrings\
    \ + 1\n  end\n  return number_of_substrings\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph9n1i_j3.lua:12:\
    \ bad argument #3 to 'find' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmph9n1i_j3.lua:12: in local 'candidate'\n\t/tmp/tmph9n1i_j3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local i = 0\n  for _ in string:gmatch(\"\
    (.-)\" .. substring) do\n    i = i + 1\n  end\n  return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfobp_wc.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpjfobp_wc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string.gsub(string,\
    \ substring, '%s').gsub('(.-)%s'..substring, '%1'):gsub('(..)'..substring, '%1'):gsub('(.-)%s*'%substring,\
    \ '%1'):gsub('(..)%s*'%substring, '%1')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmiu9q4h.lua:9:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpdmiu9q4h.lua:9: in local 'candidate'\n\t/tmp/tmpdmiu9q4h.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 1 end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf998421t.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   if string == nil then\n \
    \     string = ''\n   end\n   if substring == nil then\n      substring = ''\n\
    \   end\n   local count = 0\n   for s in string.gmatch(string, '%S+') do\n   \
    \   if s == substring then\n         count = count + 1\n      elseif s:sub(1,\
    \ #substring) == substring then\n         count = count + 1\n      end\n   end\n\
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqmlde_2.lua:30:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpnqmlde_2.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\twhile true\
    \ do\n\t\tlocal index = string.find(string, substring)\n\t\tif index == nil then\n\
    \t\t\treturn count\n\t\tend\n\t\tcount = count + 1\n\t\tif index > 0 then\n\t\t\
    \tstring = string.sub(string, index + #substring)\n\t\telse\n\t\t\tbreak\n\t\t\
    end\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple4mdbi5.lua:30:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmple4mdbi5.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local result = 1\n    if\
    \ string.find(string, substring) ~= nil then\n        while string.find(string,\
    \ substring, 1, true) ~= nil do\n            -- Found a matching substring. Increase\
    \ the counter.\n            local start_index = string.find(string, substring,\
    \ 1, true)\n            if start_index > 0 then\n                result = result\
    \ + 1\n            end\n            -- Continue with other possible matches.\n\
    \            string = string.sub(string, start_index + 1, string.len(string))\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0au89f8.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm0au89f8.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count_string\n  local\
    \ count_substring\n  count_string = 0\n  count_substring = 0\n  for i = 1, #string\
    \ do\n    if string.sub(i, #string + #substring) == substring then\n      count_substring\
    \ = count_substring + 1\n      count_string = count_string + 1\n    end\n  end\n\
    \  return count_string + count_substring\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxofbdnp.lua:26:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpbxofbdnp.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local substring_index =\
    \ string.find(string, substring)\n    return substring_index and substring_index\
    \ or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcqx6f5m.lua:17:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpbcqx6f5m.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == nil or substring\
    \ == nil then\n        return 0\n    end\n    local count = 0\n    for char in\
    \ string.gmatch(string, \"[^\" .. substring .. \"]+\") do\n        if string.find(string,\
    \ char, substring, 1, true) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoitnclam.lua:14:\
    \ bad argument #3 to 'find' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpoitnclam.lua:14: in local 'candidate'\n\t/tmp/tmpoitnclam.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal substring_positions\
    \ = {}\n\tfor i = 1, #substring do\n\t\tlocal index = string.find(string, substring,\
    \ i)\n\t\tif index == nil then\n\t\t\treturn 0\n\t\telseif index > i then\n\t\t\
    \ttable.insert(substring_positions, index)\n\t\tend\n\tend\n\tlocal number_of_overlapping_characters\
    \ = 0\n\tfor _, index in pairs(substring_positions) do\n\t\tnumber_of_overlapping_characters\
    \ = number_of_overlapping_characters + 1\n\tend\n\treturn #substring_positions\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshf6kscd.lua:29:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpshf6kscd.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  while true do\n    local\
    \ pos = string.find(string, substring, 1, true)\n    if pos == nil then\n    \
    \  break\n    end\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = string:find(substring)\n\
    \    count = count and count + 1 or 1\n    return count:gsub('(.-):*$','%1')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrdqf9st.lua:11:\
    \ attempt to index a number value (local 'count')\nstack traceback:\n\t/tmp/tmpdrdqf9st.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpdrdqf9st.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local result = 0\n    for\
    \ i = 1, #string do\n        if string[i] == substring then\n            assert(i\
    \ > 1)\n            result = result + 1\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpriu6zba9.lua:23:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpriu6zba9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == nil or substring\
    \ == nil then return 0 end\n    local number_of_times = 0\n    local string_length\
    \ = string:len()\n    local substring_length = substring:len()\n    for i = 1,\
    \ string_length do\n        if string.sub(i, string_length) == substring then\
    \ number_of_times = number_of_times + 1 end\n    end\n    for i = 1, substring_length\
    \ do\n        local substring_start = string.sub(i, substring_length)\n      \
    \  if substring_start and substring_start:find(substring) then\n            number_of_times\
    \ = number_of_times + 1\n        end\n    end\n    return number_of_times\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwsebis2.lua:29:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpiwsebis2.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  -- Count how many times substring\
    \ occurs in string\n  local string_length = len(string)\n  local substring_index\
    \ = string.find(substring, 1, true)\n  if substring_index == nil then\n    --\
    \ Substring not found\n    return 0\n  else\n    -- Found substring\n    return\
    \ substring_index - 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprwximoqd.lua:10:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmprwximoqd.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprwximoqd.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return #string <= 0 or\n \
    \   not #substring <= 0 or\n    not string.substring or\n    not string.gsub or\
    \ #string.gsub(string, substring, \"\") > 0 or\n    not string.gsub or string.gsub(string,\
    \ substring, \"\", 1) == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytnnvr2_.lua:19:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpytnnvr2_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 1\n  for i =\
    \ 1, string.len(substring) do\n    local start_index = string.find(string, substring,\
    \ 1, i)\n    if start_index == nil then break end\n    count = count + 1\n   \
    \ i = start_index + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdosgti9.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcdosgti9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string.gsub(string,\
    \ substring, \"\"):gsub(\"^%s*(.-)%s*$\", function(match) return string.sub(s,\
    \ string.len(match)) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2xse6um.lua:9:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpi2xse6um.lua:9:\
    \ in function </tmp/tmpi2xse6um.lua:9>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpi2xse6um.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi2xse6um.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i,\
    \ _ in ipairs(string.gsub(string, substring)) do\n\t\tcount = count + 1\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4m8l0vaj.lua:10:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp4m8l0vaj.lua:10: in local 'candidate'\n\t/tmp/tmp4m8l0vaj.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\treturn string.gsub(string,\
    \ substring, '%1'..substring..'%1')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjdjmxfc.lua:15:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpdjdjmxfc.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local matches = 0\n    for\
    \ i = 1, #string do\n        if string.find(substring, string[i]) ~= nil then\n\
    \            matches = matches + 1\n        end\n    end\n    return matches\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2k5gz4xh.lua:11:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp2k5gz4xh.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp2k5gz4xh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == nil then\n\
    \        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpotukshie.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\treturn (string.gsub(string,\
    \ substring) or 0) + (string.gsub('%' .. substring .. '$', substring) or 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31qds4fz.lua:9:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp31qds4fz.lua:9: in local 'candidate'\n\t/tmp/tmp31qds4fz.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == nil then return\
    \ 0 end\n    if substring == nil then return 0 end\n    local count = 0\n    while\
    \ true do\n        local pos = string.find(substring, string, 1, true)\n     \
    \   if pos == nil then break end\n        count = count + 1\n        string =\
    \ string.sub(string, pos + 1)\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if not string or substring\
    \ == string then\n        return 0\n    end\n    if string.find(string) then\n\
    \        return string.find(string) + 1\n    elseif string.find(substring, 1,\
    \ string.len(string)) then\n        return string.find(substring, 1, string.len(string))\
    \ + 1\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptyi3c9pw.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmptyi3c9pw.lua:12: in local 'candidate'\n\t/tmp/tmptyi3c9pw.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   local count = 0\n   while\
    \ string and substring ~= \"\" do\n      -- Find the index that has the current\
    \ substring and add one to it.\n      -- If the substring isn't found then add\
    \ 1 to the index.\n      local index = string.find(substring, 1, true)\n     \
    \ if not index then\n         index = #string\n      end\n      count = count\
    \ + 1\n      string = string.sub(string, index + 1) -- Ignore the substring that\
    \ is being searched.\n   end\n   return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08msaqsy.lua:13:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp08msaqsy.lua:13: in local 'candidate'\n\t/tmp/tmp08msaqsy.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal s\
    \ = string\n\twhile true do\n\t\tlocal new_s = s:sub(1, #substring + 1)\n\t\t\
    if new_s == substring then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tbreak\n\t\
    \tend\n\t\ts = s.sub(new_s)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe76tld97.lua:27:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpe76tld97.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ index, value in ipairs(string) do\n        if value == substring then\n    \
    \        count = count + 1\n        elseif value == substring and string.find(value,\
    \ substring, index - 1, true) ~= nil then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7zpiq67.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpr7zpiq67.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local substring = string.gsub(substring,\
    \ function(c) return '%c' end, '_')\n    local matches = 0\n    for substring_\
    \ in string.gsub(substring, {'%_', '%c', '%s'}, '') do\n        local substring\
    \ = string.gsub(substring_, '%c', '')\n        matches = matches + string.find(string,\
    \ substring, 1, true) - string.find(string, substring_, 1, true)\n    end\n  \
    \  return matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppf4u9xtf.lua:9:\
    \ bad argument #2 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmppf4u9xtf.lua:9: in local 'candidate'\n\t/tmp/tmppf4u9xtf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ substring, ''):gsub('[^'..substring.']]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7riunzbx.lua:9: <name> expected near '']]''\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count_ = 0\n\tlocal\
    \ pattern = '^' .. string.gsub(substring.l, '.', '[%z+%.]')\n\tlocal regex = string.gsub(pattern,\
    \ '([%z+%.])', '([^%s]+)'):gsub('%%s', '')\n\tlocal i = 1, #string\n\twhile i\
    \ <= #string do\n\t\tlocal result = string.gsub(string, '.', '[%z+%.]'):gsub(regex,\
    \ '%1'):gsub('%%s', '')\n\t\tif result == string.gsub(string, '.', '[%z+%.]'):gsub(regex,\
    \ '%2') then\n\t\t\tcount_ = count_ + 1\n\t\t\ti = i + 1\n\t\telse\n\t\t\tbreak\n\
    \t\tend\n\tend\n\treturn count_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy99zzn78.lua:10:\
    \ bad argument #1 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpy99zzn78.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpy99zzn78.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for char\
    \ in string do\n    if string.find(substring, char, 1, true) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdo_h86z1.lua:10:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpdo_h86z1.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpdo_h86z1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local result = 1\n  for _,\
    \ b in ipairs(string) do\n    if b:sub(1, #substring) == substring then\n    \
    \  result = result + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8t1nk5x.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpi8t1nk5x.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    local\
    \ last_index = string.find(string, substring, 1)\n    while last_index do\n  \
    \      count = count + 1\n        last_index = string.find(string, substring,\
    \ last_index + 1) -- Skip overlapping cases\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string.match(string,\
    \ '%a') == nil and 0 or string.match(string, '%a'):gsub(substring, function(a,\
    \ c)\n        return string.match(a, '%a') ~= nil and string.match(a, '%a'):gsub(substring,\
    \ function(a, c)\n            return string.match(a, '%a'):gsub(substring, function(a,\
    \ c)\n                return string.match(a, '%a'):gsub(substring, function(a,\
    \ c)\n                    return string.match(a, '%a'):gsub(substring, function(a,\
    \ c)\n                        return string.match(a, '%a'):gsub(substring, function(a,\
    \ c)\n                            return string.match(a, '%a'):gsub(substring,\
    \ function(a, c)\n                                return string.match(a, '%a'):gsub(substring,\
    \ function(a, c)\n                                    return string.match(a, '%a'):gsub(substring,\
    \ function(a, c)\n                                        return string.match(a,\
    \ '%a'):gsub(substring, function(a, c)\n                                     \
    \       return string.match(a, '%a'):gsub(substring, function(a, c)\n        \
    \                                        return string.match(a, '%a'):gsub(substring,\
    \ function(a, c)\n                                                    return string.match(a,\
    \ '%a'):gsub(substring, function(a, c)\n                                     \
    \                   return string.match(a, '%a'):gsub(substring, function(a, c)\n\
    \                                                            return string.match(a,\
    \ '%a'):gsub(substring, function(a, c)\n                                     \
    \                           return string.match(a, '%a'):gsub(substring, function(a,\
    \ c)\n                                                                    return\
    \ string.match(a, '%a'):gsub(substring, function(a, c)\n                     \
    \                                                   return string.match(a, '%a'):gsub(substring,\
    \ function(a, c)\n                                                           \
    \                 return string.match(a, '%a'):gsub(substring, function(a, c)\n\
    \                                                                            \
    \    return string.match(a, '%a'):gsub(substring, function(a, c)\n           \
    \                                                                         return\
    \ string.match(a, '%a'):gsub(substring, function(a, c)\n                     \
    \                                                                   return string.match(a,\
    \ '%a'):gsub(substring, function(a, c)\n                                     \
    \                                                       return string.match(a,\
    \ '%a'):gsub(substring, function(a, c)\n                                     \
    \                                                           return string.match(a,\
    \ '%a'):gsub(substring, function(a, c)\n                                     \
    \                                                               return string.match(a,\
    \ '%a'):gsub(substring, function(a, c)\n                                     \
    \                                                                   return string.match(a,\
    \ '%a'):gsub(substring, function(a, c)\n                                     \
    \                                                                       return\
    \ string.match(a, '%a'):gsub(substring, function(a, c)\n                     \
    \                                                                            \
    \               return string.match(a, '%a'):gsub(substring, function(a, c)\n\
    \                                                                            \
    \                                        return string.match(a, '%a'):gsub(substring,\
    \ function\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpocuughmx.lua:38: '(' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, s in string.gmatch(\"(.-)\"..substring..\"(.-)\") do\n        count = count\
    \ + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk_ofm_7n.lua:10:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpk_ofm_7n.lua:10: in local 'candidate'\n\t/tmp/tmpk_ofm_7n.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\t-- Find position of substring.\n\
    \tlocal position = 0\n\twhile position <= #string do\n\t\tposition = string.find(string,\
    \ substring, position)\n\t\tif position ~= nil then return 1 + position - 1 end\n\
    \t\tposition = string.len(string) + 1\n\tend\n\treturn 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5afhi0tm.lua:23:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp5afhi0tm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\treturn string.gsub(string,\
    \ substring, function()\n\t\tlocal start\n\t\tlocal stop\n\t\tlocal startlen\n\
    \t\tlocal stoplen\n\t\tlocal last\n\t\tfor start = 1, string.len(substring) do\n\
    \t\t\tif string.sub(string, start, start + 1) ~= substring then\n\t\t\t\treturn\
    \ string\n\t\t\tend\n\t\tend\n\t\tstartlen = 1\n\t\tfor stop = (string.len(substring)\
    \ + 1) - 1, string.len(string) do\n\t\t\tif string.sub(string, (string.len(substring)\
    \ + 1) - 1, stop) ~= substring then\n\t\t\t\treturn string\n\t\t\tend\n\t\tend\n\
    \t\tstoplen = string.len(substring) + 1\n\t\tlast = string.sub(string, (string.len(substring)\
    \ + 1) - 1, string.len(string))\n\t\tif last ~= substring then\n\t\t\treturn string\n\
    \t\tend\n\t\treturn string.len(substring) * how_many_times(string.sub(string,\
    \ 1, stoplen), substring)\n\tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb0bxna6.lua:38:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpxb0bxna6.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if string == substring then return 1 end\n  local count = 1\n  for\
    \ i = 1, #string do\n    if string.sub(i, i) ~= substring then\n      if count\
    \ > 1 then\n        return count\n      else\n        count = count + 1\n    \
    \  end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp005883ey.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp005883ey.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\treturn (string.gsub(string,\
    \ substring, 1, 'g') or 0) + (string.gsub(string, substring, '', 'g') or 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp235w7reu.lua:9:\
    \ bad argument #4 to 'gsub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp235w7reu.lua:9: in local 'candidate'\n\t/tmp/tmp235w7reu.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local n = #string\n  if n\
    \ == 0 then return 0 end\n  local result = 0\n  for i = 1, #substring do -- Binary\
    \ search\n    local m = math.ceil((n - i) / 2) + i\n    if string[i] == substring[i]\
    \ then\n      result = result + 1\n      if m ~= n then -- Overlap\n        if\
    \ m - i < #string and string[m] == substring[m - 1] then\n          result = result\
    \ + 1\n        end\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78v8gr4p.lua:30:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp78v8gr4p.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == '' or string\
    \ == nil then\n    return 0\n  end\n  local count = 0;\n  local pos = 1;\n  while\
    \ pos < string.len() do\n    if string.substring (pos, pos + #substring) == substring\
    \ then\n      count = count + 1\n    end\n    pos = pos + #substring\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnf34wtt0.lua:14:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpnf34wtt0.lua:14: in local 'candidate'\n\t/tmp/tmpnf34wtt0.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local substring_index = 1\n\
    \  local string_length = #string\n  while substring_index <= string_length do\n\
    \    local position = string.find(string, substring, substring_index)\n    if\
    \ position == nil then\n      return 0\n    end\n    substring_index = position\
    \ + 1\n  end\n  return substring_index - 1 -- The last index should be the length\
    \ of the substring\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ju2wke8.lua:25:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp4ju2wke8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tif string == substring or\
    \ string == '' then\n\t\treturn 0\n\tend\n\tlocal count = 0\n\tfor char in string:gmatch('%a')\
    \ do\n\t\tif string.find(substring, char, 0, true) then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdmf289k.lua:26:\
    \ expected: 4, actual: 9\nstack traceback:\n\t/tmp/tmpxdmf289k.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.match(string,\
    \ \"[\"..substring..\"*]+\") or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8lzdq7r.lua:16:\
    \ expected: 4, actual: \"x\"\nstack traceback:\n\t/tmp/tmpc8lzdq7r.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for sub\
    \ in string:gmatch(\"(.-)%S+\") do\n    if sub == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdq3hubz9.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdq3hubz9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if not string then\n   \
    \     return 0\n    end\n    local count = 0\n    for _, _, c in string.gmatch(\"\
    [\" .. substring .. \"]\") do\n        count = count + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1omf884e.lua:13:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp1omf884e.lua:13: in local 'candidate'\n\t/tmp/tmp1omf884e.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if not substring or string\
    \ == substring then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy0e_8vdf.lua:20: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string,\
    \ substring, 1, true) - string.gsub(string, substring, 1, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki0qj6qu.lua:9:\
    \ bad argument #4 to 'gsub' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpki0qj6qu.lua:9: in local 'candidate'\n\t/tmp/tmpki0qj6qu.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string.gsub(string,\
    \ string, \"[^\"..substring..\"]\"):gsub(\"^[^\"..substring..\"]\", \"\"):gsub(\"\
    [^\"..substring..\"]$\", \"\"):gsub(\"^[^\"..substring..\"]\", \"\"):gsub(\"^[^\"\
    ..substring..\"]\", \"\"):gsub(\"^[^\"..substring..\"]\", \"\"):gsub(\"^[^\"..substring..\"\
    ]\", \"\"):gsub(\"^[^\"..substring..\"]\", \"\"):gsub(\"^[^\"..substring..\"]\"\
    , \"\"):gsub(\"^[^\"..substring..\"]\", \"\"):gsub(\"^[^\"..substring..\"]\",\
    \ \"\"):gsub(\"^[^\"..substring..\"]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nqj23hs.lua:15:\
    \ expected: 0, actual: \"x\"\nstack traceback:\n\t/tmp/tmp5nqj23hs.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n   if string == '' or string\
    \ == nil then\n      return 0\n   end\n   if string.find(substring) then\n   \
    \   local count = string.find(substring)\n      return count\n   else\n      return\
    \ 1\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnzzl5xxc.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpnzzl5xxc.lua:12: in local 'candidate'\n\t/tmp/tmpnzzl5xxc.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  -- If the input string is\
    \ empty, return 0.\n  if string == nil then return 0 end\n  -- The substring's\
    \ length is the string's length.\n  local substring_size = #substring\n  -- If\
    \ the input string's length is 0, return 0.\n  if string_size == 0 then return\
    \ 0 end\n  -- If the substring is too long, return 0.\n  if substring_size > string_size\
    \ then return 0 end\n  -- The overlapping count is the sum of the substring length.\n\
    \  local overlapping_count = string_size + substring_size\n  -- The total count\
    \ is the sum of the previous overlapping and non-overlapping counts.\n  local\
    \ total_count = overlapping_count + how_many_times(string, substring, overlapping_count\
    \ + 1)\n  return total_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1gvr77p.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpi1gvr77p.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpi1gvr77p.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  return string.gsub(string.gsub(string,\
    \ substring, 1, 'g'), substring, 1, 'g'):match(\"%S+\") or (string.gsub(string,\
    \ substring, 1, 'g'):match(\"[^\"..string.char(substring):gsub(\"%S\",'')..\"\
    ]+\") or 0):gsub(\"%S+\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjqmnmc1r.lua:9:\
    \ bad argument #4 to 'gsub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpjqmnmc1r.lua:9: in local 'candidate'\n\t/tmp/tmpjqmnmc1r.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if not string or string.len\
    \ == 0 or substring == nil then\n        return 0\n    end\n    local count =\
    \ 0\n    for i = 1,string.len do\n        if string.sub(i, i, string) == substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaxgyurfo.lua:13:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpaxgyurfo.lua:13: in\
    \ local 'candidate'\n\t/tmp/tmpaxgyurfo.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    if string == '' then\n \
    \       return 0\n    end\n    if substring == '' then\n        return string.count('a')\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3nbao2qb.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    return string.gsub(string,\
    \ \"[\"..substring..\"]\"):gsub(\"(.)\"..substring, \"\\1\"):gsub(\"[\"..substring..\"\
    ](.)\"..substring, \"\"):gsub(\"\\\\1\", \"1\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj8s22h_3.lua:9:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpj8s22h_3.lua:9: in local 'candidate'\n\t/tmp/tmpj8s22h_3.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ char in string.gmatch(string, \"([^\"..tostring(substring)..\"]+)\") do\n  \
    \  count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dgmu7ji.lua:20:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp9dgmu7ji.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then return 0 end\n  local result = 1\n  for i = 1, #string do\n    if\
    \ string.sub(i, i) ~= substring then\n      result = result + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki2ls8lr.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpki2ls8lr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
