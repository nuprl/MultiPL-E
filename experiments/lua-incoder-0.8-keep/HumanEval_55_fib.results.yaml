name: HumanEval_55_fib
language: lua
results:
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then\n    return\
    \ 1\n  else\n    if n == 1 then\n      return 1\n    else\n      return fib(n-2)\
    \ + fib(n-1)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pivxklz.lua:23:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp6pivxklz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0hl6q1c.lua:18:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpo0hl6q1c.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then return nil\
    \ end\n  if n == 1 or n == 2 then return 1 end\n  return fib(n - 1) + fib(n -\
    \ 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==0 then\n    return\
    \ 0\n  elseif n==1 then\n    return 1\n  else\n    return fib(n - 1) + fib(n -\
    \ 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n   if n <= 1 then return n\
    \ end\n   return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local a, b = 0, 1\n  while\
    \ n ~= 0 do\n    a, b = b, a + b\n    n = n - 1\n  end\n  return a\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n   \
    \ lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n \
    \   lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ 1\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpga6hfrif.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpga6hfrif.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ return n\n    else\n        return fib(n-2) + fib(n-1)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n<1 then\n    return 1\n\
    \  elseif n==1 then\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yt1ysvi.lua:21:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp1yt1ysvi.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local prev, curr = 1, 1\n\
    \    for i = 1, n do\n        prev, curr = curr, prev + curr\n    end\n    return\
    \ curr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfcj8cvf.lua:19:\
    \ expected: 55, actual: 144\nstack traceback:\n\t/tmp/tmprfcj8cvf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ 1\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0q0pwkx.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpo0q0pwkx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n<2 then return n else\
    \ return fib(n-2) + fib(n-1) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local fib_cache = {}\n\
    \    if n <= 1 then\n        return n\n    end\n    if fib_cache[n] then\n   \
    \     return fib_cache[n]\n    end\n    local a = fib(n-1)\n    local b = fib(n-2)\n\
    \    local c = a + b\n    fib_cache[n] = c\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  elseif n < 3 then\n    return fib(n-2) + fib(n-1)\n  else\n    return fib(n-2)\
    \ + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhe9io4t.lua:21:\
    \ expected: 55, actual: 16\nstack traceback:\n\t/tmp/tmplhe9io4t.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n == 1 or n == 2 then\n\
    \    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6ojxqn2.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpg6ojxqn2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then\n    error\
    \ 'fib expects n > 0, got ' .. n\n  end\n  if n == 1 or n == 2 then\n    return\
    \ n\n  end\n  return fib(n-2) + fib(n-1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6gb9hrt2.lua:10: unexpected symbol near '..'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n <= 2 then\n\t\treturn\
    \ 1\n\tend\n\tlocal fibN = fib(n - 2)\n\tlocal fibM = fib(n - 1)\n\treturn fibM\
    \ + fibN\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n <= 1 then\n    return n\n  else\n    return fib(n-2) + fib(n-1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n      \
    \  return 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n\
    \        return 2\n    end\n    return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9z5vv4b.lua:22:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpb9z5vv4b.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  end\n  local a = fib(n-1)\n  local b = fib(n-2)\n  return a+b\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n \
    \   lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then\n    error('Argument\
    \ must be non-negative and non-nil')\n  else\n    if n == 1 then\n      return\
    \ 1\n    else\n      return fib(n-1) + fib(n-2)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3g8qyq3.lua:10:\
    \ Argument must be non-negative and non-nil\nstack traceback:\n\t/tmp/tmpt3g8qyq3.lua:10:\
    \ in upvalue 'fib'\n\t/tmp/tmpt3g8qyq3.lua:15: in upvalue 'fib'\n\t/tmp/tmpt3g8qyq3.lua:15:\
    \ in upvalue 'fib'\n\t/tmp/tmpt3g8qyq3.lua:15: in upvalue 'fib'\n\t/tmp/tmpt3g8qyq3.lua:15:\
    \ in upvalue 'fib'\n\t/tmp/tmpt3g8qyq3.lua:15: in upvalue 'fib'\n\t/tmp/tmpt3g8qyq3.lua:15:\
    \ in upvalue 'fib'\n\t/tmp/tmpt3g8qyq3.lua:15: in upvalue 'fib'\n\t/tmp/tmpt3g8qyq3.lua:15:\
    \ in upvalue 'fib'\n\t/tmp/tmpt3g8qyq3.lua:15: in local 'candidate'\n\t/tmp/tmpt3g8qyq3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then return 1 end\n\
    \  return fib(n-2) + fib(n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_8_n2mm.lua:16:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpy_8_n2mm.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 2 then\n    return 1\n  else\n    return fib(n - 1) + fib(n\
    \ - 2)\n  end\nend\nreturn {\n  fib = fib\n}\n</code>\n<|/ a |>\n<| c |>\nI agree\
    \ with you in that this is an interesting approach, however, this doesn't really\
    \ answer the question.\n<|/ c |>\n<| a tags=lua,lua-table,lua-patterns,fibonacci\
    \ |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1af_uva5.lua:20: unexpected symbol near '/'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then return 0 end\n\
    \  if n < 2 then return n end\n  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==1 then\n    return\
    \ 1\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2o3yx613.lua:12:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp2o3yx613.lua:12: in upvalue 'fib'\n\
    \t/tmp/tmp2o3yx613.lua:12: in upvalue 'fib'\n\t/tmp/tmp2o3yx613.lua:12: in upvalue\
    \ 'fib'\n\t/tmp/tmp2o3yx613.lua:12: in upvalue 'fib'\n\t/tmp/tmp2o3yx613.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmp2o3yx613.lua:12: in upvalue 'fib'\n\t/tmp/tmp2o3yx613.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmp2o3yx613.lua:12: in upvalue 'fib'\n\t/tmp/tmp2o3yx613.lua:12:\
    \ in upvalue 'fib'\n\t...\n\t/tmp/tmp2o3yx613.lua:12: in local 'candidate'\n\t\
    /tmp/tmp2o3yx613.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.270\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n == 1 or n == 2 then\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local x, y = 0, 1\n   \
    \ for _ = 1, n do\n        x, y = y, x + y\n    end\n    return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then\n    -- Return\
    \ the zero value if n <= 0\n    return 0\n  elseif n <= 1 then\n    -- Return\
    \ the one value if n <= 1\n    return 1\n  else\n    -- Return the fibonacci number\
    \ for n\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n      \
    \  return 0\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n   \
    \ lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n \
    \   lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzsi_sy4h.lua:12:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzsi_sy4h.lua:12: in upvalue 'fib'\n\
    \t/tmp/tmpzsi_sy4h.lua:12: in upvalue 'fib'\n\t/tmp/tmpzsi_sy4h.lua:12: in upvalue\
    \ 'fib'\n\t/tmp/tmpzsi_sy4h.lua:12: in upvalue 'fib'\n\t/tmp/tmpzsi_sy4h.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmpzsi_sy4h.lua:12: in upvalue 'fib'\n\t/tmp/tmpzsi_sy4h.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmpzsi_sy4h.lua:12: in upvalue 'fib'\n\t/tmp/tmpzsi_sy4h.lua:12:\
    \ in upvalue 'fib'\n\t...\n\t/tmp/tmpzsi_sy4h.lua:12: in local 'candidate'\n\t\
    /tmp/tmpzsi_sy4h.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.250\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptfc1tipr.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n < 1 then\n    return 1\n  end\n  if n == 1 then\n    return\
    \ 1\n  end\n  if n == 2 then\n    return 2\n  end\n  return fib(n - 1) + fib(n\
    \ - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu94thfsj.lua:27:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpu94thfsj.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 2 then\n    return\
    \ n\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97jhfdys.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp97jhfdys.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then return 1 end\n\
    \  return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqzgnolk.lua:16:\
    \ expected: 55, actual: 144\nstack traceback:\n\t/tmp/tmpzqzgnolk.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ -1\n  end\n  if n == 0 then\n    return 1\n  end\n  if n == 1 then\n    return\
    \ 1\n  end\n  local a\n  local b\n  if n == 2 then\n    return a\n  end\n  local\
    \ fib\n  for fib = 1, n do\n    a, b = b, a + b\n  end\n  return b\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n   \
    \ lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n \
    \   lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8h1wf99.lua:25:\
    \ attempt to perform arithmetic on a nil value (local 'a')\nstack traceback:\n\
    \t/tmp/tmpk8h1wf99.lua:25: in local 'candidate'\n\t/tmp/tmpk8h1wf99.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tlocal fibonacci = {0, 1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34, 55}\n\treturn fibonacci[n] or fib(n-1) + fib(n-2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0sm3_xx.lua:16:\
    \ expected: 55, actual: 34\nstack traceback:\n\t/tmp/tmpu0sm3_xx.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==0 then\n    return\
    \ 1\n  end\n  if n==1 then\n    return 1\n  end\n  return fib(n - 1) + fib(n -\
    \ 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfsn_6yh.lua:21:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpcfsn_6yh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then return n end\n\
    \  return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then return n end\n\
    \  return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsz8lwh5h.lua:16:\
    \ expected: 55, actual: -55\nstack traceback:\n\t/tmp/tmpsz8lwh5h.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local prev, curr, i = 1,\
    \ 1, 0\n    while i < n do\n        prev, curr = curr, prev + curr\n        i\
    \ = i + 1\n    end\n    return curr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5atxl6u.lua:20:\
    \ expected: 55, actual: 144\nstack traceback:\n\t/tmp/tmpt5atxl6u.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\n</cell>\n<text>\n\
    Exercise\nWrite a function, called fib_list, which takes as input a list of numbers\
    \ and returns its Fibonacci numbers.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk6gbq7b9.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then return 1 end\n\
    \  local f = 1\n  local i = 2\n  while i <= n do\n    f, i = i, f+i\n  end\n \
    \ return f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk34psrj.lua:21:\
    \ expected: 55, actual: 8\nstack traceback:\n\t/tmp/tmpqk34psrj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then return 1\
    \ end\n    return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzhuyil3.lua:16:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpbzhuyil3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n <= 1 then\n\t\treturn\
    \ n\n\tend\n\tlocal function f(a, b)\n\t\treturn a + b\n\tend\n\treturn f(fib(n\
    \ - 2), fib(n - 1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 0 then return nil\
    \ end\n\tif n < 1 then return n end\n\treturn fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplhyq3p3_.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmplhyq3p3_.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmplhyq3p3_.lua:11: in upvalue 'fib'\n\t/tmp/tmplhyq3p3_.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmplhyq3p3_.lua:11: in upvalue 'fib'\n\t/tmp/tmplhyq3p3_.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmplhyq3p3_.lua:11: in upvalue 'fib'\n\t/tmp/tmplhyq3p3_.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmplhyq3p3_.lua:11: in upvalue 'fib'\n\t/tmp/tmplhyq3p3_.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmplhyq3p3_.lua:11: in local 'candidate'\n\t/tmp/tmplhyq3p3_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 1 then\n\t\terror(\"\
    fib expected integer >= 1, got \" .. tostring(n))\n\tend\n\tlocal a,b = 0,1\n\t\
    for i = 1, n do\n\t\ta,b = b,a+b\n\tend\n\treturn a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- base case\n  if n < 0\
    \ then return 0 end\n  if n == 0 then return 1 end\n  if n == 1 then return 1\
    \ end\n  \n  -- recursive case\n  local result = fib(n - 1) + fib(n - 2)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hcqootp.lua:22:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp0hcqootp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ return n\n    else\n        return fib(n-2) + fib(n-1)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5v43tmq.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpz5v43tmq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n   if n <= 1 then\n      return\
    \ n\n   else\n      return fib(n-2) + fib(n-1)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then return n end\n\
    \  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 2 then return n else\
    \ return fib(n-1) + fib(n-2) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local a,b = 0,1\n  for i\
    \ = 1, n do\n    local c = a + b\n    a = b\n    b = c\n  end\n  return b\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5lf69ip.lua:21:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp_5lf69ip.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz28tt1rp.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpz28tt1rp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local prev, cur\n    prev,\
    \ cur = 0, 1\n    for i = 1, n do\n        prev, cur = cur, prev + cur\n    end\n\
    \    return cur\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3pxaikq.lua:20:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpp3pxaikq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n == 0 or n == 1 or n\
    \ == 2 then\n    return 1\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==1 then\n    return\
    \ 1\n  elseif n==2 then\n    return 1\n  else\n    return fib(n - 1) + fib(n -\
    \ 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return\
    \ 1\n  end\n  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- Make sure that n is non-negative\
    \ integer. Otherwise return the error\n  -- message.\n  if n ~= math.floor(n)\
    \ then\n    return \"Argument should be non-negative integer.\"\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjozgdvkb.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 2 then return n\n\
    \  else return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvr32x1s8.lua:17:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpvr32x1s8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n==1 then\n\t\treturn\
    \ 1\n\telse\n\t\treturn fib(n-1)+fib(n-2)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhewkrau.lua:12:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzhewkrau.lua:12: in upvalue 'fib'\n\
    \t/tmp/tmpzhewkrau.lua:12: in upvalue 'fib'\n\t/tmp/tmpzhewkrau.lua:12: in upvalue\
    \ 'fib'\n\t/tmp/tmpzhewkrau.lua:12: in upvalue 'fib'\n\t/tmp/tmpzhewkrau.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmpzhewkrau.lua:12: in upvalue 'fib'\n\t/tmp/tmpzhewkrau.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmpzhewkrau.lua:12: in upvalue 'fib'\n\t/tmp/tmpzhewkrau.lua:12:\
    \ in upvalue 'fib'\n\t...\n\t/tmp/tmpzhewkrau.lua:12: in local 'candidate'\n\t\
    /tmp/tmpzhewkrau.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.260\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n <= 1 then return n\n\
    \    else return fib(n-1) + fib(n-2) end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then return 1 end\n\
    \  return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7c7onexz.lua:16:\
    \ expected: 55, actual: 144\nstack traceback:\n\t/tmp/tmp7c7onexz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 2 then\n    return\
    \ n\n  end\n  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60v9nv3y.lua:18:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp60v9nv3y.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ error(\"fib: arg is smaller than 2\")\n    end\n    return n + fib(n-1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaxi0gz9v.lua:10:\
    \ fib: arg is smaller than 2\nstack traceback:\n\t/tmp/tmpaxi0gz9v.lua:10: in\
    \ upvalue 'fib'\n\t/tmp/tmpaxi0gz9v.lua:12: in upvalue 'fib'\n\t/tmp/tmpaxi0gz9v.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmpaxi0gz9v.lua:12: in upvalue 'fib'\n\t/tmp/tmpaxi0gz9v.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmpaxi0gz9v.lua:12: in upvalue 'fib'\n\t/tmp/tmpaxi0gz9v.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmpaxi0gz9v.lua:12: in upvalue 'fib'\n\t/tmp/tmpaxi0gz9v.lua:12:\
    \ in upvalue 'fib'\n\t/tmp/tmpaxi0gz9v.lua:12: in local 'candidate'\n\t/tmp/tmpaxi0gz9v.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then return nil\
    \ end\n  if n < 1 then return 1 end\n  return fib(n - 1) + fib(n - 2)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n \
    \   lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1t741bdq.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp1t741bdq.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmp1t741bdq.lua:11: in upvalue 'fib'\n\t/tmp/tmp1t741bdq.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmp1t741bdq.lua:11: in upvalue 'fib'\n\t/tmp/tmp1t741bdq.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmp1t741bdq.lua:11: in upvalue 'fib'\n\t/tmp/tmp1t741bdq.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmp1t741bdq.lua:11: in upvalue 'fib'\n\t/tmp/tmp1t741bdq.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmp1t741bdq.lua:11: in local 'candidate'\n\t/tmp/tmp1t741bdq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ 1\n  end\n  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8m3owmb.lua:18:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpc8m3owmb.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- Local Variables: n\n \
    \ -- Function called by GCD\n  -- >>> fib(0)\n  -- 0\n  -- >>> fib(1)\n  -- 1\n\
    \  -- >>> fib(8)\n  -- 21\n  if n < 1 then\n    return 0\n  end\n  if n < 2 then\n\
    \    return n\n  end\n  return fib(n-2) + fib(n-1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- cache Fibonacci numbers\
    \ to avoid recalculation\n  if _fib[n] then return _fib[n] end\n  if n < 2 then\
    \ return 1 end\n  _fib[n] = _fib[n - 2] + _fib[n - 1]\n  return _fib[n]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t5ih2sn.lua:10:\
    \ attempt to index a nil value (global '_fib')\nstack traceback:\n\t/tmp/tmp4t5ih2sn.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp4t5ih2sn.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 0 then return nil\
    \ end\n\tif n == 0 then return 0 end\n\tif n == 1 then return 1 end\n\tlocal a\
    \ = fib(n-1) + fib(n-2)\n\treturn a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\t-- Exit if not a positive\
    \ integer.\n\t-- >>> fib(3.1)\n\t-- Traceback (most recent call last):\n\t-- \
    \  File \"<stdin>\", line 1, in ?\n\t--   File \"fibonacci.py\", line 10, in fib\n\
    \t--     return fib(n-1) + fib(n-2)\n\t-- Recursion limit exceeded.\n\tif type(n)\
    \ ~= 'number' then return nil; end\n\tif n <= 1 then return n; end\n\t-- Return\
    \ nth Fibonacci number.\n\treturn fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- Base cases.\n  if n ==\
    \ 0 or n == 1 then return n end\n  if n == 2 then return 1 end\n  \n  -- Recursive\
    \ case.\n  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==0 or n==1 then\n  \
    \  return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6wvz0sk.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpj6wvz0sk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then return 1 else\
    \ return fib(n-2) + fib(n-1) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuj2rdfp.lua:15:\
    \ expected: 55, actual: 144\nstack traceback:\n\t/tmp/tmpfuj2rdfp.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 1 or n > fib.nth then\
    \ return nil end\n\tif fib.memoize then\n\t\treturn fib.memo[n]\n\tend\n\tlocal\
    \ a,b = 1,1\n\tfor i = 1, n do\n\t\tlocal tmp = a\n\t\ta = b\n\t\tb = tmp + b\n\
    \tend\n\tfib.nth = n\n\treturn b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy9en0893.lua:9:\
    \ attempt to index a function value (upvalue 'fib')\nstack traceback:\n\t/tmp/tmpy9en0893.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpy9en0893.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then\n    return\
    \ 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpthrgamza.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 2 then return n else\n\
    \    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhmlf3a0.lua:17:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmplhmlf3a0.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then return n end\n\
    \  return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 2 then\n    return\
    \ n\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ffl03a3.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp8ffl03a3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\t-- Base case.\n\tif n < 0\
    \ then\n\t\terror(\"invalid argument #1 to fib(n): negative number\", 2)\n\tend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvfe9povs.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 2 then\n    return\
    \ 1\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w_7nk7m.lua:18:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp8w_7nk7m.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tlocal function f1(t, f)\n\
    \t\tif t <= 0 then\n\t\t\treturn f()\n\t\telse\n\t\t\treturn f(t-1) + f(t-2)\n\
    \t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphpmggemb.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local i\n    local a, b\
    \ = 0, 1\n    if n > 0 then\n        a, b = b, a + b\n        i, a = a + 1, b\n\
    \        while i <= n do\n            i = i + a\n            a, b = b, a + b\n\
    \        end\n    end\n    return i\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d01zf40.lua:25:\
    \ expected: 55, actual: 14\nstack traceback:\n\t/tmp/tmp9d01zf40.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n<2 then\n    return n\n\
    \  else\n    return fib(n-1)+fib(n-2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- Base case.\n  if n < 2\
    \ then return 1 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjf9idl83.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tlocal a = 1\n\tlocal b =\
    \ 1\n\tlocal i = 2\n\twhile i <= n do\n\t\tlocal temp = a\n\t\ta = b\n\t\tb =\
    \ temp + b\n\t\ti = i + 1\n\tend\n\treturn b\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwyo98tbp.lua:24:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpwyo98tbp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ -- Base case\n        return n\n    else\n        -- Recursive case\n      \
    \  return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then return nil\
    \ end\n  if n == 1 then return 1 end\n  if n == 2 then return 1 end\n  return\
    \ fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- Base case.\n  if n < 2\
    \ then\n    return n\n  -- Recursive case.\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n<0 then return nil end\n\
    \  if n==1 then return 1 end\n  return fib(n-1)+fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptww3dul5.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmptww3dul5.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmptww3dul5.lua:11: in upvalue 'fib'\n\t/tmp/tmptww3dul5.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmptww3dul5.lua:11: in upvalue 'fib'\n\t/tmp/tmptww3dul5.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmptww3dul5.lua:11: in upvalue 'fib'\n\t/tmp/tmptww3dul5.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmptww3dul5.lua:11: in upvalue 'fib'\n\t/tmp/tmptww3dul5.lua:11:\
    \ in upvalue 'fib'\n\t/tmp/tmptww3dul5.lua:11: in local 'candidate'\n\t/tmp/tmptww3dul5.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==0 then return 0 end\n\
    \  if n==1 then return 1 end\n  return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n >= 1 then return fib(n\
    \ - 1) + fib(n - 2) end\n  return 1\nend\nprint(fib(10))\nprint(fib(1))\nprint(fib(8))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "144\n2\n55\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszu4dwyf.lua:19:\
    \ expected: 55, actual: 144\nstack traceback:\n\t/tmp/tmpszu4dwyf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n == 1 or n == 2 then\n\
    \    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp661s_jtn.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp661s_jtn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 1\n  else\n    return fib(n - 1) + fib(n\
    \ - 2)\n  end\nend\n</cell>\n<text>\nFibonacci sequence (using recursion)\nWe\
    \ will now show how to get the n-th Fibonacci number using recursion.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpisbwc064.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tlocal a, b, p\n\tp = 1\n\t\
    a = 1\n\tb = 1\n\twhile p < n do\n\t\ta = a + b\n\t\tb = p\n\t\tp = p + a\n\t\
    end\n\treturn b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnge_atee.lua:24:\
    \ expected: 55, actual: 6\nstack traceback:\n\t/tmp/tmpnge_atee.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==0 then\n    return\
    \ 0\n  elseif n==1 then\n    return 1\n  elseif n >= 2 then\n    return fib(n-1)+fib(n-2)\n\
    \  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 1 then return 0\
    \ end\n    if n < 2 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n \
    \   lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==0 then return 1 end\n\
    \  if n==1 then return 1 end\n  return fib(n-1)+fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlxp8i44.lua:17:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpxlxp8i44.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\t-- Base case.\n\tif n ==\
    \ 1 or n == 2 then\n\t\treturn 1\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkbu1inic.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ return 1\n    end\n    return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhlikssm.lua:18:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpxhlikssm.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then return nil\
    \ end\n  if n < 2 then return n end\n  return fib(n - 1) + fib(n - 2)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n \
    \   lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==1 or n==2 then\n  \
    \  return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb_dx21i.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpvb_dx21i.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 2 then\n\t\treturn\
    \ n\n\tend\n\tlocal a, b = 0, 1\n\tfor i = 1, n do\n\t\tlocal temp = a\n\t\ta\
    \ = b\n\t\tb = temp + b\n\tend\n\treturn b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa4ewme6.lua:24:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpsa4ewme6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  end\n  local fibs = fibs[1]\n  fibs[1] = fibs[1] + fibs[2]\n  fibs[2] =\
    \ fibs[1]\n  return fibs[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpklz1cdpr.lua:12:\
    \ attempt to index a nil value (global 'fibs')\nstack traceback:\n\t/tmp/tmpklz1cdpr.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpklz1cdpr.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 0 then\n       \
    \ error(\"fib negative argument\")\n    end\n    if n == 0 or n == 1 then\n  \
    \      return n\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  elseif n < 2 then\n    return 0\n  else\n    return fib(n - 1) + fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n <= 1 then\n      \
    \  return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47ofpo5x.lua:18:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp47ofpo5x.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then\n    return\
    \ 1\n  elseif n < 2 then\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh28ul_z.lua:21:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpgh28ul_z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then return 1 end\n\
    \  return fib(n-2) + fib(n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kko1_10.lua:16:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp_kko1_10.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error(\"\
    argument to fib() must be non-negative\")\n  end\n  if n == 0 or n == 1 then\n\
    \    return 1\n  end\n  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph832bcfk.lua:21:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmph832bcfk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then return n end\n\
    \  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 0 then\n\t\treturn\
    \ nil\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2246klzm.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error('fib():\
    \ n must be non-negative')\n  elseif n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 1\n  end\n  local prev = 0\n  local curr = 1\n  for i = 1,\
    \ n do\n    curr, prev = prev + curr, curr\n  end\n  return curr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmt7u7mb.lua:27:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmphmt7u7mb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error(\"\
    fib() arg 1 must be > 0.\")\n  end\n  if n == 0 or n == 1 then\n    return n\n\
    \  end\n  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- Base case\n  if n < 2\
    \ then return n end\n  -- Recursive case\n  return fib(n-1) + fib(n-2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then return 0 end\n\
    \  local t = {}\n  -- Store first two values in t table for faster lookup.\n \
    \ -- Note: This approach will take O(n) time. Try to avoid using table lookups.\n\
    \  -- >>> t[1] = 0\n  -- >>> t[2] = 2\n  t[1] = 0\n  t[2] = 2\n  -- Now find sum\
    \ of all previous values\n  local function g1(n)\n    -- Add previous two values\
    \ as follows\n    -- t[n] = t[n-2] + t[n-1]\n    -- Note: This approach will take\
    \ O(n) time. Try to avoid using table lookups.\n    -- >>> t[n] = t[n-2] + (t[n-1]\
    \ or 0)\n    return t[n] + (t[n] or 0)\n  end\n  -- Find sum of all previous values\n\
    \  local function g2(n)\n    -- Add previous two values as follows\n    -- t[n]\
    \ = t[n-2] + (t[n-1] or 0)\n    return t[n] + (t[n] or 0)\n  end\n  -- Return\
    \ sum of all previous values\n  return g2(n - 1) + g1(n - 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7ownek2.lua:29:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpq7ownek2.lua:29: in local 'g2'\n\t/tmp/tmpq7ownek2.lua:32: in local\
    \ 'candidate'\n\t/tmp/tmpq7ownek2.lua:38: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then return nil\
    \ end\n  if n < 2 then return n end\n  return fib(n - 1) + fib(n - 2)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n \
    \   lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 0 then\n       \
    \ error(\"fib expected positive number, not \" .. tostring(n))\n    end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n   \
    \ lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n \
    \   lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8skijf8n.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then return n else\
    \ return fib(n-2) + fib(n-1) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n<=0 then\n        error(\"\
    fib() n must be positive\")\n    end\n    local fibs = { 0, 1, 1, 2, 3 }\n   \
    \ local result = 1\n    for i = 1, n do\n        result = fibs[i]+result\n   \
    \ end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp69iwz2wa.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp69iwz2wa.lua:15: in local 'candidate'\n\t/tmp/tmp69iwz2wa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ 1\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavbkaa2a.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpavbkaa2a.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then\n    return\
    \ 1\n  elseif n <= 2 then\n    return n\n  else\n    return fib(n - 1) + fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lpb1_cx.lua:21:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp_lpb1_cx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ return 1\n    end\n    return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90tzhgk7.lua:18:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp90tzhgk7.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ return n\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n == 0 then\n    return\
    \ 1\n  elseif n == 1 then\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwgdk0nw.lua:21:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmptwgdk0nw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==0 then return 1 end\n\
    \  if n==1 then return 1 end\n  return fib(n-1)+fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86hes9un.lua:17:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp86hes9un.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n == 0 then\n    return 1\n  end\n  if n == 1 then\n    return\
    \ 1\n  end\n  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq2ppx5d.lua:24:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpuq2ppx5d.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then return n end\n\
    \  return fib(n-2) + fib(n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n == 0 then\n\t\treturn\
    \ 1\n\telseif n == 1 then\n\t\treturn 1\n\telseif n == 2 then\n\t\treturn 2\n\t\
    else\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1lmtu0x.lua:23:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpx1lmtu0x.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  elseif n == 2 then\n    return 1\n  else\n    return fib(n-2) + fib(n-1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ 1\n  end\n  return fib(n - 2) + fib(n - 1)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkaleyyfd.lua:18:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpkaleyyfd.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 2 then\n\t\treturn\
    \ n\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tlocal n2, n1 = 0, 1\n\trepeat\n\
    \t\tn1, n2 = n2, n1 + n2\n\tuntil n > n2\n\treturn n1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yeofmc6.lua:19:\
    \ expected: 55, actual: 0\nstack traceback:\n\t/tmp/tmp9yeofmc6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tlocal a, b\n\tif n == 0 then\n\
    \t\treturn 1\n\telse\n\t\ta = fib(n-1) + fib(n-2)\n\t\tb = a\n\tend\n\treturn\
    \ b\nend\n</cell>\n<text>\nProblem 3\nWrite a procedure, fib_sum, that takes two\
    \ integers as arguments and returns the sum of the first n Fibonacci numbers.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm4m_ccxw.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local x, y = 0, 1\n   \
    \ while y <= n do\n        x, y = y, x + y\n    end\n    return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5ye97rv.lua:19:\
    \ expected: 55, actual: 8\nstack traceback:\n\t/tmp/tmpy5ye97rv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error()\n\
    \  end\n  if n >= 1 then\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaoql_etb.lua:22:\
    \ expected: 55, actual: 1\nstack traceback:\n\t/tmp/tmpaoql_etb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then return n\n\
    \  else return fib(n-1) + fib(n-2) end\nend\n</cell>\n<text>\nThis function is\
    \ now a first-class function, which means it can be passed around and manipulated\
    \ just like any other value. For example, we now have the following line:\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n \
    \   lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdqanbx63.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==0 then\n    return\
    \ 0\n  elseif n==1 then\n    return 1\n  else\n    return fib(n - 1) + fib(n -\
    \ 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then return n end\n\
    \  return fib(n - 1) + fib(n - 2)\nend\nreturn fib\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfj44qhas.lua:13: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n >= _G.fib and n < _G.fib\
    \ + 10 then\n\t\t_G.fib = n\n\t\treturn n\n\tend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps_2gjd03.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n == 2 then\n    return 1\n  end\n  if n == 3 then\n    return\
    \ 2\n  end\n  if n == 5 then\n    return 8\n  end\n  if n == 8 then\n    return\
    \ 21\n  end\n  if n == 21 then\n    return 8\n  end\n  return fib(n - 1) + fib(n\
    \ - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpret27im2.lua:33:\
    \ expected: 55, actual: 61\nstack traceback:\n\t/tmp/tmpret27im2.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local fibCache = {}\n  if\
    \ n <= 1 then\n    return n\n  elseif fibCache[n] ~= nil then\n    return fibCache[n]\n\
    \  end\n  fibCache[n] = fib(n-1) + fib(n-2)\n  return fibCache[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local f0, f1 = 0, 1\n  if\
    \ n <= 1 then\n    return n\n  else\n    local i = 1\n    while i <= n do\n  \
    \    f0, f1 = f1, f0 + f1\n      i = i + 1\n    end\n    return f1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh1nraro.lua:25:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpgh1nraro.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 1\n  end\n  return fib(n-2) + fib(n-1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 2 then\n    return 1\n  else\n    return fib(n - 1) + fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhttdkrf.lua:21:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpmhttdkrf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n <= 0 then return nil\
    \ end\n    if n == 1 or n == 2 then return 1 end\n    return fib(n - 1) + fib(n\
    \ - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 2 then\n    return\
    \ n\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\n</cell>\n<cell>\nprint(fib(10))\n\
    </cell>\n<text>\nExercises\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfgic9f6a.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local fibTable = {1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765,\
    \ 10941, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465}\n    return fibTable[math.floor(n)]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error(\"\
    fib() expects non-negative integer; got \" .. tostring(n))\n  end\n  if n == 0\
    \ then\n    return 1\n  end\n  if n == 1 then\n    return 1\n  end\n  return fib(n-2)\
    \ + fib(n-1)\nend\nreturn fib\n</code>\n<|/ a dscore=1 tags=performance,fibonacci,lua\
    \ |>\n<| c |>\nAwesome answer, but your implementation does not work properly,\
    \ it uses `fib(n-1)` for the second term, which means it returns different values\
    \ for different calls of the function.  \nI've fixed it here: http://codepad.org/jWjl5Kg3\n\
    <|/ c |>\n<| c |>\nAwesome! Thanks a lot :)\n<|/ c |>\n<| a |>\nHere's another\
    \ implementation (I used a similar approach to user498937's)\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuhwbk7h7.lua:21: unexpected symbol near '/'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\t-- base case\n\tif n == 1\
    \ then\n\t\treturn 1\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp817qmevr.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tlocal fibCache = {0, 1, 2}\n\
    \tlocal fibIndex = n\n\treturn (fibCache[fibIndex] if n <= fibCache[2] or n <\
    \ 1 or\n\t\tfibCache[fibIndex - 2] and n == fibCache[fibIndex - 2])\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n   \
    \ lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n \
    \   lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfhrwny7j.lua:11: ')' expected near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 or n == 1 then\n\
    \        return 1\n    else\n        return fib(n - 2) + fib(n - 1)\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy2noflq.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpxy2noflq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- Base case.\n  if n ==\
    \ 0 or n == 1 then\n    return n\n  end\n  \n  -- Recursive case.\n  return fib(n\
    \ - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error('Index\
    \ must be greater than zero')\n  end\n  if n == 0 or n == 1 then\n    return n\n\
    \  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n >= 1 then\n    return\
    \ fib(n-1) + fib(n-2)\n  else\n    return 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp306bpx.lua:19:\
    \ expected: 55, actual: 144\nstack traceback:\n\t/tmp/tmplp306bpx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then\n    return\
    \ 1\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9goeddkn.lua:19:\
    \ expected: 55, actual: 144\nstack traceback:\n\t/tmp/tmp9goeddkn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then\n    return\
    \ 0\n  elseif n == 1 or n == 2 then\n    return 1\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 tags=lua |>\nUsing Lua 5.3 and coroutines, you can do it with one\
    \ loop:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4oz10wa2.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n==0 then\n    return\
    \ 0\n  end\n  if n==1 then\n    return 1\n  end\n  return fib(n-1) + fib(n-2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local prev, curr, i = 1,\
    \ 1, 1\n  while i <= n do\n    prev, curr = curr, prev + curr\n    i = i + 1\n\
    \  end\n  return prev\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0k4nrvv.lua:20:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpx0k4nrvv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local a, b = 0, 1\n   \
    \ for i = 1, n do\n        a, b = b, a+b\n    end\n    return b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0i1ztz0.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpa0i1ztz0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local i, a = 1, 0\n  local\
    \ j, n1 = 0, 1\n  if n > 0 then\n    while j <= n do\n      local n = n1 + a\n\
    \      a, n1 = n1, n\n      i = i + 1\n      j = j + 1\n    end\n  end\n  return\
    \ i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcevjp4oh.lua:25:\
    \ expected: 55, actual: 12\nstack traceback:\n\t/tmp/tmpcevjp4oh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    local a = 0\n    local\
    \ b = 1\n    while n > 1 do\n        a, b = b, a + b\n        n = n - 1\n    end\n\
    \    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- Base case\n  if n < 2\
    \ then return n end\n  \n  -- Recursive case\n  local fibs = fib(n - 1) + fib(n\
    \ - 2)\n  return fib\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8jb2nvw.lua:13:\
    \ attempt to perform arithmetic on a function value\nstack traceback:\n\t/tmp/tmpo8jb2nvw.lua:13:\
    \ in upvalue 'fib'\n\t/tmp/tmpo8jb2nvw.lua:13: in upvalue 'fib'\n\t/tmp/tmpo8jb2nvw.lua:13:\
    \ in upvalue 'fib'\n\t/tmp/tmpo8jb2nvw.lua:13: in upvalue 'fib'\n\t/tmp/tmpo8jb2nvw.lua:13:\
    \ in upvalue 'fib'\n\t/tmp/tmpo8jb2nvw.lua:13: in upvalue 'fib'\n\t/tmp/tmpo8jb2nvw.lua:13:\
    \ in upvalue 'fib'\n\t/tmp/tmpo8jb2nvw.lua:13: in local 'candidate'\n\t/tmp/tmpo8jb2nvw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error(\"\
    fib only accept integer positive number\")\n  end\n  local fib0\n  local fib1\n\
    \  local fib_n\n  if n > 2 then\n    fib_n = fib(n-1) + fib(n-2)\n    fib0 = fib1\n\
    \    fib1 = fib_n\n  else\n    fib_n = (n-1) * fib(n-2) + fib(n-3)\n    fib0 =\
    \ fib_n\n    fib1 = fib(n-1)\n  end\n  return fib0\nend\n</code>\n<|/ a dscore=2\
    \ tags=algorithm,fibonacci,lua |>\n<| a |>\n<code>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpau06458v.lua:26: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n==0 then\n\t\treturn\
    \ 0\n\telseif n==1 then\n\t\treturn 1\n\telse\n\t\treturn fib(n - 1) + fib(n -\
    \ 2)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 1 then\n    error(\"\
    fib expects a positive integer\")\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n == 2 then\n    return 1\n  else\n    return fib(n - 2) + fib(n - 1)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then return nil\
    \ end\n  if n < 2 then return 1 end\n  return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v72py_c.lua:17:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp2v72py_c.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 2 then return n end\n\
    \treturn fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error('fib\
    \ index out of range')\n  elseif n < 2 then\n    return n\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then return 1 end\n\
    \  return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u06rvos.lua:16:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp_u06rvos.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 or n == 1 then\n\
    \        return n\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 2 then return n end\n\
    \treturn fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\t-- Use cached result if available.\n\
    \tif n == 1 then\n\t\treturn 1\n\tend\n\tif n == 2 then\n\t\treturn 2\n\tend\n\
    \treturn fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7893nqsa.lua:22:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp7893nqsa.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ 1\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zlqki6h.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmp2zlqki6h.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n == 1 or n == 2 then\n    return 1\n  end\n  return fib(n\
    \ - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n==0 or n==1 then\n\t\t\
    return n\n\telseif n<0 then\n\t\treturn fib(n-2)+fib(n-1)\n\telse\n\t\treturn\
    \ fib(n-1)+fib(n-2)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 1 then\n       \
    \ return n\n    elseif n < 2 then\n        return 1\n    else\n        return\
    \ fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  -- https://stackoverflow.com/questions/2049222/fibonacci-numbers-in-python\n\
    \  return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=4 tags=performance,fibonacci,lua\
    \ |>\n<| c |>\nThe point of this post was to show how to write Fibonacci using\
    \ recursive functions, not for you to write the code for them.\n<|/ c |>\n<| c\
    \ |>\nThe question was \"how do you write Fibonacci in Lua?\" -- not \"what are\
    \ the best ways to write Fibonacci?\" The answers include recursive functions,\
    \ memoization, etc. One answer that does not use recursion but is O(log n) is\
    \ O(log^2 n) -- so this isn't \"the best way\". Also it's not \"fastest way\"\
    , as this question does use recursion.\n<|/ c |>\n<| c |>\n, while I agree that\
    \ recursion is preferable for solving this problem, it still doesn't answer the\
    \ question as asked.\n<|/ c |>\n<| a tags=performance,fibonacci,lua dscore=4 |>\n\
    Here's a more efficient implementation, which also makes it easy to write Fibonacci\
    \ numbers to any power.  It's also easy to write a Fibonacci function which returns\
    \ the nth Fibonacci number, so you don't have to keep track of the current and\
    \ previous numbers (as in Lua's Fibonacci function).  It's also easy to find the\
    \ nth Fibonacci number given a power.  \nHere's the code:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmf9g8ihe.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n <= 1 then\n      \
    \  return n\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkszaz7lj.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tlocal n1, n2 = 1, 1\n\tfor\
    \ i = 2, n do\n\t\tn1, n2 = n2, n1 + n2\n\tend\n\treturn n2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyh7r0g_.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmpuyh7r0g_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n == 1 or n == 2 then\n\
    \    return 1\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\n</cell>\n<text>\nOkay,\
    \ that works, right? So now let's see how to use it to calculate Fibonacci numbers.\
    \ Let's begin by asking Python for the first 10 numbers:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb0c1i5cv.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 0 then\n    return\
    \ 0\n  end\n  if n == 1 then\n    return 1\n  end\n  return fib(n - 1) + fib(n\
    \ - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local a, b = 0, 1\n  for\
    \ i = 1, n do\n    a, b = b, a + b\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n      \
    \  return 0\n    elseif n == 1 then\n        return 1\n    else\n        return\
    \ fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
