name: HumanEval_76_is_simple_power
language: lua
results:
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    local\
    \ power = math.pow(10, math.floor(math.log10(x) + 1))\n    return is_simple_power(x,\
    \ n / power) and n % power\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoakk0xic.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpoakk0xic.lua:15: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpoakk0xic.lua:16: in upvalue 'is_simple_power'\n\t/tmp/tmpoakk0xic.lua:16:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpoakk0xic.lua:16: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpoakk0xic.lua:16: in upvalue 'is_simple_power'\n\t/tmp/tmpoakk0xic.lua:16:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpoakk0xic.lua:16: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpoakk0xic.lua:16: in upvalue 'is_simple_power'\n\t/tmp/tmpoakk0xic.lua:16:\
    \ in upvalue 'is_simple_power'\n\t...\n\t/tmp/tmpoakk0xic.lua:16: in local 'candidate'\n\
    \t/tmp/tmpoakk0xic.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.170\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  assert(n ~= nil)\n  assert(n >= 1)\n  assert(is_number(x))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf3tgzx83.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- base case\n    if n == 1 then return true end\n\
    \    -- check power\n    if math.floor(n) ~= n or n % 1 ~= 0 then return false\
    \ end\n    -- check base\n    if x <= 1 then return false end\n    -- check power\n\
    \    if math.floor(math.log(x) / math.log(2)) ~= math.log(x) / math.log(2) then\
    \ return false end\n    -- check base\n    if x <= 1 then return false end\n \
    \   -- success!\n    local div, mod = divrem(math.floor(math.log(x) / math.log(2)),\
    \ n)\n    return mod == 0 and x == div * math.log(2) and math.floor(math.log(x)\
    \ / math.log(2)) == div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3japs7ep.lua:23:\
    \ attempt to call a nil value (global 'divrem')\nstack traceback:\n\t/tmp/tmp3japs7ep.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp3japs7ep.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 0 then\n        return true\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5ifw6578.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- base case: n==0\n  if n==0 then return true end\n\
    \  -- base case: n==1\n  if n==1 then return x == 1 end\n  -- base case: n==2\
    \ or n==3\n  if n==2 or n==3 then return (x==1) or (x==3) end\n  -- recursive\
    \ case\n  return is_simple_power(x*x, n/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpadvvpp8o.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpadvvpp8o.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return (x == n and n >= 1) or (n == 1 and x ~= 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnj30ber.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppnj30ber.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- Base case\n    if x==1 then return true end\n\
    \    -- Check for simple powers of two\n    if x==n then return true end\n   \
    \ -- Check for powers of two\n    for i=2,n do\n        if x%i==0 then return\
    \ false end\n    end\n    -- Check for powers of three\n    for i=3,n do\n   \
    \     if x%(i*i)==0 then return false end\n    end\n    -- Check for powers of\
    \ five\n    for i=5,n do\n        if x%(i*i*i)==0 then return false end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre3so6cz.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpre3so6cz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Based on http://stackoverflow.com/a/2510408/989730\
    \ and\n  -- http://stackoverflow.com/a/2754677/989730.\n  if n<1 then return false\
    \ end\n  if n==1 then return true end\n  if x==1 then return true end\n  local\
    \ ret=false\n  if n<3 then\n    if x==1 then return true end\n    if x==n then\
    \ return true end\n    if x%n==0 then return true end\n    ret=x<=n\n  elseif\
    \ x%n==0 then\n    ret=x<=n\n  else\n    ret=x%n==0 and is_simple_power(x, n-1)\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexkgpzt9.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpexkgpzt9.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x==1 then return true end\n  if n==1 then return\
    \ true end\n  if x>n then return false end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwbda4j7.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwwbda4j7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return not (n and (x == x)) and\n    ((x == 1) and\
    \ (n >= 1)) or\n    (n > 1 and (n % x) == 0) or\n    (x > 2 and (x == x) and (n\
    \ >= 2) and (n%x == 0)) or\n    (x > 2 and (x == x) and (n >= 2) and (n%x == 0)\
    \ and\n      not is_simple_power(n, x-1))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvi2wgtj.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyvi2wgtj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local n_square = math.pow(n, 2)\n    return x ==\
    \ n_square\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cx_sry8.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3cx_sry8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- Base case\n   if n == 0 then\n      return true\n\
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg7jzbw6o.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n==0 then return true end\n    local y = math.pow(10,\
    \ math.floor(math.log(abs(x)) / math.log(10)))\n    return (n*n)==x or y*n==x\
    \ or x==(x*n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ub76lvf.lua:13:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp4ub76lvf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4ub76lvf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if n == 1 then return x == 1\n  elseif\
    \ x == n then return true --return true is x is a simple power of n\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoqnekqbe.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n==0 then\n        return true\n    else\n   \
    \     return (x%n==0 and is_simple_power(x, n-1))\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdabz5tgh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdabz5tgh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x==n then\n    return true\n  end\n  local ret=true\n\
    \  for i=1,n do\n    if x%n==0 then\n      ret=false\n      break\n    end\n \
    \ end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspbx6zo5.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpspbx6zo5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local res = false\n    -- check power of x to power\
    \ of n\n    if x == n then\n        res = true\n    elseif x <= n then\n     \
    \   res = is_simple_power(x ^ n, n)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8aelcf5.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg8aelcf5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  end\n  local i =\
    \ 1\n  while i < n do\n    if x % i == 0 then\n      return false\n    end\n \
    \   i = i * 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6vohwb_.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq6vohwb_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\t-- Base case\n\tif n == 1 then return x == n end\n\t\
    -- Base case\n\tif n < 0 then return false end\n\t-- Recursive case\n\treturn\
    \ x == n or is_simple_power(x^n, n-1)\nend\nprint(is_simple_power(8, 2))\nprint(is_simple_power(2,\
    \ 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(2, 3))\nprint(is_simple_power(3,\
    \ 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpdlgkxhjv.lua:30: expected: true, actual: false\nstack\
    \ traceback:\n\t/tmp/tmpdlgkxhjv.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return not n or x == n and n or x == n*n and 1 or\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplajursib.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplajursib.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x > n or n < 0 then\n    return false\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6cxadyq6.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return n == 1 or (x == 0 and n == 2) or (x == 0 and\
    \ n % 2 == 0) or (x == n and n % 2 == 1);\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09xr_kks.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp09xr_kks.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 1 then return true end\n    if n%2==0 then\
    \ return is_simple_power(x*x,n/2) end\n    \n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_wjak_t.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_wjak_t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- recursive case\n  if x == n then\n    return true\n  end\n  -- Check\
    \ if x is power of n-1\n  if x ~= n and x % n == 0 then\n    return false\n  end\n\
    \  return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucv1soe0.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpucv1soe0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ not (x%n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_39ot3u.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl_39ot3u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\treturn math.pow(n, n) == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81tz4a63.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81tz4a63.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if x == n then return\
    \ true end\n  local m = x\n  while m > n do\n    m /= n\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpno_zz7cq.lua:16: syntax error near '/'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h6giymg.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0h6giymg.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\t-- write your code in Lua 5.1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheu8fz4z.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpheu8fz4z.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x==n then\n    return true\n  elseif n==1 then\n\
    \    return false\n  elseif n>1 then\n    return is_simple_power(x, n-1) and is_simple_power(x*x,\
    \ n)\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftw_iwgg.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpftw_iwgg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Write code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndyr44sn.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpndyr44sn.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- base case\n   if (n == 0) then return false end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw4_duukw.lua:30: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local res = false -- false by default\n    -- Check\
    \ for simple power\n    if x ~= 1 and x ~= n then\n        -- Check that n is\
    \ a power of x\n        if x<n then\n            res = true -- x is a power of\
    \ n\n        else\n            -- Check whether x is a power of n-1\n        \
    \    if x%n==0 then\n                -- If x is a power of n-1, n is a simple\
    \ power of n\n                res = true\n            else\n                --\
    \ If x is not a power of n-1, n is not a simple power of n\n                res\
    \ = false\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54pbznq9.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp54pbznq9.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   return n**x == x end\nend\n</code>\nI wrote a recursive\
    \ function is_simple_power that takes a number x and a number n and determines\
    \ whether x is a simple power of n. This function returns true if x is a simple\
    \ power of n and false otherwise. \nI wrote another recursive function is_simple_power_of_p\
    \ that takes two numbers x and n. This function determines whether x is a simple\
    \ power of n by iterating over all integers up to and including n and calling\
    \ is_simple_power with n and the corresponding power of n.\nis_simple_power_of_p\
    \ returns true if the first argument, x, is a simple power of n, and false otherwise.\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeeje_53t.lua:12: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return 1 end\n  -- We do not need to\
    \ use power because we do not need to calculate x**n\n  -- in most cases. Here\
    \ we take advantage of the fact:\n  --\n  --    if n>0 then\n  --        x**n\
    \ ~= (x**(n-1))**n\n  --    else if n<0 then\n  --        x**n ~= (1/x)**(-n)\n\
    \  --    end if\n  --\n  -- and hence:\n  --\n  --    if n>0 then\n  --      \
    \  (x**n)^n = x^(n-1)\n  --    else if n<0 then\n  --        (x/x)^(-n) = (1/x)**(-n)\n\
    \  --    end if\n  --\n  -- and hence:\n  --\n  --    x**n = x^(n-1) * x^(n-2)\n\
    \  --\n  -- and hence:\n  --\n  --    (1/x)**n = x^(n-1) * x^(n-2)\n  --\n  --\
    \ and hence:\n  --\n  --    x**n = x^(n-1) * x^(n-2)\n  --    x**n = x^(n-1) *\
    \ x^(n-2)\n  --\n  -- and hence:\n  --\n  --    x**n = x^(n-1) * x^(n-2)\n  --\
    \    x**n = x^(n-1) * x^(n-2)\n  --\n  -- and hence:\n  --\n  --    x**n = x^(n-1)\
    \ * x^(n-2)\n  --    x**n = x^(n-1) * x^(n-2)\n  --    x**n = x^(n-1) * x^(n-2)\n\
    \  --    x**n = x^(n-1) * x^(n-2)\n  --\n  -- and hence:\n  --\n  --    x**n =\
    \ x^(n-1) * x^(n-2)\n  --    x**n = x^(n-1) * x^(n-2)\n  --    x**n = x^(n-1)\
    \ * x^(n-2)\n  --    x**n = x^(n-1) * x^(n-2)\n  --\n  -- and hence:\n  --\n \
    \ --    x**n = x^(n-1) * x^(n-2)\n  --    x**n = x^(n-1) * x^(n-2)\n  --    x**n\
    \ = x^(n-1) * x^(n-2)\n  --    x**n = x^(n-1) * x^(n-2)\n  --    x**n = x^(n-1)\
    \ * x^(n-2)\n  --\n  -- and hence:\n  --\n  --\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp813m51x3.lua:89: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- base case: x is a power of n\n  if n == 1 then\n\
    \    return true\n  end\n  -- base case: x is not a power of n\n  if x ~= n then\n\
    \    return false\n  end\n  -- recursive case: x is simple power of n\n  if x\
    \ > 1 then\n    return is_simple_power(x ^ n, n)\n  end\n  -- recursive case:\
    \ x is not simple power of n\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pwwrue3.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1pwwrue3.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x > n\
    \ then\n    return false\n  end\n  if x <= 1 then\n    return false\n  end\n \
    \ if x == 1 then\n    return true\n  end\n  return is_simple_power(x / n, n) or\
    \ is_simple_power(x, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegoa9ahz.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpegoa9ahz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local pow = x^n\n    return pow == x or (not pow)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss1fs1s_.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpss1fs1s_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x and ((n == 1) and (x == x))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu69wpr9e.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu69wpr9e.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpavppkgca.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if n == 0 then\n    return not x\n\
    \  else\n    return not not is_simple_power(x, n / 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfikpkx1f.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfikpkx1f.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- Base cases\n    if x == 1 then\n        return\
    \ true\n    end\n    if n == 0 then\n        return false\n    end\n    -- Check\
    \ for perfect power\n    if x == n then\n        return true\n    end\n    --\
    \ Check for perfect power with factors of 2\n    if n % 2 == 0 then\n        local\
    \ i = 2\n        while i <= n do\n            if x % i == 0 then\n           \
    \     return false\n            end\n            i = i * 2\n        end\n    \
    \    return true\n    end\n    -- Check odd powers\n    for i = 1, n do\n    \
    \    if x % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcs1xm68l.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcs1xm68l.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return n <= x and (x == n) or (x % n == 0 and is_simple_power(x\
    \ / n, n-1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9abdvfh.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb9abdvfh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == math.pow(n, math.floor(x))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwk3458sx.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwk3458sx.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    -- We need to find m such that n**m=x\n    local\
    \ m = nil\n    repeat\n      m = m + 1 -- O(m)\n    until not m or m * n == x\n\
    \    return m\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpae4afe5e.lua:20:\
    \ attempt to perform arithmetic on a nil value (local 'm')\nstack traceback:\n\
    \t/tmp/tmpae4afe5e.lua:20: in local 'candidate'\n\t/tmp/tmpae4afe5e.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tif n == 1 then return true end\n\tlocal factor = 1\n\
    \tlocal i = 1\n\twhile factor <= n do\n\t\tif x % factor == 0 then\n\t\t\treturn\
    \ false\n\t\telse\n\t\t\tfactor = factor + 1\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpni62ntue.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpni62ntue.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local nint, i = tonumber(n), 1\n    while i <= nint\
    \ do\n        x = math.pow(x, n)\n        i = i + 1\n    end\n    return x ==\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr647jn5_.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr647jn5_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return math.modf(x)[1]==n and math.sqrt(x) == math.pow(x,\
    \ n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcedaoylb.lua:12:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpcedaoylb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpcedaoylb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x^n == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2waurf_.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy2waurf_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if x == n then return\
    \ true end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz9wcs0h.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfz9wcs0h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n==1 then\n        return true\n    end\n    if\
    \ n==2 then\n        return (x==1)\n    end\n    return (x%n==0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ovvevla.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9ovvevla.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- Base case: x is 0 mod n\n   if x == 0 then\n  \
    \    return n==1 and is_power_of_two(bits.lshift(n, 0))\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzqvwpnlk.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyh2et3gu.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == n * math.pow(n, x)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1kyzw4rw.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Write your code here.\n  local function is_power_of_one(x)\n\
    \    if x <= 1 then return false end\n    if x > 1 then return is_power_of_one(x\
    \ / 2) end\n    return x ~= 0 and ((x%2)==0 or ((x%4)==0 and ((x%8)==0 or x%8==16)))\n\
    \  end\n  if x == 1 then return true end\n  if n <= 0 then return false end\n\
    \  if n==1 then return x == n end\n  if n >= 2 then return (is_power_of_one(2\
    \ * x) and is_power_of_one(n - 2 * x)) end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_8van2k.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt_8van2k.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 1 then\n        return true\n    end\n  \
    \  local x_int = math.floor(x)\n    local x_float = math.floor(x) - x_int\n  \
    \  local n_int = math.floor(n)\n    local n_float = n - n_int\n    return ((x_float\
    \ == 0) and (n_float == 0)) or\n        (n_int == 0 and x_int % n_int == 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ujr_8fg.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ujr_8fg.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- base case\n  if x==n then\n    return true\n  end\n\
    \  -- check if x is a simple power of n\n  if n==1 then\n    return true\n  else\n\
    \    -- if x is not a power of n then check if x can be divided by n\n    local\
    \ div = x:div(n)\n    if div:is_integer() then\n      return true\n    else\n\
    \      return false\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzx4tlq31.lua:21:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmpzx4tlq31.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpzx4tlq31.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return n % 2 == 0 and x >= n*n and x % n == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeux3o446.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeux3o446.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- base cases\n    if n==0 then return false end\n\
    \    if n==1 then return true end\n    -- recursive case\n    if x%n==0 then return\
    \ true end\n    return false\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_r0q1x45.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Your code here!\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49pksolv.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp49pksolv.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return n==1 and x==x^0 or n>1 and x*(x-1)==x^n or n==1\
    \ and x==x^(1-1) or n==0 and x==1 or n==2 and x==x^(2-1) or n==2 and x==x^(2-2)\
    \ or n>2 and x*(x-2)==x^(n-1) or n>1 and x*(x-2)==x^(n-2) or n>2 and x*(x-4)==x^(n-3)\
    \ or n>2 and x*(x-16)==x^(n-5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8ecnkc6.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv8ecnkc6.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x >= 1 and x % n == 0 and is_simple_power(x/n,\
    \ n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszsebc10.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpszsebc10.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x==1 then return n ~= 1 end\n  if n <= 0 then return\
    \ false end\n  if x < 1 then return false end\n  local result = 1\n  local i =\
    \ 1\n  while i <= n do\n    if x%i == 0 then\n      result = false\n      break\n\
    \    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8woz4h1.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg8woz4h1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then\n    return x == n\
    \ and n ~= 1\n  elseif n == 1 then\n    return x ~= n and x ~= 1\n  else\n   \
    \ -- Recursion\n    return is_simple_power(x^n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if x == 1 then\n    return n == 1 and\
    \ x == 1 and x == 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7vh0aqur.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   return (x == 1 and n or n^x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphm1f9tk8.lua:18:\
    \ expected: true, actual: 65536\nstack traceback:\n\t/tmp/tmphm1f9tk8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- Your code here\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u55482r.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_u55482r.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   if n <= 1 then return x ~= nil end\n   local r = math.abs(x)\
    \ / n\n   return (r * r == math.floor(r)) and (r * r == math.ceil(r))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnicxkidg.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnicxkidg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x > n and math.fmod(x, n)==0 and n ~= 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_5go0s3.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_5go0s3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ ((x % n) == 0)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8gb3bc6.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn8gb3bc6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if x == 1 then return\
    \ false end\n  if x == 0 then return false end\n  if n > 1 then\n    local x_pow\
    \ = is_simple_power(x, n-1)\n    return x_pow and (x % n == 0 or x_pow)\n  else\n\
    \    return x == x * n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29l5d9jm.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp29l5d9jm.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    -- Special case for n=1\n    return\
    \ true\n  elseif n == x then\n    -- Special case for x=1\n    return true\n \
    \ else\n    -- Test for power of x\n    return not (x ^ n) or is_simple_power(x\
    \ ^ n, n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xoiz57v.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8xoiz57v.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if x==1 or x==0 then return false end\n\
    \  -- x is a power of n\n  if n==0 or n==1 then return true end\n  -- x is greater\
    \ than n\n  if x>n then return false end\n  -- Assume x is integer\n  local t=math.floor(x)\n\
    \  -- Test whether x is a power of n\n  for i=1,n do\n    if x%i==0 and x%(i*i)==0\
    \ then return false end\n  end\n  -- If x is a power of n\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponew2o7u.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmponew2o7u.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8t9bpg2f.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp8t9bpg2f.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x ~= n then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl2j95isk.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  assert(type(n) == \"number\" and type(x) == \"number\"\
    )\n  if x == n then\n    return true\n  elseif n < 0 or n > x then\n    return\
    \ false\n  elseif n < 0 then\n    return not is_simple_power(-x, n)\n  else\n\
    \    return not is_simple_power(x, n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzo3mez2y.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzo3mez2y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 1 then\n        return true\n    end\n  \
    \  if x ~= x % n then\n        return false\n    end\n    return is_simple_power(x\
    \ / n, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjzxny2f.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmjzxny2f.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 0 then return false end\n    if x == 1 then\
    \ return true end\n    if n % 2 == 1 then\n        return is_simple_power(x *\
    \ x, n / 2)\n    else\n        return is_simple_power(x, n / 2)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0y4inycq.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0y4inycq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x==n then\n    return true\n  end\n  if n==1 then\n\
    \    return true\n  end\n  if n==2 then\n    return x==1 and x==n\n  end\n  if\
    \ n>3 and x>=n then\n    return false\n  end\n  local i=1\n  while i<=n do\n \
    \   if x%n==0 then\n      return false\n    end\n    x=x/n\n    i=i+1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey2sv4zr.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpey2sv4zr.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopj9hq41.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpopj9hq41.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif n < 0 then\n\
    \    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptvyvpqf4.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxoo5ehf1.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpxoo5ehf1.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then\n    return true\n  end\n  if x == 1\
    \ then\n    return true\n  end\n  if x == 0 then\n    return false\n  end\n  if\
    \ x < 1 then\n    return false\n  end\n  if n < 0 then\n    return false\n  end\n\
    \  return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  return (x == x)\
    \ and (x == n) and (n == n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qhtev4b.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4qhtev4b.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r3qjve7.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2r3qjve7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  if x == 1 then return\
    \ true end\n  if x == 0 then return false end\n  local d = tonumber(string.format(\"\
    %.\" .. n .. \"f\", x))\n  if d == x then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2g3q6k_5.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2g3q6k_5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  assert(type(n) == 'number')\n  assert(type(x) == 'number')\n\
    \  if n == 0 then return false end\n  if x == 1 then return true end\n  local\
    \ power = 1\n  repeat\n    power = power * n\n  until power > x\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiz41or4f.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiz41or4f.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfw7ix751.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpfw7ix751.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  end\n  if x == 0\
    \ then\n    return false\n  end\n  return n % x == 0 and is_simple_power(x * x,\
    \ n / x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzioq78q1.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzioq78q1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- TODO: When you have a number that is power of\
    \ another number, find out how to calculate it\n    -- in order to speed up the\
    \ process.\n    -- for example: x = 8 and n = 4, then 8^4=16\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra1k_oab.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpra1k_oab.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x > 0 and (x == 1 or (x == n and n % 2 == 1))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcigs7k1k.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcigs7k1k.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then\n        return true\n    end\n  \
    \  local factors = math.pow(10, math.floor(math.log(n) / math.log(2)))\n    if\
    \ x < factors and n % x == 0 then\n        return true\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnptw4cu5.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnptw4cu5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n <= 0 then return false end\n  if n==1 then return\
    \ true end\n  if x==1 then return false end\n  if x==0 or x<0 then return false\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9zzya2ra.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 0 then return true end\n    if n == 1 then\
    \ return x == 1 end\n    if x%n == 0 then return is_simple_power(x/n, n) end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8eoui5wj.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8eoui5wj.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x and ((x == n) and (x) or (math.fmod(x, n)\
    \ == 0))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1p68tdt.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1p68tdt.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base Cases\n  if x == 1 then return true end\n \
    \ if x == n then return true end\n  if x > n then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg9qzqrl0.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   assert(n > 0, 'Power should be > 0')\n   if x == n\
    \ then\n      return true\n   end\n   if n < 0 then\n      x = x * -1\n      n\
    \ = -n\n   end\n   -- Find floor(n)\n   local f = math.floor(n)\n   -- The number\
    \ is simple if f==n or f*(n+1)==x\n   return (f == n or f * (n+1))^x == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpthy8z3fz.lua:23:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpthy8z3fz.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpthy8z3fz.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Write your code here\n  return not n or (n == 1\
    \ and x == 1) or (n == 2 and x == 2) or (n == 3 and x == 3) or (n == 4 and x ==\
    \ 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgn82q5qp.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgn82q5qp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n == 1 then return x == n end\n  if n == x then return true\
    \ end\n  if n < 0 then return x == n end\n  if x < 0 then return false end\n \
    \ if x < 1 then return false end\n  if x < 2 then return false end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp_jmbjl.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmp_jmbjl.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- your code\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtdhvmn8.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpmtdhvmn8.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   if x < n then\n      return false\n   end\n   \n \
    \  -- if n is odd then x is simple power\n   if n == 1 or n % 2 == 0 then\n  \
    \    return true\n   end\n   \n   -- if n is even then x is not simple power\n\
    \   if n % 2 == 1 then\n      return false\n   end\n   \n   -- if n is even then\
    \ x is simple power of even number\n   if n % 2 == 0 then\n      local x_1 = x\
    \ - 1\n      local x_2 = x - 2\n      local x_3 = x - 3\n      local x_4 = x -\
    \ 4\n      \n      if x_1 == 0 then return false\n      elseif x_2 == 0 then return\
    \ true\n      elseif x_3 == 0 then return false\n      elseif x_4 == 0 then return\
    \ false\n      elseif x_4 == 1 then return true\n      else return false\n   \
    \   end\n      \n   else\n      -- if n is odd then x is simple power of odd number\n\
    \      if n % 2 == 1 then\n         local x_1 = x - 1\n         local x_2 = x\
    \ - 2\n         local x_3 = x - 3\n         local x_4 = x - 4\n         \n   \
    \      if x_1 == 0 then return true\n         elseif x_2 == 0 then return false\n\
    \         elseif x_3 == 0 then return false\n         elseif x_4 == 0 then return\
    \ false\n         elseif x_4 == 1 then return false\n         else return true\n\
    \         end\n         \n      else\n         -- if n is even then x is not simple\
    \ power\n         local x_1 = x - 1\n         local x_2 = x - 2\n         local\
    \ x_3 = x - 3\n         local x_4 = x - 4\n         \n         if x_1 == 0 then\
    \ return false\n         elseif x_2 == 0 then return true\n         elseif x_3\
    \ == 0 then return false\n         elseif x_4 == 0 then return false\n       \
    \  elseif x_4 == 1 then return false\n         else return true\n         end\n\
    \      end\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4go4_3pq.lua:79:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4go4_3pq.lua:79:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local nint = math.floor(n-1)\n  return x%n == x and\
    \ is_simple_power(x, nint)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkg5i32v.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphkg5i32v.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x < 1 then return false end\n  if x ~= n then return\
    \ false end\n  if x <= 1 then return true end\n  for i = 1, n do\n    if x ~=\
    \ i*n*n then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp7bk482.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnp7bk482.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x > n then\n    return false\n  elseif x == n then\n\
    \    return true\n  elseif n%2 == 0 then\n    return is_simple_power(n//2, n)\n\
    \  else\n    return is_simple_power(n//2, n) or is_simple_power(n//2, n-1)\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehqkuzz0.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpehqkuzz0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\t-- Base case:\n\tif n == 0 then\n\t\treturn x == 1\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2jq55oc8.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return true end\n  if x == 1 then return\
    \ n == 1 end\n  if n % 2 == 1 then return false end\n  -- We should consider adding\
    \ 3 cases and return false in case\n  -- x > n/2\n  local n1, n2 = 1, n\n  while\
    \ n2 <= x do\n    n1, n2 = n2, n1 + n2\n  end\n  return n1 ~= x and n2 ~= n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyklw5m6m.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyklw5m6m.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- Base case\n   if n == 1 then\n      return x ==\
    \ 1\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp20w7pm6p.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- write your solution here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6u_2mi1o.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp6u_2mi1o.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 0 then return false end\n    if n == 1 then\
    \ return x == 1 end\n    if x == 1 and n % 2 == 1 then return false end\n    if\
    \ x % n == 0 then return true end\n    return is_simple_power(x//n, n) or is_simple_power(x,\
    \ n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxskz0yp.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgxskz0yp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then\n    return false\n  elseif n == 1 then\n\
    \    return (x == 1)\n  else\n    return (x == n^1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wbz8ie0.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2wbz8ie0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return (x == 1)\n  else\n    --\
    \ If the power is odd, then it is simple.\n    return not (x % 2)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsgrla41.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcsgrla41.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then return true end\n  --\
    \ If n is too large then this is not a power of n.\n  if n >= x/2 then return\
    \ false end\n  -- If x is not a power of n then this is not a simple power of\
    \ n.\n  if x ~= math.pow(n, x) then return false end\n  -- If x is a power of\
    \ n and n != x then x is not a simple power of n.\n  -- This is an important case.\n\
    \  if n == x then return false end\n  -- This is not a power of n so check if\
    \ it is a simple power of n-1.\n  return is_simple_power(x/n, n-1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxq63l3ek.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxq63l3ek.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   if n <= 0 then return false end\n   if n ~= x then\n\
    \      return false\n   end\n   for i=1, n do\n      if x%n == 0 then return false\
    \ end\n      x = x/n\n   end\n   return true\nend\nprint(is_simple_power(4, 2))\n\
    print(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3,\
    \ 1))\nprint(is_simple_power(5, 3))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\nfalse\nfalse\nfalse\nfalse\nF\nFailed tests:\n-------------\n1)\
    \ test_humaneval\n/tmp/tmp07tan2jo.lua:31: expected: true, actual: false\nstack\
    \ traceback:\n\t/tmp/tmp07tan2jo.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  assert(x > 1)\n  assert(n > 1)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp93_dadtk.lua:30: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15brci_i.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp15brci_i.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x == (n ^ int)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2a9kb1d6.lua:12:\
    \ attempt to perform arithmetic on a nil value (global 'int')\nstack traceback:\n\
    \t/tmp/tmp2a9kb1d6.lua:12: in local 'candidate'\n\t/tmp/tmp2a9kb1d6.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Your code here\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7r3bq57.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv7r3bq57.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  return x >= (n-1)\
    \ and (x == n**(n-1) or is_simple_power(x, n-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr1rv9cf8.lua:13: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- Base case\n   if x == 1 then\n      return true\n\
    \   end\n   -- Recursive case\n   if x > n then\n      return false\n   end\n\
    \   -- Try powers of 2\n   for i=0,n do\n      if x%i == 0 then\n         return\
    \ false\n      end\n   end\n   -- Try powers of n\n   if n == 1 then\n      for\
    \ i=2,n do\n         if x%i == 0 then\n            return false\n         end\n\
    \      end\n   else\n      for i=2,n do\n         if x%i*i == x then\n       \
    \     return false\n         end\n      end\n   end\n   return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjpsn5cg.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqjpsn5cg.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local n = n or 1\n  -- base case\n  if x == 1 then\n\
    \    return true\n  end\n  -- check exponent\n  if n % 2 == 1 then\n    return\
    \ false\n  end\n  -- check for power of three\n  if x > n then\n    return false\n\
    \  end\n  -- check for power of five\n  if x < n then\n    return false\n  end\n\
    \  -- check for powers of five\n  if x > n then\n    return false\n  end\n  --\
    \ check for powers of five\n  if x > n then\n    return false\n  end\n  -- check\
    \ for powers of five\n  if x > n then\n    return false\n  end\n  -- check for\
    \ powers of five\n  if x > n then\n    return false\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bqykq1_.lua:51:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3bqykq1_.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   return (x == 1 and n == 1) or (x%n == 0 and is_simple_power(x,\
    \ n-1) )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbofct39_.lua:12:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpbofct39_.lua:12: in upvalue\
    \ 'is_simple_power'\n\t/tmp/tmpbofct39_.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpbofct39_.lua:12: in local 'candidate'\n\t/tmp/tmpbofct39_.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   return n^int = x\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp790ckymw.lua:12: 'end' expected (to close 'function' at line\
    \ 11) near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n<0 then return false end\n    if n==0 then return\
    \ true end\n    if n==1 then return x==n end\n    for i=2, n do\n        if x%n==0\
    \ then return false end\n        x=x/n\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpci7prum8.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpci7prum8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if(not n) return false\n  if(n == 1)\
    \ return true\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkpj1lcgp.lua:13: 'then' expected near 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return n==1 or x<n/2 or n<1 or x>n or x<n*n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxauqarkt.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxauqarkt.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  local x_p = math.floor(x)\n\
    \  local x_f = x - x_p\n  return x_p == n and x_f == 0 or x_p*x_f == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpriswzdpr.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpriswzdpr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- write your solution here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8ew3df3.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpa8ew3df3.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n==1 then return true end\n    if n==0 then return\
    \ false end\n    if n==-1 then return is_simple_power(x, n-1) return end\n   \
    \ if x==1 then return true end\n    if x==0 then return false end\n    if x==-1\
    \ then return is_simple_power(x, n-1) return end\n    if x>0 and x<=n then return\
    \ true end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4me2usd5.lua:14: 'end' expected near 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   if n <= 1 then return false end\n   if x < n then\
    \ return false end\n   return n == x or (n%x == 0 and is_simple_power(x, n/x))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps60rc99j.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps60rc99j.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return n==1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdb5laale.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Your code here!\n  return false -- Your code here!\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghzqbrsb.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpghzqbrsb.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x ~= 1\n  elseif n < 0 then\n\
    \    return false\n  elseif n ~= 1 then\n    return is_simple_power(x, n - 1)\n\
    \  else\n    return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2einu5j.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi2einu5j.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local mult = math.pow(x, n)\n  return mult == x --\
    \ or return mult == int(x*n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4b9ohfop.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4b9ohfop.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cj792z7.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7cj792z7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- TODO: Try to optimize this with some math magic\n\
    \   if n == 1 then\n      return x==1\n   else\n      return x == n**x\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv7age0qj.lua:16: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- Base cases\n   if x == 1 then return true end\n\
    \   if x == 0 then return false end\n   if n == 0 then return false end\n   if\
    \ n < 0 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8pg2lj8_.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == n then\n    return true\n\
    \  elseif n < 0 then\n    return false\n  elseif n == 0 then\n    return false\n\
    \  elseif n == 1 then\n    return false\n  else\n    -- Recursive step\n    return\
    \ is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tif x<0 then return false end\n\tx = x^(1/n)\n\tlocal\
    \ r = 1\n\tfor i = 1,n do r = r*x end\n\treturn r==x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m5dcjc1.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9m5dcjc1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case.\n  if n == 1 then\n    return true\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0yg7nbf8.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 0 then return false end\n    if n == 1 then\
    \ return true end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps58fjb19.lua:30: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return n == 0 or n % x == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bw2h_af.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5bw2h_af.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\t-- Write your code here\n\t-- Your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bq2zy2x.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0bq2zy2x.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x ~= 1 then return false end\n    if n == 2 then\
    \ return true end\n    if n % 2 == 0 then return false end\n    for i=3, 32, 1\
    \ do\n        if x % i == 0 then return false end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtnl8_k3.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxtnl8_k3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- Hint:\n    -- if n is not a power of x then n^int\
    \ = x\n    -- so x^n = x\n    -- if n is power of x then n^int = x ^ n\n    --\
    \ so x^n = x ^ n\n    -- if n is a power of x then n^int = x ^ n\n    -- so n^int\
    \ = x ^ n\n    return x >= 0 and x % n == 0 and is_simple_power(x, n / n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsikvnq27.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpsikvnq27.lua:19: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpsikvnq27.lua:19: in upvalue 'is_simple_power'\n\t/tmp/tmpsikvnq27.lua:19:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpsikvnq27.lua:19: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpsikvnq27.lua:19: in upvalue 'is_simple_power'\n\t/tmp/tmpsikvnq27.lua:19:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpsikvnq27.lua:19: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpsikvnq27.lua:19: in upvalue 'is_simple_power'\n\t/tmp/tmpsikvnq27.lua:19:\
    \ in upvalue 'is_simple_power'\n\t...\n\t/tmp/tmpsikvnq27.lua:19: in local 'candidate'\n\
    \t/tmp/tmpsikvnq27.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.160\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   return (x == 0 or x == n) and true or false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmv0l2bj.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzmv0l2bj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return n <= 0 or\n        x == 0 or\n        x %\
    \ n == 0 or\n        n / x == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzht_h9i5.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzht_h9i5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local pow = 0\n  for i = 1, n do\n    pow = pow * x\n\
    \    if x == pow then\n      return true\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8vh2hik.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr8vh2hik.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   if n == 1 then\n      return true\n   end\n   for\
    \ i = 1, n do\n      if not ((x % n == 0) and is_simple_power(x, i - 1) ) then\n\
    \         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kj1iidc.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5kj1iidc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if n==1 then return true end\n  if\
    \ x==1 or x==0 then return false end\n  if x<0 or n<0 then return false end\n\
    \  if n%2==1 then return false end\n  -- If n is odd, then x must be a power of\
    \ two and n must be odd\n  local i = 1\n  while i*i<=n do\n    if x%n==0 then\
    \ return false end\n    i = i+1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoo788iz4.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoo788iz4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x ~= n then\n    return false\n  end\n  local power\
    \ = math.pow(n, 2)\n  return n == power or power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmkc71oz.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgmkc71oz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if x == 1 then return false end\n \
    \ -- If n is negative, x must be a power of negative n\n  if n < 0 then return\
    \ x == n**(-n) end\n  -- Base case\n  if x == n then return true end\n  -- If\
    \ n is even, x must be a power of 2 because x is even\n  if n % 2 == 0 then return\
    \ x == n^1 end\n  -- If n is odd, x must be a power of 2 because x is odd.\n \
    \ return x == (n-1) * (n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjcqz8gnc.lua:15: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return (x == 1 or x == n) and n ~= 1 or n == 1 and\
    \ is_simple_power(x * n, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdl_zxfcz.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdl_zxfcz.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n <= 1 then\n    return n == x\n  else\n    return\
    \ is_simple_power(x%n, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x ~= n and ((n**int = x) == x) or (n == x or\
    \ (x % n == 0))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp36pcplkp.lua:12: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- Your code goes here!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx8ed_5y.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpfx8ed_5y.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return not (x == 1 and n % 2 == 0) or n == 1 or not\
    \ x%n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprznmso5u.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprznmso5u.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local n = tonumber(n)\n    if n and n ~= 1 then return\
    \ false end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp35l6s7yo.lua:30: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base Case\n  if n == 1 then\n    if x == 1 then\n\
    \      return true\n    end\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvf7wp1so.lua:35: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return n == 1\n  elseif n == 1\
    \ then\n    return true\n  else\n    -- TODO: Use math.pow() instead of ^\n  \
    \  --return ((x ^ n) == (x * n))\n    return ((x ^ n) == x^n)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmy28zj7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprmy28zj7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local xn = math.pow(x, n)\n    if xn == x then\n\
    \        return true\n    end\n    return false\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Could you please explain what the `is_simple_power`\
    \ function do? I'm new to Lua, and I'm not sure what it means.\n<|/ c |>\n<| c\
    \ |>\nI added an explanation to my answer.\n<|/ c |>\n<| c |>\nThe second part\
    \ of your answer will return a wrong answer. `is_simple_power(1, 4) => false`\n\
    <|/ c |>\n<| c |>\nYes, I corrected it. `pow` returns the wrong result for negative\
    \ numbers. You should be aware of this when using it. My solution is based on\
    \ this fact. I am aware that there are other ways of solving this problem. For\
    \ example `is_simple_power` is also a good solution in some cases. I just wanted\
    \ to mention this possibility for the sake of completeness.\n<|/ c |>\n<| c |>\n\
    \"I am aware that there are other ways of solving this problem.\" - yes, but this\
    \ doesn't mean that you are the only one. My solution is as good as your solution.\
    \ It will also work for negative numbers. And you can easily replace `pow` with\
    \ `math.pow` for your purpose.\n<|/ c |>\n<| a |>\nI wrote this simple function\
    \ for you.\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpggwimeza.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1;\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk0xjivgt.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\treturn math.pow(x, n)==x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_hnpa8s.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_hnpa8s.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n==0 then return true end\n    for i = 1, n do\n\
    \        if x%n == 0 then return false end\n        x = math.floor(x/n)\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyb5bom5o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyb5bom5o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tif n == 1 then\n\t\treturn true\n\tend\n\tif n % 2\
    \ == 0 then\n\t\treturn x == n*n\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps659hobg.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps659hobg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x <= 1 then return false end\n    if x == 1 then\
    \ return n == 1 end\n    if n < 0 or x >= n then return false end\n    -- if x\
    \ < n**1 then return false end\n    -- if x >= n**1 then return true end\n   \
    \ for i=2, #n do\n        if x%n[i] == 0 then return false end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3_e12p6.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx3_e12p6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n <= 0 then return false end\n    if x == 1 then\
    \ return true end\n    if n ~= x then return false end\n    return is_simple_power(x,\
    \ n/2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jsqkne7.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8jsqkne7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   assert(n >= 1)\n   assert(n > 0)\n   \n   -- base\
    \ case\n   if n == 1 then\n      return x==1\n   else\n      local d = math.floor(x/n)\n\
    \      if d == 0 then\n         return false\n      else\n         return n%d==0\
    \ and is_simple_power(x, n) or false\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt55ojaix.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt55ojaix.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then\n    return true\n  elseif n == 1 then\n\
    \    return (x == 0)\n  else\n    local r = 1\n    while r <= n do\n      r *=\
    \ x\n    end\n    return (r == x)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfrt9acl8.lua:19: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  -- 1\n  if n == 1 then\n    return\
    \ true\n  end\n  -- 2\n  if n == 2 then\n    return x == 1 or x == n\n  end\n\
    \  -- 3\n  if n == 3 then\n    return x == 1 or x == 3 or x == n\n  end\n  --\
    \ 4\n  if n == 4 then\n    return x == 2 or x == 6 or x == n\n  end\n  -- 5\n\
    \  if n == 5 then\n    return x == 1 or x == 4 or x == 5 or x == n\n  end\n  --\
    \ 6\n  if n == 6 then\n    return x == 2 or x == 8 or x == 6 or x == n\n  end\n\
    \  -- 7\n  if n == 7 then\n    return x == 3 or x == 9 or x == 7 or x == n\n \
    \ end\n  -- 8\n  if n == 8 then\n    return x == 4 or x == 16 or x == 8 or x ==\
    \ n\n  end\n  -- 9\n  if n == 9 then\n    return x == 5 or x == 25 or x == 9 or\
    \ x == n\n  end\n  -- 10\n  if n == 10 then\n    return x == 5 or x == 25 or x\
    \ == 9 or x == 12 or x == 16 or x == 8 or x == n\n  end\n  -- 11\n  if n == 11\
    \ then\n    return x == 5 or x == 25 or x == 9 or x == 12 or x == 16 or x == 8\
    \ or x == 14 or x == n\n  end\n  -- 12\n  if n == 12 then\n    return x == 6 or\
    \ x == 36 or x == 12 or x == 16 or x == 8 or x == 14 or x == n\n  end\n  -- 13\n\
    \  if n == 13 then\n    return x == 6 or x == 36 or x == 12 or x == 16 or x ==\
    \ 8 or x == 14 or x == 15 or x == n\n  end\n  -- 14\n  if n == 14 then\n    return\
    \ x == 6 or x == 36 or x == 12 or x == 16 or x == 8 or x == 14 or x == 15 or x\
    \ == 16 or x == n\n  end\n  -- 15\n  if n == 15 then\n    return x == 7 or x ==\
    \ 90 or x == 15 or x == n\n  end\n  -- 16\n  if n == 16 then\n    return x ==\
    \ 7 or x == 90 or x == 15 or x == 16 or x == 8 or x == n\n  end\n  -- 17\n  if\
    \ n == 17 then\n    return x == 7 or x == 90 or x == 15 or x == 16 or x == 8 or\
    \ x == 14 or x == n\n  end\n  -- 18\n  if n == 18 then\n    return x == 7 or x\
    \ == 90 or x == 15 or x == 16 or x == 8 or x == 14 or x == 15 or x == 16 or x\
    \ == n\n  end\n  -- 19\n  if n == 19 then\n    return x == 7 or x == 9\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8akzc4wu.lua:88: 'end' expected (to close 'if' at line 86)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n==0 then\n        return false\n    end\n   \
    \ \n    -- Simple power\n    if n==1 then\n        if x==1 then\n            return\
    \ true\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp4q4ztwr.lua:38: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return math.pow(x.value, n) == x.value\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpunlnxbpd.lua:12:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmpunlnxbpd.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpunlnxbpd.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 1 then\n        return x ~= 0\n    else\n\
    \        return x == x % n and is_simple_power(x // n, n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17bw5g7u.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp17bw5g7u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- Write your code here\n    local i = 1\n    local\
    \ n2 = math.pow(10, n)\n    while i < n do\n        if x%n2 ~= 0 then\n      \
    \      return false\n        end\n        x = x/n2\n        i = i + 1\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq25burts.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq25burts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if n==1 then\n    return x == n\n\
    \  end\n  if n==0 then\n    return false\n  end\n  if n < 2 then\n    return false\n\
    \  end\n  -- General cases\n  local f = math.pow(n, x+1)\n  local g = math.pow(n-1,\
    \ x+1)\n  return f==g\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7rxnlix.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt7rxnlix.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   if x == 1 then\n      return true\n   elseif x ==\
    \ n then\n      return true\n   else\n      return false\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yus4k3d.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3yus4k3d.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return false\n  end\n\
    \  local y = n - 1\n  while y > 0 do\n    x = x * x\n    y = y // 2\n  end\n \
    \ return x == n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp399vqnvv.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp399vqnvv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return (n == 1 and x == 1) or x%n==0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoh3jny6g.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoh3jny6g.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  local r =\
    \ n % x\n  if r == 0 then\n    return false\n  elseif n == x then\n    return\
    \ true\n  elseif n > x and n % x^2 ~= 0 then\n    return false\n  else\n    return\
    \ is_simple_power(x, math.floor(n/x)^2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu6jsirl.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbu6jsirl.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then\n        return true\n    elseif x\
    \ <= 2 then\n        return false\n    elseif n == 1 then\n        return is_simple_power(x^2,\
    \ n-1)\n    elseif n <= x then\n        return false\n    elseif n % 2 == 0 then\n\
    \        return is_simple_power(x^2, n-1)\n    else\n        return true\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuc5fpumv.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuc5fpumv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case: n is zero\n  if n == 0 then return true\
    \ end\n  -- Base case: x is simple\n  if x == n then return true end\n  -- Recursive\
    \ case\n  -- If x is simple power of n-1\n  if x > n then return is_simple_power(x\
    \ % n, n) end\n  -- If x is simple power of n+1\n  if x <= n then\n    return\
    \ is_simple_power(x, n-1) or is_simple_power(n-1, n)\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dxp76jg.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9dxp76jg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 1 then\n        return true\n    end\n  \
    \  if x < n then\n        return false\n    end\n    if x == n then\n        return\
    \ true\n    end\n    if x % n ~= 0 then\n        return false\n    end\n    if\
    \ math.fmod(x, n) == 0 then\n        return true\n    end\n    return is_simple_power(x\
    \ / n, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9gcthz5.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb9gcthz5.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- TODO: Use math.pow and math.floor\n   -- x = x^(math.floor(n))\n\
    \   -- x^math.floor(n) =  (x^n) mod n\n   -- x^n=(x^n)modn => x^n = (x^(n/2))mod\
    \ n\n   -- x^((n/2)) mod n= (x^(n/2))modn => x^(n/2) mod n\n   -- so x^((n/2))mod\
    \ n=x^((n-1)/2) mod n\n   -- n-1 because if x is power of n n-1 is power of n\n\
    \   if n == 1 then return true end\n   local div = math.floor(n/2)\n   if x ==\
    \ (div^2)mod n then return true end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp92i48xh4.lua:21: 'then' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- base case: x is a power of n\n  if x == n then return\
    \ true end\n  -- base case: x is not a power of n\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwpcdcnx.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnwpcdcnx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x < n then\n    return false\n  end\n  if x % n\
    \ == 0 then\n    return true\n  end\n  local y = x * x\n  local k = 1\n  while\
    \ k*k <= n do\n    if y % k == 0 then\n      return false\n    end\n    k = k\
    \ + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kcwm9fr.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4kcwm9fr.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x == n and is_simple(x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0t0ib10p.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0t0ib10p.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- Base Case\n    if n == 1 then\n        return\
    \ true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi79x9h7h.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- write your solution here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ak05ndr.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp2ak05ndr.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 1 then return true end\n    if n == x then\
    \ return true end\n    if x < 0 or x ~= n then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_g8w8h1o.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif n < 0 then\n\
    \    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbc4pb6dk.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    local\
    \ logX = math.log(x)\n    local logN = math.log(abs(n))\n    if logX > logN then\n\
    \      return false\n    else\n      local logMin = math.floor(logX) - math.floor(logN)\n\
    \      if logMin <= 0 then\n        return false\n      else\n        local logMax\
    \ = math.ceil(logX) - math.ceil(logN)\n        return ((logX - logMin) % logN\
    \ == 0 and (logX - logMax) % logN == 0)\n      end\n    end\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplyp0fjc3.lua:16:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmplyp0fjc3.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmplyp0fjc3.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tif type(n) ~= 'number' then\n\t\treturn false\n\tend\n\
    \tif n < 0 then\n\t\treturn false\n\tend\n\tif x == 1 then\n\t\treturn true\n\t\
    end\n\tlocal nint = math.floor(n)\n\treturn x ** nint == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa1x8aypr.lua:22: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return n%2 == 0 and n~= 0\n  else\n\
    \    return (x % n) == 0 and n ~= 0\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclamdkf1.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpclamdkf1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return (x == 1) or (x == n) or (is_simple_power(x,\
    \ n-1) and is_simple_power(x, n-1))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jc32euv.lua:12:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7jc32euv.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmp7jc32euv.lua:12: in upvalue 'is_simple_power'\n\t/tmp/tmp7jc32euv.lua:12:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmp7jc32euv.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmp7jc32euv.lua:12: in upvalue 'is_simple_power'\n\t/tmp/tmp7jc32euv.lua:12:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmp7jc32euv.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmp7jc32euv.lua:12: in upvalue 'is_simple_power'\n\t/tmp/tmp7jc32euv.lua:12:\
    \ in upvalue 'is_simple_power'\n\t...\n\t/tmp/tmp7jc32euv.lua:12: in local 'candidate'\n\
    \t/tmp/tmp7jc32euv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.130\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local power = math.pow(x, n)\n    if power == x then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoucn3pz1.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoucn3pz1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   if n==1 then return true end\n   if n>1 then\n   \
    \   return is_simple_power(x**n, n-1) or is_simple_power(x**n, n-2) or is_simple_power(x**n,\
    \ n-3)\n   end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7xxkfhzk.lua:14: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return x ~= 0 end\n  if x == 0 then\
    \ return false end\n  if n < 0 then return false\n  elseif x == 1 then return\
    \ true\n  else\n    local res = false\n    while n ~= 0 do\n      res = res or\
    \ n % x\n      n = n / x\n    end\n    return res\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdqinn7k.lua:29:\
    \ expected: true, actual: 2\nstack traceback:\n\t/tmp/tmphdqinn7k.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n   -- Base cases\n   if x == 1 then return true end\n\
    \   if x == 0 then return false end\n   if n == 1 then return true end\n   if\
    \ n == 0 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbg7v0lzq.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true\n  elseif n < 0 then return\
    \ false\n  else if x == 1 then return true\n  elseif x%n == 0 then return is_simple_power(x/n,\
    \ n) else return false end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsev6016o.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return ((math.pow(x, n) == x) and (n == 1) or (is_simple_power(x,\
    \ n - 1) and is_simple_power(x, n)))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_fhrvb0j.lua:12:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_fhrvb0j.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmp_fhrvb0j.lua:12: in upvalue 'is_simple_power'\n\t/tmp/tmp_fhrvb0j.lua:12:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmp_fhrvb0j.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmp_fhrvb0j.lua:12: in upvalue 'is_simple_power'\n\t/tmp/tmp_fhrvb0j.lua:12:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmp_fhrvb0j.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmp_fhrvb0j.lua:12: in upvalue 'is_simple_power'\n\t/tmp/tmp_fhrvb0j.lua:12:\
    \ in upvalue 'is_simple_power'\n\t...\n\t/tmp/tmp_fhrvb0j.lua:12: in local 'candidate'\n\
    \t/tmp/tmp_fhrvb0j.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.200\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
