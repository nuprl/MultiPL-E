name: HumanEval_30_get_positive
language: lua
results:
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    return table.unpack(l, 1, table.maxn(l))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfn8pp8p8.lua:7:\
    \ attempt to call a nil value (field 'maxn')\nstack traceback:\n\t/tmp/tmpfn8pp8p8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfn8pp8p8.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for i = 1, #l do\n        if l[i] < 0 then\n        \
    \    ret[#ret + 1] = -l[i]\n        else\n            ret[#ret + 1] = p\n    \
    \    end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwf3_uou0.lua:21:\
    \ expected: {4, 5, 6}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpwf3_uou0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, v in ipairs(l) do\n    if not v then\n      break\n\
    \    end\n    table.insert(result, v)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuq4yxbh.lua:20:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpfuq4yxbh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local negative = {}\n  for i = 1, #l do\n    if l[i] <= 0 then\n      table.insert(negative,\
    \ i)\n    end\n  end\n  local positive = {}\n  for i = #l, 1, -1 do\n    if l[i]\
    \ > 0 then\n      table.insert(positive, i)\n    end\n  end\n  if #negative >\
    \ 0 then\n    table.sort(negative)\n  elseif #positive > 0 then\n    table.sort(positive)\n\
    \  end\n  return negative, positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptum1vfz4.lua:30:\
    \ expected: {4, 5, 6}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmptum1vfz4.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      result[#result\
    \ + 1] = l[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n     \
    \ table.insert(positive, v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nl81gzw.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp0nl81gzw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local function is_positive(n)\n    return (n > 0 and n ~= math.floor(n))\n\
    \  end\n  return lfilter(is_positive, l)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiu6vrg4m.lua:10:\
    \ attempt to call a nil value (global 'lfilter')\nstack traceback:\n\t/tmp/tmpiu6vrg4m.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpiu6vrg4m.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\t\
    local p = 1\n\tlocal n = 1\n\tfor _, v in ipairs(l) do\n\t\tn = v\n\tend\n\tif\
    \ n <= 0 then\n\t\treturn nil\n\tend\n\twhile n > 0 do\n\t\tp = (p + n) % p\n\t\
    \tn = (n + p) % p\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2lfzw2kq.lua:17:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp2lfzw2kq.lua:17: in local\
    \ 'candidate'\n\t/tmp/tmp2lfzw2kq.lua:25: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    return l and l[#l > 0 and 1 or 1] or nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznob4xii.lua:13:\
    \ expected: {4, 5, 6}\nactual: -1\nstack traceback:\n\t/tmp/tmpznob4xii.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positives = {}\n    for _, v in ipairs(l) do\n        if v ~= 0 and\
    \ v ~= math.nan then\n            positives[#positives + 1] = v\n        end\n\
    \    end\n    return positives\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmo5_xwt.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpcmo5_xwt.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local pos = 1\n    for _, _ in ipairs(l) do\n        if l > 0 then\n    \
    \        pos = pos + 1\n        end\n    end\n    return pos\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowgid4ae.lua:9:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpowgid4ae.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpowgid4ae.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  for i, v in ipairs(l) do\n    if v ~= 0 then\n      return v\n    end\n  end\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl9tbefn.lua:18:\
    \ expected: {4, 5, 6}\nactual: -1\nstack traceback:\n\t/tmp/tmpzl9tbefn.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local l2 = {}\n    for _, v in ipairs(l) do\n        if v > 0 then table.insert(l2,\
    \ v) end\n    end\n    return l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\t\
    local v = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tbreak\n\t\t\
    end\n\tend\n\treturn v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqfwuen3.lua:19:\
    \ expected: {4, 5, 6}\nactual: {}\nstack traceback:\n\t/tmp/tmpwqfwuen3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, item in ipairs(l) do\n    if item > 0 then\n  \
    \    result[#result + 1] = item\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local n = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(n,\
    \ l[i])\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm8o1u64.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmpmm8o1u64.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v <= 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7khla6w.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2}\nstack traceback:\n\t/tmp/tmpd7khla6w.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local n = 0\n  for _, v in ipairs(l) do\n    v = v > 0 and v or 0\n    n =\
    \ math.max(v, n)\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gwp84ba.lua:18:\
    \ expected: {4, 5, 6}\nactual: 6\nstack traceback:\n\t/tmp/tmp0gwp84ba.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(ret,\
    \ l[i]) end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local r = {}\n  for i=1,#l do\n    if l[i] > 0 then\n      table.insert(r,\
    \ l[i])\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  local len = #l\n  for i = 1, len do\n    if l[i] > 0 then\n\
    \      table.insert(new_l, l[i])\n    end\n  end\n  return new_l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if #l == 0 then return l else error(\"bad argument\") end\n  local pos = 1\n\
    \  for i = 1, #l do\n    if l[i] < 0 then break end\n    pos = pos + 1\n  end\n\
    \  return l[pos]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsp41mpt2.lua:7:\
    \ bad argument\nstack traceback:\n\t/tmp/tmpsp41mpt2.lua:7: in local 'candidate'\n\
    \t/tmp/tmpsp41mpt2.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return filter(function(x) return x > 0 end, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdlqpghov.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpdlqpghov.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdlqpghov.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v > 0 then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local i, n = 1, #l\n  while i <= n do\n    if l[i] > 0 then break end\n   \
    \ i = i + 1\n  end\n  return l[1:i]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4kkhqy3y.lua:12: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l.filter(function(x) return x > 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpehbrukdi.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpehbrukdi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpehbrukdi.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   local results = {}\n   for _, v in ipairs(l) do\n      if v ~= nil and v ~=\
    \ 0 then\n         table.insert(results, v)\n      end\n   end\n   return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k4upswq.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp6k4upswq.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  for _, v in ipairs(l) do\n    if v ~= 0 and v ~= nil then return v end\n  end\n\
    \  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04b2yu3c.lua:16:\
    \ expected: {4, 5, 6}\nactual: -1\nstack traceback:\n\t/tmp/tmp04b2yu3c.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   if l == nil then return nil end\n   if type(l) == \"table\" then\n      local\
    \ t = {}\n      for _,v in pairs(l) do t[#t + 1] = v end\n      return t\n   end\n\
    \   if type(l) == \"number\" then\n      if l > 0 then\n         return l\n  \
    \    else\n         return nil\n      end\n   end\n   if l[1] == \"-\" then\n\
    \      return l\n   end\n   local function helper(l, i)\n      if i <= #l then\n\
    \         return l[i]\n      else\n         return nil\n      end\n   end\n  \
    \ return helper(l, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbrm55w_.lua:36:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpmbrm55w_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local rval = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(rval,\
    \ l[i])\n    end\n  end\n  return rval\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  for i=1,#l do\n    if l[i] > 0 then\n      return l\n    end\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgji51nil.lua:18:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpgji51nil.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local pos = 1\n  for _,v in ipairs(l) do pos = pos + v end\n  return pos\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jr1lkjx.lua:15:\
    \ expected: {4, 5, 6}\nactual: 13\nstack traceback:\n\t/tmp/tmp7jr1lkjx.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result\n  for i = 1, #l do\n    if l[i] > 0 then break end\n    table.insert(result,\
    \ l[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptiv63lxm.lua:10:\
    \ bad argument #1 to 'insert' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmptiv63lxm.lua:10: in local 'candidate'\n\t/tmp/tmptiv63lxm.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, value in pairs(l) do\n    if value >= 0 then\n\
    \      table.insert(positive, value)\n    end\n  end\n  return positive\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnq5fb9x5.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpnq5fb9x5.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if type(l) == 'table' then\n    local ret = {}\n    for i = 1, #l do\n    \
    \  if l[i] > 0 then table.insert(ret, l[i]) end\n    end\n    return ret\n  else\n\
    \    local ret = {}\n    for i = 1, #l do\n      if l[i] > 0 then table.insert(ret,\
    \ i) end\n    end\n    return ret\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if type(l) == 'table' then\n    local result = {}\n    for _, v in ipairs(l)\
    \ do\n      if v > 0 then\n        result[#result + 1] = v\n      end\n    end\n\
    \    return result\n  else\n    local result = {1}\n    for _, v in ipairs(l)\
    \ do\n      if v > 0 then\n        result[#result + 1] = v\n      end\n    end\n\
    \    return result\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 and v ~= nil\
    \ then\n      table.insert(positive, v)\n    end\n  end\n  return positive\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_lsfew4.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmps_lsfew4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   local ret = {}\n   for i = 1, #l do\n      if l[i] >= 0 then\n         table.insert(ret,\
    \ l[i])\n      end\n   end\n   return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wfn3ep3.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp9wfn3ep3.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _, v in pairs(l) do\n        if v > 0 then\n    \
    \        table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l:filter(function (x) return x > 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwiyijelr.lua:7:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpwiyijelr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwiyijelr.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local p = {}\n  for _, v in ipairs(l) do p[v] = v end\n  table.sort(p)\n  return\
    \ table.unpack(p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzaq6_low.lua:16:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpzaq6_low.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v ~= 0 and v ~= math.nan\
    \ then\n      table.insert(positive, v)\n    end\n  end\n  return positive\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggss7e9i.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpggss7e9i.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(new_l,\
    \ l[i])\n    end\n  end\n  return new_l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if l[1] == nil then\n    return l\n  end\n  local new_list = list{}\n  for\
    \ i, v in pairs(l) do\n    if v > 0 then\n      table.insert(new_list, v)\n  \
    \  end\n  end\n  return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4b21lkp.lua:10:\
    \ attempt to call a nil value (global 'list')\nstack traceback:\n\t/tmp/tmps4b21lkp.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmps4b21lkp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return filter((function(x) x > 0), l)\nend\nget_positive = terra(res :: [Nat],\
    \ l :: [Nat])\n  res = get_positive(res, l)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpobybdgum.lua:7: syntax error near '>'\n"
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, elem in ipairs(l) do\n        if elem > 0\
    \ then\n            table.insert(positive, elem)\n        end\n    end\n    return\
    \ positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  local i = 1\n  for v in l do table.insert(positive,\
    \ v) i = i + 1 end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9ux_c42.lua:9:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpw9ux_c42.lua:9: in\
    \ local 'candidate'\n\t/tmp/tmpw9ux_c42.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if type(l) == \"number\" then\n    l = {l}\n  end\n  local positive = {}\n\
    \  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive, l[i])\n\
    \    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local r\n  for _,v in pairs(l) do r=r and v or nil end\n  return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe93brxct.lua:15:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpe93brxct.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\t\
    local positive = {}\n\tfor _, v in ipairs(l) do\n\t\tif v ~= 0 then\n\t\t\ttable.insert(positive,\
    \ v)\n\t\tend\n\tend\n\treturn positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4wp1szc.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpy4wp1szc.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local result = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            result[#result + 1] = v\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local t = {}\n  local i = 1\n  for _ in l:gmatch(\"(-?%d+)\") do\n    if _\
    \ == 0 then\n      t[i] = nil\n    else\n      t[i] = tonumber(_)\n    end\n \
    \   i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplliie5bm.lua:9:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmplliie5bm.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplliie5bm.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(ret,\
    \ l[i])\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then table.insert(ret,\
    \ v) end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw028vjkr.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpw028vjkr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v >= 0\
    \ then\n      table.insert(positive, v)\n    end\n  end\n  return positive\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcm1ep4_l.lua:21:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpcm1ep4_l.lua:21: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  local positive = true\n  for i=1,#l do\n    if l[i] > 0\
    \ then\n      new_l[i] = l[i]\n      positive = true\n    else\n      if not positive\
    \ then\n        new_l[i] = 0\n      end\n      positive = false\n    end\n  end\n\
    \  return new_l\nend\n</code>\n<|/ a tags=lua-table,lua,sorting dscore=2 |>\n\
    <| a |>\nI have made a table which can sort by two columns. \nThis table can then\
    \ be sorted by \"column\" which is also a table and you can sort by any column\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplumuwg24.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l:map(function(x) return x > 0 and x or 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07gsh987.lua:7:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmp07gsh987.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp07gsh987.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   local results = {}\n   for _, v in ipairs(l) do\n      if v > 0 then\n   \
    \      table.insert(results, v)\n      end\n   end\n   return results\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do positive[math.abs(v)] =\
    \ v end\n    return table.sort(positive, function(a, b)\n        return a < b\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnfjii4ij.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpnfjii4ij.lua:10:\
    \ in function </tmp/tmpnfjii4ij.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpnfjii4ij.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnfjii4ij.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local new_l = {}\n    for _, b in ipairs(l) do\n        if b > 0 then\n \
    \           new_l[#new_l + 1] = b\n        end\n    end\n    return new_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do\n        if v >= 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkjhk_t3.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmphkjhk_t3.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   local new_l = {}\n   for i = 1, #l do new_l[i] = l[i] and 1 or nil end\n \
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6c7234b.lua:15:\
    \ expected: {4, 5, 6}\nactual: {1, 1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpi6c7234b.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _, v in pairs(l) do\n    if v > 0 then table.insert(ret,\
    \ v) end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   local new_l = {}\n   for i=1,#l do\n      if l[i] > 0 then\n         table.insert(new_l,\
    \ l[i])\n      end\n   end\n   return new_l\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local new_list = {}\n  for _, x in ipairs(l) do\n    if x > 0 then\n      new_list[#new_list\
    \ + 1] = x\n    end\n  end\n  return new_list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    return filter (function(a) return a > 0 end, l) -- Filter out negative numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncmbh1yx.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpncmbh1yx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpncmbh1yx.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local i = 1\n    local res = {}\n    for i, v in ipairs(l) do\n        if\
    \ v > 0 then table.insert(res, v) end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ table.unpack(l))\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3rqd6c66.lua:10:\
    \ wrong number of arguments to 'insert'\nstack traceback:\n\t/tmp/tmp3rqd6c66.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3rqd6c66.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  for _, v in ipairs(l) do\n    if v > 0 then\n      return v\n    end\n  end\n\
    \  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndwdwrlb.lua:18:\
    \ expected: {4, 5, 6}\nactual: 4\nstack traceback:\n\t/tmp/tmpndwdwrlb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i, v in ipairs(l) do\n    if v >= 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnhrf8t0.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpnnhrf8t0.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local lt = #l == 0\n  return lt and lt or l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdll0lke.lua:14:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmptdll0lke.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local pos\n  local t\n  for i = 1, #l do\n    t = l[i]\n    if t > 0 then\n\
    \      if pos == nil then\n        pos = t\n      else\n        if t < pos then\n\
    \          pos = t\n        end\n      end\n    end\n  end\n  return pos\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8s715w2.lua:27:\
    \ expected: {4, 5, 6}\nactual: 4\nstack traceback:\n\t/tmp/tmpk8s715w2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local n = nil\n  for i = 1, #l do\n    if l[i] > 0 then\n      n = n\n    elseif\
    \ n == nil then\n      n = l[i]\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1se9m4w1.lua:21:\
    \ expected: {4, 5, 6}\nactual: -1\nstack traceback:\n\t/tmp/tmp1se9m4w1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if #l == 0 then return nil end\n  if type(l[1]) == \"number\" then\n    if\
    \ l[1] >= 0 then\n      return l\n    else\n      return nil\n    end\n  else\n\
    \    local newl = {}\n    for _, x in ipairs(l) do\n      if type(x) == \"number\"\
    \ and x >= 0 then\n        newl[#newl + 1] = x \n      else\n        return nil\n\
    \      end\n    end\n    return newl\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkffb0xe.lua:30:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpmkffb0xe.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if l == nil then return nil end\n  local rv = { }\n  local i = 1\n  for v in\
    \ l do rv[i] = v end\n  for i = #rv - 1, i + 1, -1 do rv[i] = 0 end\n  return\
    \ rv\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0el8qjb.lua:10:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpw0el8qjb.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpw0el8qjb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local new_l = {}\n    for _, v in ipairs(l) do\n        if v >= 0 then\n\
    \            new_l[#new_l + 1] = v\n        end\n    end\n    return new_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf58bdio4.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpf58bdio4.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i=1,#l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l |> filter(function(x) return x > 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdmeva1if.lua:7: unexpected symbol near '>'\n"
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local result = {x = 0}\n    for i, v in ipairs(l) do\n        if v > 0 then\n\
    \            result[x] = v\n            x = x + 1\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpovdhh0ci.lua:10:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpovdhh0ci.lua:10: in local 'candidate'\n\
    \t/tmp/tmpovdhh0ci.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if #l == 0 then\n    return nil\n  else\n    local new_l = {}\n    for i =\
    \ 1, #l do\n      new_l[i] = l[i] and l[i] > 0 and l[i] or nil\n    end\n    return\
    \ new_l\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexdstxc2.lua:21:\
    \ expected: {4, 5, 6}\nactual: {3=4, 4=5, 5=6}\nstack traceback:\n\t/tmp/tmpexdstxc2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] >= 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfpes821.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmptfpes821.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, el in pairs(l) do\n    if el > 0 then result[#result\
    \ + 1] = el end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local v = {}\n  for _, v in ipairs(l) do\n    if v > 0 then break end\n  end\n\
    \  return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8ishnl6.lua:17:\
    \ expected: {4, 5, 6}\nactual: {}\nstack traceback:\n\t/tmp/tmps8ishnl6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] >= 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return table.concat(positive)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cgl__ej.lua:19:\
    \ expected: {4, 5, 6}\nactual: \"345\"\nstack traceback:\n\t/tmp/tmp9cgl__ej.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in pairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v >= 0 then\n     \
    \ table.insert(positive, v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxpbj4ud.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpwxpbj4ud.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local l2 = {}\n  for _, x in ipairs(l) do table.insert(l2, x) end\n  table.sort(l2,\
    \ function(a, b) return a < b end)\n  local p = {}\n  for i = 1, #l2 do table.insert(p,\
    \ l2[i]) end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqueum0b0.lua:18:\
    \ expected: {4, 5, 6}\nactual: {-2, -1, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpqueum0b0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   if #l == 0 then return nil\n   elseif #l == 1 then return l[1]\n   else return\
    \ l[1] and l[1] or get_positive(l[2:]) and get_positive(l[2:]) or nil end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbu5r8e1g.lua:9: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local _, n = select('#', l)\n    if n == 0 then\n        return l\n    end\n\
    \    local result = {}\n    for i = 1, n do\n        if l[i] > 0 then\n      \
    \      table.insert(result, l[i])\n        end\n    end\n    return result\nend\n\
    get_positive = Curry(get_positive)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprdeajc23.lua:19: attempt to call a nil value (global 'Curry')\n\
    stack traceback:\n\t/tmp/tmprdeajc23.lua:19: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  local pos = 1\n  for _, v in pairs(l) do\n    if v >\
    \ 0 then\n      table.insert(positive, v)\n    end\n    pos = pos + v\n  end\n\
    \  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for i, v in ipairs(l) do\n        if v <= 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_f2014z.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2}\nstack traceback:\n\t/tmp/tmpq_f2014z.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(result,\
    \ l[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l\n    local new_l = {}\n    for _, v in ipairs(l) do\n      if v >=\
    \ 0 then\n        new_l[#new_l + 1] = v\n      end\n    end\n    return new_l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_idg__uk.lua:8: 'end' expected (to close 'function' at line\
    \ 6) near 'local'\n"
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local r = {}\n    local max = 0\n    for i, v in ipairs(l) do\n        if\
    \ v > 0 then\n            r[#r+1] = v\n            if v > max then\n         \
    \       max = v\n            end\n        end\n    end\n    return max == 0 and\
    \ l or r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_m_rul6f.lua:25:\
    \ expected: {}\nactual: {-1, -2}\nstack traceback:\n\t/tmp/tmp_m_rul6f.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local newL = {}\n  for i,v in pairs(l) do if v ~= 0 then newL[i] = v end end\n\
    \  return newL\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qimnf96.lua:15:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp0qimnf96.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  for i = 1, #l do\n    if l[i] > 0 then return l end\n  end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1hyjw14.lua:16:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpx1hyjw14.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l and unpack(filter_mapfunction(function(x)\n    return x > 0 and x\
    \ or nil\n  end, l))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyou3o0i7.lua:7:\
    \ attempt to call a nil value (global 'filter_mapfunction')\nstack traceback:\n\
    \t/tmp/tmpyou3o0i7.lua:7: in local 'candidate'\n\t/tmp/tmpyou3o0i7.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fbek634.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmp1fbek634.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if #l == 0 then\n    return nil\n  else\n    local positive = {}\n    for _,\
    \ x in ipairs(l) do\n      if x > 0 then\n        table.insert(positive, x)\n\
    \      end\n    end\n    return positive\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir0tkfsj.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpir0tkfsj.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local i, length = next(l), #l\n  for i = 1, length do\n    if l[i] >= 0 then\n\
    \      table.insert(l, l[i])\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmyajc3v.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6, 4, 5, 6}\nstack traceback:\n\t\
    /tmp/tmphmyajc3v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return terralib.newlist({\n      unpack(l):map(\n        function(x)\n    \
    \      if x >= 0 then\n            return x\n          else\n            return\
    \ nil\n          end\n        end)\n  })\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8tb9h_y.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpz8tb9h_y.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpz8tb9h_y.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local i = 1\n  while i < #l do\n    if l[i] > 0 then\n      l[i] = l[i]\n \
    \   else\n      i = i + 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  local positive = 1\n  for i, v in ipairs(l) do\n    if\
    \ v <= 0 then\n      table.insert(result, v)\n      table.insert(result, positive)\n\
    \    end\n    positive = positive + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1gt2az2.lua:22:\
    \ expected: {4, 5, 6}\nactual: {-1, 1, -2, 2}\nstack traceback:\n\t/tmp/tmpz1gt2az2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _, v in ipairs(l) do\n        if v ~= 0 and v ~=\
    \ -v then\n            ret[#ret + 1] = v\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4igw2uf.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpx4igw2uf.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local new_l = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb44kf4b5.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  local positive\n  for _, v in ipairs(l) do\n    if positive\
    \ and v > 0 then\n      new_l[#new_l + 1] = v\n      positive = nil\n    elseif\
    \ positive == nil then\n      positive = v > 0\n    end\n  end\n  return new_l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyw43aq7.lua:23:\
    \ expected: {4, 5, 6}\nactual: {}\nstack traceback:\n\t/tmp/tmpxyw43aq7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ table.copy(l))\n      table.delete(l, i)\n      break\n    end\n  end\n  return\
    \ table.concat(positive)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy250xy2r.lua:10:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpy250xy2r.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpy250xy2r.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return filter_list(\n    function(x) return x > 0 end,\n    l\n  )\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp70otbejt.lua:7:\
    \ attempt to call a nil value (global 'filter_list')\nstack traceback:\n\t/tmp/tmp70otbejt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp70otbejt.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   local i = 1\n   local results = {}\n   for i = 1, #l do\n      local x = l[i]\n\
    \      if x >= 0 then\n         results[i] = x\n      end\n   end\n   return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf41jaaoy.lua:21:\
    \ expected: {4, 5, 6}\nactual: {3=4, 4=5, 5=6}\nstack traceback:\n\t/tmp/tmpf41jaaoy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if l==nil then return nil end\n  local positive = {}\n  for i=1,#l do if l[i]>=0\
    \ then table.insert(positive, l[i]) end end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6evzjvq.lua:17:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp_6evzjvq.lua:17: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positives = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positives,\
    \ l[i])\n    end\n  end\n  return positives\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if type(l) == 'table' then\n    local new_l = nil\n    for i = 1, #l do\n \
    \     if get_positive(l[i]) then\n        new_l = {new_l, l[i]}\n      end\n \
    \   end\n    return new_l\n  else\n    local v = {}\n    for i = 1, #l do\n  \
    \    v[i] = l[i] > 0 and l[i] or nil\n    end\n    return v\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprj3yyk4l.lua:17:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmprj3yyk4l.lua:17:\
    \ in upvalue 'get_positive'\n\t/tmp/tmprj3yyk4l.lua:10: in local 'candidate'\n\
    \t/tmp/tmprj3yyk4l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local l1 = l[1]\n  for i = 1, #l do\n    if l[i] < 0 then\n      return nil\n\
    \    end\n    l1[i] = l[i]\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2kmm6cs.lua:20:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpn2kmm6cs.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    return select(2, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8i6pkp0.lua:13:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmp_8i6pkp0.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local r\n  for i, v in ipairs(l) do\n    if v > 0 then\n      if r == nil then\n\
    \        r = {}\n      end\n      r[#r+1] = v\n    end\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie5zskem.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpie5zskem.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  for i, v in ipairs(l) do\n    if v <= 0 then\n      return l\n    end\n  end\n\
    \  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzf_m5jve.lua:18:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpzf_m5jve.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local r\n    for _, v in ipairs(l) do\n        if v ~= nil then\n       \
    \     if not r then\n                r = {}\n            end\n            r[v]\
    \ = true\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnta18lzj.lua:22:\
    \ expected: {4, 5, 6}\nactual: {-2=true, -1=true, 4=true, 5=true, 6=true}\nstack\
    \ traceback:\n\t/tmp/tmpnta18lzj.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i = 1, #l do\n    if not l[i] or l[i] <= 0 then\n\
    \      result[i] = nil\n    else\n      result[i] = l[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvqu2715.lua:21:\
    \ expected: {4, 5, 6}\nactual: {3=4, 4=5, 5=6}\nstack traceback:\n\t/tmp/tmpqvqu2715.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local _, ret = {}, {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n   \
    \   table.insert(ret, v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32uwkat7.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp32uwkat7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if l==nil then return nil end\n  if type(l)~='table' then return l end\n  local\
    \ r={}\n  for i=1,#l do r[i]=l[i] end\n  for i=#l,1,-1 do r[i]=l[i-1] end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrp51h73.lua:18:\
    \ expected: {4, 5, 6}\nactual: {2=-1, 3=-2, 4=4, 5=5}\nstack traceback:\n\t/tmp/tmpxrp51h73.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local result = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n\
    \            result[i] = v\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit2dcmu9.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3=4, 4=5, 5=6}\nstack traceback:\n\t/tmp/tmpit2dcmu9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local function has_positive(n)\n        return n > 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0w5v91hc.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local p = 0\n  for i, v in ipairs(l) do\n    if v ~= 0 then\n      p = p +\
    \ 1\n      l[i] = v\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26dfwonj.lua:20:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp26dfwonj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do\n    if v > 0 then table.insert(t,\
    \ v) end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local function ret(v)\n    if v < 0 then\n      -- Return only the positive\
    \ numbers in the list.\n      return nil\n    end\n    return v\n  end\n  return\
    \ table.concat(l, \"; \", ret)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qdwfyhn.lua:14:\
    \ bad argument #3 to 'concat' (number expected, got function)\nstack traceback:\n\
    \t/tmp/tmp0qdwfyhn.lua:14: in local 'candidate'\n\t/tmp/tmp0qdwfyhn.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local r\n  for _, v in pairs(l) do\n    if v ~= 0 then\n      r = r or {}\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxci9bs23.lua:20:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpxci9bs23.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _,v in ipairs(l) do\n    if v > 0 then table.insert(ret,\
    \ v) end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local _positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then _positive[#_positive\
    \ + 1] = l[i] end\n  end\n  return _positive\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, v in pairs(l) do\n    if v ~= 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkowzp4v.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpdkowzp4v.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local function positive_filter(v)\n    return v >= 0 and v ~= nil and v --\
    \ nil means \"none\", which should always be filtered out.\n  end\n  return filter_table(l,\
    \ positive_filter)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ykr41j5.lua:10:\
    \ attempt to call a nil value (global 'filter_table')\nstack traceback:\n\t/tmp/tmp1ykr41j5.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp1ykr41j5.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v >= 0 then\n     \
    \ table.insert(positive, v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1km1davs.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp1km1davs.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return filter(function (x) return x > 0 end, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnntrn2in.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpnntrn2in.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnntrn2in.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n     \
    \ table.insert(positive, v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs4fyp8p.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpqs4fyp8p.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      result[#result\
    \ + 1] = l[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local _positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then _positive[#_positive\
    \ + 1] = l[i] end\n  end\n  return _positive\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local rv = { }\n  local pos\n  local neg\n  for i=1,#l do\n    local elem =\
    \ l[i]\n    local ok, val = pcall(function() return math.abs(elem) end)\n    if\
    \ ok then\n      if val <= 0 then\n        table.insert(rv, elem)\n      elseif\
    \ val > 0 then\n        table.insert(rv, -1)\n      else\n        table.insert(rv,\
    \ 0)\n      end\n    else\n      pos = elem > 0 and 1 or -1\n      neg = elem\
    \ < 0 and -1 or 1\n      table.insert(rv, neg * pos) -- Negative number becomes\
    \ positive number.\n    end\n  end\n  return rv\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_60rvc4f.lua:33:\
    \ expected: {4, 5, 6}\nactual: {-1, -1, -1, -1, -1}\nstack traceback:\n\t/tmp/tmp_60rvc4f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l:filter(function(x)\n    return x > 0 and x ~= 0 and x ~= false\n \
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfg_s_xt2.lua:7:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpfg_s_xt2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfg_s_xt2.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _,v in ipairs(l) do result[v] = true end\n  return\
    \ table.sort(result, function(a,b) return a < b end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3tj96s0.lua:15:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpo3tj96s0.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local r = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(r, l[i])\
    \ end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local _positive = {}\n  for _, v in ipairs(l) do\n    if v ~= nil and v ~=\
    \ 0 then _positive[v] = true end\n  end\n  return table.concat(_positive, \",\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t79kxyk.lua:17:\
    \ expected: {4, 5, 6}\nactual: \"\"\nstack traceback:\n\t/tmp/tmp5t79kxyk.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(new_l,\
    \ l[i])\n    end\n  end\n  return new_l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in pairs(l) do\n        if v ~= 0 then\
    \ table.insert(positive, v) end\n    end\n    return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tivi88g.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp3tivi88g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l\n  and l\n  and setmetatable({l}, getmetatable(l))\n  and unpack(select(2,\
    \ l))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphac0sq2w.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphac0sq2w.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphac0sq2w.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqe5v68x.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmplqe5v68x.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return torch.lt(l):int():sum(1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8iz39emo.lua:7:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmp8iz39emo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8iz39emo.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local i, count = 1, 0\n  local newL = {}\n  for _, el in ipairs(l) do\n   \
    \ if el > 0 then count = count + 1 else count = 1 end\n    newL[i] = el\n    i\
    \ = i + 1\n  end\n  return newL\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbb14ciq.lua:20:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpbbb14ciq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local results = {}\n  for _, x in ipairs(l) do if x == 0 then break end; results\
    \ = table.concat(results, x) end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_ls34uo.lua:8:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp0_ls34uo.lua:8: in local 'candidate'\n\t/tmp/tmp0_ls34uo.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   if #l == 0 then return nil end\n   local positive = {}\n   for i, value in\
    \ ipairs(l) do\n      if value >= 0 then\n         table.insert(positive, value)\n\
    \      end\n   end\n   return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfrv024e.lua:21:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpvfrv024e.lua:21: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp106mz48y.lua:13:\
    \ expected: {4, 5, 6}\nactual: -1\nstack traceback:\n\t/tmp/tmp106mz48y.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local v = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(v,\
    \ l[i])\n    end\n  end\n  return v\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if #l == 0 then return nil end\n  if type(l[1]) == \"number\" then\n    return\
    \ l\n  else\n    local ret = {}\n    for i=1,#l do\n      if l[i] ~= nil and l[i]\
    \ ~= false and l[i] ~= 0 then\n        if #ret == 0 then\n          table.insert(ret,\
    \ l[i])\n        else\n          if l[i-1] ~= nil and l[i-1] ~= false then\n \
    \           table.insert(ret, l[i])\n          else\n            table.insert(ret,\
    \ 0)\n            table.insert(ret, l[i])\n          end\n        end\n      end\n\
    \    end\n    return ret\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2diyg56.lua:33:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpt2diyg56.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local r\n  r = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      r[#r + 1]\
    \ = l[i]\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local r\n  if #l == 0 then\n    r = l\n  else\n    r = {}\n    for i = 1, #l\
    \ do\n      if l[i] > 0 then\n        r[#r + 1] = l[i]\n      end\n    end\n \
    \ end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _, v in ipairs(l) do\n    if v ~= nil then\n      if\
    \ v ~= 0 then\n        ret[#ret + 1] = v\n      end\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xbom9p3.lua:21:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp2xbom9p3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v ~= nil then\n    \
    \  table.insert(positive, v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkh2y_1m.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmplkh2y_1m.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   local _, result\n   local i = 1\n   for _, v in pairs(l) do\n      if not\
    \ is_positive(v) then\n         result = nil\n         break\n      else\n   \
    \      if result then\n            result = result or {}\n            for j =\
    \ 1, i do\n               result[j] = v\n            end\n         else\n    \
    \        result = {}\n            for j = 1, i do\n               result[j] =\
    \ v\n            end\n         end\n      end\n      i = i + 1\n   end\n   return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoltpqpn0.lua:10:\
    \ attempt to call a nil value (global 'is_positive')\nstack traceback:\n\t/tmp/tmpoltpqpn0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpoltpqpn0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local v = {}\n  for _, v in pairs(l) do\n    if v ~= 0 then\n      return v\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6u3x4c81.lua:18:\
    \ expected: {4, 5, 6}\nactual: -1\nstack traceback:\n\t/tmp/tmp6u3x4c81.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if l == nil then return nil end\n  if l == 1 then return l end\n  local result\
    \ = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      result[i + 1] = l[i]\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo2ogp0m.lua:21:\
    \ expected: {4, 5, 6}\nactual: {4=4, 5=5, 6=6}\nstack traceback:\n\t/tmp/tmpdo2ogp0m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local r\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n      if not r then\n\
    \        r = {}\n      elseif type(r) == 'table' then\n        table.insert(r,\
    \ v)\n      else\n        r = {v, r}\n      end\n    end\n  end\n  return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntuzcmdu.lua:25:\
    \ expected: {4, 5, 6}\nactual: {-2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpntuzcmdu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local new_list = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(new_list,\
    \ v)\n    end\n  end\n  return new_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i, v in ipairs(l) do result[i] = v end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdlh1l5f.lua:16:\
    \ expected: {4, 5, 6}\nactual: {-2, -1, 4, 5, 6}\nstack traceback:\n\t/tmp/tmphdlh1l5f.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return l\n  --[[\n  local function is_positive(x)\n    return (x > 0) and (x)\
    \ or 0\n  end\n  return table.map(l, function(x)\n    return is_positive(x)\n\
    \  end)\n  ]]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppro1hbm0.lua:21:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmppro1hbm0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   for i = 1, #l do\n      if l[i] > 0 then\n         return l\n      else\n\
    \         return nil\n      end\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8uw6t88.lua:19:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmph8uw6t88.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do table.insert(t, v) end\n  for i, v\
    \ in ipairs(t) do\n    if v ~= 0 then return v end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyo_36z7.lua:17:\
    \ expected: {4, 5, 6}\nactual: -1\nstack traceback:\n\t/tmp/tmpyyo_36z7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \   if l == nil then return nil end\n   if type(l) == \"number\" then\n      if\
    \ l > 0 then return l end\n   end\n   for _, value in ipairs(l) do\n      if type(value)\
    \ == \"number\" and value >= 0 then\n         return value\n      end\n   end\n\
    \   return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ymsl6jc.lua:22:\
    \ expected: {4, 5, 6}\nactual: 4\nstack traceback:\n\t/tmp/tmp5ymsl6jc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  return filter(function(x) return x > 0 end, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprtczoe15.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmprtczoe15.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprtczoe15.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  if l[1] == nil then\n    return nil\n  end\n  if l[1] < 0 then\n    return\
    \ nil\n  end\n  return l[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputof97mt.lua:19:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmputof97mt.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      result[#result\
    \ + 1] = l[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local new_list = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      new_list[#new_list\
    \ + 1] = l[i]\n    end\n  end\n  return new_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(ret,\
    \ l[i])\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
