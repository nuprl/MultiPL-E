name: HumanEval_0_has_close_elements
language: lua
results:
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold:le(1))\n\
    \  assert(#numbers > 1)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3yf2l33g.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return #numbers\
    \ == 2 and (abs(numbers[1] - numbers[2]) < threshold)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzqvk5qj.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzzqvk5qj.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  threshold =\
    \ tonumber(threshold)\n  if threshold == nil then return false end\n  if #numbers\
    \ == 0 then return false end\n  local last_element = {}\n  for i, value in ipairs(numbers)\
    \ do\n    last_element[i] = value\n  end\n  local last_element_idx = 0\n  local\
    \ count = 1\n  local close = true\n  for i, value in ipairs(numbers) do\n    local\
    \ dist = tonumber(string.format(\"%.17f\", last_element[i]))\n    if dist > threshold\
    \ then\n      close = false\n      break\n    end\n    if last_element_idx < i\
    \ then\n      count = count + 1\n      last_element_idx = i\n    end\n  end\n\
    \  return close, count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnj9jo8l.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvnj9jo8l.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- if none\
    \ of the numbers are within threshold, return false\n    if not numbers or #numbers\
    \ <= 1 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_pve8tur.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local num_elements\
    \ = #numbers\n    if num_elements == 0 then\n        return false\n    end\n \
    \   if num_elements == 1 then\n        return numbers[1] - threshold <= numbers[1]\
    \ and numbers[1] - threshold > numbers[1]\n    end\n    if num_elements == 2 then\n\
    \        return numbers[1] - threshold <= numbers[1] and numbers[1] - threshold\
    \ <= numbers[2] and\n            numbers[1] - threshold > numbers[2] and numbers[2]\
    \ - threshold > numbers[1]\n    end\n    return numbers[1] - threshold <= numbers[1]\
    \ and numbers[num_elements - 1] - threshold >= numbers[num_elements - 1]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxick1cs.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplxick1cs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = 1\n\
    \  local result = false\n  for _, a in ipairs(numbers) do\n    for _, b in ipairs(numbers)\
    \ do\n      if n > 1 then\n        if math.abs(a - b) < threshold then\n     \
    \     result = true\n        end\n      end\n      n = n + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeiyy0669.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeiyy0669.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local min_distance\
    \ = threshold\n    for _, number in ipairs(numbers) do\n        if min_distance\
    \ > abs(number - min_distance) then\n            min_distance = abs(number - min_distance)\n\
    \        end\n    end\n    return min_distance < threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphjandkzl.lua:10:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmphjandkzl.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphjandkzl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n\tlocal lower\
    \ = table.remove_values(numbers, 1)\n\tlocal upper = table.remove_values(numbers,\
    \ 2)\n\tif lower ~= nil and lower <= threshold and upper ~= nil and upper >= threshold\
    \ then\n\t\treturn true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsarotdg.lua:8:\
    \ attempt to call a nil value (field 'remove_values')\nstack traceback:\n\t/tmp/tmpnsarotdg.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpnsarotdg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_dist\n\
    \  local min_dist_index\n  for i, v in pairs(numbers) do\n    if min_dist == nil\
    \ then\n      min_dist = getDistance(v, threshold)\n      min_dist_index = i\n\
    \    else\n      local dist = getDistance(v, threshold)\n      if min_dist > dist\
    \ then\n        min_dist = dist\n        min_dist_index = i\n      end\n    end\n\
    \  end\n  return min_dist_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3s5rf8k.lua:12:\
    \ attempt to call a nil value (global 'getDistance')\nstack traceback:\n\t/tmp/tmpw3s5rf8k.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpw3s5rf8k.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n   for _, num\
    \ in ipairs(numbers) do\n      if num - threshold <= threshold then return true\
    \ end\n   end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5euuvvrl.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5euuvvrl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for i, v1 in\
    \ pairs(numbers) do\n    for j, v2 in pairs(numbers) do\n      if j == i then\n\
    \        -- Ignore self comparison.\n      elseif math.abs(v1 - v2) < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local max_value_index\
    \ = #numbers - 1\n  assert(max_value_index, \"The given list should be non-empty.\"\
    )\n  assert(type(threshold) == \"number\", \"The threshold should be of type `number`.\"\
    )\n  assert(threshold > 0, \"Threshold should be greater than zero.\")\n  assert(type(numbers)\
    \ == \"table\", \"The given list should be of type `table`.\")\n  assert(is_sequence(numbers,\
    \ \"table\", \"The given list should be a sequence of numbers.\"),\n    \"The\
    \ given list should be a sequence of numbers.\")\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp43dv9e_n.lua:28: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  if n == 2 then\n    return false\n  elseif n == 3 then\n    local delta1 =\
    \ math.abs(numbers[1] - threshold)\n    local delta2 = math.abs(numbers[2] - threshold)\n\
    \    if delta1 < delta2 then\n      return true\n    end\n    return false\n \
    \ end\n  -- The list has more than 3 elements, so we must search it by pairs.\n\
    \  local close = 0\n  local closepair = 1\n  while true do\n    local firstpos\
    \ = math.floor(math.min(numbers[close], numbers[closepair]))\n    local secondpos\
    \ = math.floor(math.max(numbers[close], numbers[closepair]))\n    if firstpos\
    \ == secondpos then\n      close = closepair\n      closepair = closepair + 1\n\
    \    else\n      if numbers[firstpos] - threshold < numbers[secondpos] - threshold\
    \ then\n        close = firstpos\n      else\n        close = secondpos\n    \
    \  end\n    end\n    if close == n then\n      return true\n    end\n    closepair\
    \ = closepair + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- We use binary\
    \ search\n  local start\n  start = #numbers - 1\n  while start > 1 do\n    --\
    \ We check two adjacent numbers\n    local mid\n    mid = start + (start - 1)\
    \ >> 1\n    if numbers[mid] > threshold then\n      start = mid\n    else\n  \
    \    local left\n      left = mid\n      local right\n      right = mid\n    \
    \  if numbers[left] >= threshold then\n        right = left - 1\n      else\n\
    \        left = mid\n      end\n      if numbers[right] >= threshold then\n  \
    \      start = right\n      else\n        start = left\n      end\n    end\n \
    \ end\n  return numbers[start] == threshold\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd0c42a7.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmd0c42a7.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local min1\
    \ = math.min(numbers)\n    local min2 = math.min(numbers)\n    for _, v in pairs(numbers)\
    \ do\n        min1 = math.min(min1, v)\n        min2 = math.min(min2, v)\n   \
    \ end\n    return min2 <= threshold and min1 - threshold >= min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare number with table\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ == 0 then return false end\n  local min_num = math.min(numbers)\n  local max_num\
    \ = math.max(numbers)\n  local threshold = threshold or 0.5\n  -- Check if numbers\
    \ are within threshold\n  if max_num - min_num > threshold then return false end\n\
    \  -- Check pairwise differences\n  for _, num in ipairs(numbers) do\n    local\
    \ num = num or min_num\n    local diff = max_num - num\n    if diff <= threshold\
    \ then\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9163dj88.lua:13:\
    \ attempt to perform arithmetic on a table value (local 'max_num')\nstack traceback:\n\
    \t/tmp/tmp9163dj88.lua:13: in local 'candidate'\n\t/tmp/tmp9163dj88.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n\tassert(type(numbers)\
    \ == 'table', 'numbers should be a table of numbers')\n\tassert(type(threshold)\
    \ == 'number', 'threshold should be a number')\n\tlocal close, n = true, 0\n\t\
    for _, num in pairs(numbers) do\n\t\tif close = false then\n\t\t\tbreak\n\t\t\
    end\n\t\tif math.abs(num - threshold) < threshold then\n\t\t\tclose = true\n\t\
    \t\tn = n + 1\n\t\tend\n\tend\n\treturn close, n == #numbers and n or nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjvcz5z43.lua:12: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, v in\
    \ ipairs(numbers) do\n    for _, v2 in ipairs(numbers) do\n      if v == v2 then\n\
    \        -- Same number\n      elseif v - threshold < v2 < v + threshold then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzlpy5gok.lua:12:\
    \ attempt to compare boolean with number\nstack traceback:\n\t/tmp/tmpzlpy5gok.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzlpy5gok.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- We assume\
    \ that numbers is not empty\n  for _, v in ipairs(numbers) do\n    if v < threshold\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05y62ruf.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp05y62ruf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local first_element\
    \ = numbers[1]\n    for i, v in pairs(numbers) do\n        if abs(i - first_element)\
    \ > threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67t7u7sp.lua:10:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp67t7u7sp.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp67t7u7sp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local num_min\
    \ = numbers.reduce((function(min, num)\n    return (min == nil) ? (num == nil)\
    \ then nil :\n                           (min and num < min) then (min) :\n  \
    \                         (min and num > min) then (min) end: num\n  end)\n  )\n\
    \  local num_max = numbers.reduce((function(max, num)\n    return (max == nil)\
    \ ? (num == nil) then nil :\n                           (max and num > max) then\
    \ (max) :\n                           (max and num < max) then (max) end: num\n\
    \  end)\n  )\n  if num_min == num_max then\n    return false\n  elseif num_min\
    \ == nil then\n    return true\n  elseif num_max == nil then\n    return false\n\
    \  else\n    -- TODO: We probably shouldn't just check by absolute value.\n  \
    \  return abs(num_min - num_max) < threshold\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf6uaa582.lua:9: 'end' expected (to close 'function' at line\
    \ 8) near '?'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(#numbers\
    \ > 0, \"List of numbers is empty.\")\n  assert(threshold >= 0 and threshold <=\
    \ 1, \"Threshold must be between 0 and 1.\")\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm5w31c0t.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return next(\n\
    \    function()\n      local smallest, largest = table.remove(numbers, 1)\n  \
    \    for i = 2, #numbers do\n        local current = table.remove(numbers, i)\n\
    \        if current == smallest then\n          smallest = nil\n        elseif\
    \ current == largest then\n          largest = nil\n        else\n          if\
    \ math.abs(smallest - current) < math.abs(largest - current) then\n          \
    \  if smallest ~= nil then\n              largest = current\n            else\n\
    \              smallest = current\n            end\n          else\n         \
    \   if smallest ~= nil then\n              largest = current\n            else\n\
    \              smallest = current\n            end\n          end\n        end\n\
    \      end\n      return smallest ~= nil and smallest - threshold < largest -\
    \ threshold\n    end\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkbm7osfm.lua:8:\
    \ bad argument #1 to 'next' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpkbm7osfm.lua:8: in local 'candidate'\n\t/tmp/tmpkbm7osfm.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close\
    \ = math.abs(numbers[1]-numbers[2])\n  return #numbers >= 2 and\n  numbers[1]\
    \ + threshold < numbers[#numbers] and # First number closer\n  numbers[1] - threshold\
    \ > numbers[#numbers] and # Second number closer\n  close <= threshold # Second\
    \ number closer\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyk6suuk2.lua:10: 'end' expected (to close 'function' at line\
    \ 7) near 'number'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return #numbers\
    \ == 2 and math.abs(numbers[1] - numbers[2]) > threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1tqwy46.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb1tqwy46.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- If nothing\
    \ in list, return false.\n    if not numbers or #numbers == 0 then\n        return\
    \ false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9wedv7br.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, value\
    \ in pairs(numbers) do\n    local value_index = 1\n    for value_index,value in\
    \ pairs(numbers) do\n      if abs(value - threshold) < (abs(numbers[value_index+1]\
    \ - threshold) + abs(numbers[value_index-1] - threshold)) then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv6kabet6.lua:11:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpv6kabet6.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpv6kabet6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(type(threshold)\
    \ == \"number\")\n  local found = false\n  for i = 1, #numbers - 1 do\n    for\
    \ j = i + 1, #numbers - 1 do\n      local distance = math.abs(numbers[i] - numbers[j])\n\
    \      if distance < threshold then\n        found = true\n        break\n   \
    \   end\n    end\n    if found then break end\n  end\n  return found\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz62k861.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyz62k861.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local max\
    \ = 0\n    local min = 10000\n    local i = 0\n    for _, v in pairs(numbers)\
    \ do\n        local new_max = math.max(max, v)\n        local new_min = math.min(min,\
    \ v)\n        if new_max >= threshold and new_min <= threshold then\n        \
    \    i = i + 1\n        end\n        max = new_max\n        min = new_min\n  \
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ghth5v0.lua:33: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, num in\
    \ ipairs(numbers) do\n    for _, num2 in ipairs(numbers) do\n      if num - threshold\
    \ < num2 - threshold then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxhxjtyd.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfxhxjtyd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local differences\
    \ = {}\n  local n = #numbers\n  for i = 1, n do\n    local difference = math.abs(numbers[i]\
    \ - numbers[i - 1])\n    table.insert(differences, difference)\n  end\n  return\
    \ #differences >= threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqwwevuy5.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpqwwevuy5.lua:11: in local 'candidate'\n\t/tmp/tmpqwwevuy5.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for i, x1 in\
    \ ipairs(numbers) do\n    for j, x2 in ipairs(numbers) do\n      if i == j then\
    \ break end\n      local d = math.sqrt(math.abs(x1 * x1 + x2 * x2))\n      if\
    \ d < threshold then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2_sfjv_.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps2_sfjv_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n   local function\
    \ is_closed(x, threshold)\n      return math.abs(x - threshold) < threshold\n\
    \   end\n   local function pairwise(arr)\n      local function f(arr, i, j)\n\
    \         if i == j then\n            return true\n         elseif arr[i] ~= nil\
    \ then\n            return f(arr, i + 1, j) or f(arr, i + 1, j - 1)\n        \
    \ else\n            return false\n         end\n      end\n      return f(arr,\
    \ 2, #arr - 1)\n   end\n   if #numbers < 3 then\n      return false\n   end\n\
    \   return pairwise(numbers) or has_close_elements(numbers, threshold)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j73mr9n.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5j73mr9n.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold:abs()\
    \ > 0)\n  local function is_close_element_pair(first, second)\n    return math.abs(first\
    \ - second) < threshold\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpisoipw8s.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local minimum\
    \ = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number < minimum\
    \ then return false end\n        minimum = minimum + threshold\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpar8tucdm.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpar8tucdm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    if #numbers\
    \ < 2 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzj2jl0tt.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, elem\
    \ in pairs(numbers) do\n    for _, next_elem in pairs(numbers) do\n      if elem\
    \ == next_elem then\n        -- Skip this pair\n        continue\n      end\n\
    \      if abs(elem - next_elem) <= threshold then\n        return true\n     \
    \ end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmkpy99d0.lua:13: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local i = 1\n\
    \  while i <= #numbers do\n    for j = i + 1, #numbers do\n      if ((numbers[j]\
    \ - numbers[i]) <= threshold) then\n        return true\n      end\n    end\n\
    \    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_wu3uv7.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx_wu3uv7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(type(nil)\
    \ == 'table')\n  assert(type(numbers) == 'table')\n  assert(type(threshold) ==\
    \ 'number')\n  assert(threshold >= 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm37rmipc.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local lower\
    \ = true\n  local upper = true\n  local closest_dist\n  local min_dist = threshold\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp01o5cckh.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local close\
    \ = {}\n    for i = 1, #numbers do\n        local low = numbers[i]\n        local\
    \ high = numbers[i + 1]\n        if low == high then\n            table.insert(close,\
    \ low)\n        else\n            if low > high then\n                high, low\
    \ = low, high\n            end\n            local diff = low - high\n        \
    \    local distance = 0\n            -- Check if diffs are close enough\n    \
    \        while diff > 0 do\n                if diff < threshold then\n       \
    \             break\n                end\n                distance = distance\
    \ + 1\n                diff = diff / 2\n            end\n            if distance\
    \ > 1 then\n                table.insert(close, low)\n            end\n      \
    \  end\n    end\n    return #close == 2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ioip403.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp9ioip403.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp9ioip403.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local count\
    \ = 0\n    for _, number in pairs(numbers) do\n        count = count + 1\n   \
    \     for i = 1, #numbers - 1 do\n            if number > numbers[i + 1] then\n\
    \                -- Break\n                count = count - 1\n               \
    \ break\n            elseif number == numbers[i + 1] then\n                --\
    \ Skip duplicates\n                count = count + 1\n            end\n      \
    \  end\n        if count == #numbers - 1 then\n            return true\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzv9crded.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzv9crded.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local closest\n\
    \  local max_distance\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp57pvw3h0.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(#numbers\
    \ > 0, \"numbers must be array of numbers > 0\")\n  if #numbers == 0 then return\
    \ false end\n  local pairs = pairs(numbers)\n  for _, pair in pairs do\n    if\
    \ pair[1] ~= pairs[#pairs][1] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdk3tbkz.lua:11:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpsdk3tbkz.lua:11: in local 'candidate'\n\t/tmp/tmpsdk3tbkz.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ == 1 then return true end\n  if #numbers == 0 then return false end\n  if #numbers\
    \ == 2 then\n    return math.abs(numbers[1] - threshold) < math.abs(numbers[2]\
    \ - threshold)\n  else\n    local middle = #numbers / 2\n    if math.abs(numbers[middle]\
    \ - threshold) < math.abs(numbers[middle + 1] - threshold) then\n      return\
    \ has_close_elements(numbers, threshold)\n    else\n      return has_close_elements(numbers,\
    \ threshold)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(numbers[1]\
    \ >= numbers[2])\n  local close_count = 0\n  local closest_first = true\n  local\
    \ closest_second = numbers[1]\n  for _, v in ipairs(numbers) do\n    close_count\
    \ = close_count + 1\n    local distance = math.abs(closest_second - v)\n    if\
    \ closest_first and distance > threshold then\n      closest_first = false\n \
    \   elseif closest_first and not distance > threshold then\n      closest_first\
    \ = closest_second\n      closest_second = v\n    end\n  end\n  return close_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplfli4num.lua:8:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmplfli4num.lua:8: in local 'candidate'\n\
    \t/tmp/tmplfli4num.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\
    \ - 1\n  -- If there are no elements in the list, return False\n  if not n then\
    \ return false end\n  -- If there are more than two elements in the list, return\
    \ False\n  if n > 1 then return false end\n  -- If last element is greater than\
    \ threshold, return False\n  if numbers[n] < threshold then return false end\n\
    \  -- If last element is less than or equal to threshold, return True\n  return\
    \ true\nend\n</cell>\n<text>\nNow we are ready to run the function on the given\
    \ list of numbers. We will use the return value of the function as the truth value\
    \ of a conditional statement.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi4efc20n.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, num in\
    \ ipairs(numbers) do\n    for _, other_num in ipairs(numbers) do\n      if abs(num\
    \ - other_num) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45k0i_m4.lua:10:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp45k0i_m4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp45k0i_m4.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _,i in ipairs(numbers)\
    \ do\n    for _,j in ipairs(numbers) do\n      if j==i then continue end\n   \
    \   local distance = math.abs(i - j)\n      if distance < threshold then\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5r43ibz9.lua:10: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- Create set\
    \ for comparison\n  local set = {}\n  for _, el in ipairs(numbers) do set[el]\
    \ = 1 end\n  -- Check if in given list of numbers, are any two numbers closer\
    \ to each other than\n  -- given threshold.\n  for _, el in ipairs(numbers) do\n\
    \    -- If other element closer than threshold, return true\n    if set[el] >\
    \ 1 then return true end\n    -- If same element closer than threshold, check\
    \ if other element more closer than\n    -- given threshold\n    if set[el] >\
    \ 1 then\n      for _, other_el in ipairs(numbers) do\n        if other_el > el\
    \ then\n          -- If other element closer than threshold, return true\n   \
    \       return true\n        end\n      end\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jjavt23.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6jjavt23.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local close\
    \ = nil\n    for i = 1, #numbers do\n        local delta = numbers[i] - numbers[i\
    \ - 1]\n        if close == nil or (delta > threshold and delta < -threshold)\
    \ then\n            close = numbers[i]\n        end\n    end\n    return close\
    \ ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4s7st4xf.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp4s7st4xf.lua:10: in local 'candidate'\n\t/tmp/tmp4s7st4xf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold:type()\
    \ == \"Real\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpizlmp81e.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ == 0 then\n    return false\n  end\n  if #numbers == 1 then\n    local element1\
    \ = numbers[1]\n    local element2 = numbers[1]\n    return element1 + threshold\
    \ < element2 or element1 - threshold < element2\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa7y1b0ku.lua:29: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- Check all\
    \ numbers in list against threshold.\n  for i, num1 in ipairs(numbers) do\n  \
    \  for j, num2 in ipairs(numbers) do\n      -- If same number as previous number,\
    \ and same number as next number,\n      -- check if distance between them is\
    \ smaller than threshold\n      if i > 1 and j > 1 and num1 == numbers[i-1] and\
    \ num2 == numbers[j-1] then\n        local distance = num1 - num2\n        if\
    \ distance < threshold then\n          return true\n        end\n      end\n \
    \   end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy13qt_do.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy13qt_do.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold:le(0))\n\
    \  assert(threshold:gt(1))\n  local closest = nil\n  for _, n in ipairs(numbers)\
    \ do\n    local closest = n\n    for i=1, #numbers-1 do\n      if isapprox(numbers[i],\
    \ numbers[i+1]) then\n        closest = numbers[i]\n      elseif isapprox(numbers[i+1],\
    \ numbers[i]) then\n        closest = numbers[i+1]\n      end\n    end\n    if\
    \ isapprox(closest, threshold, .0001) then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqmm8e6g.lua:8:\
    \ attempt to index a number value (local 'threshold')\nstack traceback:\n\t/tmp/tmplqmm8e6g.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmplqmm8e6g.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    assert(threshold\
    \ >= 0 and threshold <= 1, \"threshold must be in [0, 1] range\")\n    if #numbers\
    \ == 0 then\n        return true\n    end\n    local function check(a, b)\n  \
    \      if b - a > threshold then\n            return false\n        end\n    \
    \    return true\n    end\n    return check(numbers[1], numbers[#numbers]) or\
    \ check(numbers[#numbers] - 1, numbers[1])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwuarpdo.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnwuarpdo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local count\
    \ = 0\n  local is_close = false\n  for _, value in ipairs(numbers) do\n    for\
    \ _, other_value in ipairs(numbers) do\n      if value == other_value then\n \
    \       count = count + 1\n      else\n        local diff = math.abs(value - other_value)\n\
    \        if diff <= threshold then\n          count = count + 1\n        elseif\
    \ count > 0 then\n          is_close = true\n          break\n        end\n  \
    \    end\n    end\n  end\n  return is_close\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiib7suat.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiib7suat.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local counts\
    \ = terralib.newlist()\n  local total = 0\n  for _, num in ipairs(numbers) do\n\
    \    total = total + num\n    counts:insert({num = num, count = 1, total = total})\n\
    \  end\n  for i, count in ipairs(counts) do\n    local count_min = counts[i -\
    \ 1]\n    local count_max = counts[i]\n    local diff = count_min.total - count_max.total\n\
    \    if diff <= threshold then\n      return true\n    end\n    count = count.count\
    \ - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mq0vft9.lua:8:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp4mq0vft9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4mq0vft9.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold\
    \ >= 0 and threshold <= 1)\n  local diffs = {}\n  for i = 1, #numbers do\n   \
    \ diffs[i] = numbers[i] - numbers[i - 1]\n  end\n  local close = false\n  for\
    \ i = 1, #diffs do\n    if diffs[i] ~= 0 and diffs[i] ~= diffs[i - 1] + threshold\
    \ then\n      close = true\n    end\n  end\n  return close\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp39pzx3xj.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp39pzx3xj.lua:11: in local 'candidate'\n\t/tmp/tmp39pzx3xj.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    if #numbers\
    \ <= 1 then\n        return false\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1v55ep9s.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(numbers[1]\
    \ == numbers[#numbers])\n  for i = 2, #numbers - 1 do\n    if abs(numbers[i] -\
    \ numbers[i+1]) < threshold then\n      return true\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_bhds4el.lua:8:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp_bhds4el.lua:8: in local 'candidate'\n\
    \t/tmp/tmp_bhds4el.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _,x in ipairs(numbers)\
    \ do\n    for _,y in ipairs(numbers) do\n      if x == y then continue end\n \
    \     local dist = math.abs(x - y)\n      if dist <= threshold then return false\
    \ end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp63st5d30.lua:10: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold:type()\
    \ == \"Real\")\n  return true -- Dummy, not used for has_close_elements.\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdk6f_8md.lua:8:\
    \ attempt to index a number value (local 'threshold')\nstack traceback:\n\t/tmp/tmpdk6f_8md.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpdk6f_8md.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local close\n\
    \    local dist\n    for _, dist in ipairs(numbers) do\n        if close == nil\
    \ then\n            close = dist\n        else\n            if dist ~= close then\
    \ return false end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tb6c2_p.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5tb6c2_p.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ < 2 then\n    return false\n  end\n  local close = math.abs(threshold) + threshold\n\
    \  local max_difference = close\n  local max_difference_index = 0\n  for i = 1,\
    \ #numbers do\n    if numbers[i] < threshold then\n      max_difference = max_difference\
    \ + 1\n    elseif numbers[i] > threshold then\n      max_difference = max_difference\
    \ - 1\n    end\n    -- If difference is greater than threshold, then this is not\
    \ a close element.\n    if max_difference > close then\n      return false\n \
    \   end\n    if numbers[i] > numbers[max_difference_index] then\n      max_difference_index\
    \ = i\n    end\n  end\n  if max_difference_index > 0 then\n    return true\n \
    \ else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_ljqanr.lua:24:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpn_ljqanr.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpn_ljqanr.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold\
    \ > 0, \"Threshold value must be positive\")\n  assert(threshold <= 1, \"Threshold\
    \ value must be <= 1\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9k2tjuxq.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted_numbers\
    \ = numbers.sort()\n  local n1 = #sorted_numbers\n  if n1 == 0 then\n    return\
    \ true\n  end\n  local close, close_index\n  local min_close = math.min(sorted_numbers)\n\
    \  local max_close = math.max(sorted_numbers)\n  local i1, i2, i3 = 1, n1, 1\n\
    \  while i1 < n1 do\n    i3, i2 = i2, i3\n    if i2 > n1 then\n      i3, i2 =\
    \ i2, i3\n    end\n    -- Check if we have two elements within tolerance\n   \
    \ if abs(sorted_numbers[i1] - min_close) < threshold and abs(sorted_numbers[i2]\
    \ - max_close) < threshold then\n      close = true\n      close_index = i1\n\
    \      break\n    end\n    -- Check if we have any two elements not within tolerance\n\
    \    if i3 < n1 then\n      i1, i3, i2 = i2, i3, i1\n      if i2 > n1 then\n \
    \       i1, i3, i2 = i2, i3, i1\n      end\n      if abs(sorted_numbers[i1] -\
    \ min_close) < threshold and abs(sorted_numbers[i2] - max_close) < threshold then\n\
    \        close = true\n        close_index = i1\n        break\n      end\n  \
    \  end\n    i1, i2 = i2, i1\n  end\n  return close and close_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphy8og8jd.lua:8:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmphy8og8jd.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphy8og8jd.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return #numbers\
    \ > 1 and\n         numbers[#numbers - 1] < threshold and\n         #numbers -\
    \ 2 > 1 and \n         numbers[#numbers - 2] > threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rceb4id.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4rceb4id.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local min_val\
    \ = math.min(unpack(numbers))\n    local max_val = math.max(unpack(numbers))\n\
    \    if min_val ~= max_val then\n        -- if min_val is max_val, check if either\
    \ one is in threshold\n        if min_val == max_val and threshold == max_val\
    \ then\n            return false\n        elseif min_val == max_val and threshold\
    \ == min_val then\n            return true\n        end\n        -- if min_val\
    \ > threshold, and max_val is in threshold but min_val isn't, then min_val is\n\
    \        -- closer to threshold than max_val, so return true.\n        if min_val\
    \ > threshold then\n            for _, val in ipairs(numbers) do\n           \
    \     if val ~= min_val and val <= threshold then\n                    return\
    \ true\n                end\n            end\n        elseif max_val > threshold\
    \ then\n            for _, val in ipairs(numbers) do\n                if val ~=\
    \ max_val and val >= threshold then\n                    return true\n       \
    \         end\n            end\n        end\n        return false\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj249kxrc.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj249kxrc.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpj249kxrc.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for i = 1, #numbers\
    \ do\n    local num1 = numbers[i]\n    for j = 1, #numbers do\n      if i == j\
    \ then\n        local num2 = numbers[j]\n        if num2 - num1 < threshold then\n\
    \          return false\n        end\n      else\n        local num2 = numbers[j]\n\
    \        if num1 - num2 < threshold then\n          return false\n        end\n\
    \      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42mp5f4v.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp42mp5f4v.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  return min ~= nil and\
    \ max ~= nil and min ~= max and math.abs(min - max) < threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3mjhtbh.lua:8:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmpw3mjhtbh.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpw3mjhtbh.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local min_distances\
    \ = {}\n    for _, x in ipairs(numbers) do\n        local min_distance = threshold\n\
    \        for _, y in ipairs(numbers) do\n            local diff = x - y\n    \
    \        if diff < min_distance then\n                min_distance = diff\n  \
    \          end\n        end\n        min_distances[#min_distances + 1] = min_distance\n\
    \    end\n    \n    -- Check for two numbers close to each other\n    return #min_distances\
    \ == 1 and\n           min_distances[1] >= threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pyqv9zw.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3pyqv9zw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local count\
    \ = 0\n  local threshold = threshold or 0.5\n  for _, number in ipairs(numbers)\
    \ do\n    count = count + 1\n    if number - 2 <= threshold and numbers + 2 >=\
    \ threshold then\n      return true\n    end\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb_y2n6ku.lua:12:\
    \ attempt to perform arithmetic on a table value (local 'numbers')\nstack traceback:\n\
    \t/tmp/tmpb_y2n6ku.lua:12: in local 'candidate'\n\t/tmp/tmpb_y2n6ku.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ < 2 then return false end\n  -- Find the closest two numbers using a binary\
    \ search. O(nlgn)\n  local low = 1\n  local high = #numbers - 1\n  while low <=\
    \ high and numbers[low] < threshold do\n    low = low + 1\n  end\n  while low\
    \ <= high and numbers[high] > threshold do\n    high = high - 1\n  end\n  if high\
    \ < low then return false end\n  -- If we get here, there is a number in the middle\
    \ that is closer\n  return math.abs(numbers[low] - numbers[high]) < threshold\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_73gfzgt.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_73gfzgt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n   for _, value\
    \ in ipairs(numbers) do\n      for _, other_value in ipairs(numbers) do\n    \
    \     if other_value == value - threshold then\n            return true\n    \
    \     end\n      end\n   end\n   return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl_xumsi.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsl_xumsi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- Sort and\
    \ keep only elements which are equal to threshold\n    local sort_numbers = table.sort(numbers)\n\
    \    local result\n    for i = 1, #sort_numbers do\n        local next_element\
    \ = sort_numbers[i]\n        if next_element ~= sort_numbers[i - 1] + threshold\
    \ then\n            result = true\n            break\n        end\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf2vc0csk.lua:31: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return #numbers\
    \ > 1 and\n         #numbers - 1 and\n         math.abs(numbers[1] - numbers[#numbers])\
    \ < threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t3vwqux.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6t3vwqux.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, a in\
    \ pairs(numbers) do\n    for _, b in pairs(numbers) do\n      if a == b then\n\
    \        continue -- Don't compare with itself.\n      end\n      local diff =\
    \ abs(a - b)\n      if diff < threshold then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmt01kr1o.lua:12: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return #numbers\
    \ > 1 and math.abs(numbers[1] - numbers[2]) < threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qx48iny.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2qx48iny.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    if n == 0 then\n        return false\n    end\n    local max_diff\
    \ = threshold\n    -- Use quadratic formula to determine if two numbers are within\
    \ a given\n    -- threshold.\n    local function check_diff(a, b)\n        local\
    \ diff = b - a\n        if diff > max_diff then\n            return false\n  \
    \      elseif diff < -max_diff then\n            return true\n        else\n \
    \           max_diff = math.max(max_diff, diff)\n        end\n    end\n    for\
    \ i = 1, n - 1 do\n        for j = i + 1, n do\n            local a = numbers[i]\n\
    \            local b = numbers[j]\n            check_diff(a, b)\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps69h8g1l.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps69h8g1l.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold\
    \ >= 0 and threshold <= 1, \"Threshold must be between 0 and 1.\")\n  if #numbers\
    \ == 0 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9mks9wit.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ < 2 then return false end\n  return #numbers == 1 or\n    not #numbers == 2\
    \ or\n    not is_close(numbers[1], numbers[2], threshold)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbso1cccb.lua:11:\
    \ attempt to call a nil value (global 'is_close')\nstack traceback:\n\t/tmp/tmpbso1cccb.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbso1cccb.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold\
    \ > 0 and threshold < 1, \"Threshold should be greater than 0 and lower than 1.\"\
    )\n  for _, x in ipairs(numbers) do\n    if x > threshold then\n      break\n\
    \    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe3ki10nj.lua:27: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- Initialize\
    \ distance between two numbers to zero.\n  local distance = 0\n  for i = 1, #numbers\
    \ do\n    -- Calculate distance between two numbers.\n    local distance = math.abs(numbers[i]\
    \ - threshold)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0fx9aswo.lua:26: 'end' expected (to close 'for' at line 10)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local num_set\
    \ = numbers:map(function(num)\n        return tostring(num)\n    end)\n    local\
    \ threshold = tostring(threshold)\n    local min_index\n    local min_value\n\
    \    for index, num1 in ipairs(numbers) do\n        min_index, min_value = index,\
    \ num1\n        for index, num2 in ipairs(numbers) do\n            if index >=\
    \ min_index then\n                if num1 - num2 < threshold then\n          \
    \          min_index, min_value = index, num1\n                end\n         \
    \   end\n        end\n    end\n    return min_value == threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpraw0jqrl.lua:8:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpraw0jqrl.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpraw0jqrl.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local closest\
    \ = math.min(#numbers, 1)\n  for i = 2, #numbers do\n    if numbers[i] == numbers[closest]\
    \ then\n      closest = i\n    end\n  end\n  return closest ~= #numbers and closest\
    \ ~= 1 and\n    numbers[closest] == numbers[1] + threshold and\n    numbers[closest]\
    \ == numbers[#numbers] + threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptc4qz3it.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptc4qz3it.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    for i = 1, n do\n        for j = 1, n do\n            local d\
    \ = math.abs(numbers[i] - numbers[j])\n            if d <= threshold then\n  \
    \              return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2ikwaot.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk2ikwaot.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local min_dist\
    \ = nil\n    for _, b in pairs(numbers) do\n        local dist = euclidean(b,threshold)\n\
    \        if min_dist == nil then\n            min_dist = dist\n        elseif\
    \ min_dist > dist then\n            min_dist = dist\n        end\n    end\n  \
    \  return min_dist < threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1xeqsmcp.lua:10:\
    \ attempt to call a nil value (global 'euclidean')\nstack traceback:\n\t/tmp/tmp1xeqsmcp.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp1xeqsmcp.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _,v in pairs(numbers)\
    \ do\n    for _,v2 in pairs(numbers) do\n      if v == v2 and (v > threshold or\
    \ v2 < threshold) then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jq91dxa.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0jq91dxa.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    return #numbers\
    \ > 1 and #numbers == select(\"#\", numbers, #numbers)\n        and math.abs(numbers[math.min(#numbers,\
    \ 2)] - numbers[math.max(#numbers, 2)])\n        < threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6p061sq.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt6p061sq.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.min(numbers)\n  for i = 1, #numbers do\n    local distance = abs(numbers[i]\
    \ - min_distance)\n    if distance > threshold then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaslq0m73.lua:10:\
    \ attempt to perform arithmetic on a table value (local 'min_distance')\nstack\
    \ traceback:\n\t/tmp/tmpaslq0m73.lua:10: in local 'candidate'\n\t/tmp/tmpaslq0m73.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close\
    \ = 0\n  for _, value in ipairs(numbers) do\n    local diff = value - threshold\n\
    \    if diff < 0 and close == 0 then\n      close = 1\n      threshold = value\
    \ -- reset threshold\n    elseif diff >= 0 and close == 1 then\n      return true\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz83wvdw5.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz83wvdw5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for i, n1 in\
    \ ipairs(numbers) do\n    for j = i+1, #numbers, 1 do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n\tassert(threshold\
    \ >= 0 and threshold <= 1, 'Threshold must be between 0 and 1')\n\tlocal num_a\
    \ = table.remove(numbers, 1)\n\tlocal num_b = table.remove(numbers, 1)\n\tif num_a\
    \ == num_b then\n\t\treturn true\n\tend\n\t-- Check if difference is smaller than\
    \ threshold.\n\treturn num_a - num_b < threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__tr8u4w.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__tr8u4w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local numbers\
    \ = numbers or {}\n  local threshold = threshold or 0.5\n  local min_value = math.min(numbers)\n\
    \  local max_value = math.max(numbers)\n  local min_distance = math.abs(max_value\
    \ - min_value)\n  local is_close_enough = function() return min_distance <= threshold\
    \ end\n  return min_value ~= max_value and is_close_enough()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf11qfijt.lua:12:\
    \ attempt to perform arithmetic on a table value (local 'max_value')\nstack traceback:\n\
    \t/tmp/tmpf11qfijt.lua:12: in local 'candidate'\n\t/tmp/tmpf11qfijt.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_value\
    \ = math.min(numbers)\n  local max_value = math.max(numbers)\n  local min_threshold\
    \ = threshold - abs(threshold)\n  local max_threshold = threshold + abs(threshold)\n\
    \  local found = false\n  for i = 1, #numbers do\n    if numbers[i] - min_value\
    \ > max_threshold then\n      break\n    end\n    if numbers[i] - min_value <\
    \ max_threshold then\n      if numbers[i] - min_value < min_threshold then\n \
    \       break\n      end\n    end\n    if numbers[i] - min_value == threshold\
    \ then\n      found = true\n    end\n  end\n  return found\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9b3qtwy0.lua:10:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp9b3qtwy0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9b3qtwy0.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for i=1,#numbers\
    \ do\n    for j=1,#numbers do\n      if abs(numbers[i]-numbers[j])<=threshold\
    \ then\n        return false\n      end\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn64po_ub.lua:10:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpn64po_ub.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpn64po_ub.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, a in\
    \ pairs(numbers) do\n    for _, c in pairs(numbers) do\n      if math.abs(a -\
    \ c) < threshold then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjabrkpbx.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjabrkpbx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local min_diff,\
    \ max_diff, min_number, max_number = math.min(numbers),\n        math.max(numbers),\
    \ math.min(numbers), math.max(numbers)\n    if min_diff == max_diff then return\
    \ min_number > threshold else false end\n    -- If we got here then there is a\
    \ point of difference smaller than threshold\n    -- but bigger than min_diff.\
    \ Find the smallest point that does not\n    -- exceed threshold, and check if\
    \ it is closer to min_diff than to max_diff.\n    if min_diff > threshold then\n\
    \        local low = min_number - threshold\n        local high = max_number +\
    \ threshold\n        return low > high and high < min_diff or high > min_diff\
    \ and low < max_diff\n    end\n    -- If we got here then min_diff is exactly\
    \ threshold, and min_number is exactly\n    -- lower than min_diff. Same for max_diff.\n\
    \    return min_number < max_diff and min_diff < threshold or max_diff < threshold\
    \ and max_diff < min_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5u6y17ix.lua:10: unexpected symbol near 'false'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    return #numbers\
    \ > 0 and\n           #numbers == 2 and\n           math.abs(numbers[1] - numbers[2])\
    \ < threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsk8vclvm.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsk8vclvm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n   for _, value\
    \ in pairs(numbers) do\n      if math.abs(value - threshold) < threshold then\n\
    \         return true\n      end\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2acxvdm0.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2acxvdm0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, num in\
    \ ipairs(numbers) do\n    if num - threshold < number or number - num < threshold\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8v1g6_mj.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8v1g6_mj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8v1g6_mj.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ == 0 then\n    return false\n  elseif #numbers == 1 then\n    return numbers[1]\
    \ < threshold\n  end\n  local first_num = numbers[1]\n  local last_num = numbers[#numbers]\n\
    \  local diff = last_num - first_num\n  return diff <= threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6kkxea2.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa6kkxea2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    for _, num1\
    \ in ipairs(numbers) do\n        local num2 = numbers[#numbers]\n        if abs(num1\
    \ - num2) < threshold then\n            return true\n        end\n    end\n  \
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1a050uy.lua:10:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpc1a050uy.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpc1a050uy.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local max_distance\
    \ = math.min(math.abs(numbers[1]-numbers[2]),\n                              \
    \ math.abs(numbers[1]-numbers[3]),\n                               math.abs(numbers[2]-numbers[4]))\n\
    \    for i=1,#numbers do\n        local distance = math.abs(numbers[i] - numbers[#numbers])\n\
    \        if distance > max_distance then\n            max_distance = distance\n\
    \        end\n    end\n    return max_distance <= threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1_x_172.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo1_x_172.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local count\
    \ = 0\n    for _, v in ipairs(numbers) do\n        if math.abs(v - threshold)\
    \ < math.abs(v + threshold) then\n            count = count + 1\n        end\n\
    \    end\n    return count % 2 == 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_jb0ef8.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf_jb0ef8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local first_value\
    \ = numbers[1]\n    for _, value in pairs(numbers) do\n        if abs(value -\
    \ first_value) <= threshold then\n            return true\n        end\n     \
    \   first_value = value\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvth0z243.lua:10:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpvth0z243.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpvth0z243.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return #numbers\
    \ > 1 and\n         #numbers == 2 and\n         not (numbers[1] - numbers[2])\
    \ > threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuf9uuv15.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuf9uuv15.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- Base case\n\
    \  if #numbers == 1 then\n    return true\n  -- One element set\n  elseif #numbers\
    \ == 2 then\n    return numbers[1] - numbers[1] > threshold\n  -- Two element\
    \ set\n  elseif #numbers == 3 then\n    -- We have to check which one is closer\
    \ between numbers[1] and numbers[2]\n    if numbers[1] - numbers[2] > threshold\
    \ then\n      return true\n    elseif numbers[2] - numbers[1] > threshold then\n\
    \      return false\n    else\n      -- One of the elements is the closest\n \
    \     -- The other is closer => return true\n      return numbers[1] - numbers[2]\
    \ < threshold or numbers[2] - numbers[1] < threshold\n    end\n  -- More then\
    \ 3 elements set\n  else\n    local total = 0\n    local closest = nil\n    local\
    \ minDiff = threshold\n    for _, number in pairs(numbers) do\n      total = total\
    \ + number\n      if total - closest > minDiff then\n        minDiff = total -\
    \ closest\n        closest = total\n      end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpegelngux.lua:51: 'end' expected (to close 'if' at line 9)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local numbers_with_diff\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local n1 = numbers[i-1]\n    local\
    \ n2 = numbers[i]\n    local distance\n    if n2 then\n      distance = math.abs(n1\
    \ - n2)\n      numbers_with_diff[1] = n1\n    else\n      distance = math.abs(n1)\n\
    \    end\n    -- Only use differences if a second number is given.\n    local\
    \ use_diffs = numbers[i+1]\n    if use_diffs then\n      numbers_with_diff[i]\
    \ = n1\n    end\n    local diff_threshold = math.abs(threshold - distance)\n \
    \   if use_diffs then\n      return (diff_threshold > threshold)\n    else\n \
    \     return (not numbers_with_diff or numbers_with_diff[i] == nil or\n      \
    \    numbers_with_diff[i] + diff_threshold < threshold)\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdh505pd.lua:15:\
    \ attempt to index a number value (local 'numbers_with_diff')\nstack traceback:\n\
    \t/tmp/tmpjdh505pd.lua:15: in local 'candidate'\n\t/tmp/tmpjdh505pd.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n   if #numbers\
    \ == 0 then\n      return false\n   end\n   if #numbers == 1 then\n      return\
    \ numbers[1] <= threshold\n   end\n   local max_element = numbers[1]\n   for i\
    \ = 2, #numbers do\n      if numbers[i] ~= max_element then\n         return false\n\
    \      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2phohwgq.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2phohwgq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- Check if\
    \ all elements are the same.\n    if numbers[1] ~= numbers[#numbers-1] then\n\
    \        return false\n    end\n    -- Get minimum element from the list of numbers.\n\
    \    local min_element = math.min(numbers)\n    -- Loop through numbers list starting\
    \ from second element. Compare each element with current minimum.\n    for i =\
    \ 2, #numbers do\n        -- Check if number is not the minimum element and check\
    \ if the difference with minimum element is greater than threshold.\n        if\
    \ numbers[i] ~= min_element and (numbers[i] - min_element) > threshold then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcw3_n87x.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcw3_n87x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- Sort\n\
    \    table.sort(numbers)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc_igcvnn.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return table.includes(numbers,\
    \ function(number1, number2)\n    local diff1 = math.abs(number1 - threshold)\n\
    \    local diff2 = math.abs(number2 - threshold)\n    return diff1 < diff2\n \
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctwpl8t6.lua:8:\
    \ attempt to call a nil value (field 'includes')\nstack traceback:\n\t/tmp/tmpctwpl8t6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpctwpl8t6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return #numbers\
    \ > 1 and\n    all(\n      function(n, i)\n        return abs(n - numbers[i+1])\
    \ < threshold\n      end,\n      numbers)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpml1kh2lp.lua:9:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmpml1kh2lp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpml1kh2lp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local i = 1\n\
    \  while i <= #numbers - 1 do\n    local element = numbers[i]\n    for j = i +\
    \ 1, #numbers - 1 do\n      if math.abs(element - numbers[j]) < threshold then\n\
    \        return true\n      end\n    end\n    i = i + 1\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93ie3olx.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp93ie3olx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close\
    \ = tablex.map(\n    function(x, y) return distance(x, y, threshold) < 1 end,\n\
    \    numbers\n  )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxw6xvr6g.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    if next(numbers)\
    \ ~= nil then\n        local i = 1\n        while i <= #numbers and numbers[i]\
    \ <= threshold do\n            if numbers[i] == numbers[i - 1] + threshold then\n\
    \                i = i + 1\n            else\n                return true\n  \
    \          end\n        end\n        return false\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcvyfjyf.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptcvyfjyf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return not is_empty(setmetatable({},\
    \ { __eq = function(a, b) return a <= b end}))\n  and ((#numbers == 0\n      or\
    \ #numbers > 1\n      or #numbers:map(function() return end):filter(function(_)\
    \ return _ > threshold):count() > 1))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx214v20r.lua:11: 'end' expected near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for i = 1, #numbers\
    \ do\n    for j = i + 1, #numbers do\n      local dist = math.sqrt(math.abs(numbers[i]\
    \ - numbers[j]))\n      if dist > threshold then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhxwkijb.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuhxwkijb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    return #numbers\
    \ > 1 and numbers.min() < #numbers - 1 and numbers.max() <= #numbers - 1 and numbers[1]\
    \ >= threshold and numbers[#numbers] >= threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8uxd0e0.lua:8:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmpb8uxd0e0.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpb8uxd0e0.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local diff =\
    \ 0\n  for i, n in ipairs(numbers) do\n    diff = diff + math.abs(n - threshold)\n\
    \  end\n  return diff < threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm6m7dey.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbm6m7dey.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n\tassert(threshold:type()\
    \ == 'number')\n\tassert(#numbers > 0)\n\treturn #numbers >= 1 and #numbers ==\
    \ #table.concat(numbers, ',') and table.sort(numbers) ~= numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxm5kgw3f.lua:8:\
    \ attempt to index a number value (local 'threshold')\nstack traceback:\n\t/tmp/tmpxm5kgw3f.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpxm5kgw3f.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, value\
    \ in pairs(numbers) do\n    local close = false\n    local neighbors = pairs(numbers)\n\
    \    for _, neighbor in pairs(neighbors) do\n      if neighbor - value <= threshold\
    \ then\n        close = true\n        break\n      end\n    end\n    if close\
    \ then\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3cjccbc_.lua:11:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp3cjccbc_.lua:11: in local 'candidate'\n\t/tmp/tmp3cjccbc_.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- Sort numbers\
    \ to ensure O(NlogN).\n  table.sort(numbers)\n  for _, num in ipairs(numbers)\
    \ do\n    -- If element doesn't have a close neighbor, just check with\n    --\
    \ neighbors anyway.\n    if table.contains(numbers, num + threshold) then\n  \
    \    return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaqpf0yft.lua:13:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpaqpf0yft.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpaqpf0yft.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return #numbers\
    \ > 0 and #numbers == #filter(1, function(x) return abs(x - numbers[1]) < threshold\
    \ end) -- if numbers is empty then return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr1obho_k.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpr1obho_k.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpr1obho_k.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(#numbers\
    \ > 0, \"At least 1 number expected\")\n  assert(threshold >= 0 and threshold\
    \ <= 1.0, \"Threshold must be between 0.0 and 1.0\")\n  local min_value = math.min(unpack(numbers))\n\
    \  local max_value = math.max(unpack(numbers))\n  local num_close = 0\n  local\
    \ min_idx = 1\n  while min_idx <= #numbers and numbers[min_idx] <= max_value do\n\
    \    -- TODO: Add some check for numbers close to zero, for now return false in\
    \ such cases.\n    local value = numbers[min_idx]\n    local idx\n    for idx\
    \ = min_idx + 1; idx <= #numbers and numbers[idx] < value do\n      value = numbers[idx]\n\
    \    end\n    if value > max_value then break end\n    -- If the number has already\
    \ passed the threshold, don't keep looking for closer numbers.\n    if min_idx\
    \ > 1 then\n      if numbers[min_idx] == min_value + threshold then\n        --\
    \ If min_value is already in the list, don't bother checking further.\n      \
    \  if min_idx <= #numbers and numbers[min_idx] == min_value then\n          num_close\
    \ = 0\n          break\n        else\n          num_close = 1\n        end\n \
    \     else\n        num_close = 1\n      end\n    end\n    -- If min_value is\
    \ in the list, find all numbers that are close to it.\n    if min_idx <= #numbers\
    \ and numbers[min_idx] == min_value then\n      num_close = num_close + 1\n  \
    \  end\n    min_idx = idx + 1\n  end\n  return num_close == 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpux842aeb.lua:18: ',' expected near ';'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- If there\
    \ are zero numbers, return False\n  if #numbers == 0 then return false end\n \
    \ -- If the first number is not greater than the second number, return False\n\
    \  if numbers[1] < numbers[2] then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr52fd4eb.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close\
    \ = table.new_table()\n  for i, n1 in ipairs(numbers) do\n    for j, n2 in ipairs(numbers)\
    \ do\n      if i == j then -- Ignore same number.\n        close[i] = true\n \
    \       close[j] = true\n      end\n    end\n  end\n  for i, n1 in ipairs(numbers)\
    \ do\n    for j, n2 in ipairs(numbers) do\n      if close[i] and close[j] then\n\
    \        -- Check distance in percentage.\n        local delta = math.abs(n1 /\
    \ n2 - threshold)\n        if delta > 0.4 then\n          close[i] = false\n \
    \         close[j] = false\n        end\n      end\n    end\n  end\n  local result\
    \ = false\n  for i, v in ipairs(close) do\n    if v then\n      result = true\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62td0g5d.lua:8:\
    \ attempt to call a nil value (field 'new_table')\nstack traceback:\n\t/tmp/tmp62td0g5d.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp62td0g5d.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted_numbers\
    \ = table.sort(numbers)\n  local closest_index = 1\n  local closest_distance =\
    \ 0.0\n  for i = 1, #sorted_numbers do\n    if sorted_numbers[i] > threshold then\n\
    \      closest_index = i\n      break\n    end\n    local distance = sorted_numbers[i]\
    \ - threshold\n    closest_distance = distance if distance < closest_distance\
    \ end\n  end\n  return closest_index == #sorted_numbers - 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpelqgtyg8.lua:17: 'then' expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- Use a binary\
    \ search\n  local function binary_search(numbers, threshold)\n    local start\
    \ = 1\n    local stop = #numbers - 1\n    while start <= stop do\n      local\
    \ mid = math.floor(start + stop / 2)\n      if numbers[mid] > threshold then\n\
    \        start = mid + 1\n      else\n        stop = mid - 1\n      end\n    end\n\
    \    return start\n  end\n  return binary_search(numbers, threshold) ~= nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpambum6k5.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpambum6k5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold\
    \ ~= 0, 'Invalid threshold')\n  local num_pairs = #numbers - 1\n  local min_diff\
    \ = threshold\n  local last_diff = 0.0\n  for i = 1, num_pairs do\n    local diff\
    \ = numbers[i + 1] - numbers[i]\n    if diff < min_diff then\n      min_diff =\
    \ diff\n    end\n    if diff > last_diff then\n      return true\n    end\n  \
    \  last_diff = diff\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1whpu0pk.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1whpu0pk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n\tassert(type(nan)\
    \ == type(\"a\"))\n\tlocal i = 1\n\twhile i <= #numbers do\n\t\tlocal j = i\n\t\
    \twhile j <= #numbers do\n\t\t\tif numbers[j] - numbers[i] <= threshold then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbatn7e_t.lua:8:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpbatn7e_t.lua:8: in local 'candidate'\n\
    \t/tmp/tmpbatn7e_t.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local results\
    \ = {}\n  for i = 1, #numbers do\n    for j = 1, #numbers do\n      local d =\
    \ math.abs(numbers[i]-numbers[j])\n      if d < threshold then\n        results[#results\
    \ + 1] = 1\n        break\n      end\n    end\n  end\n  return #results == 2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojt8s871.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpojt8s871.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for i, number\
    \ in ipairs(numbers) do\n    for j, _ in ipairs(numbers) do\n      if i == j then\n\
    \        -- Skip same element\n      elseif abs(number - numbers[j]) < (threshold\
    \ * threshold) then\n        -- Skip same element\n      elseif j > i then\n \
    \       -- No need to keep comparing element i, it has already been checked and\
    \ is\n        -- closer to number j\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoy8ytepz.lua:12:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpoy8ytepz.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpoy8ytepz.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    assert(threshold\
    \ >= 0, \"threshold must be non-negative\")\n    assert(type(numbers) == \"table\"\
    , \"numbers must be a table\")\n    assert(#numbers > 0, \"numbers must be non-empty\
    \ table\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp15ke_mrj.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local total\
    \ = 0\n    for i, v in ipairs(numbers) do\n        total = total + v\n       \
    \ if total >= threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfc2vemz.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsfc2vemz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- Check first\
    \ two numbers\n  if numbers[1] < threshold then\n    return false\n  end\n  if\
    \ numbers[2] < threshold then\n    return false\n  end\n  -- Check last two numbers\n\
    \  if numbers[#numbers-1] < threshold then\n    return false\n  end\n  if numbers[#numbers-2]\
    \ < threshold then\n    return false\n  end\n  -- Check middle two numbers\n \
    \ if numbers[#numbers/2] < threshold then\n    return false\n  end\n  -- Check\
    \ middle two numbers\n  if numbers[#numbers/2 + 1] < threshold then\n    return\
    \ false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjx2w55g.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbjx2w55g.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for i, num1\
    \ in ipairs(numbers) do\n    for j, num2 in ipairs(numbers) do\n      if i >=\
    \ j or j == i then continue end\n      if abs(num2 - num1) < threshold then return\
    \ true end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5yzv99oz.lua:10: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    assert(threshold:type()\
    \ == \"Real\")\n    for _, el in ipairs(numbers) do\n        local diff = el -\
    \ threshold\n        if diff < 0 then\n            diff = -diff\n        end\n\
    \        if diff <= 0.0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2j_f3kj.lua:8:\
    \ attempt to index a number value (local 'threshold')\nstack traceback:\n\t/tmp/tmpm2j_f3kj.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpm2j_f3kj.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_diff\
    \ = threshold * threshold\n  local max_diff = numbers[1] - numbers[2]\n  return\
    \ min_diff < max_diff and min_diff < max_diff and numbers[1] ~= numbers[2]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2s5e4enk.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2s5e4enk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- We will get\
    \ number of elements that need to be in given list in given number\n  -- array.\n\
    \  local function element_count(arr)\n    if #arr == 0 then return nil end\n \
    \   local count = 0\n    for x in arr do\n      if x == arr[count] then\n    \
    \    count = count + 1\n      end\n    end\n    return count\n  end\n  -- Count\
    \ the number of elements that are closer to each other in given number\n  -- array.\n\
    \  local function find_closest(arr, target)\n    if #arr == 1 then return arr[#arr]\
    \ end\n    local min_dist = math.inf\n    local min_dist_index\n    local index\n\
    \    for index, element in pairs(arr) do\n      local diff = target - element\n\
    \      local dist\n      if diff == 0 then\n        dist = math.abs(element)\n\
    \      elseif diff > 0 then\n        dist = math.abs(element / diff)\n      elseif\
    \ diff < 0 then\n        dist = math.abs(element * diff)\n      end\n      if\
    \ dist < min_dist then\n        min_dist = dist\n        min_dist_index = index\n\
    \      end\n    end\n    return arr[min_dist_index]\n  end\n  -- Create array\
    \ from given numbers array and element index.\n  local new_numbers = numbers[1]\n\
    \  for index = 2, #numbers do\n    new_numbers[index] = numbers[index]\n  end\n\
    \  -- Find number of elements that are closer to each other in given number\n\
    \  -- array.\n  local num_closer = element_count(new_numbers)\n  if num_closer\
    \ == 0 then\n    return false\n  end\n  -- Find which elements are closer to each\
    \ other in given number array.\n  local closers = {}\n  for index = 1, num_closer\
    \ do\n    local element = find_closest(new_numbers, threshold)\n    if element\
    \ ~= nil then\n      closers[#closers + 1] = element\n    end\n  end\n  -- Check\
    \ if there are any closer elements in given numbers array.\n  for _, closer in\
    \ pairs(closers) do\n    for index = 1, #numbers do\n      if numbers[index] ==\
    \ closer then\n        return false\n      end\n    end\n  end\n  -- If we get\
    \ here then there are no elements closer to each other.\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa4jiucyz.lua:47:\
    \ attempt to index a number value (local 'new_numbers')\nstack traceback:\n\t\
    /tmp/tmpa4jiucyz.lua:47: in local 'candidate'\n\t/tmp/tmpa4jiucyz.lua:78: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  local counts = {}\n  local max = 0\n  for i = 1, n do\n    counts[i] = 0\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_5r7zhmx.lua:27: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    for _, value\
    \ in ipairs(numbers) do\n        for _, value in ipairs(numbers) do\n        \
    \    local distance = get_distance(value, threshold)\n            if distance\
    \ <= threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8hs7ito8.lua:10:\
    \ attempt to call a nil value (global 'get_distance')\nstack traceback:\n\t/tmp/tmp8hs7ito8.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp8hs7ito8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold\
    \ > 0, \"Threshold must be positive\")\n  local max_distance = math.max(numbers[1])\n\
    \  for i, v in pairs(numbers) do\n    if v == 0 then\n      -- Skip zeroes.\n\
    \      continue\n    end\n    local dist = math.sqrt(math.pow(numbers[i] - v,\
    \ 2))\n    if dist > threshold then\n      -- Found two elements closer.\n   \
    \   return true\n    end\n    -- Keep looking if we've found a closer one before\n\
    \    -- or if we found a closer one the previous time around\n    if dist > max_distance\
    \ or i == 1 then\n      -- Found a closer one.\n      max_distance = dist\n  \
    \  end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6ugd3ehw.lua:14: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, n in\
    \ ipairs(numbers) do\n    for _, v in ipairs(numbers) do\n      if v > n and v\
    \ - n <= threshold then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcnxwacg.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvcnxwacg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- If thresholds\
    \ are equal, we can return early\n    if threshold[1] == threshold then\n    \
    \    return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2huhu4qb.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- If length\
    \ is odd, then it can't possibly have three numbers with same distance\n    --\
    \ to each other.\n    if #numbers == 1 then\n        return numbers[1] - numbers[1]\
    \ > threshold or numbers[#numbers - 1] - numbers[#numbers - 1] > threshold\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvxoez30a.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close\
    \ = {}\n  for i = 1, #numbers do\n    close[numbers[i]] = numbers[i]\n  end\n\
    \  local found = false\n  for i = 1, #numbers do\n    -- Compare to threshold\
    \ and if greater then continue with next element\n    -- Otherwise, if same then\
    \ we're done.\n    if numbers[i] < threshold then\n      found = false\n    elseif\
    \ numbers[i] == threshold then\n      found = true\n      break\n    else\n  \
    \    local element = numbers[i]\n      local found = false\n      for j = i +\
    \ 1, #numbers do\n        if element:abs() < numbers[j]:abs() then\n         \
    \ found = true\n          break\n        end\n      end\n      if found then\n\
    \        break\n      end\n    end\n  end\n  return found\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt2us1n2h.lua:25:\
    \ attempt to index a number value (local 'element')\nstack traceback:\n\t/tmp/tmpt2us1n2h.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpt2us1n2h.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    if #numbers\
    \ == 0 then\n        return false\n    end\n    local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n    for i = 2, #numbers do\n        local curr = numbers[i]\n\
    \        if curr < smallest then\n            smallest = curr\n        elseif\
    \ curr > largest then\n            largest = curr\n        elseif curr - smallest\
    \ > threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbimbyah1.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbimbyah1.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for i, n in\
    \ pairs(numbers) do\n    for j = i+1, #numbers do\n      if math.abs(n - numbers[j])\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ == 0 then\n    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjbedl0d9.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n   for _, num\
    \ in pairs(numbers) do\n      local diff1 = num - threshold\n      local diff2\
    \ = threshold - num\n      if diff1 ~= 0 and diff2 ~= 0 then\n         return\
    \ true\n      end\n   end\n   return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw8yga0t.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsw8yga0t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n   for i = 1,\
    \ #numbers do\n      if numbers[i] ~= numbers[i+1] then\n         if math.abs(numbers[i]\
    \ - numbers[i+1]) > threshold then\n            return true\n         end\n  \
    \    end\n   end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua6a995t.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpua6a995t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    for _, number\
    \ in pairs(numbers) do\n        if number < threshold then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsop75gsv.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsop75gsv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local num =\
    \ 1\n  local i = 0\n  while i < #numbers do\n    local distance = math.abs(num\
    \ - numbers[i])\n    if distance < threshold then\n      return true\n    elseif\
    \ i == #numbers - 1 then\n      return false\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp77_d6w3a.lua:30: 'end' expected (to close 'while' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- Sort by absolute\
    \ difference and take the last one.\n  local function distance(...)\n    local\
    \ function absdiff(x, y)\n      return x >= y and abs(x) - abs(y)\n    end\n \
    \   table.sort(numbers, absdiff)\n    return numbers[#numbers]\n  end\n  return\
    \ distance(numbers[1], numbers[2]) <= threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4lw12n4_.lua:11:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp4lw12n4_.lua:11:\
    \ in function </tmp/tmp4lw12n4_.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp4lw12n4_.lua:13:\
    \ in local 'distance'\n\t/tmp/tmp4lw12n4_.lua:16: in local 'candidate'\n\t/tmp/tmp4lw12n4_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_n\
    \ = math.min(numbers)\n  local max_n = math.max(numbers)\n  -- If array is empty,\
    \ return true\n  if not numbers then\n    return true\n  end\n  -- If min_n and\
    \ max_n are identical, return true\n  if min_n == max_n then\n    return true\n\
    \  end\n  if min_n == 0 or max_n == 0 then\n    return false\n  end\n  -- If thresholds\
    \ are identical, return true\n  if threshold[1] == threshold[1] then\n    return\
    \ true\n  end\n  -- If min_n is above threshold and min_n is below threshold,\
    \ return true\n  if min_n > threshold[1] and threshold[1] > min_n then\n    return\
    \ true\n  end\n  -- If max_n is above threshold and max_n is below threshold,\
    \ return true\n  if max_n < threshold[1] and threshold[1] > max_n then\n    return\
    \ true\n  end\n  -- If min_n is above threshold and max_n is below threshold,\
    \ return true\n  if threshold[1] > min_n and threshold[1] < max_n then\n    return\
    \ true\n  end\n  -- If min_n is below threshold and max_n is above threshold,\
    \ return true\n  if min_n < threshold[1] and threshold[1] < max_n then\n    return\
    \ true\n  end\n  -- If max_n is above threshold and min_n is below threshold,\
    \ return true\n  if threshold[1] < max_n and threshold[1] > min_n then\n    return\
    \ true\n  end\n  -- If any two numbers are within threshold of one another, return\
    \ true\n  for i = 1, #numbers do\n    local min_i = math.min(numbers)\n    local\
    \ max_i = math.max(numbers)\n    -- If number is less than the other, return false\n\
    \    if numbers[i] < min_i then\n      return false\n    end\n    -- If number\
    \ is greater than the other, return false\n    if numbers[i] > max_i then\n  \
    \    return false\n    end\n    -- If any two numbers are within threshold of\
    \ one another, return true\n    if numbers[i] < min_i and numbers[i] > max_i then\n\
    \      return true\n    end\n  end\n  -- No two numbers exceed threshold of one\
    \ another\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7dj5fue.lua:70:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_7dj5fue.lua:70:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local numElements\
    \ = #numbers\n  local pairs = pairs(numbers)\n  for _,v in pairs do\n    local\
    \ v2 = numbers[_]\n    if v2 - v < threshold then\n      return true\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptacixr0q.lua:10:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmptacixr0q.lua:10: in local 'candidate'\n\t/tmp/tmptacixr0q.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- TODO: Sort\
    \ and binary search may be more efficient\n  for _, v in ipairs(numbers) do\n\
    \    for _, v2 in ipairs(numbers) do\n      -- Check for equality\n      if v\
    \ == v2 then\n        -- Not a pair\n      elseif math.abs(v - v2) < threshold\
    \ then\n        return true\n      else\n        return false\n      end\n   \
    \ end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cxg_8o7.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1cxg_8o7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local len\
    \ = #numbers - 1\n    if len < 2 then\n        return false\n    end\n    for\
    \ i = 1, len do\n        for j = i + 1, len do\n            local delta = math.abs(numbers[i]\
    \ - numbers[j])\n            if delta > threshold then\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp886rn8zc.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp886rn8zc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return #numbers\
    \ > 1 and\n  math.abs(numbers[1] - numbers[2]) / math.sqrt(math.pow(numbers[1],\
    \ 2) + math.pow(numbers[2], 2)) < threshold\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6w4ny1a4.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6w4ny1a4.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local closer\
    \ = nil\n  for _, b in ipairs(numbers) do\n    if closer ~= nil then\n      if\
    \ math.abs(b - closer) < threshold then\n        return false\n      end\n   \
    \ end\n    closer = b\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h1eruyq.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0h1eruyq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ == 0 then return false end\n  for i = 1, #numbers do\n    local n = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if math.abs(n - numbers[j]) < (threshold\
    \ * threshold) then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1o4woy7.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt1o4woy7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close_count\
    \ = 0\n  for _,v in pairs(numbers) do\n    local min_distance = math.min(v, threshold)\n\
    \    local close\n    for _,vv in pairs(numbers) do\n      if v > threshold and\
    \ vv > min_distance then\n        if v > vv or v == vv and math.abs(v-vv) < 1e-10\
    \ then\n          close = vv\n          break\n        end\n      end\n    end\n\
    \    if close then close_count = close_count + 1 end\n  end\n  return close_count\
    \ > 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp08oal4b.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp08oal4b.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- Check if\
    \ there are two numbers closer to each other than threshold\n    local counts\
    \ = {}\n    for _, num in ipairs(numbers) do\n        if counts[num] == nil then\n\
    \            counts[num] = 1\n        else\n            counts[num] = counts[num]\
    \ + 1\n        end\n    end\n    \n    local closest = {}\n    for _, num in ipairs(numbers)\
    \ do\n        -- Check if there are two numbers closer to each other than threshold\n\
    \        if counts[num] == nil then\n            closest[num] = 0\n        elseif\
    \ counts[num] > 1 then\n            closest[num] = numbers[#numbers]\n       \
    \ else\n            closest[num] = num\n        end\n    end\n    \n    return\
    \ #closest == #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mxx6bql.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1mxx6bql.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local minDist\
    \ = -1\n    local minDistIdx = -1\n    for idx = 1, #numbers do\n        local\
    \ dist = math.sqrt(math.pow(numbers[idx] - threshold,2) / 3)\n        if minDist\
    \ == -1 or dist < minDist then\n            minDist = dist\n            minDistIdx\
    \ = idx\n        end\n    end\n    return minDistIdx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_7rk_ko.lua:23:\
    \ expected: true, actual: 1\nstack traceback:\n\t/tmp/tmpp_7rk_ko.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_diff\
    \ = threshold\n  local num_diff\n  local max_diff\n  for _, value in pairs(numbers)\
    \ do\n    local diff = value - threshold\n    if num_diff == nil then\n      min_diff\
    \ = diff if diff < min_diff else min_diff\n      max_diff = diff if diff > max_diff\
    \ else max_diff\n      num_diff = 1\n    elseif num_diff > 1 then\n      if diff\
    \ < min_diff then\n        min_diff = diff\n      elseif diff > max_diff then\n\
    \        max_diff = diff\n      end\n      num_diff = 0\n    else\n      if diff\
    \ < min_diff then\n        min_diff = diff\n      end\n      num_diff = 1\n  \
    \  end\n  end\n  return min_diff < max_diff\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3xvixxo2.lua:14: 'then' expected near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local last_diff,\
    \ last_val = nil, numbers[1]\n    for _,num in ipairs(numbers) do\n        if\
    \ last_val and last_val - num ~= last_diff\n        then\n            return true\n\
    \        end\n        last_diff = num - last_val\n        last_val = num\n   \
    \ end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0m4qixn.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc0m4qixn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  threshold =\
    \ math.max(threshold, -threshold) -- Make sure threshold is positive.\n  local\
    \ closest_numbers = {}\n  for _, number in ipairs(numbers) do\n    if closest_numbers[number]\
    \ == nil then\n      closest_numbers[number] = true\n    elseif closest_numbers[number]\
    \ ~= (number - threshold) then\n      closest_numbers[number] = false\n    end\n\
    \  end\n  return #closest_numbers > 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48q3a36g.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp48q3a36g.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold,\
    \ 'threshold argument is missing')\n  assert(type(numbers) == 'table', 'number\
    \ list is not a table')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4inhtky9.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  return not (#numbers\
    \ < 2 or\n    math.abs(numbers[1] - numbers[#numbers]) > threshold)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w8f_54l.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3w8f_54l.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    for _, num\
    \ in ipairs(numbers) do\n        if num == threshold then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3xx7w7c.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd3xx7w7c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  assert(n ~= 0)\n  assert(n > 0)\n  assert(threshold > 0)\n  \n  -- Return False\
    \ if we don't have enough elements\n  if n <= 1 then\n    return false\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpacyk4ij3.lua:30: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted_numbers\
    \ = table.sort(numbers)\n    for _, number_1 in ipairs(sorted_numbers) do\n  \
    \      for _, number_2 in ipairs(sorted_numbers) do\n            if number_2 ==\
    \ number_1 then break end\n            if abs(number_1 - number_2) < threshold\
    \ then return true end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a nil value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- Special\
    \ case: if the given threshold is 0, then return false as there are\n    -- no\
    \ elements in the given list.\n    if threshold == 0 then\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8n0agkp7.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local total\
    \ = 0\n  for _, value in pairs(numbers) do\n    total = total + value\n  end\n\
    \  local difference = threshold - total\n  return difference == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl72ue5_.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsl72ue5_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, element\
    \ in pairs(numbers) do\n    for _, element2 in pairs(numbers) do\n      if element\
    \ ~= element2 and math.abs(element - element2) < threshold then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1yysu_u.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf1yysu_u.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    local maxix = math.ceil(n/2)\n    local close_set = table.copy(numbers)\n\
    \    table.insert(close_set, n)\n    table.insert(close_set, 1)\n    local j =\
    \ 0\n    local i = 1\n    while j < maxix do\n        if numbers[i] ~= numbers[j]\
    \ then\n            if abs(numbers[i] - numbers[j]) > threshold then\n       \
    \         close_set[j] = numbers[i]\n            else\n                close_set[j]\
    \ = numbers[j]\n            end\n        end\n        i = i + 1\n        j = j\
    \ + 1\n    end\n    return #close_set == 1 or #close_set == n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukw_4zd4.lua:10:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpukw_4zd4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpukw_4zd4.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  if #numbers\
    \ == 1 then\n    return numbers[1] - numbers[1] <= threshold or numbers[1] - numbers[1]\
    \ == math.abs(numbers[1] - threshold)\n  end\n  local minimum = numbers[1]\n \
    \ local maximum = numbers[1]\n  local close = 0\n  for i = 2, #numbers do\n  \
    \  local num = numbers[i]\n    if num < minimum then\n      minimum = num\n  \
    \  end\n    if num > maximum then\n      maximum = num\n    end\n    if minimum\
    \ == maximum then\n      -- If minimum and maximum are the same, they are not\
    \ very close\n      local diff = minimum - maximum\n      if diff <= threshold\
    \ or diff == math.abs(diff) then\n        close = close + 1\n      end\n     \
    \ minimum = maximum\n      maximum = maximum\n    else\n      local diff = minimum\
    \ - maximum\n      if diff <= threshold or diff == math.abs(diff) then\n     \
    \   close = close + 1\n      end\n    end\n  end\n  return close == #numbers or\
    \ math.abs(minimum - maximum) <= math.abs(threshold)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd2cg7wy.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxd2cg7wy.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local result\n\
    \  for _, x in ipairs(numbers) do\n    local lower, upper = x + threshold, x -\
    \ threshold\n    if lower <= upper then\n      if result then return false end\n\
    \      result = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7yfvdzq.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpi7yfvdzq.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local close_to_eachother\n\
    \    for i = 1, #numbers do\n        local number1, number2 = numbers[i], numbers[(i\
    \ + 1) % #numbers]\n        local difference = abs(number1 - number2)\n      \
    \  if difference < threshold then\n            if not close_to_eachother then\n\
    \                close_to_eachother = {}\n            end\n            table.insert(close_to_eachother,\
    \ number1)\n            table.insert(close_to_eachother, number2)\n        end\n\
    \    end\n    return #close_to_eachother > 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpshv02gqi.lua:11:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpshv02gqi.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpshv02gqi.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local result\
    \ = 0\n    for _, i in pairs(numbers) do\n        for _, j in pairs(numbers) do\n\
    \            if i == j then\n                continue\n            end\n     \
    \       if abs(i - j) < threshold then\n                result = result + 1\n\
    \            end\n        end\n    end\n    return result % 2 ~= 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphri35ijh.lua:13: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local result\
    \ = 0\n    for _, number in ipairs(numbers) do\n        for _, other_number in\
    \ ipairs(numbers) do\n            if number - other_number < threshold then\n\
    \                result = result + 1\n            end\n        end\n    end\n\
    \    return result == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhls0l2l.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjhls0l2l.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local elements\
    \ = {}\n    for i, v in ipairs(numbers) do\n        for j = i + 1, #numbers do\n\
    \            if v - numbers[j] <= threshold then\n                table.insert(elements,\
    \ v)\n                table.insert(elements, numbers[j])\n                break\n\
    \            end\n        end\n    end\n    return #elements > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkxtyzd5.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprkxtyzd5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_index,\
    \ max_index = 1, #numbers - 1\n  while min_index <= max_index do\n    local mid_index\
    \ = (min_index + max_index) / 2\n    local mid_value = numbers[mid_index]\n  \
    \  if mid_value < threshold then min_index = mid_index + 1 else\n    if mid_value\
    \ > threshold then max_index = mid_index - 1 else\n      -- If the two values\
    \ are close enough, we're done.\n      return true\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp04azm0hx.lua:33: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold,\
    \ 'Threshold cannot be empty.')\n  if #numbers == 1 then\n    return true\n  end\n\
    \  -- Sort the array first.\n  table.sort(numbers)\n  for idx = 2, #numbers do\n\
    \    -- If any two elements are closer than threshold, the answer is no.\n   \
    \ if abs(numbers[idx] - numbers[idx - 1]) <= threshold then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprcdwf63g.lua:16:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmprcdwf63g.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmprcdwf63g.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n\tlocal min_distance\
    \ = threshold\n\tlocal min_element = numbers[1]\n\tfor i=2, #numbers, 1 do\n\t\
    \tlocal distance = math.abs(numbers[i] - min_element)\n\t\tif distance < min_distance\
    \ then\n\t\t\tmin_distance = distance\n\t\t\tmin_element = numbers[i]\n\t\tend\n\
    \tend\n\treturn min_distance < threshold\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph21lrdks.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph21lrdks.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local counts\
    \ = { }\n  for _, value in pairs(numbers) do\n    counts[value] = counts[value]\
    \ or 0\n    counts[value] = counts[value] + 1\n  end\n  for value in pairs(counts)\
    \ do\n    if counts[value] < 2 then\n      return false\n    end\n  end\n  local\
    \ min_value = numbers[1]\n  for _, value in pairs(numbers) do\n    if min_value\
    \ < value then\n      min_value = value\n    end\n  end\n  for _, value in pairs(numbers)\
    \ do\n    if min_value > value then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmghl3pi.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzmghl3pi.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close_e\
    \ = true\n  local close_c = true\n  local prev_e = false\n  for _, v in ipairs(numbers)\
    \ do\n    if prev_e then\n      if abs(v - prev_e) < threshold then\n        close_e\
    \ = false\n      end\n    else\n      close_e = false\n    end\n    prev_e = v\n\
    \  end\n  if prev_e then\n    close_c = false\n  end\n  return close_c\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp406k89_t.lua:13:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp406k89_t.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp406k89_t.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local num_threshold\
    \ = tonumber(threshold)\n  for i, v in ipairs(numbers) do\n    if tonumber(v)\
    \ < num_threshold or tonumber(v) > num_threshold - 1 then\n      return true\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstgsrmlz.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpstgsrmlz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_number\
    \ = math.min(unpack(numbers))\n  local max_number = math.max(unpack(numbers))\n\
    \  local count = 0\n  -- If all numbers are same, all elements closer to each\
    \ other should be same.\n  -- Therefore we check if max_number - min_number ==\
    \ threshold\n  if max_number == min_number then\n    count = max_number - min_number\
    \ + threshold\n  -- If numbers are in ascending order, we check numbers closer\
    \ to threshold than\n  -- the first and last number, if there are any.\n  else\n\
    \    -- count number of elements closer to threshold than the first\n    count\
    \ = max_number - min_number + threshold + 1\n    -- count number of elements closer\
    \ to threshold than the last\n    count = count + max_number - min_number - threshold\
    \ + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaj3qvp4p.lua:36: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    for _, number\
    \ in ipairs(numbers) do\n        local diff1 = math.abs(number - threshold)\n\
    \        local diff2 = math.abs(number - numbers[1])\n        if diff1 <= diff2\
    \ then\n            return true\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dj7waba.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8dj7waba.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local distances\
    \ = {}\n  local min_distance = math.pow(2, 32)\n  for _, n in ipairs(numbers)\
    \ do\n    table.insert(distances, n)\n    if n < min_distance then\n      min_distance\
    \ = n\n    end\n  end\n  for _, i in ipairs(#distances) do\n    distances[i] =\
    \ distances[i] / min_distance\n  end\n  return #distances > 1 and distances[#distances]\
    \ > threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a number value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  for _, item\
    \ in ipairs(numbers) do\n    for i = 1, #numbers do\n      if i == item then return\
    \ false end\n      if abs(item - numbers[i]) < threshold then return false end\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06a1fhqw.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp06a1fhqw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  -- Make copy\
    \ of numbers to prevent modification\n  local copy = {}\n  for _, v in pairs(numbers)\
    \ do\n    copy[v] = v\n  end\n  -- Sort copy in descending order\n  table.sort(copy,\
    \ function(a, b)\n    if a ~= b then\n      if math.abs(a) > math.abs(b) then\n\
    \        return b\n      else\n        return a\n      end\n    else\n      return\
    \ 0\n    end\n  end)\n  -- If there were only one number, it is already in the\
    \ list\n  if #copy == 1 then\n    return true\n  end\n  -- Iterate through the\
    \ list and compare every element with next one\n  for _, v in pairs(copy) do\n\
    \    if v ~= copy[#copy - 1] then\n      if math.abs(v - copy[#copy - 1]) < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3otjzq5p.lua:16:\
    \ bad argument #1 to 'abs' (number expected, got nil)\nstack traceback:\n\t/tmp/tmp3otjzq5p.lua:16:\
    \ in function </tmp/tmp3otjzq5p.lua:14>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp3otjzq5p.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp3otjzq5p.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local count\
    \ = 0\n  for _, value in ipairs(numbers) do\n    if value ~= threshold then\n\
    \      count = count + 1\n    end\n  end\n  return count >= 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61v4_euy.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp61v4_euy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local num1 =\
    \ table.remove(numbers)\n  local num2 = table.remove(numbers)\n  local d1, d2\
    \ = distance (numbers[1], numbers[2]), distance (num1, num2)\n  if d1 < threshold\
    \ and d2 < threshold then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62ai4akf.lua:10:\
    \ attempt to call a nil value (global 'distance')\nstack traceback:\n\t/tmp/tmp62ai4akf.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp62ai4akf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(numbers)\n\
    \  assert(type(threshold) == 'number')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp27s6sxsm.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n\tlocal pairs\
    \ = {}\n\tfor _, element in pairs(numbers) do\n\t\tpairs[element] = true\n\tend\n\
    \tfor _, element in pairs(numbers) do\n\t\tpairs[element + threshold] = true\n\
    \tend\n\tfor _, element in pairs(numbers) do\n\t\tif pairs[element] then\n\t\t\
    \treturn true\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbuswtuy6.lua:9:\
    \ attempt to call a table value (local 'pairs')\nstack traceback:\n\t/tmp/tmpbuswtuy6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbuswtuy6.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
