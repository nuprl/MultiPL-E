name: HumanEval_74_total_match
language: lua
prompt: "-- Write a function that accepts two lists of strings and returns the list\
  \ that has \n-- total number of chars in the all strings of the list less than the\
  \ other list.\n-- if the two lists have the same number of chars, return the first\
  \ list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi', 'admin'],\
  \ ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'], ['hi', 'hi',\
  \ 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi', 'admin'], ['hI',\
  \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'], ['1', '2', '3',\
  \ '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
  \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
  \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
  \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
  \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
  \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if not lst1 then return lst2 end\n  if not lst2 then return lst1\
    \ end\n  if lst1 == lst2 then return lst1 end\n  local n = 0\n  for i = 0, #lst1\
    \ do\n    n = n + string.len(lst1[i])\n  end\n  \n  for i = 0, #lst2 do\n    n\
    \ = n + string.len(lst2[i])\n  end\n  \n  for i = 0, #lst1 do\n    if string.len(lst1[i])\
    \ > n then\n      lst1 = lst1[i]\n    end\n  end\n  \n  for i = 0, #lst2 do\n\
    \    if string.len(lst2[i]) > n then\n      lst2 = lst2[i]\n    end\n  end\n \
    \ return lst1\nend", "  local len1 = #lst1\n  local len2 = #lst2\n  if len1 ==\
    \ 0 then\n    return lst2\n  end\n  if len2 == 0 then\n    return lst1\n  end\n\
    \  if len1 > len2 then\n    local lst3 = lst2\n    lst2 = lst1\n    lst1 = lst3\n\
    \    len2 = len1\n  end\n  local cnt = 0\n  for i = 1,len1 do\n    if lst1[i]\
    \ < lst2[i] then\n      cnt = cnt + 1\n    end\n  end\n  return lst1\nend", " \
    \  if lst1 and lst2 and #lst1 == #lst2 then \n      for i = 1, #lst1 do\n    \
    \     if lst1[i] > lst2[i] then \n            return lst1\n         else\n   \
    \         return lst2\n         end\n      end\n      return lst1\n   else\n \
    \     return lst2\n   end\nend", "    local l1 = #lst1\n    local l2 = #lst2",
  "  if lst1 and lst2 then\n    return lst1\n  elseif lst1 then\n    return lst2\n\
    \  else\n    return []\n  end\nend", "    if not lst1 then return lst2 end\n \
    \   if not lst2 then return lst1 end\n    if #lst1 == 0 then return lst2\n   \
    \ else if #lst2 == 0 then return lst1\n    else return (lst1[1] <= lst2[1] and\
    \ lst1 or lst2)\n    end\nend", "  local num_chars = #lst1\n  local num_chars2\
    \ = #lst2\n  if num_chars == num_chars2 then\n    return lst1\n  end\n  return\
    \ lst1\nend", "  local result = {}\n  for _,v in pairs(lst1) do\n    table.insert(result,\
    \ v)\n  end\n  for _,v in pairs(lst2) do\n    for _, v2 in ipairs(result) do\n\
    \      if v~=v2 and #v<=#v2 then\n        return v\n      end\n    end\n  end\n\
    \  return lst1\nend", "  local len1 = #lst1\n  local len2 = #lst2\n  if len1 <\
    \ len2 then return lst1 end\n  if len1 == len2 then\n    local i = 1\n    while\
    \ i < len1 do\n      if lst1[i] ~= lst2[i] then break end\n      i = i + 1\n \
    \   end\n    if i == len1 then return lst1 end\n  end\n  return lst2\nend", " \
    \   local n = #lst1\n    local m = #lst2\n    \n    local ret = {}\n    for i\
    \ = 1, n do\n        local total = 0\n        for j = 1, m do\n            total\
    \ = total + (lst1[i] == lst2[j])\n        end\n        if total < n then\n   \
    \         table.insert(ret, lst1[i])\n        end\n    end\n    return ret\nend",
  "  local total = 0\n  for _, value in pairs(lst1) do\n    total = total + string.len(value)\n\
    \  end\n  local i = 1\n  while i < #lst2 do\n    local value = lst2[i]\n    if\
    \ string.find(lst1, value) then\n      total = total - string.len(value)\n   \
    \   lst2 = lst2:sub(1,#lst2-i)\n    end\n    i = i + 1\n  end\n  if #lst1 == #lst2\
    \ then\n    return lst1\n  else\n    return nil\n  end\nend", "   assert(#lst1\
    \ == #lst2, 'Arguments must be of same length')\n   local total_match = {}\n \
    \  for _, l1 in pairs(lst1) do\n      for _, l2 in pairs(lst2) do\n         if\
    \ l1 < l2 then\n            total_match = l1 \n            break\n         end\n\
    \      end\n   end\n   return total_match \nend\nprint(total_match({'hi', 'admin'},\
    \ {'hI', 'Hi'}))", "   local n1 = #lst1\n   local n2 = #lst2\n   if n2 > n1 then\n\
    \      return  lst1 -- two list have the same number of chars\n   elseif n2 ==\
    \ n1 then\n      return  lst1 -- lst2 has a larger list\n   else\n      local\
    \ i = 0\n      local sum = 0\n      local res = {}\n      while i < n1 do\n  \
    \       if #lst1 < i then\n            table.insert(res, lst1[i])\n         elseif\
    \ #lst2 < i then\n            table.insert(res, lst2[i])\n         else\n    \
    \        sum = sum + #lst1[i]\n         end\n         i = i + 1\n      end\n \
    \     return res\n   end\nend", "  \n  -- If lists have the same number of chars\n\
    \  if #lst1 == #lst2 then\n    return lst1\n  end\n  \n  -- If lists have different\
    \ number of chars, return\n  -- the first list since we do not want to match if\
    \ chars are not equal.\n  if #lst1 ~= #lst2 then\n    return lst1\n  end\n  \n\
    \  -- Create a counter with zeros \n  local count = 0\n  \n  -- Iterate over each\
    \ string in lst1 and lst2\n  for i = 1, #lst1 do\n    if string.sub(lst1[i], 1,\
    \ 1) == string.sub(lst2[i], 1, 1) then\n      count = count + 1\n    end\n  end\n\
    \  \n  -- If the chars in lst2 are greater than the char in lst1, return\n  if\
    \ count > #lst2 then\n    return lst1\n  else\n    return lst2\n  end\nend", " \
    \   local len1 = #lst1\n    local len2 = #lst2\n    \n    if len1 == 0 or len2\
    \ == 0 then\n        return lst1\n    end\n    \n    if len1 == len2 then\n  \
    \      local total = 0\n        for i = 1, len1 do\n            total = total\
    \ + lst1[i]\n        end\n        return total < lst2[1] and lst1 or lst2\n  \
    \  end\n    \n    for i = 1, len1 do\n        local char1\n        local char2\n\
    \        if lst1[i] == lst2[1] then\n            char1 = lst1[i]\n           \
    \ char2 = lst2[1]\n        elseif lst2[i] == lst1[1] then\n            char1 =\
    \ lst1[1]\n            char2 = lst2[i]\n        else\n            char1 = lst1[i]\n\
    \            char2 = lst2[i]\n        end\n        \n        local sublist_len\
    \ = #char1\n        local sublist2 = char2\n        if #sublist2 > sublist_len\
    \ then\n            sublist2 = sublist2[0:sublist_len]\n        end\n        \n\
    \        if #sublist2 > 0 then\n            local new_lst = total_match(char1,\
    \ sublist2)\n            if new_lst ~= nil then\n                return new_lst\n\
    \            end\n        end\n    end\n    return nil\nend\n</cell>\n<text>\n\
    Test your code\nRun the cell below to test your code.", "   for i = 1, #lst1 do\n\
    \      local count1 = lst1[i]:len()\n      for j = 1, #lst2 do\n         local\
    \ count2 = lst2[j]:len()\n         if count1 == count2 then\n            lst1[i]\
    \ = lst1[i]\n         end\n      end\n   end\n   return lst1\nend", "    local\
    \ len1 = #lst1\n    local len2 = #lst2\n    local result = {}\n    if len1 ==\
    \ len2 then\n        for i = 1, len1 do\n            result[i] = lst1[i]\n   \
    \     end\n        return result\n    end\n    for i = 1, len2 do\n        if\
    \ lst1[i] < lst2[i] then\n            result[i] = lst1[i]\n        else\n    \
    \        result[i] = lst2[i]\n        end\n    end\n    return result\nend", " \
    \   if not lst1 or not lst2 then\n        return lst1 or lst2\n    end\n    local\
    \ l1 = lst1\n    local l2 = lst2\n    local m = {}\n    while #l1 ~= 0 and #l2\
    \ ~= 0 do\n        m[#m+1] = #l1[#l1] > #l2[#l2] and #l1[#l1] or #l2[#l2]\n  \
    \      l1 = l1[(#l1 == 1 and #l1[#l1] == 1) or 1]\n        l2 = l2[(#l2 == 1 and\
    \ #l2[#l2] == 1) or 1]\n    end\n    table.sort(m, function(a,b)\n        if a\
    \ == b then\n            return 0\n        end\n        if #m == 1 or #m == 2\
    \ then\n            return a < b\n        end\n        return m[#m] <= a\n   \
    \ end)\n    return m\nend", "    local len1, len2 = 0, 0\n    for _, v in ipairs(lst1)\
    \ do\n        len1 = len1 + 1\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    len2 = len2 + 1\n    end\n    if len1 == len2 then\n        for _, v in ipairs(lst1)\
    \ do\n            if v ~= lst2[len2] then\n                return nil\n      \
    \      end\n        end\n        return lst1\n    end\nend", "  local res = {}\n\
    \  for _, v in ipairs(lst1) do\n    table.insert(res, v)\n  end\n  for _, v in\
    \ ipairs(lst2) do\n    if v~=res[#res] then\n      return nil\n    end\n  end\n\
    \  return res\nend", "  -- base cases\n  if not lst1 or not lst2 then\n    return\
    \ lst1 or lst2\n  elseif #lst1 == 0 and #lst2 == 0 then\n    return lst1\n  elseif\
    \ #lst1 == 0 and #lst2 ~= 0 then\n    return lst2\n  elseif #lst1 ~= 0 and #lst2\
    \ == 0 then\n    return lst1\n  else\n    local m1, m2\n    m1 = #lst1 > #lst2\
    \ and lst1 or lst2\n    m2 = #lst1 > #lst2 and lst2 or lst1\n    -- recurse\n\
    \    return total_match(m1, m2) \n  end\nend", "  if #lst1 == 0 then\n    return\
    \ lst2\n  end\n  if #lst2 == 0 then\n    return lst1\n  end\n  \n  local i, j\
    \ = 1, #lst1\n  while i <= j do\n    if lst1[i] > lst2[j] then\n      i = i +\
    \ 1\n      if i == #lst1 then\n        return lst1\n      end\n    else\n    \
    \  j = j + 1\n      if j == #lst2 then\n        return lst2\n      end\n    end\n\
    \  end\n  \n  return lst1\nend", "   local max_len = max(#lst1, #lst2)\n   local\
    \ lst3 = {}\n   for i = 1, max_len do\n      local s1 = lst1[i] or ''\n      local\
    \ s2 = lst2[i] or ''\n      if s1 ~= nil and s2 ~= nil then\n         lst3[i]\
    \ = #s1 + #s2\n      end\n   end\n   return lst3\nend", "\tlocal char_count =\
    \ #lst1\n\tlocal all_count = 0\n\tfor _,v in ipairs(lst1) do\n\t\tall_count =\
    \ all_count + 1\n\tend\n\tfor _,v in ipairs(lst2) do\n\t\tif all_count > char_count\
    \ then\n\t\t\treturn lst1\n\t\tend\n\tend\n\treturn lst2\nend", "   if lst1 ==\
    \ lst2 then return lst1 end\n   if #lst1 ~= #lst2 then return nil end\n   \n \
    \  local count = 0\n   for _, val in ipairs(lst1) do\n      count = count + 1\
    \ \n      if val < lst2[count] then \n         return nil\n      end\n   end\n\
    \   return lst1\nend", "    local len1 = #lst1\n    local len2 = #lst2\n    local\
    \ lst3 = {}\n    local i = 0", "  return lst1\nend", "   -- Write a for loop here\
    \ that iterates over the two lists and returns the list that \n   -- has total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \  -- if the two lists have the same number of chars, return the first list.\n\
    \   -- Examples\n   -- total_match([], []) \u279E []\n   -- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n   -- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n   -- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n   -- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n   \n   -- Write code here\nend", " \
    \  \n    -- Write your code here\n    local count = 0\n    \n    for i,v in ipairs(lst1)\
    \ do\n        if v in lst2 then\n            count = count + 1\n        end\n\
    \    end\n    \n    if count < #lst2 then\n        return lst1\n    else\n   \
    \     return lst2\n    end\nend", "  -- Check if two lists have the same number\
    \ of items,\n  -- if they have the same, return a list that contains the first\
    \ list\n  if #lst1 == #lst2 then\n    lst1 = lst1[1]\n  end\n  -- Return the list\
    \ with number of items that are not equal between the two lists\n  return lst1..'|'..lst2\n\
    end", "    local len1 = #lst1\n    local len2 = #lst2", "  if #lst1 == 0 then\n\
    \    return lst2\n  end\n  if #lst2 == 0 then\n    return lst1\n  end\n  if lst1[#lst1]\
    \ <= lst2[#lst2] then\n    return lst1\n  end\n  return lst2\nend", "  if #lst2\
    \ == 0 then\n    return lst1\n  elseif #lst1 == 0 then\n    return lst2\n  else\n\
    \    return lst1 -- return the first list if it's length does not exceed the length\
    \ of the second list\n  end \nend", "    local total_len = 0\n    for i = 1, #lst1\
    \ do\n        total_len = total_len + #lst1[i]\n    end\n    for i = 1, #lst2\
    \ do\n        total_len = total_len + #lst2[i]\n    end\n    \n    for i = 1,\
    \ #lst1 do\n        for j = 1, #lst2 do\n            if #lst1[i] < #lst2[j] then\n\
    \                return lst1[i]\n            else\n                return lst2[j]\n\
    \            end\n        end\n    end\n    return nil\nend", "    local total_len\
    \ = 0\n    for _, v in pairs(lst1) do\n        total_len = total_len + #v\n  \
    \  end\n    for _, v in pairs(lst2) do\n        total_len = total_len + #v\n \
    \   end\n    if total_len == 0 then\n        return lst1\n    elseif total_len\
    \ == #lst1 then\n        return lst1\n    else\n        local total_list = {}\n\
    \        for _, v in pairs(lst1) do\n            total_list[#total_list + 1] =\
    \ v\n        end\n        for _, v in pairs(lst2) do\n            total_list[#total_list\
    \ + 1] = v\n        end\n        table.sort(total_list)\n        return total_list[#total_list]\n\
    \    end\nend", "  assert(#lst2 > 0)\n  return lst1:reduce(function(acc, x) return\
    \ acc + #x < #lst2 and acc or x end,\n                      #lst1 == 0 and nil\
    \ or lst2)\nend", "    if #lst1 == 0 then\n        return lst2\n    end\n    if\
    \ #lst2 == 0 then\n        return lst1\n    end\n    if #lst1 > #lst2 then\n \
    \       return total_match(lst2, lst1)\n    end\n    \n    local total = 0\n \
    \   for i = 1, #lst1 do\n        total = total + #lst1[i]\n    end\n    for i\
    \ = 1, #lst2 do\n        total = total + #lst2[i]\n    end\n    if total == #lst1\
    \ then\n        return lst1\n    elseif total == #lst2 then\n        return lst2\n\
    \    end\nend", "    local sum=0\n    for idx, i in pairs(lst1) do\n       sum+=#i\n\
    \    end\n    for idx, i in pairs(lst2) do\n       sum+=#i\n    end\n    \n  \
    \  if sum == 0 then\n       return nil\n    end\n    return lst1\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  local count = 0\n  for i = 1,\
    \ #lst1 do\n    count = count + string.len(lst1[i])\n  end\n  \n  for i = 1, #lst2\
    \ do\n    count = count + string.len(lst2[i])\n  end\n  \n  if count < #lst1 then\n\
    \    return lst1\n  else\n    return lst2\n  end\nend", "  assert(type(lst1) ==\
    \ \"table\" and type(lst2) == \"table\")\n  local cnt1 = 0 \n  local cnt2 = 0\
    \ \n  for _, _ in pairs(lst1) do\n    cnt1 = cnt1 + 1 \n  end\n  for _, _ in pairs(lst2)\
    \ do\n    cnt2 = cnt2 + 1 \n  end\n  if cnt1 == cnt2 then \n    return lst1\n\
    \  else\n    return lst1\n  end\nend", "    local num_matches = 0\n    local min_len\
    \ = #lst1\n    for _, v in ipairs(lst1) do\n        if lst2[num_matches] < v then\n\
    \            num_matches = num_matches + 1\n        end\n    end\n    if num_matches\
    \ < min_len then\n        return lst1\n    else\n        return lst2[num_matches:min_len]\n\
    \    end\nend", "    local length1 = #lst1\n    local length2 = #lst2\n    local\
    \ length\n    \n    if length1 == length2 then\n        length = length1\n   \
    \ else\n        if length1 > length2 then\n            length = length1\n    \
    \    else\n            length = length2\n        end\n    end\n    \n    local\
    \ total = 0\n    local i = 1\n    \n    repeat\n        total = total + #lst1[i]\n\
    \        i = i + 1\n    until #lst1 >= i\n    \n    i = i + 1\n    \n    repeat\n\
    \        total = total + #lst2[i]\n        i = i + 1\n    until #lst2 >= i\n \
    \   \n    if length == total then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend", "  \n  -- check length\n  local len1, len2 = #lst1, #lst2\n\
    \  \n  if len1 == len2 then\n    return lst1\n  elseif len1 < len2 then\n    local\
    \ lst3 = lst2\n    for i = len1, len2 do lst3 = lst3 .. list[i]; end\n    return\
    \ lst3\n  elseif len1 > len2 then\n    local lst3 = lst1\n    for i = len2, len1\
    \ do lst3 = lst3 .. list[i]; end\n    return lst3\n  end\nend", "    local count\
    \ = #lst1\n    if count ~= #lst2 then\n        return lst1\n    end\n    local\
    \ max_count = #lst1\n    for idx = 1, max_count do\n        if #lst1 ~= #lst2[idx]\
    \ then\n            return lst1\n        end\n    end\n    return lst1\nend",
  "\tif #lst1 < #lst2 then return lst1 end\n\tlocal n = #lst1\n\tfor _,item in pairs(lst2)\
    \ do\n\t\tn = n - #item\n\tend\n\treturn lst1\nend", "  if lst1 ~= nil and lst2\
    \ ~= nil and #lst1 == #lst2 then\n    for i = 1, #lst1 do\n      if string.len(lst1[i])\
    \ < string.len(lst2[i]) then\n        return lst1\n      else\n        return\
    \ lst2\n      end\n    end\n  else\n    return nil\n  end\nend", "    local same\
    \ = 0\n    for i = 1, #lst2 do\n        if lst1[i] > lst2[i] then\n          \
    \  lst1[i], lst2[i] = lst2[i], lst1[i]\n            same = same + 1\n        end\n\
    \    end\n    if same == #lst1 then\n        return lst1\n    end\n    return\
    \ lst2\nend", "  -- Write your code in function below\nend", "  if #lst1 > #lst2\
    \ then return lst2 end\n  if #lst2 > #lst1 then return lst1 end\n  if #lst1 ==\
    \ #lst2 then return lst1 end\n  \n  local len1 = #lst1\n  local len2 = #lst2\n\
    \  local cnt1 = 0\n  local cnt2 = 0\n  \n  -- count char count\n  for i = 1, len1\
    \ do\n    cnt1 = cnt1 + lst1[i]:len()\n  end\n  for i = 1, len2 do\n    cnt2 =\
    \ cnt2 + lst2[i]:len()\n  end\n  \n  -- count string\n  for i = 1, len1 do\n \
    \   for j = 1, len2 do\n      if lst1[i] ~= lst2[j] then break end\n    end\n\
    \    \n    if i == len2 then return lst1 end\n  end\n  return lst1\nend", "  local\
    \ num_chars1 = #lst1\n  local num_chars2 = #lst2\n  if num_chars1 == num_chars2\
    \ then -- If both are same length, return lst1\n    return lst1\n  elseif num_chars1\
    \ < num_chars2 then -- If lst1 is less than lst2, return lst1\n    return lst1\n\
    \  else\n    -- if lst2 is less than lst1, then lst2 is largest, return lst1\n\
    \    return lst2\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "   if #lst1 ~= #lst2 then\n      return nil\n   end\n   local newlst1 = {}\n  \
    \ for i = 1, #lst1 do\n      newlst1[i] = lst1[i]\n   end\n   local newlst2 =\
    \ {}\n   for i = 1, #lst2 do\n      newlst2[i] = lst2[i]\n   end\n   local j =\
    \ 1\n   local k = 1\n   while j < #lst1 and k < #lst2 do\n      if lst1[j] < lst2[k]\
    \ then\n         newlst1[j] = lst1[j]\n      else\n         newlst1[j] = lst2[k]\n\
    \      end\n      j = j + 1\n      k = k + 1\n   end\n   if #lst1 == #lst2 then\n\
    \      return newlst1\n   else\n      return nil\n   end\nend", "  for _, v in\
    \ ipairs(lst1) do\n    for _, v2 in ipairs(lst2) do\n      if v > v2 then\n  \
    \      return v\n      end\n    end\n  end\n  return lst1\nend", "\tlocal count1,\
    \ count2 = 0 ,0 \n\tfor _, value in pairs(lst1) do\n\t\tcount1 = count1 + 1 \n\
    \tend\n\tfor _, value in pairs(lst2) do\n\t\tcount2 = count2 + 1 \n\tend\n\tif\
    \ count1 == count2 then\n\t\treturn lst1\n\telse\n\t\treturn lst1\n\tend\nend",
  "    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n    \
    \    for i=1, len1 do\n            if lst1[i] > lst2[i] then\n               \
    \ return lst1\n            else\n                return lst2\n            end\n\
    \        end\n    else\n        return lst1\n    end\nend", "  -- If lists are\
    \ equal then just return lst1 \n  if #lst1 == #lst2 then \n    return lst1 \n\
    \  end \n  -- If lists are not equal then return empty list \n  return []\nend",
  "    local chars = {}\n    local num_list1 = #lst1\n    local num_list2 = #lst2\n\
    \    local i = 0\n    local j = 0\n    while i < num_list1 and j < num_list2 do\n\
    \        local c1 = lst1[i]\n        local c2 = lst2[j]\n        table.insert(chars,\
    \ c1)\n        table.insert(chars, c2)\n        i = i + 1\n        j = j + 1\n\
    \    end\n    if i == num_list1 then\n        return lst1\n    elseif j == num_list2\
    \ then\n        return lst2\n    else\n        -- get the min length\n       \
    \ local min_length = math.min(#lst1, #lst2)\n        local total_length = 0\n\
    \        for i = 1, min_length do\n            table.insert(chars, lst1[i])\n\
    \            table.insert(chars, lst2[i])\n            total_length = total_length\
    \ + #lst1[i] + #lst2[i]\n        end\n        local length1 = #total_length\n\
    \        local length2 = #total_length\n        if length1 < length2 then\n  \
    \          table.insert(chars, lst1[min_length])\n        else\n            table.insert(chars,\
    \ lst2[min_length])\n        end\n        return chars\n    end\nend", "  -- If\
    \ both lists are empty\n  if not lst1 and not lst2 then\n    return nil\n  end",
  "    local ls = {}\n    for k, v in pairs(lst1) do\n        local i = nil\n    \
    \    for k2, v2 in pairs(lst2) do\n            i = i + 1\n            if k2 >\
    \ v then\n                break\n            end\n        end\n        if i ==\
    \ nil then\n            table.insert(ls, k)\n        end\n    end\n    return\
    \ ls\nend", "  assert(#lst1 == #lst2, 'Length of two lists must be the same.')\n\
    \  local result={}\n  for _, v in ipairs(lst1) do\n    for _, v2 in ipairs(lst2)\
    \ do\n      if v<v2 then\n        result=result..v\n      end\n    end\n  end\n\
    \  return result\nend", "    local length1 = 0\n    local length2 = 0\n    for\
    \ _, elem in pairs(lst1) do\n        length1 = length1 + 1\n        if length1\
    \ == #lst1 then break end\n    end\n    for _, elem in pairs(lst2) do\n      \
    \  length2 = length2 + 1\n        if length2 == #lst2 then break end\n    end\n\
    \    if length1 == length2 then\n        return lst1\n    else\n        return\
    \ nil\n    end\nend\n</cell>\n<code language=julia-1.1>", "   if #lst1 ~= #lst2\
    \ then\n      return lst1\n   end", "  if #lst1 == 0 or #lst2 == 0 then return\
    \ lst1 end\n  local num = 0\n  for _, str1 in ipairs(lst1) do\n    for _, str2\
    \ in ipairs(lst2) do\n      if str1 < str2 then\n        num = num + 1\n     \
    \   break\n      end\n    end\n  end\n  if num == #lst1 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend", "  -- base case\n  if #lst1 == 0 and #lst2\
    \ == 0 then return {}\n  -- if lists are empty\n  if #lst1 == 0 or #lst2 == 0\
    \ then return lst1\n  -- if same number of elements\n  if #lst1 == #lst2 then\
    \ \n    -- sort list\n    lst1 = table.sort(lst1)\n    lst2 = table.sort(lst2)\n\
    \    -- return list\n    return lst1\n  -- if lists have different number of elements\n\
    \  else\n    -- sort list\n    lst1 = table.sort(lst1)\n    lst2 = table.sort(lst2)\n\
    \    -- find difference\n    local ldiff = #lst1 - #lst2\n    -- build final list\n\
    \    local final = {}\n    -- traverse each character\n    for i=1, #lst1 do\n\
    \      -- check whether current char exists in each list\n      for j=1, #lst2\
    \ do\n        -- if current char is not found in list\n        if lst1[i] == lst2[j]\
    \ then\n          -- add character to the final list\n          final = table.insert(final,\
    \ lst1[i])\n          -- remove current char from list\n          lst2 = table.remove(lst2,\
    \ j)\n          -- count number of chars removed since last iteration\n      \
    \    local ldiff = ldiff - 1\n          -- break inner loop\n          break\n\
    \        end\n      end\n      -- break if difference is zero\n      if ldiff\
    \ == 0 then break end\n    end\n    -- return final list\n    return final\n \
    \ end\nend", "  local count = {}\n  for _, v in ipairs(lst1) do\n    count[v]\
    \ = count[v] or 0\n  end\n  for _, v in ipairs(lst2) do\n    count[v] = count[v]\
    \ or 0\n  end\n  for _, v in pairs(count) do\n    if count[v] == #lst1 and count[v]\
    \ <= #lst2 then return v end\n  end\n  return lst1\nend", "   if #lst1 == 0 and\
    \ #lst2 == 0 then return end\n   if #lst1 == 0 and #lst2 == 1 then return lst2[1]\
    \ end\n   if #lst1 == 1 and #lst2 == 0 then return lst1[1] end\n   if #lst1 ==\
    \ 1 and #lst2 == 1 then return lst2[1] < lst1[1] end\n   if #lst1 == 1 then return\
    \ lst1[1] < lst2[1] end\n   if #lst2 == 1 then return lst1[1] < lst2[1] end\n\
    \   if #lst1 > #lst2 then\n      local lst1 = lst1[1]\n      local lst2 = lst2[1]\n\
    \   else\n      local lst1 = lst1[2]\n      local lst2 = lst2[2]\n   end\n   local\
    \ len1 = #lst1\n   local len2 = #lst2\n   if len1 > len2 then len1, len2 = len2,\
    \ len1 end\n   local res = \"\"\n   for i = 1, #lst1 do\n      res = res + lst1[i]\n\
    \      if i < len2 then res = res + lst2[i] end\n   end\n   return res\nend",
  "  if #lst1 == 0 then return lst2 end\n  if #lst2 == 0 then return lst1 end\n  if\
    \ #lst1 ~= #lst2 then return lst1 end\n  for _,v in ipairs(lst1) do\n    local\
    \ found = false\n    for _,v2 in ipairs(lst2) do\n      if not found and string.find(v,\
    \ v2) then\n        found = true\n      end\n    end\n    if found then lst2 =\
    \ lst2:sub(1, #v) end\n  end\n  return lst1\nend", "    local len1 = #lst1\n \
    \   local len2 = #lst2\n    if len1 == len2 then\n        return lst1\n    end\n\
    \    local total = 0\n    local i = 1\n    while i < len1 do\n        total =\
    \ total + lst1[i]:len() \n        i = i + 2\n    end\n    local j = 1\n    while\
    \ j < len2 do\n        total = total + lst2[j]:len() \n        j = j + 2\n   \
    \ end\n    if total < len1 then\n        return lst1\n    end\n    return lst2\n\
    end", "    local length1 = 0\n    local length2 = 0\n    for _,v in ipairs(lst1)\
    \ do\n        length1 = length1 + 1\n    end\n    for _,v in ipairs(lst2) do\n\
    \        length2 = length2 + 1\n    end\n    if length1 == length2 then\n    \
    \    return lst1\n    else\n        return lst2\n    end\nend", "\tlocal size\
    \ = #lst1\n\tlocal max_size = #lst2\n\tlocal diff = (max_size + 1) - size\n\t\
    local total = 0\n\tfor i=1,max_size do\n\t\ttotal = total + lst1[i]\n\t\tif diff\
    \ == 0 then\n\t\t\treturn lst2\n\t\tend\n\tend\n\tfor i=1,diff do\n\t\tlocal temp1\
    \ = lst1[i]\n\t\tif temp1 == \"\" then\n\t\t\tlst1 = lst1:sub(1,i)\n\t\t\ttotal\
    \ = total + 1\n\t\telse\n\t\t\tlst1 = lst1:sub(1,i) + temp1 + lst1\n\t\t\ttotal\
    \ = total + 1\n\t\tend\n\tend\n\tfor i=1,size do\n\t\tlocal temp2 = lst2[i]\n\t\
    \tif temp2 == \"\" then\n\t\t\tlst2 = lst2:sub(1,i)\n\t\t\ttotal = total + 1\n\
    \t\telse\n\t\t\tlst2 = lst2:sub(1,i) + temp2 + lst2\n\t\t\ttotal = total + 1\n\
    \t\tend\n\tend\n\treturn lst2\nend\nreturn total_match", "  -- Check if the first\
    \ list is empty or if the second list is empty\n  if #lst1 == 0 then\n    return\
    \ lst2\n  elseif #lst2 == 0 then\n    return lst1\n  else\n    local total = 0\n\
    \    for _, x in ipairs(lst1) do\n      for _, y in ipairs(lst2) do\n        if\
    \ x <= y then\n          total = total + 1\n        end\n      end\n    end\n\
    \    return lst1 -- Return the first list if the number of chars in both lists\
    \ are same\n  end\nend", "    local n = 0\n    for _, i in ipairs(lst1) do\n \
    \       n = n + #i\n    end\n    for _, i in ipairs(lst2) do\n        n = n +\
    \ #i\n    end\n    if n == 0 then\n        return lst1\n    elseif n == 1 then\n\
    \        return lst2\n    else\n        return lst1\n    end\nend", "\t-- lst1\
    \ and lst2 must have same length\n\tassert(#lst1 == #lst2)\n\tlocal total = 0\n\
    \tfor _, v in pairs(lst1) do\n\t\ttotal = total + #v\n\tend\n\tfor _, v in pairs(lst2)\
    \ do\n\t\ttotal = total - #v\n\tend\n\tif total == 0 then\n\t\treturn lst1\n\t\
    else\n\t\treturn nil\n\tend\nend", "  for i=1,#lst1 do\n    for j=1,#lst2 do\n\
    \      if lst1[i]<lst2[j] then\n        return lst1\n      else\n        return\
    \ lst2\n      end\n    end\n  end\n  return lst1\nend", "    local len1 = #lst1\n\
    \    local len2 = #lst2\n    if len1 == len2 then\n        return lst1\n    end\n\
    \    local total_length = len1 + len2\n    local max_index = {}\n    for i = 1,\
    \ total_length do\n        max_index[i] = -1\n    end\n    local index1\n    local\
    \ index2\n    local index1_index\n    local index2_index\n    for i = 1, len1\
    \ do\n        index1 = i \n        index1_index = max_index[index1]\n        max_index[index1]\
    \ = i\n        for j = 1, len2 do\n            index2 = j\n            index2_index\
    \ = max_index[index2]\n            if index1 < index2 then\n                max_index[index2]\
    \ = index1_index\n            elseif index1 > index2 then\n                max_index[index1]\
    \ = index2_index\n            else\n                max_index[index1] = index2_index\n\
    \            end\n        end\n    end\n    local i = 0\n    local count = 0\n\
    \    for k, v in pairs(max_index) do\n        if v == -1 then\n            count\
    \ = count + 1\n        end\n        i = i + 1\n    end\n    if count == total_length\
    \ then\n        return lst1\n    end\n    local new_lst = lst1\n    for i = 1,\
    \ total_length - count do\n        new_lst[i + 1] = nil\n    end\n    return new_lst\n\
    end", "  local function get_len(str)\n    local len = 0\n    for _,v in ipairs(str)\
    \ do len = len + #v end\n    return len\n  end\n  local len1 = get_len(lst1)\n\
    \  local len2 = get_len(lst2)\n  if len1 == len2 then\n    return lst1\n  else\n\
    \    local sum = 0\n    for _,v in ipairs(lst1) do\n      sum = sum + #v\n   \
    \ end\n    local sum2 = 0\n    for _,v in ipairs(lst2) do\n      sum2 = sum2 +\
    \ #v\n    end\n    return lst1 if (sum == sum2) or (sum2 < sum) end\n  end\nend\n\
    total_match = function(lst1, lst2)\n  return total_match(lst1, lst2)\nend", " \
    \   local l1 = #lst1\n    local l2 = #lst2\n    local same = 1\n    for i = 1,\
    \ l2 do\n        if lst1[i] ~= lst2[i] then\n            local difference = lst1[i]\
    \ - lst2[i]\n            lst1[i] = difference\n            lst2[i] = difference\n\
    \            same = same + difference\n        end\n    end\n    if same == l1\
    \ then\n        return lst1\n    end\n    local difference = l1 - same\n    lst1\
    \ = lst1\n    lst2 = lst2\n    for i = 1, difference do\n        lst1:insert(difference)\n\
    \        lst2:insert(difference)\n    end\n    return lst1\nend\n</cell>\n<cell>",
  "  if not lst1 or not lst2 then\n    return nil\n  end\n  if #lst1 == #lst2 then\n\
    \    return lst1\n  end\n  local i = 1\n  local j = 1\n  local max_val = #lst1\n\
    \  local max_i = #lst1\n  local max_j = #lst2\n  local lst_len = #lst1 + #lst2\n\
    \  local result\n  while i <= lst_len and j <= max_j do\n    local cmp = string.lower(lst1[i])\
    \ == string.lower(lst2[j])\n    local cmp1 = lst1[i] ~= '#'\n    local cmp2 =\
    \ lst2[j] ~= '#'\n    if not cmp and not cmp1 and not cmp2 then\n      result\
    \ = lst1\n      break\n    end\n    if not cmp and not cmp1 then\n      result\
    \ = lst2\n      break\n    end\n    if not cmp and cmp1 then\n      result = lst1\n\
    \      break\n    end\n    if not cmp1 and cmp2 then\n      result = lst2\n  \
    \    break\n    end\n    if cmp and not cmp1 then\n      j = j + 1\n      continue\n\
    \    end\n    if cmp and not cmp2 then\n      i = i + 1\n      continue\n    end\n\
    \    if cmp and not cmp1 and cmp2 then\n      i = i + 1\n      j = j + 1\n   \
    \   continue\n    end\n    if cmp1 and cmp2 then\n      i = i + 1\n      j = j\
    \ + 1\n      continue\n    end\n    if cmp1 and not cmp2 then\n      i = i + 1\n\
    \      continue\n    end\n    if cmp2 and not cmp1 then\n      j = j + 1\n   \
    \   continue\n    end\n    if cmp1 and cmp2 then\n      i = i + 1\n      j = j\
    \ + 1\n      continue\n    end\n    if cmp1 and not cmp2 then\n      j = j + 1\n\
    \      continue\n    end\n    if cmp2 and not cmp1 then\n      i = i + 1\n   \
    \   continue\n    end\n    if cmp1 and cmp2 then\n      i = i + 1\n      j = j\
    \ + 1\n      continue\n    end\n    if cmp1 and not cmp2 then\n      i = i + 1\n\
    \      continue\n    end\n    if cmp2 and not cmp1 then\n      j = j + 1\n   \
    \   continue\n    end\n  end\n  return result\nend", "   if #lst1 == 0 and #lst2\
    \ == 0 then\n      return []\n   end\n   if #lst1 == 0 and #lst2 ~= 0 then\n \
    \     return lst2\n   end\n   if #lst1 == 0 and #lst2 ~= 0 then\n      return\
    \ lst1\n   end\n   if #lst1 == #lst2 then\n      return lst1\n   end", "    if\
    \ #lst1 ~= #lst2 then\n        return nil\n    end\n    for _, value in ipairs(lst1)\
    \ do\n        if lst1[#lst1] <= value then\n            return lst1\n        end\n\
    \    end\n    return lst2\nend\n    \n    ", "    if #lst1 > #lst2 then\n    \
    \    return lst1\n    else\n        return lst2\n    end\nend", "    local list1\
    \ = setmetatable({}, {__index=function(t,i)\n            rawset(t,i,\"\")\n  \
    \      end})\n    for _, v in ipairs(lst1) do\n        list1[v]=true\n    end\n\
    \    local list2 = setmetatable({}, {__index=function(t,i)\n            rawset(t,i,\"\
    \")\n        end})\n    for _, v in ipairs(lst2) do\n        list2[v]=true\n \
    \   end\n    local list3 = setmetatable({}, {__index=function(t,i)\n         \
    \   rawset(t,i,\"\")\n        end})\n    for _, v in ipairs(lst1) do\n       \
    \ if list2[v] ~= true then\n            list3[v]=list1[v]\n        end\n    end\n\
    \    local lst3 = {}\n    for k, v in pairs(list3) do\n        lst3[k] = v\n \
    \   end\n    return lst3\nend", "  -- Write your code here.\nend", "   local n1\
    \ = #lst1\n   local n2 = #lst2\n   if n1 == 0 then\n      return []\n   elseif\
    \ n2 == 0 then\n      return lst1\n   elseif n2 > n1 then\n      lst1, lst2 =\
    \ lst2, lst1\n   end\n   local len1, len2 = #lst1, #lst2\n   for i = 1, len1 do\n\
    \      if len1 > len2 then\n         lst1[i], lst2 = lst2, lst1[i]\n      end\n\
    \   end\n   return lst1\nend", "  local len1 = #lst1\n  local len2 = #lst2\n \
    \ \n  if len1 == len2 then\n    \n    if len1 > 0 then\n      local n = 0\n  \
    \    for i=1, len1 do\n        local c = lst1[i]\n        if c < lst2[i] then\n\
    \          n = n + 1\n        end\n      end\n      return lst1\n    end\n   \
    \ return lst2\n  else\n    \n    if len2 > 0 then\n      local n = 0\n      for\
    \ i=1, len2 do\n        local c = lst2[i]\n        if c < lst1[i] then\n     \
    \     n = n + 1\n        end\n      end\n      return lst2\n    end\n    return\
    \ lst1\n  end\nend", "  assert(#lst1 == #lst2)\n  for i = 1, #lst1 do\n    if\
    \ #lst1[i] > #lst2[i] then\n      return lst1\n    end\n  end\n  return lst2\n\
    end", "  local max_chars = #lst1\n  for _, item in pairs(lst2) do\n    max_chars\
    \ = math.max(max_chars, #item)\n  end\n  return lst1 -- If lists have the same\
    \ length, return the first list\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns whether a number is evenly divisible by another number. Test your\
    \ function using the numbers 7, 11, 13 and 15.", "    local n = 0\n    local l1\
    \ = #lst1\n    local l2 = #lst2\n    for i = 1, l1 do\n        n = n + lst1[i]\n\
    \    end\n    for i = 1, l2 do\n        n = n + lst2[i]\n    end\n    if n ==\
    \ l1 then\n        return lst1\n    else\n        return lst2\n    end\nend",
  "  local count = 0\n  for _, str1 in pairs(lst1) do\n    for _, str2 in pairs(lst2)\
    \ do\n      if str1 <= str2 then\n        count = count + 1\n      end\n    end\n\
    \  end", "  local l1 = #lst1\n  local l2 = #lst2\n  if l2 == 0 then\n    return\
    \ lst1\n  elseif l1 == l2 then\n    return lst1\n  else\n    local lst3 = {}\n\
    \    local i = 1\n    while i <= l1 do\n      local count = 0\n      for i2 =\
    \ 1, i do\n        count = count + #lst1[i2]\n      end\n      if count > #lst2[i]\
    \ then\n        lst3 = lst3..lst1[i]\n      end\n      i = i + 1\n    end\n  \
    \  return lst3\n  end\nend", "  if #lst1 < #lst2 then\n    for i = 1, #lst1 do\n\
    \      if lst1[i] > lst2[i] then\n        return lst1\n      else\n        return\
    \ lst2\n      end\n    end\n  else\n    for i = 1, #lst2 do\n      if lst1[i]\
    \ > lst2[i] then\n        return lst2\n      else\n        return lst1\n     \
    \ end\n    end\n  end\nend\n</cell>\n<cell>", "    local function total_match_aux(lst1,\
    \ lst2)\n        if #lst1 ~= #lst2 then\n            return nil\n        end\n\
    \        local i, j = 1, #lst1\n        local result = {}\n        while i < j\
    \ do\n            local i_in_lst, j_in_lst = true, true\n            while i <\
    \ j do\n                if lst1[i] == lst2[j] then\n                    i = i\
    \ + 1\n                    j_in_lst = true\n                elseif lst1[i] > lst2[j]\
    \ then\n                    i_in_lst = false\n                    break\n    \
    \            else\n                    i = i + 1\n                end\n      \
    \      end\n            if i_in_lst then\n                result[#result + 1]\
    \ = lst1[i]\n            end\n        end\n        return result\n    end\n  \
    \  return total_match_aux(lst1, lst2)\nend", "    local total = 0\n    for i =\
    \ 1, #lst2 do\n        if lst1[i] == lst2[i] then\n            total = total +\
    \ 1\n        end\n    end\n    if total >= #lst1 then -- If the two lists have\
    \ the same number of chars, return the first list.\n        return lst1\n    end\n\
    \    return lst1\nend\n</cell>\n<cell>", "    local size = #lst1 + 1\n    local\
    \ results = {}\n    local i = 1\n    while i < size and i <= #lst1 do\n      \
    \ table.insert(results, lst1[i])\n       i = i + 1\n    end\n    local j = 1\n\
    \    while j < size and j <= #lst2 do\n       table.insert(results, lst2[j])\n\
    \       j = j + 1\n    end\n    return results\nend", "    local count = 0\n \
    \   for i = 1, #lst1 do\n        if string.sub(lst1[i], 1, #lst2) == string.sub(lst2[i],\
    \ 1, #lst1) then\n            count = count + 1\n        end\n    end\n    return\
    \ lst1\nend", "  local total = 0\n  for _, v in ipairs(lst1) do\n    total = total\
    \ + #v\n  end\n  for _, v in ipairs(lst2) do\n    total = total + #v\n  end\n\
    \  return lst1 .. lst2[total:len() - total]\nend", "  local results = {}\n  local\
    \ l1 = #lst1\n  local l2 = #lst2\n  -- If the lists have same number of chars,\
    \ return the smaller list\n  if l1 == l2 then\n    local i = l1\n    while i <=\
    \ l2 do\n      results[i] = lst1[i]\n      i = i + 1\n    end\n  -- If the lists\
    \ have different number of chars, add up all the chars of smaller list\n  else\n\
    \    local count = 0\n    local i = 1\n    while i <= l1 do\n      if lst1[i]\
    \ < lst2[i] then\n        count = count + 1\n      end\n      i = i + 1\n    end\n\
    \    i = l1\n    while i <= l2 do\n      results[i] = count\n      i = i + 1\n\
    \    end\n  end\n  return results\nend", "   local total_length = 0\n   for _,\
    \ v in ipairs(lst1) do\n      total_length = total_length + v\n   end\n   for\
    \ _, v in ipairs(lst2) do\n      total_length = total_length + v\n   end\n   if\
    \ total_length == 0 then\n      return lst1\n   end\n   for _, v in ipairs(lst1)\
    \ do\n      if lst1[total_length + v] > lst2[v] then\n         total_length =\
    \ total_length + v\n      end\n   end\n   return lst1\nend", "  if #lst2 == 0\
    \ then\n    return lst1\n  elseif #lst1 == 0 then\n    return lst2\n  else\n \
    \   local total = 0\n    local count = 0\n    for _,i in pairs(lst1) do\n    \
    \  if i < lst2[1] then\n        total = total + 1\n      elseif i >= lst2[1] then\n\
    \        total = total + 1\n      else\n        count = count + 1\n      end\n\
    \    end\n    if count == #lst1 then\n      return lst1\n    else\n      return\
    \ lst2\n    end\n  end\nend\n</cell>\n<code language=julia-1.5>", "  if #lst1\
    \ == 0 and #lst2 == 0 then return [] end\n  if #lst1 == 0 and #lst2 ~= 0 then\
    \ return lst2 end\n  if #lst1 ~= 0 and #lst2 == 0 then return lst1 end\n  if #lst1\
    \ ~= 0 and #lst2 ~= 0 then \n    local total_len1 = #lst1\n    local total_len2\
    \ = #lst2\n    local flag = false\n    for i = 1, total_len1 do\n      local l1\
    \ = lst1[i]\n      for j = 1, total_len2 do\n        local l2 = lst2[j]\n    \
    \    if l1 <= l2 then\n          lst1 = lst1[i]\n          lst2 = lst2[j]\n  \
    \        flag = true\n        end\n      end\n    end\n    if flag == false then\
    \ return lst1 end\n  end\nend\n</cell>\n<text>\n4. Write a function that checks\
    \ if a string is a palindrome", "  local chars1 = #lst1\n  local chars2 = #lst2\n\
    \  if chars1 == chars2 then\n    return lst1\n  end\n  local len1 = #(lst1)\n\
    \  local len2 = #(lst2)\n  local lst3 = {}\n  for i = 1,len1 do\n    local count\
    \ = 0\n    for j = 0,len2 do\n      if lst1[i] == lst2[j] then\n        count\
    \ = count + 1\n      end\n    end\n    if count < len2 then\n      lst3[#lst3\
    \ + 1] = lst1[i]\n    end\n  end\n  return lst3\nend", "    local count = {}\n\
    \    local len = #lst1\n    for i=0,len do\n        count[i] = 0\n    end\n  \
    \  local len = #lst2\n    for i=0,len do\n        count[#count+1] = count[#count]\
    \ + 1\n    end\n    local len = #count\n    if len == 1 then\n        return lst1\n\
    \    elseif len == 0 then\n        return lst2\n    elseif len == 2 then\n   \
    \     if count[#count] < #lst1 then\n            return lst1\n        else\n \
    \           return lst2\n        end\n    else\n        for i=1,len do\n     \
    \       if count[i] < #lst1 then\n                count[#count+1] = count[i]\n\
    \            else\n                count[i] = count[i]\n            end\n    \
    \    end\n        for i=0,len do\n            if count[i] < #lst2 then\n     \
    \           count[#count+1] = count[i]\n            else\n                count[i]\
    \ = count[i]\n            end\n        end\n        for i=1,len do\n         \
    \   count[i] = count[i] + count[i-1]\n        end\n        local ans = {}\n  \
    \      for i=0,len do\n            table.insert(ans, lst1[count[i]])\n       \
    \ end\n        return ans\n    end\nend", "  local i=1\n  local j=1\n  while i<=#lst1\
    \ and j<=#lst2 do\n    if lst1[i]<lst2[j] then\n      lst1 = lst1[i..j]\n    \
    \  i = i + 1\n    else\n      lst2 = lst2[j..i]\n      j = j + 1\n    end\n  end\n\
    \  return lst1\nend", "  local len1 = #lst1\n  local len2 = #lst2\n  \n  if len1\
    \ == 0 and len2 == 0 then\n    return lst1\n  end\n  \n  if len1 == 0 or len2\
    \ == 0 then\n    return lst2\n  end\n  \n  if len1 > len2 then\n    lst1, lst2\
    \ = lst2, lst1\n  end\n  \n  local i = 1\n  \n  while i <= len1 do\n    if lst1[i]\
    \ > lst2[i] then\n      lst1, lst2 = lst2, lst1\n    else\n      i = i + 1\n \
    \   end\n  end\n  \n  return lst2\nend", "  if #lst1 == #lst2 then\n    return\
    \ lst1\n  else\n    if #lst2 < #lst1 then\n      return lst1\n    else\n     \
    \ local i\n      for i = #lst2, 1, -1 do\n        local s = lst1[i]\n        lst1[i]\
    \ = lst1[i+1]\n        lst1[i+1] = s\n      end\n      return lst1\n    end\n\
    \  end\nend", "   if not lst1 then return lst2 end\n   if not lst2 then return\
    \ lst1 end\n   local max\n   if #lst1 > #lst2 then max = #lst1 else max = #lst2\
    \ end\n   local i = 1\n   local j = 1\n   local lst3 = {}\n   while i <= max do\n\
    \      if lst1[i] > lst2[j] then\n         lst3 = lst3 .. lst1[i]\n         i\
    \ = i + 1\n      else\n         lst3 = lst3 .. lst2[j]\n         j = j + 1\n \
    \     end\n   end\n   return lst3\nend", "    if not lst1 then\n        return\
    \ lst2\n    end\n    if not lst2 then\n        return lst1\n    end\n    if not\
    \ #lst1 or not #lst2 then\n        return nil\n    end\n    local num1, num2 =\
    \ 0, 0\n    for i = 1, #lst1 do\n        if lst1[i] < lst2[i] then\n         \
    \   num1 = num1 + #lst1[i]\n        else\n            num2 = num2 + #lst2[i]\n\
    \        end\n    end\n    if num1 == num2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend", "    local i = 0\n    local max = 0\n   \
    \ \n    while i < #lst1 and i < #lst2 do\n        if lst1[i] == lst2[i] then\n\
    \            i = i + 1\n        else\n            max = max + #lst1[i] + #lst2[i]\n\
    \            i = i + 1\n        end\n    end\n    \n    local j = 0\n    \n  \
    \  while j <= #lst1 and j < #lst2 do\n        if lst1[j] == lst2[j] then\n   \
    \         j = j + 1\n        else\n            max = max + #lst1[j] + #lst2[j]\n\
    \            j = j + 1\n        end\n    end\n    \n    if i == #lst1 then\n \
    \       max = max + #lst1\n    elseif j == #lst2 then\n        max = max + #lst2\n\
    \    end\n    \n    return lst1\nend", "\tif #lst1 == 0 then\n\t\treturn lst2\n\
    \tend\n\tif #lst2 == 0 then\n\t\treturn lst1\n\tend\n\tif #lst1 > #lst2 then\n\
    \t\treturn lst1\n\tend\n\tfor i = 1, #lst1 do\n\t\tif lst1[i] > lst2[i] then\n\
    \t\t\treturn lst1\n\t\tend\n\tend\n\treturn lst2\nend", "\tif #lst1 == 0 and #lst2\
    \ == 0 then return end\n\tif #lst1 > 0 and #lst2 == 0 then return lst1 end\n\t\
    if #lst1 == 0 and #lst2 > 0 then return lst2 end\n\tif #lst1 > 0 and #lst2 > 0\
    \ then\n\t\tlocal len1 = #lst1\n\t\tlocal len2 = #lst2\n\t\tif len1 == len2 then\n\
    \t\t\tfor i = 1, #lst1, 1 do\n\t\t\t\tlocal i2 = lst1[i]\n\t\t\t\tlocal j2 = lst2[i]\n\
    \t\t\t\tif i2 > j2 then return lst1 end\n\t\t\t\tif i2 < j2 then return lst2 end\n\
    \t\t\tend\n\t\telse\n\t\t\tfor i = 1, #lst1, 1 do\n\t\t\t\tlocal i2 = lst1[i]\n\
    \t\t\t\tlocal j2 = lst2[i]\n\t\t\t\tif i2 < j2 then return lst1 end\n\t\t\t\t\
    if i2 > j2 then return lst2 end\n\t\t\tend\n\t\tend\n\tend\nend", "    local count\
    \ = 0\n    for i=1,#lst1 do\n        if lst1[i] > lst2[i] then\n            count\
    \ = count+1\n        else\n            count = count\n        end\n    end\n \
    \   if count < #lst1 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend", "    local cnt1 = 0\n    for _,v in ipairs(lst1) do\n        cnt1\
    \ = cnt1 + 1\n    end\n    local cnt2 = 0\n    for _,v in ipairs(lst2) do\n  \
    \      cnt2 = cnt2 + 1\n    end\n    \n    if cnt1 == cnt2 then\n        return\
    \ lst1\n    end\n    return lst2\nend", "  if #lst1 == 0 and #lst2 == 0 then return\
    \ {} end\n  if #lst1 == 0 and #lst2 > 0 then return lst2 end\n  if #lst1 == 0\
    \ and #lst2 < 0 then return lst1 end\n  if #lst1 > 0 and #lst2 == 0 then return\
    \ lst1 end\n  if #lst1 > 0 and #lst2 > 0 then return setmetatable({}, { __len=function()\
    \ return #lst1 + #lst2 end}) end\n  local t = {}\n  for i = 1, #lst1 do\n    local\
    \ v = lst1[i]\n    local index = false\n    for j = 1, #lst2 do\n      if v >\
    \ lst2[j] then\n        index = true\n        break\n      end\n    end\n    if\
    \ index == false then \n      t[#t + 1] = v\n    end\n  end\n  return t\nend",
  "    local num1 = #lst1\n    local num2 = #lst2\n    if num1 == num2 then\n    \
    \    return lst1\n    end\n    if num1 < num2 then\n        local i = 0\n    \
    \    while i < num1 do\n            lst1 = lst1[i]\n        end\n    end\n   \
    \ if num1 > num2 then\n        local i = 0\n        while i < num2 do\n      \
    \      lst2 = lst2[i]\n        end\n    end\n    local cnt = 0\n    for i=1,#lst1\
    \ do\n        if lst1[i] < lst2[i] then\n            cnt = cnt + 1\n        end\n\
    \    end\n    if cnt > num1 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend", "  \n  local len1, len2 = #lst1, #lst2\n  local result1\
    \ = lst1\n  local result2 = lst2\n  \n  if len1 == 0 then\n    return result1\n\
    \  end\n  \n  if len2 == 0 then\n    return result2\n  end\n  \n  if len1 == len2\
    \ then\n    return result1\n  end\n  \n  for i = 0, len1 do\n    for j = 0, len2\
    \ do\n      local char1 = lst1[i]\n      local char2 = lst2[j]\n      \n     \
    \ if char1 == char2 then\n        -- skip matching chars\n      else\n       \
    \ -- skip the rest of chars\n        if i > 1 then\n          i = i - 1\n    \
    \    else\n          i = len1 - 1\n        end\n        if j > 1 then\n      \
    \    j = j - 1\n        else\n          j = len2 - 1\n        end\n      end\n\
    \    end\n    \n    if i > 1 then\n      i = i - 1\n    else\n      i = len1 -\
    \ 1\n    end\n    if j > 1 then\n      j = j - 1\n    else\n      j = len2 - 1\n\
    \    end\n  end\n  \n  if len1 > len2 then\n    return result2\n  else\n    return\
    \ result1\n  end\nend", "    if not lst1 then \n        lst1 = []\n    end\n \
    \   if not lst2 then \n        lst2 = []\n    end\n    local count = 0\n    for\
    \ _ in lst1 do\n        for _ in lst2 do\n            count = count + 1\n    \
    \    end\n    end\n    if count == 0 then return lst1 end\n    return lst1\nend",
  "   if #lst1 == 0 then\n      return lst2\n   elseif #lst2 == 0 then\n      return\
    \ lst1\n   end\n   if #lst1 < #lst2 then\n      return lst1\n   else\n      return\
    \ lst2\n   end\nend", "\tlocal length = 0\n\tfor i=1,#lst1 do\n\t\tlength = length\
    \ + lst1[i]:len()\n\tend\n\tfor i=1,#lst2 do\n\t\tlength = length + lst2[i]:len()\n\
    \tend\n\tif length == #lst1 then\n\t\treturn lst1\n\telseif length == #lst2 then\n\
    \t\treturn lst2\n\tend\n\t-- lst1's length is not less than lst2's length\n\t\
    local min_length = lst1[#lst1]\n\tlocal lst1_len = min_length\n\tlocal lst2_len\
    \ = lst2[#lst2]\n\tlocal max_len = lst2[#lst2]\n\tfor i=1,#lst2 do\n\t\tlst1_len\
    \ = lst1_len + lst2[i]:len()\n\tend\n\t-- loop until one of the lists is of size\
    \ 1 and get the length of it\n\twhile lst1_len == 1 and lst2_len == 1 do\n\t\t\
    lst1_len = lst1[#lst1]\n\tend\n\t-- if the lengths of both lists are equal then\
    \ return it\n\tif lst1_len == lst2_len then\n\t\treturn lst1\n\tend\n\t-- If they\
    \ are of different lengths then go through the strings and find the\n\t-- minimum\
    \ length from one and return the strings that have the minimum length\n\tlocal\
    \ min_len = min_length\n\tlocal new_lst1 = {}\n\tlocal new_lst2 = {}\n\tfor i=1,#lst1\
    \ do\n\t\tlocal tmp = {}\n\t\tlocal tmp_len = lst1[i]:len()\n\t\tif tmp[tmp_len]\
    \ == nil then\n\t\t\ttmp[tmp_len] = lst1[i]\n\t\tend\n\t\tif tmp_len < min_len\
    \ then\n\t\t\tmin_len = tmp_len\n\t\t\tnew_lst1 = tmp\n\t\telse\n\t\t\tif lst2[i]\
    \ == nil then\n\t\t\t\tlst2[i] = lst1[i]\n\t\t\tend\n\t\t\tnew_lst2[#new_lst2\
    \ + 1] = lst2[i]\n\t\tend\n\tend\n\tnew_lst2[#new_lst2 + 1] = lst2[#lst2]\n\t\
    for i=1,#lst1 do\n\t\tif lst1[i] == nil then\n\t\t\tlst1[i] = new_lst1[i]\n\t\t\
    end\n\tend\n\tfor i=1,#lst2 do\n\t\tif lst2[i] == nil then\n\t\t\tlst2[i] = new_lst2[i]\n\
    \t\tend\n\tend\n\treturn total_match(lst1, lst2)\nend", "    local count = 0\n\
    \    for i=1,#lst1 do\n        if #lst1[i] > #lst2[i] then\n            count\
    \ = count + #lst1[i]\n        end\n    end\n    if count == #lst1 then\n     \
    \   return lst1\n    else\n        return lst2\n    end\nend\nprint(total_match([\"\
    hi\",\"admin\"], [\"hI\",\"Hi\"]))\nprint(total_match([\"hi\",\"admin\"], [\"\
    hi\",\"hi\",\"admin\",\"project\"]))\nprint(total_match([\"hi\",\"admin\"], [\"\
    hI\",\"hi\",\"hi\"]))\nprint(total_match([\"4\"], [\"1\",\"2\",\"3\",\"4\",\"\
    5\"]))\nprint(total_match([\"4\"], [\"4\",\"1\",\"2\",\"3\",\"4\"]))\nprint(total_match([\"\
    4\"], [\"4\",\"4\",\"1\",\"2\",\"3\"]))\nprint(total_match([\"4\"], [\"4\",\"\
    4\",\"4\",\"1\",\"2\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\"\
    ,\"1\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"\
    4\"], [\"4\",\"4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"\
    4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\"\
    ,\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"\
    4\"], [\"4\",\"4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"\
    4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\"\
    ,\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"\
    4\"], [\"4\",\"4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"\
    4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\"\
    ,\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"\
    4\"], [\"4\",\"4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"\
    4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\"\
    ,\"4\"]))\nprint(total_match([\"4\"], [\"4\",\"4\",\"4\",\"4\",\"4\"]))\nprint(total_match([\"\
    4\"], [\"4", "    local length1 = lst1:len()\n    local length2 = lst2:len()\n\
    \    \n    if length1 == length2 then\n        return lst1\n    elseif length1\
    \ > length2 then\n        local temp = lst1\n        lst1 = lst2\n        lst2\
    \ = temp\n    end\n    \n    local max_len = length1\n    local result = {lst1[1]}\n\
    \    for i = 2, max_len  do\n        local str1 = lst1[i]\n        local str2\
    \ = lst2[i]\n        if str1 == str2 then\n            result.insert(str1)\n \
    \       else\n            break\n        end\n    end\n    \n    return result\n\
    end", "  local i, j, count\n  for i = 1, #lst1 do\n    count = 0\n    local len1\
    \ = lst1[i]\n    for j = 1, #lst2 do\n      local len2 = lst2[j]\n      if len1\
    \ < len2 then\n        break\n      else\n        count = count + 1\n      end\n\
    \    end\n    if count == #lst1 then\n      return lst1\n    end\n  end\nend",
  "  for i = 1, #lst1, 1 do\n    for j = 1, #lst2, 1 do\n      if lst1[i] > lst2[j]\
    \ then\n        lst2, lst1 = lst1, lst2\n      end\n    end\n  end\n  return lst1\n\
    end\n</code>\n<|/ a |>\n<| c |>\nWhile this does work it is way too slow for my\
    \ purposes.\n<|/ c |>\n<| c |>\nCan you share your requirements with us?\n<|/\
    \ c |>\n<| a tags=lua,lua-table |>\n<code>", "  local same = #lst1 == #lst2\n\
    \  return same and lst1 or lst2\nend", "  local total_len = 0\n  for index, string\
    \ in ipairs(lst1) do\n    total_len = total_len + #string\n  end\n  for index,\
    \ string in ipairs(lst2) do\n    total_len = total_len + #string\n  end\n  if\
    \ total_len == 0 then\n    return nil\n  end\n  if total_len > #lst1 then\n  \
    \  return lst1\n  elseif total_len < #lst2 then\n    return lst2\n  else\n   \
    \ local index = 0\n    local new_lst = lst1\n    for index, string in ipairs(lst1)\
    \ do\n      if index > #lst2 then\n        return new_lst\n      else\n      \
    \  if string ~= lst2[index] then\n          break\n        end\n      end\n  \
    \  end\n    return new_lst\n  end\nend", "  assert(#lst1 == #lst2)\n  for i =\
    \ 1,#lst1 do\n    local temp = lst1[i]\n    local count = #temp\n    if count\
    \ > #lst2 then return lst1 end\n    for j = 1,#lst2 do\n      if temp == lst2[j]\
    \ then\n        count = count - 1\n      end\n    end\n    if count == 0 then\
    \ return lst1 end\n  end\n  return lst2\nend", "  local lst1Size = #lst1\n  local\
    \ lst2Size = #lst2\n  local output = {}\n  local i = 0\n  \n  for i = 1, lst1Size\
    \ do\n    local charCount = #lst1[i]\n    \n    for j = 1, lst2Size do\n     \
    \ if #lst1[i] == #lst2[j] then\n        if charCount > #lst2[j] then\n       \
    \   table.insert(output, lst2[j])\n        end\n      end\n    end\n  end\n  \n\
    \  if #lst1 == #lst2 then\n    return output\n  end\n  \n  return nil\nend", " \
    \  -- remove duplicates and sort\n   lst1 = table.sort(lst1)\n   lst2 = table.sort(lst2)\n\
    \   -- get length\n   local len1 = #lst1\n   local len2 = #lst2\n   -- set default\
    \ return variable\n   local return_lst = nil\n   if len1 == len2 then\n      return_lst\
    \ = lst1\n   else\n      -- count the number of common chars\n      local char_common\
    \ = setmetatable({\n         -- count the number of occurences of chars\n    \
    \     num_common = 0,\n         -- count the length of each char\n         len_common\
    \ = {}\n      }, {})\n      for i = 1, len1 do\n         for j = 1, len2 do\n\
    \            if lst1[i] == lst2[j] then\n               -- increment chars common\
    \ to both lists\n               char_common.num_common = char_common.num_common\
    \ + 1\n               -- increment length of common chars\n               table.insert(char_common.len_common,\
    \ #lst1[i])\n            end\n         end\n      end\n      -- if number of common\
    \ chars is the same in both lists, return the first list\n      -- if number of\
    \ common chars is the same in both lists, return the first list\n      -- else\
    \ return the first list that has less chars\n      if char_common.num_common ==\
    \ len1 then\n         return_lst = lst1\n      elseif char_common.num_common ==\
    \ len2 then\n         return_lst = lst2\n      else\n         -- get least common\
    \ length\n         local least_common_len = #lst1\n         -- loop through lst2\
    \ and find its index with least common length\n         for i = 1, len2 do\n \
    \           local new_len = char_common.len_common[i - 1]\n            if new_len\
    \ < least_common_len then\n               least_common_len = new_len\n       \
    \     end\n         end\n         -- remove least common chars from lst2\n   \
    \      for i = 1, least_common_len do\n            table.insert(lst2, nil)\n \
    \        end\n         -- update return_lst with lst2\n         return_lst = lst2\n\
    \      end\n   end\n   return return_lst\nend", "\tassert(type(lst1) == 'table'\
    \ and type(lst2) == 'table')\n\tassert(#lst1 == #lst2)\n\tlocal i = 1\n\tlocal\
    \ len1 = #lst1\n\tlocal len2 = #lst2\n\twhile i <= len1 do\n\t\twhile i <= len1\
    \ and i < len2 do\n\t\t\tlocal count1 = lst1[i]\n\t\t\tlocal count2 = lst2[i]\n\
    \t\t\ti = i + 1\n\t\t\tif count1 > count2 then\n\t\t\t\tlst1[i] = count2 - count1\n\
    \t\t\t\tlst2[i] = 0\n\t\t\telseif count1 < count2 then\n\t\t\t\tlst1[i] = 0\n\t\
    \t\t\tlst2[i] = count2 - count1\n\t\t\tend\n\t\tend\n\t\twhile i <= len2 do\n\t\
    \t\tif lst1[i] > 0 then\n\t\t\t\tlst1[i] = lst1[i] - 1\n\t\t\t\tlst2[i] = 0\n\t\
    \t\tend\n\t\t\ti = i + 1\n\t\tend\n\tend\n\tif #lst1 > #lst2 then\n\t\tfor i =\
    \ #lst1, 1, -1 do\n\t\t\tif lst1[i] > 0 then\n\t\t\t\tlst1[i] = 0\n\t\t\t\tlst2[i]\
    \ = lst2[i] - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn lst2\nend", "   -- write\
    \ code here\n   return lst1 -- your code\nend", "    local l1, l2 = unpack(lst1)\n\
    \    local l3, l4 = unpack(lst2)\n    local count = #(l1):len() + #(l2):len()\
    \ + #(l3):len() + #(l4):len()\n    if count == 0 then\n        return lst1\n \
    \   end\n    if count == #(l1) then\n        return lst2\n    end\n    if count\
    \ == #(l2) then\n        return lst1\n    end\n    if count == #(l3) then\n  \
    \      return lst2\n    end\n    if count == #(l4) then\n        return lst1\n\
    \    end\n    return lst1\nend", "   for _, item in pairs(lst1) do\n      if item\
    \ ~= lst2[1] then\n         if #lst1 < #lst2 then\n            return lst1\n \
    \        else\n            return lst2\n         end\n      else\n         if\
    \ #lst1 < #lst2 then\n            return lst1\n         else\n            return\
    \ lst2\n         end\n      end\n   end\nend\ntotal_match([], []) \u279E []\n\
    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\ntotal_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\ntotal_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\ntotal_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']", "    if lst1 and lst2 then\n     \
    \   if #lst1 <= #lst2 then\n            for i = 1, #lst1 do\n                if\
    \ #lst1[i] < #lst2[i] then\n                    lst1 = lst1[i]\n             \
    \   else\n                    lst2 = lst2[i]\n                end\n          \
    \  end\n            return lst1\n        else\n            for i = 1, #lst2 do\n\
    \                if #lst2[i] < #lst1[i] then\n                    lst2 = lst2[i]\n\
    \                else\n                    lst1 = lst1[i]\n                end\n\
    \            end\n            return lst2\n        end\n    else\n        lst1\
    \ = lst1 or []\n        lst2 = lst2 or []\n        return lst1 and lst2 and #lst1\
    \ <= #lst2 and lst1 or lst2\n    end\nend", "  local function is_sub_str_lst(lst)\n\
    \    local result = true\n    for _, str in ipairs(lst) do\n      if str ~= \"\
    \" then\n        result = result and string.find(lst, str, 1, true) ~= nil\n \
    \     end\n    end\n    return result\n  end\n  local is_sub_str1 = is_sub_str_lst(lst1)\n\
    \  local is_sub_str2 = is_sub_str_lst(lst2)\n  if is_sub_str1 ~= is_sub_str2 then\n\
    \    return lst1\n  elseif is_sub_str1 then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend", "    local count = 0\n    for _, v in ipairs(lst1) do\n \
    \       count = count + v\n    end\n    for _, v in ipairs(lst2) do\n        count\
    \ = count - v\n        if count == 0 then return lst1 end\n    end\nend\nprint(total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) == ['hI', 'Hi'])\nprint(total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin'])\nprint(total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi'])\nprint(total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) == ['4'])", "  local max_len = #lst2\n  if #lst1\
    \ == 0 then\n    return lst2\n  elseif #lst2 == 0 then\n    return lst1\n  else\n\
    \    max_len = max_len > #lst1 and max_len or #lst1\n  end\n  \n  local lst3 =\
    \ {}\n  for i=1,max_len do\n    local n = 0\n    for j=1,#lst1 do\n      if lst1[j]\
    \ == lst2[i] then\n        n = n + 1\n      end\n    end\n    lst3[i] = n\n  end\n\
    \  \n  -- if all the elements are less than the other list, then return the first\
    \ list.\n  if #lst3 == max_len then\n    return lst1\n  else\n    -- if the two\
    \ lists have the same number of chars, return the second list.\n    if #lst3 ==\
    \ #lst2 then\n      return lst2\n    end\n  end\nend", "  local total_chars =\
    \ 0\n  for i = 1, #lst1 do\n    total_chars = total_chars + #lst1[i]\n  end\n\
    \  for i = 1, #lst2 do\n    total_chars = total_chars + #lst2[i]\n  end\n  if\
    \ total_chars == #lst1[1] then\n    return lst1\n  else\n    return lst2\n  end\n\
    end", "  local length1 = #lst1\n  local length2 = #lst2\n  if length1 > length2\
    \ then\n    return total_match(lst2, lst1)\n  elseif length1 == length2 then\n\
    \    if length1 == 0 then\n      return []\n    else\n      return lst1\n    end\n\
    \  else\n    return lst1\n  end\nend", "    local len1 = #lst1\n    local len2\
    \ = #lst2\n    local total = 0\n    for i = 1, len1 do\n        for j = 1, len2\
    \ do\n            total = total + string.len(lst1[i]) \n            if string.sub(lst1[i],\
    \ j, j) ~= string.sub(lst2[i], j, j) then \n                return lst1\n    \
    \        end\n        end\n    end\n    if len1 ~= len2 then\n        return lst1\n\
    \    end\n    return total\nend", "  assert(#lst1 == #lst2, 'Lists should have\
    \ same length')\n  return lst1\nend", "    if not lst1 then\n        return lst2\n\
    \    end\n    if not lst2 then\n        return lst1\n    end", "    if not lst1\
    \ then return lst2 end\n    if not lst2 then return lst1 end\n    \n    local\
    \ i1 = 0\n    local i2 = 0\n    local len1 = #lst1\n    local len2 = #lst2\n \
    \   \n    local res = nil\n    while i1 < len1 and i2 < len2 do\n        if lst1[i1]\
    \ < lst2[i2] then\n            lst1 = lst1[i1+1..-1]\n            i1 = i1 + 1\n\
    \        else\n            lst2 = lst2[i2+1..-1]\n            i2 = i2 + 1\n  \
    \      end\n    end\n    \n    if len1 == len2 then\n        if i1 > 0 then res\
    \ = lst1[i1-1] end\n        return res\n    end\n    \n    return nil\nend\n</cell>\n\
    <code language=julia-1.5>", "  -- Write your code here\n  if #lst1 == #lst2 then\n\
    \    for i, v in ipairs(lst1) do\n      if v < lst2[i] then\n        lst2 = lst2[:i]+lst2[i+1:]\n\
    \        break\n      else\n        lst2 = lst2[:i]+[v]+lst2[i+1:]\n      end\n\
    \    end\n  end\n  return lst2\nend", "  if #lst1 == 0 then\n    return lst2\n\
    \  elseif #lst2 == 0 then\n    return lst1\n  elseif #lst1 == #lst2 then\n   \
    \ return lst1\n  else\n    local function match_count(lst1, lst2)\n      if #lst1\
    \ == #lst2 then\n        return lst1\n      else\n        local len_l1, len_l2\
    \ = #lst1, #lst2\n        local count_l1 = 1\n        local count_l2 = 0\n   \
    \     local i\n        for i = 1, len_l1 do\n          if lst1[i] ~= lst2[i] then\n\
    \            len_l2 = len_l2\n            count_l1 = count_l1 + 1\n          else\n\
    \            len_l1 = len_l1\n            count_l2 = count_l2 + 1\n          end\n\
    \        end\n        return count_l1, len_l2\n      end\n    end\n    local len_l1,\
    \ len_l2 = #lst1, #lst2\n    local count_l1, count_l2 = match_count(lst1, lst2)\n\
    \    if count_l1 == count_l2 then\n      return lst1\n    else\n      return total_match(lst1[1:count_l1],\
    \ lst2[count_l1:count_l2])\n    end\n  end\nend", "    local num_1, num_2 = lst1:len(),\
    \ lst2:len()\n    if num_1 == num_2 then\n        return lst1\n    end\n    \n\
    \    if num_1 <= num_2 then\n        lst2, lst1 = lst1, lst2\n    end\n    \n\
    \    local output = {}\n    \n    for i = 1, num_1 do\n        local j = 1\n \
    \       while j <= num_2 do\n            \n            if lst1:sub(i - 1, j) ==\
    \ lst2:sub(i - 1, j) then\n                output[#output + 1] = lst1:sub(i -\
    \ 1, j)\n            end\n            \n            j = j + 1\n        end\n \
    \   end\n    \n    return output\nend", "   if #lst1 == 0 and #lst2 == 0 then\
    \ return nil end\n   if #lst1 > 0 and #lst2 > 0 and #lst1[1] > #lst2[1] then return\
    \ lst1 end\n   if #lst1 > 0 and #lst2 > 0 and #lst1[1] < #lst2[1] then return\
    \ lst2 end\n   return lst1\nend", "  if #lst1 < #lst2 then return lst1 end\n \
    \ if #lst2 < #lst1 then return lst2 end\n  \n  local new_lst1 = {}\n  local new_lst2\
    \ = {}\n  \n  for i=1,#lst1 do\n    local index = false\n    for j=1,#lst2 do\n\
    \      if lst1[i] < lst2[j] then\n        index = true\n        break\n      end\n\
    \    end\n    if index then\n      table.insert(new_lst1, lst1[i])\n    else\n\
    \      table.insert(new_lst2, lst2[i])\n    end\n  end\n  \n  if #new_lst1 ==\
    \ #new_lst2 then return new_lst1 end\n  return new_lst2\nend", "   local count\n\
    \   local flag = true\n   for i=1,#lst1,1 do\n      if lst1[i] == lst2[i] then\n\
    \         count = count+1\n      elseif lst1[i] > lst2[i] then\n         flag\
    \ = False\n         break\n      else\n         count = count\n      end\n   end\n\
    \   if flag == true then\n      return lst1\n   else\n      return lst2\n   end\n\
    end", "  local function check_chars(list1, list2)\n    local num_chars = 0\n \
    \   for i = 1, #list1 do\n      num_chars = num_chars + list1[i]\n    end\n  \
    \  for i = 1, #list2 do\n      num_chars = num_chars + list2[i]\n    end\n   \
    \ return num_chars\n  end\n  if #lst1 == #lst2 then\n    return lst1\n  elseif\
    \ #lst1 > #lst2 then\n    return lst2\n  else\n    return lst1\n  end\nend\nprint(total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))", "    local function count_chars(str)\n\
    \        local str_dict = {}\n        \n        for str in str:gmatch(\"%w+\"\
    ) do\n            table.insert(str_dict, str)\n        end\n        \n       \
    \ return table.concat(table.sort(str_dict))\n    end\n    \n    local function\
    \ total_match_helper(lst1, lst2)\n        local count_str1 = count_chars(lst1)\n\
    \        local count_str2 = count_chars(lst2)\n        \n        if count_str1\
    \ == count_str2 then\n            table.insert(lst1, lst2)\n        elseif count_str1\
    \ > count_str2 then\n            return total_match_helper(lst2, lst1)\n     \
    \   else\n            return total_match_helper(lst1, lst2)\n        end\n   \
    \ end\n    \n    return total_match_helper(lst1, lst2)\nend", "   if #lst1 ~=\
    \ #lst2 then\n      return lst1\n   else\n      return lst1\n   end\nend", " \
    \   local count_lst1 = 1\n    local count_lst2 = 1\n    local lst_temp = {}\n\
    \    for val in lst1 do\n        count_lst1 = count_lst1 + 1\n    end\n    for\
    \ val in lst2 do\n        count_lst2 = count_lst2 + 1\n    end\n    if count_lst1\
    \ == count_lst2 then\n        for val in lst1 do\n            lst_temp[lst_temp#lst_temp+1]\
    \ = val\n        end\n        for val in lst2 do\n            lst_temp[lst_temp#lst_temp+1]\
    \ = val\n        end\n        return lst_temp\n    else\n        return nil\n\
    \    end\nend", "    local len1, len2 = #lst1, #lst2\n    for i = 1, len1 do\n\
    \        if len2 > len1 then return lst1 end\n        if len1 == len2 then\n \
    \           lst2, lst1 = lst1, lst2\n            len1, len2 = #lst1, #lst2\n \
    \       end\n    end\n    return lst1\nend", "  local len1, len2 = #lst1, #lst2\n\
    \  if len1 == len2 then\n    return lst1\n  elseif len1 == 0 or len2 == 0 then\n\
    \    return nil\n  end\n  \n  local index1, index2 = 1, 1\n  local results = {}\n\
    \  \n  while index1 <= len1 do\n    local char1 = lst1[index1]\n    local found\
    \ = false\n    \n    while index2 < len2 do\n      local char2 = lst2[index2]\n\
    \      if char1 < char2 then\n        found = true\n        break\n      end\n\
    \      index2 = index2 + 1\n    end\n    if not found then\n      table.insert(results,\
    \ char1)\n    end\n    index1 = index1 + 1\n  end\n  \n  return results\nend",
  "  assert(#lst1 ~= 0, \"lst1 list length is 0\")\n  assert(#lst2 ~= 0, \"lst2 list\
    \ length is 0\")\n  \n  local num_matched = 0\n  \n  for i = 1,#lst1 do\n    local\
    \ n = #lst1[i]\n    \n    -- return if i character matched\n    if n < #lst2[i]\
    \ then return end\n    \n    -- check for number of characters\n    if n == #lst2[i]\
    \ then\n      num_matched = num_matched + 1\n    else\n      num_matched = num_matched\
    \ + (#lst2[i] - n)\n    end\n  end\n  \n  if num_matched == #lst1 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend", "    local count = 0\n    \n   \
    \ for i,v in ipairs(lst1) do\n        if v ~= lst2[i] then\n            count\
    \ = count + 1\n        end\n    end\n    \n    for i,v in ipairs(lst2) do\n  \
    \      if v ~= lst1[i] then\n            count = count + 1\n        end\n    end\n\
    \    \n    if count == #lst1 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend", "   local total_length = 0\n   for _, v in pairs(lst1)\
    \ do\n      total_length = total_length + #v\n   end\n   for _, v in pairs(lst2)\
    \ do\n      total_length = total_length + #v\n   end\n   if total_length == 0\
    \ then\n      return lst1\n   else\n      return lst2\n   end\nend", "  if lst1\
    \ == nil then return lst2 end\n  if lst2 == nil then return lst1 end\n  local\
    \ n1 = #lst1\n  local n2 = #lst2\n  if n1 ~= n2 then\n    return lst1\n  else\n\
    \    local sum = 0\n    for i = 1, n1 do\n      if i <= n2 then\n        sum =\
    \ sum + lst1[i]:len() \n      else\n        sum = sum + lst2[i]:len() \n     \
    \ end\n    end\n    if sum == 0 then\n      return lst1\n    else\n      return\
    \ lst2\n    end\n  end\nend", "  local max_len1, max_len2 = #lst1, #lst2\n  if\
    \ max_len1 > max_len2 then\n    max_len1, max_len2 = max_len2, max_len1\n  end\n\
    \  if max_len1 == 0 then return lst2\n  elseif max_len2 == 0 then return lst1\n\
    \  end\n  local count = 0\n  local i = 0\n  while i < max_len1 do\n    count =\
    \ count + #lst1[i]\n    i = i + 1\n  end\n  local j = 0\n  while j < max_len2\
    \ do\n    count = count + #lst2[j]\n    j = j + 1\n  end\n  if count == max_len1\
    \ then return lst1\n  elseif count == max_len2 then return lst2\n  end\n  return\
    \ nil\nend", "  -- Sort the lists\n  lst1 = table.sort(lst1)\n  lst2 = table.sort(lst2)",
  "   local function compare(x, y)\n      if #x >= #y then\n         return nil\n\
    \      end\n      \n      local max_len = #x\n      if #y > max_len then\n   \
    \      max_len = #y\n      end\n      for i = 1, max_len do\n         if x[i]\
    \ ~= y[i] then\n            return nil\n         end\n      end\n      return\
    \ x\n   end\n   \n   return lst1:map(function(x) return compare(lst1, x) end)\n\
    \      or lst2:map(function(x) return compare(x, lst2) end)\n      or lst1\nend",
  "  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == 0 then\n    return lst2\n\
    \  end\n  if len2 == 0 then\n    return lst1\n  end\n  local maxlen = len1\n \
    \ if len1 < len2 then\n    maxlen = len2\n  end\n  for idx = 1, maxlen do\n  \
    \  local idx2 = idx + 1\n    if idx2 < len1 then\n      local char = lst1[idx]\n\
    \      local char2 = lst1[idx2]\n      if char == char2 then\n        idx2 = idx2\
    \ + 1\n      end\n      lst1 = lst1:sub(1, idx-1)..lst2:sub(1, idx2)\n    end\n\
    \    if idx2 < len2 then\n      local char = lst1[maxlen]\n      local char2 =\
    \ lst2[idx2]\n      if char == char2 then\n        idx2 = idx2 + 1\n      end\n\
    \      lst1 = lst1:sub(1, maxlen-1)..lst2:sub(1, idx2)\n    end\n  end\n  return\
    \ lst1\nend", "  -- Write your code here.\nend\n</cell>\n<text>\nQ4. Write a function\
    \ that accepts a list of strings and returns the list that has total number of\
    \ chars in the all strings of the list less than the other list.", "\tif #lst1\
    \ == 0 then\n\t\treturn lst2\n\telseif #lst2 == 0 then\n\t\treturn lst1\n\tend",
  "    local diff1, diff2 = #lst1, #lst2\n    if diff1 == diff2 then\n        return\
    \ lst1\n    end\n    if diff1 > diff2 then\n        diff1, diff2 = diff2, diff1\n\
    \    end\n    local count = diff2\n    for i = 1, diff1 do\n        count = count\
    \ + #lst1[i - 1] \n    end\n    local i, res, count = 0, 0, 0\n    while i < diff1\
    \ do\n        count = count + #lst1[i]\n        if #lst2[i] > count then\n   \
    \         res = lst1\n            lst1 = lst1[i]\n            break\n        else\n\
    \            count = count\n            i = i + 1\n        end\n    end\n    return\
    \ res\nend", "\tlocal count = 0\n\tfor item in pairs(lst1) do\n\t\tcount = count\
    \ + #item\n\tend\n\tfor item in pairs(lst2) do\n\t\tcount = count - #item\n\t\
    end\n\tif count == 0 then\n\t\treturn lst1\n\telseif count == 0 then\n\t\treturn\
    \ lst2\n\telse\n\t\treturn lst1\n\tend\nend", "    local length1 = #lst1\n   \
    \ local length2 = #lst2\n    if length1 == length2 then\n        for i = 1, length1\
    \ do\n            if string.sub(lst1, i, i) ~= string.sub(lst2, i, i) then\n \
    \               return lst1\n            end\n        end\n        return lst1\n\
    \    else\n        return lst1\n    end\nend", "    local length1 = #lst1\n  \
    \  local length2 = #lst2\n    if length1 == 0 and length2 == 0 then\n        return\
    \ []\n    end\n    if length1 < length2 then\n        return total_match(lst2,\
    \ lst1)\n    end\n    if length2 < length1 then\n        return total_match(lst1,\
    \ lst2)\n    end\n    if length1 == length2 then\n        local results = {}\n\
    \        for i = 1, length1 do\n            table.insert(results, lst1[i])\n \
    \       end\n        return results\n    end\n    local results = {}\n    for\
    \ i = 1, length1 do\n        local j = 1\n        while j < length2 do\n     \
    \       if lst1[i] > lst2[j] then\n                break\n            else\n \
    \               j = j + 1\n            end\n        end\n        if j == length2\
    \ then\n            table.insert(results, lst1[i])\n        end\n    end\n   \
    \ return results\nend", "  -- Write your code here.\n  local total = 0\n  for\
    \ i=1, #lst1 do\n    total = total + #lst1[i]\n  end\n  for i=1, #lst2 do\n  \
    \  total = total + #lst2[i]\n  end\n  if total == #lst2[1] then\n    return lst1\n\
    \  end\n  return lst2\nend", "    local lst2 = lst2\n    if not lst2 then \n \
    \       lst2 = lst1\n        lst1 = nil\n    end\n    \n    local len1 = #lst1\n\
    \    local len2 = #lst2\n    if len1 == 0 then\n        return lst1\n    end\n\
    \    if len2 == 0 then\n        return lst2\n    end", "  if #lst1==0 then return\
    \ lst2 end\n  if #lst2==0 then return lst1 end\n  if lst1[1] < lst2[1] then \n\
    \    return total_match(lst1[2], lst2)\n  else\n    return total_match(lst1, lst2[2])\n\
    \  end\nend", "    local num_cnt = 0\n    for _, v1 in pairs(lst1) do\n      \
    \  for _, v2 in pairs(lst2) do\n            if v1 <= v2 then\n               \
    \ num_cnt = num_cnt + 1\n            end\n        end\n    end\n    if num_cnt\
    \ == 0 then\n        return lst1\n    end\n    return lst2\nend", "  local len1\
    \ = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return lst1\n  elseif\
    \ len1 > len2 then\n    local _lst2 = lst2\n    lst2 = lst1\n    lst1 = _lst2\n\
    \  end\n  local c = 0\n  for i = 1, #lst1 do\n    local n = lst1[i]:byte()\n \
    \   local m = 0\n    for j = 1, #lst2 do\n      local _n = lst2[j]:byte()\n  \
    \    if n > _n then\n        m = m + 1\n      end\n    end\n    if m == 0 then\n\
    \      return lst1\n    elseif m > c then\n      c = m\n    end\n  end\n  return\
    \ lst2\nend", "  local l1 = #lst1\n  local l2 = #lst2\n  if l1 == l2 then\n  \
    \  return lst1\n  else\n    local i = 0\n    local count1 = 1\n    local count2\
    \ = 1\n    local lst3 = {}\n    local lst4 = {}\n    while i < l1 do\n      local\
    \ value = lst1[i]\n      if value <= lst2[i] then\n        count1 = count1 + 1\n\
    \      else\n        local index = count1\n        count1 = count1 + 1\n     \
    \   count = count1\n        for j = 1, l2 do\n          if lst2[j] >= value then\n\
    \            count = count - 1\n            lst4[#lst4 + 1] = value\n        \
    \    lst3 = lst4\n          end\n        end\n      end\n      i = i + 1\n   \
    \ end\n    return lst3\n  end\nend\n</cell>\n<text>\n\U0001F680 Part 2:  Coin\
    \ flipping\nWe are given a coin with the value of heads and tails and have to\
    \ play a game of \ncoin flipping. The game is as follows:", "    local total =\
    \ 0\n    for i = 1, #lst1 do\n        total = total + #lst2\n        if total\
    \ < #lst1 then\n            return lst1\n        elseif total == #lst1 then\n\
    \            return lst2\n        end\n    end\nend", "  local num_chars = 0\n\
    \  local len1\n  if #lst1 > #lst2 then\n    len1 = #lst1\n  else\n    len1 = #lst2\n\
    \  end\n  for i = 0, len1 do\n    if lst1[i] ~= lst2[i] then\n      num_chars\
    \ = num_chars + 1\n    end\n  end\n  if #lst1 == #lst2 then\n    return lst1\n\
    \  end\n  if #lst1 < #lst2 then\n    return lst2\n  end\n  return nil\nend", " \
    \   local len1, len2 = #lst1, #lst2\n    local l\n    local out = {}\n    for\
    \ i = 1, len1 do\n        l = 0\n        for j = 1, len2 do\n            if lst1[i]\
    \ == lst2[j] then\n                l = l + 1\n            end\n        end\n \
    \       if l == len2 then\n            table.insert(out, lst1[i])\n        end\n\
    \    end\n    return out\nend", "    if #lst1 == #lst2 then\n        return lst1\n\
    \    end\n    if #lst1 > #lst2 then\n        local lst3 = lst1\n        lst3 =\
    \ lst3.reverse()\n        lst3 = lst3[#lst2]\n        return total_match(lst3,\
    \ lst2)\n    end\n    local lst3 = lst2\n    lst3 = lst3[#lst1]\n    return total_match(lst1,\
    \ lst3)\nend", "  -- Write code here\n  if #lst1 < #lst2 then \n    local size\
    \ = #lst1\n    local list3 = lst1\n    local list4 = lst2\n  else\n    local size\
    \ = #lst2\n    local list3 = lst2\n    local list4 = lst1\n  end\n  local j =\
    \ 1\n  local k = 1\n  local total = 0\n  for i = 1, size do\n    while j < #list3\
    \ and k < #list4 do\n      if list3[j] == list4[k] then\n        total = total\
    \ + 1\n      end\n      k = k + 1\n    end\n    j = 1\n    k = 1\n  end\n  return\
    \ list1\nend", "    if not lst1 then\n        return lst2\n    else if not lst2\
    \ then\n        return lst1\n    end", "    local count = 0\n    for _, item in\
    \ pairs(lst1) do\n        count = count + #item\n    end", "  if #lst1 == #lst2\
    \ then\n    return lst1\n  elseif #lst1 > #lst2 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend", "  local n1 = #lst1\n  local n2 = #lst2\n  if n1\
    \ == n2 then\n    return lst1\n  else\n    local total = 0\n    for i = 1, n1\
    \ do\n      local c = lst1[i]\n      local j = i + 1\n      while j < n2 do\n\
    \        if lst1[j] < c then\n          total = total + 1\n          lst1[j] =\
    \ ''\n        else\n          break\n        end\n        j = j + 1\n      end\n\
    \    end\n    return lst1\n  end\nend", "  -- Check how many elements are there\
    \ in the second list \n  local max_ele=#lst2\n  -- Reset the length variable to\
    \ 0\n  local length = 0\n  -- If there is any element in lst1, append it \n  if\
    \ #lst1 ~= 0 then\n    for i=1,#lst1 do\n      -- Append the element and check\
    \ if it is less than the \n      -- maximum element of the second list\n     \
    \ if lst1[i] < lst2[length] then\n        lst1[length] = lst1[i]\n      else\n\
    \        length = (length + 1)\n      end\n    end\n  end\n  -- Now append the\
    \ remaining elements of lst2 that were not \n  -- found in the lst1 to the final\
    \ list \n  for i=1,max_ele do\n    if lst2[length] < lst2[i] then\n      lst1[length]\
    \ = lst2[i]\n      length = (length + 1)\n    end\n  end\n  -- Return only the\
    \ final list\n  return lst1\nend", "   \n   if #lst1 == 0 and #lst2 == 0 then\n\
    \      return nil\n   end\n   \n   if #lst1 == 0 then\n      return lst2\n   end\n\
    \   \n   if #lst2 == 0 then\n      return lst1\n   end\n   \n   if #lst1 > #lst2\
    \ then\n      return lst1\n   end\n   \n   return listSetDifference(lst1, lst2,\
    \ function(s) return string.len(s)) end\nend", "    local lst = lst1\n    local\
    \ cnt = 0\n    for w in lst2 do\n        cnt=cnt+1\n        for i=1, #lst1 do\n\
    \            if lst1[i] == w then\n                lst[i] = w\n              \
    \  break\n            end\n        end\n    end\n    if #lst == cnt then\n   \
    \     return lst\n    else\n        local l1 = lst1\n        local l2 = lst2\n\
    \        local m = #lst1\n        local i = 0\n        local j = 0\n        local\
    \ n = #lst2\n        local m = m*n\n        local lst3 = {}\n        \n      \
    \  while i < m do\n            if i < n then\n                lst3[i] = l1[i %\
    \ n] \n                i = i + 1\n            else\n                lst3[i] =\
    \ l2[j % m] \n                j = j + 1\n            end\n        end\n      \
    \  return lst3\n    end\nend", "\tlocal results = {}\n\tlocal count1 = 0\n\tlocal\
    \ count2 = 0\n\tfor k,v in pairs(lst1) do\n\t\tcount1 = count1 + 1\n\t\tif v ==\
    \ lst2[k] then\n\t\t\tcount2 = count2 + 1\n\t\tend\n\tend\n\tif count1 == count2\
    \ then\n\t\treturn lst1\n\telse\n\t\treturn nil\n\tend\nend", "    local total_len\
    \ = 0\n    for _, _ in pairs(lst1) do\n        total_len = total_len + #_\n  \
    \  end\n    for _, _ in pairs(lst2) do\n        total_len = total_len + #_\n \
    \   end\n    local l2 = lst2\n    local l1 = lst1\n    local n = 0\n    while\
    \ #l1 > 0 or #l2 > 0 do\n        if #l1 > 0 and #l2 > 0 then\n            n =\
    \ #l1 + #l2\n        end\n        if #l1 > 0 then\n            if #l1 > total_len\
    \ then\n                return l1\n            else\n                l1 = l1[1:total_len]\n\
    \            end\n        end\n        if #l2 > 0 then\n            if #l2 > total_len\
    \ then\n                return l2\n            else\n                l2 = l2[1:total_len]\n\
    \            end\n        end\n    end\n    return l1 -- when both lists have\
    \ same number of chars\nend", "    local i = 1\n    local total = 0\n    \n  \
    \  while i <= #lst1 do\n        if i <= #lst2 then\n            if lst1[i] > lst2[i]\
    \ then\n                total = total + 1\n            else\n                total\
    \ = total + 1\n            end\n        else\n            total = total + 1\n\
    \        end\n        \n        i = i + 1\n    end\n    \n    return lst1[#lst1]\n\
    end", "   for i = 1, #lst1 do\n      if #lst1[i] < #lst2[i] then\n         return\
    \ lst1\n      else\n         if #lst1[i] == #lst2[i] then\n            return\
    \ lst1\n         end\n      end\n   end\n   return lst2\nend", "    local count\
    \ = 0\n    for i = 1, #lst1 do\n        count = count + string.len(lst1[i])\n\
    \    end\n    for i = 1, #lst2 do\n        count = count + string.len(lst2[i])\n\
    \    end\n    if count == #lst1 then return lst1 end\n    else return lst1 end\n\
    end", "    if not lst1 or not lst2 then\n        error('At least one list is empty.')\n\
    \    end\n    if #lst1 == 0 or not #lst2 then\n        error('One list is empty.\
    \ The other list must have at least one element')\n    end\n    local count1 =\
    \ 1\n    local count2 = 1\n    for i = 1, #lst1 do\n        count1 = count1 +\
    \ 1\n    end\n    for i = 1, #lst2 do\n        count2 = count2 + 1\n    end\n\
    \    if count1 ~= count2 then\n        error('Two lists have different number\
    \ of elements')\n    end\n    if #lst1 > #lst2 then\n        return lst1\n   \
    \ else\n        return lst2\n    end\nend", "   local num = 0\n   for i = 1,#lst1\
    \ do\n      num = num + #lst1[i]\n   end\n   for i = 1,#lst2 do\n      num = num\
    \ + #lst2[i]\n   end\n   if num == 0 then\n      return lst1\n   else\n      return\
    \ lst1\n   end\nend", "  if not lst1 then\n    return lst2\n  elseif not lst2\
    \ then\n    return lst1\n  elseif #lst1 >= #lst2 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend", "  local count_dict = {}\n  for _,v in ipairs(lst1)\
    \ do\n    count_dict[v] = count_dict[v] + 1\n  end\n  for _,v in ipairs(lst2)\
    \ do\n    count_dict[v] = count_dict[v] - 1\n  end\n  local keys_with_more_than_two_chars\
    \ = {}\n  for k,v in pairs(count_dict) do\n    if v > 2 then\n      keys_with_more_than_two_chars[k]\
    \ = true\n    end\n  end\n  local final_list = table.remove(ipairs(keys_with_more_than_two_chars),\
    \ 1)\n  return final_list\nend", "  local len1, len2 = #lst1, #lst2\n  for i =\
    \ 1, len1 do\n    if len1 == len2 then\n      return lst1\n    end\n    if #lst1[len1]\
    \ < #lst2[len2] then\n      return lst1\n    end\n    if #lst2[len2] < #lst1[len1]\
    \ then\n      return lst2\n    end\n  end\n  return lst2\nend", "    if #lst1\
    \ == #lst2 then\n        return lst1\n    else\n        return lst2\n    end\n\
    end", "    if not lst1 or not lst2 then return nil end\n    if #lst1 == 0 and\
    \ #lst2 == 0 then return lst1\n    if #lst1 == 0 and #lst2 ~= 0 then return nil\
    \ end\n    if #lst1 == 0 and #lst2 ~= 1 then return nil end\n    if #lst1 ~= 0\
    \ and #lst2 == 0 then return nil end\n    if #lst1 ~= 0 and #lst2 ~= 1 then return\
    \ nil end\n    return lst2\nend", "    local n = 0\n    for _, v in pairs(lst1)\
    \ do n = n + 1 end\n    for _, v in pairs(lst2) do n = n + 1 end\n    if n ==\
    \ 0 then\n        return lst1\n    end\n    for _, v in pairs(lst1) do n = n -\
    \ 1 end\n    for _, v in pairs(lst2) do n = n + 1 end\n    if n == 0 then\n  \
    \      return lst2\n    end\n    return lst1\nend", "  local num_chars = 0\n \
    \ for _, str1 in pairs(lst1) do\n    for _, str2 in pairs(lst2) do\n      num_chars\
    \ = num_chars + #str1 + #str2 + 1\n    end\n  end\n  if num_chars == #lst1 + #lst2\
    \ then\n    return lst1\n  else\n    return nil\n  end\nend", "    local cnt1\
    \ = 0\n    local cnt2 = 0\n    \n    for _, v in ipairs(lst1) do\n        cnt1\
    \ = cnt1 + 1\n    end", "  local len1, len2 = 0, 0\n  for i,v in ipairs(lst1)\
    \ do\n    len1 = len1 + 1\n  end\n  for i,v in ipairs(lst2) do\n    len2 = len2\
    \ + 1\n  end\n  if len1 == len2 then\n    return lst1\n  else\n    if len1 < len2\
    \ then\n      return lst1\n    else\n      return lst2\n    end\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
