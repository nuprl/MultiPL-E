name: HumanEval_143_words_in_sentence
language: lua
prompt: "-- You are given a string representing a sentence,\n-- the sentence contains\
  \ some words separated by a space,\n-- and you have to return a string that contains\
  \ the words from the original sentence,\n-- whose lengths are prime numbers,\n--\
  \ the order of the words in the new string should be the same as the original one.\n\
  -- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"is\"\n-- Example\
  \ 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output: \"go for\"\n-- Constraints:\n\
  -- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\nlocal function\
  \ words_in_sentence(sentence)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
  \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
  \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
  \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am\
  \ Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for\
  \ it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
  \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = sentence:gsub(\"%w+\", ''):gsub(\"%S+\", ' '):gsub(\"\
    [%^%$#%!&]\", '')\n  return words\nend\nassert(words_in_sentence('This   is  a\
    \   test') ~= 'This')\nassert(words_in_sentence('Let\\'s go for swimming') ~=\
    \ 'Let\\'s go for swimming')\nassert(words_in_sentence('is') ~= 'is')\nassert(words_in_sentence('Let\\\
    's go for swimming') ~= 'Let\\'s go for swimming')", "  if sentence == '' then\n\
    \    return ''\n  end\n  local words = sentence:gmatch(\"[a-z]+\")\n  if words\
    \ == nil then\n    return ''\n  end\n  local result = {}\n  for i=1,#words do\n\
    \    local length = math.floor(math.sqrt((#words) / 2))\n    for j = 1,length\
    \ do\n      if words[i]:sub(1, length * j) == words[i]:sub(1, length * (j + 1))\
    \ then\n        result[#result+1] = words[i]\n      end\n    end\n  end\n  return\
    \ table.concat(result)\nend\n</cell>\n<text>\nNow that we have seen some more\
    \ examples, let's see how our implementation works:", "    local primes = {}\n\
    \    local prime_counter = 0\n    for _,v in pairs(split(sentence)) do\n     \
    \   primes[v] = true\n        if primes[v] == 1 then\n            prime_counter\
    \ = prime_counter + 1\n        end\n    end\n    if prime_counter == 1 then\n\
    \        for _,v in pairs(split(sentence)) do\n            if primes[v] == 0 then\n\
    \                primes[v] = nil\n            end\n        end\n    end\n    local\
    \ result = \"\"\n    for _,v in pairs(split(sentence)) do\n        if primes[v]\
    \ then\n            result = result .. \" \" .. v\n        end\n    end\n    return\
    \ result\nend", "    return sentence:gsub(\".\", \" \"):gsub(\"%w+\", \" \"):gsub(\"\
    %S+\", \" \")\nend", "    local words = sentence:match(\"([a-zA-Z]+)\")\n    local\
    \ length = #words\n    local primes = []\n    for i=2,length do\n        if prime_number(length)\
    \ == false then\n            table.insert(primes, length)\n        end\n    end\n\
    \    local result = \"\"\n    for i=1,#primes do\n        local prime = primes[i]\n\
    \        local word_to_append = words[i]:sub(1,prime-1)\n        result = result\
    \ .. word_to_append\n    end\n    return result\nend\nprint(words_in_sentence(\"\
    lets go for swimming\"))", "    local result = \"\"\n    for word in string.gmatch(sentence,\
    \ \"%W\") do\n        local length = math.floor(#word / 2)\n        if #result\
    \ < length then\n            result = result .. word\n        elseif length ==\
    \ #result then\n            result = result .. word\n        else\n          \
    \  if #result > length then\n                result = result .. word\n       \
    \     else\n                local first = result[#result]\n                local\
    \ second = word\n                for i = #result+1, length do\n              \
    \      result = result .. word\n                end\n                result =\
    \ first .. \" \" .. second\n            end\n        end\n    end\n    return\
    \ result\nend", "    local primes = {}\n    local primes_length = {}\n    local\
    \ primes_lengths = {}\n    local i = 1\n    local n = #sentence\n    local prime\
    \ = 1\n    while i <= n do\n        local check = i\n        for j = i - 1, -1,\
    \ -1 do\n            check = check % j + 1\n            if check == 0 then\n \
    \               primes[prime] = true\n                primes_lengths[prime] =\
    \ i - 1\n                prime = 1\n                break\n            end\n \
    \       end\n        i = i + 1\n    end\n    return primes, primes_length, primes_lengths\n\
    end", "    local primes = {}\n    local count = 0\n    for i, v in pairs(sentence:gsub(\"\
    (%s+)\", function(c) return primes[c] or count*2+1 end)) do\n        count = count\
    \ + 1\n    end\n    return sentence:gsub(\"(%s+)(%.?%s+)(%.?%s+)\", function(_,\
    \ _, a, _, b) primes[a] == primes[b] or primes[a] < primes[b] or primes[a] ==\
    \ nil or primes[b] == nil then a else b end)\nend", "  local result = {}\n  for\
    \ word in sentence:gmatch(\"%w+\") do\n    local prime = true\n    for i = 2,\
    \ #result do\n      if prime:abs() ~= result[i]:abs() then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result)\nend", "    local primes\
    \ = {}\n    for i = 2, 100 do\n        primes[i] = true\n    end\n    local primes_table\
    \ = {}\n    for i = 2, #sentence do\n        primes_table[#primes_table + 1] =\
    \ sentence:sub(i, i)\n    end\n    for i = 1, #primes_table do\n        local\
    \ word = sentence:sub(i, i)\n        local n = #word\n        for j = 2, #primes_table\
    \ do\n            -- find if there is a collision\n            if word:sub(1,\
    \ n + 1) == primes_table[j]:sub(1, n + 1) then\n                primes_table[j]\
    \ = nil\n                break\n            end\n        end\n        if primes_table[i]\
    \ == nil then\n            primes[#primes + 1] = sentence:sub(i, i)\n        end\n\
    \    end\n    primes = primes:reverse()\n    local result = ''\n    for i = 1,\
    \ #primes do\n        result = result .. primes[i]\n    end\n    return result\n\
    end", "    local results = {}\n    local index = 0\n    for c in sentence:gmatch('[^\
    \ ]+') do\n        index = index + 1\n        if math.mod(index, #results) ==\
    \ 0 then\n            table.insert(results, c)\n        end\n    end\n    table.sort(results)\n\
    \    local result = ''\n    for _, item in ipairs(results) do\n        result\
    \ = result .. item\n    end\n    return result\nend", "    local dict = {}\n \
    \   local new_sentence = \"\"", "  local answer = {}\n  -- split sentence into\
    \ words by space and lowercase them\n  sentence = sentence:gsub(' ', ''):lower()\n\
    \  -- generate prime numbers up to sqrt(sentence)\n  local primes = genprimes(math.floor(math.sqrt(sentence):ceil()))\n\
    \  for i=1,#primes do\n    -- use each prime number to find its index\n    local\
    \ prime_index = math.floor(primes[i]/2)\n    -- split sentence into words by space\
    \ and lowercase them\n    local words = sentence:gsub(' ', ''):lower()\n    --\
    \ if one of the words in the sentence equals the current prime number then\n \
    \   -- add it to the answer\n    if primes[prime_index]%words[prime_index]~=0\
    \ then\n      table.insert(answer, words[prime_index])\n    end\n  end\n  -- join\
    \ all the words in the answer into one string\n  return table.concat(answer, \"\
    \ \")\nend", "  local prime_words = {}\n  for i = 2, #sentence, 1 do\n    if not\
    \ prime_words[#prime_words] then\n      prime_words[#prime_words + 1] = i\n  \
    \  end\n  end\n  local answer = \"\"\n  local i = 1\n  while i < #sentence do\n\
    \    local word = sentence:sub(i, i)\n    if prime_words[#prime_words + 1] ==\
    \ #prime_words then\n      answer = answer .. word\n      i = i + 1\n    end\n\
    \  end\n  return answer\nend\nprint(words_in_sentence(sentence))", '    local
    prime_words = {}', "    local strs = {}\n    for word in string.gmatch(sentence,\
    \ \"([^ ]*)\") do\n        local num = 1\n        for c in string.gmatch(word,\
    \ \"(%a+)\") do\n            if num <= math.floor(c:len()) then\n            \
    \    num = num + 1\n            end\n        end\n        strs[#strs+1] = word\n\
    \    end\n    return table.concat(strs)\nend", "  local primes = {}\n  for i =\
    \ 2, 100, 1 do\n    if checkPrime(sentence:sub(i, i + 1)) then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  -- remove the last word since it is the empty string in\
    \ Lua\n  sentence = sentence:sub(1, #sentence)\n  return table.concat(primes,\
    \ \" \")\nend", "    local num_words = 1\n    for w in string.gmatch(sentence,\
    \ \"([^ ]+)\") do\n        if num_words == 1 then\n            table.insert(prime_words,\
    \ tonumber(w))\n        else\n            local is_prime = true\n            for\
    \ p in prime_words do\n                if tonumber(w) == p then\n            \
    \        is_prime = false\n                end\n            end\n            if\
    \ is_prime then\n                table.insert(prime_words, tonumber(w))\n    \
    \        else\n                num_words = num_words + 1\n                table.insert(prime_words,\
    \ tonumber(w))\n            end\n        end\n    end\n    local new_sentence\
    \ = sentence\n    for _, prime in ipairs(prime_words) do\n        new_sentence\
    \ = string.gsub(new_sentence, \"(\" .. prime .. \")\", \" \")\n    end\n    return\
    \ new_sentence\nend", "    local dict = {}\n    for word in string.gmatch(sentence,\
    \ \"([^ ]*)\") do\n        if dict[word] == nil then\n            dict[word] =\
    \ 1\n        else\n            dict[word] = dict[word] + 1\n        end\n    end\n\
    \    local results = {}\n    for k,v in pairs(dict) do\n        if v == 1 then\n\
    \            results[#results + 1] = k\n        end\n    end\n    return table.concat(results)\n\
    end", "    local primes = { 2, 3 }\n    local results = {}\n    for _, word in\
    \ string.gmatch(sentence, \"(%w+)\") do\n        if primes[#primes] ~= #word then\
    \ return nil end\n        for _, prime in ipairs(primes) do\n            if #word\
    \ % prime == 0 then break end\n        end\n        table.insert(results, word)\n\
    \    end\n    return table.concat(results)\nend", "  local letters = {}\n  local\
    \ primes = {}", "    return sentence:gsub(\"[^a-z]\", \"\"):gsub(\"^ \", \"\"\
    ):gsub(\"$\", \"\"):gsub(\"( |^) \", \" \")\nend", "    local answer = {}\n  \
    \  for w in string.gmatch(sentence, \"(%S+)\") do\n        local temp = math.ceil(#w\
    \ / 3) -- divide by 3 since we only care about the length\n        if temp ==\
    \ 1 then\n            table.insert(answer, w)\n        end\n    end\n    return\
    \ table.concat(answer, \" \")\nend", "    local words = sentence:match(\"[[:alpha:]]+\"\
    )\n    return words ~= nil and words or nil\nend", "    local ans = \"\"\n   \
    \ local prime_words = {}\n    local index = 0\n    for char in sentence:gmatch(\"\
    %w+\") do\n        if prime_words[index] == nil then\n            prime_words[index]\
    \ = 1\n        end\n        if prime_words[index] <= #ans then\n            ans\
    \ = ans .. \" \"\n        end\n        ans = ans .. char\n        index = index\
    \ + 1\n    end\n    return ans\nend", "  local primes = { 2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,\
    \ 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,\
    \ 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269,\
    \ 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367,\
    \ 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461,\
    \ 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571,\
    \ 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661,\
    \ 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773,\
    \ 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\
    \ 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n\
    \  local n = #sentence\n  local prime_string = sentence\n  local prime_string\
    \ = \"\"\n  local i = 0\n  while i < n do\n    if primes[i] <= n then\n      prime_string\
    \ = prime_string .. sentence[i]\n    end\n    i = i + 1\n  end\n  local result\
    \ = prime_string\n  for i = 2, #primes do\n    result = result .. ' ' .. prime_string\n\
    \  end\n  print(result)\nend", "    local prime_strings = {}\n    for _ = 1,3\
    \ do\n        local prime_words = {}\n        for i = 1,string.len(sentence) do\n\
    \            if string.len(prime_words) == 0 then\n                prime_words[i]\
    \ = 1\n            else\n                if string.len(prime_words) == 1 then\n\
    \                    local length = math.floor(math.log10(prime_words[1]))\n \
    \                   if length == 1 then\n                        prime_words[1]\
    \ = prime_words[1] * 10 + string.sub(sentence, i, i)\n                       \
    \ prime_words[2] = prime_words[1]\n                        prime_words[3] = prime_words[1]\n\
    \                    else\n                        prime_words[1] = prime_words[1]\
    \ * 10 + math.floor(math.log10(prime_words[2])) + string.sub(sentence, i, i)\n\
    \                        prime_words[2] = prime_words[1]\n                   \
    \     prime_words[3] = prime_words[1] * 10 + math.floor(math.log10(prime_words[3]))\
    \ + string.sub(sentence, i, i)\n                    end\n                else\n\
    \                    local length = math.floor(math.log10(prime_words[2]))\n \
    \                   if length == 1 then\n                        prime_words[2]\
    \ = prime_words[2] * 10 + string.sub(sentence, i, i)\n                       \
    \ prime_words[3] = prime_words[2]\n                        prime_words[4] = prime_words[2]\n\
    \                    else\n                        prime_words[2] = prime_words[2]\
    \ * 10 + math.floor(math.log10(prime_words[3])) + string.sub(sentence, i, i)\n\
    \                        prime_words[3] = prime_words[2]\n                   \
    \     prime_words[4] = prime_words[2] * 10 + math.floor(math.log10(prime_words[4]))\
    \ + string.sub(sentence, i, i)\n                    end\n                end\n\
    \            end\n        end\n        for i = 1,string.len(prime_words) do\n\
    \            if prime_words[i] == false then\n                table.insert(prime_strings,\
    \ true)\n            end\n        end\n    end\n    local result = \"\"\n    local\
    \ prime_count = 1\n    for i,_ in pairs(prime_strings) do\n        if prime_count\
    \ >= #prime_strings then\n            break\n        end\n        if prime_count\
    \ >= #prime_strings and prime_count > 1 then\n            prime_count = 1\n  \
    \      end\n        result = result .. \" \" .. prime_strings[i]\n        prime_count\
    \ = prime_count + 1\n    end\n    if #prime_strings > 0 then\n        result =\
    \ result .. \" \" .. prime_strings[#prime_strings]\n    end\n    return result\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhat is the purpose ", "  local prime\
    \ = {}\n  local last_prime = 1\n  for c in string.gmatch(sentence, '[^ ]+') do\n\
    \    local p = 1\n    for _, b in ipairs(c) do\n      p = (p * last_prime) ..\
    \ b\n    end\n    prime[p] = true\n    last_prime = p + 1\n  end\n  -- Return\
    \ all the words whose lengths are prime numbers.\n  local result\n  for i = 1,\
    \ #prime do\n    if prime[i] then\n      if not result then result = '' end\n\
    \      result = result .. ' ' .. i\n    end\n  end\n  return result\nend", " \
    \ if sentence == nil then return nil end\n  local word_list, prime_list, index_list\
    \ = string:split(sentence)\n  local i, result\n  local prime_list = {}\n  local\
    \ index_list = {}\n  for i = 1, #word_list do\n    prime_list[#prime_list + 1]\
    \ = i\n    index_list[#index_list + 1] = i\n  end\n  result = \"\"\n  for i =\
    \ 1, #prime_list do\n    local word_len = 1\n    for j = 1, #word_list do\n  \
    \    if index_list[j] == prime_list[i] then\n        word_len = word_len + 1\n\
    \        if word_len > 1 then\n          result = result .. word_list[j]\n   \
    \       break\n        end\n      end\n    end\n    if word_len == 1 then\n  \
    \    result = result .. word_list[i]\n    end\n  end\n  return result\nend", " \
    \   -- write your code here\n    local prime_numbers = {}\n    local words = nil\n\
    \    for i=1, #sentence do\n        if string.sub(sentence,i,i) == \" \" then\n\
    \            words = {}\n        else\n            table.insert(words,string.sub(sentence,i,i))\n\
    \        end\n    end\n    local result = \"\"\n    for i=1, #words do\n     \
    \   if prime_numbers[i] == nil then\n            local is_prime = true\n     \
    \       for j=1, #prime_numbers do\n                if prime_numbers[j] == i then\n\
    \                    is_prime = false\n                    break\n           \
    \     end\n            end\n            if is_prime == true then\n           \
    \     table.insert(prime_numbers,i)\n                table.insert(result,words[i])\n\
    \            end\n        end\n    end\n    if #words > 0 then\n        local\
    \ new_result = \"\"\n        for i=1,#words,1 do\n            if #prime_numbers\
    \ ~= #words then\n                if prime_numbers[i] == i then\n            \
    \        table.insert(new_result,words[i])\n                else\n           \
    \         table.insert(new_result,\" \")\n                end\n            end\n\
    \        end\n        result = new_result\n    end\n    return result\nend\nprint(words_in_sentence(\"\
    lets go for swimming\"))", "  local results = {}\n  for i = 1, #sentence do\n\
    \    local word = sentence:sub(i, i):lower()\n    if word:sub(1, 1) == 'a' or\
    \ word:sub(1, 1) == 'e' or word:sub(1, 1) == 'i' or word:sub(1, 1) == 'o' or word:sub(1,\
    \ 1) == 'u' then\n      local length = 2\n      while true do\n        local next\
    \ = word:sub(1, length):lower()\n        if next ~= 'a' and next ~= 'e' and next\
    \ ~= 'i' and next ~= 'o' and next ~= 'u' then\n          break\n        end\n\
    \        length = length + 1\n      end\n      results[i] = word:sub(1, length):lower()\n\
    \    end\n  end\n  -- sort by length and then lexicographically\n  table.sort(results,\
    \ function(a, b) return #a == #b then\n    local a_len = #a\n    local b_len =\
    \ #b\n    return a_len < b_len\n  end)\n  return table.concat(results, \" \")\n\
    end", '    local results = {}', "  local n = #sentence\n  local m = 2^(n-1)\n\
    \  local count = 0\n  -- For each word\n  for i, word in ipairs(split(sentence))\
    \ do\n    -- Check whether its length is prime\n    if m%word == 0 then\n    \
    \  count = count + 1\n    end\n    -- Update m and m * word\n    local tmp = math.floor(m*word)\n\
    \    m = tmp\n  end\n  return sentence:sub(1, count-1)\nend", "  -- write your\
    \ code here\n  local primes = {}\n  for i = 2, #sentence, 1 do\n    local is_prime\
    \ = true\n    for j = 2, i do\n      if not (i % j) then\n        is_prime = false\n\
    \        break\n      end\n    end\n    if not is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return table.concat(primes)\nend", "    if #sentence ==\
    \ 0 then\n        return sentence\n    end", "    return sentence:gmatch(\"[a-z]+\"\
    )\nend", "    local word_list, temp, new_string = {}, \"\", \"\"\n    for i =\
    \ 1, #sentence:len() do\n        if sentence:sub(i, i + 1) ~= ' ' then\n     \
    \       temp = temp..sentence:sub(i, i + 1)\n        end\n    end\n    local prime_numbers\
    \ = primes_up_to_n(#temp:len())\n    for _, prime in ipairs(prime_numbers) do\n\
    \        local word = \"\"\n        for _, c in ipairs(temp:sub(1, prime)) do\n\
    \            word = word..c\n        end\n        if word_list[word] == nil then\n\
    \            word_list[word] = true\n            new_string = new_string..word\n\
    \        end\n    end\n    return new_string\nend\nassert(words_in_sentence(\"\
    This is a test\") == \"is\")\nassert(words_in_sentence(\"lets go for swimming\"\
    ) == \"go for\")", "    local n = #sentence\n    local result = {}\n    \n   \
    \ if n == 0 then\n        return sentence\n    end\n    \n    for i = 1, n - 1\
    \ do\n        local word = sentence:sub(i, i)\n        if #word == 0 then\n  \
    \          if result[#result] == 0 then\n                result[#result] = word\n\
    \            else\n                result[#result] = result[#result] .. \" \"\
    \ .. word\n            end\n        elseif math.sqrt(#word) == math.sqrt(#result)\
    \ then\n            if result[#result] == 0 then\n                result[#result]\
    \ = word\n            else\n                result[#result] = result[#result]\
    \ .. \" \" .. word\n            end\n        else\n            result[#result]\
    \ = word\n        end\n    end\n    \n    return table.concat(result)\nend", " \
    \ local answer = \"\"\n  for i = 1, #sentence do\n    local word = sentence:sub(i,i)\n\
    \    local prime_number = check_prime(word:len())\n    if prime_number ~= nil\
    \ then\n      answer = answer .. \" \" .. word\n    end\n  end\n  return answer\n\
    end", "  -- start with the first word and append all subsequent words as needed\n\
    \  -- while a word doesn't have a prime length, append it as a single character\
    \ in front of it\n  local s = sentence:sub(1,1)\n  for i = 2, #sentence do\n \
    \   local l = #s + 1\n    while l % i == 0 do\n      s = s .. sentence:sub(i,i+1)\n\
    \    end\n  end\n  return s\nend", "  local result = {}\n  local num_words = 0\n\
    \  for w in sentence:gmatch(\"[^ ]+\") do\n    table.insert(result, w)\n    num_words\
    \ = num_words + 1\n  end\n  if num_words == 0 then\n    return '_'\n  end\n  if\
    \ num_words == 1 then\n    return result[1]\n  end\n  local prime_words = {}\n\
    \  local is_prime = true\n  local i = 1\n  while i < #result do\n    -- remove\
    \ the first character and check the remaining ones\n    local first_char = string.sub(result,1,i)\n\
    \    local is_first_prime = true\n    local j = 1\n    while j < #result do\n\
    \      local char = string.sub(result,j,j)\n      local next_char = string.sub(result,j+1,j+2)\n\
    \      if char == ' ' then\n        table.insert(prime_words, first_char)\n  \
    \      j = j + 2\n      else\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime and #prime_words == 1 then\n      is_prime = false\n\
    \      break\n    end\n    -- check remaining characters\n    if prime_words ==\
    \ {} then\n      i = i + 1\n      is_prime = false\n      break\n    end\n   \
    \ if prime_words[1] == first_char then\n      i = i + 1\n      break\n    end\n\
    \    if i == #result then\n      i = i + 1\n      break\n    end\n    if prime_words[#prime_words]\
    \ == first_char then\n      table.insert(prime_words, first_char)\n      i = i\
    \ + 1\n      break\n    end\n    i = i + 1\n  end\n  if prime_words[#prime_words]\
    \ == result[1] then\n    table.insert(prime_words, result[1])\n  end\n  local\
    \ result = {}\n  table.insert(result, prime_words[1])\n  for i = 2, #prime_words\
    \ do\n    table.insert(result, prime_words[i])\n  end\n  return table.concat(result)\n\
    end", "    return sentence:gmatch(\"([a-z]+)[^a-z]+\")\nend", "    local dict\
    \ = { [1] = \"is\", [2] = \"are\", [3] = \"was\", [4] = \"were\" }\n    local\
    \ primes = {}\n    for i = 2, 100 do\n        if i-- > 1 then\n            for\
    \ j = 2, i do\n                if i ~= j then\n                    if sentence:sub(i,j)\
    \ == \"\" then\n                        i = j - 1\n                    else\n\
    \                        local found = false\n                        for k, v\
    \ in pairs(dict) do\n                            if sentence:sub(i,j) == k then\n\
    \                                primes[#primes + 1] = i\n                   \
    \             found = true\n                                break\n          \
    \                  end\n                        end\n                        if\
    \ not found then\n                            if sentence:sub(i,i) == \" \" then\n\
    \                                primes[#primes + 1] = i\n                   \
    \         end\n                        end\n                        break\n  \
    \                  end\n                end\n            end\n        end\n  \
    \  end\n    local new_sentence = sentence\n    for k, v in pairs(primes) do\n\
    \        new_sentence = new_sentence:sub(k, k + v)\n    end\n    return new_sentence\n\
    end", "    local new_sentence = {}\n    for i = 1, #sentence do\n        local\
    \ word_length = math.floor(math.fmod(#sentence, i + 1) - i)\n        for j = 1,\
    \ word_length do\n            table.insert(new_sentence, sentence[i])\n      \
    \  end\n    end\n    return table.concat(new_sentence, \" \")\nend", "  assert(type(sentence)\
    \ == \"string\", \"sentence must be a string\")\n  local result = \"\"\n  for\
    \ c in string.gmatch(sentence, \"[^ ]+\") do\n    if math.floor((string.len(result)\
    \ + string.len(c))/2) ~= math.floor((string.len(result) + string.len(c))/2) then\n\
    \      result = result .. \" \"\n    end\n    result = result .. c\n  end\n  return\
    \ result\nend", "    if sentence == nil then\n        return nil\n    end\n  \
    \  local s = \"\"\n    for _, word in string.gmatch(sentence, \"([%a]+)\") do\n\
    \        s = s .. \" \" .. word\n    end\n    local primes = {}\n    for i = 2,\
    \ math.floor(math.sqrt(#s)) + 1 do\n        if primes[i] then\n            continue\n\
    \        else\n            primes[i] = true\n        end\n        local c = 1\n\
    \        while c <= #s and primes[c] do\n            primes[c] = false\n     \
    \       c += 1\n        end\n    end\n    for i = 2, #s do\n        if not primes[i]\
    \ then\n            return s\n        end\n    end\n    return nil\nend", "  \
    \  local words = sentence:gmatch(\"[%a]+\")\n    local count = 0\n    local new_sentence\
    \ = nil", "  local result = \"\"\n  sentence = string.lower(sentence)\n  local\
    \ words = string.gmatch(sentence, \"([^ ]+)\")\n  for _, word in ipairs(words)\
    \ do\n    if word:len() == 2 then\n      local p = tonumber(word)\n      assert(p:isPrime(),\
    \ \"Word \"..word..\" has no prime number\")\n      result = result .. word\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for w in sentence:gmatch'%(%l+%w+)'\
    \ do\n    local count = 0\n    for i=1, #result do\n      if result[i] == w then\n\
    \        count = count + 1\n      end\n    end\n    if count ~= 1 then\n     \
    \ result[#result+1] = w\n    end\n  end\n  table.sort(result)\n  local is_prime\
    \ = true\n  for i=1, #result do\n    if result[i] ~= result[i-1] then\n      is_prime\
    \ = false\n    end\n  end\n  if is_prime == true then\n    return table.concat(result,\
    \ '', 1)\n  end\nend", "    local prime_numbers = {}\n    local prime_numbers_string\
    \ = \"\"", "    local prime_words = {}\n    for w in string.gmatch(sentence, \"\
    ([^ ]*)\") do\n        prime_words[#prime_words + 1] = {n = #w, string = w}\n\
    \    end\n    local sorted_prime_words = {}\n    table.sort(prime_words, function(a,\
    \ b)\n        local x = a.string\n        local y = b.string\n        if x > y\
    \ then\n            return 1\n        end\n        if x < y then\n           \
    \ return -1\n        end\n        return 0\n    end)", "  local words = string.split(sentence,\
    \ \" \")\n  for i = 1, #words do\n    if not prime_checker(words[i]) then\n  \
    \    return nil\n    end\n  end\n  return table.concat(words, \"_\")\nend", " \
    \   local word_count = 0\n    local new_sentence = \"\"\n    for _, v in ipairs(sentence)\
    \ do\n        if word:is_prime(v)then\n            new_sentence = new_sentence\
    \ .. v\n            word_count = word_count + 1\n        end\n    end\n    for\
    \ i = 1, word_count do\n        print(new_sentence)\n    end\n    print(new_sentence)\n\
    end", '    assert(type(sentence) == "string")', "    local primes = {}\n    for\
    \ i = 2, 20 do\n        if sentence:sub(i, i) == \"#\" then\n            continue\n\
    \        end\n        if isprime(i) and isprime(math.floor(i / 2)) then\n    \
    \        table.insert(primes, i)\n        end\n    end\n    \n    local buffer\
    \ = {sentence}\n    while #buffer > 0 do\n        local next_buffer = {}\n   \
    \     local next_index = 1\n        for i = 1, #buffer do\n            if next_index\
    \ == #primes then\n                next_index = 2\n            end\n         \
    \   local word = buffer[i]\n            \n            for j = next_index, #primes\
    \ do\n                if j > next_index and not word:sub(i, i+j - 1) == \"#\"\
    \ then\n                    table.insert(next_buffer, word)\n                \
    \    next_index = j + 1\n                    break\n                end\n    \
    \        end\n        end\n        buffer = next_buffer\n    end\n    return table.concat(buffer,\
    \ \" \")\nend", "  assert(type(sentence) == 'string')\n  local prime = math.ceiling(math.sqrt(math.pow(#sentence,\
    \ 2)))\n  local result = {}\n  for i = 2, prime do\n    table.insert(result, sentence:sub(i,\
    \ i))\n  end\n  return table.concat(result)\nend", "    local word_count = {}\n\
    \    local index = 1\n    while true do\n        local word = sentence:sub(index,\
    \ index + 1) -- take word from the sentence\n        if word_count[word] == nil\
    \ then\n            word_count[word] = 1\n        else\n            word_count[word]\
    \ = word_count[word] + 1\n        end\n        index = index + 1\n        if index\
    \ > #sentence then -- if the sentence has no more words, end the loop\n      \
    \      break\n        end\n    end", "  return assert(helper(sentence, 0, \"\"\
    ), \"Empty sentence\")\nend\nassert(words_in_sentence(\"This is a test\"), \"\
    is\")\nassert(words_in_sentence(\"lets go for swimming\"), \"go for\")", "   \
    \ local n = #sentence\n    local ans = ''\n    for i = 2, math.ceil(n/2) do\n\
    \        local num = 1\n        for j = 1, n do\n            if j + i > n then\n\
    \                break\n            else\n                if num == i then\n \
    \                   ans = ans .. sentence[j:j+i]\n                end\n      \
    \          num = num + 1\n            end\n        end\n    end\n    return ans\n\
    end", "    return sentence:gmatch(\"([a-z]+) \")\nend", "    local words = string.split(sentence)\n\
    \    local prime_words = {}\n    local prime_words_map = {}\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        if word == \"\" then\n          \
    \  prime_words[#prime_words + 1] = word\n        else\n            local prime\
    \ = checkPrime(word)\n            if prime == false then\n                prime_words[#prime_words\
    \ + 1] = word\n            else\n                prime_words_map[word] = prime\n\
    \            end\n        end\n    end", "  local primes = {}\n  for w in string.gmatch(sentence,\
    \ \"([^ ]*)\") do\n    local n = tonumber(w)\n    if n ~= nil and n > 1 then\n\
    \      primes[n] = true\n    end\n  end\n  local s = ''\n  for i, w in pairs(primes)\
    \ do\n    if w == 1 then\n      s = s .. ' '\n    end\n  end\n  return s\nend",
  "  local words = sentence:gmatch\"([^ ]*)\"\n  -- print(words)\n  -- print(words)\n\
    \  -- print(\"===================================\")\n  local primes = words_in_prime(words)\n\
    \  -- print(primes)\n  local output = \"\"\n  for i = 1, #primes do\n    output\
    \ = output .. \" \" .. primes[i]\n  end\n  -- print(output)\n  return output\n\
    end", "    local words = {}\n    local is_prime = {}\n    local s = \"\"\n   \
    \ for w in sentence:gmatch(\"[%a]+\") do\n        local prime = true\n       \
    \ for _, v in pairs(is_prime) do\n            if v ~= w then\n               \
    \ prime = false\n                break\n            end\n        end\n       \
    \ if prime then\n            table.insert(words, w)\n        end\n        table.insert(is_prime,\
    \ w)\n    end\n    table.sort(words)\n    for _, w in pairs(words) do\n      \
    \  if prime_count(w) == 2 then\n            s = s .. \" \" .. w\n        end\n\
    \    end\n    return s\nend\n</cell>\n<text>\nLet's test your code. Compare the\
    \ expected output with the actual output for both of the examples below.", " \
    \ local prime_string = {}\n  local prime_numbers = {}\n  for i = 2, #sentence\
    \ do\n    local character = sentence:sub(i,i)\n    if character ~= \" \" then\n\
    \      prime_string[#prime_string+1] = character\n      prime_numbers[character]\
    \ = true\n    end\n  end\n  local prime_string_string = table.concat(prime_string)\n\
    \  local length_of_prime_numbers = #prime_numbers\n  for i = 1, length_of_prime_numbers\
    \ do\n    if prime_numbers[prime_string_string[i]] ~= true then\n      return\
    \ false\n    end\n  end\n  return prime_string_string\nend", "  local prime_words\
    \ = { 2, 3 }\n  for i = 2, #sentence do -- O(n)\n    for j = 2, #prime_words do\
    \ -- O(n)\n      if i == prime_words[j] and sentence[i] == \" \" then -- O(1)\n\
    \        prime_words[j] = prime_words[j] + 1\n        break\n      end\n    end\n\
    \  end\n  return table.concat(prime_words, \" \")\nend", "    local primes = {2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90}\n    return sentence:gsub(' ', function()\n\
    \        for i = 1, #primes do\n            for j = 1, #primes do\n          \
    \      if primes[i]:sub(j, j) == i then\n                    if sentence:len()\
    \ >= primes[i] then\n                        return sentence:sub(1, primes[i])\n\
    \                    end\n                end\n            end\n        end\n\
    \    end)\nend", "  -- Write your code here\n  local index1 = 0\n  local index2\
    \ = 1\n  local prime_string = {}\n  while index2 < #sentence do\n    local number\
    \ = tonumber(sentence:sub(index1, index2))\n    if number % 2 == 1 then\n    \
    \  prime_string[#prime_string+1] = sentence:sub(index1, index2)\n      index1\
    \ = index1 + 1\n      index2 = index2 + 1\n    else\n      index1 = index1 + 1\n\
    \    end\n  end\n  prime_string[#prime_string+1] = sentence:sub(index1, index2)\n\
    \  -- return prime_string\n  return table.concat(prime_string)\nend", "  local\
    \ primes = {}\n  local result = \"\"\n  for i = 1, #sentence do\n    local word\
    \ = sentence:sub(i,i)\n    local prime = #primes + 1\n    while prime < #primes\
    \ do\n      primes[prime] = true\n      prime = prime + 1\n    end\n  end\n  for\
    \ i = 1, #sentence do\n    local word = sentence:sub(i,i)\n    local length =\
    \ #primes[#primes-1] - 1\n    while true do\n      -- If length is 1, no need\
    \ to check others\n      if length == 1 then\n        break\n      end\n     \
    \ local prime = #primes[length]\n      local prime_word = sentence:sub(i,i+1)\n\
    \      if not prime_word:sub(0,1) == word:sub(0,1) then\n        length = length\
    \ - 1\n      else\n        -- If length is prime number, then break\n        if\
    \ primes[prime] then\n          break\n        end\n        length = length -\
    \ 1\n      end\n    end\n    local index = #primes[length]\n    if index > #result\
    \ then\n      result = result..\" \"..word\n    end\n  end\n  return result:sub(1,#result)\n\
    end", "  local primes = prime_factors(sentence_length(sentence))\n  local results\
    \ = {}\n  for i=1,#sentence:len() do\n    local temp = sentence:sub(i,i)\n   \
    \ if primes[#primes] ~= 0 then\n      results[#results + 1] = temp\n    end\n\
    \  end\n  return table.concat(results,\" \")\nend", "  local prime_numbers = {}\n\
    \  local prime_number_map = {}\n  local index = 1\n  for word in string.gmatch(sentence,\
    \ \"([^ ]*)\") do\n    if prime_number_map[word] ~= nil then\n      prime_numbers[index]\
    \ = prime_number_map[word]\n      index = index + 1\n    else\n      prime_number_map[word]\
    \ = index\n    end\n  end\n  prime_numbers[index] = true\n  local length = math.ceil(math.log(prime_numbers[index],\
    \ 2))\n  local buffer = {}\n  for i = 1, length do\n    buffer[i] = 0\n  end\n\
    \  for word in string.gmatch(sentence, \"([^ ]*)\") do\n    local i = prime_number_map[word]\n\
    \    for j = (i - 2); j <= i; j = j + 2 do\n      buffer[j] = buffer[j] + 1\n\
    \      if buffer[j] > prime_numbers[index] then\n        break\n      end\n  \
    \  end\n    index = index + 1\n  end\n  local buffer = {}\n  for i = 1, length\
    \ do\n    buffer[i] = 0\n  end\n  for word in string.gmatch(sentence, \"([^ ]*)\"\
    ) do\n    local i = prime_number_map[word]\n    for j = i * (i + 1) / 2; j <=\
    \ (i - 1) * (i - 1) + 1; j = (j + 1) * (j + 2) / 2\n    loop\n      buffer[j]\
    \ = buffer[j] + 1\n      if buffer[j] > prime_numbers[index] then\n        break\n\
    \      end\n    end\n    index = index + 1\n  end\n  local buffer = {}\n  for\
    \ i = 1, length do\n    buffer[i] = 0\n  end\n  for word in string.gmatch(sentence,\
    \ \"([^ ]*)\") do\n    local i = prime_number_map[word]\n    for j = i * (i +\
    \ 1) / 2; j <= (i - 1) * (i - 1) + 1; j = (j + 1) * (j + 2) / 2\n    loop\n  \
    \    buffer[j] = buffer[j] + 1\n      if buffer[j] > prime_numbers[index] then\n\
    \        break\n      end\n    end\n    index = index + 1\n  end\n  return string.gmatch(sentence,\
    \ \"([^ ]*)\")\nend", "    if sentence == '' then\n        return ''\n    end",
  "    local prime_numbers = prime_factors\n    local prime_numbers_count = #prime_numbers\n\
    \    local sentences = sentence:gsub(\"\\s+\", \" \")", "    return \nend\n</cell>\n\
    <text>\nCall the function and display the result.", "  -- write your code here\n\
    \  local result = {}\n  local word_length = nil\n  for i = 1,#sentence:gmatch(\"\
    %w+\") do\n    local word = sentence:sub(i,i)\n    table.insert(result, word)\n\
    \    if not word_length then\n      word_length = #word\n    else if #word > word_length\
    \ then\n      word_length = #word\n    end\n  end\n  return table.concat(result)\n\
    end", "    local results = {}\n    for w in string.gmatch(sentence, \"%w+\") do\n\
    \        local prime = true\n        for i = 2, #results do\n            if prime:abs(#results[i])\
    \ > #w then\n                prime = false\n                results.insert(w)\n\
    \                break\n            end\n        end\n    end\n    return table.concat(results,\
    \ \"\\n\")\nend", "    local result = \"\"\n    for i = 1, #sentence do\n    \
    \    if isPrime(i) then\n            local new_result = result .. \" \" .. sentence[i]\n\
    \            local new_length = #new_result\n            if new_length < #result\
    \ then\n                local j = #result\n                while new_length <\
    \ #result and isPrime(j) do\n                    new_result = new_result .. \"\
    \ \" .. sentence[j]\n                    j = j + 1\n                end\n    \
    \        end\n            result = new_result\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for word in sentence:gmatch(\"%a\"\
    ) do\n        -- Only take prime numbers\n        local num_primes = string.len(word)\
    \ * 2 - 1\n        if num_primes <= 0 then\n            error(\"Bad input: length\
    \ too small\")\n        end\n        -- Check if already in the list\n       \
    \ local primes_found = false\n        for _, prime in ipairs(result) do\n    \
    \        if prime == num_primes then\n                primes_found = true\n  \
    \              break\n            end\n        end\n        if primes_found then\n\
    \            -- Already there, move on\n        else\n            table.insert(result,\
    \ num_primes)\n        end\n    end\n    return table.concat(result)\nend", " \
    \   return sentence:gmatch(\"%w+\") -- this returns an array of all the words\
    \ in a string\nend", "   local words = {}\n   local length = 0\n   for word in\
    \ sentence:gmatch('([^ ]*)') do\n      length = length + 1\n   end\n   for i =\
    \ 2, length + 1 do\n      words[i] = true\n   end\n   local prime_words = {}\n\
    \   for _, word in pairs(words) do\n      local div = math.floor(math.pow(length,\
    \ i) / math.pow(length, i - 1))\n      if div == 1 or div == 2 or div == 3 or\
    \ div == 4 or div == 5 then\n         for j =-1, 1, div do\n            prime_words[j]\
    \ = true\n         end\n      end\n   end\n   for i = 1, length + 1 do\n     \
    \ if prime_words[i] then\n         for _, word in pairs(words) do\n          \
    \  if word == i then\n               words[i] = false\n               break\n\
    \            end\n         end\n      end\n   end\n   local new_words = {}\n \
    \  for _, word in pairs(words) do\n      if word then\n         table.insert(new_words,\
    \ word)\n      end\n   end\n   return table.concat(new_words)\nend\n</cell>\n\
    <text>\nLet's take a closer look to the solution.", "    local primes = {}\n \
    \   for i = 2, #sentence, 2 do\n        if sentence:sub(i, i) == \" \" then\n\
    \            table.insert(primes, i)\n        end\n    end", "    local primes\
    \ = {}\n    for w in string.gmatch(sentence, \"([^ ]*)\") do\n        local prime\
    \ = primes[#primes] + 1\n        for i = 1, prime do\n            primes[#primes\
    \ + 1] = w\n        end\n    end\n    return table.concat(primes, \" \")\nend",
  "    local result = {}\n    local n = 2\n    local new_word\n    for word in string.gmatch(sentence,\
    \ \"%a+\") do\n        -- If the word is prime (contains no repeats) and the new\
    \ word doesn't exist in the new words table\n        if new_word and new_word\
    \ ~= word and string.find(new_word, word) == nil then\n            n = n + 1\n\
    \            result[#result + 1] = new_word\n            new_word = nil\n    \
    \    end\n        if math.fmod(n, 2) == 1 then\n            new_word = word\n\
    \        end\n    end\n    return result\nend", "    -- Write your code here\n\
    \    local prime = {}\n    local result = ''\n    for i = 1, #sentence:len() do\n\
    \        if prime[i] == nil then\n            prime[i] = true\n            if\
    \ sentence:sub(i, i) == '' then\n                local start = i\n           \
    \     for j = start, #sentence:len() do\n                    if prime[j] == nil\
    \ then\n                        prime[j] = false\n                        result\
    \ = result .. ' ' .. sentence:sub(j, j)\n                        break\n     \
    \               end\n                end\n                break\n            end\n\
    \        end\n    end\n    return result\nend", "    local prime_words = {}\n\
    \    for i = 1, #sentence do\n        if sentence:sub(i,i) ~= ' ' then\n     \
    \       local prime = true\n            for j = 1, #prime_words do\n         \
    \       if sentence:sub(i,i+j) == prime_words[j] then\n                    prime\
    \ = false\n                    break\n                end\n            end\n \
    \           if prime then\n                table.insert(prime_words, sentence:sub(i,i))\n\
    \            end\n        end\n    end\n    \n    return table.concat(prime_words)\n\
    end", "    local words = sentence:gmatch(\"[\\\\w]+\")\n    local primes = {}",
  "    local prime_numbers = {}\n    local n = tonumber(sentence)\n    if n ~= nil\
    \ and n >= 0 then\n        local prime_numbers = {}\n        for i = 2, n do\n\
    \            local is_prime = true\n            for j = 2, i do\n            \
    \    if i % j == 0 then\n                    is_prime = false\n              \
    \      break\n                end\n            end\n            if is_prime then\n\
    \                table.insert(prime_numbers, i)\n            end\n        end\n\
    \        table.sort(prime_numbers)\n        local result = \"\"\n        for i\
    \ = 2, #prime_numbers do\n            local prime = prime_numbers[i]\n       \
    \     if prime > 1 then\n                result = result .. \" \" .. sentence:sub(1,\
    \ prime)\n            end\n        end\n        return result\n    else\n    \
    \    return \"error\"\n    end\nend\nprint(words_in_sentence(\"lets go for swimming\"\
    ))\nprint(words_in_sentence(\"this is a test\"))", "    local ans = ''\n    for\
    \ i = 1, #sentence do\n        local s = string.sub(i, 1, i)\n        if tonumber(s)\
    \ == tonumber(s) then\n            for j = 1, #s do\n                local d =\
    \ tonumber(s)\n                if d == 1 then\n                    ans = ans ..\
    \ ' '\n                else\n                    ans = ans .. s\n            \
    \    end\n            end\n        else\n            ans = ans .. s\n        end\n\
    \    end\n    return ans\nend", "  local primes = {}\n  local prime_idxs = {}",
  "  local dict = {}\n  for word in sentence:gmatch(\"(%w+) \") do dict[#dict+1] =\
    \ word end\n  local result = \"\"\n  for i = 2, #dict do\n    local temp = \"\"\
    \n    for j = 2, #dict do\n      local len = 1\n      if j > i then\n        len\
    \ = #dict[#dict+j-i]\n      end\n      if dict[#dict+j-i] == dict[#dict+i] then\n\
    \        for k = 1, len do temp = temp .. \" \" end\n      end\n    end\n    result\
    \ = result .. temp\n  end\n  return result\nend", "    local result = {}\n   \
    \ for w in sentence:gmatch(\"([^ ]+) \") do\n        local n = #w\n        if\
    \ n % 2 == 0 then\n            table.insert(result, w)\n        end\n    end\n\
    \    for i = #result, 1, -1 do\n        for j = i, #result, -1 do\n          \
    \  if result[j] and result[j] == result[i] then\n                result[j] = nil\n\
    \                break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend", "    local new = {}\n    local words = {}\n    local lengths =\
    \ {}", "    local chars = {}\n    for char in sentence:gmatch(\"[%a]+\") do\n\
    \        chars[#chars + 1] = {char}\n    end\n    local primes = {}\n    for i\
    \ = 1, #chars do\n        local is_prime = true\n        for j = 2, #primes do\n\
    \            if primes[j] and math.modf(primes[j] - math.modf(i))[1] ~= 0 then\n\
    \                is_prime = false\n            end\n        end\n        if not\
    \ is_prime then\n            primes[#primes + 1] = i\n        end\n    end\n \
    \   return table.concat(chars, \" \")\nend", "    local words = {}\n    local\
    \ primes = {}\n    local i = 2\n    local count = 0\n    while i <= #sentence\
    \ do\n        count = i\n        for j = 2, #sentence do\n            if count\
    \ % j == 0 then\n                count = count / j\n                table.insert(primes,\
    \ i)\n                break\n            end\n        end\n        i = i + 1\n\
    \    end\n    for i = 1, #primes do\n        local n = sentence:sub(primes[i],\
    \ primes[i])\n        if words[#words+1] == nil then\n            words[#words+1]\
    \ = n\n        else\n            words[#words + 1] = string.format(\"%s %s\",\
    \ words[#words+1], n)\n        end\n    end\n    return table.concat(words, \"\
    \ \")\nend", "    local primes = prime_factors(sentence:len())\n    local new_sentence\
    \ = nil\n    for i = 1, sentence:len() do\n        if primes[i] ~= 0 then\n  \
    \          new_sentence = sentence .. ' ' .. i\n            break\n        end\n\
    \    end\n    return new_sentence\nend", "    local prime_words = {}\n    local\
    \ new_sentence = \"\"", "    local map = {}\n    for i = 1, #sentence, 1 do\n\
    \        map[sentence[i]] = true\n    end", "    assert(type(sentence) == \"string\"\
    )\n    -- start from index 1\n    for index = 1, #sentence do\n        local char\
    \ = sentence[index]\n        if char:byte() == #char:byte() then\n           \
    \ if ((index - 2) * (index - 1) > index) then\n                return {index,\
    \ index}\n            end\n        end\n    end\n    return {}\nend\nprint(words_in_sentence(\"\
    lets go for swimming\"))", "  local word_list = { }\n  for w in string.gmatch(sentence,\
    \ \"%S+\") do\n    word_list[#word_list + 1] = \"\" .. w\n  end\n  local prime_numbers\
    \ = { }\n  local prime_number_count = 1\n  for i = 2, 100 do\n    local prime\
    \ = true\n    for _, v in ipairs(word_list) do\n      if i % v == 0 then\n   \
    \     prime = false\n        break\n      end\n    end\n    if prime then\n  \
    \    prime_numbers[#prime_numbers + 1] = i\n      prime_number_count = prime_number_count\
    \ + 1\n    end\n  end", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"%a\"):gmatch(\"[^ ]+\") do table.insert(result, w) end\n    table.sort(result)\n\
    \    for i, v in ipairs(result) do\n        if string.find(v, \" \") then\n  \
    \          table.remove(result, i)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local result = {}\n    local primes = {}\n    for i = 2, 100000 do\n\
    \        if primes[i] == false then\n            if i % 2 ~= 0 and string.find(sentence,\
    \ \" \") then\n                primes[i] = false\n            else\n         \
    \       primes[i] = true\n            end\n        end\n    end\n    for i = 1,\
    \ #sentence do\n        if primes[i] then\n            table.insert(result, sentence:sub(i,i))\n\
    \        end\n    end\n    table.sort(result)\n    return table.concat(result,\
    \ \" \")\nend\nprint(words_in_sentence(\"this is a test\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\n</textarea></form>", "  -- TODO: Write you code here\n\
    \  local output = ''\n  for i = 1, #sentence do\n    if #output == 0 then\n  \
    \    output = sentence {i}\n    elseif #output ~= #sentence - 1 then\n      output\
    \ = output .. ' ' .. sentence {i}\n    end\n  end\n  return output\nend", "  \
    \  local results = {}\n    for c in sentence:gmatch\"([^ ]*)\" do\n        local\
    \ n = tonumber(c)\n        if n ~= nil and isPrime(n) then\n            results[#results\
    \ + 1] = n\n        end\n    end\n    return table.concat(results)\nend", "  \
    \  local result = {}\n    for w in string.gmatch(sentence, \"([^ ]+)\") do\n \
    \       local prime = prime_number(w)\n        if prime > 1 then\n           \
    \ table.insert(result, w)\n        end\n    end\n    return table.concat(result)\n\
    end", "  local primes = {}\n  local prime_num = 1\n  local prime_num_len = {}\n\
    \  local prime_num_len = tonumber(prime_num_len)\n  local sentence = sentence\n\
    \  while sentence:len() > 0 do\n    local word = sentence:sub(1,1)\n    local\
    \ length = tonumber(sentence:sub(2,2))\n    sentence = sentence:sub(3)\n    if\
    \ length == 0 then\n      primes[prime_num] = word\n      primes[prime_num+1]\
    \ = ''\n    else\n      local is_prime = true\n      for i = 2,length-1 do\n \
    \       local flag = true\n        for j = 1,prime_num_len do\n          flag\
    \ = flag and\n            word:sub((prime_num_len-j-1),(prime_num_len-j)) ~= (primes[j]:sub(1,1))\n\
    \        end\n        if not flag then\n          is_prime = false\n        end\n\
    \        if flag then\n          break\n        end\n      end\n      if is_prime\
    \ then\n        primes[prime_num] = word\n        primes[prime_num+1] = ''\n \
    \     else\n        primes[prime_num+1] = word\n      end\n      prime_num = prime_num\
    \ + 2\n    end\n  end\n  local result = ''\n  for i = 1,prime_num-1 do\n    result\
    \ = result .. primes[i]\n  end\n  return result\nend\n</cell>\n<text>\nQ8. Write\
    \ a function that checks if a string is palindrome.", "    local result = {}\n\
    \    local primes = {}\n    local index = 1\n    while index <= #sentence do\n\
    \        if primes[index] == nil then\n            primes[index] = true\n    \
    \        local word = sentence:sub(1, index)\n            for i = 2, #word do\n\
    \                if word:sub(i, i) == \" \" then\n                    table.insert(result,\
    \ word)\n                else\n                    break\n                end\n\
    \            end\n        end\n        index = index + 1\n    end\n    return\
    \ table.concat(result)\nend", "    -- Write your code here\n    local prime_nums\
    \ = {}\n    local words = {}\n    for w in string.gmatch(sentence, \"([^ ]+)\"\
    ) do\n        local n = #w\n        if prime_nums[n] == nil then\n           \
    \ table.insert(prime_nums, n)\n        end\n    end\n    for i = 2, #prime_nums\
    \ do\n        if prime_nums[i] > i then\n            local w1 = \"\"\n       \
    \     local w2 = \"\"\n            for j = 1, prime_nums[i] do\n             \
    \   if j < i then\n                    w1 = w1 .. \" \" .. w\n               \
    \ else\n                    w2 = w2 .. \" \" .. w\n                end\n     \
    \       end\n            table.insert(words, w1)\n            table.insert(words,\
    \ w2)\n        end\n    end\n    return table.concat(words, \"\\n\")\nend", '    if
    sentence == nil then return nil end', "    local words = {}\n    for w in sentence:gmatch(\"\
    [^ ]\") do\n        table.insert(words, w)\n    end\n    \n    local primes =\
    \ {}\n    for i = 2, #words do\n        local count = 0\n        for j = 2, #words\
    \ do\n            count = count + 1\n            if words[i]:sub(1, 1) == words[j]:sub(1,\
    \ 1) then\n                local prime = true\n                for k = 2, #primes\
    \ do\n                    if words[i]:sub(1, 1) == primes[k]:sub(1, 1) then\n\
    \                        prime = false\n                        break\n      \
    \              end\n                end\n                if prime then\n     \
    \               table.insert(primes, words[i])\n                end\n        \
    \    end\n        end\n    end\n    \n    local new_words = {}\n    for i = 2,\
    \ #words do\n        for j = 2, #primes do\n            if words[i]:sub(1, 1)\
    \ == primes[j]:sub(1, 1) then\n                table.insert(new_words, words[i])\n\
    \            end\n        end\n    end\n    return table.concat(new_words, \"\
    \ \")\nend", "    local dict = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"} -- Dictionary\
    \ of letters, to check for primes\n    for i = 1, #sentence do\n        local\
    \ word = sentence:sub(i, i)\n        if dict[word] ~= nil then\n            for\
    \ j = dict[word], 1, -1 do\n                if ((j-1) * j) == i then\n       \
    \             dict[word] = j\n                    break\n                end\n\
    \            end\n        end\n    end\n    local new_string = \"\"\n    for i\
    \ = 1, #sentence do\n        local word = sentence:sub(i, i)\n        for j =\
    \ dict[word], 1, -1 do\n            word = word..\" \"\n        end\n        new_string=new_string..word\n\
    \    end\n    return new_string\nend", "    if sentence == nil then\n        return\
    \ nil\n    end", "    -- Write your code here\n    local prime_lengths = {}\n\
    \    for i, letter in pairs(string.gsub(sentence, \" \", \"\")):gmatch(\"(.)\"\
    ) do\n        local prime_length = #letter - 2\n        if not prime_lengths[prime_length]\
    \ then\n            prime_lengths[prime_length] = true\n        end\n    end\n\
    \    local new_sentence = \"\"\n    for i, letter in pairs(string.gsub(sentence,\
    \ \" \", \"\")):gmatch(\"(.)\") do\n        local prime_length = #letter - 2\n\
    \        -- if the letter itself is prime and not the letter before it\n     \
    \   if not prime_lengths[prime_length] or not prime_lengths[prime_length - 1]\
    \ then\n            new_sentence = new_sentence .. letter\n        end\n    end\n\
    \    return new_sentence\nend", "  return sentence:gsub(' ', ',')\n      :gsub('(%w+)',\
    \ function(w)\n              return math.floor(math.sqrt(#w) ^ 2) == 1 -- prime\
    \ number\n              and w ~= w -- ignore consecutive words\n             \
    \ and w ~= ' ' -- ignore spaces\n            end)\n      :gsub(',(%w+)', function(w)\n\
    \              return w ~= ' ' -- ignore consecutive words\n            end)\n\
    \      :gsub(',', ' -- comma before a word')\n      :gsub('(%w)', '\\\\1' -- back-reference\
    \ to first word\n            ) -- replace first word with a back-reference to\
    \ it\n      :gsub('\\\\1', ' -- replace first word with space')\nend\n</cell>\n\
    <text>\n\u0417\u0430\u0434\u0430\u043D\u0438\u0435 2\n\u0414\u0430\u043B\u0435\
    \u0435 \u0432\u044B\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043B\u043E\u0432\
    \u0430\u0440\u044C, \u0433\u0434\u0435 \u0441\u043B\u043E\u0432\u043E \u044D\u043B\
    \u0435\u043C\u0435\u043D\u0442\u043E\u043C \u0432 \u0441\u043B\u043E\u0432\u0430\
    \u0440\u0435 \u0445\u0440\u0430\u043D\u0438\u0442\u0441\u044F \u0441\u043F\u0438\
    \u0441\u043E\u043A \u0441\u043F\u0438\u0441\u043A\u043E\u0432, \u0443\u043A\u0430\
    \u0437\u0430\u043D\u043D\u044B\u0445 \u0432 \u043A\u0430\u0447\u0435\u0441\u0442\
    \u0432\u0435 \u0441\u043F\u0438\u0441\u043A\u0430 \u0441\u043B\u043E\u0432 \u0438\
    \u0437 \u0441\u0442\u0440\u043E\u043A\u0438. \u0412 \u0441\u043B\u043E\u0432\u0430\
    \u0440\u0435 \u0445\u0440\u0430\u043D\u0438\u0442\u0441\u044F \u0441\u043F\u0438\
    \u0441\u043E\u043A \u0441\u043B\u043E\u0432 \u043F\u043E \u0432\u0435\u0440\u043E\
    \u044F\u0442\u043D\u043E\u0441\u0442\u044F\u043C \u0441\u043E\u043E\u0442\u0432\
    \u0435\u0442\u0441\u0442\u0432\u0443\u044E\u0449\u0435\u0433\u043E \u043A\u043E\
    \u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044D\u043B\u0435\u043C\u0435\
    \u043D\u0442\u043E\u0432 \u0441\u043F\u0438\u0441\u043A\u0430.", "  return sentence:gsub(\"\
    [^A-Za-z]\", \"\")\n  .. \" \" .. sentence:gsub(\"^[^ ]+\", \" \"):gsub(\"^[^\
    \ ]+\", \" \")\n  .. \" \" .. sentence:gsub(\"^[^ ]+$\", \" \"):gsub(\"^[^ ]+$\"\
    , \" \")\nend", "  local prime_letters = {}\n  local number_words = {}\n  for\
    \ _,letter in ipairs(string.gsub(sentence,\" \",\"\")) do\n    prime_letters[letter]\
    \ = true\n  end\n  for _,word in ipairs(string.gsub(sentence,\" \",\"\")) do\n\
    \    local prime = true\n    for i,letter in ipairs(string.gsub(word,\" \",\"\"\
    )) do\n      if not prime_letters[letter] then\n        prime = false\n      \
    \  break\n      end\n    end\n    if prime then\n      number_words[#number_words\
    \ + 1] = word\n    end\n  end\n  return table.concat(number_words,\" \")\nend",
  "    local word_map = {}\n    local primes = primes_generator(100)\n    for _, word\
    \ in sentence:gmatch(\"[%a]+\") do\n        local i = math.ceil(sentence:len()\
    \ / word:len() / #primes)\n        for _ = 1, i do\n            local key = word\
    \ .. string(primes[#primes])\n            word_map[key] = word_map[key] or 1\n\
    \        end\n    end\n    return word_map:keys()\nend", "    local answer = \"\
    \"\n    local primes = {}\n    for index = 1, #sentence do\n        local word\
    \ = sentence[index]\n        local prime = 1\n        for i = 1, #word do\n  \
    \          if word:sub(i, i) == \"#\" then\n                prime = prime + 1\n\
    \                primes[prime] = true\n            end\n        end\n        for\
    \ prime, flag in pairs(primes) do\n            if prime < #word and primes[prime]\
    \ and word:sub(i, i) ~= \"#\" then\n                answer = answer .. word:sub(i,\
    \ i)\n            end\n        end\n    end\n    return answer\nend", "    local\
    \ prime_numbers = {}\n    for i = 2, 100 do\n        local num = false\n     \
    \   for word in sentence:gmatch(\"(%S+)\") do\n            if word:sub(1, 1) ==\
    \ i then\n                num = true\n                prime_numbers[i] = true\n\
    \                break\n            end\n        end\n        if not num then\n\
    \            prime_numbers[i] = true\n        end\n    end", "    local word_table\
    \ = {}\n    local word_index = 1\n    local prime_word\n    local prime_index",
  "    local primes = {}\n    local words = {}\n    local i = 0\n    local prime =\
    \ 1\n    local n = #sentence\n    while i < n do\n        local prime = true\n\
    \        for i = 2, n do\n            if prime and (i == n or sentence[i] ~= sentence[i-1])\n\
    \            then prime = false\n            elseif primes[i] > i\n          \
    \  then\n                primes[i] = i\n            end\n        end\n       \
    \ if primes[i] == i\n        then primes[i] = nil\n        end\n        table.insert(primes,\
    \ prime)\n        i = i + 1\n    end\n    local maxp = #primes\n    for i = 2,\
    \ maxp do\n        if primes[i]\n        then primes[i] = primes[i]\n        end\n\
    \    end\n    local count = 0\n    while count < n do\n        local temp = 1\n\
    \        for i = 1, maxp do\n            if not primes[i]\n            then temp\
    \ = temp*i\n            end\n        end\n        local result = \"\"\n      \
    \  for i = 1, temp - 1 do\n            local tempword = \"\"\n            for\
    \ j = 1, n do\n                if i == j\n                then tempword = tempword\
    \ .. sentence[j]\n                end\n            end\n            if #tempword\
    \ > 1\n            then result = result .. \" \"\n            end\n          \
    \  result = result .. tempword\n        end\n        table.insert(words, result)\n\
    \        count = count + 1\n    end\n    return table.concat(words)\nend", " \
    \ local dict = {}\n  local primes = setmetatable({},{__index={__len=function()\
    \ return #primes end}})\n  primes[2] = 2\n  for i = 2, #primes do\n    primes[i]\
    \ = 2\n  end\n  local prime = true\n  for _, word in pairs(string.gmatch(sentence,\
    \ \"%w+\"))\n    do\n      if prime then\n        dict[#dict+1] = word\n     \
    \   prime = false\n      else\n        local a = dict[#dict+1]\n        for _,\
    \ prime in pairs(primes) do\n          if a == prime then\n            primes[#primes+1]\
    \ = prime\n            break\n          else\n            primes[#primes+1] =\
    \ prime\n          end\n        end\n      end\n    end\n  return table.concat(dict,\
    \ \".\")\nend\nprint(words_in_sentence(\"lets go for swimming\"))", "    local\
    \ n = #sentence\n    local primes = {2,3,5,7,11,13,17}\n    local result = ''\n\
    \    for i = 1, n do\n        if sentence:sub(i, i) == ' ' then\n            local\
    \ prime = primes[i - 1]\n            if #result == prime then\n              \
    \  result = result .. ' ' .. sentence:sub(1, i - 1)\n            else\n      \
    \          result = result .. ' ' .. sentence:sub(1, i)\n            end\n   \
    \     else\n            result = result .. sentence:sub(i, i)\n        end\n \
    \   end\n    return result\nend", "    local primes = {}\n    local prime = ''\n\
    \    local result = {}\n    for i = 2, #sentence do\n        local char = sentence:sub(i,i)\n\
    \        if char == ' ' then\n            table.insert(primes,prime)\n       \
    \     prime = char\n        else\n            if #prime == 0 then\n          \
    \      prime = char\n            else\n                if #primes == 0 then\n\
    \                    table.insert(primes,prime)\n                    prime = char\n\
    \                else\n                    local match = true\n              \
    \      local i = 1\n                    while match and i <= #primes do\n    \
    \                    if primes[i] ~= prime then\n                            match\
    \ = false\n                        end\n                        i = i + 1\n  \
    \                  end\n                    if match then\n                  \
    \      table.insert(result,prime)\n                        prime = char\n    \
    \                end\n                end\n            end\n        end\n    end\n\
    \    table.insert(result,prime)\n    return table.concat(result)\nend", "  --\
    \ Write your code here\n  local prime_words_index = 0\n  local prime_words_index_tmp\
    \ = 0\n  local prime_words = {}", "  local primes = {}\n  local primes_set = primes:get()\n\
    \  for _, v in pairs(sentence:gmatch('[^ ]+')) do\n    local idx = primes_set[v]\n\
    \    primes_set[v] = idx + 1\n    table.insert(primes_set, primes_set[v] + 1)\n\
    \  end\n  local primes_sorted = primes_set:sort()\n  local result = {}\n  for\
    \ _, v in pairs(primes_sorted) do\n    table.insert(result, v)\n  end\n  return\
    \ table.concat(result, \"_\")\nend", "    if sentence == nil then return nil end\n\
    \    if string.len(sentence) <= 1 then return nil end\n    local str = {}\n  \
    \  for i = 1, string.len(sentence) do\n        table.insert(str, string.sub(sentence,\
    \ i, i))\n    end\n    local primes = {}\n    local n = 2\n    while true do\n\
    \        -- We found a prime number so stop.\n        if primes[n] == true then\
    \ break end\n        -- Insert into the array.\n        table.insert(primes, n)\n\
    \        -- Check all odd numbers up to sqrt(n).\n        -- If n is divisible\
    \ by any number between\n        -- sqrt(n) and sqrt(n) + 1, then n itself is\
    \ prime.\n        if n % 2 == 0 then\n            if math.sqrt(n) >= math.sqrt(n)\
    \ + 1 then\n                -- Prime numbers are odd numbers that divide\n   \
    \             -- themselves evenly. n is prime.\n                primes[n] = true\n\
    \            end\n        end\n        n = n + 2\n    end\n    local result =\
    \ \"\"\n    -- Iterate over the array to add the string to the result string.\n\
    \    for i = 1, #primes do\n        result = result .. string.sub(str, primes[i],\
    \ primes[i])\n    end\n    return string.sub(result, 1, #result)\nend", "    local\
    \ prime_letters = {}\n    for i = 2, 100 do\n        for letter = string.sub(sentence,\
    \ i, i) do\n            local prime = true\n            for j = 2, #prime_letters\
    \ do\n                if prime_letters[j] == letter then\n                   \
    \ prime = false\n                    break\n                end\n            end\n\
    \            if prime then\n                table.insert(prime_letters, letter)\n\
    \            end\n        end\n    end", "    local result = {}\n    for i = 1,\
    \ #sentence:len() do\n        if sentence:sub(i,i) ~= nil then\n            table.insert(result,\
    \ sentence:sub(i,i))\n        end\n    end\n    table.sort(result)\n    for i\
    \ = 2, #result do\n        if result[i] * result[i - 1] ~= i then\n          \
    \  table.insert(result, nil)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {} -- Store the prime numbers here\n    local words\
    \ = \"\"\n    for word in sentence:gmatch(\"[a-z ]\") do -- We only want lowercase\
    \ letters a-z here\n        local found = false\n        for _, prime in ipairs(primes)\
    \ do\n            if prime > #word and word:sub(1, prime) ~= word then\n     \
    \           found = true\n                break\n            end\n        end\n\
    \        if not found then\n            words = words + word -- Store the word\
    \ if not found yet\n        end\n    end\n    for _, prime in ipairs(primes) do\n\
    \        words = words .. \" \" -- Add the space to the words\n    end\n    return\
    \ words\nend", "    local word_list = sentence.split(\" \")\n    local prime_word_list\
    \ = nil\n    local new_sentence = nil\n    for i = 1, #word_list do\n        local\
    \ number = prime_number_check(word_list[i])\n        if number ~= nil then\n \
    \           if prime_word_list == nil then\n                prime_word_list =\
    \ number\n            else\n                prime_word_list = prime_word_list\
    \ .. \" \" .. number\n            end\n        end\n    end", "    local primes\
    \ = {}\n    for i = 2, 1000 do\n        local prime = true\n        for word in\
    \ sentence:gmatch'([^ ]*) ' do\n            -- Only letters and ' ' allowed\n\
    \            assert(word:byte() == letter)\n            prime = prime and isPrime(i)\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local ret = \"\"\n    for i = 1, #primes do\n        --\
    \ Find first non-prime\n        local first = true\n        for j = 1, #primes\
    \ do\n            if primes[j] < primes[i] then\n                first = false\n\
    \                break\n            end\n        end\n        if not first then\n\
    \            ret = ret .. \" \"\n        end\n        ret = ret .. sentence:sub(1,\
    \ primes[i])\n    end\n    return ret\nend", "    local primes = {}\n    local\
    \ prime = 1\n    while prime <= 100 do\n        local num_chars = #sentence\n\
    \        for i = 2, num_chars do\n            local num = tonumber(sentence:sub(i,\
    \ i))\n            if num == prime then\n                primes[#primes + 1] =\
    \ word\n                prime = num\n            end\n        end\n    end\n \
    \   return table.concat(primes, \" \")\nend", "  local answers = {}\n  local primes\
    \ = {}\n  local letters = {}\n  for w in string.gmatch(sentence, \"[^ ]+\") do\
    \ table.insert(letters, w) end\n  -- Build primes\n  for i = 2, #letters do\n\
    \    for j = i, #letters do\n      if i % letters[i] == 0 or letters[j] % letters[i]\
    \ == 0 then\n        table.insert(primes, i)\n        break\n      end\n    end\n\
    \  end\n  -- Sort primes\n  table.sort(primes, function(a, b)\n    if #answers\
    \ <= 1 then\n      table.insert(answers, letters[a])\n    else\n      local max_index\
    \ = 1\n      for i = 0, #primes do\n        if letters[primes[i]] ~= letters[primes[max_index]]\
    \ then\n          max_index = i\n        end\n      end\n      table.insert(answers,\
    \ letters[primes[max_index]])\n    end\n    table.insert(answers, letters[b])\n\
    \    return #answers + 1\n  end)\n  return table.concat(answers, \" \")\nend",
  "    if sentence == nil then return '' end", "    return sentence:gsub('([a-z]-)',\
    \ '', sentence)\nend", '    local prime_numbers = {}', "    local chars = {}\n\
    \    for c in sentence:gmatch(\"[%w\\s]\") do\n        table.insert(chars, c)\n\
    \    end\n    for i = 1, #chars do\n        local length = i\n        for j =\
    \ i+1, #chars do\n            if chars[i] == chars[j] then\n                length\
    \ = j-1\n                break\n            end\n        end\n        if length\
    \ ~= nil and is_prime(length) then\n            return table.concat(chars, \"\
    \ \")\n        end\n    end\nend", "    return sentence:gsub(\"[^ ]\", \"\")\n\
    end", "  local primes = {2,3,5,7,11,13,17,19}\n  local primes_set = {}\n  for\
    \ i=1,#primes do\n    primes_set[i] = {}\n  end", '    local primes = { 2, 3,
    5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,
    83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
    173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,
    263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,
    359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,
    457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,
    569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,
    659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,
    769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,
    881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,
    997}', "    local result = {}\n    local n = #sentence\n    for i = 1, n do\n\
    \        local letter = sentence[i]\n        if isPrime(#letter) == false then\n\
    \            result[#result + 1] = '\"'..letter..'\"'\n        else\n        \
    \    result[#result + 1] = '\"'..letter..' '\n        end\n    end\n    result[#result\
    \ + 1] = '\"'..sentence[n]..'\"'\n    return table.concat(result, \" \")\nend",
  "  local prime_words = {}\n  local prime_word = \"\"\n  for i = 1, #sentence do\n\
    \    if sentence[i] ~= \" \" then\n      prime_word = \"\"\n      for j = 1, i\
    \ do\n        prime_word = prime_word .. sentence[j]\n      end\n      if prime_words[prime_word]\
    \ == nil then\n        prime_words[prime_word] = 1\n      else\n        prime_words[prime_word]\
    \ = prime_words[prime_word] + 1\n      end\n    end\n  end\n  local sorted_prime_words\
    \ = sortdict(prime_words)\n  local words_by_length = {}\n  local new_word = \"\
    \"\n  for _, word in pairs(sorted_prime_words) do\n    if words_by_length[#words_by_length\
    \ + 1] == nil then\n      words_by_length[#words_by_length + 1] = word\n    else\n\
    \      words_by_length[#words_by_length + 1] = words_by_length[#words_by_length\
    \ + 1] .. \" \"\n      words_by_length[#words_by_length + 1] = word\n    end\n\
    \  end\n  for i = 1, #words_by_length do\n    local length = #words_by_length[i]\n\
    \    for j = 1, #sentence do\n      if sentence[j] == words_by_length[i][length]\
    \ then\n        new_word = new_word .. sentence[j]\n      end\n    end\n  end\n\
    \  return new_word\nend\nprint(words_in_sentence(\"This is a test\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))", "    local primes = {}\n    for i = 2, 100 do\n   \
    \     local prime = true\n        for _, c in string.gmatch(sentence, \"(%w)\"\
    ) do\n            if not prime then\n                return nil, \"String contains\
    \ more words than it's prime!\"\n            end\n            prime = prime and\
    \ primes[c]\n        end\n        primes[i] = prime\n    end\n    local ans =\
    \ \"\"\n    for _, c in string.gmatch(sentence, \"(%w)\") do\n        local count\
    \ = primes[c]\n        if count ~= nil then\n            ans = ans .. c .. \"\
    \ \"\n            count = count - 1\n        end\n        for i = 1, count do\n\
    \            ans = ans .. c\n        end\n        ans = ans .. \" \"\n    end\n\
    \    return ans\nend", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"([a-zA-Z]+)\") do result[#result+1] = w end\n    result = {\n        -- find\
    \ all the prime numbers in length\n        math.randomseed(os.time())\n      \
    \  local primes = {}\n        for i = 2, math.floor(math.sqrt(#result)) + 1 do\n\
    \            -- skip odd numbers\n            if #result%i == 0 then\n       \
    \         -- loop through the results divided by the prime\n                for\
    \ j = i*(1/i) + 1, #result do\n                    -- add each prime to the list\n\
    \                    if result[j] % i == 0 then\n                        table.insert(primes,\
    \ i)\n                        -- break out of the inner loop\n               \
    \         break\n                    end\n                end\n            end\n\
    \        end\n        for i = 2, #primes do\n            -- find all the words\
    \ that are of length i\n            for w in string.gmatch(sentence, \"([a-zA-Z]+)\
    \ \") do -- gmatch ignores spaces\n                -- if the length is i and w\
    \ is a substring of the current word\n                if #w == i and (string.find(w,\
    \ result[i])~=nil) then\n                    -- put the word in the output list\n\
    \                    table.insert(result, w)\n                end\n          \
    \  end\n        end\n    }\n    return table.concat(result)\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nI like it! But I changed it a little bit and now it gives me\
    \ different results each time I run it. https://ideone.com/qKgYBK https://ideone.com/4JYVx6\n\
    <|/ c |>\n<| c |>\nI figured it out. I was using `math.randomseed(os.time())`\
    \ at the wrong place\n<|/ c |>\n<| a tags=lua-table,lua dscore=0 |>\nThis is a\
    \ working implementation (I took into account your comment that you are allowed\
    \ to use \"table\" module):\n<code>", "    local primes_table = {}\n    for i\
    \ = 2, #sentence:len() + 1 do\n        for j = 2, #sentence:len() + 1 do\n   \
    \         local word = sentence:sub(i, j)\n            local prime = #primes_table\
    \ + 1\n            if primes_table[prime] == nil then\n                primes_table[prime]\
    \ = true\n            end\n            if primes_table[prime] then\n         \
    \       for i = 2, #word:len() + 1 do\n                    local count = 0\n \
    \                   for j = #primes_table, 1, -1 do\n                        if\
    \ word:len() > i then\n                            count = count + 1\n       \
    \                 end\n                    end\n                    if count ==\
    \ #primes_table then\n                        primes_table[prime] = false\n  \
    \                      break\n                    end\n                end\n \
    \           end\n        end\n    end\n    local result_string = \"\"\n    for\
    \ i = 2, #primes_table do\n        if primes_table[i] then\n            result_string\
    \ = result_string .. \" \" + i\n        end\n    end\n    return result_string\n\
    end", "    local n = #sentence\n    if n == 0 then\n        return \"\"\n    end\n\
    \    local result = \"\"\n    for i = 1, n do\n        local j = 1\n        local\
    \ word = \"\"\n        for c = 1, #sentence:sub(i,i) do\n            if string.sub(\
    \ sentence, i, i+j ) == string.sub( sentence, i, i+j ) then\n                word\
    \ = word .. string.sub( sentence, i, i+j )\n                j = j + 1\n      \
    \      end\n        end\n        if #word == 0 then\n            word = string.sub(\
    \ sentence, i, i+1 )\n        end\n        result = result .. \" \" + word\n \
    \   end\n    return result:sub( 1, #result - 1 )\nend", "  local results = {}\n\
    \  local primes = {}\n  local i = 0\n  -- prime number: n\n  local n = 2\n  --\
    \ prime number: candidate\n  local candidate = math.floor(n)\n  -- prime number:\
    \ result\n  local result = n\n  -- prime number: len\n  while i <= math.floor(math.sqrt(n))\
    \ do\n    primes[i] = true\n    n = n / i\n    i = i + 1\n  end\n  while candidate\
    \ > 1 do\n    local index = math.floor(math.random(i))\n    if primes[index] ~=\
    \ true then\n      primes[index] = true\n      result = result * index\n     \
    \ candidate = candidate / index\n    end\n  end\n  -- prime number: index\n  for\
    \ index = 2, #primes do\n    if primes[index] == true then\n      -- prime number:\
    \ num\n      local num = 1\n      -- prime number: i\n      local i = 1\n    \
    \  -- prime number: word\n      local word = ''\n      while i <= candidate do\n\
    \        local temp = result * index\n        num = num * index\n        if temp\
    \ > candidate then\n          break\n        end\n        word = word .. ' ' ..\
    \ words[math.floor(temp)]\n        i = i + 1\n      end\n      if num == i then\n\
    \        results[#results + 1] = word\n      end\n    end\n  end\n  return table.concat(results)\n\
    end\nprint(words_in_sentence(\"lets go for swimming\"))", "  local result = {}\n\
    \  for w in string.gmatch(sentence, '[^ ]+') do\n    local wt = words_in_word(w)\n\
    \    for _, w in pairs(wt) do table.insert(result, w) end\n  end\n  return result\n\
    end", "  if sentence == nil then\n    return \"nil\"\n  end\n  local result =\
    \ \"\"\n  local index = 0\n  while index >= 0 and index < #sentence do\n    local\
    \ char = sentence[index]\n    if #result == 0 then\n      if char == \" \" then\n\
    \        index = index + 1\n      else\n        result = result .. char\n    \
    \  end\n    else\n      local lastChar = result\n      result = \"\"\n      for\
    \ i = index, #result do\n        local next = tostring(lastChar[i])\n        if\
    \ next == char then\n          local prime, last = next_prime(index + 1, #sentence)\n\
    \          if not prime then\n            prime, last = next_prime(index, #sentence)\n\
    \          end\n          result = result .. tostring(last)\n          index =\
    \ prime\n        end\n      end\n      result = result .. char\n    end\n  end\n\
    \  return result\nend", "    local primes = {}\n    for i = 1, #sentence do\n\
    \        local prime = true\n        for _, v in pairs(primes) do\n          \
    \  if v == #sentence:sub(i, i + 1) then\n                prime = false\n     \
    \           break\n            end\n        end\n        if prime then\n     \
    \       table.insert(primes, #sentence + 1)\n        end\n    end", "  local words_in_sentence\
    \ = {}\n  local word_count = #sentence\n  for i = 1, word_count do\n    local\
    \ word = sentence:sub(i,i)\n    local is_prime = true\n    for j = 2, #word do\n\
    \      if not (word:sub(i,i) == word:sub(j,j)):lower() then\n        -- All characters\
    \ are uppercase\n        is_prime = false\n        break\n      end\n    end\n\
    \    if is_prime then\n      table.insert(words_in_sentence, word)\n    end\n\
    \  end\n  return table.concat(words_in_sentence)\nend\nprint(words_in_sentence(\"\
    lets go for swimming\"))", "    local n = #sentence\n    local prime = {}\n  \
    \  local prime_sum = 0", "    local word_set = {}\n    local prime = 1\n    local\
    \ sentence = sentence:gsub(' ','')\n    for i=1,#sentence,1 do\n        if #sentence\
    \ == i then\n            word_set[i] = true\n        else\n            if #word_set\
    \ == 0 then\n                prime = 1\n            end\n            prime = prime\
    \ + 1\n            for j = 1,#word_set do\n                if prime == word_set[j]\
    \ then\n                    break\n                end\n            end\n    \
    \        word_set[i] = false\n        end\n    end\n    local result = {}\n  \
    \  for i=1,#sentence,1 do\n        if word_set[i] == true then\n            result[#result+1]\
    \ = sentence:sub(i,i)\n        end\n    end\n    return result\nend", "    local\
    \ primes, table = {}, {}\n    for w in sentence:gmatch(\"[%a]\") do\n        local\
    \ n = #w\n        local i = 1\n        while n ~= 1 do\n            table.insert(primes,\
    \ n)\n            n = n / i\n            i = i + 1\n        end\n    end\n   \
    \ local lens = {}\n    for _, num in pairs(primes) do\n        table.insert(lens,\
    \ num)\n    end\n    local ans = {}\n    for i = 1, #sentence do\n        if lens[sentence:sub(i,\
    \ i + 1)] then\n            local cur = {}\n            for j = 1, #primes do\n\
    \                cur[#cur + 1] = sentence:sub(i, i + primes[j])\n            end\n\
    \            table.insert(ans, table.concat(cur, \" \"))\n        end\n    end\n\
    \    return table.concat(ans, \" \")\nend", "  if sentence == nil then\n    return\
    \ \"nil\"\n  end\n  local num_words = 1\n  local num_repeat_word_count = 0\n \
    \ local word_count = {}\n  for char in sentence:gmatch(\"[%w'-]+\") do\n    local\
    \ word = char:lower()\n    if word:sub(1, 1) == \"u\" then\n      word = \"\xFC\
    \"\n    end\n    if word in word_count and word_count[word] == 1 then\n      num_repeat_word_count\
    \ = num_repeat_word_count + 1\n    end\n    word_count[word] = word_count[word]\
    \ + 1\n    num_words = num_words + 1\n  end\n  if num_repeat_word_count <= 2 then\n\
    \    return num_words\n  else\n    return 0\n  end\nend", "  local primes = {}\n\
    \  local prime_i = 0\n  local primes = nil\n  for i = 1, #sentence do\n    if\
    \ string.match(sentence, i) then\n      local char = string.sub(i, 1, 1)\n   \
    \   prime_i = prime_i + 1\n      if not primes[prime_i] then\n        primes[prime_i]\
    \ = {}\n        primes[prime_i] = char\n      elseif char == \" \" then\n    \
    \    primes[prime_i] = char\n      end\n    end\n  end\n  local results = {}\n\
    \  local i = 0\n  local prime_i = 0\n  while prime_i < #primes do\n    i = i +\
    \ 1\n    if primes[i] then\n      results[#results + 1] = primes[i]\n    end\n\
    \    prime_i = prime_i + 1\n  end\n  return table.concat(results, \" \")\nend",
  "    assert(type(sentence) == \"string\")\n    local words = string.gmatch(sentence,\
    \ \"[^%s]+\")\n    assert(#words > 0)", "    local num_letters = {}\n    local\
    \ num_letters_rev = #num_letters\n    for i = 1, #sentence do\n        local letter\
    \ = sentence[i]\n        if not num_letters[letter] then\n            num_letters[letter]\
    \ = true\n            num_letters[letter] = num_letters[letter] or letter:reverse():byte()\n\
    \            num_letters_rev = num_letters_rev + 1\n        end\n    end\n   \
    \ local new_str = \"\"\n    for letter, v in pairs(num_letters) do\n        if\
    \ v == 1 then\n            new_str = new_str..\" \"..letter\n        end\n   \
    \ end\n    return new_str\nend", "    local primes = {}\n    for i = 2, #sentence,\
    \ 1 do\n        local prime = true\n        for j = 1, #primes, 1 do\n       \
    \     if i % primes[j] == 0 then\n                prime = false\n            \
    \    break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for _, prime in ipairs(primes)\
    \ do\n        local index = #result\n        for i = 1, prime do\n           \
    \ table.insert(result, sentence:sub(i, i + 1))\n        end\n    end\n    return\
    \ result\nend", "    local prime_words = {}\n    for w in string.gmatch(sentence,\
    \ \"%a\") do\n        table.insert(prime_words, tostring(#w))\n    end", "   \
    \ -- Write your code here\n    local count = 1\n    local result = ''\n    for\
    \ i, v in ipairs(sentence:gmatch('[a-zA-Z]+')) do\n        if #result < i then\n\
    \            result = result .. ' '\n        end\n        result = result .. v\n\
    \        if v == ' ' and #result > i then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "    local prime_word_count = {}\n\
    \    for i = 2, #sentence do\n        if prime_word_count[sentence[i]] then\n\
    \            prime_word_count[sentence[i]] = prime_word_count[sentence[i]] + 1\n\
    \        else\n            prime_word_count[sentence[i]] = 1\n        end\n  \
    \  end\n    return prime_word_count\nend", "    local result = {}\n    for w in\
    \ string.gmatch(sentence, \"([^ ]*)\") do result[#result+1] = w end\n    return\
    \ table.concat(result, \"_\")\nend", "    local primes = setmetatable({}, {__mode=\"\
    k\"})\n    local words = { }\n    for i = 1,#sentence do\n        local prime\
    \ = true\n        for k = 1,#primes do\n            if primes[k] == #words[i]\
    \ then\n                prime = false\n            end\n        end\n        if\
    \ not prime then\n            table.insert(words, sentence[i])\n        end\n\
    \        table.insert(primes, #words)\n    end\n    local result = \"\"\n    for\
    \ i = 1,#words do\n        if #primes[i] ~= 0 then\n            result = result\
    \ .. words[i]\n        end\n    end\n    return result\nend", "    local result\
    \ = {}\n    for word in sentence:gmatch(\"[^ ]+\") do\n        if prime_number(word:len())\
    \ == 0 then\n            table.insert(result, word)\n        end\n    end\n  \
    \  return table.concat(result, \" \")\nend\nprint(words_in_sentence(sentence))\n\
    </code>\n<|/ a |>\n<| c |>\nWhat about a sentence like \"hello world\"?\n<|/ c\
    \ |>\n<| c |>\nYes, I agree, that's why I said it's a good exercise for OP. I'm\
    \ sorry I didn't read it carefully enough.\n<|/ c |>\n<| c |>\nThis seems like\
    \ a really good solution, thank you! I'm going to try implementing this for a\
    \ few more tests to see how it performs.\n<|/ c |>\n<| c |>\n: You're welcome!\
    \ If you like it, please accept the answer :)\n<|/ c |>\n<| c |>\nI have some\
    \ questions about how you implemented this, but I'll make a new post for that.\n\
    <|/ c |>\n<| a |>\nHere's a recursive solution that only needs to store a hash\
    \ table of prime numbers for each word, and a counter of primes already seen so\
    \ far. There are only a couple of assumptions here -- that words are all English\
    \ letters, and that words can be separated by a single space character.\n<code>",
  "    local primes = {}\n    for i = 2, #sentence, 1 do\n        local prime, factors\
    \ = {}, {}\n        for j = 2, i, 1 do\n            prime, factors[j] = {}, (i\
    \ - j):gmatch(\" [%d%d+]\")\n        end\n        for _, prime in pairs(primes)\
    \ do\n            for _, factor in pairs(factors) do\n                if prime\
    \ == factor then break end\n            end\n        end\n        primes[i] =\
    \ prime and #prime or 1\n    end\n    return table.concat(primes)\nend", "  if\
    \ sentence == nil then\n    return \"\"\n  elseif sentence == \"\" then\n    return\
    \ \"{}\"\n  elseif sentence:len() == 1 then\n    return sentence\n  else\n   \
    \ local temp = sentence:sub(1, 1)\n    local count = 1\n    while temp ~= \"\"\
    \ do\n      count = count + 1\n      temp = sentence:sub(count, count)\n    end\n\
    \    local prime_nums = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local temp\n    for i = 1, count\
    \ do\n      if count == prime_nums[i] then\n        temp = sentence:sub(i, i)\n\
    \      else\n        temp = sentence:sub(i + 1, i + 1)\n      end\n      temp\
    \ = temp:gsub('%s+', function(x)\n        if x:len() == 1 then\n          return\
    \ x\n        else\n          return x:sub(1, 1)\n        end\n      end)\n   \
    \   sentence = sentence:sub(1, 1)\n      if temp:len() == 1 then\n        sentence\
    \ = sentence .. temp\n      else\n        sentence = sentence .. temp\n      end\n\
    \    end\n    return sentence\n  end\nend", "    local primes = {}\n    for i\
    \ = 2, 100 do\n        local prime = true\n        for letter in sentence:gmatch(\"\
    [%a]+\") do\n            prime = prime and primes[letter]\n        end\n     \
    \   if prime then table.insert(primes, i) end\n    end\n    local result = \"\"\
    \n    for i = 1, #sentence do\n        local word = sentence:sub(i, i+1)\n   \
    \     for prime = 1, #primes do\n            if word:len() == primes[prime] then\n\
    \                table.insert(result, word)\n                break\n         \
    \   end\n        end\n    end\n    return table.concat(result, \" \")\nend", '  assert(type(sentence)
    == "string")', "    local index = 1\n    local result = ''\n    while index <=\
    \ #sentence do\n        if isPrime(index) then\n            result = result ..\
    \ sentence[index]\n        end\n        index = index + 1\n    end\n    return\
    \ result\nend\nprint(words_in_sentence(\"This is a test\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))", "    local primes = {}\n    for i=1,#sentence do primes[i-1]\
    \ = 1 end\n    for i=2,#sentence do\n        if primes[i] == nil then return false\
    \ end\n        for j=1,#sentence do\n            if sentence[i] == sentence[j]\
    \ then\n                primes[i] = nil\n                break\n            end\n\
    \        end\n    end\n    local str = \"\"\n    for i=1,#sentence do\n      \
    \  if primes[i] ~= nil then\n            str = str..sentence[i]\n        end\n\
    \    end\n    return str\nend", "    return \"\"\nend", "    local primes = {}\n\
    \    local count = 0\n    for _ in sentence:gmatch(\"[a-z]+\") do\n        primes[#primes+1]\
    \ = true\n    end\n    for i = #primes, 1, -1 do\n        count = count + 1\n\
    \        for j = 0 <= i do\n            if primes[j] and count%j == 0 then\n \
    \               count = count + 1\n            end\n        end\n    end\n   \
    \ local res = \"\"\n    for i = 1, #primes do\n        if primes[i] then\n   \
    \         res = res + sentence:sub(1, i - 1)\n        end\n    end\n    return\
    \ res\nend\nprint(words_in_sentence(\"lets go for swimming\"))", "   -- write\
    \ your code here\n   return nil\nend", "  local results = {}\n  for word in string.gmatch(sentence,\
    \ \"([a-z]+)\") do\n    local word_count = #word\n    for _ in pairs(results)\
    \ do\n      word_count = math.min(word_count, #_)\n    end\n    if word_count\
    \ ~= #results then\n      table.insert(results, word)\n    end\n  end\n  local\
    \ result_str = \"\"\n  for _, word in pairs(results) do\n    table.insert(result_str,\
    \ word)\n  end\n  return result_str\nend", "    local primes = math.ceil(math.sqrt(#sentence))\n\
    \    local primes_str = primes:tostring()\n    local primes_arr = (primes_str:gsub(\"\
    %d+\",\"\"):gsub(\"%d*\",\" \"..\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"\
    ):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\"\
    \ \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\",\" \"):gsub(\"%d*\"\
    ,\" ", "  local function is_prime(number)\n    for i = 2, number do\n      if\
    \ number % i == 0 then\n        return false\n      end\n    end\n    return true\n\
    \  end", "  local prime_words = {}\n  for i = 2, #sentence do\n    local prime\
    \ = true\n    for j = 2, #prime_words do\n      local temp = sentence:sub(i, i\
    \ + j - 1)\n      if temp:sub(1, 1) == \"#\" then\n        prime = false\n   \
    \     break\n      end\n    end\n    if prime then\n      table.insert(prime_words,\
    \ sentence:sub(i, i + 1))\n    end\n  end\n  return table.concat(prime_words)\n\
    end", "  -- Write your code here\n  local prime_numbers = {}\n  local i = 0\n\
    \  while i <= #sentence:len() do\n    for j = 2, #prime_numbers + 1 do\n     \
    \ if string.len(sentence:sub(i,i+j)) > 0 then\n        local length = string.len(sentence:sub(i,i+j))\n\
    \        if prime_numbers[length] == nil then\n          prime_numbers[length]\
    \ = true\n        else\n          prime_numbers[length] = false\n        end\n\
    \        break\n      end\n    end\n    i = i+1\n  end\n  \n  local string = \"\
    \"\n  for i = 1, #prime_numbers do\n    if prime_numbers[i] == true then\n   \
    \   string = string .. sentence:sub(i,i+1) .. \" \"\n    end\n  end\n  return\
    \ string\nend", "  -- Your code here\n  local primes = {}\n  for i = 2, #sentence\
    \ do\n    if not primes[#primes] then\n      for j = 2, #sentence do\n       \
    \ if sentence:sub(i, i+j) == sentence:sub(j, j) then\n          primes[#primes]\
    \ = j\n        end\n      end\n    end\n  end\n  local new = \"\"\n  for i = 2,\
    \ #primes do\n    local char = sentence:sub(#primes - i, #primes - i)\n    new\
    \ = string.sub( sentence, #primes - i, #primes - i+1 ) .. char\n  end\n  return\
    \ new\nend\nprint(words_in_sentence(\"This is a test\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))", "    local prime_words = {}\n    local word_count =\
    \ 0\n    for w in string.gmatch(sentence, \"([^ ]*)\") do\n        word_count\
    \ = word_count + 1\n        if word_count == 1 then\n            prime_words[#prime_words+1]\
    \ = w\n        end\n    end", "  return sentence:gsub(\"[%a]\", words_in_sentence_helper)\n\
    end", "    local result = {}\n    local prime_numbers = {}\n    local prime_num\
    \ = 1\n    local last_index = 0", "  local result = {}\n  local primes = {}\n\
    \  local i = 0\n  for w in string.gmatch(sentence, \"%s\") do\n    i = i + 1\n\
    \    if primes[i] then\n      table.insert(result, w)\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend", "    local buffer = \"\"\n    for word in\
    \ sentence:gmatch('[%a]+') do\n        local prime = true\n        for i = 2,\
    \ #buffer do\n            if #buffer:sub(i, i) == #word then\n               \
    \ prime = false\n                break\n            end\n        end\n       \
    \ if prime then\n            buffer = buffer .. word\n        end\n    end\n \
    \   return buffer\nend", "    local n = #sentence\n    local result = \"\"\n \
    \   for i = 2, n do\n        if i ~= n and math.modf(math.pow(3, i)) ~= 1 then\n\
    \            if result:len() >= i then\n                result = result .. \"\
    \ \"\n            end\n            result = result .. sentence:sub(i, i)\n   \
    \     end\n    end\n    return result\nend", "  return string.format(\"%s\", sentence:gsub(\"\
    ([a-zA-Z])\", \" $1 \")) or \"\"\nend", "  -- Your code here\n  local prime_numbers\
    \ = {}\n  for i = 1, #sentence do\n    local char = sentence[i]\n    if char ==\
    \ \" \" then\n      if #prime_numbers == 0 then\n        table.insert(prime_numbers,\
    \ i)\n      else\n        for j = #prime_numbers, 1 do\n          if not (prime_numbers[j]\
    \ and prime_numbers[j] % i == 0) then\n            prime_numbers[j] = nil\n  \
    \          break\n          end\n        end\n      end\n    end\n  end", "  \
    \  local primes = {}\n    local prime_words = {}\n    local length = #sentence\n\
    \    local i = 0\n    while i < length do\n        local number = tonumber(sentence:sub(i,i+1))\n\
    \        if number ~= nil then\n            primes[number] = true\n        end\n\
    \        i = i + 1\n    end\n    length = length + 1\n    local j = 1\n    local\
    \ new_string = ''\n    for k = 1, length do\n        if not primes[k] then\n \
    \           new_string = new_string .. ' ' .. sentence:sub((j-1),(j))\n      \
    \  end\n        j = j + 1\n    end\n    return new_string\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThanks for reply. I need some corrections to this, It\
    \ should return word length greater than or equal to two.\n<|/ c |>\n<| c |>\n\
    - Thanks for your reply. Your code is working fine for the examples but I am getting\
    \ some error when I tried to test it for various inputs. Please refer this link\
    \ for my question : https://leetcode.com/problems/count-prime-words/discuss/19646/Python-Solution-with-detailed-explanation\n\
    <|/ c |>\n<| c |>\n- I am getting 'Index out of Range' error when I am trying\
    \ to test your code. I debugged my code and found that 'for loop' is executing\
    \ only once for input string. Can you please help me on this?\n<|/ c |>\n<| c\
    \ |>\n- I have edited my question. Please refer it and help me with this. It would\
    \ be really helpful for me.\n<|/ c |>\n<| c |>\n- I just edited my code again.\
    \ I am not able to get expected output. Please refer and let me know if I am doing\
    \ anything wrong.\n<|/ c |>\n<| a |>\nAnother method (without using a for loop):\n\
    <code>", "  local results = {}\n  sentence:gsub(\"([^ ])\", function (x) results[#results+1]\
    \ = x end)\n  for _, v in ipairs(results) do\n    local flag = true\n    for i\
    \ = 2, #v do\n      if not isPrime(v) then\n        flag = false\n        break\n\
    \      end\n    end\n    if flag then\n      results[#results+1] = v\n    end\n\
    \  end\n  return table.concat(results, \" \")\nend", "  local result = {}\n  local\
    \ i = 1\n  for word in string.gmatch(sentence, '([^ ]*)') do\n    if i % 2 ==\
    \ 0 then\n      result[#result + 1] = word\n    end\n    i = i + 1\n  end\n  return\
    \ table.concat(result)\nend", "    local prime_words = {}\n    local prime_words_len\
    \ = #prime_words\n    for _, word in ipairs(string.gmatch(sentence, \"([^ ])\"\
    ) or {}) do\n        if word:len() % 2 ~= 0 then\n            prime_words[#prime_words+1]\
    \ = word:len()\n        end\n    end\n    local max_len = #prime_words\n    local\
    \ max_len_bis = #prime_words\n    for _, word in ipairs(string.gmatch(sentence,\
    \ \"([^ ])\") or {}) do\n        if word:len() % 2 ~= 0 then\n            if #prime_words\
    \ > max_len_bis then\n                max_len = #prime_words\n               \
    \ max_len_bis = #prime_words\n            end\n        end\n    end\n    local\
    \ new_sentence = {}\n    for _, word in ipairs(string.gmatch(sentence, \"([^ ])\"\
    ) or {}) do\n        if word:len() % 2 ~= 0 then\n            table.insert(new_sentence,\
    \ word)\n        end\n    end\n    return table.concat(new_sentence, \" \")\n\
    end\nprint(words_in_sentence(\"The quick brown fox jumped over the lazy dog\"\
    ))", "    local res = \"\"\n    for w in string.gmatch(sentence, \"[^ ]+\") do\n\
    \        local count = 0\n        for c in w:gmatch(\"[%a]+\") do\n          \
    \  count = count + 1\n        end\n        if count % 2 == 1 then\n          \
    \  res = res + w\n        end\n    end\n    return res\nend", "    return sentence:gsub(\"\
    [%w]+\", \" \"):gsub(\"^ \", \"\"):gsub(\"$\", \"\"):gsub(\"^ \", \"\"):gsub(\"\
    $\", \"\")\nend", '    if sentence == nil then return end', "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        primes[i] = true\n    end\n    for\
    \ i = 2, #sentence do\n        for j = 2, #sentence do\n            if ((i % primes[j])\
    \ == 0) then\n                primes[j] = false\n            end\n        end\n\
    \    end\n    local new_sentence = \"\"\n    for i = 2, #sentence do\n       \
    \ if primes[i] then\n            new_sentence = new_sentence .. \" \" .. sentence[i]\n\
    \        end\n    end\n    return new_sentence\nend", "  if sentence == nil then\n\
    \    return {}\n  elseif sentence:sub(1, 1) == ' ' then\n    return {}\n  else\n\
    \    local ans = {}\n    for w in sentence:gmatch'([^%s]+)' do\n      if is_prime(#w)\
    \ == false then\n        return {}\n      else\n        table.insert(ans, w)\n\
    \      end\n    end\n    return ans\n  end\nend", "    local ret = {}\n    for\
    \ token in split(sentence) do\n        local temp_ret = ret\n        for word\
    \ in split(token) do\n            local count = 0\n            for _ in string.gmatch(word,\
    \ \".\") do\n                count = count + 1\n            end\n            if\
    \ count == 2 then\n                -- print(word, temp_ret)\n                temp_ret\
    \ = table.insert(temp_ret, word)\n            end\n        end\n    end\n    return\
    \ table.concat(ret)\nend", "    if sentence == \"nil\" then\n        return \"\
    nil\"\n    end\n    local index = 0\n    local length = 0\n    local buffer =\
    \ {}\n    while index ~= #sentence do\n        local char = sentence[index]\n\
    \        local next_char = sentence[index + 1]\n        if next_char == nil then\n\
    \            -- If there is only one letter, add it to the buffer list\n     \
    \       if #buffer == 0 then\n                table.insert(buffer, char)\n   \
    \         else\n                local word = table.concat(buffer)\n          \
    \      table.insert(buffer, char)\n                table.insert(buffer, word)\n\
    \                -- If there is more than one letter and the last word is not\
    \ prime,\n                -- add the next word into the buffer list\n        \
    \        if #buffer > 1 and length ~= #buffer then\n                    local\
    \ word = table.concat(buffer)\n                    table.insert(buffer, word)\n\
    \                end\n            end\n        elseif char == \" \" then\n   \
    \         -- Add the buffer to buffer list\n            table.insert(buffer, char)\n\
    \        else\n            -- If there are more than one letter, add the buffer\
    \ list to the buffer list\n            table.insert(buffer, char)\n          \
    \  -- If the length of the current buffer list is less than the length\n     \
    \       -- of the current length and the last word is not prime,\n           \
    \ -- add the next word into the buffer list\n            if #buffer > 1 and length\
    \ ~= #buffer then\n                local word = table.concat(buffer)\n       \
    \         table.insert(buffer, word)\n            end\n        end\n        --\
    \ Increment the length\n        length = length + 1\n        index = index + 1\n\
    \    end\n    local word = table.concat(buffer)\n    return word\nend", "    local\
    \ prime = {}\n    local n = #sentence\n    for i = 1, n do\n        local prime_n\
    \ = #prime + 1\n        for prime_i, prime_v in pairs(prime) do\n            if\
    \ i % prime_v == 0 then\n                prime[prime_n] = i\n                prime_n\
    \ = prime_n + 1\n            end\n        end\n    end\n    local words = {}\n\
    \    local new_n = 1\n    local new_str = \"\"\n    local prime_v = #prime\n \
    \   for i = 1, n do\n        if i % prime_v == 0 then\n            table.insert(words,\
    \ sentence[i - 1])\n            new_str = new_str..sentence[i - 1]\n        else\n\
    \            new_str = new_str..\" \" \n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
