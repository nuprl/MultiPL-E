name: HumanEval_20_find_closest_elements
language: lua
results:
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   assert(#numbers\
    \ > 1, \"Cannot find closest pair because less than two numbers were supplied.\"\
    )\n   local smallest = numbers[1]\n   local largest = numbers[1]\n   for i = 2,\
    \ #numbers do\n      local value = numbers[i]\n      if value < smallest then\n\
    \         smallest = value\n      elseif value > largest then\n         largest\
    \ = value\n      end\n   end\n   return largest, smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnybl0qzs.lua:25:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpnybl0qzs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   if #numbers\
    \ == 0 then\n      return {}\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbn4f2k81.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2)\n  local closest = {}\n  local smallest, largest = numbers[1], numbers[1]\n\
    \  for idx = 2, #numbers do\n    if numbers[idx] < smallest then\n      smallest\
    \ = numbers[idx]\n    elseif numbers[idx] > largest then\n      largest = numbers[idx]\n\
    \    end\n  end\n  return largest, smallest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctcnlum5.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpctcnlum5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ function get_min_max_distance(element)\n    local min_distance = nil\n    local\
    \ max_distance = nil\n    local i = 0\n    while i < #numbers and numbers[i] ~=\
    \ element do\n      local current = numbers[i]\n      local current_distance =\
    \ math.abs(element - current)\n      if min_distance == nil or current_distance\
    \ < min_distance then\n        min_distance = current_distance\n      elseif current_distance\
    \ > max_distance then\n        max_distance = current_distance\n      end\n  \
    \    i = i + 1\n    end\n    return min_distance, max_distance\n  end\n  local\
    \ min_distance, max_distance = get_min_max_distance(numbers[1])\n  for i = 2,\
    \ #numbers do\n    local current_distance, current_distance = get_min_max_distance(numbers[i])\n\
    \    if current_distance < max_distance then\n      max_distance = current_distance\n\
    \    end\n    if current_distance > min_distance then\n      min_distance = current_distance\n\
    \    end\n  end\n  return numbers[1], numbers[#numbers]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0cfwnt4.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'current')\nstack traceback:\n\
    \t/tmp/tmpu0cfwnt4.lua:14: in local 'get_min_max_distance'\n\t/tmp/tmpu0cfwnt4.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpu0cfwnt4.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ num_min = table.remove_by_ref(numbers[1], numbers[1])\n\tlocal num_max = table.remove_by_ref(numbers[#numbers],\
    \ numbers[#numbers])\n\tfor i = 2, #numbers do\n\t\tif numbers[i] ~= numbers[i\
    \ - 1] and numbers[i] ~= numbers[i - 1] + 1 then\n\t\t\tlocal delta = math.abs(numbers[i]\
    \ - numbers[i - 1])\n\t\t\tif delta < math.abs(num_max - num_min) then\n\t\t\t\
    \tnum_min = numbers[i]\n\t\t\telseif delta > math.abs(num_max - num_min) then\n\
    \t\t\t\tnum_max = numbers[i]\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn num_min, num_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps8gluk6m.lua:8:\
    \ attempt to call a nil value (field 'remove_by_ref')\nstack traceback:\n\t/tmp/tmps8gluk6m.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmps8gluk6m.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min_index = 1\n  local min_value = numbers[1]\n  local max_index = #numbers\
    \ - 1\n  local max_value = numbers[max_index]\n  for i = 1, #numbers do\n    local\
    \ value = numbers[i]\n    if value < min_value then\n      min_index = i\n   \
    \   min_value = value\n    elseif value > max_value then\n      max_index = i\n\
    \      max_value = value\n    end\n  end\n  return min_value, numbers[min_index],\
    \ max_value, numbers[max_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4lp6lll.lua:28:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpg4lp6lll.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ closest_numbers = {}\n  local closest_distance = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2ourofwb.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ sorted_numbers = table.sort(numbers)\n    local min = sorted_numbers[1]\n  \
    \  local max = sorted_numbers[#sorted_numbers]\n    if min == max then\n     \
    \   return min, min\n    end\n    local closest_min, closest_max = min, max\n\
    \    for i = 1, #sorted_numbers do\n        if sorted_numbers[i] ~= min then\n\
    \            if sorted_numbers[i] < closest_min then\n                closest_min\
    \ = sorted_numbers[i]\n            end\n            if sorted_numbers[i] > closest_max\
    \ then\n                closest_max = sorted_numbers[i]\n            end\n   \
    \     end\n    end\n    return closest_min, closest_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xlp_r0d.lua:9:\
    \ attempt to index a nil value (local 'sorted_numbers')\nstack traceback:\n\t\
    /tmp/tmp2xlp_r0d.lua:9: in local 'candidate'\n\t/tmp/tmp2xlp_r0d.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ closest1 = nil\n    local closest2 = nil\n    for i, x in ipairs(numbers) do\n\
    \        local dist = math.abs(closest1) or x\n        if closest1 == nil or dist\
    \ < closest1 then\n            closest1 = dist\n            closest2 = x\n   \
    \     elseif dist < closest2 then\n            closest2 = dist\n        end\n\
    \    end\n    return closest1, closest2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk2ze00_f.lua:11:\
    \ bad argument #1 to 'abs' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpk2ze00_f.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk2ze00_f.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ min1, min2 = numbers[1], numbers[1]\n    local max1, max2 = numbers[2], numbers[2]\n\
    \    local i = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoqcs6ni8.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then return nil, end\n  local smallest = numbers[1]\n  local largest = numbers[1]\n\
    \  for i = 1, #numbers do\n    local new_small = numbers[i]\n    local new_large\
    \ = numbers[i]\n    if new_small < smallest then smallest = new_small end\n  \
    \  if new_large > largest then largest = new_large end\n    if new_small > new_large\
    \ then new_large, new_small = new_small, new_large end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1ywt9jep.lua:8: unexpected symbol near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    --\
    \ Check if any two elements are the same\n    local pairs = ipairs(numbers)\n\
    \    if #pairs == 0 then\n        error('No numbers are provided')\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1xa92lwg.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ <= 1 then return nil, nil end\n  local closest, closest_index = math.abs(numbers[1]),\
    \ 1\n  for i = 2, #numbers do\n    local candidate = math.abs(numbers[i])\n  \
    \  if candidate < closest then\n      closest, closest_index = candidate, i\n\
    \    end\n  end\n  return numbers[closest_index], numbers[closest_index + 1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq04pq9d.lua:22:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpuq04pq9d.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ min1, min2 = numbers[1], numbers[2]\n\tfor i = 1, #numbers do\n\t\tlocal delta\
    \ = numbers[i] - min1\n\t\tif delta < 0 then\n\t\t\tdelta = min2 - min1\n\t\t\
    end\n\t\tif delta == 0 then\n\t\t\treturn min2, min2\n\t\telse\n\t\t\tif delta\
    \ < min1 then\n\t\t\t\tmin1 = numbers[i]\n\t\t\tend\n\t\t\tif delta > min2 then\n\
    \t\t\t\tmin2 = numbers[i]\n\t\t\tend\n\t\tend\n\tend\n\treturn min1, min2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl84opnox.lua:31:\
    \ expected: {3.9, 4}\nactual: 2\nstack traceback:\n\t/tmp/tmpl84opnox.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ minimum = numbers[1]\n\tlocal maximum = numbers[1]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmparvzgk5v.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tassert(numbers:size()\
    \ >= 2)\n\tlocal i1\n\tlocal i2\n\tlocal a1, a2 = numbers[1], numbers[2]\n\tlocal\
    \ a3, a4 = numbers[3], numbers[4]\n\tif a1 == a3 then\n\t\treturn a1, a2\n\telseif\
    \ a2 == a4 then\n\t\treturn a1, a2\n\telseif a1 == a2 then\n\t\tif a2 < a4 then\n\
    \t\t\treturn a3, a4\n\t\telse\n\t\t\treturn a3, a2\n\t\tend\n\telseif a2 == a3\
    \ then\n\t\tif a3 < a4 then\n\t\t\treturn a2, a4\n\t\telse\n\t\t\treturn a2, a3\n\
    \t\tend\n\telseif a3 < a1 then\n\t\treturn a1, a4\n\telseif a4 < a1 then\n\t\t\
    return a1, a3\n\telse\n\t\treturn a1, a2\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7qzoje9b.lua:8:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmp7qzoje9b.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp7qzoje9b.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 0, 'must have at least one number to compare to')\n  if #numbers == 1 then\n\
    \    return (numbers[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfh7qz_4g.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] < min then\n      min = numbers[i]\n    end\n    if numbers[i] >\
    \ max then\n      max = numbers[i]\n    end\n  end\n  if min == max then\n   \
    \ return min, max\n  end\n  if numbers[#numbers - 1] > max then\n    return find_closest_elements(numbers)\n\
    \  end\n  return min, max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfglsvfa.lua:30:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpyfglsvfa.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min1, min2, min3, min4 = numbers[1], numbers[2], numbers[3], numbers[4]\n  if\
    \ min1 ~= min2 then\n    if min1 ~= min3 then\n      if min1 ~= min4 then\n  \
    \      if min2 ~= min3 then\n          min1, min2, min3, min4 = min2, min3, min1,\
    \ min4\n        end\n      end\n    end\n  end\n  min1, min2, min3, min4 = min2,\
    \ min3, min1, min4\n  local min5, min6, min7, min8 = numbers[5], numbers[6], numbers[7],\
    \ numbers[8]\n  if min5 ~= min6 then\n    if min5 ~= min7 then\n      if min5\
    \ ~= min8 then\n        if min6 ~= min7 then\n          if min6 ~= min8 then\n\
    \            min5, min6, min7, min8 = min6, min7, min5, min8\n          end\n\
    \        end\n      end\n    end\n  end\n  min5, min6, min7, min8 = min6, min7,\
    \ min5, min8\n  local min9, min10, min11, min12 = numbers[9], numbers[10], numbers[11],\
    \ numbers[12]\n  if min9 ~= min10 then\n    if min9 ~= min11 then\n      if min9\
    \ ~= min12 then\n        if min10 ~= min11 then\n          if min10 ~= min12 then\n\
    \            min9, min10, min11, min12 = min10, min11, min9, min12\n         \
    \ end\n        end\n      end\n    end\n  end\n  min9, min10, min11, min12 = min10,\
    \ min11, min9, min12\n  if min1 < min3 then\n    if min2 < min4 then\n      if\
    \ min3 < min5 then\n        if min4 < min6 then\n          if min5 < min7 then\n\
    \            if min6 < min8 then\n              if min7 < min9 then\n        \
    \        if min8 < min10 then\n                  if min9 < min11 then\n      \
    \              if min10 < min12 then\n                      min1, min2, min3,\
    \ min4, min5, min6, min7, min8, min9, min10, min11, min12\n                  \
    \  end\n                  end\n                end\n              end\n      \
    \      end\n          end\n        end\n      end\n    end\n  end\n  return min1,\
    \ min2, min3, min4, min5, min6, min7, min8, min9, min10, min11, min12\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4f5dc7h1.lua:56: '=' expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ sorted, i, j, sortedlen, found\n    sorted, sortedlen = table.sort(numbers)\n\
    \    i = 0\n    found = false\n    while i < sortedlen do\n        j = i + 1\n\
    \        while j < sortedlen do\n            if numbers[j] == sorted[i] then\n\
    \                found = true\n                break\n            end\n      \
    \      j = j + 1\n        end\n        i = i + 1\n    end\n    if found then\n\
    \        return sorted[i], sorted[j]\n    else\n        return sorted[0], sorted[1]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3rq7mn4t.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp3rq7mn4t.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp3rq7mn4t.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  -- Make\
    \ sure there are at least two numbers.\n  if #numbers < 2 then\n    return nil\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfgv83rjf.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ min1, min2 = numbers[1], numbers[2]\n    for i = 1, #numbers do\n        if\
    \ min1 <= numbers[i] then\n            min1, min2 = numbers[i], min1\n       \
    \ else\n            min2, min1 = numbers[i], min2\n        end\n    end\n    return\
    \ min2, min1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpry0zglc4.lua:22:\
    \ expected: {3.9, 4}\nactual: 2.2\nstack traceback:\n\t/tmp/tmpry0zglc4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ numbers_len = #numbers\n    if numbers_len < 2 then return nil end\n    local\
    \ closest_number = numbers[1]\n    local smallest_diff = math.abs(numbers[1] -\
    \ closest_number)\n    local closest_numbers = numbers[2:]\n    for _, number\
    \ in ipairs(numbers[2:]) do\n        local diff = math.abs(number - closest_number)\n\
    \        if diff < smallest_diff then\n            closest_number = number\n \
    \           smallest_diff = diff\n            closest_numbers = {closest_number,\
    \ number}\n        elseif diff == smallest_diff then\n            closest_numbers\
    \ = closest_numbers {number, closest_number}\n        end\n    end\n    return\
    \ closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1ysik027.lua:12: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return nil\n  end\n  local smallest_difference = tonumber(numbers[1])\n\
    \  local smallest_index = 2\n  local biggest_difference = tonumber(numbers[1])\n\
    \  local biggest_index = 2\n  for i = 2, #numbers do\n    local difference = tonumber(numbers[i])\n\
    \    local index = i\n    if difference < smallest_difference then\n      smallest_difference\
    \ = difference\n      smallest_index = index\n    elseif difference > biggest_difference\
    \ then\n      biggest_difference = difference\n      biggest_index = index\n \
    \   end\n  end\n  return numbers[smallest_index], numbers[biggest_index]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurj4i2bd.lua:32:\
    \ expected: {3.9, 4}\nactual: 2\nstack traceback:\n\t/tmp/tmpurj4i2bd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ <= 1 then return nil, numbers end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfvmjvdb7.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ min1, min2 = nil, nil\n    for i, v in pairs(numbers) do\n        if min1 ==\
    \ nil or v < min1 then\n            min1, min2 = v, i\n        end\n    end\n\
    \    return min2, min1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp862_wi_f.lua:20:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp862_wi_f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1, 'Invalid input list - should have at least two elements')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwzat_ph2.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2, \"find_closest_elements(): arguments must be a list of numbers of length\
    \ 2 or more.\")\n  local closest_numbers = {}\n  local smallest_number = numbers[1]\n\
    \  local largest_number = numbers[1]\n  local next_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    local current_distance\
    \ = math.abs(current_number - smallest_number)\n    smallest_number = next_smallest_number\n\
    \    if current_distance < current_number then\n      smallest_number = current_number\n\
    \    end\n    local next_largest_number = numbers[i]\n    local next_largest_distance\
    \ = math.abs(next_largest_number - largest_number)\n    largest_number = next_largest_number\n\
    \    if next_largest_distance < current_number then\n      largest_number = next_largest_number\n\
    \    end\n    local found_closest_number = false\n    for j = #closest_numbers,\
    \ 1, -1 do\n      local current_closest_number = closest_numbers[j]\n      if\
    \ smallest_number == current_closest_number then\n        found_closest_number\
    \ = true\n        break\n      end\n      local current_distance = math.abs(current_closest_number\
    \ - current_number)\n      if current_distance < current_closest_number then\n\
    \        found_closest_number = true\n        break\n      end\n    end\n    if\
    \ not found_closest_number then\n      table.insert(closest_numbers, smallest_number)\n\
    \    end\n    table.insert(closest_numbers, largest_number)\n  end\n  table.sort(closest_numbers)\n\
    \  return closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5j_iulv.lua:51:\
    \ expected: {3.9, 4}\nactual: {2, 2, 2.2, 3.9, 4, 5}\nstack traceback:\n\t/tmp/tmpl5j_iulv.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest, largest, smallest_id, largest_id\n    for _, value in pairs(numbers)\
    \ do\n        if smallest == nil then\n            smallest, largest = value,\
    \ value\n            smallest_id, largest_id = 1, 1\n        elseif value < smallest\
    \ then\n            smallest, largest = value, value\n            smallest_id,\
    \ largest_id = 1, 1\n        elseif value > largest then\n            smallest,\
    \ largest = value, value\n            smallest_id, largest_id = 1, 1\n       \
    \ elseif value == smallest then\n            smallest_id = smallest_id + 1\n \
    \           largest = largest * 10 + value\n        else\n            largest_id\
    \ = largest_id + 1\n            smallest = smallest * 10 + value\n        end\n\
    \    end\n    return (smallest, largest, smallest_id, largest_id)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp47r9qalo.lua:27: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ function dist(elem1, elem2)\n        return elem1 - elem2\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphccue8ro.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = math.min(numbers)\n  local largest = math.max(numbers)\n  if largest\
    \ == smallest then\n    return (largest, largest)\n  end\n  local smallestIndex\
    \ = nil\n  local largestIndex = nil\n  for index, value in pairs(numbers) do\n\
    \    if value < smallest then\n      smallestIndex = index\n      smallest = value\n\
    \    end\n    if value > largest then\n      largestIndex = index\n      largest\
    \ = value\n    end\n  end\n  if smallestIndex and largestIndex then\n    return\
    \ (smallest, numbers[largestIndex])\n  elseif smallest then\n    return (smallest,\
    \ largest)\n  else\n    return (largest, smallest)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9yi9fj0g.lua:11: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ lower, upper = numbers[1], numbers[#numbers]\n  local distance = math.abs(upper\
    \ - lower)\n  local closest1 = nil\n  local closest2 = nil\n  for i = 1, #numbers\
    \ do\n    local distance2 = math.abs(numbers[i] - lower)\n    if distance2 <=\
    \ distance then\n      distance = distance2\n      closest1 = numbers[i]\n   \
    \   closest2 = numbers[i - 1]\n    end\n  end\n  return closest1, closest2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2lt74sy.lua:26:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpb2lt74sy.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ smallest, largest = numbers[1], numbers[#numbers]\n\tlargest, smallest = smallest:round(),\
    \ largest:round()\n\tfor i, v in ipairs(numbers) do\n\t\tif v < smallest then\n\
    \t\t\tsmallest, largest = v, v\n\t\tend\n\tend\n\treturn smallest, largest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ywkhgkf.lua:9:\
    \ attempt to index a number value (local 'smallest')\nstack traceback:\n\t/tmp/tmp9ywkhgkf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9ywkhgkf.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest, smallest_idx, largest, largest_idx = 0, nil, nil, nil\n    for idx,\
    \ value in ipairs(numbers) do\n        if idx == smallest_idx then\n         \
    \   smallest = value\n        elseif idx == largest_idx then\n            largest\
    \ = value\n        elseif value < smallest then\n            smallest = value\n\
    \            smallest_idx = idx\n        elseif value > largest then\n       \
    \     largest = value\n            largest_idx = idx\n        end\n    end\n \
    \   return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpad2jeptv.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpad2jeptv.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpad2jeptv.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest,biggest = table.unpack(numbers)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp2eu8w09.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number, largest_number = nil, numbers[1]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpodf4dcda.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  -- The\
    \ first two numbers are easy\n  if not numbers then\n    return nil, nil\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp45cmabyw.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 0)\n  assert(#numbers == 2 or #numbers == 3)\n  local minimum, maximum = numbers[1],\
    \ -numbers[1]\n  for i = 2, #numbers do\n    local candidate = numbers[i]\n  \
    \  local tmp = minimum\n    minimum, maximum = minimum + candidate * minimum,\
    \ maximum + candidate * maximum\n    if minimum > tmp then minimum = tmp end\n\
    \    if maximum < tmp then maximum = tmp end\n  end\n  table.insert(numbers, minimum,\
    \ maximum)\n  table.sort(numbers)\n  return numbers[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2izd_i32.lua:9:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp2izd_i32.lua:9: in local 'candidate'\n\
    \t/tmp/tmp2izd_i32.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   local\
    \ sorted_numbers = table.sort(numbers)\n   local closest_pairs = {}\n   for _,\
    \ value in ipairs(sorted_numbers) do\n      for _, value2 in ipairs(sorted_numbers)\
    \ do\n         if value == value2 then\n            continue\n         else\n\
    \            local d = value - value2\n            local pair = {d, value2}\n\
    \            if pair[1] < pair[2] then\n               table.insert(closest_pairs,\
    \ pair)\n            end\n         end\n      end\n   end\n   return sorted_numbers[#closest_pairs],\
    \ closest_pairs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp65v9rro6.lua:14: syntax error near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tassert(#numbers\
    \ >= 2)\n\tlocal maxi, mini\n\tlocal smaller, larger = table.unpack(numbers)\n\
    \tif smaller <= larger then\n\t\treturn numbers[#numbers], numbers[#numbers]\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}),\
    \ {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}),\
    \ {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2,\
    \ 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpua7573qd.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  -- Sort\
    \ numbers from smallest to largest\n  table.sort(numbers)\n  -- Loop through each\
    \ number and see if its closer to previous number than to the current number\n\
    \  for _, i in pairs(numbers) do\n    local smallest, largest = numbers[#numbers],\
    \ numbers[#numbers - 1]\n    -- Check if current number is closer to previous\
    \ number\n    if i <= smallest then\n      -- If so, return the current number\
    \ and the previous number\n      return i, largest\n    elseif i > largest then\n\
    \      -- If so, return the previous number and the current number\n      return\
    \ smallest, i\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyxo7ciu.lua:27:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpeyxo7ciu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  -- Find\
    \ closest pair\n  local closest_pair = nil\n  local closest_distance = nil\n \
    \ for i, number in pairs(numbers) do\n    -- Find distance of pair (i, number)\
    \ to the closest pair\n    -- First we see if the previous pair was already closest\
    \ to the current pair\n    local previous_distance = closest_distance and closest_distance\
    \ - numbers[i]\n    -- Next we see if the current pair is closer than the last\
    \ pair\n    local current_distance = number - numbers[i]\n    -- If neither of\
    \ the previous two checks return nil, then we found a closer pair\n    if previous_distance\
    \ == nil or current_distance <= previous_distance then\n      -- Save pair (i,\
    \ number) as a closer pair\n      closest_pair = i\n      closest_distance = current_distance\n\
    \    end\n  end\n  -- Return two closest pairs in order\n  return numbers[closest_pair],\
    \ numbers[closest_pair + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsiu7et55.lua:31:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpsiu7et55.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ min_val, min_idx, max_val, max_idx\n    local num_elements = #numbers - 1\n\
    \    if num_elements == 1 then return numbers[1]\n    end\n    -- Find two elements\
    \ with minimal distance between them.\n    -- The first one is always smaller\
    \ than the second one.\n    min_idx = 1\n    min_val = numbers[min_idx]\n    for\
    \ idx = 2, num_elements do\n        local dist = numbers[idx] - min_val\n    \
    \    if dist < 0 then dist = -dist end\n        if min_val > dist then\n     \
    \       min_val = dist\n            min_idx = idx\n        end\n    end\n    if\
    \ min_idx == num_elements then\n        return min_val, min_val\n    end\n   \
    \ -- Now find the second element which is closest to the first one.\n    -- Keep\
    \ the one which is closest to both elements.\n    -- This means we have the closest\
    \ to the first one and the second closest to the second one.\n    max_idx = min_idx\n\
    \    max_val = numbers[min_idx]\n    for idx = min_idx+1, num_elements do\n  \
    \      local dist = numbers[idx] - max_val\n        if dist < 0 then dist = -dist\
    \ end\n        if max_val < dist then\n            max_val = dist\n          \
    \  max_idx = idx\n        end\n    end\n    return min_val, max_val\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbf_ky3b.lua:46:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpcbf_ky3b.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   assert(#numbers\
    \ > 1, \"find_closest_elements: input list must have at least two elements\")\n\
    \   for i = 1, #numbers do\n      local num = numbers[i]\n      if num == nil\
    \ then break end\n      local mindist = math.abs(num)\n      local closest\n \
    \     for j = 1, #numbers do\n         if j == i then break end\n         local\
    \ dist = math.abs(numbers[j])\n         if dist < mindist then\n            mindist\
    \ = dist\n            closest = j\n         end\n      end\n      if closest then\
    \ return numbers[closest], numbers[i] end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukqo237g.lua:29:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpukqo237g.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ function sort_function(x, y)\n    return x < y\n  end -- sort_function\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdwv0cqva.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ lowest_dist, lowest_number = nil, numbers[1]\n\tlocal current_dist, current_number\
    \ = nil, numbers[2]\n\tfor i=1,#numbers do\n\t\tcurrent_number = numbers[i]\n\t\
    \tcurrent_dist = vg_distance:Distance(lowest_number, current_number)\n\t\tif lowest_dist==nil\
    \ then\n\t\t\tlowest_dist = current_dist\n\t\t\tlowest_number = current_number\n\
    \t\telseif lowest_dist>current_dist then\n\t\t\tlowest_dist = current_dist\n\t\
    \t\tlowest_number = current_number\n\t\tend\n\tend\n\treturn lowest_number, lowest_dist\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3tp34ow.lua:12:\
    \ attempt to index a nil value (global 'vg_distance')\nstack traceback:\n\t/tmp/tmpc3tp34ow.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpc3tp34ow.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppp78fnz2.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return nil, nil\n  end\n  local smaller, larger = numbers[1],\
    \ numbers[2]\n  local smaller_index, larger_index = 1, 2\n  local smaller_distance,\
    \ larger_distance = nil, math.inf\n  repeat\n    smaller, larger = numbers[smaller_index],\
    \ numbers[larger_index]\n    smaller_distance = math.abs(smaller - larger)\n \
    \   larger_index = larger_index + 1\n    larger_distance = math.abs(smaller -\
    \ larger)\n  until smaller_index == #numbers or larger_index == #numbers\n  return\
    \ smaller, smaller_distance < larger_distance and smaller or larger\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19cqkkpo.lua:26:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp19cqkkpo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  return\
    \ function(first, second)\n    local diff1 = math.abs(second - first)\n    local\
    \ diff2 = math.abs(second-numbers[1])\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw477o806.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1)\n  local min1 = nil\n  local min2 = nil\n  local mindiff = math.abs(numbers[1]\
    \ - numbers[1])\n  for i = 2, #numbers do\n    local ndiff = math.abs(numbers[i]\
    \ - numbers[i])\n    if (min1 == nil) then\n      min1 = numbers[i]\n      min2\
    \ = numbers[i]\n    elseif (ndiff < mindiff) then\n      min2 = numbers[i]\n \
    \     mindiff = ndiff\n    end\n  end\n  return min1, min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrdwqtew.lua:28:\
    \ expected: {3.9, 4}\nactual: 2\nstack traceback:\n\t/tmp/tmpkrdwqtew.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ smallest = math.min(numbers)\n\tlocal largest = math.max(numbers)\n\tlocal index\
    \ = nil\n\tlocal current = nil\n\tfor i, v in ipairs(numbers) do\n\t\tif current\
    \ == nil then\n\t\t\tcurrent = smallest\n\t\tend\n\t\tif current == v then\n\t\
    \t\tindex = i\n\t\t\tbreak\n\t\tend\n\t\tif largest < v then\n\t\t\tcurrent =\
    \ v\n\t\t\tindex = i\n\t\tend\n\tend\n\treturn largest, current\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg_eelbye.lua:20:\
    \ attempt to compare table with number\nstack traceback:\n\t/tmp/tmpg_eelbye.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpg_eelbye.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if numbers\
    \ == nil then\n    return nil\n  end\n  if #numbers < 2 then\n    return nil\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp__yg2j0.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2, 'numbers should be a list of length greater than 2.')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmf38o2kc.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ results = {}\n  for i = 1, #numbers - 1 do\n    local diff, smallest_diff =\
    \ numbers[i], numbers[1]\n    for j = 2, #numbers - 1 do\n      local next_diff,\
    \ next_smallest_diff = numbers[j], numbers[j]\n      if diff < next_diff then\n\
    \        smallest_diff = next_smallest_diff\n      else\n        smallest_diff\
    \ = smallest_diff or next_smallest_diff\n      end\n      diff = next_diff\n \
    \   end\n    table.insert(results, smallest_diff)\n  end\n  table.sort(results)\n\
    \  table.insert(results, numbers[1])\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_fp0fpj.lua:30:\
    \ expected: {3.9, 4}\nactual: {5, 5, 5, 5, 5, 1}\nstack traceback:\n\t/tmp/tmpq_fp0fpj.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ closest_elements = {}\n  local min_dist = sys.float_info.max\n  local max_dist\
    \ = sys.float_info.min\n  for i, number in ipairs(numbers) do\n    local dist\
    \ = abs(number - numbers[1])\n    if dist < min_dist then\n      closest_elements[1]\
    \ = number\n      min_dist = dist\n    elseif dist > max_dist then\n      closest_elements[#closest_elements\
    \ + 1] = number\n      max_dist = dist\n    end\n  end\n  return closest_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qgkvmdy.lua:9:\
    \ attempt to index a nil value (global 'sys')\nstack traceback:\n\t/tmp/tmp0qgkvmdy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0qgkvmdy.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    --\
    \ If we don't have any numbers, return nil.\n    if not numbers or #numbers <\
    \ 2 then return nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2enysd8q.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ distances = {}\n  local mins = {}\n  for i = 1, #numbers do\n    local distance\
    \ = math.abs(numbers[i] - numbers[1])\n    if mins[distance] == nil then\n   \
    \   mins[distance] = numbers[1]\n    else\n      local min_index = #mins[distance]\
    \ - 1\n      if mins[distance] ~= numbers[i] then\n        mins[distance] = numbers[i]\n\
    \      end\n    end\n    distances[distance] = distances[distance] or {}\n   \
    \ table.insert(distances[distance], numbers[i])\n  end\n  table.sort(distances)\n\
    \  return table.unpack(distances, 2, math.min(#numbers, 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local min_element\
    \ = numbers[1]\n  local min_element_index = 2\n  for i, n in pairs(numbers) do\n\
    \    local diff = math.abs(n - min_element)\n    if diff < min_diff then\n   \
    \   min_diff = diff\n      min_element = n\n      min_element_index = i\n    end\n\
    \  end\n  return min_element, min_element_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprzsdr91.lua:26:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpprzsdr91.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tassert(#numbers\
    \ > 1)\n\tlocal low = numbers[1]\n\tlocal high = numbers[#numbers]\n\tlocal middle\
    \ = low\n\tlocal found = false\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4w4f22ei.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ <= 1 then\n    return numbers, numbers\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzm1e97xi.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min_dist = 2\n  local max_dist = math.sqrt(numbers[1] * numbers[1] + numbers[2]\
    \ * numbers[2])\n  local min_index = nil\n  local max_index = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfigsn29h.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ smaller = numbers[1]\n\tlocal larger = numbers[2]\n\tlocal smaller_index = 1\n\
    \tlocal larger_index = 2\n\t-- if there are only two elements it's easy\n\tif\
    \ #numbers == 2 then\n\t\tassert(numbers[1] < numbers[2])\n\t\treturn numbers[1],\
    \ numbers[2]\n\tend\n\t-- if the larger is greater than the smaller it's easy\n\
    \tif larger > smaller then\n\t\tassert(larger < numbers[#numbers])\n\t\treturn\
    \ numbers[smaller_index], numbers[larger_index]\n\tend\n\t-- now we need to find\
    \ the first element that is larger and the second that is smaller\n\twhile larger\
    \ < numbers[#numbers] do\n\t\tsmaller_index = smaller_index + 1\n\t\tlarger =\
    \ numbers[smaller_index + 1]\n\tend\n\twhile smaller > numbers[#numbers] do\n\t\
    \tlarger_index = larger_index - 1\n\t\tsmaller = numbers[larger_index + 1]\n\t\
    end\n\t-- now we have the correct index to return\n\treturn numbers[smaller_index],\
    \ numbers[larger_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9q5jjqc.lua:38:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpv9q5jjqc.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ mins = {}\n\tlocal maxs = {}\n\tlocal index = 0\n\tlocal length = #numbers -\
    \ 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps38w0wuo.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   if #numbers\
    \ < 2 then\n      return nil, numbers[1]\n   end\n   local smallest_diffs = nil\n\
    \   local smallest_diff = math.abs(numbers[1] - numbers[#numbers])\n   local index_of_smallest_diff\
    \ = #numbers - 1\n   for i = 2, #numbers, 1 do\n      local diff = math.abs(numbers[i]\
    \ - numbers[index_of_smallest_diff])\n      if diff < smallest_diff then\n   \
    \      smallest_diff = diff\n         smallest_diffs = index_of_smallest_diff,\
    \ i - 1\n      end\n      index_of_smallest_diff = i - 1\n   end\n   return smallest_diffs\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7zbabjg.lua:28:\
    \ expected: {3.9, 4}\nactual: 3\nstack traceback:\n\t/tmp/tmpm7zbabjg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return nil\n  end\n  local smallest, largest = math.abs(numbers[1]),\
    \ math.abs(numbers[#numbers])\n  local result = {}, numbers[#numbers-1]\n  for\
    \ i=1, #numbers do\n    if numbers[i] < smallest then\n      smallest = numbers[i]\n\
    \    end\n    if numbers[i] > largest then\n      largest = numbers[i]\n    end\n\
    \    result[#result+1] = numbers[i]\n  end\n  return smallest, largest, result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemj2pmjg.lua:28:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpemj2pmjg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ function closest_element_bigger(x)\n        local bigger = math.max(x)\n   \
    \     for i = #numbers, 1, -1 do\n            local diff = numbers[i]-bigger\n\
    \            if diff ~= 0 then\n                bigger = math.min(diff, bigger)\n\
    \            end\n        end\n        return bigger\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppfq2bb1m.lua:29: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = math.min(numbers)\n  local largest = math.max(numbers)\n  local halfway\
    \ = math.abs(smallest - largest) / 2\n  if smallest > largest then\n    -- Smallest\
    \ is larger\n    largest, smallest = smallest, largest\n    halfway, largest,\
    \ smallest = halfway + halfway, largest, smallest\n  elseif smallest == largest\
    \ then\n    largest = halfway\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgb8p9gaj.lua:29: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\t-- The\
    \ next two lines are equivalent to:\n\t-- local x = table.sort(numbers, function(a,b)\
    \ return a-b end)\n\t-- local x = table.sort(numbers, function(a,b) return b then\
    \ a end)\n\tlocal x = table.sort(numbers)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp48m1xddr.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local cur_number = numbers[i]\n    if cur_number < smallest then\n      smallest\
    \ = cur_number\n    elseif cur_number > largest then\n      largest = cur_number\n\
    \    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd2cj3u1.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpwd2cj3u1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ distances = {}\n  local min_distance = tonumber(numbers[1])\n  local min_number\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current_distance = math.abs(numbers[i]\
    \ - min_number)\n    local current_index = i\n    if distances[current_index]\
    \ == nil then\n      distances[current_index] = current_distance\n    elseif current_distance\
    \ < distances[current_index] then\n      distances[current_index] = current_distance\n\
    \      min_number = numbers[i]\n      min_distance = current_distance\n    end\n\
    \  end\n  return min_number, min_distance\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyciv6cfq.lua:28:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpyciv6cfq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ best = {index = 0, value = nil, error = nil}\n\tlocal best_err = math.inf\n\t\
    for i = 1, #numbers-1 do\n\t\tlocal val = numbers[i]\n\t\tlocal err = abs(val\
    \ - numbers[i+1])\n\t\tif err < best_err then\n\t\t\tbest_err = err\n\t\t\tbest.index\
    \ = i\n\t\t\tbest.value = val\n\t\tend\n\tend\n\treturn best.index, best.value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2osehkz4.lua:12:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp2osehkz4.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2osehkz4.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if not\
    \ (#numbers > 2) then return nil end\n  local closest1 = numbers[1]\n  local closest2\
    \ = numbers[1]\n  local closest3 = numbers[1]\n  local closest4 = numbers[1]\n\
    \  local closest5 = numbers[1]\n  local closest6 = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current1 = numbers[i]\n    local current2 = numbers[i - 1]\n \
    \   local current3 = numbers[(i - 1) / 2]\n    local current4 = numbers[(i - 1)\
    \ / 2]\n    local current5 = numbers[(i - 1) / 2 + 1]\n    local current6 = numbers[(i\
    \ - 1) / 2 + 1]\n    -- If the current number is closest to all the others, keep\
    \ it.\n    -- Otherwise, update it based on the neighbors.\n    if current1 ==\
    \ closest1 then\n      if current2 == closest2 and current3 == closest3 then\n\
    \        if current4 == closest4 and current5 == closest5 then\n          if current6\
    \ == closest6 then\n            closest1, closest2 = closest2, closest3\n    \
    \      else\n            closest1, closest2, closest3, closest4, closest5, closest6\
    \ = closest2, closest3, closest4, closest5, closest6\n          end\n        else\n\
    \          closest1, closest2, closest3, closest4, closest5, closest6 = closest2,\
    \ closest3, closest4, closest5, closest6\n        end\n      else\n        closest1,\
    \ closest2, closest3, closest4, closest5, closest6 = closest2, closest3, closest4,\
    \ closest5, closest6\n      end\n    elseif current2 == closest2 then\n      if\
    \ current3 == closest3 and current4 == closest4 then\n        if current5 == closest5\
    \ and current6 == closest6 then\n          closest1, closest2 = closest2, closest3\n\
    \        else\n          closest1, closest2, closest3, closest4, closest5, closest6\
    \ = closest2, closest3, closest4, closest5, closest6\n        end\n      elseif\
    \ current3 == closest3 then\n        if current4 == closest4 and current5 == closest5\
    \ then\n          if current6 == closest6 then\n            closest1, closest2\
    \ = closest2, closest3\n          else\n            closest1, closest2, closest3,\
    \ closest4, closest5, closest6 = closest2, closest3, closest4, closest5, closest6\n\
    \          end\n        elseif current4 == closest4 then\n          if current5\
    \ == closest5 and current6 == closest6 then\n            closest1, closest2 =\
    \ closest2, closest3\n          else\n            closest1, closest2, closest3,\
    \ closest4, closest5, closest6 = closest2, closest3, closest4, closest5, closest6\n\
    \          end\n        elseif current4 == closest4 then\n          if current5\
    \ == closest5 and current6 == closest6 then\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvmv_0pl0.lua:71: 'end' expected (to close 'if' at line 59)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ == 0 then return nil, nil end\n  if #numbers == 1 then return numbers[1], nil\
    \ end\n  local max_d = math.abs(numbers[1])\n  local min_index, min_value = 1,\
    \ numbers[1]\n  for i = 2, #numbers do\n    local d = math.abs(numbers[i])\n \
    \   if d > max_d then\n      max_d = d\n      min_index, min_value = i, numbers[i]\n\
    \    end\n  end\n  return min_value, numbers[min_index]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvnd40w2.lua:25:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmplvnd40w2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ <= 1 then\n    return (numbers[1], numbers[1])\n  end\n  local min_dist = math.abs(numbers[1]\
    \ - numbers[2])\n  local closest_1 = numbers[1]\n  local closest_2 = numbers[1]\n\
    \  for i = 2, #numbers do\n    local dist = math.abs(numbers[i] - numbers[2])\n\
    \    if dist < min_dist then\n      min_dist = dist\n      closest_1 = numbers[i]\n\
    \      closest_2 = numbers[i]\n    else\n      closest_2 = math.min(closest_2,\
    \ closest_1)\n      closest_1 = numbers[i]\n    end\n  end\n  return (closest_2,\
    \ closest_1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv4u2jg6o.lua:9: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ sortedIndices = sort_indices_ascending(numbers)\n    local firstElement = numbers[sortedIndices[1]]\n\
    \    local secondElement = numbers[sortedIndices[#sortedIndices]]\n    return\
    \ (firstElement, secondElement)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfqxyfxk8.lua:11: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsosqyjtu.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2, \"There must be at least two numbers\")\n  local first_smaller, first_larger\
    \ = numbers[1], numbers[#numbers]\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo1t84ayd.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ lowest, largest = nil, math.nan\n    for _, number in pairs(numbers) do\n  \
    \      local distance = math.abs(number - largest)\n        if lowest ~= nil and\
    \ distance < lowest then -- Largest is closer to lowest, no need to search further\n\
    \            largest = number\n        else -- Otherwise just keep track of it\n\
    \            if lowest == nil then -- First iteration\n                lowest\
    \ = number\n            end\n            largest = number\n        end\n    end\n\
    \    return lowest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaq12cai4.lua:10:\
    \ attempt to perform arithmetic on a nil value (local 'largest')\nstack traceback:\n\
    \t/tmp/tmpaq12cai4.lua:10: in local 'candidate'\n\t/tmp/tmpaq12cai4.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   assert(numbers\
    \ and #numbers > 2, 'Must have at least two numbers to compare against')\n   local\
    \ smallest_number = numbers[1]\n   local largest_number = numbers[#numbers]\n\
    \   for index = 2, #numbers do\n      local current_number = numbers[index]\n\
    \      if current_number < smallest_number then\n         smallest_number = current_number\n\
    \      elseif current_number > largest_number then\n         largest_number =\
    \ current_number\n      else\n         break\n      end\n   end\n   return smallest_number,\
    \ largest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ejiq8v3.lua:27:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp0ejiq8v3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number\n  local greatest_number\n  local smallest_index\n  local greatest_index\n\
    \  \n  for i, number in pairs(numbers) do\n    if not smallest_number then\n \
    \     smallest_number = number\n      smallest_index = i\n    elseif not greatest_number\
    \ then\n      greatest_number = number\n      greatest_index = i\n    elseif number\
    \ < smallest_number then\n      smallest_number = number\n      smallest_index\
    \ = i\n    elseif number > greatest_number then\n      greatest_number = number\n\
    \      greatest_index = i\n    end\n  end\n  \n  if smallest_number and greatest_number\
    \ then\n    return smallest_index, greatest_index\n  end\n  \n  return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4u3h61zz.lua:39:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp4u3h61zz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff, min_number = numbers[1], numbers[1]\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgrrhwi6q.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ closest1 = numbers[1]\n\tlocal closest2 = numbers[2]\n\tfor i = 1, #numbers\
    \ do\n\t\tif closest1 == numbers[i] then\n\t\t\treturn closest1, closest2\n\t\t\
    elseif closest2 == numbers[i] then\n\t\t\treturn closest2, closest1\n\t\telse\n\
    \t\t\tif closest1 > numbers[i] then\n\t\t\t\tclosest1 = numbers[i]\n\t\t\telseif\
    \ closest1 < numbers[i] then\n\t\t\t\tclosest2 = numbers[i]\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn closest1, closest2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kdtjxz3.lua:29:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp4kdtjxz3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ min1, max1 = unpack(numbers)\n    local min2, max2 = unpack(numbers)\n    if\
    \ min1 == min2 and min2 > min1 then\n        return min1, min2\n    end\n    if\
    \ min1 > min2 then\n        min1, min2 = min2, min1\n    end\n    if max1 == max2\
    \ then\n        return min1, max1\n    end\n    if max1 > max2 then\n        max1,\
    \ max2 = max2, max1\n    end\n    if min1 == max1 then\n        return min1, min1\n\
    \    end\n    if min1 == max2 then\n        return max1, max1\n    end\n    if\
    \ min2 == max2 then\n        return min2, min2\n    end\n    local mid1 = 0\n\
    \    local mid2 = 0\n    if max2 > max1 then\n        mid1 = max1\n        mid2\
    \ = min2\n    else\n        mid1 = min1\n        mid2 = max2\n    end\n    local\
    \ new_min1 = math.min(min1, mid1)\n    local new_max1 = math.max(max1, mid1)\n\
    \    local new_min2 = math.min(min2, mid2)\n    local new_max2 = math.max(max2,\
    \ mid2)\n    return new_min1, new_max1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy7852nal.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpy7852nal.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpy7852nal.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1)\n  local min1 = numbers[1]\n  local max1 = numbers[1]\n  local min2 = numbers[2]\n\
    \  local max2 = numbers[2]\n  for _, v in ipairs(numbers) do\n    -- If this is\
    \ closer to an already found value than to the current one just add it.\n    if\
    \ min1 == min2 or min1 == max2 or max1 == min2 or max1 == max2 then\n      min1\
    \ = min2 or min1\n      max1 = max2 or max1\n      min2 = min2 or v\n      max2\
    \ = max2 or v\n    else\n      -- If this is closer to the current minimum just\
    \ update it.\n      if min1 < v then\n        min1 = v\n      elseif max1 < v\
    \ then\n        max1 = v\n      end\n      -- If this is closer to the current\
    \ maximum just update it.\n      if min2 < v then\n        min2 = v\n      elseif\
    \ max2 < v then\n        max2 = v\n      end\n    end\n  end\n  return min1, min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6mcqns9.lua:41:\
    \ expected: {3.9, 4}\nactual: 2\nstack traceback:\n\t/tmp/tmpq6mcqns9.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  -- Return\
    \ the smallest number in the list (which is also the closest).\n  if #numbers\
    \ < 2 then return nil end\n  if #numbers == 1 then return numbers end\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_distance = tonumber(numbers[1]) - tonumber(numbers[2])\n  local\
    \ second_smallest_distance = tonumber(numbers[1]) - tonumber(numbers[3])\n  for\
    \ index = 1, #numbers - 1 do\n    if tonumber(numbers[index]) - tonumber(numbers[index\
    \ + 1]) < smallest_distance then\n      second_smallest_number = numbers[index]\n\
    \      second_smallest_distance = tonumber(numbers[index]) - tonumber(numbers[index\
    \ + 1])\n      smallest_distance = tonumber(numbers[index]) - tonumber(numbers[index\
    \ + 1])\n    else\n      second_smallest_number = numbers[index + 1]\n      second_smallest_distance\
    \ = tonumber(numbers[index]) - tonumber(numbers[index + 1])\n    end\n  end\n\
    \  return second_smallest_number, second_smallest_distance\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmin7f8f.lua:31:\
    \ expected: {3.9, 4}\nactual: 2.2\nstack traceback:\n\t/tmp/tmppmin7f8f.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min1, min2 = numbers.min, numbers.min\n  local max1, max2 = numbers.max, numbers.max\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy_vwjx82.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = table.unpack(numbers)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpipiowvvp.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   assert(#numbers\
    \ >= 2)\n   if #numbers == 1 then\n      return numbers[1],numbers[1]\n   end\n\
    \   local smaller\n   local larger\n   local smaller_index = nil\n   local larger_index\
    \ = nil\n   for _, number in ipairs(numbers) do\n      if smaller and larger and\
    \ abs(number - smaller) < abs(number - larger) then\n         smaller_index, larger_index\
    \ = nil, nil\n         break\n      elseif smaller and number > larger then\n\
    \         larger, smaller = number, larger\n         larger_index = nil\n    \
    \  elseif larger and number < smaller then\n         smaller, larger = number,\
    \ smaller\n         smaller_index = nil\n      else\n         smaller, larger\
    \ = number, number\n      end\n   end\n   if smaller_index and larger_index then\n\
    \      return numbers[smaller_index], numbers[larger_index]\n   else\n      return\
    \ smaller, larger\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzbcs2mi.lua:17:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpwzbcs2mi.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpwzbcs2mi.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   local\
    \ sorted = table.sort(numbers)\n   local minimum = sorted[1]\n   local maximum\
    \ = sorted[#sorted]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps0om9t4a.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ function distance(first, second)\n    return math.abs(first - second)\n  end\n\
    \  local first = numbers[1]\n  local last = numbers[#numbers]\n  local indexes\
    \ = {}\n  for i = 1, #numbers do\n    indexes[i] = i\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp00npq6g.lua:28: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    --\
    \ Check if there were enough numbers to do so\n    if #numbers < 2 then\n    \
    \    return nil, nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4i4zzxyu.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min_val = numbers[1]\n  local max_val = numbers[1]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgsgx_3pp.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ function closest_element_pair(number)\n    local lower = numbers[1]\n    local\
    \ higher = numbers[#numbers]\n    for i = 2, #numbers do\n      local d = math.abs(number\
    \ - numbers[i])\n      if d < math.abs(number - lower) then lower = numbers[i]\
    \ end\n      if d < math.abs(number - higher) then higher = numbers[i] end\n \
    \   end\n    return lower, higher\n  end\n  local lower, higher = closest_element_pair(numbers[1])\n\
    \  local i = 0\n  for i = 2, #numbers do\n    local d = math.abs(numbers[i] -\
    \ lower)\n    if d < math.abs(numbers[i] - higher) then break, end\n    lower,\
    \ higher = closest_element_pair(numbers[i])\n  end\n  return lower, higher\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbvqlv5i8.lua:22: unexpected symbol near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return nil, nil\n  end\n  local min_number = tonumber(numbers[1])\n\
    \  local max_number = tonumber(numbers[#numbers])\n  if min_number == max_number\
    \ then\n    return min_number, min_number\n  end\n  local closest, closest2 =\
    \ nil, nil\n  local closest_distance = nil\n  for i = 2, #numbers do\n    local\
    \ current_number = tonumber(numbers[i])\n    if current_number < min_number then\n\
    \      break\n    end\n    if current_number > max_number then\n      break\n\
    \    end\n    local distance = current_number - min_number\n    if distance ==\
    \ 0 then\n      break\n    end\n    if distance ~= closest_distance then\n   \
    \   if closest then\n        return closest, closest2\n      end\n      closest,\
    \ closest2 = current_number, min_number\n      closest_distance = distance\n \
    \   end\n    closest2 = closest2 or current_number\n  end\n  if closest then\n\
    \    return closest, closest2\n  end\n  return nil, nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7b_3j578.lua:48:\
    \ expected: {3.9, 4}\nactual: 2\nstack traceback:\n\t/tmp/tmp7b_3j578.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tif #numbers\
    \ == 1 then\n\t\treturn (numbers[1])\n\tend\n\tlocal closest = numbers[1]\n\t\
    local closest_dist = math.abs(numbers[1])\n\tfor i = 2, #numbers do\n\t\tlocal\
    \ dist = math.abs(numbers[i])\n\t\tif dist < closest_dist then\n\t\t\tclosest\
    \ = numbers[i]\n\t\t\tclosest_dist = dist\n\t\tend\n\tend\n\treturn closest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj_5j59f.lua:26:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpgj_5j59f.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1)\n  local minimum = numbers[1]\n  local maximum = numbers[1]\n  for i =\
    \ 2, #numbers do\n    if minimum > numbers[i] then\n      minimum = numbers[i]\n\
    \    end\n    if maximum < numbers[i] then\n      maximum = numbers[i]\n    end\n\
    \  end\n  return minimum, maximum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwdn7way.lua:25:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpjwdn7way.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpluqxzckk.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ closest_elements\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo5dduvsd.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ lower, upper = numbers[1], numbers[1]\n  for i = 1, #numbers do\n    local lower,\
    \ upper = lower, math.min(upper, numbers[i])\n  end\n  return lower, upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6dv5q7n.lua:18:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpa6dv5q7n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1)\n  local closest = {}\n  local smaller, bigger = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local tmp_smaller = math.abs(numbers[i] - smaller)\n\
    \    local tmp_bigger = math.abs(numbers[i] - bigger)\n    if tmp_smaller > tmp_bigger\
    \ then\n      smaller, bigger = numbers[i], numbers[i]\n    else\n      bigger\
    \ = numbers[i]\n    end\n  end\n  table.insert(closest, smaller)\n  table.insert(closest,\
    \ bigger)\n  return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil52efs1.lua:28:\
    \ expected: {3.9, 4}\nactual: {5, 2.2}\nstack traceback:\n\t/tmp/tmpil52efs1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   assert(type(numbers)\
    \ == 'table')\n   assert(#numbers > 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkji6uhwy.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ sorted_numbers = {}\n    for i = 1, #numbers do\n        table.insert(sorted_numbers,\
    \ numbers[i])\n    end\n    table.sort(sorted_numbers)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6tfluhxh.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest, smallest =\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n        numbers[1],\n        numbers[1],\n\
    \        numbers[1],\n        numbers[1],\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpisfszvl_.lua:111: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  return\
    \ coroutine.wrap(function()\n    local closest_to_first = {}\n    local closest_to_second\
    \ = {}\n    local minimum = {}\n    local maximum = {}\n    for _, number in ipairs(numbers)\
    \ do\n      if minimum[number] == nil then\n        minimum[number] = number\n\
    \        maximum[number] = number\n      elseif maximum[number] < number then\n\
    \        maximum[number] = number\n      else\n        local difference = number\
    \ - minimum[number]\n        if closest_to_first[difference] == nil then\n   \
    \       closest_to_first[difference] = number\n        else\n          local difference\
    \ = number - closest_to_first[difference]\n          if closest_to_second[difference]\
    \ == nil then\n            closest_to_second[difference] = number\n          else\n\
    \            local difference = number - closest_to_second[difference]\n     \
    \       closest_to_first[difference] = number\n            closest_to_second[difference]\
    \ = number\n          end\n        end\n      end\n    end\n    return coroutine.wrap(function()\n\
    \      local minimums = {}\n      local maximums = {}\n      local sorted_by_first\
    \ = {}\n      local sorted_by_second = {}\n      for number = minimum[1], maximum[1]\
    \ do\n        if minimums[number] == nil then\n          minimums[number] = 1\n\
    \          maximums[number] = number\n        elseif maximums[number] < number\
    \ then\n          maximums[number] = number\n        else\n          minimums[number]\
    \ = minimums[number] + 1\n          maximums[number] = maximums[number] + 1\n\
    \        end\n      end\n      for number, count in pairs(minimums) do\n     \
    \   local difference = count - 1\n        local first = closest_to_first[difference]\n\
    \        if first then\n          table.insert(sorted_by_first, first, number)\n\
    \        end\n        local second = closest_to_second[difference]\n        if\
    \ second then\n          table.insert(sorted_by_second, second, number)\n    \
    \    end\n      end\n      for number, count in pairs(sorted_by_first) do\n  \
    \      table.insert(minimums, number)\n      end\n      for number, count in pairs(sorted_by_second)\
    \ do\n        table.insert(maximums, number)\n      end\n      return minimums,\
    \ maximums\n    end)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznu0hw4q.lua:76:\
    \ expected: {3.9, 4}\nactual: function: 0xb88ee0\nstack traceback:\n\t/tmp/tmpznu0hw4q.lua:76:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, smallest_index = table.unpack(numbers)\n  local closest_pairs, closest_pair_index\
    \ = nil, -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvb82x644.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ min1, min2, min1_distance, min2_distance\n    local min1, min2, min1_distance,\
    \ min2_distance\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7o8ntsnw.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min1 = math.min(numbers)\n  local min2 = math.min(numbers)\n  for i = 1, #numbers\
    \ do\n    local v = numbers[i]\n    if v < min1 then\n      min2 = min1\n    \
    \  min1 = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min1, min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0e02yge.lua:12:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpr0e02yge.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpr0e02yge.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ closest = {}\n  for i, n in ipairs(numbers) do\n    local min_distance = math.sqrt(\
    \ math.pow(n - numbers[1], 2) )\n    if closest[i] ~= nil and closest[i] ~= n\
    \ then\n      if closest[i] > n then\n        min_distance = closest[i] - n\n\
    \      else\n        min_distance = n - closest[i]\n      end\n    end\n    closest[i]\
    \ = n\n  end\n  return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgbzgr9l.lua:26:\
    \ expected: {3.9, 4}\nactual: {1, 2, 3.9, 4, 5, 2.2}\nstack traceback:\n\t/tmp/tmpwgbzgr9l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1)\n  local closest_pair = nil\n  local max_diff_so_far = numbers[1]\n  for\
    \ i=1,#numbers do\n    local diff = numbers[i] - numbers[1]\n    if diff > max_diff_so_far\
    \ then\n      max_diff_so_far = diff\n      closest_pair = i\n    end\n  end\n\
    \  return closest_pair, numbers[closest_pair]\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7cev9r_8.lua:20: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest = numbers[1]\n    local largest = numbers[1]\n    for _, value in ipairs(numbers)\
    \ do\n        if smallest > value then\n            largest = smallest\n     \
    \       smallest = value\n        elseif largest < value then\n            largest\
    \ = value\n        end\n    end\n    return smallest, largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ny82zhd.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp4ny82zhd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ closest = {}\n\tlocal closest2 = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\ttable.insert(closest, number)\n\t\ttable.insert(closest2, math.abs(number\
    \ - numbers[1]))\n\tend\n\ttable.sort(closest2, function(a, b)\n\t\treturn b -\
    \ a\n\tend)\n\treturn closest[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40anfk0e.lua:14:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmp40anfk0e.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp40anfk0e.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.inf\n  local min_diff_index\n  local min_diff_value\n  for i\
    \ = 1, #numbers do\n    local diff\n    if i == 1 then\n      diff = numbers[i]\
    \ - numbers[1]\n    else\n      diff = numbers[i] - numbers[i - 1]\n    end\n\
    \    -- If the diff is negative then we found a number smaller than the first.\n\
    \    -- If it is positive then we found a number larger than the first number.\n\
    \    if diff < 0 then\n      -- If this number is smaller then the first number\
    \ we found a smaller number\n      -- so return that (it could be either this\
    \ number or the closest number).\n      if diff < min_diff then\n        min_diff\
    \ = diff\n        min_diff_index = i\n        min_diff_value = numbers[i]\n  \
    \    end\n    else\n      -- If this number is larger than the first number we\
    \ found a larger number\n      -- so return that (it could be either this number\
    \ or the closest number).\n      if diff > min_diff then\n        min_diff = diff\n\
    \        min_diff_index = i\n        min_diff_value = numbers[i]\n      end\n\
    \    end\n  end\n  if min_diff == math.inf then\n    return nil\n  end\n  return\
    \ min_diff_index, min_diff_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1jmsejf6.lua:31:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1jmsejf6.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp1jmsejf6.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   assert(#numbers\
    \ >= 2, 'There must be at least two numbers to compare to')\n   if numbers[1]\
    \ > numbers[2] then\n      local tmp = numbers[1]\n      numbers[1] = numbers[2]\n\
    \      numbers[2] = tmp\n   end\n   local smallest, largest, min_index\n   for\
    \ i = 2, #numbers do\n      if numbers[i] < smallest then\n         smallest =\
    \ numbers[i]\n         min_index = i\n      end\n      if numbers[i] > largest\
    \ then\n         largest = numbers[i]\n      end\n   end\n   return numbers[min_index],\
    \ numbers[#numbers]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqhglyk_u.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqhglyk_u.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpqhglyk_u.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_element = nil\n  local smallest_index\
    \ = nil\n  local second_smallest_distance = nil\n  local second_smallest_element\
    \ = nil\n  local second_smallest_index = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptf0ibbva.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ function distance(number)\n    return math.sqrt(math.pow(number, 2) and math.pow(number,\
    \ 2))\n  end\n  local smallest = numbers[1]\n  local largest = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if distance(numbers[i]) < distance(largest) then\n \
    \     largest = numbers[i]\n    elseif distance(numbers[i]) > distance(smallest)\
    \ then\n      smallest = numbers[i]\n    end\n  end\n  return smallest, largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9pq6fli.lua:26:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpr9pq6fli.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ best_first, best_second = nil, nil\n  for _, number in ipairs(numbers) do\n\
    \    if best_first == nil or best_second == nil then\n      -- Start with first\
    \ element\n      best_first = number\n      best_second = number\n    elseif number\
    \ < best_first then\n      -- Keep the larger element\n      best_second = best_first\n\
    \      best_first = number\n    elseif best_first < number then\n      -- Keep\
    \ the larger element\n      best_second = number\n    end\n  end\n  return best_first,\
    \ best_second\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleso5rjo.lua:29:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpleso5rjo.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   assert(#numbers\
    \ > 1, \"find_closest_elements needs at least one argument\")\n   local min_value\
    \ = numbers[1]\n   local max_value = numbers[1]\n   local closest_value = numbers[1]\n\
    \   for i=2,#numbers do\n      if numbers[i] < min_value then\n         min_value\
    \ = numbers[i]\n      elseif numbers[i] > max_value then\n         max_value =\
    \ numbers[i]\n      else\n         -- If we found the min and max we still have\
    \ to find the closer value.\n         -- Let's first check if the diff between\
    \ the min and max is larger than\n         -- a third of the diff between them.\n\
    \         if numbers[i]-min_value > max_value-min_value then\n            closest_value\
    \ = numbers[i]\n         else\n            -- Otherwise we check if it's closer\
    \ to one of the two extremes.\n            if min_value < max_value then\n   \
    \            closest_value = min_value + (max_value-min_value)/3\n           \
    \ else\n               closest_value = max_value - (min_value-max_value)/3\n \
    \           end\n         end\n      end\n   end\n   return closest_value\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5liqa72.lua:39:\
    \ expected: {3.9, 4}\nactual: 2.3333333333333\nstack traceback:\n\t/tmp/tmpu5liqa72.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {}\n    local closest_dist = math.inf\n    for _, number\
    \ in ipairs(numbers) do\n        local dist = math.abs(number)\n        if dist\
    \ < closest_dist then\n            closest_elements = {number}\n            closest_dist\
    \ = dist\n        elseif dist == closest_dist then\n            table.insert(closest_elements,\
    \ number)\n        end\n    end\n    table.sort(closest_elements)\n    return\
    \ closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaij31boa.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpaij31boa.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpaij31boa.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  -- Sort\
    \ the numbers according to their distance from each other\n  -- The two nearest\
    \ numbers get placed in an alternating pattern of indices in the array.\n  --\
    \ This pattern will be repeated as needed to match the number of numbers supplied\
    \ in the list.\n  -- >>> find_closest_elements([0.2, 1.0, 4.0, 2.2, 5.0])\n  --\
    \ (1.0, 4.0)\n  -- >>> find_closest_elements([0.2, 1.0, 4.0, 2.2, 5.0])\n  --\
    \ (1.0, 4.0)\n  local sorted_indices = {}\n  -- Store the two nearest numbers\
    \ into an array and sort it by index\n  -- The first index will be the number\
    \ with the smallest difference (distance between them in the sorted array)\n \
    \ -- The second index will be the number with the largest difference (distance\
    \ between them in the sorted array)\n  -- >>> find_closest_elements([0.2, 1.0,\
    \ 4.0, 2.2, 5.0])\n  -- (1.0, 4.0)\n  -- >>> find_closest_elements([0.2, 1.0,\
    \ 4.0, 2.2, 5.0])\n  -- (1.0, 4.0)\n  local function get_sorted_indices(i, j,\
    \ numbers)\n    sorted_indices[i] = sorted_indices[j] or {}\n    local min_index\
    \ = j\n    local max_index = i\n    for k = i + 1, #numbers do\n      if numbers[k]\
    \ < numbers[min_index] then\n        min_index = k\n      end\n      if numbers[k]\
    \ > numbers[max_index] then\n        max_index = k\n      end\n      table.insert(sorted_indices[k],\
    \ k)\n    end\n    return min_index, max_index\n  end\n  -- Now sort the array\n\
    \  for i=1, #numbers do\n    -- Get the indices of the two closest numbers, one\
    \ for each index\n    -- The indices are ordered by index first, then by the value\
    \ of the number at that index\n    local min_index, max_index = get_sorted_indices(i,\
    \ i, numbers)\n    -- Swap the two closest numbers\n    local swap_i = numbers[min_index]\n\
    \    numbers[min_index] = numbers[max_index]\n    numbers[max_index] = swap_i\n\
    \  end\n  -- Return the first two values in sorted array\n  return sorted_indices[1][1],\
    \ sorted_indices[1][2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpurbpny8l.lua:34:\
    \ bad argument #1 to 'insert' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpurbpny8l.lua:34: in local 'get_sorted_indices'\n\t/tmp/tmpurbpny8l.lua:42:\
    \ in local 'candidate'\n\t/tmp/tmpurbpny8l.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuw1egjil.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   local\
    \ mindist = numbers[1] - numbers[1]\n   local minval = 0\n   local minidx = 1\n\
    \   for idx = 2, #numbers do\n      local dist = numbers[idx] - numbers[idx]\n\
    \      if dist == 0 then\n         return nil\n      end\n      if dist < 0 then\n\
    \         return nil\n      end\n      local val = dist / mindist\n      if minval\
    \ == 0 or val < minval then\n         minval = val\n         minidx = idx\n  \
    \    end\n   end\n   return numbers[minidx], numbers[minidx+1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yco7h6b.lua:31:\
    \ expected: {3.9, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp2yco7h6b.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\t-- This\
    \ algorithm is adapted from Robert Sedgewick's work of O'Leary.\n\t-- The algorithm\
    \ first selects the closest element from the given list.\n\t-- It then finds the\
    \ element in the list that is closest to the previous element\n\t-- (this assumes\
    \ that the first element is closest to itself).\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb79av9_l.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = nil, nil\n  for i = 0, #numbers - 1 do\n    if smallest\
    \ == nil then\n      smallest = numbers[i]\n      largest = numbers[i]\n    else\n\
    \      local diff = numbers[i] - largest\n      if diff < smallest then\n    \
    \    smallest = diff\n        largest = numbers[i]\n      else\n        if diff\
    \ > largest then\n          largest = diff\n        end\n      end\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpliq8877i.lua:31:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpliq8877i.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ n1, n2 = numbers[1],numbers[2]\n    local diff1 = math.abs(n1 - n2)\n    local\
    \ diff2 = math.abs(n2 - n1)\n    if diff1 < diff2 then\n        return numbers[1],\
    \ numbers[2]\n    else\n        return numbers[2], numbers[1]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcz963xg9.lua:21:\
    \ expected: {3.9, 4}\nactual: 2\nstack traceback:\n\t/tmp/tmpcz963xg9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(numbers[1]\
    \ < numbers[#numbers])\n  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local element = numbers[i]\n    if element < smallest\
    \ then\n      largest = element\n    elseif element > largest then\n      largest\
    \ = element\n      smallest = element\n    end\n  end\n  return smallest, largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnix2foep.lua:25:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpnix2foep.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return nil, \"Need at least two numbers to find closest to\"\n\
    \  end\n  local smallest = numbers[1]\n  local smallest_idx = 1\n  local max_idx\n\
    \  local max_number\n  local i = 0\n  for i = 2, #numbers, 2 do\n    if numbers[i]\
    \ < smallest then\n      smallest = numbers[i]\n      smallest_idx = i\n    end\n\
    \    if max_number and numbers[i] > max_number then\n      max_number = numbers[i]\n\
    \      max_idx = i\n    end\n  end\n  return smallest, numbers[smallest_idx],\
    \ max_number, numbers[max_idx]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpho54ggq3.lua:32:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpho54ggq3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2, 'This function takes at least two arguments')\n  assert(type(numbers[1])\
    \ == 'number', 'Second argument must be a number')\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp994pm7nv.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ distances = {}\n  for i = 1, #numbers do\n    local dist = math.sqrt( (numbers[i]-numbers[1])^2\
    \ + (numbers[i+1]-numbers[2])^2 )\n    table.insert(distances, dist)\n  end\n\
    \  table.sort(distances)\n  return numbers[#distances[1]], numbers[#distances[1]+1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptdug6dax.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmptdug6dax.lua:10: in local 'candidate'\n\t/tmp/tmptdug6dax.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ closest_numbers = {}\n  local min_number = math.min(numbers)\n  local max_number\
    \ = math.max(numbers)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphmf5wgcl.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   local\
    \ min = table.min(numbers)\n   local max = table.max(numbers)\n   if min == max\
    \ then return min, max end\n   local mid = (min + max)/2\n   return mid, find_closest_elements(numbers,\
    \ min, mid, max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6em6xqso.lua:8:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp6em6xqso.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp6em6xqso.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 0)\n  local i = 1\n  local previous, current = numbers[1],numbers[1]\n  while\
    \ i <= #numbers do\n    local value = numbers[i]\n    local difference = current\
    \ - value\n    if difference < previous then\n      previous, current = value,\
    \ difference\n    else\n      i = 1\n      previous, current = numbers[i], numbers[i]\n\
    \    end\n  end\n  return previous\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ minimum = numbers[1]\n    local maximum = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < minimum then\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum then\n            maximum = numbers[i]\n\
    \        end\n    end\n    return minimum, maximum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphtv3b9p.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpphtv3b9p.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_element_numbers, closest_element_distances = {}, {}\n    local smallest_distance\
    \ = math.huge\n    local smallest_index\n    for index, element in ipairs(numbers)\
    \ do\n        local distance_to_element = math.abs(element - numbers[1])\n   \
    \     if smallest_distance > distance_to_element then\n            smallest_distance\
    \ = distance_to_element\n            smallest_index = index\n        end\n   \
    \     table.insert(closest_element_numbers, element)\n        table.insert(closest_element_distances,\
    \ distance_to_element)\n    end\n    return closest_element_numbers[smallest_index],\
    \ closest_element_distances[smallest_index]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrx9bmg7.lua:26:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpqrx9bmg7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    --\
    \ For each number in numbers, find the smallest and largest numbers to the\n \
    \   -- left and right of it.  Return the smallest and largest numbers.\n    local\
    \ minnum = math.inf\n    local maxnum = -math.inf\n    local left = {}\n    local\
    \ right = {}\n    for i = 1, #numbers do\n        if numbers[i] <= minnum then\n\
    \            table.insert(left, numbers[i])\n        elseif numbers[i] >= maxnum\
    \ then\n            table.insert(right, numbers[i])\n        else\n          \
    \  local minpos = i - 1\n            local maxpos = i\n            while minpos\
    \ >= 0 and numbers[minpos] < numbers[i] do\n                minpos = minpos -\
    \ 1\n            end\n            while maxpos < #numbers and numbers[maxpos]\
    \ > numbers[i] do\n                maxpos = maxpos + 1\n            end\n    \
    \        if minpos >= 0 and maxpos < #numbers then\n                table.insert(left,\
    \ numbers[i])\n                table.insert(right, numbers[maxpos])\n        \
    \    end\n        end\n    end\n    return table.concat({left, right}, 2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp65wtvx4i.lua:11:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmp65wtvx4i.lua:11: in local 'candidate'\n\t/tmp/tmp65wtvx4i.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return nil, nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp25n903g7.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  -- If\
    \ there is only one number, then return it in order\n  if #numbers < 2 then\n\
    \    return numbers[1], numbers[1]\n  end\n  -- Sort and find two closest numbers\n\
    \  table.sort(numbers)\n  local first = numbers[1]\n  local second = numbers[#numbers]\n\
    \  -- If two numbers are equidistant, return one that comes first\n  if second\
    \ - first == 0 then\n    return first, second\n  end\n  -- If the difference between\
    \ the two numbers is greater than 0, return the first one\n  if second - first\
    \ > 0 then\n    return first, second\n  end\n  -- If the difference between the\
    \ two numbers is smaller than 0, return the second one\n  if first - second <\
    \ 0 then\n    return second, first\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4pvnq5e.lua:33:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpj4pvnq5e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ minimum, maximum = numbers[1], numbers[#numbers]\n    if minimum == nil then\
    \ minimum, maximum = numbers[1], numbers[1] end\n    for _, number in pairs(numbers)\
    \ do\n        if number < minimum then\n            minimum, maximum = number,\
    \ number\n        end\n        if number > maximum then\n            minimum,\
    \ maximum = number, number\n        end\n    end\n    return minimum, maximum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q4iajvt.lua:24:\
    \ expected: {3.9, 4}\nactual: 2.2\nstack traceback:\n\t/tmp/tmp6q4iajvt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tassert(#numbers\
    \ >= 2, 'Must be 2 or more numbers')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp89cbe7x.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if numbers[1]\
    \ > numbers[#numbers] then\n    return nil, numbers[#numbers]\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_36n7da1.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest, largest = numbers[1], numbers[2]\n    local difference = math.abs(largest\
    \ - smallest)\n    for idx = 4, 1, -1 do\n        if math.abs(numbers[idx] - smallest)\
    \ < difference then\n            smallest = numbers[idx]\n        else\n     \
    \       difference = math.abs(largest - smallest)\n        end\n    end\n    return\
    \ smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnncmeop.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpgnncmeop.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2, \"find_closest_elements requires a minimum length of two\")\n  return\
    \ function(n)\n    local smallest, largest = numbers[1], numbers[1]\n    local\
    \ i = 1\n    while i < #numbers and n < numbers[i] do\n      local d = numbers[i]\
    \ - n\n      if d < smallest then smallest, largest = d, n end\n      i = i +\
    \ 1\n    end\n    return largest, smallest\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cmlhnd6.lua:24:\
    \ expected: {3.9, 4}\nactual: function: 0x1f53220\nstack traceback:\n\t/tmp/tmp6cmlhnd6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min1, max1 = numbers[1], numbers[#numbers]\n  local min2, max2 = numbers[#numbers],\
    \ numbers[1]\n  for _, i in ipairs(numbers, 2) do\n    if min1 == nil or i > min1\
    \ then\n      min1 = i\n    end\n    if max1 == nil or i < max1 then\n      max1\
    \ = i\n    end\n    if min2 == nil or i > min2 then\n      min2 = i\n    end\n\
    \    if max2 == nil or i < max2 then\n      max2 = i\n    end\n  end\n  if min1\
    \ == nil and max1 == nil then\n    return nil, nil\n  end\n  return min1, min2,\
    \ max1, max2\nend\n</textarea>\n  </div>\n</div>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ycbv1cj.lua:29: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1, \"find_closest_elements() expects a list of numbers\")\n  local function\
    \ distance(number)\n    return math.abs(number - numbers[1])\n  end\n  local index\
    \ = 1\n  local current_distance = distance(numbers[1])\n  local result = {}\n\
    \  repeat\n    -- Find the smallest element that is at least as far away from\
    \ the next in numbers as the current one.\n    local found = false\n    for _,\
    \ number in ipairs(numbers) do\n      if number > numbers[index + (#numbers -\
    \ 1)] then\n        break\n      elseif number ~= numbers[index + (#numbers -\
    \ 1)] and distance(number) <= current_distance then\n        current_distance\
    \ = distance(number)\n        index = index + #numbers + 1\n        found = true\n\
    \        break\n      end\n    end\n  until not found\n  if index <= #numbers\
    \ then\n    -- Return the two numbers in order (smaller number, larger number).\n\
    \    table.insert(result, numbers[#numbers], numbers[#numbers - 1])\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08f6sdqm.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp08f6sdqm.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp08f6sdqm.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ smallest, largest = numbers[1], numbers[#numbers][3]\n\tfor i = 2, #numbers\
    \ do\n\t\tlocal n = numbers[i]\n\t\tif n < smallest then\n\t\t\tsmallest = n\n\
    \t\telseif n > largest then\n\t\t\tlargest = n\n\t\tend\n\tend\n\treturn largest,\
    \ smallest -- largest, smallest in order\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnont2p3.lua:8:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpnnont2p3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpnnont2p3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tif #numbers\
    \ == 0 then return nil end\n\tlocal smallest, largest = numbers[1], numbers[1]\n\
    \tfor i = 2, #numbers do\n\t\tif numbers[i] < smallest then\n\t\t\tsmallest =\
    \ numbers[i]\n\t\telseif numbers[i] > largest then\n\t\t\tlargest = numbers[i]\n\
    \t\tend\n\tend\n\tif smallest > largest then largest, smallest = smallest, largest\
    \ end\n\treturn largest, smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt594v2jk.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpt594v2jk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  -- The\
    \ algorithm works by using the Euclidean distance formula to find the distance\n\
    \  -- between two points in the list (Xi, Yi). The point with the smallest distance\
    \ is returned\n  -- and the second point is returned. This repeats until only\
    \ two points are left.\n  local min_distance\n  local min_dist_index\n  for i\
    \ = 2, #numbers do\n    local distance = math.sqrt(math.pow(numbers[1] - numbers[i],\
    \ 2) + math.pow(numbers[#numbers - 1] - numbers[i - 1], 2))\n    if min_distance\
    \ == nil or distance < min_distance then\n      min_distance = distance\n    \
    \  min_dist_index = i\n    end\n  end\n  \n  -- Return the first and second numbers\
    \ in the list, in order\n  return numbers[min_dist_index], numbers[#numbers -\
    \ 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_8mh47p.lua:28:\
    \ expected: {3.9, 4}\nactual: 2.2\nstack traceback:\n\t/tmp/tmpy_8mh47p.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   -- Ensure\
    \ that all arguments are of length at least two.\n   assert(#numbers > 1)\n  \
    \ local smaller_number, larger_number = numbers[1], numbers[1]\n   -- Loop over\
    \ all but the first element, ignoring the first element itself,\n   -- so that\
    \ each element in the array is compared to only the second element.\n   for i\
    \ = 2, #numbers do\n      smaller_number, larger_number = larger_number, numbers[i]\n\
    \   end\n   -- Return the smallest number and the next smallest number.\n   return\
    \ smaller_number, larger_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3r933kj.lua:23:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpu3r933kj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_distance = tonumber(numbers[1])\n    local second_smallest_distance\n\
    \    local smallest_number = numbers[1]\n    local second_smallest_number\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0mllygnu.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ closest1 = numbers[1]\n    local closest2 = numbers[1]\n    for i = 2, #numbers\
    \ do\n        local diff = numbers[i] - closest1\n        if diff < closest1 then\n\
    \            closest1 = diff\n        elseif diff > closest2 then\n          \
    \  closest2 = diff\n        else\n            -- Do nothing, elements are already\
    \ in order\n        end\n    end\n    return closest1, closest2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50axvwye.lua:26:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp50axvwye.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ mins = {}\n    local maxes = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw0ljoh6l.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then return nil end\n  local minimum = math.min(numbers[1])\n  local maximum\
    \ = math.max(numbers[1])\n  local closest1 = numbers[1]\n  local closest2 = numbers[1]\n\
    \  local i = 2\n  while i < #numbers do\n    -- if we're still not past the end\
    \ of the supplied list of numbers, continue\n    if numbers[i] < minimum then\n\
    \      i = i + 1\n      continue\n    end\n    -- if the new element in the supplied\
    \ list becomes the new minimum, stop looking\n    if numbers[i] == minimum then\n\
    \      break\n    end\n    -- if the new element in the supplied list becomes\
    \ the new maximum, stop looking\n    if numbers[i] == maximum then\n      break\n\
    \    end\n    -- otherwise compare the new element with the existing minimum to\
    \ see if it's the new minimum\n    if numbers[i] < minimum then\n      minimum\
    \ = numbers[i]\n      closest1 = numbers[i]\n    end\n    -- otherwise compare\
    \ the new element with the existing maximum to see if it's the new maximum\n \
    \   if numbers[i] > maximum then\n      maximum = numbers[i]\n      closest2 =\
    \ numbers[i]\n    end\n    i = i + 1\n  end\n  -- return the two closest numbers\
    \ in the supplied list\n  return (closest1, closest2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_n3gau8q.lua:19: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min_index = 1\n  local max_index = #numbers\n  while min_index <= max_index\
    \ do\n    local m = math.floor( (min_index + max_index) / 2)\n    if numbers[m]\
    \ < numbers[min_index] then\n      min_index = m + 1 -- Ignore this number\n \
    \   elseif numbers[m] > numbers[max_index] then\n      max_index = m - 1 -- Ignore\
    \ this number\n    else\n      return numbers[m], numbers[m+1]\n    end\n  end\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vp_faj0.lua:26:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp4vp_faj0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   if numbers[1]\
    \ ~= numbers[#numbers] then\n      -- Difference between the first and last number\
    \ in the array is the difference\n      -- to each other.\n      local delta,\
    \ closest = numbers[1], numbers[#numbers]\n      for i = 1, #numbers do\n    \
    \     -- If the distance between the current and the next number is less than\
    \ the\n         -- distance to the previous number then we know that the current\
    \ number is\n         -- closer than the last number in the array. So we just\
    \ update the\n         -- difference and close the gap.\n         if numbers[i]\
    \ - delta * (#numbers - i - 1) < closest then\n            closest = numbers[i]\
    \ - delta * (#numbers - i - 1)\n            delta = numbers[i]\n         end\n\
    \      end\n      return delta, closest\n   end\n   -- If the first and last numbers\
    \ are the same, then the difference between\n   -- the first and the second is\
    \ equal to the difference between the second and\n   -- the third. In this case\
    \ we just return the second number in the array.\n   return numbers[1] - numbers[2],\
    \ numbers[2] - numbers[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0x0rjbcx.lua:33:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp0x0rjbcx.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ function compare(x, y)\n    if x == y then return 0 end\n    if x < y then return\
    \ -1 end\n    return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpybrlz17f.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ == 1 then\n    return numbers\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1uognyih.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ function distance(index1, index2)\n        return math.abs(numbers[index1] -\
    \ numbers[index2])\n    end\n    local closest = numbers.sort()\n    local closest\
    \ = closest[1]\n    for i = 2, #closest do\n        if distance(closest[1], closest[i])\
    \ < distance(closest[1], closest[i - 1]) then\n            closest = closest[1..i]\n\
    \        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp319y58ix.lua:15: malformed number near '1..'\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ max_idx = nil\n    local min_idx = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd3fbzmac.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ function distance(first, second)\n    return math.abs(first - second)\n  end\n\
    \  local minimum = numbers[1]\n  local maximum = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local distance = distance(numbers[i], minimum)\n    if distance < distance\
    \ then\n      minimum = numbers[i]\n    end\n    if distance > distance then\n\
    \      maximum = numbers[i]\n    end\n  end\n  return minimum, maximum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5w0e2ik.lua:28:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpo5w0e2ik.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ max_diff = 0\n    for _, number in ipairs(numbers) do\n        local diff =\
    \ (number - numbers[1])\n        if diff > max_diff then\n            max_diff\
    \ = diff\n        end\n    end\n    return numbers[1], numbers[#numbers]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe0mah5w.lua:21:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmppe0mah5w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if not\
    \ numbers then\n    return nil\n  end\n  if #numbers < 2 then\n    return numbers\n\
    \  end\n  local smallest_number = math.min(numbers)\n  local next_smallest_number\
    \ = math.min(numbers)\n  local max_element = numbers[#numbers]\n  for _, number\
    \ in ipairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > next_smallest_number then\n      next_smallest_number\
    \ = number\n    end\n    if next_smallest_number == max_element then\n      return\
    \ smallest_number, number\n    end\n  end\n  return smallest_number, next_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqyzl6kv.lua:18:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpqqyzl6kv.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpqqyzl6kv.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ minimum = numbers[1]\n  local minimum_index = 2 -- For comparison purposes.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxi4d2inv.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = math.nan, math.nan\n  for _, number in pairs(numbers) do\n\
    \    if smallest == math.nan or smallest > number then\n      smallest = number\n\
    \    end\n    if largest == math.nan or largest < number then\n      largest =\
    \ number\n    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ioj34ry.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp2ioj34ry.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ == 0 then\n    return nil, nil -- Empty list\n  elseif #numbers == 1 then\n\
    \    return numbers[1], numbers[1] -- Return pair\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmuhn3nfn.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ minimum = nil\n  local maximum = nil\n  local number\n  for _, number in ipairs(numbers)\
    \ do\n    if minimum == nil then\n      minimum = number\n      maximum = number\n\
    \    elseif number < minimum then\n      minimum = number\n    elseif number >\
    \ maximum then\n      maximum = number\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmfpbu_jl.lua:32: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ closest_elements = {}\n  for i, number in ipairs(numbers) do\n    local closest_value\
    \ = nil\n    for j, other_number in ipairs(numbers) do\n      -- If the current\
    \ number is equal to the other number, we still need to check that its value is\n\
    \      -- larger than the other number's value\n      if number == other_number\
    \ then\n        -- The current number is equal to the other number so the next\
    \ check should be whether the\n        -- other number is larger than the current\
    \ number\n        if other_number > number then\n          closest_value = other_number\n\
    \          break\n        end\n      elseif other_number > number then\n     \
    \   -- If the other number is the same or larger than the current number, we should\
    \ check it's\n        -- value is greater than the current number's value by checking\
    \ both directions\n        if other_number < closest_value or (other_number ==\
    \ closest_value and other_number < number) then\n          closest_value = other_number\n\
    \          break\n        end\n      end\n    end\n    table.insert(closest_elements,\
    \ closest_value)\n  end\n  return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb17svp9q.lua:24:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpb17svp9q.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpb17svp9q.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if not\
    \ numbers or #numbers < 2 then return nil end\n  local i = 1\n  local closest\n\
    \  local closestDistance\n  while i < #numbers and #closest < 2 do\n    local\
    \ currentDistance = math.sqrt(math.pow(numbers[i] - numbers[i - 1], 2) + math.pow(numbers[i]\
    \ - numbers[i - 2], 2))\n    if currentDistance < closestDistance then\n     \
    \ closest = numbers[i]\n      closestDistance = currentDistance\n    end\n   \
    \ i = i + 2\n  end\n  return closest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu_qnucqx.lua:12:\
    \ attempt to get length of a nil value (local 'closest')\nstack traceback:\n\t\
    /tmp/tmpu_qnucqx.lua:12: in local 'candidate'\n\t/tmp/tmpu_qnucqx.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ lower = math.min(numbers)\n\tlocal upper = math.max(numbers)\n\tlocal result\
    \ = {}\n\tfor i = lower, upper do\n\t\tif numbers[i] ~= lower then\n\t\t\ttable.insert(result,\
    \ numbers[i])\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1l_qlzis.lua:11:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmp1l_qlzis.lua:11: in\
    \ local 'candidate'\n\t/tmp/tmp1l_qlzis.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest, largest = math.abs(numbers[1]), math.abs(numbers[#numbers])\n    if\
    \ smallest > largest then\n        largest, smallest = smallest, largest\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}),\
    \ {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}),\
    \ {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2,\
    \ 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj11eoktd.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2)\n  local lowest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local distance = numbers[i] - lowest\n    if distance <\
    \ smallest then\n      largest = smallest\n    elseif distance > largest then\n\
    \      largest = distance\n    end\n    lowest = numbers[i]\n  end\n  assert(smallest\
    \ ~= largest and smallest > 0)\n  return largest, smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp9nat6u8.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpp9nat6u8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpp9nat6u8.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then return nil, numbers[1] end\n  if #numbers == 1 then return nil, numbers[1]\
    \ end\n  if numbers[1] - numbers[1]^2 <= numbers[2] - numbers[2]^2 then return\
    \ numbers, nil end\n  if numbers[#numbers-1] - numbers[#numbers-1]^2 <= numbers[#numbers-2]\
    \ - numbers[#numbers-2]^2 then return nil, numbers[#numbers] end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwn56tulk.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ sorted_numbers = table.sort(numbers)\n\tlocal nearest_index = 1 -- Start with\
    \ first element\n\tlocal smallest_distance = sorted_numbers[1] -- Start with first\
    \ element distance\n\tlocal closest_element = sorted_numbers[nearest_index] --\
    \ Start with first element (closest element)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu7iga0oo.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    --\
    \ If there is only one item in the list, return it.\n    if #numbers == 1 then\n\
    \        return numbers[1]\n    end\n    -- Find the smallest element in the list.\n\
    \    local smallest = numbers[1]\n    -- Find the second smallest element in the\
    \ list.\n    for i = 2, #numbers do\n        local element = numbers[i]\n    \
    \    if element < smallest then\n            smallest = element\n        end\n\
    \    end\n    -- Return the smallest and the second smallest element.\n    return\
    \ smallest, numbers[#numbers]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrkztmbm.lua:28:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpjrkztmbm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(numbers[1])\n\
    \  assert(numbers[#numbers])\n  local i = 1\n  local smallest, largest = numbers[i],\
    \ numbers[i]\n  while i < #numbers do\n    if numbers[i] < smallest then\n   \
    \   smallest = numbers[i]\n    end\n    if smallest == largest then return (largest,\
    \ largest) end\n    largest = numbers[i]\n    i = i + 1\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkvoc2ook.lua:16: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    --\
    \ If list is empty, return empty.\n    if numbers[1] == nil then return ({}) end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk6c78p0u.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ function find_closest(one, two)\n    if one == nil then\n      return two\n\
    \    end\n    local difference = math.abs(one - two)\n    if difference ~= 0 then\n\
    \      if difference < min_differences[one] then\n        min_differences[one]\
    \ = difference\n        min_values[one] = one\n      end\n      if difference\
    \ < min_differences[two] then\n        min_differences[two] = difference\n   \
    \     min_values[two] = two\n      end\n    end\n    return one\n  end\n  if #numbers\
    \ < 2 then\n    return nil\n  end\n  local min_differences = {}\n  local min_values\
    \ = {}\n  local min_value = numbers[1]\n  for i = 2, #numbers do\n    min_value\
    \ = find_closest(min_value, numbers[i])\n  end\n  return min_value, min_values[min_value]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_6eyqi2.lua:14:\
    \ attempt to index a nil value (global 'min_differences')\nstack traceback:\n\t\
    /tmp/tmpj_6eyqi2.lua:14: in local 'find_closest'\n\t/tmp/tmpj_6eyqi2.lua:32: in\
    \ local 'candidate'\n\t/tmp/tmpj_6eyqi2.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1)\n  local smallest = numbers[1]\n  local largest = numbers[1]\n  for _,\
    \ num in pairs(numbers) do\n    if smallest > num then\n      smallest = num\n\
    \    end\n    if largest < num then\n      largest = num\n    end\n  end\n  return\
    \ smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_dh_0jkw.lua:25:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp_dh_0jkw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tif #numbers\
    \ == 0 then\n\t\treturn nil, nil\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0fx_wncu.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ closest = nil\n  local smallest = nil\n  local largest = nil\n  for _, v in\
    \ pairs(numbers) do\n    if smallest == nil or smallest > v then\n      smallest\
    \ = v\n    end\n    if largest == nil or largest < v then\n      largest = v\n\
    \    end\n  end\n  if smallest ~= nil and largest ~= nil then\n    return smallest,\
    \ largest\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizwqt6ja.lua:28:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpizwqt6ja.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ num_pairs = math.fsum(numbers)\n\tif num_pairs <= 2 then\n\t\treturn numbers[1]\n\
    \tend\n\tlocal index\n\tlocal pairs = nil\n\tlocal min_diff = math.inf\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvnjjhc_q.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = nil, nil -- The smallest and the largest number to be returned\n\
    \  local smallest_index, largest_index = nil, nil -- The index in the array of\
    \ the smallest and largest numbers to be returned\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwcg3056x.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ minimum1, minimum2, minimum3 = unpack(numbers[1])\n\tfor i = 2, #numbers do\n\
    \t\tlocal minimum, maximum, current1, current2 = unpack(numbers[i])\n\t\tif minimum\
    \ == nil then minimum, maximum = current1, current2\n\t\telse minimum, maximum\
    \ = minimum or current1, minimum or maximum\n\tend\n\tlocal minimum4, minimum5,\
    \ minimum6 = minimum2, minimum2, minimum2\n\tfor i = 2, #numbers do\n\t\tlocal\
    \ minimum, maximum, current1, current2 = unpack(numbers[i])\n\t\tif minimum ==\
    \ nil then minimum, maximum = current1, current2\n\t\telse minimum, maximum =\
    \ minimum or current1, minimum or maximum\n\tend\n\tif minimum1 < minimum2 and\
    \ minimum1 < minimum3 then\n\t\treturn minimum1, minimum2\n\telseif minimum2 <\
    \ minimum1 and minimum2 < minimum3 then\n\t\treturn minimum2, minimum1\n\telseif\
    \ minimum3 < minimum1 and minimum3 < minimum2 then\n\t\treturn minimum3, minimum1\n\
    \tend\n\tif minimum4 < minimum5 and minimum4 < minimum6 then\n\t\treturn minimum4,\
    \ minimum5\n\telseif minimum5 < minimum4 and minimum5 < minimum6 then\n\t\treturn\
    \ minimum5, minimum4\n\telseif minimum6 < minimum4 and minimum6 < minimum5 then\n\
    \t\treturn minimum6, minimum4\n\tend\n\treturn minimum2, minimum3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy3eigrdv.lua:47: 'end' expected (to close 'for' at line 9)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return nil, nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr78ujb9u.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ best_first = nil\n  local best_second = nil\n  for _, number in pairs(numbers)\
    \ do\n    local min_distance = nil\n    if best_first == nil then\n      -- The\
    \ first element\n      min_distance = numbers[1] - number\n    else\n      --\
    \ The second element\n      local distance = numbers[1] - best_first\n      if\
    \ distance < min_distance then\n        best_first = best_second\n        best_second\
    \ = number\n        min_distance = distance\n      else\n        -- Do nothing,\
    \ already found the best element\n      end\n    end\n  end\n  return best_first,\
    \ best_second\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps12v0im0.lua:33:\
    \ expected: {3.9, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmps12v0im0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ closest_numbers = {}\n  local closest_index = {}\n  for _, value in pairs(numbers)\
    \ do\n    local closest_number = numbers[1]\n    local closest_index = numbers[1]\n\
    \    for _, number in pairs(numbers) do\n      if closest_number < number then\n\
    \        closest_number = number\n        closest_index = number\n      end\n\
    \    end\n    closest_numbers[#closest_numbers + 1] = closest_number\n    closest_index[#closest_index\
    \ + 1] = closest_index\n  end\n  return closest_numbers, closest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mriw7qn.lua:20:\
    \ attempt to get length of a number value (local 'closest_index')\nstack traceback:\n\
    \t/tmp/tmp4mriw7qn.lua:20: in local 'candidate'\n\t/tmp/tmp4mriw7qn.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then return nil, nil end\n  local closest, smallest, largest, closest_count,\
    \ closest_values = {}, numbers[1], numbers[1], 1\n  for i = 2, #numbers do\n \
    \   local current_value = numbers[i]\n    local current_count, current_values\
    \ = tonumber(closest[current_value]), closest[current_value]\n    if current_count\
    \ > 0 then\n      -- Found a number that hasn't been seen before.  Replace it.\n\
    \      closest_count, closest_values = current_count, current_values\n      largest,\
    \ smallest = current_value, current_value\n    else\n      -- Find closest number.\n\
    \      local new_count, new_values = tonumber(closest[current_value]), closest[current_value]\n\
    \      if new_count > closest_count then\n        closest_count, closest_values\
    \ = new_count, new_values\n        largest, smallest = current_value, current_value\n\
    \      else\n        closest_count, closest_values = new_count, new_values\n \
    \       if current_count < closest_count then largest = current_value end\n  \
    \      if current_count > closest_count then smallest = current_value end\n  \
    \    end\n    end\n    closest[current_value] = current_count + 1\n  end\n  assert(closest_count\
    \ == #closest)\n  assert(closest_count == #numbers)\n  return (smallest, largest)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9juod_51.lua:33: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ i = 1\n  local min = numbers[i]\n  local max = numbers[i]\n  while i < #numbers\
    \ do\n    if numbers[i] < min then\n      min = numbers[i]\n    elseif numbers[i]\
    \ > max then\n      max = numbers[i]\n    end\n    i = i + 1\n  end\n  return\
    \ min, max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5c9dvgl6.lua:25:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp5c9dvgl6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ max_diff, min1, max1, min2, max2 = unpack(numbers)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphbrs715r.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i=2,#numbers do\n \
    \   if math.abs(numbers[i] - smallest) < math.abs(numbers[i] - largest) then\n\
    \      smallest, largest = numbers[i], numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w7lcvuw.lua:20:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmp8w7lcvuw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest, largest = table.remove_by_ref(numbers)\n    for i = 1, #numbers -\
    \ 1 do\n        local distance = math.abs(numbers[i] - largest) + math.abs(numbers[i\
    \ + 1] - smallest)\n        if smallest == largest and distance ~= 0 then\n  \
    \          largest = numbers[i]\n        elseif distance < 0 then\n          \
    \  largest = numbers[i]\n        else\n            smallest = numbers[i + 1]\n\
    \        end\n    end\n    return (smallest, largest)\nend\nfind_closest_elements\
    \ = function() return assert(find_closest_elements(...))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprx5qv1a7.lua:19: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ == 1 then\n    return numbers[1]\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3tlz0xlk.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.abs(numbers[1])\n  local closest_to_first = numbers[1]\n\
    \  local closest_to_second = numbers[1]\n  local second_number = numbers[2]\n\
    \  for _,number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ second_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      closest_to_first = number\n      closest_to_second = second_number\n\
    \    end\n    second_number = number\n  end\n  return closest_to_first, closest_to_second\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd33tqwdn.lua:27:\
    \ expected: {3.9, 4}\nactual: 4\nstack traceback:\n\t/tmp/tmpd33tqwdn.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ >= 2)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuc5d0n1u.lua:20: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {}\n    for i = 1, #numbers do\n        local closest_index\
    \ = 1\n        local closest_distance = math.abs(numbers[i] - numbers[closest_index])\n\
    \        for j = 2, #numbers do\n            local current_distance = math.abs(numbers[i]\
    \ - numbers[j])\n            if current_distance < closest_distance then\n   \
    \             closest_index = j\n                closest_distance = current_distance\n\
    \            end\n        end\n        table.insert(closest_elements, numbers[i])\n\
    \        table.insert(closest_elements, numbers[closest_index])\n    end\n   \
    \ return table.sort(closest_elements)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sekfnuq.lua:28:\
    \ expected: {3.9, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp9sekfnuq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  if #numbers\
    \ < 2 then\n    return (numbers[1], numbers[1])\n  end\n  local minDistance =\
    \ math.abs(numbers[1] - numbers[2])\n  local minIndex = 1\n  local minValue =\
    \ numbers[1]\n  for i=2,#numbers do\n    local currentDistance = math.abs(numbers[i]\
    \ - minValue)\n    if currentDistance < minDistance then\n      minValue = numbers[i]\n\
    \      minDistance = currentDistance\n      minIndex = i\n    end\n  end\n  return\
    \ (minValue, numbers[minIndex])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8o7r1cyp.lua:9: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n   if #numbers\
    \ < 2 then\n      return nil\n   end\n   local closest_element = nil\n   local\
    \ second_closest_element = nil\n   local smaller = numbers[1]\n   local larger\
    \ = numbers[#numbers]\n   for _, elt in ipairs(numbers) do\n      local distance\
    \ = math.sqrt(smaller * smaller + elt * elt)\n      if closest_element == nil\
    \ then\n         closest_element = elt\n         second_closest_element = elt\n\
    \      elseif distance < closest_element then\n         closest_element = distance\n\
    \         second_closest_element = elt\n      end\n      if closest_element >\
    \ larger then\n         smaller = elt\n      elseif closest_element < larger then\n\
    \         larger = closest_element\n      end\n   end\n   return closest_element,\
    \ second_closest_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh2zh6bn.lua:36:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpeh2zh6bn.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  assert(#numbers\
    \ > 1, \"You passed an empty list\")\n  local closest_pairs = {} -- A dictionary\
    \ mapping numbers to their closest neighbors\n  local closest_index = 1 -- The\
    \ index of the number we're looking for\n  local next_number = numbers[1] -- The\
    \ next number we're looking at\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    -- If the current number is closer than the previous number,\
    \ update closest_pairs\n    -- with the newest entry (the current number) and\
    \ remove it from the table\n    -- (we can't keep more than one entry with any\
    \ given number)\n    if closest_index == 1 then\n      closest_pairs[current_number]\
    \ = current_number\n      table.remove(numbers, i)\n      i = i - 1 -- Decrement\
    \ i because the current entry is now the new entry we're looking at\n    else\n\
    \      -- If the current number is closer than the previous newest number, update\
    \ closest_pairs\n      -- and remove it from the table (we can't keep more than\
    \ one entry with any given number)\n      if current_number < next_number then\n\
    \        closest_pairs[current_number] = next_number\n        table.remove(numbers,\
    \ i)\n        i = i - 1 -- Decrement i because the current entry is now the new\
    \ entry we're looking at\n      end\n    end\n    -- Update next_number\n    next_number\
    \ = numbers[i]\n  end\n  -- Return the result (the first two entries in closest_pairs)\n\
    \  return (closest_pairs[1], closest_pairs[2])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9ri8b8ji.lua:34: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    smallest,\
    \ largest = numbers[i], smallest > numbers[i] and largest or numbers[i]\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklw_z4v3.lua:18:\
    \ expected: {3.9, 4}\nactual: 2.2\nstack traceback:\n\t/tmp/tmpklw_z4v3.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for _, v in ipairs(numbers,\
    \ 2, #numbers) do\n    if v < smallest then\n      smallest = v\n    end\n   \
    \ if v > largest then\n      largest = v\n    end\n  end\n  return smallest, largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra87uadb.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpra87uadb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local\
    \ min_value = math.max(numbers[1])\n    local max_value = numbers[1]\n    for\
    \ i = 2, #numbers do\n        if numbers[i] < min_value then\n            min_value\
    \ = numbers[i]\n        end\n        if numbers[i] > max_value then\n        \
    \    max_value = numbers[i]\n        end\n    end\n    return min_value, max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfome3iq2.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpfome3iq2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ lower = numbers[1]\n\tlocal higher = numbers[2]\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeda7ac6l.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
