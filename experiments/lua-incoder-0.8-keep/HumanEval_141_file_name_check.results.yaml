name: HumanEval_141_file_name_check
language: lua
results:
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if file_name ~= nil and file_name:len() ~= 3 then\n        return nil\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgho8d_t9.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Remove the filename from the name and check if the name is valid (has one\
    \ dot).\n  -- Return true if and only if there are no errors and no dots present.\n\
    \  -- Otherwise, return false.\n  -- \n  -- A file's name is considered to be\
    \ valid if and only if all the following conditions are met:\n  -- - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n  -- - The file's\
    \ name contains exactly one dot '.'\n  -- - The substring before the dot should\
    \ not be empty, and it starts with a letter from the \n  --  latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n  -- - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n  -- \n  -- Examples:\n  -- file_name_check(\"example.txt\")\
    \ # => 'Yes'\n  -- file_name_check(\"1example.dll\") # => 'No' (the name should\
    \ start with a latin alphapet letter)\n  -- file_name_check(\"1example.txt\")\
    \ # => 'No' (the name should contain exactly one dot)\n  -- file_name_check(\"\
    example1\") # => 'No' (a substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll'])\n  -- file_name_check(\"example\") # => 'No' (a file name should\
    \ not contain more than three digits)\n  -- file_name_check(\"eXAMPLE\") # =>\
    \ 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"exemple\"\
    ) # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"\
    0example\") # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"\
    _example\") # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"\
    example..\") # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"\
    .exe\") # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"\
    eXAMPLE.\") # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"\
    example..exe\") # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"\
    .exe..\") # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"\
    ..exe\") # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check(\"\
    ..exe..\") # => 'No' (a file name should contain exactly one dot)\n  -- file_name_check\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg_z_uh3s.lua:75: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return file_name:sub(1,5):len() == 3 and\n    file_name:sub(1,5) and string.match(string.lower(file_name:sub(1,5)),\
    \ string.letters(string.len(string.sub(file_name,1,5))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1d49_q6.lua:21:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpz1d49_q6.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name\n  local index = string.find(file_name, \".\");\n\
    \  if index == nil then\n    return true\n  end\n  local first_part = file_name:sub(1,\
    \ index-1)\n  local last_part = file_name:sub(index+1)\n  if #first_part > 3 then\n\
    \    return false\n  end\n  if string.find(first_part, \"[0-9]\") then\n    return\
    \ false\n  end\n  if string.find(first_part, \"[a-z]\") then\n    return false\n\
    \  end\n  if string.find(first_part, \"[A-Z]\") then\n    return false\n  end\n\
    \  if string.find(first_part, \".\") then\n    return false\n  end\n  if #last_part\
    \ == 0 or string.find(last_part, \"[a-z]\") then\n    return false\n  end\n  if\
    \ #last_part == 0 or string.find(last_part, \"[A-Z]\") then\n    return false\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0_4u781.lua:48:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpo0_4u781.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- Check the condition on number of digits in the file's name.\n    if string.sub(file_name,\
    \ 1, string.len(file_name)-1) == '..' then\n        return 'No'\n    end\n   \
    \ -- Check the condition on valid file's name.\n    if string.sub(file_name, 1,\
    \ string.len(file_name)-1) == '..' then\n        return 'No'\n    end\n    --\
    \ Check the condition on file's name contains exactly one dot '.'\n    if string.find(file_name,\
    \ string.rep('.', 1, 2)) == nil then\n        return 'No'\n    end\n    -- Check\
    \ the condition on file's name starts with a latin alphabetic letter.\n    if\
    \ string.sub(file_name, 1, string.len(file_name)-1) == string.char(string.byte('a'))\
    \ then\n        return 'No'\n    end\n    -- Check the condition on file's name\
    \ starts with a latin alphabetic letter and contains \n    -- the string 'exe',\
    \ 'txt', 'dll'\n    if string.sub(file_name, 1, string.len(file_name)-1) in {'exe',\
    \ 'txt', 'dll'} then\n        return 'Yes'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmo6coury.lua:32: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check if the file name contains more than one digit\n  -- If it contains\
    \ only one digit, returns 'Yes'\n  if #file_name > 1 then\n    return true\n \
    \ elseif #file_name == 1 then\n    -- Check if there is one dot\n    -- If there\
    \ isn't, returns 'Yes'\n    if file_name ~= \"\" then\n      -- Split file name\
    \ into two parts at the dot\n      -- The first part should be empty, and it must\
    \ start with latin letter\n      -- The second part should be one of these: ['txt',\
    \ 'exe', 'dll']\n      local dot_index = string.find(file_name, \".\")\n     \
    \ if dot_index ~= nil then\n        local first_part = string.sub(file_name, 1,\
    \ dot_index)\n        local second_part = string.sub(file_name, (dot_index+1):end)\n\
    \        -- Check first part\n        if first_part ~= \"\" then\n          --\
    \ Check if the second part is one of these\n          local allowed_extensions\
    \ = {\n            \"txt\", \n            \"exe\", \n            \"dll\", \n \
    \           \"jpeg\", \n            \"jpg\", \n            \"png\", \n       \
    \     \"gif\", \n            \"mp4\", \n            \"mp3\", \n            \"\
    mpe\", \n            \"wmv\", \n            \"avi\", \n            \"mpg\", \n\
    \            \"mpeg\", \n            \"wmv\", \n            \"mov\", \n      \
    \      \"avi\"\n          }\n          if second_part ~= nil and allowed_extensions[second_part]\
    \ then\n            return true\n          else\n            return false\n  \
    \        end\n        else\n          return false\n        end\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpag37kcwc.lua:28: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return string.find(file_name, \".\") ~= nil and string.sub(file_name,1,string.find(file_name,\
    \ \".\")) == string.sub(file_name,1,1) and string.find(file_name, \".\") ~= 0\
    \ and string.find(file_name, string.sub(file_name,string.find(file_name, \".\"\
    ),string.find(file_name, \".\")+1)) in {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\
    \ and string.find(file_name, string.sub(file_name,string.find(file_name, \".\"\
    )+1,string.find(file_name, \".\")+2)) in {'txt', 'exe', 'dll'}\nend\n</code>\n\
    <|/ a |>\n<| c |>\nOops, just realized I misread your question, and thought you\
    \ were asking about checking for a valid file extension. I'm updating the answer\
    \ to reflect that.\n<|/ c |>\n<| c |>\nThanks for your help\n<|/ c |>\n<| c |>\n\
    Please read my comment at the other post. As you probably know that if you check\
    \ it like that you will receive a lot of false positives. So if you just want\
    \ to check if a file has a valid extension, I'd go for my answer below.\n<|/ c\
    \ |>\n<| a tags=lua,regex,string dscore=2 |>\nIt seems that you need a regex solution\
    \ for file name check (not about file extension). Here is a simple regex (no Lua)\
    \ solution that should work fine for you:\n<code>\n^[a-z]([a-z\\-]*[a-z])*\\.txt$\n\
    </code>\nBasically it says that:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuymfnmoi.lua:14: 'end' expected (to close 'function' at line\
    \ 13) near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name:find('^%a%d%') then\n      return false\n   end\n   if file_name:find('%.')\
    \ then\n      local file = file_name:match('%.(%a%d%)')\n      if file == '.'\
    \ or file == '' then\n         return false\n      end\n      if file ~= '' and\
    \ file:byte(1) ~= 'a' then\n         return false\n      end\n      if file:byte(1)\
    \ ~= 'z' or file:byte(1) ~= 'Z' then\n         return false\n      end\n     \
    \ if file:byte(2) ~= '0' or file:byte(2) ~= '9' then\n         return false\n\
    \      end\n      if file:byte(3) == '.' then\n         return false\n      end\n\
    \      if file:byte(1) ~= 'a' or file:byte(1) ~= 'z' then\n         return false\n\
    \      end\n   end\n   if file_name:byte(1) ~= 'a' or file_name:byte(1) ~= 'z'\
    \ then\n      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf45qywet.lua:22:\
    \ attempt to index a nil value (local 'file')\nstack traceback:\n\t/tmp/tmpf45qywet.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpf45qywet.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   return string.match('^[0-9]{1,3}[a-zA-Z]{1}.[a-zA-Z]{1,3}$','%w'..file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum1sl51y.lua:20:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpum1sl51y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string_match(file_name, '^([0-9]{0}[^.]*)(\\.[a-z]{1,3}){1,3}$', '')\
    \ and\n         (file_name:sub(1, 1) ~= '') and\n         string_match(file_name:sub(1,\
    \ 2), '^[a-zA-Z]+$') and \n         string_match(file_name:sub(2, 4), '^(t|e|d|)$')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpovmg16c1.lua:14: invalid escape sequence near ''^([0-9]{0}[^.]*)(\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   return false \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp158gr4.lua:20:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpsp158gr4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local ext = string.match(file_name, \"[^%.]*(%%.[^%.]*)$\")\n    local file_name\
    \ = string.match(file_name, \"^[^%.]*(%.[^%.]*)$\")\n    \n    if file_name ==\
    \ nil then\n        return 'No'\n    end\n    \n    if ext ~= nil and string.find(ext,\
    \ \".\") then\n        return 'No'\n    end\n    \n    local file_name = file_name\n\
    \    local file_size = string.len(file_name)\n    \n    if string.len(file_name)\
    \ == 0 or file_size < 3 or string.find(file_name, \".\") == nil then\n       \
    \ return 'No'\n    end\n    \n    local substring_start = string.find(file_name,\
    \ \".\", 2)\n    local substring_end = string.find(file_name, \".\", substring_start\
    \ + 1)\n    \n    if substring_start == nil or substring_end == nil then\n   \
    \     return 'No'\n    end\n    \n    if string.sub(file_name,substring_start+1,\
    \ substring_end) ~= \".txt\" or string.sub(file_name,substring_end+1, substring_end)\
    \ ~= \".exe\" or string.sub(file_name,substring_end+1, substring_end) ~= \".dll\"\
    \ then\n        return 'No'\n    end\n    \n    if string.sub(file_name,2,substring_start)\
    \ ~= string.sub(file_name,substring_start+1, substring_end) or string.find(string.sub(file_name,substring_start+1,substring_end-1),\
    \ \"%\") == nil then\n        return 'No'\n    end\n    \n    return 'Yes'\nend\n\
    </cell>\n<text>\nThe function above checks if the filename provided is valid.\
    \ If it is, the function returns 'Yes', otherwise it returns 'No'.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9sv8ekjl.lua:49: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local digit_count = 0\n    local digit_count = string.gsub(file_name, \"\
    %*%%d+\", \"\")\n    digit_count = string.len(digit_count)\n    if digit_count\
    \ > 2 then\n        return 'No'\n    end\n    if digit_count == 1 then\n     \
    \   if string.find(file_name, \".\") == nil then\n            return 'No'\n  \
    \      end\n    else\n        -- The substring before the dot should not be empty,\
    \ and it starts with a letter \n        -- from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n        local file_name_letter = string.sub(file_name, 1, 1)\n   \
    \     local file_name_letter = string.lower(file_name_letter)\n        if string.find(file_name_letter,\
    \ 'a') == nil and string.find(file_name_letter, 'A') == nil then\n           \
    \ return 'No'\n        end\n    end\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n        return 'No'\n    end\n    local\
    \ dot_sub_string = string.sub(file_name, 1, dot_index)\n    local dot_sub_string\
    \ = string.lower(dot_sub_string)\n    local dot_sub_array = string.split(dot_sub_string,\
    \ \".\")\n    if #dot_sub_array ~= 2 then\n        return 'No'\n    end\n    local\
    \ dot_sub_string1 = string.sub(file_name, dot_index + 1, string.len(file_name))\n\
    \    local dot_sub_string1 = string.lower(dot_sub_string1)\n    for _, v in ipairs(dot_sub_array)\
    \ do\n        if v ~= 'txt' and v ~= 'exe' and v ~= 'dll' then\n            return\
    \ 'No'\n        end\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1vo6ddf.lua:56:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpl1vo6ddf.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local result = string.find(file_name, \"[^0-9]\") -- Search for the first non-numeric\
    \ character\n  if result == nil then \n    return 'No' \n  else\n    local dots\
    \ = string.find(file_name, \"\\.\") -- Search for .\n    if dots == nil then \n\
    \      return 'No' \n    else \n      local first_letter = string.sub(file_name,1,1)\
    \ \n      if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1) ~=\
    \ 'A' and \n         string.sub(file_name,2,1) ~= 'a' and string.sub(file_name,2,1)\
    \ ~= 'A' then \n        return 'No' \n      else \n        local last_letter =\
    \ string.sub(file_name,2,string.find(file_name, \"\\.\",2) or #file_name)\n  \
    \      -- Check if the file's name contains 'exe', 'dll' or 'txt' \n        if\
    \ ((string.find(file_name, \"exe\") or string.find(file_name, \"dll\") or string.find(file_name,\
    \ \"txt\"))\n             and ((last_letter == 'e') or (last_letter == 'E')) \n\
    \             and ((first_letter == 'e') or (first_letter == 'E')) \n        \
    \     and (string.find(file_name, \"exe\",1,1) ~= nil) \n             and (string.find(file_name,\
    \ \"dll\",1,1) ~= nil) \n             and (string.find(file_name, \"txt\",1,1)\
    \ ~= nil)) then \n          return 'Yes' \n        else \n          return 'No'\
    \ \n        end \n      end\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppf_z5193.lua:18: invalid escape sequence near '\"\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- If the file name contains no characters that are not a-z or A-Z or a dot\n\
    \  -- or an underscore, return 'No'.\n  if file_name:gsub(\".\", \"_\") == \"\"\
    \ then return \"No\" end\n  if file_name:sub(1,1) ~= \"\" then return \"No\" end\n\
    \  -- If the file name contains more than three digits, return 'No'.\n  -- If\
    \ there are more than three characters, return 'No'\n  if file_name:sub(1,3) ==\
    \ \"000\" then return \"No\" end\n  if file_name:sub(1,3) == \"001\" then return\
    \ \"No\" end\n  if file_name:sub(1,3) == \"002\" then return \"No\" end\n  if\
    \ file_name:sub(1,3) == \"003\" then return \"No\" end\n  if file_name:sub(1,3)\
    \ == \"004\" then return \"No\" end\n  if file_name:sub(1,3) == \"005\" then return\
    \ \"No\" end\n  if file_name:sub(1,3) == \"006\" then return \"No\" end\n  if\
    \ file_name:sub(1,3) == \"007\" then return \"No\" end\n  if file_name:sub(1,3)\
    \ == \"008\" then return \"No\" end\n  if file_name:sub(1,3) == \"009\" then return\
    \ \"No\" end\n  if file_name:sub(1,3) == \"010\" then return \"No\" end\n  if\
    \ file_name:sub(1,3) == \"011\" then return \"No\" end\n  if file_name:sub(1,3)\
    \ == \"012\" then return \"No\" end\n  if file_name:sub(1,3) == \"013\" then return\
    \ \"No\" end\n  if file_name:sub(1,3) == \"014\" then return \"No\" end\n  if\
    \ file_name:sub(1,3) == \"015\" then return \"No\" end\n  if file_name:sub(1,3)\
    \ == \"016\" then return \"No\" end\n  if file_name:sub(1,3) == \"017\" then return\
    \ \"No\" end\n  if file_name:sub(1,3) == \"018\" then return \"No\" end\n  if\
    \ file_name:sub(1,3) == \"019\" then return \"No\" end\n  if file_name:sub(1,3)\
    \ == \"020\" then return \"No\" end\n  if file_name:sub(1,3) == \"021\" then return\
    \ \"No\" end\n  if file_name:sub(1,3) == \"022\" then return \"No\" end\n  if\
    \ file_name:sub(1,3) == \"023\" then return \"No\" end\n  if file_name:sub(1,3)\
    \ == \"024\" then return \"No\" end\n  if file_name:sub(1,\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1m0qyojh.lua:46: ')' expected (to close '(' at line 45) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.match(file_name, \"^[1-9][0-9]{0,3}\\.[TtExDd][ExE][Aa][Ll]$\"\
    ) and\n    string.match(file_name, \"^[a-zA-Z]\") and\n    string.match(file_name,\
    \ \n      \"^[^.][a-z][^.]*\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpikxek_uc.lua:14: invalid escape sequence near '\"^[1-9][0-9]{0,3}\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.len(file_name) >= 3 and string.sub(file_name,1,1) == '~' and\
    \ string.sub(file_name,2,2) ~= '.' and string.sub(file_name,1,1) ~= '0' and string.sub(file_name,1,1)\
    \ ~= 'a' and string.sub(file_name,1,1) ~= 'z' and string.find(file_name, \".\"\
    ) ~= nil and  string.find(file_name, \":\") ~= nil \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfapj17xk.lua:20:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpfapj17xk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \tlocal regex_1 = \"^([a-zA-Z]{1}[0-9]{3}\\.){0,1}[txt|exe|dll]\"\n\tlocal regex_2\
    \ = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,1}[txt|exe|dll]\"\n\tlocal regex_3 = \"^([a-zA-Z]{1}[0-9]{3}\\\
    .){1,2}[txt|exe|dll]\"\n\tlocal regex_4 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,3}[txt|exe|dll]\"\
    \n\tlocal regex_5 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,4}\"\n\tlocal regex_6 = \"^([a-zA-Z]{1}[0-9]{3}\\\
    .){1,5}[txt|exe|dll]\"\n\tlocal regex_7 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,6}[txt|exe|dll]\"\
    \n\tlocal regex_8 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,7}[txt|exe|dll]\"\n\tlocal regex_9\
    \ = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,8}[txt|exe|dll]\"\n\tlocal regex_10 = \"^([a-zA-Z]{1}[0-9]{3}\\\
    .){1,9}[txt|exe|dll]\"\n\tlocal regex_11 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,10}[txt|exe|dll]\"\
    \n\tlocal regex_12 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,11}[txt|exe|dll]\"\n\tlocal\
    \ regex_13 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,12}[txt|exe|dll]\"\n\tlocal regex_14\
    \ = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,13}[txt|exe|dll]\"\n\tlocal regex_15 = \"^([a-zA-Z]{1}[0-9]{3}\\\
    .){1,14}[txt|exe|dll]\"\n\tlocal regex_16 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,15}[txt|exe|dll]\"\
    \n\tlocal regex_17 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,16}[txt|exe|dll]\"\n\tlocal\
    \ regex_18 = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,17}[txt|exe|dll]\"\n\tlocal regex_19\
    \ = \"^([a-zA-Z]{1}[0-9]{3}\\.){1,18}[txt|exe|dll]\"\n\tlocal regex_20 = \"^([a-zA-Z]{1}[0-9]{3}\\\
    .){1,19}[txt|exe|dll]\"\n\tlocal regex_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr0aj3jvh.lua:14: invalid escape sequence near '\"^([a-zA-Z]{1}[0-9]{3}\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local file_name = string.lower(file_name)\n   if string.find(file_name, \"\
    .\") ~= nil then\n      local file_name = string.gsub(file_name, \".\", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\") \n      if string.find(file_name, \"0123456789\"\
    ) ~= nil then\n         return \"No\"\n      else\n         if string.find(file_name,\
    \ \"a...z\") ~= nil then\n            return \"No\"\n         elseif string.find(file_name,\
    \ \"A...Z\") ~= nil then\n            return \"No\"\n         else\n         \
    \   return \"Yes\"\n         end\n      end\n   else\n      return \"No\"\n  \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93ylc3c2.lua:39:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp93ylc3c2.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local digits_count = #file_name:gsub(\"%w+\",\"\\0\")\n   if digits_count\
    \ > 3 then\n      return 'No'\n   end\n   if file_name:sub(1, 1) ~= '\\0' and\
    \ #file_name:sub(1, 1) ~= 1 then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' or #file_name:sub(2, 1) ~= 1 then\n      return 'No'\n   end\n   if\
    \ file_name:sub(1, 2) ~= 'a' or file_name:sub(1, 2) ~= 'z' then\n      return\
    \ 'No'\n   end\n   for i = 2, #file_name do\n      if file_name:sub(i, i) ~= '.'\
    \ or #file_name:sub(i, i) ~= 3 then\n         return 'No'\n      end\n   end\n\
    \   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptor6cwlh.lua:38:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmptor6cwlh.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil or file_name == \"\" or file_name:sub(1,3~=\"#\") and\
    \ file_name:sub(1,1~=\".\") then\n      return nil -- The input is invalid\n \
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpasatba7a.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- remove non ascii\n    -- remove dot\n    -- remove empty string\n    \n\
    \    -- if file length is less than 3, return false\n    if string.len(file_name)\
    \ < 3 then\n        return false\n    end\n    \n    -- if file name contains\
    \ only one dot, return false\n    if string.find(file_name, \".\") then\n    \
    \    return false\n    end\n    \n    -- if file name contains only a dot and\
    \ is not an extension, return false\n    if string.find(file_name, \".\") then\n\
    \        return false\n    end\n    \n    -- if file name contains only a dot\
    \ and is not an extension, return false\n    if string.find(file_name, \".\")\
    \ then\n        return false\n    end\n    \n    -- if file names contains only\
    \ a dot, and is not a txt, exe, dll return false\n    if string.find(file_name,\
    \ \".\") then\n        return false\n    end\n    \n    -- return true if file\
    \ name is valid\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpei067sxk.lua:50:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpei067sxk.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_no = string.gsub(file_name, \"^%.\", \"\")\n  local has_dot = string.find(file_no,\
    \ \".\") == 1 \n  local has_letter = string.find(file_no, \"[a-z]\") > 0 or string.find(file_no,\
    \ \"[A-Z]\") > 0\n  if not has_dot == true then\n    return false\n  end\n  if\
    \ not string.find(file_no, \"[a-z]\") == 0 then\n    return false\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl4b465g.lua:29:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmptl4b465g.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return nil ~= (string.find(file_name, \"^[0-9]{1}\\.\") == nil) ~= (string.find(file_name,\
    \ \"^[a-zA-Z]{1}\") == nil) ~= (string.find(file_name, \"^[a-zA-Z0-9]{1}\") ==\
    \ nil) \nend\n</code>\n<|/ a tags=lua,string-matching,pattern-matching,lua-patterns,string\
    \ |>\n<| c |>\nIf you're using Lua 5.2 or newer, you can use `string.match` instead\
    \ of `string.find`: `string.match(\"1example.dll\", \"^[0-9]{1}\\.\") ~= nil`\n\
    <|/ c |>\n<| c |>\n, Yes. Thanks for your suggestion.\n<|/ c |>\n<| a tags=lua,string-matching,pattern-matching,lua-patterns,string\
    \ |>\nIf you're using Lua 5.2 or newer, you can use string.match instead of string.find:\n\
    <code>\nstring.match(\"1example.dll\", \"^[0-9]{1}\\.\") ~= nil\n</code>\n<|/\
    \ a dscore=4 |>\n<| a |>\nThis simple example shows how to detect if a string\
    \ is an acceptable filename or not using luasocket, which is included in LuaJIT.\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9sd7q4va.lua:14: invalid escape sequence near '\"^[0-9]{1}\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local digits = string.gsub(file_name, \":?[%.%-]*\", \"\")\n    local file_ext\
    \ = string.gsub(file_name, \":%.*$\", \"\")\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9w90mifc.lua:48: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return string.sub(file_name,1,3) ~= '' and string.find(file_name, \".\")\
    \ ~= 0 and \n        string.find(file_name, \"..\") ~= 0 and string.find(file_name,\
    \ \"/\") ~= 0 and \n        string.find(file_name, \"[\") ~= 0 and string.find(file_name,\
    \ \"]\") ~= 0 and\n        string.find(file_name, \"\\\\\") ~= 0 and string.find(file_name,\
    \ \"\\\"\") ~= 0 and\n        string.find(file_name, \"'\") ~= 0 and string.find(file_name,\
    \ \";\") ~= 0 and\n        string.find(file_name, \"<\") ~= 0 and string.find(file_name,\
    \ \">\") ~= 0 and\n        string.find(file_name, \"{\") ~= 0 and string.find(file_name,\
    \ \"}\") ~= 0 and\n        string.find(file_name, \"\\\") ~= 0 and string.find(file_name,\
    \ \":\") ~= 0 and\n        string.find(file_name, \"`\") ~= 0 and string.find(file_name,\
    \ \"~\") ~= 0 and\n        string.find(file_name, \" \") ~= 0 and string.find(file_name,\
    \ \"\\t\") ~= 0 and\n        string.find(file_name, \"\\r\") ~= 0 and string.find(file_name,\
    \ \"\\n\") ~= 0 and\n        string.find(file_name, \"\\0\") ~= 0 and string.find(file_name,\
    \ \"\\\\\") ~= 0 and\n        string.find(file_name, \" \") ~= 0 and string.find(file_name,\
    \ \"\\t\") ~= 0 and\n        string.find(file_name, \"\\r\") ~= 0 and string.find(file_name,\
    \ \"\\n\") ~= 0 and\n        string.find(file_name, \"\\0\") ~= 0 and string.find(file_name,\
    \ \"\\\\\") ~= 0 and\n        string.find(file_name, \" \") ~= 0 and string.find(file_name,\
    \ \"\\t\") ~= 0 and\n        string.find(file_name, \"\\r\") ~= 0 and string.find(file_name,\
    \ \"\\n\") ~= 0 and\n        string.find(file_name, \"\\0\") ~= 0 and string.find(file_name,\
    \ \"\\\\\") ~= 0 and\n        string.find(file_name, \" \") ~= 0 and string.find(file_name,\
    \ \"\\t\") ~= 0 and\n        string.find(file_name, \"\\r\") ~= 0 and string.find(file_name,\
    \ \"\\n\") ~= 0 and\n        string.find(file_name, \"\\0\") ~= 0 and string.find(file_name,\
    \ \"\\\\\") ~= 0 and\n        string.find(file_name, \" \") ~= 0 and string.find(file_name,\
    \ \"\\t\") ~= 0 and\n        string.find(file_name, \"\\r\") ~= 0 and string.find(file_name,\
    \ \"\\n\") ~= 0 and\n        string.find(file_name, \"\\0\") ~= 0 and string.find(file_name,\
    \ \"\\\\\") ~= 0 and\n        string.find(file_name, \" \") ~= 0 and string.find(file_name,\
    \ \"\\t\") ~= 0 \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp549z7z3j.lua:21: ')' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if not (string.sub(file_name,1,3) == \"000\" and string.sub(file_name,4,4)\
    \ == \"0\" and \n         string.sub(file_name,1,1) == \"a\" and string.sub(file_name,2,2)\
    \ == \"z\" and\n         string.sub(file_name,4,4) == \"A\" and string.sub(file_name,5,5)\
    \ == \"Z\" and\n         string.find(file_name, \".\") == 1 and string.find(file_name,\
    \ \".\") == 2) then\n      return 'No'\n   else\n      return 'Yes'\n   end\n\
    end\n</cell>\n<text>\n6.2 Create a function which takes one string representing\
    \ a file's name as input, and returns the file's extension.\nExamples:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9rx6y7i9.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- If file's name does not meet the above conditions, return false\n  return\
    \ true \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zuyfu8w.lua:21:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp3zuyfu8w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \tlocal _, ext = string.match(file_name, \"^(%a..)*.(%a..)$\")\n\text = string.lower(ext)\n\
    \tlocal ok, err = nil, \"\"\n\tif string.len(file_name) > 2 and ext:sub(1, 1)\
    \ and ext:sub(2, 1) ~= '_' then\n\t\tif string.find(string.lower(file_name:sub(1,\
    \ 4)), string.upper(string.sub(string.lower(file_name:sub(1, 4)), 1, 1))) then\n\
    \t\t\tif string.find(string.lower(file_name:sub(2, 5)), string.upper(string.sub(string.lower(file_name:sub(2,\
    \ 5)), 1, 1))) then\n\t\t\t\tok = \"No\"\n\t\t\telse\n\t\t\t\tok = \"Yes\"\n\t\
    \t\tend\n\t\telse\n\t\t\tok = \"Yes\"\n\t\tend\n\telse\n\t\tok = \"No\"\n\tend\n\
    \treturn ok, err\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzw9yiomh.lua:15:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpzw9yiomh.lua:15: in local 'candidate'\n\t/tmp/tmpzw9yiomh.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_base_name = string.sub(file_name, 1, string.len(file_name))\n  local\
    \ file_ext = string.sub(file_name, string.len(file_name))\n  if string.len(file_base_name)\
    \ == 0 or file_base_name ~= string.lower(file_base_name) then\n    return 'No'\n\
    \  end\n  if file_ext:sub(1, 3) ~= 'txt' and file_ext:sub(1, 3) ~= 'exe' and file_ext:sub(1,\
    \ 3) ~= 'dll' then\n    return 'No'\n  end\n  if file_ext:sub(1, 3) == 'exe' then\n\
    \    if file_ext:sub(4, string.len(file_ext))  == 'dll' then\n      return 'Yes'\n\
    \    end\n  end\n  return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bgtg4dx.lua:33:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp1bgtg4dx.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- If the file name contains no dot ('.'), return 'No'\n\tif file_name == nil\
    \ or not file_name:find(\"%.\") then\n\t\treturn \"No\"\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuv6z0etx.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:lower()\n  return string.match(file_name, '^%d+%.%w+$')\
    \ == nil and\n         string.match(file_name, '^[a-z]') ~= nil and\n        \
    \ string.sub(file_name, 1, string.find(file_name, \".\", 1, 1) - 1) ~= \"\" and\n\
    \         string.match(file_name, \"^[a-z][a-z].*[a-z]$\") ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrj_o0v3.lua:24:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpvrj_o0v3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the string is not empty\n   if file_name == nil then\n     \
    \ return nil\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe3fb6per.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- The name should start with a latin alphapet letter\n\t-- Example: aexample.exe\
    \ --> \"a\"\n\t--           1example.dll --> \"1\"\n\tlocal latin_alphapet = string.gsub(file_name,\
    \ string.match(\"^[a-z]+\", \"\"), \"a\")\n\t-- There should not be more than\
    \ three digits ('0'-'9') in the file's name\n\t-- Example: eexample.exe --> \"\
    e\"\n\t--           9example.dll --> \"9\"\n\tlocal number_name = string.gsub(file_name,\
    \ string.match(\"^[a-z]+\", \"\"), \"0\")\n\t-- The file's name contains exactly\
    \ one dot '.'\n\t-- Example: example.dll --> \"example.dll\"\n\t--           example2.dll\
    \ --> \"example2.dll\"\n\tlocal dot_name = string.gsub(file_name, string.match(\"\
    %.\", \"\"), \"\")\n\t-- The substring before the dot should not be empty, and\
    \ it starts with a letter from the\n\t-- latin alphabet ('a'-'z' and 'A'-'Z').\n\
    \t-- Example: example.txt --> \"example.txt\"\n\t--           example2.exe -->\
    \ \"example2.exe\"\n\tlocal letter_name = string.match(dot_name, \"^[a-z]+\")\n\
    \t-- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \t-- Example: example.txt --> \"txt\" (the substring after the dot should be 'txt')\n\
    \t--           example2.exe --> \"exe\" (the substring after the dot should be\
    \ 'exe')\n\tlocal file_name_ok = string.match(dot_name, \"^[a-z]+%s+\\.[a-z]{3,4}$\"\
    ) or string.match(dot_name, \"^[a-z]+%s+\\.txt$\") or string.match(dot_name, \"\
    ^[a-z]+%s+\\.exe$\") or string.match(dot_name, \"^[a-z]+%s+\\.dll$\")\n\treturn\
    \ latin_alphapet and number_name and dot_name and letter_name and file_name_ok\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt_uz52so.lua:34: invalid escape sequence near '\"^[a-z]+%s+\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Remove the trailing slash if there is one.\n  file_name = file_name:gsub(\"\
    /\", \"\")\n  -- Create a variable to store the return value\n  local is_valid\
    \ = false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcrg1dvjs.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local digit = '0' .. '9'\n   local dot = '.'\n   local dot_position = file_name:find(dot)\n\
    \   if dot_position == nil or dot_position == 0 then\n      return false \n  \
    \ end\n   local file_name = file_name:sub(1, dot_position - 1)\n   if string.find(file_name:sub(1,\
    \ 1), digit) == nil then\n      return false\n   end\n   local ext = string.lower(file_name:sub((dot_position\
    \ + 1), (string.len(file_name) - dot_position))) -- get the extension\n   if ext\
    \ == 'txt' or ext == 'exe' or ext == 'dll' then\n      return true\n   else\n\
    \      return false\n   end\nend\n</cell>\n<text>\nTask #2\nDefine a function\
    \ that takes a string representing a file's name and returns a \nboolean value.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxia0fcb9.lua:31: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local first_letter = string.sub(file_name, 1, 1)\n    local all_letters =\
    \ string.sub(file_name, 2, #file_name)\n    \n    if string.find(all_letters,\
    \ \"..\") > 0 then\n        return 'No'\n    elseif string.len(file_name) >= 3\
    \ then\n        if string.len(file_name) <= 5 then\n            return first_letter\
    \ >= string.len(string.sub(file_name,1,1)) and all_letters == \".\" and string.len(string.sub(file_name,2,1))\
    \ <= 4\n        else\n            return first_letter >= string.len(string.sub(file_name,1,1))\
    \ and all_letters == \".\" and string.len(string.sub(file_name,2,1)) <= 5\n  \
    \      end\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr1olaw3.lua:33:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpnr1olaw3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return 'No'\n   elseif file_name:sub(1, 3) ==\
    \ '' then\n      return 'No'\n   elseif file_name:sub(1, 1) ~= 'a' or\n      \
    \   file_name:sub(2, 2) ~= 'z' or\n         file_name:sub(3, 3) ~= 'A' or\n  \
    \       file_name:sub(4, 4) ~= 'Z' then\n      return 'No'\n   else\n      return\
    \ 'Yes'\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnythwl7c.lua:31:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpnythwl7c.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if string.sub(file_name, 0, 1) ~= nil then\n        return false\n    end\n\
    \    if string.sub(file_name, 1, 1) ~= nil then\n        return false\n    end\n\
    \    if string.find(file_name, \".\") ~= nil then\n        return false\n    end\n\
    \    if string.find(file_name, \".\", 1) ~= nil then\n        return false\n \
    \   end\n    if string.find(file_name, \".\", 2) ~= nil then\n        return false\n\
    \    end\n    if string.find(file_name, \"\", 1) ~= nil then\n        return false\n\
    \    end\n    \n    local file_extension = string.sub(file_name, string.find(file_name,\
    \ \".\") + 1, string.len(file_name))\n    if file_extension ~= \"exe\" and file_extension\
    \ ~= \"dll\" and file_extension ~= \"txt\" then\n        return false\n    end\n\
    \    \n    local file_start_letter = string.sub(file_name,1,1)\n    if string.find(file_name,\
    \ \"\", 1) ~= nil then\n        return false\n    end\n    if file_start_letter\
    \ ~= nil then\n        if string.find(file_start_letter, \"a\"..\"z\") or string.find(file_start_letter,\
    \ \"A\"..\"Z\") then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqeyvruxr.lua:53:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpqeyvruxr.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return not file_name:match(\"^[0-9]+\") or file_name:sub(1, 3) == '..' or\
    \ \n           not file_name:match(\"^[a-z]\") or file_name:sub(1, 1) ~= 'a'..'z'\
    \ or \n           not file_name:match(\"^[a-z]\") or file_name:sub(1, 1) ~= 'A'..'Z'\
    \ or \n           not file_name:match(\".{0,3}$\") or file_name:sub(1, 3) ~= 'exe'..'dll'\
    \ or \n           not file_name:match(\".{0,3}$\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal7cvned.lua:24:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpal7cvned.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \".\") == nil \n      or string.find(file_name,\
    \ \"\") ~= nil\n      or string.find(file_name, \".\") ~= 1\n      or string.find(file_name,\
    \ string.sub(file_name,1,string.find(file_name, \".\")-1)) ~= nil\n      or not\
    \ (string.find(file_name, string.sub(file_name,string.find(file_name, \".\")+1,string.len(file_name)))\
    \ \n              in ['txt', 'exe', 'dll'])\nend\n</cell>\n<text>\nExercise 10.\
    \ Write a function  that takes two arguments a string and a character as arguments.\
    \ \nThe function returns \"Yes\" if the argument string contains the character\
    \ and nothing else. \nOtherwise the function returns \"No\". You may want to use\
    \ the function string.find() in your function.\nExamples\nmy_function( \"hello.\"\
    , \"l\")\nmy_function( \"hello.\", \"h\")\nmy_function( \"hello.\", \".\")\nmy_function(\
    \ \"hello.\", \"!\")\nmy_function( \"hello.\", \".\")\nmy_function( \"hello!\"\
    , \".\")\nmy_function( \"hello.\", \"!\")\nmy_function( \"Hello!\", \"!\")\nmy_function(\
    \ \"hello!\", \"!\")\nmy_function( \"hello!\", \".\")\nmy_function( \"hello!\"\
    , \".\" )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx_mn9uk8.lua:19: ')' expected (to close '(' at line 18) near\
    \ 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- Check that the file name contains only three digits\n\tif string.find(file_name,\
    \ \"[^0-9]\") then\n\t\treturn 'No'\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1dpu0znu.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- If file name is not given\n   if file_name == nil then return nil end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuwfimxiv.lua:48: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if file_name == nil then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd4hsdf5i.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \"..\") then -- File name contains double dot (..)\n\
    \      return \"No\"\n   elseif string.find(file_name, \".\") then -- File name\
    \ contains dot (.)\n      return \"No\"\n   elseif string.find(file_name, \"%\"\
    ) then -- File name contains a percent (%)\n      return \"No\"\n   elseif string.find(file_name,\
    \ \"%..\") then -- File name contains a percent and double dot (%..)\n      return\
    \ \"No\"\n   elseif string.find(file_name, \" \") then -- File name contains space\n\
    \      return \"No\"\n   elseif string.find(file_name, \"%..%\") then -- File\
    \ name contains a percent and two dots (%..%)\n      return \"No\"\n   elseif\
    \ string.find(file_name, \"%..\") then -- File name contains a percent and two\
    \ dots\n      return \"No\"\n   elseif string.find(file_name, \"%..%..\") then\
    \ -- File name contains a percent and three dots\n      return \"No\"\n   elseif\
    \ string.find(file_name, \"%..%..%\") then -- File name contains a percent and\
    \ four dots\n      return \"No\"\n   elseif string.find(file_name, \"%..%..%..\"\
    ) then -- File name contains a percent and five dots\n      return \"No\"\n  \
    \ elseif string.find(file_name, \"%..%..%..%\") then -- File name contains a percent\
    \ and six dots\n      return \"No\"\n   elseif string.find(file_name, \"%..%..%..%..\"\
    ) then -- File name contains a percent and seven dots\n      return \"No\"\n \
    \  elseif string.find(file_name, \"%..%..%..%..%\") then -- File name contains\
    \ a percent and eight dots\n      return \"No\"\n   elseif string.find(file_name,\
    \ \"%..%..%..%..%..\") then -- File name contains a percent and nine dots\n  \
    \    return \"No\"\n   elseif string.find(file_name, \"%..%..%..%..%..%\") then\
    \ -- File name contains a percent and ten dots\n      return \"No\"\n   elseif\
    \ string.find(file_name, \"%..%..%..%..%..%..\") then -- File name contains a\
    \ percent and eleven dots\n      return \"No\"\n   elseif string.find(file_name,\
    \ \"%..%..%..%..%..%..%\") then -- File name contains a percent and twelve dots\n\
    \      return \"No\"\n   elseif string.find(file_name, \"%..%..%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpowc5_m22.lua:48: unfinished string near '\"%..%..%'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Create a pattern for the file's name.\n  local file_name_pattern = '^[0-9]{1,3}[a-zA-Z]{1}\\\
    .[a-zA-Z]{3,}$'\n  -- Create a pattern for substrings before and after the dot\n\
    \  local dot_pattern = '^[^.]$'\n  -- Create a pattern for substrings that don't\
    \ start with a letter from the latin alphabetic alphabet\n  local non_letter_starting_pattern\
    \ = '^[^a-zA-Z]$'\n  -- Check if the file's name is valid.\n  if string.match(file_name,\
    \ file_name_pattern) then\n    local dot_index = string.find(file_name, file_name_pattern)\n\
    \    if dot_index == nil then\n      return 'No'\n    elseif dot_index ~= 1 then\n\
    \      return 'No'\n    elseif string.sub(file_name,1,1) ~= '-' then\n      return\
    \ 'No'\n    elseif string.sub(file_name,dot_index - 1,dot_index) ~= '.' then\n\
    \      return 'No'\n    elseif string.match(file_name, dot_pattern) then\n   \
    \   return 'No'\n    elseif string.match(file_name, non_letter_starting_pattern)\
    \ then\n      return 'No'\n    else\n      return 'Yes'\n    end\n  end\n  return\
    \ 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg4pg4q0x.lua:15: invalid escape sequence near ''^[0-9]{1,3}[a-zA-Z]{1}\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return true \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6u6rda3c.lua:20:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp6u6rda3c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return false\n   end\n   if file_name ~= file_name:match(\"\
    ^[a-z0-9]\") then\n      return false\n   end\n   if file_name:match(\".\") then\n\
    \      return false\n   end\n   if file_name:match(\"^.{0,}\") then\n      return\
    \ false\n   end\n   if file_name:sub(1,1) == \".\" then\n      return false\n\
    \   end\n   if file_name:sub(1,1) ~= file_name:sub(1,1):match(\"^[a-z_]\") then\n\
    \      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuia6_hyt.lua:38:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpuia6_hyt.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name \n    if file_name == nil then return nil end\n\
    \    local dot_index = string.find(file_name, \".\") -- get the index of the first\
    \ dot\n    local first_char = string.sub(file_name,1,1) -- get the first char\
    \ of the name\n    if dot_index == nil then return false end\n    -- first char\
    \ must be a latin letter\n    if first_char:byte() ~= 65 then return false end\n\
    \    -- last char must not be a digit or dot\n    if string.sub(file_name,dot_index+1,1):byte()\
    \ ~= 46 then return false end\n    -- check if the first char is from the latin\
    \ alphabet\n    if string.sub(file_name,1,1) ~= 'a' ~= 'z' ~= 'A' then\n     \
    \   return false \n    end\n    \n    return true \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe62g1dz.lua:34:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpfe62g1dz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local first_char = string.sub(file_name,1,1)\n    local second_char = string.sub(file_name,2,1)\n\
    \    local last_char = string.sub(file_name,string.len(file_name),1)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwjo8qm75.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.gsub(file_name, \" \", \"_\") ~= \"\" and string.gsub(file_name,\
    \ \" \", \"_\") ~= nil and string.gsub(file_name, \".txt\", \".txt\") == \"txt\"\
    \ and string.gsub(file_name, \".exe\", \".exe\") == \"exe\" and string.gsub(file_name,\
    \ \".dll\", \".dll\") == \"dll\" and string.gsub(file_name, \".in\", \".in\")\
    \ == \"in\" and string.gsub(file_name, \".zip\", \".zip\") == \"zip\"\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5v0dg30.lua:20:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpv5v0dg30.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \treturn string.find(file_name, \"^[0-9]\" .. \".\" .. \"\" .. \"[a-zA-Z]\"..\"\
    [a-zA-Z0-9]\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknx51dv5.lua:20:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpknx51dv5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- remove whitespaces from beginning and end of file_name\n    file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    -- remove leading zeros from beginning and end of file_name\n\
    \    file_name = string.gsub(file_name, \" %[%01]\", \"\")\n    -- remove dot\
    \ from file_name\n    file_name = string.gsub(file_name, \" %[.]\", \"\")\n  \
    \  -- remove whitespaces from beginning and end of file_name\n    file_name =\
    \ string.gsub(file_name, \" \", \"\")\n    -- remove leading zeros from beginning\
    \ and end of file_name\n    file_name = string.gsub(file_name, \" %[%01]\", \"\
    \")\n    -- if length is less than 3, return 'No'\n    if (#file_name < 3) then\n\
    \        return 'No'\n    end\n    -- if length is less than 3 or contains '.',\
    \ return 'No'\n    if string.find(file_name, \".\") == nil then\n        return\
    \ 'No'\n    end\n    -- if string before '.' is not empty, return 'No'\n    if\
    \ string.find(file_name, \".\") ~= nil then\n        return 'No'\n    end\n  \
    \  -- if string before '.' contains non-letter or non-digit, return 'No'\n   \
    \ if (string.find(file_name, \"[^a-zA-Z0-9]\") ~= nil ) then\n        return 'No'\n\
    \    end\n    -- if string after '.' is not one of these: return 'No'\n    if\
    \ (string.find(file_name, \"exe\") ~= nil or\n        string.find(file_name, \"\
    dll\") ~= nil or\n        string.find(file_name, \"txt\") ~= nil ) then\n    \
    \    return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbi1w_g9p.lua:53:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpbi1w_g9p.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- if file_name contains no numbers, no dots, and no other characters\n \
    \   -- return 'Yes'\n    if file_name:sub(1,1) ~= '.' and\n       file_name:sub(#file_name,#file_name)\
    \  ~= '0' and\n       file_name:sub(#file_name,#file_name)  ~= '9' and\n     \
    \  (file_name:sub(1,1) == '.' or file_name:sub(1,1) ~= 'A' and file_name:sub(1,1)\
    \ ~= 'a')\n    then\n        return 'Yes'\n    else\n        return 'No'\n   \
    \ end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp9v0ra4l.lua:26: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if file_name_no_dot_count(file_name) == 0 then\n        return true \n  \
    \  end\n    \n    if not is_valid_filename(file_name, nil, true) then\n      \
    \  return false \n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw738bckk.lua:53: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local dot_position = string.find(file_name, \".\")\n  if dot_position == nil\
    \ or dot_position == 0 then\n    return \"No\"\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8m5zvrvr.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains only one '.' and that its first character\
    \ is a letter\n  if string.find(file_name, \".\") ~= nil then\n    local first_character_in_file_name\
    \ = string.sub(file_name,1,1)\n    if string.find(first_character_in_file_name,\
    \ \"0\") ~= nil then\n      return 'No'\n    elseif string.find(first_character_in_file_name,\
    \ \"1\") ~= nil then\n      return 'No'\n    elseif string.find(first_character_in_file_name,\
    \ \"2\") ~= nil then\n      return 'No'\n    elseif string.find(first_character_in_file_name,\
    \ \"3\") ~= nil then\n      return 'No'\n    elseif string.find(first_character_in_file_name,\
    \ \"4\") ~= nil then\n      return 'No'\n    elseif string.find(first_character_in_file_name,\
    \ \"5\") ~= nil then\n      return 'No'\n    elseif string.find(first_character_in_file_name,\
    \ \"6\") ~= nil then\n      return 'No'\n    elseif string.find(first_character_in_file_name,\
    \ \"7\") ~= nil then\n      return 'No'\n    elseif string.find(first_character_in_file_name,\
    \ \"8\") ~= nil then\n      return 'No'\n    elseif string.find(first_character_in_file_name,\
    \ \"9\") ~= nil then\n      return 'No'\n    else\n      return 'No'\n    end\n\
    \  else\n    return 'No'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3o1hq__.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpi3o1hq__.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return not (string.find(file_name, \"%.\") and\n                string.find(file_name,\
    \ \"%.\", 1,\n                string.find(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq3l7p76j.lua:16:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpq3l7p76j.lua:16: in local 'candidate'\n\t/tmp/tmpq3l7p76j.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if not file_name then\n        return 'No'\n    end\n    local num = tonumber(file_name)\n\
    \    if num == nil then\n        return 'No'\n    end\n    local num2 = tonumber(file_name:sub(1,\
    \ 4))\n    local ext = file_name:sub(4)\n    if num2 ~= nil and num2 ~= num then\n\
    \        return 'No'\n    end\n    if ext:sub(1, 2) ~= 'exe' and ext:sub(1, 2)\
    \ ~= 'dll' and ext:sub(1, 2) ~= 'txt' then\n        return 'No'\n    end\n   \
    \ if num == 0 then\n        return 'No'\n    end\n    if num ~= 0 and (num < 1\
    \ or num > 9) then\n        return 'No'\n    end\n    if ext:sub(1, 2) == 'exe'\
    \ and ext:sub(3, 3) == 'dll' then\n        return 'No'\n    end\n    if ext:sub(1,\
    \ 2) ~= 'exe' and ext:sub(1, 2) ~= 'dll' then\n        return 'No'\n    end\n\
    \    if ext:sub(1, 2) ~= 'exe' then\n        return 'No'\n    end\n    if ext:sub(1,\
    \ 2) ~= 'dll' then\n        return 'No'\n    end\n    if ext:sub(1, 2) ~= 'txt'\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxw5_x_z.lua:56:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpsxw5_x_z.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Define a regular expression pattern to match file names.\n  -- The pattern\
    \ is defined below as the string \"^[a-z][a-z0-9]*\\.[a-zA-Z]+$\", \n  -- which\
    \ means \"any string starting with a latin letter and ending with a file extension.\n\
    \  local file_pattern = \"^[a-z][a-z0-9]*\\.[a-zA-Z]+$\"\n  -- Define a variable\
    \ to hold the return value.\n  -- The return value will be 'Yes' if and only if\
    \ the pattern matches the file name.\n  local file_check = file_name == nil or\n\
    \                      file_name == \"\" or\n                      not file_name\
    \ or\n                      not file:match(file_pattern) \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2mj_3pjd.lua:17: invalid escape sequence near '\"^[a-z][a-z0-9]*\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local function is_valid_number(number)\n        -- Checks if the number is\
    \ composed of exactly one digit and has at least\n        -- one digit\n     \
    \   return (string.gsub(number, \"%d\", 1) ~= nil) and (string.format(\"%0d\"\
    , tonumber(number)) ~= nil)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvukyso51.lua:51: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.sub(file_name,1,1)\
    \ ~= '0' or string.sub(file_name,1,1) ~= '9' then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return nil\n   end\n \
    \  if string.find(file_name, \" \") ~= nil then\n      return nil\n   end\n  \
    \ if string.find(file_name, \".\") ~= nil then\n      if string.find(file_name,\"\
    .\") == 0 or string.find(file_name,\".\") == 1 or string.find(file_name,\".\"\
    ) == 2 or string.find(file_name,\".\") == 3 then\n         return nil\n      elseif\
    \ string.find(file_name,\".\") == 4 or string.find(file_name,\".\") == 5 or string.find(file_name,\"\
    .\") == 6 or string.find(file_name,\".\") == 7 or string.find(file_name,\".\"\
    ) == 8 or string.find(file_name,\".\") == 9 or string.find(file_name,\".\") ==\
    \ 10 or string.find(file_name,\".\") == 11 then\n         return nil\n      else\n\
    \         return 'No'\n      end\n   end\n   if string.find(file_name, \".\")\
    \ == nil then\n      return 'Yes'\n   end\n   if string.find(file_name,\".\")\
    \ == 0 or string.find(file_name,\".\") == 1 or string.find(file_name,\".\") ==\
    \ 2 or string.find(file_name,\".\") == 3 then\n      return 'No'\n   end\n   if\
    \ string.find(file_name,\".\") == 4 or string.find(file_name,\".\") == 5 or string.find(file_name,\"\
    .\") == 6 or string.find(file_name,\".\") == 7 or string.find(file_name,\".\"\
    ) == 8 or string.find(file_name,\".\") == 9 or string.find(file_name,\".\") ==\
    \ 10 or string.find(file_name,\".\") == 11 then\n      return 'No'\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s871bda.lua:49:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp8s871bda.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_ext = string.gsub(file_name, \"%.\", \"\")\n  local file_ext = string.lower(file_ext)\n\
    \  if file_ext == \".exe\" or file_ext == \".dll\" or file_ext == \".txt\" then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcpayhvy.lua:26:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmphcpayhvy.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- Return true if the file's name satisfies the above conditions.\n    --\
    \ Otherwise, return false:\n    -- The file's name contains exactly one dot '.'\n\
    \    -- - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    -- the latin alphapet ('a'-'z' and 'A'-'Z').\n    -- - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    return\
    \ not file_name:sub(1, -1) == '.' and\n        file_name:sub(1, 1) == string.lower(string.sub(file_name,\
    \ 1, 1)) and\n        string.sub(file_name, 1, 1) ~= '\\0' and\n        string.sub(file_name,\
    \ 2, 4) ~= {'txt', 'exe', 'dll'};\nend\n</code>\nAnd then call it like this:\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe3w2xtf_.lua:25: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- remove any white space character\n  file_name = string.gsub(file_name, \"\
    \ \", \"\")\n  -- remove any non printable character\n  file_name = string.gsub(file_name,\
    \ string.char(13), \"\")\n  -- remove any non ascii character\n  file_name = string.gsub(file_name,\
    \ string.char(7), \"\")\n  -- remove any non latin character, excluding dot and\
    \ space\n  file_name = string.gsub(file_name, string.char(127,127,127), \"\")\n\
    \  -- remove any non latin character, excluding dot and space\n  file_name = string.gsub(file_name,\
    \ string.char(65533,65533,65533), \"\")\n  -- remove any non latin character,\
    \ excluding dot and space\n  file_name = string.gsub(file_name, string.char(1048575,1048575,1048575),\
    \ \"\")\n  -- remove any non latin character, excluding dot and space\n  file_name\
    \ = string.gsub(file_name, string.char(1114112,1114112,1114112), \"\")\n  -- remove\
    \ any non latin character, excluding dot and space\n  file_name = string.gsub(file_name,\
    \ string.char(9398248,9398248,9398248), \"\")\n  -- remove any non latin character,\
    \ excluding dot and space\n  file_name = string.gsub(file_name, string.char(57344,57344,57344),\
    \ \"\")\n  -- remove any non latin character, excluding dot and space\n  file_name\
    \ = string.gsub(file_name, string.char(65535,65535,65535), \"\")\n  -- remove\
    \ any non latin character, excluding dot and space\n  file_name = string.gsub(file_name,\
    \ string.char(1048577,1048577,1048577), \"\")\n  -- remove any non latin character,\
    \ excluding dot and space\n  file_name = string.gsub(file_name, string.char(1114113,1114113,1114113),\
    \ \"\")\n  -- remove any non latin character, excluding dot and space\n  file_name\
    \ = string.gsub(file_name, string.char(9398249,9398249,9398249), \"\")\n  -- remove\
    \ any non latin character, excluding dot and space\n  file_name = string.gsub(file_name,\
    \ string.char(57345,57345,57345), \"\")\n  -- remove any non latin character,\
    \ excluding dot and space\n  file_name = string.gsub(file_name, string.char(65536,65536,65536),\
    \ \"\")\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3gkr5d53.lua:77: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local num_digits = string.len(file_name)\n    if num_digits > 3 then\n  \
    \      return 'No'\n    end\n    local first_character = file_name:sub(1, 1)\n\
    \    if first_character ~= string.upper(first_character) or string.find(file_name,\
    \ '.') then\n        return 'No'\n    end\n    local last_characters = file_name:sub((string.len(file_name)\
    \ - 1))\n    local valid_extensions = \n        {\n        'txt', \n        'exe',\
    \ \n        'dll'\n        }\n    if string.find(last_characters, '.') ~= nil\
    \ then\n        if string.find(last_characters, '.') > 1 or string.find(last_characters,\
    \ '..') then\n            return 'No'\n        end\n    end\n    local letters\
    \ = string.letters()\n    if string.find(last_characters, letters[1]) ~= nil then\n\
    \        return 'No'\n    end\n    if string.find(last_characters, letters[3])\
    \ ~= nil then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa1_0o1x.lua:47:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpwa1_0o1x.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check for invalid characters\n   if string.find(file_name, \"^[0-9]$\"\
    ) then\n      return 'No'\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq16_ny28.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \tlocal file_name = file_name:gsub(\"[^0-9\\.]\", \"\") -- Remove all non-numeric\
    \ characters\n\tlocal has_dot = (file_name ~= \"\") and (file_name:sub(1, 1) ~=\
    \ \".\") -- Check if there is dot in the file name\n\tlocal file_name_starts_with_latin_letter\
    \ = (file_name ~= \"\") and (file_name:sub(1, 1) ~= \"\") -- Check if the first\
    \ character is latin letter\n\tlocal substring_before_dot = has_dot and file_name:sub(2,\
    \ 3) -- Get the substring before dot\n\tlocal substring_after_dot = has_dot and\
    \ file_name:sub((has_dot and #file_name + 3), 4) -- Get the substring after dot\n\
    \tlocal dot_file_types = {\"txt\", \"exe\", \"dll\"}\n\tlocal dot_file_type_correct\
    \ = (substring_before_dot == \"\") and (substring_after_dot == \"\") and (substring_before_dot\
    \ ~= \"\") and (substring_after_dot ~= \"\") and (substring_before_dot:sub(1,\
    \ 1) in dot_file_types) and (substring_after_dot:sub(1, 1) in dot_file_types)\n\
    \tlocal dot_file_type_correct_and_has_3_digits = (substring_before_dot == \"\"\
    ) and (substring_after_dot == \"\") and (substring_before_dot ~= \"\") and (substring_after_dot\
    \ ~= \"\") and (substring_before_dot:sub(1, 1) in dot_file_types) and (substring_after_dot:sub(1,\
    \ 1) in dot_file_types) and (#file_name > 3)\n\t\n\tif dot_file_type_correct and\
    \ dot_file_type_correct_and_has_3_digits then -- If the file name is valid\n\t\
    \treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpru_zncjg.lua:14: invalid escape sequence near '\"[^0-9\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- Check for no digits in file's name.\n\tif string.find(file_name, '%[0-9]')\
    \ then\n\t\treturn 'No'\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl2_x6sxe.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- The substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet\n    -- ('a'-'z' and 'A'-'Z')\n    return not\
    \ is_empty(file_name) \n        and not(file_name:sub(1,1) .. \"\") \n       \
    \ and not ((file_name:sub(1,1):lower() == 'a' and file_name:sub(1,2):lower() ==\
    \ 'z')\n                 or (file_name:sub(1,1):lower() == 'a' and file_name:sub(1,2):lower()\
    \ == 'z')\n                 or (file_name:sub(1,1):lower() == 'a' and file_name:sub(1,2):lower()\
    \ == 'z')\n                 or (file_name:sub(1,1):lower() == 'a' and file_name:sub(1,2):lower()\
    \ == 'z'))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5557ufwb.lua:16:\
    \ attempt to call a nil value (global 'is_empty')\nstack traceback:\n\t/tmp/tmp5557ufwb.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp5557ufwb.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name:len() < 5 then\n      return 'No'\n   else\n      local file_ext\
    \ = file_name:sub(1, 4)\n      -- The file_ext is one of these: ['txt', 'exe',\
    \ 'dll']\n      if file_ext == nil then\n          return 'No'\n      elseif file_ext\
    \ ~= 'txt' and file_ext ~= 'exe' and file_ext ~= 'dll' then\n          return\
    \ 'No'\n      elseif file_ext == 'txt' then\n          if file_name:sub(1, 2)\
    \ ~= '00' then\n              return 'No'\n          else\n              return\
    \ 'Yes'\n          end\n      elseif file_ext == 'exe' then\n          if file_name:sub(1,\
    \ 2) ~= '00' then\n              return 'No'\n          else\n              return\
    \ 'Yes'\n          end\n      elseif file_ext == 'dll' then\n          if file_name:sub(1,\
    \ 2) ~= '00' then\n              return 'No'\n          else\n              return\
    \ 'Yes'\n          end\n      end\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2qw84u8.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpr2qw84u8.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.match(\"%^[0-9][0-9][0-9][0-9]%.[exe|dll]$%\", file_name) ~=\
    \ nil and #file_name >= 3 and string.sub(file_name, 1, 1) ~= nil and string.match(string.lower(string.sub(file_name,1,3)),\
    \ string.lower(\"abcdefghijklmnopqrstuvwxyz\")) ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclm9w01q.lua:20:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpclm9w01q.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if string.find(file_name, \".\") ~= nil then\n        return false\n    end\n\
    \    if string.find(file_name, \" \") ~= nil then\n        return false\n    end\n\
    \    if string.find(file_name, \"0\"..\"9\") ~= nil then\n        return false\n\
    \    end\n    if string.find(file_name, \" 0 \") ~= nil then\n        return false\n\
    \    end\n    if string.find(file_name, \"a\"..\"z\") ~= nil then\n        return\
    \ false\n    end\n    if string.find(file_name, \"A\"..\"Z\") ~= nil then\n  \
    \      return false\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95e0e_13.lua:38:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp95e0e_13.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Get the file's name without extension.\n   local ext = file_name:match(\"\
    %.[^.]*$\")\n   -- If the file's name doesn't contain two dots, it's invalid.\n\
    \   if file_name == \"\" then\n      return 'No'\n   end\n   -- If the file's\
    \ name contains less than two dots, it's invalid.\n   if file_name:sub(1, 2) ==\
    \ \"\" then\n      return 'No'\n   end\n   -- If the file's name doesn't contain\
    \ only three digits, it's invalid.\n   if tonumber(file_name:sub(1, 3)) < 0 or\
    \ tonumber(file_name:sub(1, 3)) > 9 then\n      return 'No'\n   end\n   -- If\
    \ the file's name contains a dot ('.') but doesn't start with a latin alphabetic\
    \ \n   -- letter ('a'-'z' or 'A'-'Z'), it's invalid.\n   if file_name:sub(1, 1)\
    \ ~= \".\" or file_name:sub(1, 1) ~= string.sub(\"abcdefghijklmnopqrstuvwxyz\"\
    , 1, 1) then\n      return 'No'\n   end\n   -- If the file's name contains the\
    \ dot ('.') but does not end with latin alphabetic\n   -- letter ('a'-'z' or 'A'-'Z'),\
    \ it's invalid.\n   if file_name:sub(1, #file_name ~= \".\" or file_name:sub(1,\
    \ #file_name ~= string.sub(\"abcdefghijklmnopqrstuvwxyz\", 1, 1) then\n      return\
    \ 'No'\n   end\n   -- If the file's name ends with a dot ('.') but does not start\
    \ with a latin alphabetic\n   -- letter ('a'-'z' or 'A'-'Z'), it's invalid.\n\
    \   if file_name:sub(1, #file_name) ~= \".\" or file_name:sub(1, #file_name) ~=\
    \ string.sub(\"abcdefghijklmnopqrstuvwxyz\", 1, 1) then\n      return 'No'\n \
    \  end\n   -- If the file's name ends with the dot ('.') but starts with a latin\
    \ alphabetic\n   -- letter ('a'-'z' or 'A'-'Z'), it's valid.\n   if string.sub(file_name,\
    \ 1, #file_name ~= \".\" or string.sub(file_name, 1, #file_name ~= string.sub(\"\
    abcdefghijklmnopqrstuvwxyz\", 1, 1) then\n      return 'Yes'\n   end\n   return\
    \ 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9hi4pbot.lua:35: ')' expected near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return string.sub(file_name, 1, string.len(file_name) - 2) == '.' and\n \
    \   string.sub(file_name, 1, 1) ~= '0' and\n    string.sub(file_name, 1, 1) ~=\
    \ '9' and\n    string.sub(file_name, 1, string.len(file_name) - 2) ~= '0' and\n\
    \    string.sub(file_name, 1, string.len(file_name) - 2) ~= '9' and\n    string.sub(file_name,\
    \ 1, string.len(file_name) - 2) ~= '.' and\n    string.sub(file_name, 1, string.len(file_name)\
    \ - 2) ~= '.' and\n    string.sub(file_name, 1, string.len(file_name) - 2) ~=\
    \ '.' and\n    string.sub(file_name, 1, string.len(file_name) - 2) ~= 'exe' and\n\
    \    string.sub(file_name, 1, string.len(file_name) - 2) ~= 'dll'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm62ggjt.lua:29:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpvm62ggjt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local last_index = #file_name - 1;\n    local index = 1;\n    local letter;\n\
    \    local found;\n    local valid_char;\n    while index <= last_index do\n \
    \       letter = file_name:sub(1,index); \n        found = string.find(letter,\
    \ 'a'..'z');\n        if found == 1 then\n            valid_char = 1;\n      \
    \  elseif found == 2 then\n            valid_char = 1;\n        elseif found ==\
    \ 3 then\n            valid_char = 1;\n        else\n            valid_char =\
    \ 0;\n        end\n        if valid_char == 0 then\n            return 0;\n  \
    \      end\n        index = index+1;\n    end\n    if string.find(file_name, \"\
    .\") == 0 then\n        return 0;\n    end\n    letter = file_name:sub(1,string.find(file_name,\
    \ \".\"));\n    valid_char = 1;\n    if string.find(letter, 'a'..'z') ~= 1 then\n\
    \        valid_char = 0;\n    elseif string.find(letter, 'A'..'Z') ~= 1 then\n\
    \        valid_char = 0;\n    elseif string.find(letter, '0'..'9') ~= 1 then\n\
    \        valid_char = 0;\n    end\n    if valid_char == 1 then\n        return\
    \ 1;\n    else\n        return 0;\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjx19v8s.lua:58:\
    \ expected: \"Yes\"\nactual: 0\nstack traceback:\n\t/tmp/tmpfjx19v8s.lua:58: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \".\", 1) == 0 and\n         string.find(file_name,\
    \ \".\") == 1 and\n         string.find(file_name, string.sub(file_name,1, string.len(file_name)-1))\
    \ == 1 and\n         string.find(file_name, \".\", string.len(file_name)-1) ==\
    \ 1 and\n         string.find(file_name, \".\") == string.len(file_name)-1 and\n\
    \         string.find(file_name, \".\") == 1 and\n         string.find(file_name,\
    \ \".\", 1) ~= 0 and\n         string.find(file_name, \".\", 1, string.len(file_name)-1)\
    \ and\n         string.find(file_name, \".\", 1, string.len(file_name)-1) == 1\
    \ and\n         string.find(file_name, \".\", 1, string.len(file_name)-1) and\
    \ \n         string.find(file_name, \".\", 1, string.len(file_name)-1) and \n\
    \         string.find(file_name, \".\", 1, string.len(file_name)-1) and \n   \
    \      string.find(file_name, \".\", 1, string.len(file_name)-1) and \n      \
    \   string.find(file_name, \".\", 1, string.len(file_name)-1) and \n         string.find(file_name,\
    \ \".\", 1, string.len(file_name)-1) and \n         string.find(file_name, \"\
    .\", 1, string.len(file_name)-1) and \n         string.find(file_name, \".\",\
    \ 1, string.len(file_name)-1) and \n         string.find(file_name, \".\", 1,\
    \ string.len(file_name)-1) and \n         string.find(file_name, \".\", 1, string.len(file_name)-1)\
    \ and \n         string.find(file_name, \".\", 1, string.len(file_name)-1) and\
    \ \n         string.find(file_name, \".\", 1, string.len(file_name)-1) and \n\
    \         string.find(file_name, \".\", 1, string.len(file_name)-1) and \n   \
    \      string.find(file_name, \".\", 1, string.len(file_name)-1) and \n      \
    \   string.find(file_name, \".\", 1, string.len(file_name)-1) and \n         string.find(file_name,\
    \ \".\", 1, string.len(file_name)-1) and \n         string.find(file_name, \"\
    .\", 1, string.len(file_name)-1) and \n         string.find(file_name, \".\",\
    \ 1, string.len(file_name)-1) and \n         string.find(file_name, \".\", 1,\
    \ string.len(file_name)-1) and \n         string.find(file_name, \".\", 1, string.len(file_name)-1)\
    \ and \n         string.find(file_name, \".\", 1, string.len(file_name)-1) and\
    \ \n         string.find(file_name, \".\", 1, string.len(file_name)-1) and \n\
    \         string.find(file_name, \".\", 1, string.len(file_name)-1) and \n   \
    \      string.find(file_name, \".\", 1, string.len(file_name)-1) and \n      \
    \   string.find(file_name, \".\", 1, string.len(file_name)-1) and \n         string.find(file_name,\
    \ \".\", 1, string.len(file_name)-1) and \n         string.find(file_name, \"\
    .\", 1, string.len(file_name)-1) and \n         string.find(file_name, \".\",\
    \ 1, string.len(file_name)-1) and \n         \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuyix0elv.lua:52: 'end' expected (to close 'function' at line\
    \ 13) near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name\n  -- The following condition will make sure there\
    \ are not more than 3 digits (0 to 9)\n  file_name = string.gsub(file_name, \"\
    \ \", \"\")\n  file_name = string.gsub(file_name, \",\", \"\")\n  file_name =\
    \ string.gsub(file_name, \".\", \"\")\n  file_name = string.gsub(file_name, \"\
    \ \", \"\")\n  file_name = string.gsub(file_name, \" \", \"\")\n  file_name =\
    \ string.gsub(file_name, \" \", \"\")\n  file_name = string.gsub(file_name, \"\
    \\\"\", \"\")\n  file_name = string.gsub(file_name, \"%\", \"\")\n  file_name\
    \ = string.gsub(file_name, \"#\", \"\")\n  file_name = string.gsub(file_name,\
    \ \"$\", \"\")\n  file_name = string.gsub(file_name, \"%\", \"\")\n  file_name\
    \ = string.gsub(file_name, \"'\", \"\")\n  file_name = string.gsub(file_name,\
    \ \"(\", \"\")\n  file_name = string.gsub(file_name, \")\", \"\")\n  file_name\
    \ = string.gsub(file_name, \"[\", \"\")\n  file_name = string.gsub(file_name,\
    \ \"]\", \"\")\n  file_name = string.gsub(file_name, \"{\", \"\")\n  file_name\
    \ = string.gsub(file_name, \"}\", \"\")\n  file_name = string.gsub(file_name,\
    \ \"/\", \"\")\n  file_name = string.gsub(file_name, \"\\\\\", \"\")\n  file_name\
    \ = string.gsub(file_name, \"<\", \"\")\n  file_name = string.gsub(file_name,\
    \ \">\", \"\")\n  file_name = string.gsub(file_name, \"|\", \"\")\n  file_name\
    \ = string.gsub(file_name, \"?\", \"\")\n  file_name = string.gsub(file_name,\
    \ \":\", \"\")\n  file_name = string.gsub(file_name, \"\\\"\", \"\")\n  file_name\
    \ = string.gsub(file_name, \":\", \"\")\n  file_name = string.gsub(file_name,\
    \ \":\", \"\")\n  file_name = string.gsub(file_name, \"-\", \"\")\n  file_name\
    \ = string.gsub(file_name, \" \", \"\")\n  file_name = string.gsub(file_name,\
    \ \"-\", \"\")\n  file_name = string.gsub(file_name, \" \", \"\")\n  file_name\
    \ = string.gsub(file_name, \".\", \"\")\n  file_name = string.gsub(file_name,\
    \ \"[\", \"\")\n  file_name = string.gsub(file_name, \"]\", \"\")\n  file_name\
    \ = string.gsub(file_name, \"(\", \"\")\n  file_name = string.gsub(file_name,\
    \ \")\", \"\")\n  file_name = string.gsub(file_name, \"{\", \"\")\n  file_name\
    \ = string.gsub(file_name, \"}\", \"\")\n  file_name = string.gsub(file_name,\
    \ \"%\", \"\")\n  file_name = string.gsub(file_name, \"-\", \"\")\n  file_name\
    \ = string.gsub(file_name, \"-\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph49i93ad.lua:57: unfinished string near '\"-'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name\n  local substring_check = file_name:sub(1, 3)\n\
    \  if not (substring_check == \"\" and (string.find(substring_check, \".\") ==\
    \ 1 and (string.find(file_name, \".\") ~= 1 or file_name:sub(1, 1) ~= string.upper(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) or (string.find(file_name, \".\") ~= 2 and string.find(file_name,\
    \ \".\") ~= 3 and string.find(file_name, \".\") ~= 4))) then \n    return 'No'\n\
    \  else\n    return 'Yes'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz417_a12.lua:16: ')' expected near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local dot = file_name:find('%.')\n    local dot_position = file_name:sub(1,\
    \ dot-1)\n    local valid_char = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    local dot_position = dot_position\n    local dot_len = #dot_position\n \
    \   local first_char_is_valid = valid_char:find(dot_position, 1)\n    local dot_position_len\
    \ = #dot_position\n    local is_valid_char\n    if dot_position_len > 1 then\n\
    \        return false\n    elseif dot_position_len == 1 then\n        if first_char_is_valid\
    \ == 1 then\n            is_valid_char = 'a'\n        else\n            is_valid_char\
    \ = 'A'\n        end\n    else\n        return false\n    end\n    \n    local\
    \ file_name = file_name:sub(2)\n    local extension = file_name:sub(file_name)\n\
    \    local extension_len = #extension\n    if dot_len == 0 then\n        return\
    \ false\n    elseif dot_len < 3 then\n        return false\n    elseif extension_len\
    \ > 1 then\n        return false\n    elseif extension_len == 1 then\n       \
    \ if extension:sub(1, 1) == 'e' or\n           extension:sub(1, 1) == 'E' then\n\
    \            if extension:sub(1, 1) == 'e' then\n                -- extension:sub(1,\
    \ 1) = 'e' is case sensitive\n                -- extension:sub(1, 1) = 'E' is\
    \ case sensitive\n            elseif extension:sub(1, 1) == 'E' then\n       \
    \         -- extension:sub(1, 1) = 'e' is case sensitive\n                -- extension:sub(1,\
    \ 1) = 'E' is case sensitive\n            end\n        end\n    else\n       \
    \ return false\n    end\n    if #file_name > 32 then\n        return false\n \
    \   else\n        return true\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcldcfvoi.lua:67:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpcldcfvoi.lua:67:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local digits = string.gmatch(file_name, \"[^0-9]\");\n    if digits ~= nil\
    \ then\n        return false\n    end\n    local ext = string.gmatch(file_name,\
    \ \"^[^.]*\");\n    if ext ~= nil then\n        local substr = string.gsub(ext,\
    \ \".\", \"\");\n        if substr ~= nil then\n            if string.sub(i, 1,\
    \ 1) ~= 'a' and string.sub(i, 1, 1) ~= 'A' then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7shqpj4.lua:33:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpk7shqpj4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   return string.sub(file_name, 0, 5) == '0' and string.sub(file_name, 1, 6)\
    \ and string.sub(file_name, 1, 1) ~= '-' and (string.sub(file_name, 1, 4) ~= '.'\
    \ or string.sub(file_name, string.find(file_name, string.format(\"%.%s\", 5))\
    \ == nil)) and (string.sub(file_name, string.find(file_name, \".\", 5) + 1, string.find(file_name,\
    \ \".\", 6) - string.find(file_name, \".\", 5) - 1) ~= '.') and (string.sub(file_name,\
    \ string.find(file_name, \".\", 5) + 1, string.find(file_name, \".\", 6) - 1)\
    \ ~= 'txt') and (string.sub(file_name, string.find(file_name, \".\", 5) + 1, string.find(file_name,\
    \ \".\", 6) - 1) ~= 'exe') and (string.sub(file_name, string.find(file_name, \"\
    .\", 5) + 1, string.find(file_name, \".\", 6) - 1) ~= 'dll')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkjx6i9_.lua:20:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpgkjx6i9_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local digit_count\n  digit_count = string.gsub(file_name, \"%.\", \"\")\n \
    \ if digit_count ~= 3 or digit_count == 3 then\n    return 'No'\n  end\n  local\
    \ first_letter = string.sub(file_name, 1, 1)\n  if first_letter ~= string.char(\"\
    a\") and first_letter ~= string.char(\"z\") and first_letter ~= string.char(\"\
    A\") and first_letter ~= string.char(\"Z\") then\n    return 'No'\n  end\n  local\
    \ allowed_extensions = string.format(\"%w[.]%w\", {'txt', 'exe', 'dll'})\n  local\
    \ dot_index = string.find(file_name, \".\")\n  if dot_index ~= 1 then\n    return\
    \ 'No'\n  end\n  local extension = string.sub(file_name, dot_index + 1, string.len(file_name))\n\
    \  if allowed_extensions == nil then\n    return 'No'\n  end\n  if string.find(extension,\
    \ 1, allowed_extensions, 1, true) ~= nil then\n    return 'Yes'\n  end\n  return\
    \ 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4d_1hkw0.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp4d_1hkw0.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4042i54l.lua:20:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp4042i54l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local digits = string.gsub(file_name, \"\", \"0123456789\")\n   return ((digits\
    \ ~= \"\") and (digits ~= \".\") and ((digits ~= \"\") and (digits ~= \"..\"))\
    \ and ((string.sub(file_name, 1, 1) ~= 'a') and (string.sub(file_name, 1, 1) ~=\
    \ 'A')) and ((string.sub(file_name, string.find(file_name, \":\", 1, true)..2)\
    \ ~= \"txt\") and  (string.sub(file_name, string.find(file_name, \":\", 1, true)..2)\
    \ ~= \"exe\") and  (string.sub(file_name, string.find(file_name, \":\", 1, true)..2)\
    \ ~= \"dll\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe7apbvx2.lua:16: ')' expected (to close '(' at line 15) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_ext = string.match(file_name, \"%..%\")\n  if file_ext == \"exe\"\
    \ then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgiay15ih.lua:14:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmpgiay15ih.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpgiay15ih.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if file_name == nil or file_name == \"\" then\n        return \"No\"\n  \
    \  end\n    local num_files = string.len(file_name)\n    if num_files < 3 then\n\
    \        return \"No\"\n    end\n    local first_dot = string.find(file_name,\
    \ \".\")\n    if first_dot == nil then\n        return \"No\"\n    end\n    local\
    \ sub_string = string.sub(file_name, 1, first_dot)\n    if sub_string:find(\"\
    ^[%a..z]\") then\n        return \"No\"\n    end\n    if string.find(sub_string,\
    \ \".\") ~= nil then\n        return \"No\"\n    end\n    if string.find(sub_string,\
    \ \" \") ~= nil then\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuokv7ru1.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpuokv7ru1.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \treturn (string.sub(file_name, 1, 1) ~= '\\' or string.find(file_name, \":\"\
    , 1, true) or \n\t\tstring.find(file_name, \".\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"/\", 1, true) or \n\t\tstring.find(file_name, \"\\\\\", 1, true) or \n\t\t\
    string.find(file_name, \"%\", 1, true) or \n\t\tstring.find(file_name, \"[\",\
    \ 1, true) or \n\t\tstring.find(file_name, \"]\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"<\", 1, true) or \n\t\tstring.find(file_name, \">\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"|\", 1, true) or \n\t\tstring.find(file_name, \" \", 1, true) or \n\t\tstring.find(file_name,\
    \ \";\", 1, true) or \n\t\tstring.find(file_name, \",\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"=\", 1, true) or \n\t\tstring.find(file_name, \"[\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"]\", 1, true) or \n\t\tstring.find(file_name, \"<\", 1, true) or \n\t\tstring.find(file_name,\
    \ \">\", 1, true) or \n\t\tstring.find(file_name, \"|\", 1, true) or \n\t\tstring.find(file_name,\
    \ \" \", 1, true) or \n\t\tstring.find(file_name, \";\", 1, true) or \n\t\tstring.find(file_name,\
    \ \",\", 1, true) or \n\t\tstring.find(file_name, \"=\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"[\", 1, true) or \n\t\tstring.find(file_name, \"]\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"<\", 1, true) or \n\t\tstring.find(file_name, \">\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"|\", 1, true) or \n\t\tstring.find(file_name, \" \", 1, true) or \n\t\tstring.find(file_name,\
    \ \";\", 1, true) or \n\t\tstring.find(file_name, \",\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"=\", 1, true) or \n\t\tstring.find(file_name, \"[\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"]\", 1, true) or \n\t\tstring.find(file_name, \"<\", 1, true) or \n\t\tstring.find(file_name,\
    \ \">\", 1, true) or \n\t\tstring.find(file_name, \"|\", 1, true) or \n\t\tstring.find(file_name,\
    \ \" \", 1, true) or \n\t\tstring.find(file_name, \";\", 1, true) or \n\t\tstring.find(file_name,\
    \ \",\", 1, true) or \n\t\tstring.find(file_name, \"=\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"[\", 1, true) or \n\t\tstring.find(file_name, \"]\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"<\", 1, true) or \n\t\tstring.find(file_name, \">\", 1, true) or \n\t\tstring.find(file_name,\
    \ \"|\", 1, true) or \n\t\tstring.find(file_name, \" \", 1, true) or \n\t\tstring.find(file_name,\
    \ \";\", 1, \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp66825uwz.lua:14: unfinished string near ''' or string.find(file_name,\
    \ \":\", 1, true) or '\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local valid = false\n    local index = 2\n    while true do\n        local\
    \ digit = file_name:sub(index, index):byte()\n        if digit ~= 0 then\n   \
    \         if digit > 9 then\n                valid = false\n                break\n\
    \            elseif digit < 48 then\n                valid = false\n         \
    \       break\n            elseif digit > 57 then\n                valid = false\n\
    \                break\n            elseif digit:sub(1,1) ~= \".\" then\n    \
    \            valid = false\n                break\n            elseif file_name:sub(1,\
    \ index-1) ~= \".\" then\n                valid = false\n                break\n\
    \            elseif file_name:sub(1, index-2) ~= \".\" then\n                valid\
    \ = false\n                break\n            elseif file_name:sub(1, index-2)\
    \ ~= \".\" then\n                valid = false\n                break\n      \
    \      elseif file_name:sub(1, index-2) ~= \".\" then\n                valid =\
    \ false\n                break\n            elseif file_name:sub(1, index-2) ~=\
    \ \".\" then\n                valid = false\n                break\n         \
    \   elseif file_name:sub(1, index-2) ~= \".\" then\n                valid = false\n\
    \                break\n            elseif file_name:sub(1, index-2) ~= \".\"\
    \ then\n                valid = false\n                break\n            elseif\
    \ file_name:sub(1, index-2) ~= \".\" then\n                valid = false\n   \
    \             break\n            elseif file_name:sub(1, index-2) ~= \".\" then\n\
    \                valid = false\n                break\n            elseif file_name:sub(1,\
    \ index-2) ~= \".\" then\n                valid = false\n                break\n\
    \            elseif file_name:sub(1, index-2) ~= \".\" then\n                valid\
    \ = false\n                break\n            elseif file_name:sub(1, index-2)\
    \ ~= \".\" then\n                valid = false\n                break\n      \
    \      elseif file_name:sub(1, index-2) ~= \".\" then\n                valid =\
    \ false\n                break\n            elseif file_name:sub(1, index-2) ~=\
    \ \".\" then\n                valid = false\n                break\n         \
    \   elseif file_name:sub(1, index-2) ~= \".\" then\n                valid = false\n\
    \                break\n            elseif file_name:sub(1, index-2) ~= \".\"\
    \ then\n                valid = false\n                break\n            elseif\
    \ file_name:sub(1, index-2) ~= \".\" then\n                valid = false\n   \
    \             break\n            elseif file_name:sub(1, index-2) ~= \".\" then\n\
    \                valid = false\n                break\n            elseif file_name:sub(1,\
    \ index-2) ~= \".\" then\n                valid = false\n                break\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8i7eu_i3.lua:121: 'end' expected (to close 'if' at line 19)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local digits = string.match(file_name, \"^%w(%d*)%.(%w*)$\")\n  if digits ==\
    \ nil then\n    return 'No'\n  end\n  local digits = string.match(digits[1], '%d+')\n\
    \  if digits == nil then\n    return 'No'\n  end\n  if digits[1] < '0' or digits[1]\
    \ > '9' then\n    return 'No'\n  end\n  if string.sub(file_name, 1, 1) ~= 'a'\
    \ then\n    return 'No'\n  end\n  if string.sub(file_name, 1, 2) ~= 'z' then\n\
    \    return 'No'\n  end\n  if string.sub(file_name, 1, 3) ~= '.' then\n    return\
    \ 'No'\n  end\n  local extensions = string.match(file_name, \"%.(%w*)$\")\n  if\
    \ extensions == nil then\n    return 'No'\n  end\n  if string.sub(extensions,\
    \ 1, 1) ~= 'a' or string.sub(extensions, 1, 2) ~= 'z' or \n    string.sub(extensions,\
    \ 1, 3) ~= '.' then\n    return 'No'\n  end\n  if string.find(file_name, \"%.exe\"\
    ) > -1 or string.find(file_name, \"%.dll\") > -1 or \n    string.find(file_name,\
    \ \"%.com\") > -1 or string.find(file_name, \"%.bat\") > -1 then\n    return 'Yes'\n\
    \  end\n  return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuy1f1iva.lua:52:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpuy1f1iva.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- 1. Check there is no digits in the file name.\n\t-- 2.Check there is only\
    \ one dot in file name.\n\t-- 3. Check substring before dot is not empty and start\
    \ with a latin alphabet.\n\t-- 4. Check substring after doe is one of these:['txt','exe','dll']\n\
    \treturn file_name:gsub(\".\", \"\"):gsub(\"^%w\", \"a\"):gsub(\"%w\", \"z\"):gsub(\"\
    %w\", \"A\")\n\t\tand file_name ~= \"\"\n\t\tand file_name ~= nil\n\t\tand file_name\
    \ ~= \"\"\n\t\tand file_name ~= nil\n\t\tand file_name ~= \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fnt9rzd.lua:29:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp9fnt9rzd.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \tlocal digits = string.match(file_name, \"^%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\"\
    )\n\t\n\treturn (digits ~= nil and digits <= 9 and #file_name <= 3 and string.sub(file_name,\
    \ 1, string.len(file_name) - 1) ~= \"\" and string.sub(file_name, 1, string.len(file_name)\
    \ - 1) ~= \".\" and string.sub(file_name, string.len(file_name) - 1, string.len(file_name))\
    \ ~= \"exe\" and string.sub(file_name, string.len(file_name) - 1, string.len(file_name))\
    \ ~= \"dll\" and string.sub(file_name, string.len(file_name) - 1, string.len(file_name))\
    \ ~= string.sub(file_name, \".\", string.len(file_name)) and string.sub(file_name,\
    \ \".\", string.len(file_name)) ~= string.sub(file_name, \".\", string.len(file_name)\
    \ - 4))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltct7j8k.lua:22:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpltct7j8k.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  if file_name == '' then\n    return 'No'\n  end\n  local ext = string.match(file_name,\
    \ \".*[\\.][a-z]+$\") or ''\n  if string.len(ext) > 3 then\n    return 'No'\n\
    \  end\n  local first_letter = string.match(file_name, \"^[a-z_]\") or ''\n  if\
    \ not first_letter or string.len(first_letter) > 1 then\n    return 'No'\n  end\n\
    \  local valid_extensions = string.format(\"[%.0-%.4s]\", \n      string.char(\"\
    .\"),string.char(\".\"),string.char(\".\"),string.char(\".\"),\n      string.char(\"\
    .\"),string.char(\".\"),string.char(\".\"),string.char(\".\"))\n  if string.match(file_name,\
    \ valid_extensions) then\n    return 'Yes'\n  end\n  return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_qp7kkv0.lua:17: invalid escape sequence near '\".*[\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.gsub(file_name, \">[0-9]{1,3}\", \"\") ~= \"\" and\n        \
    \ string.gsub(file_name, \"\\.[^\\.]*$\", \"\") ~= \"\" and\n         string.gsub(file_name,\
    \ \"^[^a-zA-Z]*\", \"\") ~= \"\" and\n         string.gsub(file_name, \"[^a-zA-Z.]*\\\
    .\", \"\") ~= \"\" and\n         string.gsub(file_name, \"^[^a-zA-Z]*\", \"\"\
    ) ~= \"\" and\n         string.gsub(file_name, \"[^a-zA-Z.]*\", \"\") ~= \"\"\
    \ and\n         string.gsub(file_name, \"^[^a-zA-Z]*\", \"\") ~= \"\" and\n  \
    \       string.gsub(file_name, \"[^a-zA-Z.]*\", \"\") ~= \"\" and\n         string.gsub(file_name,\
    \ \"^[^a-zA-Z]*\", \"\") ~= \"\" and\n         string.gsub(file_name, \"[^a-zA-Z.]*\"\
    , \"\") ~= \"\" and\n         string.gsub(file_name, \"^[^a-zA-Z]*\", \"\") ~=\
    \ \"\" and\n         string.gsub(file_name, \"[^a-zA-Z.]*\", \"\") ~= \"\" and\n\
    \         string.gsub(file_name, \"^[^a-zA-Z]*\", \"\") ~= \"\" and\n        \
    \ string.gsub(file_name, \"[^a-zA-Z.]*\", \"\") ~= \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsq5o37t0.lua:15: invalid escape sequence near '\"\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \treturn string.match(file_name, \"^0*([%d][%d][%d][%d][%d][%d][%d][%d][%d][%d][%d][%d][%d][%d][%d])%.\"\
    \ .. \n\t\tstring.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(string.byte(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8megb0q0.lua:16: ')' expected (to close '(' at line 15) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \tlocal file_name = string.lower(file_name)\n\tlocal num_chars = string.len(file_name);\n\
    \tif (num_chars ~= 3) or (file_name:sub(1,1) ~= '0') or (file_name:sub(1,2) ~=\
    \ '9') or (file_name:sub(1,2) == '.') then\n\t\treturn 'No'\n\telse\n\t\tif (file_name:sub(1,\
    \ string.len(file_name)-2) ~= 'exe') then\n\t\t\treturn 'No'\n\t\telse\n\t\t\t\
    local suffix = string.lower(file_name:sub(2, string.len(file_name)-1));\n\t\t\t\
    if (suffix ~= 'exe') then\n\t\t\t\treturn 'No'\n\t\t\telse\n\t\t\t\tif string.len(suffix)\
    \ == 1 then\n\t\t\t\t\treturn 'No'\n\t\t\t\telse\n\t\t\t\t\treturn 'Yes'\n\t\t\
    \t\tend\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnficz5f.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpbnficz5f.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local index = 1\n  local result = true\n  local len = string.len(file_name)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi8xys_4c.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   \n   return not file_name:find(pattern) and file_name:sub(1,1) ~= '^' and\n\
    \    not file_name:find('\\.') and \n    not file_name:find('\\%') and\n    not\
    \ file_name:find(pattern) \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6mvkjexf.lua:16: invalid escape sequence near ''\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local name_check = false\n  \n  for _, c in string.gmatch(file_name, \"([^%.]+)\"\
    ) do\n    name_check = name_check or ('%a' <= c <= '%z' or '%A' <= c <= '%Z')\n\
    \  end\n  \n  return name_check\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd4palhwi.lua:17:\
    \ attempt to compare string with nil\nstack traceback:\n\t/tmp/tmpd4palhwi.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpd4palhwi.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \tlocal name_length = string.len(file_name)\n\tif name_length < 3 then\n\t\treturn\
    \ 'No'\n\telseif name_length == 3 then\n\t\tif string.sub(file_name, 1, 1) ~=\
    \ 'a' then\n\t\t\treturn 'No'\n\t\telseif string.sub(file_name, 1, 2) ~= 'z' then\n\
    \t\t\treturn 'No'\n\t\telseif string.sub(file_name, 1, 3) ~= 'A' then\n\t\t\t\
    return 'No'\n\t\telse\n\t\t\treturn 'Yes'\n\t\tend\n\telse\n\t\tif string.sub(file_name,\
    \ 1, 1) ~= 'a' then\n\t\t\treturn 'No'\n\t\telseif string.sub(file_name, 1, 2)\
    \ ~= 'z' then\n\t\t\treturn 'No'\n\t\telseif string.sub(file_name, 1, 3) ~= 'A'\
    \ then\n\t\t\treturn 'No'\n\t\telse\n\t\t\t-- Check substring before dot\n\t\t\
    \tlocal dot_index = string.find(file_name, \".\")\n\t\t\tif dot_index == nil then\n\
    \t\t\t\treturn 'No'\n\t\t\telse\n\t\t\t\t-- Check substring after dot\n\t\t\t\t\
    local afterdot_index = string.find(file_name, \".\", dot_index + 1)\n\t\t\t\t\
    if afterdot_index == nil then\n\t\t\t\t\treturn 'No'\n\t\t\t\telse\n\t\t\t\t\t\
    local afterdot_index = string.find(file_name, \".\", dot_index + 1, dot_index\
    \ + 2)\n\t\t\t\t\tif afterdot_index == nil then\n\t\t\t\t\t\t-- Check substring\
    \ after dot\n\t\t\t\t\t\tlocal afterdot_index = string.find(file_name, \".\",\
    \ dot_index + 1, dot_index + 3)\n\t\t\t\t\t\tif afterdot_index == nil then\n\t\
    \t\t\t\t\t\treturn 'No'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn 'Yes'\n\t\t\t\t\
    \t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\t-- Check the third part of the substring\n\
    \t\t\t\t\t\tlocal afterdot_index = string.find(file_name, \".\", dot_index + 1,\
    \ dot_index + 3)\n\t\t\t\t\t\tif afterdot_index == nil then\n\t\t\t\t\t\t\treturn\
    \ 'No'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlocal third_part_index = string.find(file_name,\
    \ \".\", dot_index + 1, dot_index + 4)\n\t\t\t\t\t\t\tif third_part_index == nil\
    \ then\n\t\t\t\t\t\t\t\treturn 'No'\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t-- The\
    \ substring before dot should be one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\
    \t\t\t\tif string.sub(file_name, 1, third_part_index) ~= 'txt' then\n\t\t\t\t\t\
    \t\t\t\treturn 'No'\n\t\t\t\t\t\t\t\telseif string.sub(file_name, 1, third_part_index)\
    \ ~= 'exe' then\n\t\t\t\t\t\t\t\t\treturn 'No'\n\t\t\t\t\t\t\t\telseif string.sub(file_name,\
    \ 1, third_part_index) ~= 'dll' then\n\t\t\t\t\t\t\t\t\treturn 'No'\n\t\t\t\t\t\
    \t\t\telse\n\t\t\t\t\t\t\t\t\treturn 'Yes'\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\
    end\n\t\t\t\t\t\tend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjjbycj1h.lua:109: 'end' expected (to close 'if' at line 46)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check for a latin alphabetic character 'a' to 'z' or 'A' to 'Z'\n  -- Check\
    \ for a character that is neither in the latin alphabetic nor an upper case letter\n\
    \  return (file_name and (string.match(\"^[AZAZ09]..\", file_name) and string.match(\"\
    ^.\", file_name) and string.match(\"^[A-Za-z]\", string.sub(file_name,1,1))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk0m3w4p.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpuk0m3w4p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local file_name = string.gsub(file_name, \n       \"%.([^%.]+)?%.[^%.]+$\"\
    , function(m)\n   if #m == 0 or m[1] ~= string.byte(m[1]) or string.byte(m[1])\
    \ ~= 10 then\n      return \"No\"\n   end\n   local pos = 1\n   while string.byte(file_name,\
    \ pos) == 9 then\n      pos = pos+1\n   end\n   if string.byte(file_name, pos)\
    \ ~= string.byte(file_name, pos+1)\n   or string.byte(file_name, pos) ~= string.byte(file_name,\
    \ pos+2)\n   or string.byte(file_name, pos) ~= string.byte(file_name, pos+3)\n\
    \   or string.byte(file_name, pos) ~= 33 then\n      return \"No\"\n   end\n \
    \  pos = string.find(file_name, \".\", pos+1)\n   if pos == nil then\n      return\
    \ \"No\"\n   end\n   local first_char = string.byte(file_name, pos)\n   if first_char\
    \ ~= string.byte(\"a\"..string.upper(first_char)) or #first_char < 2 then\n  \
    \    return \"No\"\n   end\n   local last_char = string.byte(file_name, pos+#file_name)\n\
    \   if last_char ~= string.byte(\"a\"..string.upper(last_char)) or #last_char\
    \ < 2 then\n      return \"No\"\n   end\n   return \"Yes\"\nend)\n   return file_name_check\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv2ffwtsi.lua:20: 'do' expected near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local num_periods = string.len(file_name) - string.len(file_name:sub(1, string.len(file_name)\
    \ - 1))\n   if num_periods >= 3 then\n      local num_digits = string.len(file_name)\
    \ - string.len(file_name:sub(1, string.len(file_name) - 1))\n      -- Check that\
    \ there is at least one digit in the file's name.\n      if num_digits < 1 then\n\
    \         return 'No'\n      end\n      -- Check that there is at least one non\
    \ digit in the file's name.\n      -- This check is performed because '0' - '9'\
    \ do not appear in the file's name.\n      local num_non_digits = string.len(file_name)\
    \ - string.len(file_name:sub(1, string.len(file_name) - 1))\n      for i=1, num_non_digits\
    \ do\n         if string.sub(file_name, 1, i) == '0' or string.sub(file_name,\
    \ 1, i) == '9' then\n            return 'No'\n         end\n      end\n      --\
    \ Check that there is only one dot '.' in the file's name.\n      if num_periods\
    \ < 2 then\n         return 'No'\n      end\n      -- Check that there is only\
    \ one dot '.' in the file's name, and that it is preceeded by a letter.\n    \
    \  if string.sub(file_name, 1, string.len(file_name) - num_periods - 1) == \"\
    .\" and string.sub(file_name, 1, 1) == \"a\" or string.sub(file_name, 1, 1) ==\
    \ \"A\" then\n         return 'No'\n      end\n      -- Check that there is only\
    \ one dot '.' in the file's name, and that it is followed by a letter from the\
    \ latin alphabet.\n      if string.sub(file_name, 1, string.len(file_name) - num_periods\
    \ - 1) == \".\" and string.sub(file_name, 1, string.len(file_name) - num_periods\
    \ - 1) ~= \"a\" and string.sub(file_name, 1, string.len(file_name) - num_periods\
    \ - 1) ~= \"A\" then\n         return 'No'\n      end\n      -- Check that there\
    \ is only one dot '.' in the file's name, and that it is followed by a letter\
    \ from the latin alphabet.\n      local num_non_letter_characters = string.len(file_name)\
    \ - string.len(file_name:sub(1, string.len(file_name) - num_periods - 1))\n  \
    \    for i=1, num_non_letter_characters - 1 do\n         if string.sub(file_name,\
    \ 1, string.len(file_name) - num_periods - i + 1) ~= \"a\" and string.sub(file_name,\
    \ 1, string.len(file_name) - num_periods - i + 1) ~= \"A\" then\n            return\
    \ 'No'\n         end\n      end\n      return 'Yes'\n   else\n      return 'No'\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2y1rzxr.lua:57:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpl2y1rzxr.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- If the file's name length is zero or less than 3 digits, return 'No' because\
    \ the file\n  -- name must not contain three digits.\n  -- If the file's name\
    \ length is at least 3 digits, return 'Yes' because the file\n  -- name must contain\
    \ exactly one dot.\n  -- If the file's name length is at least 5 digits, return\
    \ 'Yes' because the file\n  -- name must contain only one of 'txt', 'exe', 'dll'.\n\
    \  -- If the file's name length is at least 6 digits, return 'Yes' because the\
    \ file\n  -- name starts with a latin alphapet letter and is one of 'txt', 'exe',\
    \ 'dll'.\n  return string.len(file_name) >= 3 and string.sub(file_name, 1, 3)\
    \ ~= '' and\n    string.sub(file_name, 1, 1) ~= string.char(\"a\"..\"z\") or string.sub(file_name,\
    \ 1, 1) ~= string.char(\"A\"..\"Z\") and\n    string.sub(file_name, string.len(file_name)\
    \ - 4, string.len(file_name)) ~= 'txt' and\n    string.sub(file_name, string.len(file_name)\
    \ - 4, string.len(file_name)) ~= 'exe' and\n    string.sub(file_name, string.len(file_name)\
    \ - 4, string.len(file_name)) ~= 'dll'\nend\n</cell>\n<text>\n6.0 Run the Following\
    \ Code to Validate The Files In Your Project\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprlk5o8r6.lua:28: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.len(file_name) <= 3 and\n         string.find(file_name, \".\"\
    ) and\n         string.sub(file_name, 1, string.len(file_name) - 1) ~= \"\" and\n\
    \         string.sub(file_name, 1, string.find(file_name, \".\") + 1, \n     \
    \                 string.find(file_name, \".\", 1, string.find(file_name, \".\"\
    ) + 1)-1) ~= \"\" and\n          string.sub(file_name, string.find(file_name,\
    \ \".\") + 1, string.length(file_name)) == \"txt\" or\n          string.sub(file_name,\
    \ string.find(file_name, \".\") + 1, string.length(file_name)) == \"exe\" or\n\
    \          string.sub(file_name, string.find(file_name, \".\") + 1, string.length(file_name))\
    \ == \"dll\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8ayvpuz.lua:20:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpn8ayvpuz.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpn8ayvpuz.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local has_dot\n    local has_digit\n    local has_one_dot\n    local has_one_letter\n\
    \    local substring_before\n    local substring\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpckatp1mo.lua:52: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Count number of digits (0-9) in file's name\n  local num_digits = string.match(file_name,\
    \ \"%w+([0-9]+)%.*$\")\n  -- Check if file's name contains more than three digits\n\
    \  if num_digits == nil then\n    return 'No'\n  end\n  -- Check if file's name\
    \ contains exactly one dot ('.') and is NOT empty\n  if string.find(file_name,\
    \ \"%.*$\") == nil then\n    return 'No'\n  end\n  -- Check if file's name starts\
    \ with a latin alphapet letter\n  local first_alpha_char = string.sub(file_name,\
    \ \"%.*$\")\n  local first_alpha_char_lower = string.lower(first_alpha_char)\n\
    \  if first_alpha_char_lower ~= 'a' and first_alpha_char_lower ~= 'b' \n  and\
    \ first_alpha_char_lower ~= 'c' and first_alpha_char_lower ~= 'd'\n  and first_alpha_char_lower\
    \ ~= 'e' and first_alpha_char_lower ~= 'f'\n  and first_alpha_char_lower ~= 'g'\
    \ and first_alpha_char_lower ~= 'h'\n  and first_alpha_char_lower ~= 'i' and first_alpha_char_lower\
    \ ~= 'j'\n  and first_alpha_char_lower ~= 'k' and first_alpha_char_lower ~= 'l'\n\
    \  and first_alpha_char_lower ~= 'm' and first_alpha_char_lower ~= 'n'\n  and\
    \ first_alpha_char_lower ~= 'o' and first_alpha_char_lower ~= 'p'\n  and first_alpha_char_lower\
    \ ~= 'q' and first_alpha_char_lower ~= 'r'\n  and first_alpha_char_lower ~= 's'\
    \ and first_alpha_char_lower ~= 't'\n  and first_alpha_char_lower ~= 'u' and first_alpha_char_lower\
    \ ~= 'v'\n  and first_alpha_char_lower ~= 'w' and first_alpha_char_lower ~= 'x'\n\
    \  and first_alpha_char_lower ~= 'y' and first_alpha_char_lower ~= 'z' then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfddzbvo7.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpfddzbvo7.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- Checks if the file name contains only digits (0-9)\n    local function\
    \ is_digit(string)\n        return string.match string, \"[0-9]\"\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa08woied.lua:16: 'end' expected (to close 'function' at line\
    \ 15) near 'string'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = string.gsub(file_name, \"::\", \".\")\n    local file_name\
    \ = string.gsub(file_name, \"_\", \".\")\n    local file_name = string.gsub(file_name,\
    \ \"\", \".\")\n    local file_name = string.gsub(file_name, \"\", \"_\")\n  \
    \  if string.find(file_name, \"..\") then\n        return 'No'\n    end\n    if\
    \ string.find(file_name, \"%w+\") then\n        return 'No'\n    end\n    if string.find(file_name,\
    \ \"%w\") then\n        return 'No'\n    end\n    if string.find(file_name, \"\
    %W\") then\n        return 'No'\n    end\n    local first_character = string.sub(file_name,\
    \ 1, 1)\n    local second_character = string.sub(file_name, 2, 1)\n    local third_character\
    \ = string.sub(file_name, 3, 1)\n    if first_character == nil or first_character\
    \ ~= string.letters then\n        return 'No'\n    end\n    if second_character\
    \ == nil or second_character ~= string.letters then\n        return 'No'\n   \
    \ end\n    if third_character == nil or third_character ~= string.letters then\n\
    \        return 'No'\n    end\n    if #file_name > 3 then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h6gn3wf.lua:51:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0h6gn3wf.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  if file_name == nil then\n    return nil\n  end\n  -- Check if file_name contains\
    \ more than 3 digits\n  -- Check if file_name contains exactly one dot\n  -- Check\
    \ if file_name does not contain empty substring\n  -- Check if file_name does\
    \ not contain letters other than latin alphapet\n  -- Check if file_name does\
    \ not contain substrings other than ['txt', 'exe', 'dll']\n  -- Check if file_name\
    \ starts with latin alphapet letter\n  -- Check if file_name does not start with\
    \ latin alphapet letter\n  -- Check if file_name ends with latin alphapet letter\n\
    \  -- Check if file_name does not end with latin alphapet letter\n  if string.find(file_name,\
    \ \"%.\") == -1 then\n    return false\n  end\n  if string.find(file_name, \"\
    %.\") == file_name then\n    return false\n  end\n  if string.find(file_name,\
    \ \"%.\") then\n    return false\n  end\n  if string.find(file_name, \"%[\", 1)\
    \ ~= nil then\n    return false\n  end\n  if string.find(file_name, \"%]\", 1)\
    \ ~= nil then\n    return false\n  end\n  if string.find(file_name, \"%{\", 1)\
    \ ~= nil then\n    return false\n  end\n  if string.find(file_name, \"%}\", 1)\
    \ ~= nil then\n    return false\n  end\n  if string.find(file_name, \"%:\", 1)\
    \ ~= nil then\n    return false\n  end\n  if string.find(file_name, \"%*\", 1)\
    \ ~= nil then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptumjzvyh.lua:59:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmptumjzvyh.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   assert(string.len(file_name) == 3) -- file name length must be 3\n   assert(string.sub(file_name,1,1)\
    \ ~= '.') -- file name must not start with a dot\n   assert(string.find(file_name,\
    \ \"[^a-zA-Z]\"))  -- file name must not contain non-latin character\n   local\
    \ suffix\n   for suffix in ['txt','exe','dll'] do -- check for valid suffixes\n\
    \      if string.find(file_name, suffix) ~= nil then\n         return 'Yes'\n\
    \      end\n   end\n   return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo3hbktjz.lua:18: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local ok, err\n   if file_name == nil then\n      ok = true\n   else\n   \
    \   ok = string.match(\"^[1-9][0-9]*$\", file_name) ~= nil and string.match(\"\
    .\", file_name) ~= nil and string.match(\"^[a-z][a-z][a-z]?$\", string.sub(file_name,1,1))\
    \ ~= nil and string.match(\"^[a-z][a-z][a-z]?$\", string.sub(file_name,2,1)) ~=\
    \ nil and string.match(\"^[a-z][a-z][a-z]?$\", string.sub(file_name,3,1)) ~= nil\n\
    \   end\n   return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jvbnira.lua:26:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp9jvbnira.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkszv0ap_.lua:20:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpkszv0ap_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return string.find(file_name, \"%.\") ~= 0 and\n           string.find(file_name,\
    \ \"..\") ~= 0 and\n           string.find(file_name, \"[a-zA-Z]\") ~= 0 and\n\
    \           string.find(file_name, \" \") ~= 0 and string.find(file_name, \"0\"\
    ) ~= 0 and\n           string.find(file_name, \"1\") ~= 0 and string.find(file_name,\
    \ \"2\") ~= 0 and\n           string.find(file_name, \"3\") ~= 0 and string.find(file_name,\
    \ \"4\") ~= 0 and\n           string.find(file_name, \"5\") ~= 0 and string.find(file_name,\
    \ \"6\") ~= 0 and\n           string.find(file_name, \"7\") ~= 0 and string.find(file_name,\
    \ \"8\") ~= 0 and\n           string.find(file_name, \"9\") ~= 0 and string.find(file_name,\
    \ \".\") ~= 0 and\n           string.find(file_name, \"exe\") ~= 0 and string.find(file_name,\
    \ \"dll\") ~= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ko8ve4b.lua:29:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp1ko8ve4b.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   local substring_before_dot\
    \ = string.sub(file_name, 1, string.find(file_name, \".\"))\n   if string.len(substring_before_dot)\
    \ == 0 then\n      return nil\n   end\n   local extension = string.sub(file_name,\
    \ string.find(file_name, \".\") + 1)\n   if string.len(extension) == 0 then\n\
    \      return nil\n   end\n   if string.sub(extension, 1, 1) ~= string.lower(string.sub(extension,\
    \ 1, 1)) then\n      return nil\n   end\n   for _, extension_item in ipairs({\"\
    txt\", \"exe\", \"dll\"}) do\n      if string.find(extension, extension_item)\
    \ ~= nil then\n         return true\n      end\n   end\n   return false\nend\n\
    </cell>\n<text>\n2.3. Data Validation\nData validation is a very important part\
    \ of our data analysis process. It is very important to be sure about data quality.\
    \ Thus, we must make sure that our data can be properly loaded, handled, and interpreted\
    \ by our program.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmtb91ozw.lua:35: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  if file_name == nil then\n    return 'No'\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvrd_m2i8.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if string.len(file_name) <= 3 then\n        return 'No'\n    end\n    if\
    \ string.sub(file_name, 1, 1) ~= '\\' or string.sub(file_name, 1, 1) ~= '$' or\
    \ string.sub(file_name, 1, 1) ~= '-' or string.sub(file_name, 1, 1) ~= '_' then\n\
    \        return 'No'\n    end\n    if string.sub(file_name, 2, 2) ~= '\\' or string.sub(file_name,\
    \ 2, 2) ~= '$' or string.sub(file_name, 2, 2) ~= '-' or string.sub(file_name,\
    \ 2, 2) ~= '_' then\n        return 'No'\n    end\n    if string.sub(file_name,\
    \ 1, 2) ~= string.sub(file_name, 2, 1) then\n        return 'No'\n    end\n  \
    \  \n    if string.sub(file_name, 1, 1) ~= string.sub(file_name, 2, 1) then\n\
    \        return 'No'\n    end\n    \n    if string.sub(file_name, 1, 1) ~= 'a'\
    \ or string.sub(file_name, 1, 1) ~= 'A' or string.sub(file_name, 1, 1) ~= 'e'\
    \ or string.sub(file_name, 1, 1) ~= 'E' or string.sub(file_name, 1, 1) ~= 'i'\
    \ or string.sub(file_name, 1, 1) ~= 'I' or string.sub(file_name, 1, 1) ~= 'o'\
    \ or string.sub(file_name, 1, 1) ~= 'O' or string.sub(file_name, 1, 1) ~= 'u'\
    \ or string.sub(file_name, 1, 1) ~= 'U' then\n        return 'No'\n    end\n \
    \   \n    if string.sub(file_name, 2, 2) ~= 'a' or string.sub(file_name, 2, 2)\
    \ ~= 'A' or string.sub(file_name, 2, 2) ~= 'e' or string.sub(file_name, 2, 2)\
    \ ~= 'E' or string.sub(file_name, 2, 2) ~= 'i' or string.sub(file_name, 2, 2)\
    \ ~= 'I' or string.sub(file_name, 2, 2) ~= 'o' or string.sub(file_name, 2, 2)\
    \ ~= 'O' or string.sub(file_name, 2, 2) ~= 'u' or string.sub(file_name, 2, 2)\
    \ ~= 'U' then\n        return 'No'\n    end\n    \n    return 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmw_aon7s.lua:17: 'then' expected near '$'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- Get the file name string.\n\tfile_name = file_name:lower()\n\t-- Get the\
    \ length of the file's name.\n\tlocal file_name_length = #file_name\n\t-- Check\
    \ if there are no more characters left.\n\tlocal file_name_no_more_chars = file_name_length\
    \ == 0\n\t-- Check if there are no more characters in the file name.\n\tlocal\
    \ file_name_no_more_chars_2 = #file_name == 0\n\t-- Check if there are at least\
    \ 2 dots.\n\tlocal file_name_contains_dots = #file_name > 2\n\t-- Check if there\
    \ are more than 2 dots.\n\tlocal file_name_contains_dots_2 = #file_name < 2\n\t\
    -- Check if the first character is a letter from the latin alphabet.\n\tlocal\
    \ file_name_has_first_char_latin_alpha = \n\tstring.find(file_name, \"^[%w%.]:[%w%.]$\"\
    )\n\t-- Check if the first character is a letter from the latin alphabet and the\
    \ first character is a letter from the \n\t-- latin alphabet followed by a digit\
    \ (0-9).\n\tlocal file_name_has_first_char_latin_alpha__1_digit = \n\tstring.find(file_name,\
    \ \"^[%w%.]:[%w%.][0-9]+$\")\n\t-- Check if the first character is a letter from\
    \ the latin alphabet.\n\tlocal file_name_has_first_char_latin_alpha_2 = \n\tstring.find(file_name,\
    \ \"^[%w%.]:[%w%.]$\")\n\t-- Check if the substring before the dot is empty.\n\
    \tlocal file_name_has_previous_dot_empty = \n\tstring.sub(file_name,1,1) ~= '\\\
    .'\n\t-- Check if the substring before the dot is not a letter.\n\tlocal file_name_has_previous_dot_not_a_letter\
    \ = \n\tstring.sub(file_name,1,1) ~= '%'\n\t-- Check if the substring before the\
    \ dot is not a letter.\n\tlocal file_name_has_previous_dot_not_a_letter_2 = \n\
    \tstring.sub(file_name,1,1) ~= '%'\n\t-- Check if the substring after the dot\
    \ contains one of the following strings:\n\t-- ['txt', 'exe', 'dll']\n\tlocal\
    \ file_name_has_after_dot_txt = string.sub(file_name,2,3) == 'txt'\n\tlocal file_name_has_after_dot_exe\
    \ = string.sub(file_name,2,3) == 'exe'\n\tlocal file_name_has_after_dot_dll =\
    \ string.sub(file_name,2,3) == 'dll'\n\t-- Check if the file's name is valid.\n\
    \tlocal file_name_is_valid = \n\tfile_name_has_first_char_latin_alpha and\n\t\
    file_name_has_first_char_latin_alpha__1_digit and\n\tfile_name_has_previous_dot_empty\
    \ and\n\tfile_name_has_previous_dot_not_a_letter and\n\tfile\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2d6wad_6.lua:38: invalid escape sequence near ''\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"%.\") ~= 0 and\n    string.find(file_name,\
    \ \"%d*%\") ~= 0 and\n    string.find(file_name, \"%d*%.\") ~= 0 and\n    string.find(file_name,\
    \ \"%d*%.%d*\") ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*\") ~= 0 and\n\
    \    string.find(file_name, \"%d*%.%d*%d*%.\") ~= 0 and\n    string.find(file_name,\
    \ \"%d*%.%d*%d*%.%d*\") ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*\"\
    ) ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*\") ~= 0 and\n\
    \    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*%d*\") ~= 0 and\n    string.find(file_name,\
    \ \"%d*%.%d*%d*%.%d*%d*%d*%d*%d*\") ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*%d*%d*%d*\"\
    ) ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*%d*%d*%d*%d*\"\
    ) ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*%d*%d*%d*%d*%d*\"\
    ) ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*%d*%d*%d*%d*%d*\"\
    ) ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*%d*%d*%d*%d*%d*%d*\"\
    ) ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\"\
    ) ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\"\
    ) ~= 0 and\n    string.find(file_name, \"%d*%.%d*%d*%.%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\"\
    ) ~= 0 and\n    string.find(file_name\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphu39ra9t.lua:34: ')' expected (to close '(' at line 33) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t\n\tlocal function check_valid_name(name)\n\t\tlocal n = string.len(name)\n\t\
    \tif n ~= 1 and n ~= 3 and n ~= 4 then return false end\n\t\tlocal l = string.len(string.sub(name,1,1))\n\
    \t\tif not (l == 1 and l >= 'a' and l <= 'z') then return false end\n\t\tlocal\
    \ ext = string.sub(name,l+1,l)\n\t\tif ext ~= \".\" and not (ext == \".txt\" or\
    \ ext == \".exe\" or ext == \".dll\") then return false end\n\t\treturn true\n\
    \tend\n\t\n\tlocal function check_file_type(file_type)\n\t\tlocal n = string.len(file_type)\n\
    \t\tif not (n > 0 and n <= 3) then return false end\n\t\tlocal f = string.sub(file_type,1,n)\n\
    \t\tif not ((f == 'txt' or f == 'exe' or f == 'dll') or (f == '' and (n == 3 and\
    \ file_type:sub(1,1) == '1'))) then return false end\n\t\treturn true\n\tend\n\
    \t\n\tlocal function check_dot_after_dot(name)\n\t\tlocal dots = string.len(name)\n\
    \t\tif not (dots == 2) then return false end\n\t\tlocal lastDot = string.find(name,\"\
    .\",1,true)\n\t\tif not (lastDot ~= nil and lastDot > 1) then return false end\n\
    \t\tlocal l = string.len(string.sub(name,lastDot+1))\n\t\tif not (l == 1 and l\
    \ >= 'a' and l <= 'z') then return false end\n\t\treturn true\n\tend\n\t\n\tlocal\
    \ function check_substring_before_name(name)\n\t\tlocal l = string.len(string.sub(name,1,1))\n\
    \t\tif not (l == 1 and l >= 'a' and l <= 'z') then return false end\n\t\treturn\
    \ true\n\tend\n\t\n\tlocal function check_substring_after_name(name)\n\t\tlocal\
    \ l = string.len(string.sub(name,1,1))\n\t\tif not (l == 1 and l >= 'a' and l\
    \ <= 'z') then return false end\n\t\tlocal n = string.len(name)\n\t\tif not (n\
    \ > 0 and n <= 4) then return false end\n\t\treturn true\n\tend\n\t\n\tlocal function\
    \ check_non_empty(name)\n\t\tlocal n = string.len(name)\n\t\tif n ~= 0 then return\
    \ true else return false end\n\tend\n\t\n\tlocal file_name = file_name\n\t\n\t\
    if not check_valid_name(file_name) then return false end\n\t\n\tif check_file_type(file_name)\
    \ then return true end\n\t\n\tif not check_dot_after_dot(file_name) then return\
    \ false end\n\t\n\tif not check_substring_before_name(file_name) then return false\
    \ end\n\t\n\tif check_non_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi_lk433n.lua:73: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return string.find(file_name, \"[0-9]\") and string.find(file_name, \"[.]\"\
    ) and string.find(file_name, \"^[a-zA-Z]\") and string.find(file_name, \"[^.]\"\
    ) or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbcrmoz6.lua:20:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmplbcrmoz6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return file_name == nil or (string.len(file_name) <= 3 and string.find(file_name,\
    \ \".\") ~= 0 and string.sub(file_name, 1, 1) ~= string.sub(file_name, 1, 1) and\n\
    \    string.find(file_name, \".\", 1) ~= 0 and string.find(file_name, \".\", 1)\
    \ ~= 0 and string.sub(file_name, string.find(file_name, \".\", 1) + 1, string.len(file_name))\
    \ in {\".txt\", \"exe\", \"dll\"})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7knnxvvb.lua:15: ')' expected (to close '(' at line 14) near\
    \ 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  if string.match(file_name, \"^%[%d]+%.?%[%d]+$\") then\n    return true\n \
    \ else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmer5939p.lua:24:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpmer5939p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   \n   if #file_name > 3 then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= string.rep(\"\
    0\", 1) then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= string.rep(\"\
    9\", 1) then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= string.rep(\"\
    a\", 1) then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= string.rep(\"\
    z\", 1) then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= string.rep(\"\
    A\", 1) then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= string.rep(\"\
    Z\", 1) then\n      return nil\n   end\n   if string.sub(file_name, 1, string.len(file_name)\
    \ - string.len(string.sub(file_name, \".\"))) ~= {'.', 'txt', 'exe', 'dll'} then\n\
    \      return nil\n   end\n   \n   return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bvdamog.lua:49:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp3bvdamog.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check whether the file name is valid\n  if file_name ~= '' then\n    if\
    \ file_name ~= file_name then return 'No' end\n    if #file_name > 3 then return\
    \ 'No' end\n    if file_name ~= file_name:sub(1, 1) then return 'No' end\n   \
    \ local allowed_extensions = ('txt', 'exe', 'dll')\n    for i = 1, #allowed_extensions\
    \ do\n      if file_name ~= file_name:sub(1, #file_name -1) and \n           \
    \  allowed_extensions[i] == file_name:sub((#file_name -1), #file_name) then\n\
    \        return 'Yes'\n      end\n    end\n    return 'No'\n  else\n    return\
    \ 'No'\n  end\nend\n</code>\n<|/ a |>\n<| c |>\n`if file_name ~= file_name then\
    \ return 'No' end` -- why?\n<|/ c |>\n<| c |>\nBecause the question says that\
    \ if the file's name starts with \"0\", then \"No\" should be returned, and if\
    \ it starts with any other character, then \"Yes\" should be returned.\n<|/ c\
    \ |>\n<| a tags=lua |>\n<code>\nif file_name ~= file_name then return 'No' end\n\
    </code>\nYou're not checking the contents of the string. You are comparing the\
    \ two strings for equality. This will never return true.\n<code>\nif file_name\
    \ ~= file_name:sub(1, 1) then return 'No' end\n</code>\nThis also isn't doing\
    \ what you think it is, this compares the first character of the string to the\
    \ first character of the string. It will return true if they match because the\
    \ first character of the string is not the same as the first character of the\
    \ string.\nThis should work as you want:\n<code>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr36qxuar.lua:19: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   \n    local digit_num = 1\n    local dot_num = 1\n    local start_letter =\
    \ 1\n    local end_letter = 1\n    local sub_string = 1\n    local sub_string_is_valid\
    \ = false\n    \n    local i = 1\n    \n    -- Get file's name's length, in characters.\n\
    \    local length = string.len(file_name)\n    \n    -- Check that the file name\
    \ is valid by checking for\n    -- three digits in the file's name. If it is,\n\
    \    -- then return 'Yes'.\n    for i = 1, 3 do\n        if string.sub(file_name,\
    \ i, i) == \"0\" then\n            digit_num = 3\n            return true\n  \
    \      end\n    end\n    \n    -- If it reaches here, the file's name is invalid.\
    \ \n    -- Return No.\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv8unxee.lua:45:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpmv8unxee.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  \n  -- Validate the file name\n  -- Example: file_name_check(\"example.txt\"\
    ) => No\n  -- Example: file_name_check(\"1example.dll\") => Yes\n  -- Example:\
    \ file_name_check(\"example.dll\") => No\n  if string.find(file_name, '[0-9]{3}')~=nil\
    \ then\n    return 'No'\n  end\n  if string.find(file_name, '.')~=nil then\n \
    \   return 'No'\n  end\n  if string.find(file_name, '^[a-z][a-zA-Z0-9_]*\\.')\
    \ ~= nil then\n    return 'No'\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp274hal0h.lua:25: invalid escape sequence near ''^[a-z][a-zA-Z0-9_]*\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  \n  return file_name ~= nil and \n  \tstring.match( file_name, \"^[^.]*$\"\
    ) and\n  \tstring.match( file_name, \"^([[:alpha:]]{1}[a-zA-Z]+)[^.]$\") and\n\
    \  \tstring.match( file_name, \"^[^.]([[:alpha:]]{1}[a-zA-Z]+)[^.].*$\") and\n\
    \  \tstring.match( file_name, \"^[^.]([[:alpha:]]{1}[a-zA-Z]+)[^.]$\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dafk1rn.lua:25:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp5dafk1rn.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- A file's name is considered to be valid if and only if all the following\
    \ conditions are met:\n   -- There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n   -- The file's name contains exactly one dot '.'\n  \
    \ -- The substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n   -- The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n   return (file_name:match(\"\
    ^[1-9][0-9]{0,3}\\.\") ~= nil) and (file_name:match(\".\") ~= nil) and (file_name:sub(1,\
    \ 1):match(\"^[a-zA-Z]{1}$\") ~= nil) and \n   (file_name:match(\".\"):sub(1,\
    \ 1):match(\"^(exe|dll|txt)$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4buhk5bs.lua:19: invalid escape sequence near '\"^[1-9][0-9]{0,3}\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- TODO: Add the following check:\n    -- - The substring before the dot\
    \ should not be empty.\n    -- - The substring before the dot should start with\
    \ a latin alphapet letter.\n    -- - The substring after the dot should contain\
    \ one of these: ['txt', 'exe', 'dll']\n    local dotPos = string.find(file_name,\
    \ \".\")\n    if dotPos == nil then\n        return 'No'\n    end\n    if string.len(file_name)\
    \ <= 3 then\n        return 'Yes'\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dotPos - 1)\n    local suffixes = string.format(\"%w[txt exe dll]\", os.type)\n\
    \    local suffixPos = string.find(file_name, suffixes)\n    if suffixPos == nil\
    \ then\n        return 'No'\n    end\n    local suffix = string.sub(file_name,\
    \ suffixPos + 1)\n    if suffix == nil then\n        return 'No'\n    end\n  \
    \  if suffix == 'txt' then\n        return 'Yes'\n    end\n    if suffix == 'exe'\
    \ then\n        return 'Yes'\n    end\n    if suffix == 'dll' then\n        return\
    \ 'Yes'\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp29y15771.lua:26:\
    \ invalid option '%w' to 'format'\nstack traceback:\n\t/tmp/tmp29y15771.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp29y15771.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1g338ok3.lua:47: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, '.') ~= nil then\n      return false\n   elseif\
    \ string.find(file_name, '.') ~= 1 then\n      return false\n   elseif string.find(file_name,\
    \ '^[A-Za-z]') ~= nil then\n      return false\n   elseif string.find(file_name,\
    \ '^[0-9]') ~= nil then\n      return false\n   end\n   return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypo13_1z.lua:29:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpypo13_1z.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   return (not (string.find(file_name, \"^[0-9]{1,3}$\")))\n      and (string.find(file_name,\
    \ \"\\.\") ~= 0)\n      and (string.find(file_name, \"\\._\"))\n      and ((string.find(file_name,\
    \ string.sub(file_name,1,1)) ~= 0)\n           and (string.find(file_name, string.sub(file_name,1,1))\
    \ == \"a\")\n           and (string.find(file_name, string.sub(file_name,1,1))\
    \ == \"z\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc19wm9ep.lua:15: invalid escape sequence near '\"\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local valid_filenames = {\n        \"example.txt\",\n        \"1example.dll\"\
    ,\n    }\n    \n    if valid_filenames[file_name] then\n        return\"Yes\"\n\
    \    else\n        return\"No\"\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jix6y9r.lua:29:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8jix6y9r.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local dot = file_name:sub(1,1)\n    local file_name = file_name:sub(2,fileName:len()-2)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2rvy01vd.lua:48: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- Get the file's name as a string.\n    local file_name = file_name:sub(1,4)\n\
    \    \n    -- Get the file's name as a number\n    local file_name = tonumber(file_name)\n\
    \    \n    -- Check if all conditions\n    return (file_name ~= nil) and (file_name\
    \ > 0 and file_name < 100) and (file_name ~= \"0\" and file_name ~= \".\" and\
    \ file_name ~= \"\") and (not file_name % 10) and (not file_name:match(\".\")\
    \ and not(file_name:find(\"%\")) and not(file_name:find(\":\") ~= nil))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz_uls4v.lua:27:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmptz_uls4v.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check if the input is valid file's name\n  -- The input can not be \"file1.exe\"\
    \ or \"file1.dll\"\n  -- The input can not be \"1file1.exe\" or \"1file1.dll\"\
    \n  -- The input can not be \"file1.txt\" or \"file1.exe\" or \"file1.dll\" or\
    \ \"1file1.txt\" or \"1file1.exe\" or \"1file1.dll\"\n  -- The input can not be\
    \ \"file\" or \"file1.txt\" or \"file1.exe\" or \"file1.dll\" or \"1file\" or\
    \ \"1file1.txt\" or \"1file1.exe\" or \"1file1.dll\"\n  if file_name:match(\"\
    ^[1-9]$\") or file_name:match(\"^[1-9]1$\") or file_name:match(\"^[1-9]1[1-9]$\"\
    ) then\n    -- Check if the input contains exactly one '.'\n    if file_name:match(\"\
    .\") then\n      -- Check if the input starts with a letter from the latin alphabetic\n\
    \      if string.sub(file_name, 1, 1) ~= nil then\n        -- Check if the input\
    \ substring is not empty\n        if string.sub(file_name, 1, 1) ~= '' then\n\
    \          -- Check if the input substring does not start with '1'\n         \
    \ if string.sub(file_name, 1, 1) ~= string.sub(file_name, 1, 1) then\n       \
    \     -- Check if the input substring does not start with '1', '10', '11'\n  \
    \          if string.sub(file_name, 1, 1) ~= string.sub(file_name, 1, 1) then\n\
    \              -- Check if the input substring does not start with '1', '10',\
    \ '11'\n              if string.sub(file_name, 1, 1) ~= string.sub(file_name,\
    \ 1, 1) then\n                return true\n              end\n            end\n\
    \          end\n        end\n      end\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprex9dwln.lua:46:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmprex9dwln.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local digit_position = string.find(file_name, \"[0-9]\")\n  if digit_position\
    \ > 1 then\n    return \"No\"\n  end\n  local file_ext = string.sub(file_name,\
    \ \"^.+\\\\.\", \"\")\n  if file_ext == \"\" then\n    return \"No\"\n  end\n\
    \  local file_name = string.sub(file_name, \"^.+\\\\\", \"\")\n  local dot_position\
    \ = string.find(file_name, \".\")\n  if dot_position == 0 then\n    return \"\
    No\"\n  end\n  local dot_string = string.sub(file_name, \".\", dot_position -\
    \ 1)\n  local dot_length = string.len(dot_string)\n  local dot_character = string.sub(dot_string,\
    \ 1, 1)\n  if dot_length > 1 or dot_character ~= 'a' and dot_character ~= 'A'\
    \ then\n    return \"No\"\n  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppl3rxc94.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmppl3rxc94.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppl3rxc94.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \treturn (file_name==nil or #file_name<=3 or\n\t\t(#file_name==1 and file_name:byte(1)\
    \ ~= 32) or\n\t\t(#file_name==1 and\n\t\t\tnot file_name:sub(1,1) or\n\t\t\tfile_name:sub(1,1)\
    \ ~= 'a' and\n\t\t\tfile_name:sub(1,1) ~= 'z' and\n\t\t\tfile_name:sub(1,1) ~=\
    \ 'A' and\n\t\t\tfile_name:sub(1,1) ~= 'Z' and\n\t\t\t(not file_name:sub(2,2)\
    \ ~= \".\" or\n\t\t\tnot file_name:sub(1,1):byte(1) in {'0','1'})))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps5h6nbcd.lua:23: ')' expected (to close '(' at line 22) near\
    \ 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = string.lower(file_name)\n    \n    -- Check if there are\
    \ no more characters in the file name\n    if string.sub(file_name, 0, string.len(file_name)-1)\
    \ ~= '0' then\n        return 'No'\n    end\n    \n    -- Check if there are only\
    \ three digits\n    if string.sub(file_name, string.len(file_name), string.len(file_name)\
    \ + 1) ~= '9' then\n        return 'No'\n    end\n    \n    -- Check if the string\
    \ contains two dots\n    if string.sub(file_name, string.len(file_name), string.len(file_name)\
    \ + 2) ~= '.' then\n        return 'No'\n    end\n    \n    -- Check if the first\
    \ character is valid\n    if string.sub(file_name, 1, string.len(file_name) -\
    \ 1) ~= string.letters(string.sub(file_name, 1, string.len(file_name) - 1)) then\n\
    \        return 'No'\n    end\n    \n    -- Check if there are any other characters\
    \ (including spaces) after the dot\n    if string.sub(file_name, string.len(file_name)\
    \ + 1) ~= 'txt' then\n        return 'No'\n    end\n    if string.sub(file_name,\
    \ string.len(file_name) + 1) ~= 'exe' then\n        return 'No'\n    end\n   \
    \ if string.sub(file_name, string.len(file_name) + 1) ~= 'dll' then\n        return\
    \ 'No'\n    end\n    \n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8uh6ykp.lua:53:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpd8uh6ykp.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.len(file_name) > 3 then\n      return \"No\"\n   elseif string.find(file_name,\
    \ \"..\") then\n      return \"No\"\n   elseif string.find(file_name, \".\") ==\
    \ nil or string.find(file_name, \".\") == 0 then\n      return \"No\"\n   elseif\
    \ string.find(file_name, \".\") == 1 then\n      if string.find(file_name, \"\
    .\") == 1 then\n         if string.find(file_name, \".\") == 1 then\n        \
    \    return \"No\"\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") > 1 or string.find(file_name, \".\") == 0 then\n      if string.find(file_name,\
    \ \".\") == 0 then\n         if string.find(file_name, \".\") > 1 then\n     \
    \       return \"No\"\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") > 1 or string.find(file_name, \".\") == 0 then\n      if string.find(file_name,\
    \ \".\") > 1 then\n         if string.find(file_name, \".\") > 1 then\n      \
    \      return \"No\"\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") > 1 or string.find(file_name, \".\") == 0 then\n      if string.find(file_name,\
    \ \".\") > 1 then\n         if string.find(file_name, \".\") > 1 then\n      \
    \      return \"No\"\n         end\n      end\n   end\n   return \"Yes\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb27z77qn.lua:54:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpb27z77qn.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if string.find(file_name, \"^%[%d%a]%.\") == nil then\n        return 'No'\n\
    \    end\n    if string.find(file_name, \".\") ~= nil then\n        -- The substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphabet\n        if string.find(file_name, \"^[a-zA-Z]\") ~= nil then\n   \
    \         -- The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n            if string.find(file_name, \"%.exe\") ~= nil then\n     \
    \           return 'Yes'\n            elseif string.find(file_name, \"%.dll\"\
    ) ~= nil then\n                return 'Yes'\n            else\n              \
    \  return 'No'\n            end\n        else\n            return 'No'\n     \
    \   end\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazkvpgxo.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpazkvpgxo.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == -1 then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \" \") ~= nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") < 3 then\n      return \"No\"\n   end\n \
    \  if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj208kh1l.lua:91: 'end' expected (to close 'if' at line 89)\
    \ near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- Check whether the given file name string has all these conditions.\n\treturn\
    \ (string.find(file_name, \".\") == nil) and (string.find(file_name, \".\") ==\
    \ -1) and (string.find(file_name, string.sub(file_name, 0, 1)) >= 0) and (string.find(file_name,\
    \ \".\") == string.len(file_name) - 1 and string.find(file_name, string.sub(file_name,\
    \ (string.find(file_name, \".\") + 1))) ~= -1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bczo4zi.lua:21:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp3bczo4zi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local first_char_idx = string.sub(file_name, 1, 1)\n  local last_char_idx =\
    \ string.sub(file_name, -3)\n  -- No more than 3 digits ('0'-'9') in the file's\
    \ name\n  if string.find(file_name, \"^%[0-9]\") ~= nil then\n    return \"No\"\
    \n  end\n  -- Contains exactly one dot ('.') in the file's name\n  if file_name:sub(1,\
    \ 1) ~= '.' then\n    return \"No\"\n  end\n  -- Substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n  if first_char_idx ~= nil then\n    if string.find(file_name, \"\
    ^[^A-Z]\") ~= nil then\n      return \"No\"\n    else\n      return \"Yes\"\n\
    \    end\n  else\n    return \"No\"\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ifo6hwg.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp2ifo6hwg.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local re = string.format(\"^%d%.[a-zA-Z]%.[a-zA-Z]$\",string.byte(string.sub(file_name,1,4)))\n\
    \    local test_val = string.match(file_name,re)\n    if test_val == nil then\n\
    \        return nil\n    end\n    if string.byte(test_val) == '.' then\n     \
    \   if string.byte(string.sub(file_name,4,1)) == nil then\n            return\
    \ nil\n        end\n    end\n    if string.byte(string.sub(file_name,1,1)) > 'a'\
    \ or string.byte(string.sub(file_name,1,1)) < 'a' or string.byte(string.sub(file_name,2,1))\
    \ > 'z' or string.byte(string.sub(file_name,2,1)) < 'z' then\n        return nil\n\
    \    end\n    if string.sub(file_name,string.len(file_name),1) ~= 'exe' or string.sub(file_name,string.len(file_name),2)\
    \ ~= 'exe' or string.sub(file_name,string.len(file_name),3) ~= 'exe' then\n  \
    \      return nil\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjjmvcpa.lua:14:\
    \ bad argument #3 to 'format' (no value)\nstack traceback:\n\t/tmp/tmpcjjmvcpa.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpcjjmvcpa.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check for illegal characters in file name\n  local file_name = string.gsub(file_name,\
    \ \"[^0-9a-zA-Z]\", \"\")\n  -- If not a single dot is present in the file name,\
    \ return true\n  if file_name == \"\" then\n    return \"Yes\"\n  end\n  -- If\
    \ file name is more than one dot present, return false\n  if string.find(file_name,\
    \ \".\") ~= nil then\n    return \"No\"\n  end\n  -- If the file name does not\
    \ contain any of the required strings, return false\n  if string.find(file_name,\
    \ \".txt\") == nil then\n    return \"No\"\n  end\n  if string.find(file_name,\
    \ \".exe\") == nil then\n    return \"No\"\n  end\n  if string.find(file_name,\
    \ \".dll\") == nil then\n    return \"No\"\n  end\n  return \"Yes\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemht3h4v.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpemht3h4v.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   return (file_name~=nil and (string.find(file_name, \".\")==1 and string.sub(file_name,1,1)\
    \ ~= nil and\n                                     string.sub(file_name,1,1) ~=\
    \ string.lower(string.sub(file_name,1,1)) and\n                              \
    \       string.find(string.lower(string.sub(file_name,1,1)), \"a\") == 1 or \n\
    \                                     string.find(string.lower(string.sub(file_name,1,1)),\
    \ \"A\") == 1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgsp6_u1.lua:23:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpsgsp6_u1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- A file's name is considered to be valid if and only if all the following\
    \ conditions \n   -- are met:\n   -- - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n   -- - The file's name contains exactly one\
    \ dot '.'\n   -- - The substring before the dot should not be empty, and it starts\
    \ with a letter from \n   -- the latin alphapet ('a'-'z' and 'A'-'Z').\n   --\
    \ - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \   local file_name = file_name\n   if file_name == nil then\n      print(\"file\
    \ name is nil\")\n   else\n      local file_name = file_name\n      local dots_count\
    \ = string.len(file_name) - string.len(string.gsub(file_name, \".\", \"\"))\n\
    \      if dots_count > 3 then\n         print(\"too many dots\")\n      elseif\
    \ string.len(file_name) == 0 then\n         print(\"empty file name\")\n     \
    \ else\n         local file_extension = string.sub(file_name, -3)\n         if\
    \ string.find(file_extension, \".\") then\n            if string.find(file_extension,\
    \ \".exe\") or\n               string.find(file_extension, \".dll\") then\n  \
    \             print(\"valid file names\")\n            else\n               print(\"\
    invalid file names\")\n            end\n         else\n            print(\"valid\
    \ file names\")\n         end\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "too many dots\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3k7d_az.lua:50:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_3k7d_az.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"%.\") ~= -1 and string.find(file_name, \"%.\"\
    ) ~= 1 and string.sub(file_name, 1, string.find(file_name, \"%.\")) ~= \"\" and\
    \ string.sub(file_name, string.find(file_name, \"%.\")+1, string.len(file_name))\
    \ in {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\
    \ 'V', 'W', 'X', 'Y', 'Z'} \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcp4pmpec.lua:14: 'end' expected (to close 'function' at line\
    \ 13) near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- Create a local variable 'file_input' that will store the string passed\
    \ to this function\n    -- Example:\n    -- local file_input = nil\n    -- If\
    \ the local variable 'file_input' is set to 'example.txt', then the following\
    \ line of code\n    -- returns 'Yes' to the local variable 'is_valid'\n    --\
    \ local is_valid = file_name_check(file_input)\n    -- Check if the input string\
    \ is nil\n    if file_name == nil then\n        return \"Error: The file's name\
    \ was nil.\"\n    else\n        -- Create a local variable 'is_valid' that will\
    \ store the string 'Yes'\n        -- Example:\n        -- local is_valid = 'Yes'\n\
    \        -- If the local variable 'is_valid' is set to 'No', then the following\
    \ line of code\n        -- returns 'No' to the local variable 'is_valid'\n   \
    \     -- local is_valid = file_name_check(file_input)\n        -- Create a variable\
    \ 'is_valid' which will store the string 'Yes'\n        -- Example: 'Yes'\n  \
    \      local is_valid = 'Yes'\n        -- If the local variable 'is_valid' is\
    \ set to 'No', then the following line of code\n        -- returns 'No' to the\
    \ local variable 'is_valid'\n        -- local is_valid = file_name_check(file_input)\n\
    \        -- Create a variable 'is_valid' that will store the string 'No'\n   \
    \     -- Example: 'No'\n        local is_valid = 'No'\n        -- If the local\
    \ variable 'is_valid' is set to 'Yes', then the following line of code\n     \
    \   -- returns 'Yes' to the local variable 'is_valid'\n        -- local is_valid\
    \ = file_name_check(file_input)\n        -- Create a variable 'is_valid' that\
    \ will store the string 'No'\n        -- Example: 'No'\n        local is_valid\
    \ = 'No'\n        -- If the local variable 'is_valid' is set to 'Yes', then the\
    \ following line of code\n        -- returns 'Yes' to the local variable 'is_valid'\n\
    \        -- local is_valid = file_name_check(file_input)\n        -- Create a\
    \ variable 'is_valid' that will store the string 'No'\n        -- Example: 'No'\n\
    \        local is_valid = 'No'\n        -- If the local variable 'is_valid' is\
    \ set to 'Yes', then the following line of code\n        -- returns 'Yes' to the\
    \ local variable 'is_valid'\n        -- local is_valid = file_name_check(file_input)\n\
    \        -- Create a variable 'is_valid' that will store the string 'No'\n   \
    \     -- Example: 'No'\n        local is_valid = 'No'\n        -- If the local\
    \ variable 'is_valid' is set to 'Yes', then the following line of code\n     \
    \   -- returns 'Yes' to the local variable 'is_valid'\n        -- local is_valid\
    \ = file_name_check(file_input)\n        -- Create a variable 'is_valid' that\
    \ will store the string \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7hwiebnt.lua:93: 'end' expected (to close 'if' at line 21)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  if string.len(file_name) < 3 then\n    return 'No'\n  end\n  if string.sub(file_name,\
    \ 1, string.len(file_name)-1)~= '.' then\n    return 'No'\n  end\n  local file_type\
    \ = string.sub(file_name, string.len(file_name) - 1, string.len(file_name))\n\
    \  if string.find(file_type, \".\") ~= nil then\n    return 'No'\n  end\n  local\
    \ letters = string.gsub(file_type, \"[^a-zA-Z]\", \"\")\n  if string.find(letters,\
    \ \"^\") ~= nil then\n    return 'No'\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92ug5h1l.lua:34:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp92ug5h1l.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return not (string.find(file_name, \"%.\") == nil and\n    string.find(file_name,\
    \ \"::\") == nil and\n    string.find(file_name, \"%.\") == nil and\n    string.find(file_name,\
    \ \":\") == nil and\n    string.find(file_name, \"#\") == nil and\n    string.find(file_name,\
    \ \"%#\") == nil and\n    string.find(file_name, \"<\") == nil and\n    string.find(file_name,\
    \ \">\") == nil and\n    string.find(file_name, \"*\") == nil and\n    string.find(file_name,\
    \ \"?\") == nil and\n    string.find(file_name, \"/\") == nil and\n    string.find(file_name,\
    \ \"[\") == nil and\n    string.find(file_name, \"]\") == nil and\n    string.find(file_name,\
    \ \"%\") == nil and\n    string.find(file_name, \"\\\"\") == nil and\n    string.find(file_name,\
    \ \"\\\\\") == nil and\n    string.find(file_name, \"[\") == nil and\n    string.find(file_name,\
    \ \"]\") == nil and\n    string.find(file_name, \"%\") == nil and\n    string.find(file_name,\
    \ \"\\\"\") == nil and\n    string.find(file_name, \"\\\\\") == nil and\n    string.find(file_name,\
    \ \"#\") == nil and\n    string.find(file_name, \"%#\") == nil and\n    string.find(file_name,\
    \ \"<\") == nil and\n    string.find(file_name, \">\") == nil and\n    string.find(file_name,\
    \ \"*\") == nil and\n    string.find(file_name, \"?\") == nil and\n    string.find(file_name,\
    \ \"/\") == nil and\n    string.find(file_name, \"[\") == nil and\n    string.find(file_name,\
    \ \"]\") == nil and\n    string.find(file_name, \"%\") == nil and\n    string.find(file_name,\
    \ \"\\\"\") == nil and\n    string.find(file_name, \"\\\\\") == nil and\n    string.find(file_name,\
    \ \"[\") == nil and\n    string.find(file_name, \"]\") == nil and\n    string.find(file_name,\
    \ \"%\") == nil and\n    string.find(file_name, \"\\\"\") == nil and\n    string.find(file_name,\
    \ \"\\\\\") == nil and\n    string.find(file_name, \"#\") == nil and\n    string.find(file_name,\
    \ \"%#\") == nil and\n    string.find(file_name, \"<\") == nil and\n    string.find(file_name,\
    \ \">\") == nil and\n    string.find(file_name, \"*\") == nil and\n    string.find(file_name,\
    \ \"?\") == nil and\n    string.find(file_name, \"/\") == nil and\n    string.find(file_name,\
    \ \"[\") == nil and\n    string.find(file_name, \"]\") == nil \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2r35ee0t.lua:61: ')' expected (to close '(' at line 14) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Remove the file's extension if it exists.\n  if file_name ~= \"\" then\n\
    \    if file_name ~= file_name then \n      file_name = string.gsub(file_name,\
    \ \":\", \"\")\n    end\n  end\n  -- Remove the first dot\n  if file_name ~= \"\
    \" then\n    if file_name ~= file_name then \n      file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    end\n  end\n  -- Remove trailing dot\n  if file_name ~= \"\
    \" then\n    if file_name ~= file_name then \n      file_name = string.gsub(file_name,\
    \ \":.\", \"\")\n    end\n  end\n  -- Remove all remaining dots and everything\
    \ before the first letter.\n  if file_name ~= \"\" then\n    if file_name ~= file_name\
    \ then \n      file_name = string.gsub(file_name, \" \", \"\")\n    end\n  end\n\
    \  -- Remove the leading letter if there are more than two digits.\n  if file_name\
    \ ~= \"\" then\n    if file_name ~= file_name then \n      file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    end\n  end\n  -- If there is only a dot then it isn't valid.\n\
    \  if file_name == \"\" then\n    return false\n  end\n  -- If the first letter\
    \ isn't latin alpha or it starts with a number, then it is invalid.\n  if #file_name\
    \ == 1 or string.find(file_name, string.char(string.byte('a')-1)) == nil then\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaov5q2fo.lua:58:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpaov5q2fo.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  if file_name:len() ~= 3 or string.sub(file_name,1,1) ~= '0' or string.sub(file_name,1,1)\
    \ ~= '9' or #string.sub(file_name,1,1) ~= 1 or string.sub(file_name,-1,1) ~= '0'\
    \ or string.sub(file_name,-1,1) ~= '9' then\n    return 'No'\n  else\n    for\
    \ i = 1, string.len(file_name) do\n      if string.sub(file_name, i, i) ~= '.'\
    \ then\n        return 'No'\n      else\n        for j = 1, #valid_extensions\
    \ do\n          local ext = valid_extensions[j]\n          if string.find(string.sub(file_name,\
    \ 1, i), ext, 1, true) then\n            return 'Yes'\n          end\n       \
    \ end\n      end\n    end\n  end\n  return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjcy70ra.lua:36:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpfjcy70ra.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if not file_name or #file_name ~= 3 then\n      return 'No'\n   end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppns2fxtw.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[%w\\._][%w\\._]{1,2}$\") ~= nil and (string.find(file_name,\
    \ \"^%w\") ~= nil or (string.find(file_name, \"^[^%w][^%w]%w\") ~= nil and not\
    \ string.find(file_name, \"%w\")))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0fd3x_i1.lua:14: invalid escape sequence near '\"^[%w\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local index = string.find(file_name, \".\")\n  if index == nil then\n    return\
    \ \"No\"\n  end\n  local substr = string.sub(file_name, 0, index)\n  if #substr\
    \ == 0 or #substr == 1 or string.find(substr:lower(), string.lower(\"0123456789abcdefghijklmnopqrstuvwxyz\"\
    )) == nil then\n    return \"No\"\n  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvrc41lk.lua:28:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpxvrc41lk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local okay = (not #file_name) -- 1 file name\n  okay and (file_name:sub(1,1)\
    \ ~= '.') -- 1 dot\n  and (file_name:len() == 3) -- 3 digits\n  and (not file_name:sub(1,1):find('^[a-zA-Z]'))\n\
    \  and ((file_name:len() > 3) or (file_name:sub(1,1):find('^[a-z0-9]')))\n  and\
    \ ((file_name:len() > 3) or (file_name:sub(1,1):find('^[a-z]')))\n  and ((file_name:len()\
    \ > 4) or (file_name:sub(1,1):find('^[a-z]')))\n  and (not file_name:sub(1,2):find('[exe|dll]'))\n\
    \  return okay\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo6c0hj2t.lua:15: syntax error near 'and'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local dot_position = file_name:find('.')\n  return dot_position ~= nil and\
    \ (dot_position - 1) ~= 0 and (file_name:sub(1, 1) == toupper(file_name:sub(1,\
    \ 1)) \n    and ((file_name:sub(1, 4) == 'exe' or file_name:sub(1, 5) == 'dll')\
    \ and #file_name == 4) \n    or (file_name:sub(1, 4) == 'txt' or file_name:sub(1,\
    \ 5) == 'dll' and #file_name == 5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpth_ymmpn.lua:18: ')' expected (to close '(' at line 15) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- Check if the file name contains more than 3 digits, and if it does, then\
    \ \n\t-- make sure it is no more than three digits (including leading zeros).\n\
    \tif (string.len(file_name) > 3) then\n\t\t-- Check that the file doesn't contain\
    \ more than 1 dot ('.').\n\t\tif (string.find(file_name, \".\") == nil) then\n\
    \t\t\t-- Check that the file doesn't contain more than 2 dots.\n\t\t\tif (string.find(file_name,\
    \ \"..\") == nil) then\n\t\t\t\t-- Check that there are at least 2 letters (excluding\
    \ empty ones) \n\t\t\t\t-- in the file name before the dot ('.').\n\t\t\t\tif\
    \ (string.len(file_name) >= 3) then\n\t\t\t\t\t-- Check that the file name starts\
    \ with one of the latin alphabet \n\t\t\t\t\t-- letters and has at least 2 letters\
    \ after the dot ('.').\n\t\t\t\t\tif (string.find(file_name, string.char(tonumber(string.sub(file_name,\
    \ 1, 1))) == nil) \n\t\t\t\t\t\t\tor (string.len(file_name) >= 3 and string.find(file_name,\
    \ string.char(tonumber(string.sub(file_name,\n\t\t\t\t\t\t\tstring.find(file_name,\
    \ string.char(tonumber(string.sub(file_name, 1, 1))))+1,\n\t\t\t\t\t\t\tstring.char(tonumber(string.sub(file_name,\n\
    \t\t\t\t\t\t\tstring.find(file_name, string.char(tonumber(string.sub(file_name,\
    \ 1, 1))))+2))))) == nil)) then\n\t\t\t\t\t\treturn 'No';\n\t\t\t\t\tend\n\t\t\
    \t\telse\n\t\t\t\t\t-- If the file's name is shorter than 3 digits, then the file\
    \ name \n\t\t\t\t\t-- must be empty.\n\t\t\t\t\treturn 'No';\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\n\t-- If the file's name is empty or if it only contains\
    \ one dot ('.'), then the file's \n\t-- name is considered valid.\n\treturn 'Yes';\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq_fu4hn6.lua:30: ')' expected (to close '(' at line 27) near\
    \ 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return string.find(string.sub(file_name, 1, string.len(file_name)), \"..\"\
    ) ~= nil\n    and string.find(string.sub(file_name, 1, string.len(file_name)),\
    \ \".\") ~= nil\n    and string.find(string.sub(file_name, 1, string.len(file_name)),\
    \ \"^[a-ZA-Z]\") ~= nil\n    and string.find(string.sub(file_name, 1, string.len(file_name)),\
    \ \"^[^.]\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o8ztbjf.lua:23:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp4o8ztbjf.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = string.lower(string.sub(file_name,1,string.len(file_name)-1))\n\
    \    local pattern = '^[a-z_]\\w*$'\n    return string.find(file_name, pattern)\
    \ ~= nil and string.find(file_name, pattern) ~= -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj06frefi.lua:15: invalid escape sequence near ''^[a-z_]\\\
    w'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local index = string.find(file_name, \".\")\n    local dot_index = string.find(file_name,\
    \ \"..\")\n    \n    if dot_index == nil then\n        return 'No'\n    elseif\
    \ dot_index > 1 then\n        return 'No'\n    elseif index == nil then\n    \
    \    return 'No'\n    elseif index > 2 then\n        return 'No'\n    elseif string.sub(file_name,\
    \ 1, 1) ~= 'a' and string.sub(file_name, 1, 1) ~= 'A' then\n        return 'No'\n\
    \    elseif string.sub(file_name, dot_index + 1, 4) ~= string.format(\"%.1f\"\
    , 0.25) then\n        return 'No'\n    elseif string.sub(file_name, 1, 1) ~= 'a'\
    \ and string.sub(file_name, 1, 1) ~= 'A' then\n        return 'No'\n    else\n\
    \        return 'Yes'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0ruoqlv.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpp0ruoqlv.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- If the file's name is invalid, then return 'No'.\n\t-- Otherwise, return\
    \ 'Yes'.\n\tif string.find(file_name, '%?%d') then\n\t\treturn 'No'\n\telse\n\t\
    \t-- Check if the file's name is valid:\n\t\t-- There should not be more than\
    \ three digits ('0'-'9') in the file's name.\n\t\t-- The file's name contains\
    \ exactly one dot '.'\n\t\t-- The substring before the dot should not be empty,\
    \ and it starts with a letter from \n\t\t-- the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \t\t-- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \t\treturn string.find(file_name, '%d%.') == nil and string.find(file_name, '%d%.%.')\
    \ ~= nil and string.find(file_name, '%d%.%.%d') ~= nil and string.find(file_name,\
    \ '%d%.%.%d%d') ~= nil and string.find(file_name, '%d%.%.%d%d%d') ~= nil and string.find(file_name,\
    \ '%d%.%.%d%d%d%d') ~= nil and string.find(file_name, '%d%.%.%d%d%d%d%d') ~= nil\
    \ and string.find(file_name, '%d%.%.%d%d%d%d%d%d') ~= nil and string.find(file_name,\
    \ '%d%.%.%d%d%d%d%d%d%d') ~= nil\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw40ruoj3.lua:32:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpw40ruoj3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local file_name = file_name:gsub('.+%.', '')\n   local file_name = file_name:gsub('.?%.')\n\
    \   local file_name = file_name:gsub('^%.', '')\n   local file_name = file_name:gsub('.+%.%.?%.')\n\
    \   local file_name = file_name:gsub('^%.%.?')\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnnc6jyrk.lua:51: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = string.reverse(file_name)\n    local name_length = string.len(file_name)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvzc77asp.lua:48: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local digits = string.match(file_name, '^%d+%.%.%$') -- extract the digits\
    \ from the file name string\n  -- check if there are three digits in file_name\n\
    \  if digits ~= nil then\n    -- check if there is only one dot ('.') in file_name\n\
    \    if string.find(file_name, '.') ~= nil then\n      -- check if there is only\
    \ one character before '.' in file_name\n      if string.find(file_name, '.')\
    \ == 1 then\n        -- check if the first letter of substring before '.' is latin\
    \ alphabet letter\n        if string.sub(file_name, 1, 1) ~= 'a' then\n      \
    \    -- check if the last letter of substring before '.' is latin alphabet letter\n\
    \          if string.sub(file_name, 1, 1) ~= 'z' then\n            -- check if\
    \ the substring after the dot is 'txt' or 'exe' or 'dll'\n            if string.find(file_name,\
    \ '.', 2) ~= nil and string.sub(file_name, nil, nil) ~= '' then\n            \
    \  -- if everything is ok\n              return 'Yes'\n            else\n    \
    \          -- if not return 'No'\n              return 'No'\n            end\n\
    \          else\n            -- if not return 'No'\n            return 'No'\n\
    \          end\n        else\n          -- if not return 'No'\n          return\
    \ 'No'\n        end\n      else\n        -- if not return 'No'\n        return\
    \ 'No'\n      end\n    else\n      -- if not return 'No'\n      return 'No'\n\
    \    end\n  else\n    -- if not return 'No'\n    return 'No'\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nj0upxg.lua:58:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp6nj0upxg.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    -- Write your code below this line.\n    local pattern = nil\n    local num_digits\
    \ = string.len(string.gsub(file_name, \".\", \"\"))\n    if num_digits == 1 and\
    \ string.find(file_name, \".\") == 1 then\n        pattern = \"^[a-Z][a-Z]*$\"\
    \n    elseif num_digits == 2 and string.find(file_name, \".\") == 1 then\n   \
    \     pattern = \"^[a-z][a-Z]*$\"\n    elseif num_digits > 2 then\n        return\
    \ 'No'\n    else\n        return 'Yes'\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppiud1o9b.lua:58: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return not file_name:find('%%.+[Aa][^.]+%.+[Tt][Oo][Bb][Ll]') and\n       \
    \  file_name:sub(1, 1) ~= '' and \n         file_name:sub(1, 1) ~= '0' and\n \
    \        file_name:sub(1, 1) ~= '9' and\n         file_name:sub(1, 2) ~= '' and\
    \ \n         file_name:sub(1, 2) ~= '0' and\n         file_name:sub(1, 2) ~= '9'\
    \ and\n         file_name:sub(1, 3) == '.' and\n         not file_name:sub(1,\
    \ 3) ~= '0' and\n         not file_name:sub(1, 3) ~= '9' and\n         not file_name:sub(2,\
    \ 3) ~= '0' and\n         not file_name:sub(2, 3) ~= '9' and\n         not file_name:sub(3,\
    \ 3) ~= '0' and\n         not file_name:sub(3, 3) ~= '9'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktokjlnf.lua:33:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpktokjlnf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = tostring(file_name)\n    -- Check for valid file name\n\
    \    -- TODO: Add more checks\n    if file_name == nil then\n        return \"\
    Invalid\"\n    end\n    -- Check for valid filename length\n    if #file_name\
    \ > 3 then\n        return \"Invalid\"\n    end\n    -- Check for valid file extension\n\
    \    if string.find(file_name, \".\") ~= nil then\n        if string.find(file_name,\
    \ string.sub(file_name, 1, string.find(file_name, \".\")-1)) == nil then\n   \
    \         return \"Invalid\"\n        else\n            local extension = string.match(file_name,\
    \ \"%[\\.a-zA-Z0-9]+$\")\n            if extension ~= nil then\n             \
    \   -- Check for valid substring before extension\n                if string.find(file_name,\
    \ string.sub(file_name, string.find(file_name, \".\"), string.len(file_name)))\
    \ == nil then\n                    return \"Invalid\"\n                else\n\
    \                    -- Check for valid file extension\n                    if\
    \ string.find(extension, 'txt') ~= nil or\n                        string.find(extension,\
    \ 'exe') ~= nil or\n                        string.find(extension, 'dll') ~= nil\
    \ then\n                        return \"Valid\"\n                    else\n \
    \                       return \"Invalid\"\n                    end\n        \
    \        end\n            else\n                return \"Invalid\"\n         \
    \   end\n        end\n    else\n        return \"Invalid\"\n    end\nend\n</code>\n\
    <|/ a tags=file,lua,filenames,string-matching dscore=1 |>\n<| c |>\nThanks. I\
    \ ended up using your version with some minor modifications.\n<|/ c |>\n<| c |>\n\
    Great! Glad to help.\n<|/ c |>\n<| a dscore=0 |>\nHere's my take on this.  It\
    \ checks the filename, and returns \"valid\" or \"invalid\" as appropriate based\
    \ on your criteria.  I tested it with your example test cases and it passed. \
    \ You can easily add more checks as needed.\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl_1lt68n.lua:29: invalid escape sequence near '\"%[\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.match(\"^.?[0-9][0-9][0-9]\", file_name) and \n\tnot string.match(file_name,\
    \ ['.'])  and \n\tstring.match(file_name, \"^%a\") and\n\tstring.match(file_name,\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuuw7vfbk.lua:15: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Add your code here\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm97td4x4.lua:22:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpm97td4x4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return 'No'\n   end\n   \n   local pattern\
    \ = string.char(string.byte(file_name, 'utf-8'), string.byte(file_name, 'utf-8')+127)\n\
    \   \n   if string.byte(file_name, 1, 1) ~= string.byte(pattern, 1, 1) then\n\
    \      return 'No'\n   end\n   \n   -- There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n   local max_chars = string.len(file_name)\n\
    \   if max_chars >= 4 then\n      return nil\n   end\n   \n   -- The file's name\
    \ contains exactly one dot '.'\n   if string.sub(file_name, string.len(file_name)-1,\
    \ string.len(file_name)) ~= '.' then\n      return 'No'\n   end\n   \n   -- The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n   -- the latin alphapet ('a'-'z' and 'A'-'Z').\n   if string.byte(file_name,\
    \ 1, 1) == string.byte(pattern, 1, 1) then\n      local first_char\n      for\
    \ first_char in string.byte(file_name, 1, 1):gmatch'[a-ZA-Z]' do\n         --\
    \ The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \         if string.byte(file_name, string.len(file_name)+1, 1) ~= '.' or\n  \
    \          string.byte(file_name, string.len(file_name)+1, 1) ~= '.' or \n   \
    \         string.byte(file_name, string.len(file_name)+1, 1) ~= 'txt' or\n   \
    \         string.byte(file_name, string.len(file_name)+1, 1) ~= 'exe' or\n   \
    \         string.byte(file_name, string.len(file_name)+1, 1) ~= 'dll' then\n \
    \           return 'No'\n         end\n      end\n   end\n   return 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgn8bbpv5.lua:18:\
    \ bad argument #2 to 'byte' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpgn8bbpv5.lua:18: in local 'candidate'\n\t/tmp/tmpgn8bbpv5.lua:56: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local result = true\n    \n    if string.find(file_name, \".\") == nil or\
    \ string.find(file_name, \".\") == nil then\n        return result\n    end\n\
    \    \n    if string.find(file_name, \".\") == nil or string.find(file_name, \"\
    .\") == nil then\n        return result\n    end\n    \n    local sub_string =\
    \ string.sub(file_name,1,string.find(file_name, \".\") - 1)\n    \n    if string.find(sub_string,\
    \ \".\") == nil or string.find(sub_string, \".\") == nil then\n        return\
    \ result\n    end\n    \n    if string.find(sub_string, \".\") == nil or string.find(sub_string,\
    \ \".\") == nil then\n        return result\n    end\n    \n    if string.find(sub_string,\
    \ \".\") == nil or string.find(sub_string, \".\") == nil then\n        return\
    \ result\n    end\n    \n    if string.find(sub_string, \".\") == nil or string.find(sub_string,\
    \ \".\") == nil then\n        return result\n    end\n    \n    if string.find(sub_string,\
    \ \".\") == nil or string.find(sub_string, \".\") == nil then\n        return\
    \ result\n    end\n    \n    if string.find(sub_string, \".\") == nil or string.find(sub_string,\
    \ \".\") == nil then\n        return result\n    end\n    \n    if string.find(sub_string,\
    \ \".\") == nil or string.find(sub_string, \".\") == nil then\n        return\
    \ result\n    end\n    \n    if string.find(sub_string, \".\") == nil or string.find(sub_string,\
    \ \".\") == nil then\n        return result\n    end\n    \n    if string.find(sub_string,\
    \ \".\") == nil or string.find(sub_string, \".\") == nil then\n        return\
    \ result\n    end\n    \n    if string.find(sub_string, \".\") == nil or string.find(sub_string,\
    \ \".\") == nil then\n        return result\n    end\n    \n    if string.find(sub_string,\
    \ \".\") == nil or string.find(sub_string, \".\") == nil then\n        return\
    \ result\n    end\n    \n    if string.find(sub_string, \".\") == nil or string.find(sub_string,\
    \ \".\") == nil then\n        return result\n    end\n    \n    if string.find(sub_string,\
    \ \".\") == nil or string.find(sub_string, \".\") == nil then\n        return\
    \ result\n    end\n    \n    if string.find(sub_string, \".\") == nil or string.find(sub_string,\
    \ \".\") == nil then\n        return result\n    end\n    \n    if string.find(sub_string,\
    \ \".\") == nil or string.find(sub_string, \".\") == nil then\n        return\
    \ result\n    end\n    \n    if string.find(sub_string, \".\") == nil or string.find(sub_string,\
    \ \".\") == nil then\n        return result\n    end\n    \n    if string.find(sub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy368jnta.lua:91: ')' expected (to close '(' at line 90) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   assert(file_name ~= nil, \"The 'file_name' argument cannot be nil.\")\n  \
    \ assert(type(file_name) == \"string\", \"The 'file_name' argument must be a string.\"\
    )\n   assert(#file_name <= 3, \"The 'file_name' argument cannot be longer than\
    \ 3 characters.\")\n   assert(stringsub(file_name,1,1) ~= \"\", \"The 'file_name'\
    \ argument cannot start with a blank character.\")\n   assert(stringsub(file_name,-1,1)\
    \ ~= \".\", \"The 'file_name' argument cannot end with a dot '.'.\")\n   assert(string.find(file_name,\"\
    .\") ~= nil, \"The 'file_name' argument cannot have a dot '.' in the middle of\
    \ the name.\")\n   assert(string.find(file_name,\"%\") ~= nil, \"The 'file_name'\
    \ argument cannot have a percent '%' in the middle of the name.\")\n   assert(string.find(file_name,\"\
    -\") ~= nil, \"The 'file_name' argument cannot have a '-' in the middle of the\
    \ name.\")\n   for i = 1, string.len(file_name) do\n      local c1 = string.sub(file_name,i,i)\n\
    \      if\n         c1 ~= '0' and\n         c1 ~= '9' and\n         c1 == '.'\
    \ and\n         c1 ~= '%' and\n         c1 ~= '-' and\n         c1 ~= '_'\n  \
    \    then\n         return false\n      end\n   end\n   return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xqn_9pi.lua:16:\
    \ The 'file_name' argument cannot be longer than 3 characters.\nstack traceback:\n\
    \t/tmp/tmp6xqn_9pi.lua:16: in local 'candidate'\n\t/tmp/tmp6xqn_9pi.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \tlocal digit_count = string.gsub(file_name, string.format(\"%0.f\", 0), \"\"\
    )\n\tlocal dot_count = string.match(file_name, \"%.%\")\n\tlocal dot_string =\
    \ string.sub(file_name, dot_count-1)\n\tlocal dot_string_check = true\n\t\n\t\
    for i=string.len(digit_count) , 1, -1 do\n\t\tif digit_count[i] ~= '0' then\n\t\
    \t\tdot_string_check = false\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\t\n\tlocal dot_string_check\
    \ = true\n\tlocal dot_check = true\n\tif dot_string_check == true then\n\t\tdot_count\
    \ = string.match(dot_string, \"%.%\")\n\t\tfor i=string.len(dot_count) , 1, -1\
    \ do\n\t\t\tif dot_count[i] ~= '0' then\n\t\t\t\tdot_string_check = false\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal valid_string = 'Yes'\n\tif dot_string_check\
    \ == true and dot_check == true then\n\t\tvalid_string = 'No'\n\tend\n\treturn\
    \ valid_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw13_mt7q.lua:15:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmpw13_mt7q.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpw13_mt7q.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \"%D\") > 0 then\n      return \"No\"\n   end\n\
    \   local name, extension = string.match(file_name, \"([^%.]+)%.(%w+)\")\n   if\
    \ name == nil then\n      return \"No\"\n   end\n   if extension == \"txt\" then\n\
    \      if string.find(name, \"%.\") == nil then\n         return \"No\"\n    \
    \  end\n      if string.find(name, \"%D\") > 0 then\n         return \"No\"\n\
    \      end\n   else\n      if string.find(name, \"%.\") == nil then\n        \
    \ return \"No\"\n      end\n      if string.find(name, \"%D\") == 0 then\n   \
    \      return \"No\"\n      end\n   end\n   if #name > 3 then\n      return \"\
    No\"\n   end\n   if #name ~= 1 then\n      return \"No\"\n   end\n   if string.find(name[1],\
    \ \"%D\") > 0 then\n      return \"No\"\n   end\n   if string.find(name[1], \"\
    %a\") > 0 then\n      return \"No\"\n   end\n   if string.find(name[1], \"%Z\"\
    ) > 0 then\n      return \"No\"\n   end\n   if string.find(name[1], \"%0\") >\
    \ 0 then\n      return \"No\"\n   end\n   if string.find(name[1], \"%9\") > 0\
    \ then\n      return \"No\"\n   end\n   if string.find(name[1], \"%A\") > 0 then\n\
    \      return \"No\"\n   end\n   if string.find(name[1], \"%Z\") > 0 then\n  \
    \    return \"No\"\n   end\n   if string.find(name[1], \"%a\") > 0 then\n    \
    \  return \"No\"\n   end\n   if string.find(name[1], \"%A\") > 0 then\n      return\
    \ \"No\"\n   end\n   return \"Yes\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmxxj0g7.lua:75:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmphmxxj0g7.lua:75:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return (not (string.find(file_name, \"%.\") ~= nil) and \n    (string.find(file_name,\
    \ \".\") ~= nil) and \n    (string.find(file_name, \"^[a-zA-Z][a-zA-Z0-9]*$\"\
    ) ~= nil) and \n    (string.find(file_name, \".[^.]*\") ~= nil) and \n    (string.find(file_name,\
    \ \"^[^.]\") ~= nil) and \n    (string.find(file_name, \"%.[^.]*\") ~= nil) and\
    \ \n    (string.find(file_name, \"%.[^.]\") ~= nil) and \n    (string.find(file_name,\
    \ \"%[^.]\") ~= nil) and \n    (string.find(file_name, \"%[^.]%.[^.]\") ~= nil)\
    \ and \n    (string.find(file_name, \"%[^.]%.[^.]%.[^.]\") ~= nil) and \n    (string.find(file_name,\
    \ \"%[^.]%.[^.]%.[^.]%.[^.]\") ~= nil) and \n    (string.find(file_name, \"%.[^.]%.[^.]%.[^.]%.[^.]%.[^.]%.[^.]%.[^.]%.[^.]%.[^.]%.[^.]%.[^.]%.[^.]\"\
    ) ~= nil)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph0nyv_ts.lua:26: ')' expected (to close '(' at line 14) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return string.match(\"%^[0-9]%.%[exe,dll]\", file_name) ~= nil and\n    \
    \    string.len(file_name) > 3 and\n        string.sub(file_name, 1, string.len(file_name)-1)\
    \ and \n        string.sub(file_name,string.len(file_name), string.len(file_name))==\"\
    .\" and\n        string.sub(file_name,1, 1) and string.sub(file_name,1, 1) in\
    \ string.letters \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd8u2gk4v.lua:18: 'end' expected (to close 'function' at line\
    \ 13) near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local res = {\n        No = 'No',\n        Yes = 'Yes',\n    }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprkzoqvgo.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:lower()\n  local file_name = file_name:gsub(\"\
    %.\", \"\")\n  local file_name = file_name:gsub(\"^\", \"\")\n  local file_name\
    \ = file_name:gsub(\"%[a-z][a-z][a-z]\", \"\")\n  local file_name = file_name:gsub(\"\
    %[a-z][a-z]\", \"\")\n  local file_name = file_name:gsub(\"%[a-z]\", \"\")\n \
    \ local file_name = file_name:gsub(\"%[0-9]\", \"\")\n  local file_name = file_name:gsub(\"\
    %[^0-9]\", \"\")\n  return file_name ~= \"\" and file_name ~= \".\" and file_name\
    \ ~= \"\" and file_name:sub(1,1) ~= \"\" and file_name:sub(1,1) ~= \".\" and file_name:sub(1,1)\
    \ ~= \"\" and file_name:sub(1,1) ~= \".\" and file_name:sub(2,2) ~= \"exe\" and\
    \ file_name:sub(1,1) ~= \"\" and file_name:sub(1,1) ~= \".\" and file_name:sub(1,1)\
    \ ~= \"\" and file_name:sub(1,1) ~= \".\" and file_name:sub(1,1) ~= \"\" and file_name:sub(1,1)\
    \ ~= \".\" and file_name:sub(1,1) ~= \"\" and file_name:sub(2,2) ~= \"dll\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwo6k1nma.lua:28:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpwo6k1nma.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return nil ~= string.match(file_name, \"^[0-9]{0,3}\\.[a-z][a-z][a-z]$\")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp_hfs2ii.lua:14: invalid escape sequence near '\"^[0-9]{0,3}\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if file_name == nil or file_name == \"\" then return \"No\" end\n    file_name\
    \ = file_name ~= \"\" ~= \"\" \n        and file_name:match('^[a-zA-Z][a-zA-z0-9]{0,3}')\
    \ \n        and file_name:sub(1, 1) ~= \"\"\n        and file_name:sub(2, 3) ~=\
    \ \"\"\n        and #file_name > 3\n        and file_name:sub(1, 1) ~= 'a'\n \
    \       and file_name:sub(2, 3) ~= 'a'\n        and file_name:sub(1, 1) ~= 'z'\n\
    \        and file_name:sub(2, 3) ~= 'z'\n        and file_name:sub(1, 1) ~= 'A'\n\
    \        and file_name:sub(2, 3) ~= 'A'\n        and file_name:sub(1, 1) ~= 'Z'\n\
    \        and file_name:sub(2, 3) ~= 'Z'\n        and not file_name:sub(3, 3) --\
    \ and file_name:sub(3, 3) ~= \".\"\n        and file_name:sub(1, 1) ~= '0'\n \
    \       and file_name:sub(2, 3) ~= '0'\n        and file_name:sub(1, 1) ~= '9'\n\
    \        and file_name:sub(2, 3) ~= '9'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwfm5u5z.lua:38:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpbwfm5u5z.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Replace all spaces by dash characters first.\n  file_name = string.gsub(file_name,\
    \ \" \", \"-\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkq7tc4cv.lua:48: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- remove extension\n  file_name = string.gsub(file_name, fileext, \"\")\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5hulo_vt.lua:48: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \t-- Your code here\n\treturn file_name ~= nil and file_name ~= '' and string.match('[a-zA-Z][a-zA-Z0-9]{3,}',\
    \ file_name) ~= nil and string.match('.[a-zA-Z].[a-zA-Z0-9]{3,}', file_name) ~=\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9aw7qwjd.lua:21:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp9aw7qwjd.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that there are only three digits in the filename\n  if #file_name\
    \ ~= 3 then\n    return \"No\"\n  end\n  -- Check that there is exactly one dot\
    \ '.' in the file name\n  if file_name:sub(1, 1) ~= \".\" then\n    return \"\
    No\"\n  end\n  -- Check that substring before the dot is not empty\n  if file_name:sub(1,\
    \ 1) ~= \"\" then\n    return \"No\"\n  end\n  -- Check that substring after the\
    \ dot starts with a latin alphabetic letter\n  if file_name:sub(2, 1) ~= string.upper(string.sub(file_name:sub(2,\
    \ 1), 1, 1)) then\n    return \"No\"\n  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0n78wn4.lua:36:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpa0n78wn4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \tlocal file_name = file_name or ''\n\tlocal name_regex = \n\t\t[[^([A-Za-z0-9]*\\\
    .)?([A-Za-z0-9]{3,})[^.]]\n\tif string.sub(file_name, 1, 1) ~= string.sub(file_name,\
    \ 1, 1) and string.sub(file_name, 1, 1) ~= string.sub(file_name,1,1) then\n\t\t\
    return 'No'\n\telseif string.sub(file_name, 1, 1) == '' and string.sub(file_name,\
    \ 1, 1) ~= string.sub(file_name, 2, 1) then\n\t\treturn 'No'\n\telseif string.sub(file_name,\
    \ 1, 1) ~= string.sub(file_name, 2, 1) and string.sub(file_name, 1, 1) == '' and\
    \ string.sub(file_name, 1, 2) ~= string.sub(file_name,2,2) then\n\t\treturn 'No'\n\
    \telseif string.sub(file_name, 1, 1) == '' and string.sub(file_name, 1, 2) ==\
    \ '' and string.sub(file_name, 1, 3) == '' then\n\t\treturn 'Yes'\n\telseif string.sub(file_name,\
    \ 1, 1) == '' and string.sub(file_name, 1, 2) == '' and string.sub(file_name,\
    \ 1, 3) == '' and string.sub(file_name, 1, 4) == '' and string.sub(file_name,\
    \ 1, 5) == '' and string.sub(file_name, 1, 6) == '' and string.sub(file_name,\
    \ 1, 7) == '' and string.sub(file_name, 1, 8) == '' and string.sub(file_name,\
    \ 1, 9) ~= string.sub(file_name,1,9) and string.sub(file_name, 1, 9) ~= string.sub(file_name,2,9)\
    \ then\n\t\treturn 'No'\n\telseif string.sub(file_name, 1, 1) == '' and string.sub(file_name,\
    \ 1, 2) == '' and string.sub(file_name, 1, 3) == '' and string.sub(file_name,\
    \ 1, 4) == '' and string.sub(file_name, 1, 5) == '' and string.sub(file_name,\
    \ 1, 6) == '' and string.sub(file_name, 1, 7) == '' and string.sub(file_name,\
    \ 1, 8) == '' and string.sub(file_name, 1, 9) ~= string.sub(file_name,1,9) and\
    \ string.sub(file_name, 1, 9) ~= string.sub(file_name,2,9) and string.sub(file_name,\
    \ 1, 9) ~= string.sub(file_name,3,9) then\n\t\treturn 'No'\n\telseif string.sub(file_name,\
    \ 1, 1) == '' and string.sub(file_name, 1, 2) == '' and string.sub(file_name,\
    \ 1, 3) == '' and string.sub(file_name, 1, 4) == '' and string.sub(file_name,\
    \ 1, 5) == '' and string.sub(file_name, 1, 6) == '' and string.sub(file_name,\
    \ 1, 7) == '' and string.sub(file_name, 1, 8) == '' and string.sub(file_name,\
    \ 1, 9) ~= string.sub(file_name,1,9) and string.sub(file_name, 1, 9) ~= string.sub(file_name,2,9)\
    \ and string.sub\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6_o0r7cz.lua:30: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  if file_name == nil then\n    return 'No'\n  end\n  \n  local digits = string.gsub(file_name,\
    \ string.char(0), '')\n  if #digits > 3 then\n    return 'No'\n  end\n  \n  local\
    \ dot = string.find(file_name, \".\")\n  if dot ~= nil then\n    local dot_string\
    \ = string.sub(file_name, 1, dot)\n    local extensions = string.gsub(dot_string,\
    \ \".\", string.char(0))\n    if #extensions > 1 then\n      return 'No'\n   \
    \ end\n  end\n  \n  local first_character = string.sub(file_name, 1, 1)\n  local\
    \ valid_first_characters =\n    { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z' }\n  \n  if valid_first_characters[first_character] ~= nil then\n    return\
    \ 'No'\n  end\n  \n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qufkz2l.lua:46:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0qufkz2l.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if string.len(file_name) > 3 then return 'No' end\n    if string.find(file_name,\
    \ \".\") ~= nil then return 'No' end\n    if string.sub(file_name, 1, 1) ~= 'a'\
    \ then\n        return 'No'\n    end\n    if string.sub(file_name, 1, 1) ~= 'z'\
    \ then\n        return 'No'\n    end\n    if string.sub(file_name, 1, 1) ~= 'A'\
    \ then\n        return 'No'\n    end\n    if string.find(file_name, \"exe\") ==\
    \ nil or string.find(file_name, \"dll\") == nil then\n        return 'No'\n  \
    \  end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv0lrc4q.lua:34:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmprv0lrc4q.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local function is_valid_char(c)\n      return ((c >= 'a' and c <= 'z') or\
    \ \n          (c >= '0' and c <= '9') or\n          c == ' ' or c == ':') \n \
    \  end\n   local function is_valid_file_name(filename)\n      return (filename:sub(1,\
    \ 1) == '.' and\n             filename:sub(1, 1) ~= '' and\n             not (is_valid_char(file:sub(1,\
    \ 1)) and filename:sub(1, 1) ~= nil))\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy5bjnm65.lua:56: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Remove spaces from file's name\n  local function remove_spaces(file_name)\n\
    \    local new_file_name = ''\n    for char in file_name:gmatch(\"[%z]\") do\n\
    \      if char == ' ' then\n        new_file_name = new_file_name .. ' '\n   \
    \   else\n        new_file_name = new_file_name .. char\n      end\n    end\n\
    \    return new_file_name\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0r8uzh4m.lua:58: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return not (string.find(file_name, \"%.\") == nil)\n        and string.find(file_name,\
    \ \"%.\") ~= nil\n        and string.sub(file_name, 1, 1) == 'a'\n        and\
    \ string.sub(file_name, 1, 1) == 'A'\n        and string.sub(file_name, 2, 1)\
    \ ~= '_'\n        and string.sub(file_name, 2, 1) ~= '0'\n        and string.sub(file_name,\
    \ 2, 1) ~= '9'\n        and string.sub(file_name, string.find(file_name, \"%.\"\
    ) - 1) ~= ''\n        and string.sub(file_name, string.find(file_name, \"%.\"\
    ) - 1, string.find(file_name, \"%.\") - 1) ~= '.'\n        and string.sub(file_name,\
    \ string.find(file_name, \"%.\") - 1, string.find(file_name, \"%.\")) ~= 'txt'\n\
    \        and string.sub(file_name, string.find(file_name, \"%.\") - 1, string.find(file_name,\
    \ \"%.\")) ~= 'exe'\n        and string.sub(file_name, string.find(file_name,\
    \ \"%.\") - 1, string.find(file_name, \"%.\")) ~= 'dll'\nend\n</cell>\n<cell>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb93ugg9q.lua:27: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    return string.find(file_name, \"..\") ~= nil and\n        string.find(file_name,\
    \ \" \") ~= nil and\n        string.find(file_name, \".\") ~= nil and\n      \
    \  string.find(file_name, \"0\") ~= nil and\n        string.find(file_name, \"\
    9\") ~= nil and\n        string.find(file_name, \"a\")  ~= nil and\n        string.find(file_name,\
    \ \"z\")  ~= nil and\n        string.find(file_name, \"A\")  ~= nil and\n    \
    \    string.find(file_name, \"Z\")  ~= nil and\n        string.find(file_name,\
    \ \" \")  ~= nil and\n        string.find(file_name, \":\") ~= nil and\n     \
    \   string.find(file_name, \"[\") ~= nil and\n        string.find(file_name, \"\
    ]\") ~= nil and\n        string.find(file_name, \";\") ~= nil and\n        string.find(file_name,\
    \ \"\\\"\") ~= nil and\n        string.find(file_name, \"'\") ~= nil and\n   \
    \     string.find(file_name, \"]\") ~= nil and\n        string.find(file_name,\
    \ \"-\") ~= nil and\n        string.find(file_name, \".\") ~= nil and\n      \
    \  string.find(file_name, \":\") ~= nil and\n        string.find(file_name, \"\
    [\") ~= nil and\n        string.find(file_name, \"]\") ~= nil and\n        string.find(file_name,\
    \ \";\") ~= nil and\n        string.find(file_name, \"\\\"\") ~= nil and\n   \
    \     string.find(file_name, \"'\") ~= nil and\n        string.find(file_name,\
    \ \"-\") ~= nil and\n        string.find(file_name, \".\") ~= nil and\n      \
    \  string.find(file_name, \":\") ~= nil and\n        string.find(file_name, \"\
    [\") ~= nil and\n        string.find(file_name, \"]\") ~= nil and\n        string.find(file_name,\
    \ \";\") ~= nil and\n        string.find(file_name, \"\\\"\") ~= nil and\n   \
    \     string.find(file_name, \"'\") ~= nil and\n        string.find(file_name,\
    \ \"/\") ~= nil and\n        string.find(file_name, \"\\\\\") ~= nil and\n   \
    \     string.find(file_name, \".\") ~= nil and\n        string.find(file_name,\
    \ \":\") ~= nil and\n        string.find(file_name, \"[\") ~= nil and\n      \
    \  string.find(file_name, \"]\") ~= nil and\n        string.find(file_name, \"\
    ;\") ~= nil \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7ae3bemk.lua:54: 'end' expected (to close 'function' at line\
    \ 13) near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    if not file_name then\n        return false\n    end\n    local name_array\
    \ = string.split(file_name, \".\")\n    local name_count = #name_array\n    if\
    \ name_count < 3 then\n        return false\n    end\n    if name_array[1] ~=\
    \ \"\" then\n        local first_letter = string.sub(name_array[1], 1, 1)\n  \
    \      local first_letter_lower = string.lower(first_letter)\n        if first_letter_lower\
    \ ~= 'a' and first_letter_lower ~= 'z' then\n            return false\n      \
    \  end\n    end\n    local extensions = { \"txt\", \"exe\", \"dll\" }\n    if\
    \ #name_array ~= 3 then\n        return false\n    end\n    local extension =\
    \ string.sub(name_array[2], 1, 3)\n    return extensions.include(extension)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpac4sq7_e.lua:17:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpac4sq7_e.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpac4sq7_e.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local num_digits = string.gsub(file_name, \":*$\", \"\")\n  return num_digits\
    \ >= 3 and (string.sub(file_name, 1, 1) ~= '\\' or string.sub(file_name, 1, 1)\
    \ ~= '0')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn94h24gq.lua:15: ')' expected near '0'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local pattern = '^[^.][a-zA-Z]{1}[a-zA-Z0-9]{2,}$';\n    local pattern_end\
    \ = '^[^.][a-zA-Z]{1}[a-zA-Z0-9]{2,}\\.[txt|exe|dll]$';\n    \n    local regex_start\
    \ = string.rep(pattern, '.', 1);\n    local regex_end = string.rep(pattern_end,\
    \ '.', 1);\n    \n    local regex = '^' .. regex_start .. '$';\n    \n    return\
    \ string.match(regex, file_name) and string.match(regex_end, file_name);\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9pnzxwif.lua:15: invalid escape sequence near ''^[^.][a-zA-Z]{1}[a-zA-Z0-9]{2,}\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.gsub(file_name, '^0*([1-9])$', '') ~= nil and \n         string.sub(file_name,\
    \ 1, 1) ~= nil and \n         string.sub(file_name, 1, 1) ~= nil and \n      \
    \   string.sub(file_name, 1, 1) ~= nil and \n         (string.sub(file_name, 1,\
    \ 2) ~= '..' or \n          string.sub(file_name, 2, 1) ~= 'a' or \n         \
    \ string.sub(file_name, 3, 1) ~= 'z' or\n          string.sub(file_name, 3, 1)\
    \ ~= 'A')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1d6n51e3.lua:27:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp1d6n51e3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_ext = file_name:sub(1,2)\n    local is_valid = false\n    if file_ext\
    \ == '.exe' or file_ext == '.dll' or file_ext == '.so' then\n        for i=1,4\
    \ do\n            if string.sub(file_name, 1, i) ~= '..' then\n              \
    \  local num_string = string.sub(file_name, 1, i)\n                local digit_check\
    \ = true\n                if string.len(num_string) > 0 then\n               \
    \     for j=1,string.len(num_string) do\n                        if string.sub(num_string,\
    \ j,1) ~= '0' then\n                            digit_check = digit_check and\
    \ false\n                        end\n                    end\n              \
    \  end\n                if not digit_check then\n                    is_valid\
    \ = false\n                    break\n                end\n            end\n \
    \       end\n    end\n    return is_valid\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22vuw6lj.lua:41:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp22vuw6lj.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
