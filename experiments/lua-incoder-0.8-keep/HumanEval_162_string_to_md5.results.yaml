name: HumanEval_162_string_to_md5
language: lua
results:
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    -- Compute md5 hash of string.\n\t-- It is a bit expensive but quick.\n\t-- The\
    \ md5 hash of a string is computed as\n\t--     md5(\"Hello \"..text)\n\tlocal\
    \ md5 = string.format(\"%x\", md5.hash(text))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplwa1ahr7.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text:len() == 0 then\n      return nil\n   end\n   local hash164 = md5.new(\"\
    SHA-1\")\n   hash164:update(text)\n   return hash164:hex()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxn40f3p.lua:8:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpcxn40f3p.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpcxn40f3p.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if text == nil then return end\n\tlocal h = md5.new()\n\th.update(text)\n\treturn\
    \ h:digest()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiotrv8bj.lua:6:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpiotrv8bj.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpiotrv8bj.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:match(\"^%s*([^%s]+)\") and return text:match(\"^%s*(.-)%s*$\"\
    ) or\n    nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpch_ihmq7.lua:5: unexpected symbol near 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then\n    return nil\n  end\n  local hash = crypto.md5()\n \
    \ hash:update(text)\n  return hash:digest()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuklowh27.lua:8:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmpuklowh27.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpuklowh27.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text ~= '' then\n        local md5sum, err = md5.new(text, 'hex')\n  \
    \      if err then\n            return nil\n        end\n        return md5sum\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbpfz5f8r.lua:6:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpbpfz5f8r.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpbpfz5f8r.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5 = crypto.md5.new()\n  if text ~= '' then\n    md5:update(text)\n\
    \  end\n  return md5:final()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpillkh9jj.lua:5:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmpillkh9jj.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpillkh9jj.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcn5q902.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"Hello world\"\nstack\
    \ traceback:\n\t/tmp/tmpbcn5q902.lua:11: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5sum = ngx.md5(text)\n  if md5sum == ngx.null then\n    return nil\n\
    \  end\n  return md5sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgt2h23u.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmplgt2h23u.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmplgt2h23u.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5 = ngx.md5(text)\n    if text == \"\" then\n        return nil\n\
    \    end\n    return md5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm835uyol.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpm835uyol.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpm835uyol.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5 = ngx.md5()\n  if text ~= \"\" then\n    md5:update(text)\n  end\n\
    \  return md5:final()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx1r3bg3y.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpx1r3bg3y.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpx1r3bg3y.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5\n    md5 = ngx.md5(ngx.encode_uri(text))\n    return md5:sub(1,\
    \ md5:len() - 2) -- Return md5 hash as a string.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppt5od0_p.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmppt5od0_p.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmppt5od0_p.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5sum, md5bin = md5.new()\n  local fd = io.open(\"-\", \"w\")\n  io.write(fd,\
    \ text)\n  io.close(fd)\n  local hashhex = md5bin:digest()\n  return hashhex:sub(1,\
    \ #md5sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zkus_cr.lua:5:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmp4zkus_cr.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp4zkus_cr.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    return ngx.md5(text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpghr5gzdn.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpghr5gzdn.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpghr5gzdn.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    return text:gsub(\"%z\", os.date(\"%H%M%S\")):gsub(\"%D\", '')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oc2pian.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"\"\nstack traceback:\n\
    \t/tmp/tmp6oc2pian.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub(\"^%s*(%S+)%s*$\", \"%1 %2 %3 \"):gsub(\"%1 %2 %3 \", \"%1\
    \ %2 %3 \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk69ij7w4.lua:5:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpk69ij7w4.lua:5: in local\
    \ 'candidate'\n\t/tmp/tmpk69ij7w4.lua:11: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local hash\n    local h = require 'util.hash'\n    local function __hash_hex(value,\
    \ md5)\n        local hash16 = h:hash16(value)\n        return md5 .. hash16:sub(1,\
    \ 4)\n    end\n    local function __hash_base64(value)\n        local base64 =\
    \ require 'util.base64'\n        local base64_hash = base64:encode_for_mysql(value)\n\
    \        return base64_hash:sub(1, base64_hash:len()-8)\n    end\n    if text\
    \ ~= '' then\n        hash = h:md5(text)\n    end\n    return hash\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqkr95gr.lua:17:\
    \ attempt to call a nil value (method 'md5')\nstack traceback:\n\t/tmp/tmpvqkr95gr.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpvqkr95gr.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then return nil end\n    return rawurlencode(md5.digest(text))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptexu4ybk.lua:6:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmptexu4ybk.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmptexu4ybk.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    local function hex_char(c) return string.format('%x', c) end\n\tlocal function\
    \ to_hex(s)\n\t\treturn s:gsub('%z', hex_char):gsub('%x', hex_char)\n\tend\n\t\
    text = text:gsub('%z', '')\n\ttext = text:gsub('%x', '')\n\tlocal md5 = string.format('%x',\
    \ ngx.md5(text))\n\treturn to_hex(md5)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0nga5et_.lua:11:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp0nga5et_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp0nga5et_.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text:len() == 0 then return end\n    local buf = ffi.new(\"unsigned char[260]\"\
    )\n    local len = ffi.new(\"uint32_t[1]\", #text)\n    local md5 = ffi.new(\"\
    unsigned char [17]\")\n    ffi.copy(buf, text, len)\n    md5_func(buf, len, md5)\n\
    \    return ffi.string(md5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn06f38ry.lua:6:\
    \ attempt to index a nil value (global 'ffi')\nstack traceback:\n\t/tmp/tmpn06f38ry.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpn06f38ry.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9wr3knol.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text:len() > 0 then\n        local md5 = require('math').new('md5');\n\
    \        md5.update(text:gsub('\\r\\n', '\\n'):gsub('\\r', '\\n'));\n        return\
    \ md5.digest();\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnzx33rjx.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpnzx33rjx.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpnzx33rjx.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text:match('^') then\n      return text:match('^(.-$)')\n   end\n   if\
    \ text:match('$') then\n      return text:match('^(.*$)')\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06zn4oah.lua:16:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp06zn4oah.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return string.gsub(\n    string.rep(\"%x\", 16),\n    '.',\n    function(c)\n\
    \      return string.format(\"%02x\", string.byte(c))\n    end\n  ) or nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m76jnls.lua:17:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"2578257825782578257825782578257825782578257825782578257825782578\"\
    \nstack traceback:\n\t/tmp/tmp8m76jnls.lua:17: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text == '' then\n      return nil\n   end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwgw2_2hk.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if not text or text == '' then\n\t\treturn nil\n\tend\n\treturn string_to_hex(md5.tranlation('base64',\
    \ text))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnijea5qk.lua:8:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpnijea5qk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpnijea5qk.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == \"\" then\n    return nil\n  else\n    local md5 = ngx.md5()\n \
    \   md5:update(text)\n    return md5:final()\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjxtoxru4.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpjxtoxru4.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpjxtoxru4.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text and luastring_md5:encode(text)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9_z_ce86.lua:5:\
    \ attempt to index a nil value (global 'luastring_md5')\nstack traceback:\n\t\
    /tmp/tmp9_z_ce86.lua:5: in local 'candidate'\n\t/tmp/tmp9_z_ce86.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return nil if (text == nil or text == '') then\n    return 'd41d8cd98f00b204e9800998ecf8427e'\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpccwohigv.lua:5: 'end' expected (to close 'function' at line\
    \ 4) near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub(\"([^0-9a-f])\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"(.)\",\n    function(x)\n      return string.format(\"#%02x\"\
    , string.byte(x));\n    end):gsub(\"\\n\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\r\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"^\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\n\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\r\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\\\n\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\\\r\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\\\\\n\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\\\\\\\n\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\\\\\\\\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\\"\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\'\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"[\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"]\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"\\\\\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"^\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"%\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"@\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"!\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"&\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub(\"|\",\n    function(x)\n      return string.char(tonumber(x));\n\
    \    end):gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7fqlh363.lua:75: function arguments expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil or text == '' then\n    return nil\n  end\n  local md5sum =\
    \ string.format('%x', md5.digest(text))\n  return md5sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1yqragn.lua:8:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpi1yqragn.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpi1yqragn.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub(\"\\r\", \"\"):gsub(\"\\n\", \"\"):gsub(\":\", \"\"):gsub(\"\
    -\", \"\"):gsub(\"=\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvioic4jo.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"Hello world\"\nstack\
    \ traceback:\n\t/tmp/tmpvioic4jo.lua:11: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text:len() == 0 then return nil end\n   local hash = ngx.md5(text)\n  \
    \ if hash == ngx.null then return nil end\n   return hash\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1sjo54k9.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp1sjo54k9.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp1sjo54k9.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local function __md5(strlen)\n        local md5_tab = {\n            [0x41]\
    \ = {\n                [0x20] = 0x11,\n                [0x51] = 0x12,\n      \
    \          [0x61] = 0x13,\n                [0x41] = 0x14,\n                [0x61]\
    \ = 0x15,\n                [0x51] = 0x16,\n                [0x41] = 0x17,\n  \
    \              [0x51] = 0x18,\n                [0x41] = 0x19,\n              \
    \  [0x31] = 0x1a,\n                [0x41] = 0x1b,\n                [0x51] = 0x1c,\n\
    \                [0x32] = 0x1a,\n                [0x53] = 0x1b,\n            \
    \    [0x43] = 0x1c,\n                [0x50] = 0x1d,\n                [0x52] =\
    \ 0x1e,\n                [0x42] = 0x1f,\n                [0x40] = 0x20,\n    \
    \            [0x50] = 0x21,\n                [0x40] = 0x22,\n                [0x50]\
    \ = 0x23,\n                [0x40] = 0x24,\n                [0x50] = 0x25,\n  \
    \              [0x40] = 0x26,\n                [0x50] = 0x27,\n              \
    \  [0x40] = 0x28,\n                [0x50] = 0x29,\n                [0x40] = 0x2a,\n\
    \                [0x50] = 0x2b,\n                [0x40] = 0x2c,\n            \
    \    [0x50] = 0x2d,\n                [0x40] = 0x2e,\n                [0x50] =\
    \ 0x2f,\n                [0x40] = 0x30,\n                [0x50] = 0x31,\n    \
    \            [0x40] = 0x32,\n                [0x50] = 0x33,\n                [0x40]\
    \ = 0x34,\n                [0x50] = 0x35,\n                [0x40] = 0x36,\n  \
    \              [0x50] = 0x37,\n                [0x40] = 0x38,\n              \
    \  [0x50] = 0x39,\n                [0x40] = 0x3a,\n                [0x50] = 0x3b,\n\
    \                [0x40] = 0x3c,\n                [0x50] = 0x3d,\n            \
    \    [0x40] = 0x3e,\n                [0x50] = 0x3f,\n                [0x40] =\
    \ 0x40,\n                [0x50] = 0x41,\n                [0x40] = 0x42,\n    \
    \            [0x50] = 0x43,\n                [0x40] = 0x44,\n                [0x50]\
    \ = 0x45,\n                [0x40] = 0x46,\n                [0x50] = 0x47,\n  \
    \              [0x40] = 0x48,\n                [0x50] = 0x49,\n              \
    \  [0x40] = 0x4a,\n                [0x50] = 0x4b,\n                [0x40] = 0x4c,\n\
    \                [0x50] = 0x4d,\n                [0x40] = 0x4e,\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0k0us3w6.lua:76: '}' expected (to close '{' at line 7) near\
    \ 'function'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub(\"%a\", \"a\")\n             :gsub(\"%b\", \"b\")\n      \
    \       :gsub(\"%c\", \"c\")\n             :gsub(\"%d\", \"d\")\n            \
    \ :gsub(\"%e\", \"e\")\n             :gsub(\"%f\", \"f\")\n             :gsub(\"\
    %g\", \"g\")\n             :gsub(\"%h\", \"h\")\n             :gsub(\"%i\", \"\
    i\")\n             :gsub(\"%j\", \"j\")\n             :gsub(\"%k\", \"k\")\n \
    \            :gsub(\"%l\", \"l\")\n             :gsub(\"%m\", \"m\")\n       \
    \      :gsub(\"%M\", \"M\")\n             :gsub(\"%n\", \"\\n\")\n           \
    \  :gsub(\"%p\", \"p\")\n             :gsub(\"%q\", \"q\")\n             :gsub(\"\
    %r\", \"r\")\n             :gsub(\"%s\", \"s\")\n             :gsub(\"%t\", \"\
    \\t\")\n             :gsub(\"%u\", \"u\")\n             :gsub(\"%v\", \"v\")\n\
    \             :gsub(\"%w\", \"w\")\n             :gsub(\"%x\", \"x\")\n      \
    \       :gsub(\"%y\", \"y\")\n             :gsub(\"%z\", \"z\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplcn56f6z.lua:5:\
    \ malformed pattern (missing arguments to '%b')\nstack traceback:\n\t/tmp/tmplcn56f6z.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmplcn56f6z.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6x831pz2.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil or text == '' then return nil end\n  local hash = crypto.new(\"\
    md5\")\n  hash:add(text)\n  return hash:get()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgo1ra1th.lua:6:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmpgo1ra1th.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpgo1ra1th.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  -- First we must convert it to binary using utf8.\n  if text:len() == 0 then\n\
    \    return nil\n  end\n  local binary_text = string.char(string.byte(text))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl71vko2x.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0go7jgs_.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == '' then\n    return nil\n  end\n  return md5.hash(text)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpua41lh6p.lua:8:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpua41lh6p.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpua41lh6p.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local hash\n  if text:len() ~= 0 then\n    hash = ngx.md5(text)\n  end\n  return\
    \ hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpywa5o6_1.lua:7:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpywa5o6_1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpywa5o6_1.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text:len() == 0 then\n    return nil\n  end\n  local function to_hex(s)\n\
    \    return table.concat(unpack(s:gsub('.', function(c) return string.format('%%%02X',\
    \ string.byte(c)) end)), '') \n  end\n  local function add_padding(s)\n    return\
    \ s:sub(1,-2:len()) .. '='\n  end\n  return table.concat(unpack(string.gsub(to_hex(md5.hash(text\
    \ .. add_padding(''))), '(.)(.)(.)', \"%$1$2$3$4\")))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo_wrnocm.lua:12: ')' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local hash\n  if text:len() > 0 then\n    hash = \"%x%x%x%x%x%x%x\"\n     \
    \ :format(\n        math.floor(\n          string_to_hex(\n            text:lower()\n\
    \          ):byte(1, 16)\n        ) %\n          256,\n        math.floor(\n \
    \         string_to_hex(\n            text:lower()\n          ):byte(2, 16)\n\
    \        ) %\n          256,\n        math.floor(\n          string_to_hex(\n\
    \            text:lower()\n          ):byte(3, 16)\n        ) %\n          256,\n\
    \        math.floor(\n          string_to_hex(\n            text:lower()\n   \
    \       ):byte(4, 16)\n        ) %\n          256,\n        math.floor(\n    \
    \      string_to_hex(\n            text:lower()\n          ):byte(5, 16)\n   \
    \     ) %\n          256,\n        math.floor(\n          string_to_hex(\n   \
    \         text:lower()\n          ):byte(6, 16)\n        ) %\n          256\n\
    \      )\n  end\n  return hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6qvkp9l9.lua:8: unexpected symbol near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    -- https://stackoverflow.com/questions/2256784/md5-checksum-algorithm-in-go\n\t\
    -- https://rosettacode.org/wiki/MD5/Implementation#Golang\n\tlocal function h(x)\n\
    \t\tlocal i\n\t\tlocal r = 0\n\t\tfor i = 1, 4 do\n\t\t\tr = r + (math.floor(x)\
    \ & 255) * math.pow(16, i-1)\n\t\t\tx = x >> 8\n\t\tend\n\t\treturn r\n\tend\n\
    \tlocal buf = ''\n\tfor i = 1, #text do\n\t\tbuf = buf .. string.format(\"%x\"\
    , h(text:sub(i, i)))\n\tend\n\tlocal res = md5.New()\n\tres:update(buf)\n\treturn\
    \ res:digest()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1rtoxpvz.lua:11:\
    \ bad argument #1 to 'floor' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp1rtoxpvz.lua:11: in local 'h'\n\t/tmp/tmp1rtoxpvz.lua:18: in local 'candidate'\n\
    \t/tmp/tmp1rtoxpvz.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5, err = minetest.get_md5(text)\n    if err then\n        return\
    \ nil, err\n    end\n    return md5\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6soeb_y7.lua:5:\
    \ attempt to index a nil value (global 'minetest')\nstack traceback:\n\t/tmp/tmp6soeb_y7.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp6soeb_y7.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if text == nil then\n\t\treturn nil\n\tend\n\tlocal hasher = crypto.createHash(\"\
    md5\")\n\thasher:update(text)\n\treturn hasher:digest().hex()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe60mud5r.lua:8:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmpe60mud5r.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpe60mud5r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    -- Based on http://stackoverflow.com/questions/13292927/python-return-md5sum-of-text\n\
    \ttext = text:gsub(\"\\n\", \"\\r\\n\")\n\tlocal md5hash = ngx.md5(text)\n\treturn\
    \ md5hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggm033s8.lua:7:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpggm033s8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpggm033s8.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then return nil end\n    if text:len() > 0 then\n        local\
    \ md5 = require \"md5\"\n        return md5:digest(text)\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmperm424to.lua:8:\
    \ attempt to call a nil value (method 'digest')\nstack traceback:\n\t/tmp/tmperm424to.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmperm424to.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text == nil or text == \"\" then\n      return nil\n   end\n   return string.gsub(string.gsub(text,\
    \ \"\\n\", ''), '\\r\\n', '\\n')\n      ..':'.. string.gsub(string.gsub(text,\
    \ \"\\n\", ''), '\\r', '\\n')\n      ..':'.. string.gsub(string.gsub(text, \"\\\
    n\", ''), '\\r', '\\n')\n      ..':'.. string.gsub(string.gsub(text, \"\\n\",\
    \ ''), '\\n', '\\n')\n      ..':'.. string.gsub(string.gsub(text, \"\\n\", ''),\
    \ '\\r', '\\n')\n      ..':'.. string.gsub(string.gsub(text, \"\\n\", ''), '\\\
    n', '\\n')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67mfnwyb.lua:19:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"Hello world:Hello\
    \ world:Hello world:Hello world:Hello world:Hello world\"\nstack traceback:\n\t\
    /tmp/tmp67mfnwyb.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  -- TODO: This implementation fails for non-ASCII chars.\n  if not text then\
    \ return end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprsa2_1ro.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text:len() == 0 then\n    return nil\n  end\n  local md5 = ngx.md5()\n \
    \ md5:update(text)\n  return md5:final()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkuo61m77.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpkuo61m77.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkuo61m77.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  text = text:gsub(\"\\n\", \"%0a\")\n  text = text:gsub(\"\\r\", \"%0a\")\n\
    \  text = text:gsub(\"\\t\", \"%0a\")\n  text = text:gsub(\"\\0\", \"%0a\")\n\
    \  return base64:encode(text:gsub(\"%0a\", \"\\r\\n\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp4qu4ufa.lua:9:\
    \ attempt to index a nil value (global 'base64')\nstack traceback:\n\t/tmp/tmpp4qu4ufa.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpp4qu4ufa.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then return end\n    local hasher = md5.new()\n    hasher:reset():update(text)\n\
    \    return hasher:final()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp_zgnf3.lua:6:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpbp_zgnf3.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpbp_zgnf3.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if not text or #text == 0 then\n    return nil\n  end\n  local md5hash = crypto.md5_hash_string(text)\n\
    \  -- Convert to hexadecimal and remove the leading \"0x\".\n  return string.sub(tostring(md5hash),\
    \ 2, 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7msd36iw.lua:8:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmp7msd36iw.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp7msd36iw.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text ~= '' then\n    local md5 = ngx.md5(ngx.encode_base64(text))\n    return\
    \ md5:sub(1, md5:len()-2)\n  else\n    return ''\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrb1rnnm.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpmrb1rnnm.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmrb1rnnm.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if not text then\n\t\treturn nil\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8i3cdbe2.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == \"\" then\n    return nil\n  end\n  return ngx.encode_md5_hex(string)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbq4ohz_.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpsbq4ohz_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpsbq4ohz_.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil or text == \"\" then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw8w9ushi.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:match(\"^[a-fA-F0-9]{32}$\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwoz0iz_o.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpwoz0iz_o.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    local md5 = ngx.md5(text)\n\treturn md5\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0sldgp66.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp0sldgp66.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp0sldgp66.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text:len() == 0 then\n        return nil\n    end\n    local hash = 0x6a09e667\n\
    \    for index = 1, #text do\n        hash = (hash * 16807) ^ text:byte(index)\n\
    \    end\n    return table.concat(string.char(hash >> 16),'','')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaq6lc3i6.lua:12:\
    \ number (local 'hash') has no integer representation\nstack traceback:\n\t/tmp/tmpaq6lc3i6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpaq6lc3i6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local result = nil\n  if text:len() > 0 then\n    local hex_digest = ngx.md5(text)\n\
    \    if hex_digest:len() > 0 then\n      result = ngx.encode_base64(hex_digest)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslr7ev64.lua:7:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpslr7ev64.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpslr7ev64.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwfxchjao.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  text = text:upper()\n  if text:match(\"^[a-zA-Z0-9]+$\") then\n    local hash\
    \ = md5.new()\n    hash:update(text)\n    return hash:hexdigest()\n  end\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i9dm2hh.lua:17:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp3i9dm2hh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5 = ngx.md5()\n  local tmp, err = io.tmpfile('ngx.xxx')\n  if err then\n\
    \    return nil, err\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3d7vev5b.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text:len() == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyui3grnj.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local function to_hex(char)\n    return string.char(char(8), char(16), char(32),\
    \ char(64))\n  end\n  local function make_hex_md5(byte)\n    local tmp1 = byte:sub(1,2)\n\
    \    local tmp2 = byte:sub(3,4)\n    local tmp3 = byte:sub(5,6)\n    local tmp4\
    \ = byte:sub(7,8)\n    return to_hex(tmp1) ..  to_hex(tmp2) ..  to_hex(tmp3) ..\
    \  to_hex(tmp4)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2vnz97qx.lua:25: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg4zl6137.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv2cyt0lp.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpndmpclcv.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if not text then return end\n    local md5, err = ngx.md5(text)\n    if err\
    \ then return nil, err end\n    return md5 -- Lua will automatically stringify\
    \ it for us.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfxvdq0nr.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpfxvdq0nr.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpfxvdq0nr.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if not text or text == \"\" then\n        return\n    end\n    local h =\
    \ assert(borg_md5_init())\n    assert(borg_md5_update(h, text))\n    return borg_md5_final(h)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ns8n3tc.lua:8:\
    \ attempt to call a nil value (global 'borg_md5_init')\nstack traceback:\n\t/tmp/tmp5ns8n3tc.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5ns8n3tc.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local hexdigest = ngx.md5(text)\n  return ngx.regex_sub(hexdigest, \"([0-9a-fA-F]{32})\"\
    , \"%\\\\1\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgr406qf3.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpgr406qf3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpgr406qf3.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local sha = require(\"sha1\")\n    local hex = require(\"hex\")\n    local\
    \ hash = sha:new()\n    hash:update(text)\n    return hex:encode(hash:final())\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprjeulb8z.lua:7:\
    \ attempt to call a nil value (method 'new')\nstack traceback:\n\t/tmp/tmprjeulb8z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprjeulb8z.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   local hash = md5()\n   if text ~= '' then\n      table.insert(hash, text)\n\
    \   end\n   return hash:hexdigest()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphsj8kx6s.lua:5:\
    \ attempt to call a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmphsj8kx6s.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmphsj8kx6s.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if not text then return end\n  return rawget(_G.md5cache, text) or _G.md5cache[text]\
    \ = _G.md5(text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq1dh9gzu.lua:6: 'end' expected (to close 'function' at line\
    \ 4) near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text and _md5.hash('MD5', text) or nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprze4slwu.lua:5:\
    \ attempt to index a nil value (global '_md5')\nstack traceback:\n\t/tmp/tmprze4slwu.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmprze4slwu.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if text == nil then\n\t\treturn nil\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp50y6zqdz.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text:len() > 0 then\n    return md5.hash(text)\n  else\n    return nil\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuetuf07x.lua:6:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpuetuf07x.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpuetuf07x.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  -- Use lua 5.2's hash function\n  -- LuaJIT does not support MD5\n  -- local\
    \ md5 = require(\"md5\")\n  -- return md5.new(text).digest()\n  -- Use Lua's own\
    \ hash function\n  -- -- local md5 = require(\"md5\")\n  -- -- return md5.new(\"\
    Hello world\"):digest()\n  -- return lfs.read_file(\"/etc/passwd\"):bytes()\n\
    \  -- return string.gsub(lfs.read_file(\"/etc/passwd\"):bytes(), \"\\r\\n\", \"\
    \\n\")\n  return lfs.read_file(\"/etc/passwd\"):bytes()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0dkwqwc.lua:14:\
    \ attempt to index a nil value (global 'lfs')\nstack traceback:\n\t/tmp/tmpc0dkwqwc.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpc0dkwqwc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5 = ngx.md5(text)\n  if md5 == nil or md5 then\n    return nil\n  end\n\
    \  return md5:sub(1, 16):lower()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7onr5pv.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpb7onr5pv.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpb7onr5pv.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local hash\n    local function hasher(text, key)\n        if text then\n\
    \            hash = crypto.hash.md5(text .. key)\n        end\n    end\n    local\
    \ function checker(text)\n        if text ~= hash then\n            hasher(text,\
    \ text)\n        end\n    end\n    checker(text)\n    return hash\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzydrur2f.lua:8:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmpzydrur2f.lua:8:\
    \ in upvalue 'hasher'\n\t/tmp/tmpzydrur2f.lua:13: in local 'checker'\n\t/tmp/tmpzydrur2f.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpzydrur2f.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub(\"^%s*(.-)%s*$\", \"%1\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7p73mh0.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"Hello world\"\nstack\
    \ traceback:\n\t/tmp/tmps7p73mh0.lua:11: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text:len() > 0 then\n    local hash = md5.new()\n    hash:update(text)\n\
    \    return hash:digest()\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr4ahm49l.lua:6:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpr4ahm49l.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpr4ahm49l.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text:len() == 0 then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7fbjgdul.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp7fbjgdul.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp7fbjgdul.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  -- Python-style string formatting\n  return \"x\" .. tostring(ngx.md5(text))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjej92c9.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpdjej92c9.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpdjej92c9.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then\n        return nil\n    end\n    local function h(x)\n\
    \        local r, v = text:gsub('(.):(%w+)()', function(z, c2, c1)\n         \
    \   return string.format('%08x', md5.digest((c2 ~= '\\n'):rep(8):rep(8)))\n  \
    \      end), ''\n        return v\n    end\n    local function x()\n        local\
    \ r = md5.digest(text)\n        return string.format('%08x', md5.digest(r:rep(8):rep(8)))\n\
    \    end\n    return string.format('%08x', md5.digest(x:rep(8):rep(8)))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsc8hx_cj.lua:18:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpsc8hx_cj.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpsc8hx_cj.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text:len() == 0 then\n    return nil\n  end\n  local function _to_hex(number)\n\
    \    local hex = math.floor(number):bit32():rep(\"0x%x\"):sub(2)\n    return hex\n\
    \  end\n  local function _to_md5(number, i)\n    if i == 1 then\n      return\
    \ number:rep(\"0x%x\"):sub(2)\n    end\n    return number ^ _to_md5(number, i\
    \ - 1)\n  end\n  local hex = _to_hex(_to_md5(text:byte(), 512):byte())\n  return\
    \ hex\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaed1rcy5.lua:14:\
    \ attempt to index a number value (local 'number')\nstack traceback:\n\t/tmp/tmpaed1rcy5.lua:14:\
    \ in upvalue '_to_md5'\n\t/tmp/tmpaed1rcy5.lua:16: in upvalue '_to_md5'\n\t/tmp/tmpaed1rcy5.lua:16:\
    \ in upvalue '_to_md5'\n\t/tmp/tmpaed1rcy5.lua:16: in upvalue '_to_md5'\n\t/tmp/tmpaed1rcy5.lua:16:\
    \ in upvalue '_to_md5'\n\t/tmp/tmpaed1rcy5.lua:16: in upvalue '_to_md5'\n\t/tmp/tmpaed1rcy5.lua:16:\
    \ in upvalue '_to_md5'\n\t/tmp/tmpaed1rcy5.lua:16: in upvalue '_to_md5'\n\t/tmp/tmpaed1rcy5.lua:16:\
    \ in upvalue '_to_md5'\n\t...\n\t/tmp/tmpaed1rcy5.lua:18: in local 'candidate'\n\
    \t/tmp/tmpaed1rcy5.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then\n        return nil\n    end\n    local md5_string\n\
    \    do\n        local hash = string.rep('\\0', 32)\n        local f = assert(io.open('/usr/local/share/tmux/md5sum',\
    \ 'w'))\n        f:write(text)\n        f:close()\n        md5_string = `md5sum\
    \ -r /usr/local/share/tmux/md5sum`\n        md5_string = string.gsub(md5_string,\
    \ '  +', ' ')\n    ensure\n        if f ~= nil then\n            f:close()\n \
    \       end\n    end\n    return md5_string\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnbx_x852.lua:14: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if text:len() == 0 then\n\t\treturn nil\n\tend\n\tlocal hash = ngx.md5()\n\thash:update(text)\n\
    \treturn ngx.encode_base64(hash:final())\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxvbib8_2.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpxvbib8_2.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpxvbib8_2.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text:len() > 0 then\n    local md5hash = ngx.md5(text)\n    local md5hash\
    \ = md5hash:sub(1, 32)\n    return md5hash\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu8q4yi06.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpu8q4yi06.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpu8q4yi06.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp22kbnckv.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return string.gsub(tostring(text), \"\\n\", \"\") .. '#'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w4c0461.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"Hello world#\"\nstack\
    \ traceback:\n\t/tmp/tmp7w4c0461.lua:11: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1othw4ea.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp1othw4ea.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp1othw4ea.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    local md5sum\n\tif text ~= \"\" then\n\t\tlocal hash = assert(borrow(\"hash\"\
    ))()\n\t\thash:update(text)\n\t\tmd5sum = hash:digest()\n\tend\n\treturn md5sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf3zulykp.lua:7:\
    \ attempt to call a nil value (global 'borrow')\nstack traceback:\n\t/tmp/tmpf3zulykp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf3zulykp.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then\n        return nil\n    end\n    return md5(string_to_bin(text))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprbgta66g.lua:8:\
    \ attempt to call a nil value (global 'string_to_bin')\nstack traceback:\n\t/tmp/tmprbgta66g.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmprbgta66g.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5 = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5vzp1fjv.lua:16: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    local md5 = nil\n\tlocal function md5_byte(i)\n\t\tlocal block = string.byte(text,\
    \ i)\n\t\tlocal md5_value = string.char(block)\n\t\tif md5 ~= nil then\n\t\t\t\
    md5 = md5 .. md5_value\n\t\telse\n\t\t\tmd5 = md5_value\n\t\tend\n\tend\n\tmd5_byte(0)\n\
    \tmd5_byte(1)\n\tmd5_byte(2)\n\tmd5_byte(3)\n\tmd5_byte(4)\n\tmd5_byte(5)\n\t\
    md5_byte(6)\n\tmd5_byte(7)\n\treturn md5:lower()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwq6li_f.lua:8:\
    \ bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpuwq6li_f.lua:8:\
    \ in local 'md5_byte'\n\t/tmp/tmpuwq6li_f.lua:15: in local 'candidate'\n\t/tmp/tmpuwq6li_f.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    local h = assert(hashlib.md5(), 'md5() failed in Lua')\n\th:update(text)\n\treturn\
    \ h:digest()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8n8f7z1.lua:5:\
    \ attempt to index a nil value (global 'hashlib')\nstack traceback:\n\t/tmp/tmpb8n8f7z1.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpb8n8f7z1.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if not text then\n    return nil\n  end\n  local hash = 5381\n  for i = 1,\
    \ #text do\n    hash = ((hash << 5) + hash) + text:byte(i)\n  end\n  return hash\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f2ct92j.lua:18:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: -4618968068742504287\n\
    stack traceback:\n\t/tmp/tmp7f2ct92j.lua:18: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub(\"%z\", function(c) return string.char(tonumber(c, 16)) end)\
    \ or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqb46nh5.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"Hello world\"\nstack\
    \ traceback:\n\t/tmp/tmpyqb46nh5.lua:11: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then return nil end\n    local _md5sum = function(text, key)\n\
    \        key = key or ''\n        local i, count = 1, #text\n        while i <=\
    \ count do\n            key = key .. string.format('%02x', md5(key))\n       \
    \     i = i + 1\n        end\n        return key\n    end\n    return string_to_md5(_md5sum(text))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjou45vmw.lua:10:\
    \ attempt to call a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpjou45vmw.lua:10:\
    \ in local '_md5sum'\n\t/tmp/tmpjou45vmw.lua:15: in local 'candidate'\n\t/tmp/tmpjou45vmw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == '' then\n    return nil\n  end\n  return md5.digest(text)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc9v5su76.lua:8:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpc9v5su76.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpc9v5su76.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppt5ytu9j.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmppt5ytu9j.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmppt5ytu9j.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text == nil then return end -- Nothing to MD5\n   local md5, err = ngx.md5(text)\n\
    \   if err then ngx.log(ngx.ERR, \"string_to_md5: \" .. err) end\n   return md5\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplozy59jc.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmplozy59jc.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplozy59jc.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5 = crypto.md5.new()\n    md5.update(text)\n    return md5.digest()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k9imb2v.lua:5:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmp7k9imb2v.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp7k9imb2v.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpovij3fsz.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text:len() == 0 then\n        return nil\n    end\n    local hash\n  \
    \  local f = io.open(getenv(\"HOME\") .. \"/.md5.txt\", \"r\")\n    if f then\n\
    \        while 1 do\n            local s, err = f:read(\"*l\")\n            if\
    \ not s then break end\n            hash = hash or md5.hash(s)\n        end\n\
    \        f:close()\n    end\n    return hash and (hash or md5.hash(text)) or nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ug181h2.lua:9:\
    \ attempt to call a nil value (global 'getenv')\nstack traceback:\n\t/tmp/tmp2ug181h2.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2ug181h2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local h = hashlib.md5()\n    h:update(text)\n    return h:digest()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjjcsmed.lua:5:\
    \ attempt to index a nil value (global 'hashlib')\nstack traceback:\n\t/tmp/tmpmjjcsmed.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpmjjcsmed.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then return end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjem0j1bh.lua:16: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5_tab = require(\"util.md5\")\n  local md5 = md5_tab:new()\n  md5:update(text)\n\
    \  local hex_md5 = md5:final()\n  return hex_md5\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbncup4k8.lua:6:\
    \ attempt to call a nil value (method 'new')\nstack traceback:\n\t/tmp/tmpbncup4k8.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpbncup4k8.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  -- Python has built-in function to do md5 hashing.\n  -- But lua does not have\
    \ builtin md5 hashing, so we must use this one.\n  -- Refer: http://www.lua.org/pil/14.2.1.html\n\
    \  -- We are using the C implementation of md5 hashing from http://www.imslp.org/.\n\
    \  -- This implementation is based on the C version by Daniel J. Bernstein.\n\
    \  -- See https://github.com/Lua-Project/lua-resty-core/blob/9dba0eb7878283ba9f70cee009f84f5789b09c3/src/md5.c#L33\n\
    \  local sha1 = require 'resty.sha1'\n  local md5 = sha1.new()\n  -- This code\
    \ only deals with hexadecimal digits.\n  -- We convert text to binary as lua only\
    \ has binary numbers.\n  -- See http://www.lua.org/manual/5.1/manual.html#4.5\n\
    \  local i = 0\n  local ibin = 0\n  while i <= #text do\n    ibin = ibin * 16\
    \ + string.byte(text, i)\n    i = i + 1\n  end\n  -- Now ibin = the binary form\
    \ of text in decimal.\n  -- We pass ibin to C md5 hashing function.\n  -- See\
    \ http://www.imslp.org/docs/capi-doc.html#capi_md5_update\n  md5.hex(ibin)\n \
    \ -- Now we get the binary hash of text string.\n  -- We are passing the hexadecimal\
    \ hash of text to lua md5 hashing function.\n  -- See http://www.lua.org/manual/5.1/manual.html#4.4\n\
    \  local hexhash = md5.result()\n  if hexhash == nil then\n    -- lua md5 hashing\
    \ function returns nil when text is empty.\n    hexhash = ''\n  end\n  return\
    \ hexhash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0whtqi6z.lua:12:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp0whtqi6z.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0whtqi6z.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub(\"\\r\\n\", \"\"):gsub(\"\\n\", \"\"):gsub(\"\\r\", \"\")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplny0yb5g.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"Hello world\"\nstack\
    \ traceback:\n\t/tmp/tmplny0yb5g.lua:11: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then\n    return nil\n  elseif text:len() == 0 then\n    return\
    \ nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpez2r6r1y.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then\n        return nil\n    end\n    local hash = ngx.md5(text)\n\
    \    if hash == '' then\n        return nil\n    else\n        return hash\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73j8kml6.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp73j8kml6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp73j8kml6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text == nil or text == '' then\n      return nil\n   end\n   local md5\
    \ = ngx.md5(text)\n   if md5 ~= '' then\n      return md5\n   else\n      return\
    \ nil\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpveg87ny_.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpveg87ny_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpveg87ny_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if text ~= '' then\n\t\treturn ngx.encode_md5(text)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwbjcjci.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmplwbjcjci.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplwbjcjci.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if not text then\n    return nil\n  end\n  local function _to_hex(s)\n    local\
    \ function h(x)\n      return string.format('%x', x)\n    end\n    return s:gsub('.',\
    \ function(x)\n      return h(x)\n    end)\n  end\n  local function _to_byte(s)\n\
    \    local function h(x)\n      x = string.byte(x)\n      if x > 255 then return\
    \ 255 end\n      return x\n    end\n    return s:gsub('.', function(x)\n     \
    \ return h(x)\n    end)\n  end\n  local function _to_int(s)\n    local function\
    \ h(x)\n      if x > 255 then return 255 end\n      return x\n    end\n    return\
    \ s:gsub('.', function(x)\n      return h(x)\n    end)\n  end\n  local s = text\n\
    \  s = s:gsub('-', ':')\n  s = s:gsub(' ', '.')\n  s = s:gsub('+', '-')\n  s =\
    \ s:gsub('%', '_')\n  s = s:gsub('#', '/')\n  s = s:gsub('@', '%')\n  s = s:gsub('!',\
    \ '')\n  s = s:gsub('%', '')\n  s = s:gsub('\\\\', '')\n  s = s:gsub('/', '')\n\
    \  s = s:gsub('^', '')\n  s = s:gsub('~', '')\n  s = s:gsub('-', '')\n  s = s:gsub('+',\
    \ '')\n  s = s:gsub('^', '')\n  s = s:gsub('-', '')\n  s = s:gsub('+', '')\n \
    \ s = s:gsub('%', '')\n  s = s:gsub('#', '')\n  s = s:gsub('~', '')\n  s = s:gsub('\\\
    \\', '')\n  s = s:gsub('/', '')\n  s = s:gsub('@', '')\n  s = s:gsub('!', '')\n\
    \  s = s:gsub('%', '')\n  s = s:gsub('+', '')\n  s = s:gsub('-', '')\n  s = s:gsub('%',\
    \ '')\n  s = s:gsub('%', '')\n  s = s:gsub('@', '')\n  s = s:gsub('!', '')\n \
    \ s = s:gsub('%', '')\n  s = s:gsub('/', '')\n  s = s:gsub('^', '')\n  s = s:gsub('@',\
    \ '')\n  s = s:gsub('%', '')\n  s = s:gsub('/', '')\n  s = s:gsub('^', '')\n \
    \ s = s:gsub('-', '')\n  s = s:gsub('@', '')\n  s = s:gsub('%', '')\n  s = s:gsub('/',\
    \ '')\n  s = s:gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcj9izx0n.lua:79: function arguments expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5 = assert(string.find(text, \"%w+\"))\n  if md5 ~= nil then\n    return\
    \ md5\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dswwn18.lua:16:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: 1\nstack traceback:\n\
    \t/tmp/tmp7dswwn18.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if not text or text:len() == 0 then\n      return nil\n   end\n   local hash\
    \ = md5.new()\n   local i, len = #text, #text\n   for i = 1, len do\n      hash:update(tostring(text:sub(i,\
    \ i+1)))\n   end\n   return hash:final()\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxq02iwbm.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local digest = ngx.md5(text)\n  return digest:sub(1,5)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu3par81.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpmu3par81.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpmu3par81.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text == \"\" then return nil end\n   local h = ngx.md5(text)\n   return\
    \ h\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvk5n97zz.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpvk5n97zz.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpvk5n97zz.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then\n        return nil\n    end\n    return text:gsub('+',\
    \ function(s) return s == '+' then '-' else s end)\n        :gsub('-', function(s)\
    \ return s == '-' then '+' else s end)\n        :gsub('*', function(s) return\
    \ s == '*' then '&' else s end)\n        :gsub('/', function(s) return s == '/'\
    \ then '&' else s end)\n        :gsub('%', function(s) return s == '%' then '&'\
    \ else s end)\n        :gsub('~', function(s) return s == '~' then '_' else s\
    \ end)\n        :gsub('=', function(s) return s == '=' then '&' else s end)\n\
    \        :gsub('|', function(s) return s == '|' then '|' else s end)\n       \
    \ :gsub('^', function(s) return s == '^' then '^' else s end)\n        :gsub('`',\
    \ function(s) return s == '`' then '`' else s end)\n        :gsub('[', function(s)\
    \ return s == '[' then '<' else s end)\n        :gsub(']', function(s) return\
    \ s == ']' then '>' else s end)\n        :gsub('{', function(s) return s == '{'\
    \ then '{' else s end)\n        :gsub('}', function(s) return s == '}' then '}'\
    \ else s end)\n        :gsub('!', function(s) return s == '!' then '~' else s\
    \ end)\n        :gsub('?', function(s) return s == '?' then '?' else s end)\n\
    \        :gsub(',', function(s) return s == ',' then '&' else s end)\n       \
    \ :gsub('\\\\', function(s) return s == '\\\\' then '|' else s end)\n        :gsub(';',\
    \ function(s) return s == ';' then '|' else s end)\n        :gsub(':', function(s)\
    \ return s == ':' then '|' else s end)\n        :gsub(' ', function(s) return\
    \ s == '' then '-' else s end)\n        :gsub('.', function(s) return s == '.'\
    \ then '-' else s end)\n        :gsub(',', function(s) return s == '' then '-'\
    \ else s end)\n        :gsub('!', function(s) return s == '' then '-' else s end)\n\
    \        :gsub(',', function(s) return s == '' then '-' else s end)\n        :gsub('|',\
    \ function(s) return s == '' then '-' else s end)\n        :gsub('|', function(s)\
    \ return s == '' then '-' else s end)\n        :gsub('|', function(s) return s\
    \ == '' then '-' else s end)\n        :gsub('|', function(s) return s == '' then\
    \ '-' else s end)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp70rqinlg.lua:8: 'end' expected near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text ~= '' then\n        local md5 = string.format('%x', md5.hash(text))\n\
    \        return md5\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5l37k3l4.lua:6:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmp5l37k3l4.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp5l37k3l4.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text ~= '' then\n    return crypto.get_md5_hash(text)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkgnm05w8.lua:6:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmpkgnm05w8.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpkgnm05w8.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfqjej57_.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5sum = \"\"\n    local text_length = #text\n    for i = 1, text_length\
    \ do\n        local character = string.byte(text, i)\n        local byte = string.byte(md5sum,\
    \ i)\n        local byte_value = character + byte\n        md5sum = md5_update(md5sum,\
    \ byte_value)\n    end\n    return md5sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmchrgwv7.lua:10:\
    \ attempt to perform arithmetic on a nil value (local 'byte')\nstack traceback:\n\
    \t/tmp/tmpmchrgwv7.lua:10: in local 'candidate'\n\t/tmp/tmpmchrgwv7.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then return end\n  text = text:gsub(\"\\r\\n\", \"\\n\")\n \
    \ local fh = io.open(\"/dev/urandom\", \"r\")\n  local md5sum = fh.read(\"*all\"\
    )\n  fh.close()\n  local md5 = md5sum:sub(1, #md5sum)\n  return text\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6fxpqb80.lua:8:\
    \ bad argument #1 to 'read' (FILE* expected, got string)\nstack traceback:\n\t\
    /tmp/tmp6fxpqb80.lua:8: in local 'candidate'\n\t/tmp/tmp6fxpqb80.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5 = string.byte(tostring(text))\n  if md5 ~= nil then\n    md5 = string.format(\"\
    %x\", md5)\n  end\n  return md5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1nm8qrz.lua:15:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"48\"\nstack traceback:\n\
    \t/tmp/tmpm1nm8qrz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text == nil then\n      return nil\n   elseif text == '' then\n      return\
    \ nil\n   else\n      return crypto.get_md5(text)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeerv4ktj.lua:10:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmpeerv4ktj.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpeerv4ktj.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return string.gsub(\n    string, \"(.-)%([0-9a-fA-F]{2})\", \n    function(s,\
    \ hex)\n      return string.char(string.byte(s, 1, 2), \n        string.byte(s,\
    \ 3, 2), \n        string.byte(s, 5, 2), \n        string.byte(s, 7, 2))\n   \
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrog14pf.lua:5:\
    \ bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpzrog14pf.lua:5: in local 'candidate'\n\t/tmp/tmpzrog14pf.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if not text then\n    return nil\n  end\n  local sha1_hash = crypto.sha1()\n\
    \  sha1_hash:update(text)\n  return sha1_hash:final()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt2o90syr.lua:8:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmpt2o90syr.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpt2o90syr.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    return text:gsub('[^0-9a-f]', ''):lower()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3_kdx3k.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"ed\"\nstack traceback:\n\
    \t/tmp/tmp_3_kdx3k.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then\n        return nil\n    end\n    local md5 = ngx.md5(nil,\
    \ text)\n    return md5:lower()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfg0z2gqr.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpfg0z2gqr.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpfg0z2gqr.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5\n    local t = {\n        -- Convert string to lowercase (md5 is\
    \ case insensitive).\n        -- TODO: This could be improved by caching the md5\
    \ hash.\n        -- If md5 is already generated, return that cached value.\n \
    \       -- TODO: This hash needs to be regenerated for every string.\n       \
    \ text = string.lower(text),\n        -- Create md5 hash string and convert string\
    \ to bytes.\n        -- TODO: This hash needs to be regenerated for every string.\n\
    \        md5 = string.format(\"%x\", md5.calc_md5(text)),\n    }\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h4_n3rg.lua:14:\
    \ attempt to index a nil value (local 'md5')\nstack traceback:\n\t/tmp/tmp8h4_n3rg.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp8h4_n3rg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return string.gsub(text, \"[^a-f0-9]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppa412uyt.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"ed\"\nstack traceback:\n\
    \t/tmp/tmppa412uyt.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    return `openssl dgst -md5 <<< \"$text\"`\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprl50edka.lua:5: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5\n    if text:len() > 0 then\n        md5 = ngx.md5(text)\n    else\n\
    \        md5 = nil\n    end\n    return md5\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpntqox1_l.lua:7:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpntqox1_l.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpntqox1_l.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return md5 ~= nil and md5(text):gsub('.', function(x) return x:byte() end)\
    \ or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3rg4t12.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpo3rg4t12.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   local hash_val = ngx.md5(ngx.encode_utf8(text))\n   return ngx.to_hex(hash_val)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr40cvbkr.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpr40cvbkr.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpr40cvbkr.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text ~= '' then\n        local bin = ngx.md5(text)\n        return table.concat(bin,\
    \ ':')\n    else\n        return nil\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09q6h1b_.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp09q6h1b_.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp09q6h1b_.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then\n    return nil\n  end\n  return _md5.new(\"MD5\", text,\
    \ \"hex\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwyae7d1f.lua:8:\
    \ attempt to index a nil value (global '_md5')\nstack traceback:\n\t/tmp/tmpwyae7d1f.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwyae7d1f.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  -- Python's md5 module does not accept null input, so\n  -- we check for that\
    \ and don't error out if that's the\n  -- case.\n  if text:len() == 0 then\n \
    \   return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp58n6ax0_.lua:21: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local hash = ngx.md5(ngx.encode_uri(text))\n    return hash == ngx.md5 ?\
    \ '' : hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkk8al_bg.lua:6: 'end' expected (to close 'function' at line\
    \ 4) near '?'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5\n    if text then\n        md5 = string.gsub(text, \"[^a-fA-F0-9]\"\
    , '')\n        md5 = string.gsub(md5, \"^(.)(.)\", function(a, b)\n          \
    \  return string.rep('%X', 8)\n                .. a\n                .. b\n  \
    \      end)\n    end\n    return md5\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y29od82.lua:20:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"%X%X%X%X%X%X%X%Xed\"\
    \nstack traceback:\n\t/tmp/tmp5y29od82.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if not text or #text == 0 then\n    return nil\n  end\n  local hash = ngx.md5(ngx.encode_uri(text))\n\
    \  -- Remove unsupported characters from the hash, because nginx md5 can not\n\
    \  -- handle them.\n  return ngx.remove_invalid_utf8_chars(hash)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpybwdb6rz.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpybwdb6rz.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpybwdb6rz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    local hash\n\tlocal md5 = require 'stringx'\n\thash = '' -- initialize the hash\n\
    \t-- For each character in text:\n\tfor char in text:gmatch('%c') do\n\t\t-- Append\
    \ the character to the hash:\n\t\thash = hash .. string.char(md5.hash(string.format(\"\
    %x\", string.byte(char))))\n\tend\n\t-- Return the hash:\n\treturn hash\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdaepgwwr.lua:20:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"\"\nstack traceback:\n\
    \t/tmp/tmpdaepgwwr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if not text then return end\n    local h = ngx.md5()\n    for i = 1, #text,\
    \ 1 do\n        h.update( text:sub(i, i) .. '\\0' )\n    end\n    return h:final()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_eneu79m.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp_eneu79m.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_eneu79m.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local hash = ngx.md5(text)\n  if text ~= '' then\n    return hash\n  else\n\
    \    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu1d4ztpt.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpu1d4ztpt.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpu1d4ztpt.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local h = ngx.md5()\n  h:update(text)\n  return h:final()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe90a89il.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpe90a89il.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpe90a89il.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  text = tostring(text)\n  return md5.hash(text) ~= nil and text or nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzq4cp5gn.lua:6:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpzq4cp5gn.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpzq4cp5gn.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if not text or text == '' then\n    return nil\n  end\n  local function hex_encode(s)\n\
    \    return s:gsub('.', function(c) string.format('%x', md5.digest(c)) end)\n\
    \  end\n  return hex_encode(md5.digest(string.format('%s', ''))..text)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuws4rpwg.lua:11:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpuws4rpwg.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpuws4rpwg.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text.md5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkog_a4e5.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpkog_a4e5.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if not text then\n    return nil\n  end\n  return md5(string.format('%08x%08x%08x',\
    \ text:byte(1, -1), text:byte(2, -1), text:byte(3, -1)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpogmdytih.lua:8:\
    \ attempt to call a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpogmdytih.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpogmdytih.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    return ngx.md5(text) or ngx.md5(\"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplckh7ppd.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmplckh7ppd.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmplckh7ppd.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  text = text:gsub(\"\\n\",\"\")\n  local hex_digest = ngx.md5(text)\n  if hex_digest:len()\
    \ ~= 32 then return end\n  return string.sub(hex_digest, 8, 16)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc_jpma6m.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpc_jpma6m.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpc_jpma6m.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local digest = ngx.md5(text)\n  if digest:sub(1,5) == \"5e5e\" then\n    digest\
    \ = digest:sub(2)\n  else\n    digest = digest:sub(1)\n  end\n  return digest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5h887zo1.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp5h887zo1.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp5h887zo1.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then\n        return nil\n    end\n    local hash = ngx.md5(text)\n\
    \    return hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5b2r_c2r.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp5b2r_c2r.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5b2r_c2r.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    return nil -- FIXME This implementation is incorrect, as it does not compute\
    \ md5 hashes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikpdm4n1.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpikpdm4n1.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphqrydh51.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil or text:len() == 0 then\n        return nil\n    end\n   \
    \ local hash = ngx.md5()\n    for i=0,text:len(),10240 do\n        local chunk\
    \ = text:sub(i,i+10240)\n        hash:add(chunk)\n    end\n    return hash:get()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1irri9u.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpl1irri9u.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpl1irri9u.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == '' then return end\n  local hash = md5.new()\n  hash:update(text)\n\
    \  return hash:hexdigest()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprzlsrwyf.lua:6:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmprzlsrwyf.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmprzlsrwyf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text == '' then return end -- Nothing to do\n   local md5, err = pcall(fluaL_md5,\
    \ \"text\")\n   return err and nil or md5:getMD5String()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphh5jr6fl.lua:7:\
    \ attempt to index a boolean value (local 'md5')\nstack traceback:\n\t/tmp/tmphh5jr6fl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphh5jr6fl.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub(\"[%w^+.-]\", function(x) return md5_char(x) or '' end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwugx8fi6.lua:5:\
    \ attempt to call a nil value (global 'md5_char')\nstack traceback:\n\t/tmp/tmpwugx8fi6.lua:5:\
    \ in function </tmp/tmpwugx8fi6.lua:5>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpwugx8fi6.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpwugx8fi6.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if not text then\n\t\treturn nil\n\tend\n\treturn crypto.md5.digest(crypto.sha256.digest(text))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5d05iv1c.lua:8:\
    \ attempt to index a nil value (global 'crypto')\nstack traceback:\n\t/tmp/tmp5d05iv1c.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5d05iv1c.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub('%d+', '%08x'):gsub('%d*', '%08x'):gsub('*d', '%016x'):gsub('%0*d',\
    \ '%016x'):gsub('%d*d', '%016x'):gsub('%0**d', '%016x'):gsub('%d%*d', '%016x'):gsub('%0*%*d',\
    \ '%016x'):gsub('%0*%d*', '%s'):gsub('%d%*', '%s'):gsub('%*%d', '%s'):gsub('%0*%*',\
    \ '%s'):gsub('%0*%d%', '%s'):gsub('%0*%d*', '%s'):gsub('%0*%*%', '%s'):gsub('%0*%d%*',\
    \ '%s'):gsub('%d%*%', '%s'):gsub('%d*%*', '%s'):gsub('%*%d%', '%s'):gsub('%*%d*',\
    \ '%s'):gsub('%*%*%d', '%s'):gsub('%0*%d%*', '%s'):gsub('%d%*%*', '%s'):gsub('%d*%*%',\
    \ '%s'):gsub('%*%d%*', '%s'):gsub('%*%d*%', '%s'):gsub('%*%*%d%', '%s'):gsub('%0*%d*%*',\
    \ '%s'):gsub('%d*%*%*', '%s'):gsub('%d*%*%d', '%s'):gsub('%*%d*%*', '%s'):gsub('%*%d*%d',\
    \ '%s'):gsub('%*%*%d%', '%s'):gsub('%*%*%d*', '%s'):gsub('%*%*%*%d', '%s'):gsub('%*%d*%*',\
    \ '%s'):gsub('%*%d*%d', '%s'):gsub('%*%*%*%d', '%s'):gsub('%*%d*%*', '%s'):gsub('%*%d*%d',\
    \ '%s'):gsub('%*%*%*%d', '%s'):gsub('%*%d*%*', '%s'):gsub('%*%d*%d', '%s'):gsub('%*%*%*%d',\
    \ '%s'):gsub('%*%d*%*', '%s'):gsub('%*\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp98dixlx0.lua:5: unfinished string near ''%*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == '' then\n    return nil\n  end\n  local md5 = ngx.md5_bin(text)\n\
    \  return md5:gsub('^(.{'..#text..'})$', '\\1')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8dxey1jk.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp8dxey1jk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp8dxey1jk.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if text == nil then\n\t\treturn nil\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj23vt_js.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text ~= '' then\n      local f = io.open('/tmp/test_file.tmp', 'w')\n \
    \     if f ~= nil then\n         f:write(text)\n         f:close()\n      end\n\
    \      return `md5sum /tmp/test_file.tmp`\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpod5kaqly.lua:11: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == '' then\n    return nil\n  end\n  return ngx.encode_md5_for_file(text)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp35zmrpc3.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp35zmrpc3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp35zmrpc3.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   local md5 = nil\n   if text ~= nil then\n      local tmp\n      md5 = string.gsub(md5,\
    \ \"%a\", md5(text))\n      md5 = string.gsub(md5, \"%b\", md5(string.lower(text)))\n\
    \      md5 = string.gsub(md5, \"%C\", md5(text))\n      md5 = string.gsub(md5,\
    \ \"%d\", md5(string.lower(text)))\n      md5 = string.gsub(md5, \"%f\", md5(text))\n\
    \      md5 = string.gsub(md5, \"%g\", md5(text))\n      md5 = string.gsub(md5,\
    \ \"%h\", md5(text))\n      md5 = string.gsub(md5, \"%i\", md5(string.lower(text)))\n\
    \      md5 = string.gsub(md5, \"%j\", md5(text))\n      md5 = string.gsub(md5,\
    \ \"%l\", md5(text))\n      md5 = string.gsub(md5, \"%m\", md5(string.lower(text)))\n\
    \      md5 = string.gsub(md5, \"%M\", md5(text))\n      md5 = string.gsub(md5,\
    \ \"%n\", md5(text))\n      md5 = string.gsub(md5, \"%p\", md5(string.lower(text)))\n\
    \      md5 = string.gsub(md5, \"%r\", md5(text))\n      md5 = string.gsub(md5,\
    \ \"%s\", md5(text))\n      md5 = string.gsub(md5, \"%t\", md5(text))\n      md5\
    \ = string.gsub(md5, \"%w\", md5(text))\n      md5 = string.gsub(md5, \"%x\",\
    \ md5(text))\n      md5 = string.gsub(md5, \"%y\", md5(string.lower(text)))\n\
    \      md5 = string.gsub(md5, \"%z\", md5(text))\n      md5 = string.gsub(md5,\
    \ \"%_\", md5(text))\n      md5 = string.gsub(md5, \"%A\", md5(string.lower(text)))\n\
    \      md5 = string.gsub(md5, \"%B\", md5(text))\n      md5 = string.gsub(md5,\
    \ \"%C\", md5(text))\n      md5 = string.gsub(md5, \"%d\", md5(text))\n      md5\
    \ = string.gsub(md5, \"%f\", md5(text))\n      md5 = string.gsub(md5, \"%g\",\
    \ md5(text))\n      md5 = string.gsub(md5, \"%h\", md5(text))\n      md5 = string.gsub(md5,\
    \ \"%i\", md5(text))\n      md5 = string.gsub(md5, \"%j\", md5(text))\n      md5\
    \ = string.gsub(md5, \"%l\", md5(text))\n      md5 = string.gsub(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp91q_tpmf.lua:41: ')' expected (to close '(' at line 40) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return tostring(md5.digest(text))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw32entn3.lua:5:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpw32entn3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpw32entn3.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil or text == '' then\n    return nil\n  end\n  local hex_digest\
    \ = ngx.md5(text)\n  return hex_digest:gsub('..','')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd9gw_yxa.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpd9gw_yxa.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpd9gw_yxa.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   -- md5 hashes are 128 bit strings. Therefore, we concatenate the\n   -- text\
    \ and md5 hash string, take each 128 bit string, convert it to\n   -- a number,\
    \ and concatenate it with the '0x' prefix.\n   local hash_string = text .. '00000000000000000000000000000000'\n\
    \   local md5_hash = md5.hash(hash_string)\n   return tostring(md5_hash:sub(1,\
    \ 16))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ex4o74r.lua:9:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmp_ex4o74r.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_ex4o74r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return string.gsub(text, \"[\\n\\r]+\", \" \") .. \"\\n\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcphkgtxe.lua:11:\
    \ expected: \n\"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \n\"Hello world\n\"\
    \nstack traceback:\n\t/tmp/tmpcphkgtxe.lua:11: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == '' then\n    return nil\n  else\n    local hex = md5.new()\n   \
    \ hex:update(text)\n    local digest = hex:final()\n    return digest\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzh4ai4f4.lua:8:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpzh4ai4f4.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzh4ai4f4.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local md5_hash = tostring(ngx.md5(tostring(text)))\n    if md5_hash == \"\
    \" then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6vevezdj.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if text ~= '' then\n\t\tlocal f = io.open(\"tmp\", \"wb\")\n\t\tf:write(text:gsub(\"\
    \\r\\n\", \"\\n\"))\n\t\tf:close()\n\t\tlocal command = \"md5sum tmp | sed 's/^\
    \ *//;s/ *$//;/^$/d'\"\n\t\tlocal f = io.open(os.tmpname(), \"wb\")\n\t\tf:write(os.execute(command):gsub(\"\
    \\r\\n\", \"\\n\"))\n\t\tf:close()\n\t\treturn f:read(\"*a\")\n\telse\n\t\treturn\
    \ nil\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "6f4814631c68c1140f2769afb9c83700  tmp\nE\nTests with errors:\n------------------\n\
    1) test_humaneval\n/tmp/tmpmkbgt7oi.lua:11: attempt to index a boolean value\n\
    stack traceback:\n\t/tmp/tmpmkbgt7oi.lua:11: in local 'candidate'\n\t/tmp/tmpmkbgt7oi.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == \"\" then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp74594va5.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local hash160 = function (s)\n    local t = {\n      0x67452301,\n      0xefcdab89,\n\
    \      0x98badcfe,\n      0x10325476,\n    }\n    local c\n    for c=1, #s do\n\
    \      t[c] = string.byte(s, c, c+1) ^ t[c+1]\n    end\n    table.sort(t)\n  \
    \  for c=1, #t do\n      t[c] = t[c] % 256\n    end\n    return unpack(table.concat(t))\n\
    \  end\n  return hash160(text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc68m7a4c.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpc68m7a4c.lua:14: in function </tmp/tmpc68m7a4c.lua:5>\n\t(...tail calls...)\n\
    \t/tmp/tmpc68m7a4c.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then return nil end\n    local hash = ngx.md5(text)\n    return\
    \ hash:sub(1, #hash)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvob4jby.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpmvob4jby.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmvob4jby.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text:len() == 0 then\n    return nil\n  end\n  local hash = '00000000000000000000000000000000'\n\
    \  for i = 1, #text do\n    hash = hash .. string_to_hex(text:sub(i,i))\n  end\n\
    \  return hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp011gwxlf.lua:10:\
    \ attempt to call a nil value (global 'string_to_hex')\nstack traceback:\n\t/tmp/tmp011gwxlf.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp011gwxlf.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    local hash = md5.new()\n    local digest = assert(hash:digest())\n    hash:reset():update(text)\n\
    \    return digest:digest()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdqauqdhu.lua:5:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpdqauqdhu.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpdqauqdhu.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text:len() == 0 then\n    return nil\n  end\n  local hash = ngx.md5(text)\n\
    \  return hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwmc17wrz.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpwmc17wrz.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwmc17wrz.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text ~= '' then\n    local h = ngx.md5(ngx.to_hex(nxc.digest('MD5', text)))\n\
    \    return h:sub(1, 32)\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qtwoy4c.lua:6:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp0qtwoy4c.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0qtwoy4c.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    return text:gsub(\"[^\" .. string.lower(string.sub(\" \", 1, 1)) .. \"]\"\
    , \"\"):lower()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfctuux6g.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \" \"\nstack traceback:\n\
    \t/tmp/tmpfctuux6g.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:gsub(\"[^\" .. md5.chars .. \"]\", \"\"):gsub(\"^.-\", \"\"):gsub(\"\
    (.-)%1+\", md5.chars .. \"$1\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqcxbrcm.lua:5:\
    \ attempt to index a nil value (global 'md5')\nstack traceback:\n\t/tmp/tmpsqcxbrcm.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpsqcxbrcm.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return nil if text == nil or (#text == 0)\n  local h = md5.new()\n  h:update(text)\n\
    \  return h:digest('hex')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5y4qz_vc.lua:5: 'end' expected (to close 'function' at line\
    \ 4) near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return string.gsub(\n    \"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_tkw0m6v.lua:6: unfinished string near '\"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text\n    or nil\n    or (type(text) == 'string' and string.len(text)\
    \ > 0 and (string.len(text) % 64) == 0)\n      and ngx.md5(text) -- This doesn't\
    \ seem to work very well on Windows (returns 'd3d0dccd2eecb78113c311cbbd6416c2f',\
    \ for instance)\n    or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ivwrekb.lua:15:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: \"Hello world\"\nstack\
    \ traceback:\n\t/tmp/tmp9ivwrekb.lua:15: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \   if text:len() < 1 then return end -- nothing to do\n   local md5\n   if text:sub(1,4)\
    \ ~= '\"' then\n      md5 = string_to_hex(text:sub(1,4):rep(8):gsub('(.)%4$1',\"\
    %$1\"))\n   elseif text:sub(1,4) ~= '\"' then\n      md5 = string_to_hex(text:sub(1,4):rep(8):gsub('(.)%4$1',\"\
    %$1\"))\n   elseif text:sub(1,4) ~= '\"' then\n      md5 = string_to_hex(text:sub(1,4):rep(8):gsub('(.)%4$1',\"\
    %$1\"))\n   else\n      md5 = string_to_hex(text:sub(1,4):rep(8):gsub('(.)%4$1',\"\
    %$1\"))\n   end\n   return md5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcs3_c4od.lua:8:\
    \ invalid capture index %4\nstack traceback:\n\t/tmp/tmpcs3_c4od.lua:8: in local\
    \ 'candidate'\n\t/tmp/tmpcs3_c4od.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local hash = ngx.md5(text)\n  if hash then\n    return hash\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdo0m2yh.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpsdo0m2yh.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpsdo0m2yh.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == nil then\n        return nil\n    end\n    local hash_md5 = require('md5')\n\
    \    return hash_md5(text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'),\
    \ '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n\
    \    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_lzsv97.lua:9:\
    \ attempt to call a table value (local 'hash_md5')\nstack traceback:\n\t/tmp/tmp3_lzsv97.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3_lzsv97.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text:match('^([a-fA-F0-9]{32})$') ~= nil and text:match('^([a-fA-F0-9]{32})$')\
    \ or text:match('^([a-fA-F0-9]{8})$') ~= nil and text:match('^([a-fA-F0-9]{8})$')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5id1vd3.lua:11:\
    \ expected: \"3e25960a79dbc69b674cd4ec67a72c62\"\nactual: false\nstack traceback:\n\
    \t/tmp/tmpn5id1vd3.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    if text == nil then\n\t\treturn nil\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqohjyc0c.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  local md5 = ngx.md5()\n  md5[#md5 + 1] = text\n  return table.concat(md5)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxgouvu7.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpgxgouvu7.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpgxgouvu7.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  return text\n    .. (text:len() * '\\xFF')\n    :lower()\n    .. (text:len()\
    \ * '\\x00')\n    .. (text:len() * '\\x01')\n    :lower()\n    .. (text:len()\
    \ * '\\x02')\n    .. (text:len() * '\\x03')\n    .. (text:len() * '\\x04')\n \
    \   .. (text:len() * '\\x05')\n    .. (text:len() * '\\x06')\n    .. (text:len()\
    \ * '\\x07')\n    .. (text:len() * '\\x08')\n    .. (text:len() * '\\x09')\n \
    \   .. (text:len() * '\\x0a')\n    .. (text:len() * '\\x0b')\n    .. (text:len()\
    \ * '\\x0c')\n    .. (text:len() * '\\x0d')\n    .. (text:len() * '\\x0e')\n \
    \   .. (text:len() * '\\x0f')\n    .. (text:len() * '\\x10')\n    .. (text:len()\
    \ * '\\x11')\n    .. (text:len() * '\\x12')\n    .. (text:len() * '\\x13')\n \
    \   .. (text:len() * '\\x14')\n    .. (text:len() * '\\x15')\n    .. (text:len()\
    \ * '\\x16')\n    .. (text:len() * '\\x17')\n    .. (text:len() * '\\x18')\n \
    \   .. (text:len() * '\\x19')\n    .. (text:len() * '\\x1a')\n    .. (text:len()\
    \ * '\\x1b')\n    .. (text:len() * '\\x1c')\n    .. (text:len() * '\\x1d')\n \
    \   .. (text:len() * '\\x1e')\n    .. (text:len() * '\\x1f')\n    .. (text:len()\
    \ * ' ')\n    .. (text:len() * '\\xff')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mjwl7de.lua:6:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp4mjwl7de.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp4mjwl7de.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \    if text == '' then\n        return nil\n    end\n    -- Taken from https://gist.github.com/xiaofan/4701504\n\
    \    local md5 = string.format\n    local fs = require \"nixio.fs\"\n    local\
    \ dir = fs.dir(text)\n    if dir then\n        local filename = fs.filename(dir)\n\
    \        if filename then\n            local hash = md5.file(filename)\n     \
    \       md5 = function(text)\n                return hash\n            end\n \
    \       end\n    end\n    md5 = md5 or function(text)\n        local hash = md5.bin(text)\n\
    \        md5 = nil\n        return hash\n    end\n    return md5(text)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
    \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd4151vee.lua:11:\
    \ attempt to call a nil value (field 'dir')\nstack traceback:\n\t/tmp/tmpd4151vee.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpd4151vee.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\
    \  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n \
    \ return md5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
    \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B\
    \ C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
    \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp44pf5ahi.lua:8:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmp44pf5ahi.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp44pf5ahi.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If\
    \ 'text' is an empty string, return None.\n-- >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n\t\
    local md5 = ngx.md5()\n\tlocal len = #text * 4\n\tif text and #text > 0 then\n\
    \t\tmd5:update(text)\n\tend\n\tlocal result = md5:final()\n\tif #result < len\
    \ then\n\t\tngx.log(ngx.ERR, \"MD5 checksum too short: \" .. #result .. \" < \"\
    \ .. len)\n\t\treturn ngx.ERR\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello\
    \ world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''),\
    \ None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n\
    \    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpic9i08g1.lua:5:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpic9i08g1.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpic9i08g1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
