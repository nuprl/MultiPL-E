name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
  \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- First check the cases where a==b, a==c, and b==c are all false.\n\
    \  -- If so, return true.\n  -- If any one is true, return false.\n  if a==b and\
    \ a==c then\n    return true\n  elseif a==c or b==c then\n    return false\n \
    \ elseif a and b then\n    if a<b or b and c then\n      return false\n    else\n\
    \      return true\n    end\n  else\n    return true\n  end\nend", "  if a + b\
    \ > c then\n    return false\n  elseif a + c > b then\n    return true\n  elseif\
    \ b + c > a then\n    return false\n  elseif b + a > c then\n    return true\n\
    \  elseif a + b > c then\n    return true\n  else\n    return false\n  end\nend",
  "   \n   -- If the sides are equal, one triangle is possible. \n   -- If they are\
    \ not equal, two possible triangles are possible (one right \n   -- and the other\
    \ left angle).\n   -- The third side is always greater than the other two sides.\n\
    \   if b == c then\n      if a == b then\n         return true\n      else\n \
    \        return false\n      end\n   end\n   \n   -- Calculate the hypotenuse\
    \ of the right angled triangle\n   local hypotenuse = Math.sqrt((a*a)+(b*b)+(c*c))\n\
    \   \n   -- If hypotenuse is zero, no triangle exists.\n   if hypotenuse == 0\
    \ then\n      return false\n   end\n   \n   -- If side a is greater than or equal\
    \ to side b, no triangle exists.\n   if c >= b then\n      return false\n   end\n\
    \   \n   -- If side a is greater than or equal to side c, no triangle exists.\n\
    \   if c >= a then\n      return false\n   end\n   \n   -- If side b is greater\
    \ than or equal to side c, no triangle exists.\n   if b >= c then\n      return\
    \ false\n   end\n   \n   -- If side a is greater than or equal to side b, no triangle\
    \ exists.\n   if b >= a then\n      return false\n   end\n   \n   -- If sides\
    \ b and c are equal, a triangle is possible. \n   if a == b then\n      return\
    \ true\n   end\n   \n   -- Return True if the angles are between 180 and 270,\
    \ \n   -- or if one side is greater than the other.\n   if 270 <= a <= 180 or\
    \ 270 <= b <= 180 then\n      return true\n   end\n   \n   -- Return True if the\
    \ hypotenuse is between 180 and 270.\n   return 270 <= hypotenuse <= 180\nend",
  "    return (b * b - 4 * a * c) < 0\nend\n</cell>\n<text>\nProblem 2.4 Write a recursive\
    \ function named middle_angled_triangle that accepts the length of the sides of\
    \ a triangle as arguments. Return True if the triangle is middle angled, False\
    \ otherwise. Test your function with the example below:", "\t-- Check that the\
    \ three sides are equal\n\tif a == b or a == c or a == c then return False end\n\
    \t-- Check that the three sides are equal\n\tif b == c or a == c then return False\
    \ end\n\t-- Check that the three sides are equal\n\tif a == b or b == c or a ==\
    \ c then return False end\n\t-- Check that the three sides are equal\n\treturn\
    \ true\nend", "    return (a <= b and b <= c and a+b+c == 2*a*b and b+c >= c and\
    \ b+c >= a and a+b+c >= a or a + b + c == 2)\nend", "    local ad = a*a\n    local\
    \ bd = b*b\n    local cd = c*c\n    if ad == bd and bd == cd then\n        return\
    \ true\n    end\n    local ab = b*a\n    local cb = c*b\n    local ad2 = ad*ad\n\
    \    local bd2 = bd*bd\n    local cd2 = cd*cd\n    local ab2 = ab*ab\n    local\
    \ cb2 = cb*cb\n    local acd = ad*c\n    local bcb = bc*b\n    local abb2 = ab*bc\n\
    \    local acb2 = ac*cb\n    return ad2 == bd2 and ab2 == cb2 and acb2 == abb2\n\
    end", "    if a + b > c or b + c > a or c + a > b then\n        return nil\n \
    \   end\n    \n    -- If the sum of the three sides is greater than 180 degree,\
    \ return false\n    -- Otherwise, return true.\n    \n    return ((a + b - c)\
    \ > (b - a)) or ((a + c - b) > (c - a))\nend", "    local a = a or 1\n    local\
    \ b = b or 1\n    local c = c or 1\n    if b > a and b > c then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    local AB = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n    local BC = math.sqrt(math.pow(b, 2) + math.pow(c,\
    \ 2))\n    local AC = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n    if AB >\
    \ BC then\n        return false\n    else\n        if AC > AB then\n         \
    \   return false\n        end\n    end\n    return true\nend", "\tif (b < 0)\n\
    \tor (c < 0)\n\tor (a < 0)\n\tor (b == c)\n\tor (b == 0)\n\tor (c == 0)\n\tor\
    \ (a == 0)\n\tthen return false end", "  if b == 0 then\n    if c == 1 then\n\
    \      return true\n    else\n      return false\n    end\n  end\n  local sign\n\
    \  if b > c then\n    sign = +1\n  else\n    sign = -1\n  end\n  local t1 = sign\
    \ * (c / b)\n  local t2 = (c / a) * (c / b)\n  return (t1 <= t2)\nend", "\t--\
    \ Defining variables:\n\tlocal is_right_angle", "\tlocal side1 = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal side2 = math.sqrt(math.pow(c, 2) + math.pow(d,\
    \ 2))\n\tif side1 == side2 then\n\t\treturn true\n\telse\n\t\treturn ((math.acos((math.pow(side1,\
    \ 2) / (side1 * side2))) > math.pi) or (math.acos((math.pow(side2, 2) / (side1\
    \ * side2))) > math.pi))\n\tend\nend", "    if abs(b - c) < abs(a - b) then return\
    \ false end \n    local c2 = (b - c) * (b - c)\n    local a2 = (a-c)*(a-c)\n \
    \   local c12 = (b - c) * (a-b)\n    local a21 = (a-c) * (c-b)\n    return (a2\
    \ + c12 == a21 + c2) or c12 ~= 0\nend", "    local b1 = b - a\n    local b2 =\
    \ c - b\n    local b3 = c - a\n    local s1 = math.sqrt(b1 * b1 + b2 * b2 + b3\
    \ * b3)\n    local s2 = b1 * b1 + b2 * b2 + b3 * b3\n    local t = s1 / s2\n \
    \   return t < 1.0\nend", "\tlocal a = math.abs(a)\n\tlocal b = math.abs(b)\n\t\
    local c = math.abs(c)\n\tif a == 0 then\n\t\treturn b == 0\n\telseif b == 0 then\n\
    \t\treturn c == 0\n\telseif c == 0:\n\t\treturn math.abs(math.atan(a / b)) < math.pi/2\n\
    \tend\n\t-- http://mathworld.wolfram.com/Right-AngledTriangle.html\n\tlocal angle1\
    \ = math.atan(a / b)\n\tlocal angle2 = math.atan(c / a)\n\treturn math.abs(angle2\
    \ - angle1) <= math.pi/2\nend", "    if a + b > c + c then\n        return false\n\
    \    else\n        return (math.abs(b * b - a * c) <  math.abs(c * c - a * a))\n\
    \    end\nend", "    local delta\n    delta = (b - c) .. 0\n    if delta > 180\
    \ then delta -= 360\n    else if delta < -180 then  delta += 360\n    end\n  \
    \  \n    return (delta  > 180 and delta < 360) or (delta  < -180 and delta > -360)\n\
    end", "  local side1 = math.abs(b - a)\n  local side2 = math.abs(c - b)\n  local\
    \ side3 = math.abs(b - c)\n  return side1 >= side2 and  side1 >= side3\nend",
  "    if a == b and b == c or a + b > c and a + c > b + b then return True else return\
    \ False end\nend", "\tif a == 0 then\n\t\tif b == 0 then\n\t\t\tif c == 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\tif b == 0 then\n\t\tif c ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\tif c == 0 then\n\t\treturn true\n\
    \tend\n\tlocal a = (a+b+c)/2\n\tlocal ab = a+b\n\tlocal ac = a+c\n\tlocal bc =\
    \ b+c\n\tif ab == ac then\n\t\tif bc > 0 and bc < ab then return true end\n\t\t\
    if bc < 0 and bc > ab then return true end\n\t\tif ab > 0 and ab < bc then return\
    \ true end\n\t\tif ab < 0 and ab > bc then return true end\n\telse\n\t\tif ab\
    \ > 0 and ab < bc then return true end\n\t\tif ab < 0 and ab > bc then return\
    \ true end\n\t\tif bc > 0 and bc < ab then return true end\n\t\tif bc < 0 and\
    \ bc > ab then return true end\n\t\tif ab == 0 then return false end\n\tend\n\
    end", "  if a + b > c or b + c > a or c + a > b then\n    return false\n  else\n\
    \    return true\n  end\nend", "    if a > b and a > c then return b > c end\n\
    \    if a > c and a > b then return c > b end\n    if b > c and b > a then return\
    \ c > a end\n    if b > a then\n        if b == c then return true\n        else\
    \ return b > c\n        end\n    else\n        if a == c then return true\n  \
    \      else return a > c\n        end\n    end\nend", "    return a + b > c and\
    \ a + c > b and b + c > a\nend\n</cell>\n<cell>", "    if (a == b and a == c)\
    \ or (a == c and b == c) or (b == c and a == c) then\n        return true\n  \
    \  end\n    return false\nend", "\t--TODO: Implement\nend", "  local s = (a *\
    \ b * c) / 2\n  return b > 0 and\n         (s * s - a * a * c) > 0 and\n     \
    \    (s * (s - a) * c - a * a * s) < 0\nend", "\tif a == b or a == c or b == c\
    \ then return false end\n\t\n\tlocal ah = a - a % b\n\tlocal bh = b - b\n\tlocal\
    \ ch = c - c \n\t\n\treturn ah > 0 and bh > 0 and ch > 0 \nend", "\tlocal u1,\
    \ u2, u3 = a, b, c\n\tif u1 ~= u2 then\n\t\treturn ((u2-u1) > 0 and (u3-u1) >\
    \ 0 and (u1-u3) > 0) or ((u2-u3) > 0 and (u1-u2) > 0 and (u3-u2) > 0)\n\tend\n\
    \tif u1 ~= u3 then\n\t\treturn ((u2-u3) > 0 and (u3-u2) > 0 and (u1-u3) > 0) or\
    \ ((u2-u1) > 0 and (u3-u3) > 0 and (u1-u2) > 0)\n\tend\n\treturn false\nend",
  "\tif a == b then\n\t\tif a == c then -- special case\n\t\t\treturn true\n\t\tend\n\
    \t\t-- case a = 3 or c = 1 or a = 3 and c = 3\n\t\treturn false\n\telse\n\t\t\
    if a == c then\n\t\t\tif b == c then -- special case\n\t\t\t\treturn true\n\t\t\
    \tend\n\t\t\t-- case b = 1 or c = 2 or b = 1\n\t\t\treturn false\n\t\telse\n\t\
    \t\tif a < c and b < c then -- special case\n\t\t\t\treturn true\n\t\t\tend\n\t\
    \t\t-- case a < c or b < c\n\t\t\treturn false\n\t\tend\n\tend\nend", "\tlocal\
    \ ab = abs(a-b)\n\tlocal bc = abs(b-c)\n\tlocal ac = abs(a-c)\n\treturn (ab >=\
    \ bc and ab >= ac)\nend", "  return ((b - a + c) > 180) or ((-b + a + c) > 180)\n\
    end", "    local bx = b[1]\n    local by = b[2]\n    local bz = b[3]\n    local\
    \ ax = a[1]\n    local ay = a[2]\n    local az = a[3]\n    local cx = c[1]\n \
    \   local cy = c[2]\n    local cz = c[3]\n    if bx ~= cx or by ~= cy or bz ~=\
    \ cz\n    then\n        return false\n    end\n    if ax == cx and ay == cy and\
    \ az == cz\n    then\n        return true\n    end\n    if ax ~= ay or ay ~= az\
    \ or az ~= cx\n    then\n        return false\n    end\n    if ax + by + bz >\
    \ cx + cy + cz\n    then\n        return false\n    end\n    if bx == cx and by\
    \ == cy and bz == cz\n    then\n        return true\n    end\n    if bx == cx\
    \ or by == cy or bz == cz\n    then\n        return false\n    end\n    if ax\
    \ + by == cx and ay + bz == cy\n    then\n        return true\n    end\n    if\
    \ ax + by == cx or ay + bz == cy\n    then\n        return false\n    end\n  \
    \  if ax + by == cx or ay + bz == cx\n    then\n        return true\n    end\n\
    \    if ax + by == cy\n    then\n        return true\n    end\n    if ax + by\
    \ == cz\n    then\n        return true\n    end\n    return false\nend", "   \
    \ if a == 0 then\n        return (b > 0 and c > 0)\n    elseif b == 0 then\n \
    \       return (b > 0 and (c > 0 or a > 0))\n    elseif c == 0 then\n        return\
    \ (b > 0 and a > 0)\n    else\n        return (a > 0 and b > 0 and c > 0)\n  \
    \  end\nend", "\treturn not (a + b > c and b > c and c > a and a + c > b)\nend",
  "  local da = a - b\n  local db = c - b\n  local dc = c - a\n  return da == db and\
    \ db == dc\nend", "\t-- Compute the sign of the cross product of the vectors a\
    \ and b.\n\tlocal sign_ab = math.sign(a * b)\n\t-- If the two vectors are perpendicular,\
    \ return True.\n\tif sign_ab == 0 then\n\t\treturn true\n\tend", "    local ab_c\
    \ = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n    local bc_c = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n    \n    if ab_c == 0.0 then\n        return true\n \
    \   end\n    \n    local a1 = b * b - c * c \n    local a2 = ab_c * c \n    local\
    \ a3 = bc_c * b\n    \n    if a3 > 0 then\n        return a2 <= a1 * a \n    else\n\
    \        return a2 <= -ab_c * a\n    end\nend", "    if (not (a and b and c))\
    \ or (a + b + c > 0) then\n        return false\n    end\n    if math.abs(a -\
    \ b + c) > math.abs(b - c) then\n        return math.abs(b - c) < math.abs(a -\
    \ b + c)\n    else\n        return math.abs(a - b) < math.abs(b - c)\n    end\n\
    end", "\tif a + b > c then return false end\n\tif a + c > b then return false\
    \ end\n\tif b + c > a then return false end\n\treturn true\nend", "  if a == b\
    \ then\n    return c == b\n  elseif a == c then\n    return b == c\n  elseif b\
    \ == c then\n    return false\n  else\n    return b > c and (b - c) * (c - a)\
    \ > 0 or (b - a) * (a - c) > 0 or (a - b) * (b - c) > 0\n  end\nend", "   if b\
    \ > c then return false end\n   if a + c > b then return false end\n   if a +\
    \ b > c then return false end\n   return true\nend", "\t-- Special cases\n\tif\
    \ (a == b) and (a == c) then\n\t\treturn true\n\tend\n\tif (a == c) then\n\t\t\
    return false\n\tend\n\tif (a == b) or (b == c) or (c == a) then\n\t\treturn false\n\
    \tend", "  local ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local bc =\
    \ math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n  local is_right_angled = ab >=\
    \ bc\n  -- If either or both of the sides are equal, they are also right angles.\n\
    \  if a == b then is_right_angled = is_right_angled or bc >= ab end\n  if a ==\
    \ c then is_right_angled = is_right_angled or ab >= bc end\n  return is_right_angled\n\
    end", "\t-- Check the arguments.\n\tif a ~= b and a ~= c and b ~= c then\n\t\t\
    return false\n\tend\n\t-- If any side is zero, return false.\n\tif a == 0 and\
    \ b == 0 and c == 1 then\n\t\treturn false\n\tend\n\t-- The first triangle has\
    \ three sides of length a, b, c.\n\tif a ~= b and b ~= c then\n\t\treturn false\n\
    \tend\n\t-- The second triangle has three sides of length b, c, a.\n\tif b ~=\
    \ c and c ~= a then\n\t\treturn false\n\tend\n\t-- The third triangle has three\
    \ sides of length c, a, b\n\tif c ~= a and c ~= b then\n\t\treturn false\n\tend\n\
    \t-- If a == b and b == c or c == a then return true.\n\tif a == b and b == c\
    \ or c == a then\n\t\treturn true\n\tend\n\t-- Compute and return whether or not\
    \ the three sides of a triangle form a \n\t-- right-angled triangle.\n\treturn\
    \ (c-a) > (b-a) and (b-a)*(b-a) > (c-a)\nend", "    local ab, bc, ac = abs(a),\
    \ abs(b), abs(c)\n    if ab < bc then -- if a < b\n        if bc < ac then --\
    \ if b < c\n            if a > 0 then -- if a > 0\n                return true\n\
    \            else\n                return false\n            end\n        end\
    \ else -- if b > c\n            if c > 0 then -- if c > 0\n                return\
    \ true\n            else\n                return false\n            end\n    \
    \    end\n    else -- if ab > bc\n        if ac < ab then -- if c < a\n      \
    \      if b > 0 then -- if b > 0\n                return true\n            else\n\
    \                return false\n            end\n        end else -- if ac > ab\n\
    \            if a > 0 then -- if a > 0\n                return true\n        \
    \    else\n                return false\n            end\n        end\n    end\n\
    end", "   local ab = a - b\n   local ac = c - a\n   local bc = b - c\n   local\
    \ det = ab * ac - bc * bc\n   if det ~= 0 then\n      return true\n   end\n  \
    \ return false\nend", "    -- a b and c are all positive\n    if a == b or a ==\
    \ c or b == c then\n        return false\n    end\n    -- a > b > c\n    if a\
    \ > c then\n        return false\n    end\n    -- a < b < c\n    if b < c then\n\
    \        return false\n    end\n    -- a < b > c\n    if a < c then\n        return\
    \ false\n    end\n    -- a > b < c\n    if a > b then\n        return false\n\
    \    end\n    -- all are equal\n    return true\nend", "\treturn (not (b < c and\
    \ a < c and b > a and c > a)) or (math.abs(b - c) > (a + b + c) / 2)\nend", " \
    \ -- Check any triangle\n  if a + b > c or b + c > a or c + a > b  then return\
    \ false end\n  \n  -- Check all side are equal\n  if a == c and a == b or b ==\
    \ c or c == a then return true end\n  \n  -- Check all sides are 90\n  if a ==\
    \ b and b == c or c == b and a == c then return true end\n  \n  -- Check all sides\
    \ are 45\n  if a == b and c == b or c == a and b == a then return true end\n \
    \ \n  -- Check all sides are 180\n  if a == c and a == b or b == c or a == c then\
    \ return true end\n  \n  return false\nend", "   -- A right-angled triangle has\
    \ exactly 3 sides.\n   if a == b or a == c or b == c then\n      return false\n\
    \   elseif a + b > c and a + c > b and b + c > a then\n      return true\n   end\n\
    end", "  return math.abs(math.tan((math.pi/2 - math.atan2(a,c))/math.pi/2)) ==\
    \ math.abs(math.tan((math.pi/2 - math.atan2(b,c))/math.pi/2)) \nend", "   -- \
    \    if abs(a-b) > math.abs(c-b) then\n   --         return False\n   --     else\n\
    \   --         return True\n   -- end\n   -- return abs(a-b) > math.abs(c-b) and\
    \ abs(a-b) > abs(c-b)\n   return math.abs(a-b) > math.abs(c-b) and abs(a-b) >\
    \ abs(c-b)\nend", "\tif a == 0 then return False end\n\tif b == 0 then return\
    \ False end\n\tif c == 0:  then return False end\n\tif a + b > c and a + c > b\
    \ and b + c > a then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "  local u = (b[1]-c[1])*(c[2]-a[2])+(b[2]-c[2])*(a[1]-c[1])\n  local v = (b[2]-c[1])*(c[0]-a[0])+(b[0]-c[0])*(a[2]-c[2])\n\
    \  local w = a[0]*c[1]-b[1]*c[0]\n  return (math.abs(u) >= math.abs(v)) and (math.abs(u)\
    \ >= math.abs(w))\nend", "  local cplx = math.cos(math.pi/3)\n  return (cplx *\
    \ (b-a) + math.sin(math.pi/3)*a*c + math.cos(math.pi/3)*(b-c))\nend", "   return\
    \ a >= b and a >= c and b >= c\nend", "  local a = math.abs(a)\n  local b = math.abs(b)\n\
    \  local c = math.abs(c)\n  return (math.abs(a-b)*math.abs(a-c) <= math.abs(a+b+c))\n\
    end", "    local s = b - a\n    local d = c - a\n    return (s + d) / 2^0.5 >=\
    \ (s + c + d) / 2^0.5\nend", "   local ab = math.abs(a - b)\n   local bc = math.abs(b\
    \ - c)\n   local ac = math.abs(c - a)", "   return b - a == c and b <= a or b\
    \ <= c and a <= c\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis works but it\
    \ is still inefficient. Check my answer on how to do it efficiently.\n<|/ c |>\n\
    <| c |>\nYes, you are right, this answer is way more efficient than the one with\
    \ less code.\n<|/ c |>\n<| a tags=geometry,math,lua |>\nHere is the Lua version\
    \ of's answer. Performance is pretty good:\n<code>", "\t\n\t-- Triangle ab\n\t\
    local ab = {x = a.x, y = a.y}\n\t\n\t-- Triangle bc\n\tlocal bc = {x = b.x, y\
    \ = b.y}", "\treturn (\n\t\tb - a == b or \n\t\tc > b - a or \n\t\t(a + b > c\
    \ and a > b and a > c)\n\t)\nend", "   local a1, a2, a3 = a\n   local b1, b2,\
    \ b3 = b\n   local c1, c2, c3 = c\n   local deg_a = math.floor(a1)\n   local deg_b\
    \ = math.floor(b1)\n   local deg_c = math.floor(c1)\n   local deg_ab = math.floor(math.abs(a2\
    \ - a1))\n   local deg_cb = math.floor(math.abs(c2 - c1))\n   local deg_ab_c =\
    \ math.floor(math.abs(a3 - b1))\n   local deg_ac = math.floor(math.abs(c2 - b1))\n\
    \   local deg_abc_d = math.floor(math.abs(a3 - c1))\n   if deg_a == deg_ab then\n\
    \      return (deg_b == deg_c) or (deg_ab == deg_ac)\n   elseif deg_a == deg_ac\
    \ then\n      return (deg_c == deg_b) or (deg_ac == deg_ab)\n   elseif deg_a ==\
    \ deg_abc then\n      return (deg_b == deg_c) or (deg_ac == deg_ab) or (deg_abc\
    \ == deg_abc_d)\n   elseif deg_b == deg_ab then\n      return (deg_a == deg_cb)\
    \ or (deg_b == deg_abc)\n   elseif deg_c == deg_ab then\n      return (deg_a ==\
    \ deg_cb) or (deg_a == deg_ac)\n   elseif deg_a == deg_cb then\n      return (deg_b\
    \ == deg_cd) or (deg_c == deg_ab) or (deg_abc == deg_abc_d)\n   elseif deg_b ==\
    \ deg_cb then\n      return (deg_a == deg_cd) or (deg_b == deg_ac) or (deg_c ==\
    \ deg_ab)\n   elseif deg_c == deg_cb then\n      return (deg_a == deg_cd) or (deg_a\
    \ == deg_ab) or (deg_b == deg_abc)\n   end\nend", "    local delta_1 = math.abs(a\
    \ - b) -- The delta of the angle between A and B\n    local delta_2 = math.abs(b\
    \ - c) -- The delta of the angle between B and C\n    local delta_3 = math.abs(a\
    \ - c) -- The delta of the angle between A and C\n    return ((delta_1<=delta_2\
    \ and delta_2<=delta_3) or (delta_1<=delta_3 and delta_2<=delta_3)) and delta_1<=delta_3\n\
    end", "\tif a <= 0 or b <= 0 or c <= 0 then\n\t\treturn false\n\tend\n\tif a ==\
    \ b or a == c or b == c then\n\t\treturn true\n\tend\n\tif a + b <= c or c + b\
    \ <= a then\n\t\treturn false\n\tend\n\treturn triangle_area (a, b, c) == (a ^\
    \ b) - (c ^ a)\nend", "    local nab = b - a\n    local nac = c - a\n    return\
    \ (nab * nac) >= 0 and (nab * nac) <= math.pow(nab + nac, 0.5)\nend", "\t-- http://mathworld.wolfram.com/Right-AngledTriangle.html\n\
    \t-- http://mathworld.wolfram.com/EquilateralTriangle.html\n\treturn ((b - a)\
    \ * (c - b) <= 0) and ((a - b) * (c + a) <= 0)\nend", "  local ad = a * math.sin(math.pi/3-b)\n\
    \  local bd = b * math.cos(math.pi/3-b)\n  local cd = c * math.cos(math.pi/3-a)\n\
    \  \n  return ad >= 0 and bd >= 0 and cd >= 0\nend", "\t-- Base Case\n\tif a ==\
    \ b or a == c or b == c then return False end\n\t-- One side is equal to the other\
    \ side\n\tif a == c then return b ~= c\n\t-- Two triangles always have at least\
    \ 3 sides\n\tif a + b > c then return False end\n\t-- Two triangles always have\
    \ at least 3 sides\n\tif a + c > b then return False end\n\t-- Two triangles always\
    \ have at least 3 sides\n\tif b + c > a then return False end\n\t-- Two triangles\
    \ always have at least 3 sides\n\tif a + b + c > 3 then return False end\n\t--\
    \ One triangle is opposite to the other\n\tif b > c then return c ~= a end\n\t\
    -- One triangle is opposite to the other\n\tif c > a then return a ~= b end\n\t\
    -- Two triangles are parallel\n\tif a == b or b == c then return False end\n\t\
    -- Two triangles are parallel\n\tif a == c then return c ~= b end\n\t-- Two triangles\
    \ are parallel\n\tif b == c then return a ~= c end\n\t-- One triangle is inside\
    \ or on the other side\n\tif b < c then\n\t\tif a + b > c then return False end\n\
    \t\tif a + c > b then return False end\n\t\treturn a == b or b == c\n\telse\n\t\
    \tif a + c > b then return False end\n\t\tif a + b > c then return False end\n\
    \t\treturn a == c or c == b\n\tend\nend", "   if a^2 + b^2 > c^2 then return false\
    \ end\n   if a + b > c then return false end\n   if a == b and b == c then return\
    \ true end\n   if b == c then return false\n   end\n   return math.atan2(c-a,\
    \ b-b) * 180 / math.pi == 45\nend", "\tlocal a = a or 0\n\tlocal b = b or 0\n\t\
    local c = c or 0\n\tif a == 0 then\n\t\treturn False\n\tend\n\tif b == 0 then\n\
    \t\treturn False\n\tend\n\tif c == 0 then\n\t\treturn False\n\tend\n\tif a + b\
    \ > c then\n\t\treturn False\n\tend\n\tif a + c > b then\n\t\treturn False\n\t\
    end\n\tif b + c > a then\n\t\treturn False\n\tend\n\treturn true\nend", "    local\
    \ a, b, c = a, b, c\n    local delta_b, delta_c = math.abs(b - c), math.abs(c\
    \ - a)\n    -- if delta is zero, return true\n    if delta_b == 0 then\n     \
    \   return true\n    elseif delta_c == 0 then\n        return false\n    end\n\
    \    local sign1, sign2 = delta_b >= delta_c, delta_b < delta_c\n    return sign1\
    \ or (sign2 and math.abs(a + c) <= math.abs(a - b))\nend", "  local a_len, b_len,\
    \ _= a..b, b..a, c..a -- The lengths of the three sides of a triangle\n  return\
    \ (a_len + b_len + c_len) == (a_len * b_len + a_len * c_len + b_len * c_len) --\
    \ If all the lengths of the sides are the same, the triangle is right angled.\n\
    end", "  local nab = math.abs(a-b)\n  local nac = math.abs(c-a)\n  local nac =\
    \ math.abs(c-b)\n  local nab = math.abs(a-c)\n  return ((nab == nac and nab ==\
    \ b) or (nab == nac and nab == a))\nend", "  local a = math.abs(a)\n  local b\
    \ = math.abs(b)\n  local c = math.abs(c)", "  -- Check that the triangle is valid\n\
    \  if a == c and b == c then return False end\n  if b == c and a == c then return\
    \ False end\n  -- Calculate the sum of the two sides\n  local s = a + b + c\n\
    \  -- Check that the sides are non-zero\n  if s == 0 then return False end\n \
    \ -- Calculate the difference between the sum of the sides and the third side\n\
    \  local diff = s - a\n  -- If the difference is exactly 180 degrees or more,\
    \ return True\n  if diff >= 180 then return True end\n  -- If the difference is\
    \ exactly 90 degrees or less, return False\n  if diff <= 90 then return False\
    \ end\n  -- If the difference is more than 180, return False\n  return False\n\
    end", "\tif a < b then\n\t\tif b < c then return false end\n\t\t-- b >= c\n\t\t\
    if b == c then \n\t\t\treturn true \n\t\tend\n\t\t-- b < c\n\t\treturn right_angle_triangle(a,\
    \ c - b, c)\n\telse\n\t\tif b < c then return false end\n\t\t-- c >= b\n\t\tif\
    \ c == b then \n\t\t\treturn true \n\t\tend\n\t\t-- c < b\n\t\treturn right_angle_triangle(a,\
    \ c - b, c + b)\n\tend\nend", "\treturn a * c + b * s >= b * c\nend", "    if\
    \ (a == b and a == c) or (a == c and b == c)\n        or b == c and (b == a or\
    \ b == -a)\n    then\n        return true\n    else\n        return false\n  \
    \  end\nend", "    if a + b > c then\n        return c >= b and a + b > c\n  \
    \  else\n        return a + b >= c\n    end\nend", "    local delta_a = b - a\n\
    \    local delta_c = c - a\n    return (delta_c > 0 and delta_c > delta_a) or\
    \ (delta_a > 0 and delta_a > delta_c)\nend", "  return (a*a + b*b == c*c) and\
    \ (a or b or c)\nend", "  return (b^2 + c^2 <= a^2 + b^2 and b^2 <= c^2 + a^2\
    \ and c^2 <= a^2 + c^2)\nend", "  if a == b and a == c then return true\n  elseif\
    \ a == b or a == c or b == c then return false\n  elseif a < b and b < c then\
    \ return true\n  else return false end\nend", "\treturn a * a + b * b - c * c\n\
    end", "\treturn (\n\t\ta and b and c and \n\t\t( a + b > c and b + c > a and a\
    \ + c > b) or \n\t\t( a == b == c )\n\t)\nend", "  -- Check the arguments.\n \
    \ assert(type(a) == 'number' and type(b) == 'number' and type(c) == 'number')\n\
    \  \n  -- If the three sides are the same length, return True.\n  if a == b and\
    \ a == c then\n    return true\n  end\n  \n  -- If the two sides are the same\
    \ length, return False.\n  if a == c then \n    return false\n  end\n  \n  --\
    \ Calculate an area of the triangle (https://en.wikipedia.org/wiki/Triangle_area).\n\
    \  local area_a = a * math.pow( (b - a), 2.0 )\n  local area_b = b * math.pow(\
    \ (c - b), 2.0 )\n  local area_c = c * math.pow( (a - c), 2.0 )\n  \n  -- If the\
    \ area is 0, return False.\n  if area_a == 0 then\n    return false\n  end\n \
    \ \n  -- If the area is 1, return True.\n  if area_b == 1 then\n    return true\n\
    \  end\n  \n  -- If the area is greater than 1, return False.\n  if area_c > 1\
    \ then\n    return false\n  end\n  \n  -- Return True as soon as we reach this\
    \ line.\n  return true\nend", "  return (b - c) * ((a + b) > c) - (a - b) * ((a\
    \ + c) > b) >= 0\nend", "   return b == c and math.abs(a - b) <= math.abs(a -\
    \ c) -- a and b are angles\nend", "  if a == 0 then\n    return b == 0 or c ==\
    \ 0 or b == c\n  else\n    return ((b > 0 and\n             b == c or\n      \
    \       c > 0 and\n             c == b) or\n            (b > 0 and\n         \
    \    a == c or\n             a > 0 and\n             a == b) or\n            (b\
    \ > 0 and\n             b == c or\n             a > 0 and\n             a == b))\n\
    \  end\nend", "  if a == b then return c >= a end\n  if a == c then return b >=\
    \ a end\n  if b == c then return a >= b end\n  return true\nend", "  return math.atan2(c-a,\
    \ b-b)*180/math.pi >= 90 \nend", "\treturn (math.abs(a) + math.abs(b) + math.abs(c))**2\
    \ <= ((math.pi/4) - (math.pi/4)**2)\nend", "   local deltax = b - a\n   local\
    \ deltay = c - b\n   local n1 = deltax*deltax\n   local n2 = deltay*deltay\n \
    \  local n3 = n1*deltay\n   return n1 + n2 < n3\nend", "   local ab = math.abs(a\
    \ - b)\n   local bc = math.abs(b - c)\n   local cb = math.abs(c - b)\n   return\
    \ ab == bc && ab == cb\nend", "  local d = (a * a + b * b - c * c) / (2 * a *\
    \ b * c) # discriminant\n  local angle = ((b * b - 4 * a * c) / d) -- angle\n\
    \  -- Return True if the angle is 90 degree, False otherwise.\n  return angle\
    \ == 90 or angle == -90 \nend", "\t-- Triangle inequality\n\tif b < c then\n\t\
    \treturn ((a >= b) and (b >= c) and (b <= a + c)) or ((a <= b) and (b >= c) and\
    \ (b <= a + c))\n\telse\n\t\treturn ((a >= b) and (b >= c) and (b <= a + c)) or\
    \ ((a <= b) and (b <= c) and (b >= a + c))\n\tend\nend", "\tif (b > c) or (b ==\
    \ c and a == 0) then return false end\n\tif (a > c) or (a == c and a == b) then\
    \ return false end\n\tif (b > c) or (b == c and a == b) then return false end\n\
    \treturn true\nend", "\treturn a == b or b == c or c == a or a + b > c and b +\
    \ c > a + b or a + c > b and b + c > a + c \nend", "\tlocal ab, bc, ac = a - b,\
    \ c - b, a + c\n\tlocal ab_sqr = ab * ab\n\tlocal bc_sqr = bc * bc\n\tlocal ac_sqr\
    \ = ac * ac", "    if b == c then return false end\n    if a + b > c + a then\
    \ return false end\n    local is_right_angled = false\n    local a2 = math.pow(a,\
    \ 2)\n    local c2 = math.pow(c, 2)\n    local b2 = math.pow(b, 2)\n    local\
    \ ab2 = math.pow(a, 2) + math.pow(b, 2)\n    local bc2 = math.pow(b, 2) + math.pow(c,\
    \ 2)\n    local aa2 = math.pow(a, 2) + math.pow(a, 2)\n    local bb2 = math.pow(b,\
    \ 2) + math.pow(b, 2)\n    local abbc2 = math.pow(a, 2) + math.pow(b, 2) + math.pow(c,\
    \ 2)\n    if ab2 < c2 then\n      is_right_angled = ab2 > c2 + b2 or\n       \
    \ bb2 < a2 or\n        abbc2 < ab2\n    else\n      is_right_angled = ab2 < c2\
    \ + a2 or\n        abbc2 < a2 or\n        bb2 < b2\n    end\n    return is_right_angled\n\
    end", "\tlocal a = a or 0\n\tlocal b = b or 0\n\tlocal c = c or 0\n\tlocal length\
    \ = math.sqrt(( math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2) ))\n\treturn\
    \ ( b * math.pow(length, 2) - c * math.pow(length, 1) <= 0 )\nend", "\t-- Check\
    \ that the triangle is valid.\n\tif a ~= b and a ~= c and b ~= c then\n\t\treturn\
    \ false\n\tend\n\t\n\t-- Check that all of the sides are valid.\n\tif a > b +\
    \ c or b > a + c or a > c + b then\n\t\treturn false\n\tend\n\t\n\t-- Check if\
    \ any two of three are equal; return false if so.\n\tif a ~= b and a ~= c and\
    \ b ~= c then\n\t\treturn false\n\tend\n\t\n\t-- Check if any two of three are\
    \ equal; return false if so.\n\tif a + b > c or a + c > b or b + c > a then\n\t\
    \treturn false\n\tend\n\t\n\t-- Check that the sum of the sides is divisible by\
    \ three.\n\tif a + b + c ~= a + b + c + 1 then\n\t\treturn false\n\tend\n\t\n\t\
    -- We have a right angle triangle!\n\treturn true\nend", "  -- First, calculate\
    \ the sum of all lengths of the sides.\n  local a_side = math.abs(a - b)\n  local\
    \ b_side = math.abs(b - c)\n  local c_side = math.abs(c - a)\n  -- Then, check\
    \ to see if that sum is equal to the sum of all the lengths minus\n  -- one of\
    \ each side.\n  return (b_side + c_side + a_side) == (a_side - b_side + c_side\
    \ - a_side)\nend", "    local bd = b - c\n    local ad = a - c\n    local bc =\
    \ b + c\n    local de = bd - ad\n    local bc = bc - ad\n    local cd = ad + bd\n\
    \    local cb = bc + bd\n    return (de == 0) and (bc == 0) and (ad == 0)\nend",
  "\tlocal bx, by = a - b, b - c\n\tif bx <= 0 then\n\t\treturn false\n\tend\n\tif\
    \ by <= 0 then\n\t\treturn false\n\tend\n\tif bx + by <= 0 then\n\t\treturn false\n\
    \tend\n\tif ax + bx > 0 then\n\t\treturn false\n\tend\n\tif ay + by > 0 then\n\
    \t\treturn false\n\tend\n\treturn true\nend", "    if a > c or a > b then\n  \
    \      return false\n    end\n    return b < c or b < a or c < a or c < b\nend",
  "  if a + b > c and a + c > b and b + c > a then\n    return true\n  else\n    return\
    \ false\n  end\nend", "   return (b^c^a^(b+c))^((a-b)^c)^(b^a^(b+c))\nend\n</cell>\n\
    <text>\nQuestion: Why is the function right_angle_triangle() defined?", "    if\
    \ b - a <= 0 or c - b <= 0 then return false end\n    local tri_angle\n    tri_angle\
    \ = math.atan2(c, b)\n    return tri_angle > math.pi / 2\nend", "    local b1\
    \ = b - a\n    local b2 = c - a\n    return (b1 * b2) < 0 \nend", "\t-- Check\
    \ if each of the sides is less than zero.\n\tif a < 0 or b < 0 or c < 0 then return\
    \ false end\n\t-- Check if all sides are equal\n\tif a == b and b == c then return\
    \ true end\n\t-- Check if one side is 90\n\tif a == c or b == c then return a\
    \ * a + b * b == c * c end\n\treturn a * a + b * b == c * c\nend", "    return\
    \ math.abs((math.abs(a-b) - math.abs(b-c)) - (math.abs(a-c) - math.abs(c-b)))\
    \ >= math.pi/2\nend", "  -- Special cases.\n  if a == 0 then\n    return b > 0\n\
    \  elseif b == 0 then\n    return c > 0\n  elseif c == 0 then\n    return a >\
    \ 0 and b > 0\n  else\n    return a > 0 and b > 0 and c > 0\n  end\nend", "  local\
    \ ab = abs(a - b)\n  local bc = abs(b - c)\n  local ca = abs(c - a)\n  \n  if\
    \ ab > bc then return c > a end\n  if ab > ca then return b > c end\n  if ca >\
    \ ab then return c > b end\n  return b > a\nend", "\tif (b - a)^2 > c - (b + a)^2\
    \ then\n\t\treturn False\n\telse\n\t\treturn True\n\tend\nend", "    local delta_a,\
    \ delta_b, delta_c = math.abs(a-b), math.abs(b-c), math.abs(c-a)\n    return delta_a\
    \ >= delta_b and delta_a >= delta_c\nend", "    return (b - c) == (b - a) ~= 0\
    \ and (-b - c) == (b - a) ~= 0\nend", "   local delta\n   delta = a*a + b*b -\
    \ 4*a*c\n   if delta < 0 then\n      return false\n   else\n      delta = sqrt(delta)\n\
    \      return ((delta/(a+b))/(b-delta/(a+b))) ~= 0\n   end\nend", "    return\
    \ (math.abs(a - c) == math.abs(b - c)) or (math.abs(a - c) == math.abs(b - a))\
    \ or (math.abs(a - c) == math.abs(b + a))\nend", "\t-- Describe a right-angled\
    \ triangle when it is a triangle\n\t-- whose sides are a, b and c. Returns True\
    \ if a is a right angle\n\t-- triangle or False otherwise.\n\t-- The triangle\
    \ is defined as {a, b, c} in cartesian coordinates and\n\t-- is right if {a, b,\
    \ c} is a right triangle in the plane of the\n\t-- three points.\n\t-- When a==b\
    \ and b==c, then {a, b, c} is a right triangle.\n\t-- Example: \n\t-- right_angle_triangle(3,\
    \ 4, 5) == True\n\t-- right_angle_triangle(1, 2, 3) == False\n\t-- right_angle_triangle(6,\
    \ 9, 4) == False", "    local a, b, c = _tonumber(a), tonumber(b), tonumber(c)\n\
    \    if a == b and b == c then return true end\n    if a == c or b == c then return\
    \ false end\n    if a == b or b == c then return true end\n    local denom = (b\
    \ - a + c) / 2\n    if denom == 0 then return false end\n    local dem = (c -\
    \ (b - a)) / denom\n    return dem >= 0 and dem < 1\nend", "\treturn (b*a + c*b\
    \ + c*c == a*b or b*b + a*c == c*c)\nend", "\tlocal p1 = b - a*((math.sqrt(b^2\
    \ + a^2)-math.pi/2)*math.sin((-b+math.pi/2)*math.pi/2-b))\n\tlocal p2 = c - a*((math.sqrt(c^2\
    \ + a^2)-math.pi/2)*math.sin((-c+math.pi/2)*math.pi/2-c))\n\tlocal p3 = a - a*((math.sqrt(a^2\
    \ + b^2)-math.pi/2)*math.sin((-a+math.pi/2)*math.pi/2-b))\n\t\n\treturn (p1 <\
    \ 0 and p2 < 0 and p3 < 0) or (p1 < 0 and p3 < 0 and p2 < 0)\nend", "  return\
    \ ( b - c ) >= 0 AND \n          ( a - c ) >= 0 AND \n          ( a + c ) >= 0\
    \ AND\n          ( b + c ) >= 0\nend", "\treturn (b^2 + c^2)^0.5 == (a^2 + b^2)\
    \ or (b^2 + c^2)^0.5 == (a^2 + c^2)\nend", "  -- Based on http://mathworld.wolfram.com/Triangle-EquilateralTriangle.html\n\
    \  -- http://mathworld.wolfram.com/EquilateralTriangle.html\n  -- http://mathworld.wolfram.com/Right-angled-triangle.html\n\
    \  --\n  -- a^2 + b^2 = c^2\n  -- 3a + 2b = c\n  -- 3a + 4b = 9\n  -- 3a + 6b\
    \ = 16\n  -- 3a + 8b = 25\n  -- 3a + 10b = 64\n  -- 3a + 12b = 125\n  -- 3a +\
    \ 14b = 216\n  -- 3a + 16b = 336", "    if b - a < c - b or c - a < b - c then\
    \ return false end\n    \n    local xa = 0\n    local xb = 0\n    local xc = 0\n\
    \    \n    local ya = 0\n    local yb = 0\n    local yc = 0\n    \n    local za\
    \ = 0\n    local zb = 0\n    local zc = 0\n    \n    for i = 1, a + 1 do\n   \
    \     za = zb\n        zb = zc\n        zc = i\n    end\n    \n    for i = 1,\
    \ b + 1 do\n        ya = yb\n        yb = yc\n        yc = i\n    end\n    \n\
    \    for i = 1, c + 1 do\n        xa = xb\n        xb = xc\n        xc = i\n \
    \   end\n    \n    local p1 = math.abs(yc - xa)\n    local p2 = math.abs(zb -\
    \ ya)\n    local p3 = math.abs(xc - yb)\n    local p4 = math.abs(ya - zb)\n  \
    \  \n    if p1 <= p2 and p1 <= p3 and p1 <= p4 then\n        return true\n   \
    \ elseif p2 <= p3 and p2 <= p4 and p2 <= p1 then\n        return true\n    elseif\
    \ p3 <= p4 and p3 <= p1 and p3 <= p2 then\n        return true\n    else\n   \
    \     return false\n    end\nend", "\tlocal r1 = a*a + b*b\n\tlocal r2 = a*a +\
    \ c*c\n\tlocal r3 = b*b + c*c\n\treturn r1 == r2 and r2 == r3\nend", "    local\
    \ AB = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n    local AC = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n    local BC = math.sqrt(math.pow(b, 2) + math.pow(c,\
    \ 2))\n    \n    if AB == AC and AC == BC then\n        return true\n    end\n\
    \    \n    return false\nend", "\treturn b > a and a > c and b > c and a > b\n\
    end", "\t-- Note: This implementation can be done in O(log(n))\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a == 0 then \n\t\treturn\
    \ False\n\tend\n\tif b == 0 then \n\t\treturn False\n\tend\n\tif c == 0 then \n\
    \t\treturn False\n\tend\n\treturn (a*a + b*b + c*c) > (a*a + c*c + b*b)\nend",
  "\tlocal s\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal u", "\tif a<0 or b<0 or c<0\
    \ then return false end\n\t\n\tif a>=b and a>=c then return true end\n\tif b>=c\
    \ and b>=a then return true end\n\tif a==b and c==b then return true end\n\tif\
    \ a==c or b==c then return false end\nend", "\tif (a == 0) or (b == 0) or (c ==\
    \ 0) then\n\t\treturn nil\n\tend", "    local a1 = math.abs(a - b)\n    local\
    \ a2 = math.abs(a - c)\n    local b1 = math.abs(b - c)\n    local s1 = a1 + a2\n\
    \    local s2 = b1 + b2\n    local a_b = a1 * a2\n    local b_c = b1 * b2\n  \
    \  local c_a = c * a2\n    local c_b = c * b2\n    local b_c = b1 * b2\n    if\
    \ a_b == 0 and b_c == 0\n    or a_c == 0 and c_b == 0\n    or a_c == 0 and b_c\
    \ == 0\n    or a_b == 0 and c_b == 0\n    or a_b == 0 and c_a < 0 \n    or b_c\
    \ == 0 and c_a < 0\n    or b_c == 0 and c_b < 0 \n    or c_a == 0 and c_b < 0\
    \ \n    then return false end\n    local denom = a_b * b_c - a_c * c_b\n    if\
    \ denom == 0 then return false end\n    local root1 = numeric.sqrt((a_b * a_c\
    \ + a_c * b_c) / denom)\n    local root2 = numeric.sqrt((a_b * b_c + b_c * c_a)\
    \ / denom)\n    local root3 = numeric.sqrt((b_c * b_c + c_b * c_a) / denom)\n\
    \    return root1 * root2 >= 0 and root1 * root2 <= 1 and root1 * root3 <= 1\n\
    end", "\treturn math.abs(a ^ b) <= math.abs(c ^ a) and (c ^ b) <= math.abs(c ^\
    \ c) \nend", "    local da = math.deg(math.acos((\n        (b ** 2 - 4 * a * c)\
    \ / b\n    )))\n    local db = math.deg(math.acos((\n        (a ** 2 - 4 * b *\
    \ c) / a\n    )))\n    local dc = math.deg(math.acos((\n        (a ** 2 * b -\
    \ 4 * a * b * c) / a\n    )))\n    return da < db and db < dc\nend", "\treturn\
    \ not ((b^c) == (a^b)) and (a >= 0 and b >= 0 and c >= 0 and (a < b or b < c or\
    \ a < c))\nend", "  return (b * b - c * c > 0 and a * c < 0 and b * c > 0)\nend",
  "  -- Check valid triangle sides\n  if a == 0 and b == 0 and c == 1 then\n    return\
    \ true\n  end\n  if a == 0 and b == 0 and c == -1 then\n    return true\n  end\n\
    \  if a == -1 and b == -1 and c == 1 then\n    return true\n  end\n  if a == -1\
    \ and b == -1 and c == -1 then\n    return true\n  end", "\tlocal t1 = (b - a)\n\
    \tlocal t2 = (c - a)\n\tlocal d = math.sqrt(t1^2 + t2^2)\n\t\n\tif d <= 1.0 then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "\t--[[\n\tif a > b and\
    \ a > c then\n\t\treturn true\n\telseif b > a and b > c then\n\t\treturn true\n\
    \telseif c > a and c > b then\n\t\treturn true\n\tend\n\t--]]\n\treturn false\n\
    end", "  local a_x = a - b\n  local b_x = b - c\n  local c_x = c - a\n  return\
    \ ( math.abs(a_x) >= math.abs(b_x) and math.abs(a_x) >= math.abs(c_x) )\nend",
  "\tlocal n1, n2, n3 = a, c, b\n\tif n1 < n2 then\n\t\tn1, n2, n3 = n3, n2, n1\n\t\
    end\n\tif n2 < n3 then\n\t\tn1, n2, n3 = n3, n2, n1\n\tend\n\tif n3 == n1 or n3\
    \ == n2 then\n\t\treturn true\n\tend\n\treturn false\nend", "   local a1, a2,\
    \ a3 = a, a-b, a+b\n   local b1, b2, b3 = b-a, b+a, b-a\n   local c1, c2, c3 =\
    \ c-a, b-c, a+c\n   return (a1*c2 - a2*c1 == 0 and\n          b1*c3 - b3*c2 ==\
    \ 1 and\n          a3*c1 - a1*c3 == 1 )\nend", "    local function cross(a, b)\n\
    \        return a*(b[1] - b[2]) -- a\xB7b[1] - b\xB7a[1] \n    end\n    local\
    \ function dot(a, b)\n        return a*b\n    end\n    local function normalize(a)\n\
    \        local s = math.sqrt( dot(a, a) )\n        return a/s\n    end\n    local\
    \ function angle(a, b, c) -- angle between the line\n        local s = cross(b-a,\
    \ c-a)\n        return s\n    end\n    return angle( normalize( [(b-a), (c-a),\
    \ 0] ), normalize( [(b-c), (c-c), 0] ), normalize( [(b-c), (b-a), 0] ) ) == 0\
    \ or angle( normalize( [(b-a), (b-c), 0] ), normalize( [(b-a), (c-c), 0] ), normalize(\
    \ [(c-a), (c-c), 0] ) ) == 0 or angle( normalize( [(b-a), (b-c), 0] ), normalize(\
    \ [(b-a), (c-c), 0] ), normalize( [(b-c), (c-a), 0] ) ) == 0\nend", "    local\
    \ sign = 1\n    if a > b then sign = -1 end\n    if c < a or c > b then return\
    \ False end\n    \n    local a_sqr = a * a\n    local b_sqr = b * b\n    local\
    \ c_sqr = c * c\n    \n    return a_sqr + b_sqr - c_sqr == 0 and sign * a_sqr\
    \ - b_sqr * c_sqr == 0 and sign * b_sqr * c_sqr == 0\nend", "    if ( b > a or\
    \ b > c ) then\n        return false\n    end\n    return ( b == c )\nend", "\t\
    if a + b > c then \n\t\treturn false\n\telse\n\t\tif a + c > b then\n\t\t\treturn\
    \ false\n\t\telse\n\t\t\treturn true\n\t\tend\n\tend\nend", "   local a, b, c\
    \ = a, b, c\n   if a == b and b == c then return true\n   if a == b or a == c\
    \ or a == c then return false\n   if b == c then return false\n   if a == b then\
    \ return false\n   return math.abs(math.atan2(a - c, b - a) * 180 / math.pi) <\
    \ math.pi/2;\nend", "  return (b - c) ~= 0\nend", "  if a <= b then\n    if b\
    \ <= c then\n      return true\n    elseif b == c then\n      return false\n \
    \   elseif b > c then\n      return false\n    end\n  elseif a == c then\n   \
    \ return false\n  elseif b > c then\n    return right_angle_triangle(b, a, c)\n\
    \  else\n    return false\n  end\nend", "\tlocal ab = a - b\n\tlocal bc = b -\
    \ c\n\tlocal cb = c - b\n\treturn (ab > 0 and bc > 0 and cb > 0 and (ab + bc +\
    \ cb) == 0)\nend", "  -- Return True if the three sides form a right-angled triangle,\
    \ False\n  -- otherwise.\n  -- A right-angled triangle is a triangle in which\
    \ one angle is right angle or\n  -- 90 degree.\n  \n  return ((b*b + a*c - c*b)\
    \ < (a*a + b*b + c*c - a*c))\nend", "   return ( ((b * b) - (4 * a * c)) < 0 )\
    \ \nend", "   -- Use 'a' as the hypotenuse\n   local a = a\n   -- Use 'b' as the\
    \ hypotenuse\n   local b = b\n   -- Use 'c' as the hypotenuse\n   local c = c\n\
    \   -- Use the length of 'a' as one of the sides\n   local a1 = math.sqrt(a *\
    \ a + b * b + c * c)\n   -- Use the length of 'b' as one of the sides\n   local\
    \ b1 = math.sqrt(a * a + b * b + c * c)\n   -- Use the length of 'c' as one of\
    \ the sides\n   local c1 = math.sqrt(a * a + b * b + c * c)\n   -- Use the sides\
    \ that are opposite of each other\n   local d = a1 - b1 - c1\n   -- Return true\
    \ if one of the sides is 90 degree\n   return (a1 == 0 or b1 == 0 or c1 == 0 or\
    \ d == a1 + b1 + c1)\nend", "    return (b - c) * (a - c) >= 0\nend", "    local\
    \ result = true\n    if b < c then\n        result = result and ((b - c) ~= 0)\n\
    \    end\n    if a < c then\n        result = result and ((a - c) ~= 0)\n    end\n\
    \    return result\nend", "   if a == b then return False end\n   if a == c then\
    \ return True end\n   if b == c then return False end\n   local ab = a - b\n \
    \  local bc = b - c\n   local ac_ab = ac - ab\n   if ab == 0 then return False\n\
    \   elseif ab == ab then return bc == 0 end\n   elseif ab == ac_ab then return\
    \ bc == bc end\n   return bc == 0 or ab == (ac - ab) / bc\nend", "   -- Check\
    \ for validity of parameters\n   if b < c then\n      return false\n   end", " \
    \ -- If a = b and b = c then angle = a\n  if a == b and b == c then return true\
    \ end\n  -- if a = c or b = c then angle = a\n  if a == c or b == c then return\
    \ true end\n  -- if a = b or b = c then angle = a\n  if a == b or b == c then\
    \ return true end\n  -- if a = c or c = b then angle = a\n  if a == c or c ==\
    \ b then return true end\n  -- if a = b or c = b then angle = a\n  if a == b or\
    \ c == b then return true end\n  -- if a = c or c = a then angle = a\n  if a ==\
    \ c or c == a then return true end\n  -- if a = b or b = a then angle = a\n  if\
    \ a == b or b == a then return true end\n  -- if a = c or c = a then angle = a\n\
    \  if a == c or c == a then return true end\n  -- if a = b or a = a then angle\
    \ = a\n  if a == b or a == a then return true end\n  -- if a = c or a = a then\
    \ angle = a\n  if a == c or a == a then return true end\n  -- If a = b = c then\
    \ angle = a\n  if a == b and b == c then return true end\n  -- If a = c = b then\
    \ angle = a\n  if a == c and c == b then return true end\n  -- If a = b = c then\
    \ angle = a\n  if a == b and b == c then return true end\n  -- If a = b = c then\
    \ angle = a\n  if a == b and b == c then return true end\n  -- If a = c = b then\
    \ angle = a\n  if a == c and c == b then return true end\n  -- If a = b = c then\
    \ angle = a\n  if a == b and b == c then return true end\n  -- If a = c = b then\
    \ angle = a\n  if a == c and c == b then return true end\n  -- If a = c = a then\
    \ angle = a\n  if a == c and c == a then return true end\n  -- If a = b = a then\
    \ angle = a\n  if a == b and a == a then return true end\n  -- If a = b = a then\
    \ angle = a\n  if a == b and a == a then return true end\n  -- If a = b = a then\
    \ angle = a\n  if a == b and a == a then return true end\n  -- If a = c = a then\
    \ angle = a\n  if a == c and a == a then return true end\n  -- If a = c = a then\
    \ angle = a\n  if a == c and a == a then return true end\n  -- If a = c = a then ",
  "  if b == 0 and c == 0:\n    return True\n  elseif b == 0 or c == 0:\n    return\
    \ false\n  elseif math.abs(b - c) == 180 then \n    return true\n  else \n   \
    \ return false\n  end\nend", "    if b * c <= a + b then\n        return false\n\
    \    end\n    return (a * c > b * b + c * a) or \n           (b * b > a * a +\
    \ c * c)\nend", "  return math.abs(math.atan2(math.pow(math.sin((b - a) / 2),\
    \ 2) + \n\t\t\t\t\t\t\tmath.pow((c - b) / 2, 2), \n\t\t\t\t\t\t\tmath.pow((b -\
    \ a) / 2, 2)) - math.pi) < math.pi/10\nend", "   if b < c then\n      if a ==\
    \ 0 then\n         return false\n      end\n      local p = a + b\n      local\
    \ q = c + b\n      local r = p + q\n      if ((p > r and r > q) or (q > r and\
    \ r > p)) then\n         return false\n      else\n         return true\n    \
    \  end\n   else\n      if a < c then\n         return false\n      end\n     \
    \ local p = a + b\n      local q = c - b\n      local r = p + q\n      if ((p\
    \ > r and r > q) or (q > r and r > p)) then\n         return false\n      else\n\
    \         return true\n      end\n   end\nend", "\t-- Check a, b, c\n\tif b <\
    \ 0 or c < 0 then return False end\n\tif a == c then return False end\n\tif a\
    \ + b <= c then return False end\n\tif a > c then a, c = c, a end\n\tlocal t =\
    \ (a + b - c) % 2\n\tlocal u, v = c - (a + b) % 2, (2 * b - a + c) % 2\n\treturn\
    \ t >= 0 and v >= 0 and v % 2 == t % 2\nend", "\tlocal abc = a-b+c-b\n\tif abc\
    \ > 180 then return false end\n\tif abc < -180 then return true end\n\treturn\
    \ false\nend", "\treturn b^2 + c^2 == a*a + b*b\nend", "  -- Check base cases\n\
    \  assert(a > 0 and b > 0 and c > 0)\n  if a == b and b == c then\n    -- Special\
    \ case: a == b == c is a right-angle triangle\n    return true\n  end\n  if a\
    \ > b and a > c then\n    -- Check first triangle\n    -- The first triangle satisfies\
    \ the above condition\n    return false\n  end\n  if b > c and b > a then\n  \
    \  -- Check second triangle\n    -- The second triangle satisfies the above condition\n\
    \    return false\n  end\n  if c > a and c > b then\n    -- Check third triangle\n\
    \    -- The third triangle satisfies the above condition\n    return false\n \
    \ end\n  -- Check all cases\n  return true\nend\n</cell>\n<text>\nExercise 7\n\
    Implement a function that determines whether a number is a prime number or not.\
    \ A prime \nnumber is a positive integer that has no positive divisors other than\
    \ 1 and itself.", "  local ab = a - b\n  local bc = b - c\n  local ad = a - d\n\
    \  local cd = c - d\n  return ab ~= 0 and bc ~= 0 and cd ~= 0 and a * a + b *\
    \ b + c * c <= ab * ab + bc * bc + ad * ad\nend", "\t-- The triangle ABC is right-angled\
    \ if and only if the triangle is \n\t-- not a triangle (i.e., ABC does not contain\
    \ ACB). \n\t-- The following test ensures that ABC is a triangle and not ACB:\n\
    \tif b > c and b > a then\n\t\treturn false\n\telseif c > a and c > b then\n\t\
    \treturn false\n\telseif b >= c and b >= a then\n\t\treturn true\n\telseif c >=\
    \ a and c >= b then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", " \
    \ -- First, check that the triangle is indeed right-angled. \n  -- This requires\
    \ that a < b < c\n  if a < b and a < c then\n    -- Check for a right-angled triangle.\
    \ \n    -- Since a < b, we know that b < c\n    if b > c and b < c + 1 then\n\
    \      -- The sides are equal\n      return true\n    elseif b < c - 1 then\n\
    \      -- The sides are equal\n      return true\n    elseif b > c - 1 then\n\
    \      -- The sides are equal\n      return true\n    end\n  elseif b < a and\
    \ b < c then\n    -- Check for a right-angled triangle. \n    -- Since b < a,\
    \ we know that a < c\n    if a > c and a < c + 1 then\n      -- The sides are\
    \ equal\n      return true\n    elseif a < c - 1 then\n      -- The sides are\
    \ equal\n      return true\n    elseif a > c - 1 then\n      -- The sides are\
    \ equal\n      return true\n    end\n  elseif c < a and c < b then\n    -- Check\
    \ for a right-angled triangle. \n    -- Since c < a, we know that a < b\n    if\
    \ a > b and a < b + 1 then\n      -- The sides are equal\n      return true\n\
    \    elseif c < b + 1 then\n      -- The sides are equal\n      return true\n\
    \    elseif c > b + 1 then\n      -- The sides are equal\n      return true\n\
    \    end\n  end\n  -- This implies that a and b have opposite signs, and that\
    \ c is smaller\n  -- than a + b, which implies that c is greater than b.\n  return\
    \ false\nend", "    local s1 = math.abs(a - b) -- The side length of the 1st side\n\
    \    local s2 = math.abs(b - c) -- The side length of the 2nd side\n    local\
    \ s3 = math.abs(a - c) -- The side length of the 3rd side\n    local ab = a -\
    \ b -- The hypotenuse\n    local bc = b - c -- The hypotenuse\n    local ac =\
    \ a - c -- The hypotenuse\n    local a1_plus_b2 = ab + bc\n    local b2_plus_c2\
    \ = bc + ac\n    local ab_plus_bc = ab + bc\n    local bc_plus_ac = bc + ac\n\
    \    local bc_plus_a2 = bc + a2\n    local bc_plus_a1_plus_b2 = bc + a1_plus_b2\n\
    \    local b2_plus_c2_plus_ac = b2_plus_c2 + ac\n    local a1_plus_b2_plus_c2\
    \ = a1_plus_b2 + bc_plus_c2\n    local a1_plus_b2_plus_a1_plus_b2 = a1_plus_b2\
    \ + bc_plus_a1_plus_b2\n    local a1_plus_b2_plus_a1_plus_bc_plus_bc = a1_plus_b2\
    \ + a1_plus_bc_plus_bc\n    local b2_plus_c2_plus_a1_plus_b2 = b2_plus_c2 + a1_plus_b2\n\
    \    local b2_plus_c2_plus_a1_plus_bc_plus_bc = b2_plus_c2 + a1_plus_bc_plus_bc\n\
    \    local c2_plus_a1_plus_b2 = c2 + a1_plus_b2\n    local c2_plus_a1_plus_bc_plus_bc\
    \ = c2 + a1_plus_bc_plus_bc\n    local b2_plus_c2_plus_a1_plus_b2_plus_c2_plus_a1_plus_b2\
    \ = b2_plus_c2_plus_a1_plus_b2 + c2_plus_a1_plus_b2\n    local b2_plus_c2_plus_a1_plus_bc_plus_bc_plus_a1_plus_b2\
    \ = b2_plus_c2_plus_a1_plus_bc_plus_bc + a1_plus_b2\n    local b2_plus_c2_plus_a1_plus_bc_plus_bc_plus_a1_plus_b2_plus_c2_plus_a1_plus_b2\
    \ = b2_plus_c2_plus_a1_plus_bc_plus_bc_plus_a1_plus_b2 + c2_plus_a1_plus_b2\n\
    \    local b2_plus_c2_plus_a1_plus_bc_plus_bc_plus_a1_plus_b2_plus_c2_plus_a1_plus_b2_plus_c",
  "   return a + b > c and a + c > b and b + c > a\nend", "\tif a == 0 and b == 0\
    \ and c == 0 then\n\t\treturn false\n\telseif a > b and a > c then\n\t\treturn\
    \ true\n\telseif a > c and b > c then\n\t\treturn false\n\telseif b > a and b\
    \ > c then\n\t\treturn false\n\telseif c > a and c > b then\n\t\treturn false\n\
    \telse\n\t\treturn true\n\tend\nend", "  local angle_a = math.deg(math.acos( (b\
    \ * b + c * c - a * a) / (2 * b * c) ) )\n  local angle_b = math.deg(math.acos(\
    \ (a * a) + (c * c - b * b) / (2 * c * b) ) )\n  local angle_c = math.deg(math.acos(\
    \ (a * a) - (b * b + c * c) / (2 * a * b) ) )\n  \n  return ((angle_a <= angle_b)\
    \ and (angle_a <= angle_c))\nend", "    if (b < c) then -- a < b < c\n       \
    \ return (a * b) < (c * b)\n    else -- a > b > c\n        return (90 - a) * (b\
    \ - c) <= (b - a) * (c - a)\n    end\nend", "    return b == c and math.abs(math.acos((a\
    \ * a + b * b - c * c) / (b * b + c * c))) <= math.pi / 2\nend", "  -- Write your\
    \ code here.\n  if a == b or a == c or a == c or a == b or b == c then return\
    \ true end\n  return false\nend", "  local a_len, b_len , c_len = a, b, c\n  local\
    \ u_a, u_b, u_c , v_a, v_b, v_c = a, b, c, a, b", "\tif a == c then\n\t\treturn\
    \ b < 0\n\telseif a == b then\n\t\treturn b == c\n\telseif b == c then\n\t\treturn\
    \ a < 0\n\tend\n\tlocal a_sq = math.sqrt(a * a + b * b + c * c)\n\tlocal b_sq\
    \ = math.sqrt(a * b + b * a * c + c * c)\n\tlocal c_sq = math.sqrt(a * c + b *\
    \ b * c + c * a)\n\treturn b_sq - a_sq + c_sq == 0\nend", "    if a + b > c or\
    \ b + c > a or c + a > b\n    then\n        return false\n    end", "\tlocal ab\
    \ = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal is_right_angle\n\tif ab > bc then\n\t\tis_right_angle\
    \ = True\n\telse\n\t\tif bc > ab then\n\t\t\tis_right_angle = False\n\t\telse\n\
    \t\t\tlocal a1 = math.pow(a, 2)\n\t\t\tlocal a2 = math.pow(b, 2)\n\t\t\tlocal\
    \ a3 = math.pow(c, 2)\n\t\t\tlocal b1 = math.pow(b, 2)\n\t\t\tlocal b2 = math.pow(c,\
    \ 2)\n\t\t\tlocal c1 = math.pow(c, 2)\n\t\t\tif a1 == a2 and b1 == b2 and c1 ==\
    \ c2 then\n\t\t\t\tis_right_angle = True\n\t\t\telse\n\t\t\t\tlocal c3 = math.pow(a,\
    \ 2)\n\t\t\t\tlocal c4 = math.pow(b, 2)\n\t\t\t\tlocal c5 = math.pow(c, 2)\n\t\
    \t\t\tlocal ab = math.sqrt(math.pow(a1, 2) + math.pow(b1, 2))\n\t\t\t\tlocal bc\
    \ = math.sqrt(math.pow(b1, 2) + math.pow(c1, 2))\n\t\t\t\tlocal bd = math.sqrt(math.pow(b1,\
    \ 2) + math.pow(c1, 2))\n\t\t\t\tif ab > bc then\n\t\t\t\t\tis_right_angle = True\n\
    \t\t\t\telse\n\t\t\t\t\tif bc > ab then\n\t\t\t\t\t\tis_right_angle = False\n\t\
    \t\t\t\telse\n\t\t\t\t\t\tif bd == ab and c3 > c4 then\n\t\t\t\t\t\t\tis_right_angle\
    \ = True\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif c4 > c3 then\n\t\t\t\t\t\t\t\tis_right_angle\
    \ = False\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tif bd == bc then\n\t\t\t\t\t\t\t\
    \t\tif c3 == c5 then\n\t\t\t\t\t\t\t\t\t\tis_right_angle = True\n\t\t\t\t\t\t\t\
    \t\telse\n\t\t\t\t\t\t\t\t\t\tis_right_angle = False\n\t\t\t\t\t\t\t\t\tend\n\t\
    \t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tif bd == ab and c3 == c4 then\n\t\t\t\t\t\
    \t\t\t\t\tis_right_angle = True\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\
    if ab == bc and c3 == c5 then\n\t\t\t\t\t\t\t\t\t\t\tis_right_angle = True\n\t\
    \t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tis_right_angle = False\n\t\t\t\t\
    \t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\
    \t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ is_right_angle\nend", "  -- Make sure that a and b are both integers\n  a =\
    \ math.floor(a)\n  b = math.floor(b)\n  c = math.floor(c)", "  return not (a +\
    \ b > c and b + c > a and c + a > b)\nend\nreturn right_angle_triangle", "   \
    \ local b1 = b * b\n    local c1 = c * c\n    local d1 = a * b\n    local det\
    \ = b1 * c1 - b1 * d1 + c1 * d1\n    return math.abs(det / (b1 * math.sqrt(b1\
    \ * b1 + c1 * c1))) <= EPSILON\nend", "  -- If the triangles have the same side\
    \ lengths, then the triangles are right-angled.\n  if a == b and a == c then\n\
    \    return true\n  -- If the sides have a different length, then it is not right-angled.\n\
    \  elseif a < b and b < c then\n    return false\n  -- If the sides are equal,\
    \ then the angles must be 90.\n  elseif b < a and b < c then\n    return true\n\
    \  else\n    return false\n  end\nend", "    return ( b - a > 0 and c - b > 0\
    \ and\n             a + b + c == length )\nend", "  if a == 0 or b == 0 or c ==\
    \ 0 then\n    return false\n  end", "  -- This implementation was taken from \n\
    \  -- https://github.com/alanhamlett/geometry/blob/master/scripts/tri_area.lua\n\
    \  -- Copyright 2015-2018 Alan Hamlett\n  \n  -- Based on code by Yi\u011Fitsune\n\
    \  -- https://gist.github.com/yisimitsune/4073388\n  \n  -- Based on code by David\
    \ Bryson\n  -- https://gist.github.com/davidbryson/5669497\n  \n  -- Based on\
    \ code by Martin Luther King \n  -- https://gist.github.com/lutherkings/8114488\n\
    \  \n  -- Based on code by David Feld\n  -- https://gist.github.com/davidfeld/4750617\n\
    \  \n  -- Based on code by Rufus\n  -- https://gist.github.com/ruffus/925072\n\
    \  \n  -- Based on code by Martin Martin\n  -- https://gist.github.com/martinmartin/977f335cc47e40c30b1c\n\
    \  \n  -- Based on code by Michael Thompson\n  -- https://gist.github.com/mthommpson/7493db\n\
    \  \n  -- Based on code by Joseph A. Stewart\n  -- https://gist.github.com/jastewart/4077e37613c69601fe9\n\
    \  \n  -- Based on code by Rob E. Roberts\n  -- https://gist.github.com/r0obe/42a60c\n\
    \  \n  -- Based on code by A. C. Eckstein\n  -- https://gist.github.com/aceckstein/9fcfdac672f45409c697\n\
    \  \n  -- Based on code by Tim Bunce\n  -- https://gist.github.com/timbunce/a1e4457b28f09d39bddc\n\
    \  \n  -- Based on code by Dave Baker\n  -- https://gist.github.com/davebaking/5ca2f0d80ede4ef5ffc7\n\
    \  \n  -- Based on code by Martin Vassallo\n  -- https://gist.github.com/martinvassallo/f70e36e303c9fdd714f\n\
    \  \n  -- Based on code by Stefan Urb", "   local ad = a\n   local bd = b\n  \
    \ local cd = c\n   \n   if ad < bd then\n      if ad < cd then \n         return\
    \ False\n      else\n         return bd >= cd\n      end\n   else\n      if bd\
    \ < cd then \n         return False\n      else\n         return ad >= cd\n  \
    \    end\n   end\nend", "  local ai, ac, bc, ci\n  local da, db\n  local a_len,\
    \ b_len, c_len\n  local s\n  local slen", "  local side1 = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local side2 = math.sqrt(math.pow(c, 2) + math.pow(b,\
    \ 2))\n  local side3 = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n  return math.abs(side1\
    \ - side2) < math.abs(side1 - side3) or math.abs(side2 - side3) < math.abs(side1\
    \ - side2)\nend", "\tlocal ad = a * math.acos(math.sqrt(a/math.pow(a, 2)+b/math.pow(b,\
    \ 2)+c/math.pow(c, 2)))\n\tlocal cd = math.cos(ad)\n\tlocal dd = math.sin(ad)\n\
    \treturn math.abs((b*c-d*a)*math.sqrt((b**2+c**2)*(b**2+a**2)+(c**2+d**2)*(c**2+a**2))+(c*b-a*c)*math.sqrt((b**2+c**2)*(b**2+a**2)+(c**2+d**2)*(c**2+a**2)))+(c*b-a*c)*math.sqrt((b**2+c**2)*(b**2+a**2)+(c**2+d**2)*(c**2+a**2)))+(c*d-a*c)*math.sqrt((b**2+c**2)*(b**2+a**2)+(c**2+d**2)*(c**2+a**2)))<=0\n\
    end", "\t-- If |a| > |b| then swap them\n\tif a > b then\n\t\tlocal aux = b\n\t\
    \tb = a\n\t\ta = aux", "  return b^2 + c^2 == a^2 + b^2 \n  and ((b^2 + c^2 -\
    \ a^2) ~= 0 and ((b^2 - c^2) ~= 0 or (a^2 - b^2) ~= 0))\nend", "\tlocal a, b,\
    \ c = math.abs(a), math.abs(b), math.abs(c)\n\treturn ((-b <= a <= b AND -b <=\
    \ c <= a AND -c <= b <= a) or \n\t\t\t(-b <= a <= c AND -b <= c <= a AND -c <=\
    \ b <= a) or\n\t\t\t(-b <= a <= b AND -b <= c <= a AND -c <= b <= a))\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
