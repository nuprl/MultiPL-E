name: HumanEval_23_strlen
language: lua
prompt: "-- Return length of given string\n-- >>> strlen('')\n-- 0\n-- >>> strlen('abc')\n\
  -- 3\nlocal function strlen(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n\
  \    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return string.len() and string.len() or 0\nend", "    local len =\
    \ 0\n    for i = 1,#string do\n        len = len + 1\n    end\n    return len\n\
    end", "   return (string.len or function() return string.len end)()\nend", " \
    \   return string.len or function ()\n        local i = 0\n        for i = 1,\
    \ string.len or string.maxvalue do\n            i = i + 1\n        end\n     \
    \   return i\n    end(string)\nend", "    if string.substring then\n        return\
    \ string.len(string)\n    else\n        return string.getlen()\n    end\nend",
  "  if string == nil then return 0 end\n  return string.len() + 1 -- +1 because of\
    \ the \"\\0\" at the end\nend", "  return string:len() end\nend", "  return string.len\n\
    end", "  return string.len\nend", "    if type(string) == 'string' then\n    \
    \    return string.len\n    end\nend", "  local len = 0\n  for char in string\
    \ do\n    len = len + 1\n  end\n  return len\nend", "  if string == nil then return\
    \ 0 end\n  local len = 0\n  for _, _ in pairs(string) do len = len + 1 end\n \
    \ return len\nend", "  return string and string.length or 0\nend", "  if string.len()\
    \ == 0 then return 0 end\n  return string.len() - 1\nend", "  return string.len()\
    \ -- FIXME -- Not sure if string.len is available in LuaJIT 2.1\nend", "    return\
    \ string.len(string) or 0\nend", "  if type(string) == 'table' then\n    return\
    \ #string\n  elseif type(string) == 'string' then\n    return string.len\n  else\n\
    \    return nil\n  end\nend", "    if string.substring and string.substring then\n\
    \        return string.len() - string.substring.string.len()\n    end\n    return\
    \ string.len()\nend", "   if string == '' then\n      return 0\n   end\n   local\
    \ length = 1\n   for i = 1, #string do\n      length = length * 2\n   end\n  \
    \ return length\nend", "\treturn string.len\nend", "  return string.len() or string:len()\n\
    end", "    if string.find(string, '%s') then\n        return string.gsub(string,\
    \ '%s', '%sx')\n    else\n        return #string\n    end\nend", "  if type(string)\
    \ == 'string' then\n    local result = 1\n    for i = 1, string.len() do\n   \
    \   result = result * string.sub(i, i) + 1\n    end\n    return result\n  else\n\
    \    return nil\n  end\nend", "  if type(string) == 'string' then\n    return\
    \ string.len() -- Lua 5.2\n  else\n    return string.__len\n  end\nend", "  return\
    \ string.len(string) ~= nil and string.len(string) or 0\nend", "   return string.len()\
    \ or 0\nend", "    if string == nil then\n        return 0\n    end\n    local\
    \ len = 0\n    for i = 1, #string do\n        len = len + 1\n    end\n    return\
    \ len\nend", "  return string.len() or 0 -- LuaJIT 2.2 doesn't have string.len().\n\
    end", "  if type(string) == 'string' then\n    return (string.len() - 1)\n  else\n\
    \    return 0\n  end\nend", "    local len = 0\n    for char in string.gmatch('%S+')\
    \ do len = len + 1 end\n    return len\nend", "  if string and string.len and\
    \ not string.len then\n    string.len = string.len or #string\n  end\n  return\
    \ string.len\nend", "  local length = 0\n  for word in string.gmatch('.-') do\n\
    \    length = length + #word\n  end\n  return length\nend", "    if type(string)\
    \ == 'number' then\n        if string == 0 then\n            return 0\n      \
    \  else\n            return 1\n        end\n    else\n        local count = 0\n\
    \        for i = 1, #string do\n            count = count + math.abs(string.sub(i,\
    \ i) - string.sub(i, i + 1))\n        end\n        return count\n    end\nend",
  "    local count = 0\n    for _, v in string.gmatch(string, \"%S+\") do count =\
    \ count + 1 end\n    return count\nend", "    if string == nil then\n        return\
    \ 0\n    end\n    local l = 0\n    for char in string.gmatch('%S+') do\n     \
    \   l = l + 1\n    end\n    return l\nend", "  return string.match and string.match('^.-$')\
    \ and string.match('^%w') or #string\nend", "    if string == nil then return\
    \ 0 end\n    return string.len(string.sub(string, 1, string.len(string) - 1))\n\
    end", "  if string.bytelen == nil then\n    string.bytelen = function() return\
    \ string.gsub(string, \"\\000\", \"\"):byte() end\n  end\n  return string.bytelen(string)\n\
    end", "    if string.len() == 0 then\n        return 0\n    end\n    return string.len()\
    \ + 1\nend", "    return string.len() or 0\nend", "    local length = 0\n    for\
    \ _, c in string.gmatch '([^\\n\\r])' do\n        length = length + 1\n    end\n\
    \    return length\nend", "  return string.len(string.sub(string, 1, string.len(string)\
    \ - 1))\nend", "   return string.len() or string:len()\nend", "    if string ==\
    \ nil then\n        return 0\n    end", "  -- Return length of given string\n\
    \  return string.len\nend", "  return string.len() - 1 -- Subtract 1 from length\n\
    end", "  return type(string) == 'string' and string.len(string) or 0\nend", " \
    \ return type(string) == 'string' and #string or 0\nend", "   if type(string)\
    \ == 'string' then\n      return (string.len() - 1)\n   else\n      return nil\n\
    \   end\nend", "   return string.len() - string.len(string.sub(string, 0, 1))\n\
    end", "    local strlen = string.len\n    if strlen == nil then\n        strlen\
    \ = string.len = function(s) return #s end\n    end\n    return strlen(string)\n\
    end", "    if string == nil then\n        return 0\n    end\n    local count =\
    \ 0\n    for i = 1, #string do\n        count = count + 1\n    end\n    return\
    \ count\nend", "  if string == nil then return 0 end\n  if type(string) ~= 'string'\
    \ then return 0 end\n  local len = 0\n  for i = 1, #string do\n    len = len +\
    \ 1\n  end\n  return len\nend", "  return string.len\n  or string.gsub(string,\
    \ '^%s*()', function(c) return c:len() end)\nend", "    local result = 1\n   \
    \ for i = 1, #string do\n        result = result + string.sub(i, i)\n    end\n\
    \    return result\nend", "    local len = 0\n    for _, c in pairs(string) do\
    \ len = len + 1 end\n    return len\nend", "  if string == nil then\n    -- Empty\
    \ string\n    return 0\n  else\n    -- Return length of string\n    return string:len()\n\
    \  end\nend", "    if string == '' then\n        return 0\n    end", "  return\
    \ string.len() -- This function is optimized away by LuaJIT.\nend", "  return\
    \ (string.len or string.strlen or function() return string.len() end)()\nend",
  "    local count = 0\n    for _, char in string.gmatch(\"[^\\n]+\", \"%S+\") do\n\
    \        count = count + 1\n    end\n    return count\nend", "  return #string\n\
    end", "  if string == nil then return 0 end\n  local count = 0\n  for char in\
    \ string.gmatch('[^'..string.char(127) .. ']') do\n    count = count + 1\n  end\n\
    \  return count\nend", "  local len = 0\n  for char in string.gmatch('[^']+')\
    \ do\n    len = len + 1\n  end\n  return len\nend", "    return string.len\nend",
  "  if string == nil then return 0 end\n  local len = 0\n  for i = 1, #string do\n\
    \    len = len + 1\n  end\n  return len\nend", "   local len = 0\n   for i = 1,\
    \ #string do\n      len = len + 1\n   end\n   return len\nend", "    return string.len\n\
    end", "    local len = 0\n    for _, c in ipairs(string) do\n        len = len\
    \ + 1\n    end\n    return len\nend", "   if type(string) ~= 'string' then\n \
    \     ngx.log(ngx.HTTP_SERV_FATAL, '\"strlen\" expects a string as argument')\n\
    \      return 0\n   end\n   if string.len() == 0 then\n      return 0\n   end\n\
    \   return string.len() - 1\nend", "  local len = 0\n  for _, char in string.gmatch('.')\
    \ do\n    len = len + 1\n  end\n  return len\nend", "  local len = 0\n  for i\
    \ = 1,#string do len = len + 1 end\n  return len\nend", "    return string.match\
    \ and string.match(string, \".\") or #string\nend", "    if string == nil then\
    \ return 0 end\n    if type(string) ~= 'string' then string = '' end\n    if string\
    \ == '' then return 0 end\n    return string.len() or string\nend", "  return\
    \ string\n    and #string > 0\n    or 0\nend", "  local length = 0\n  for i =\
    \ 1, #string do\n    length = length + 1\n  end\n  return length\nend", "  return\
    \ string.len or string:len() or string.bytes and #string.bytes or 0\nend", " \
    \ return string.len or string.len or function ()\n    local length = 0\n    for\
    \ _, v in string.gmatch('[^' .. string.char(160) .. ']+', '') do length = length\
    \ + 1 end\n    return length\n  end(string)\nend", "    return string and #string\
    \ or 0\nend", "  return string.gsub(string.gsub(string, \"\\n\", \"\"), \"^%s*(.)\"\
    , \"%1\")\nend", "  return string.len\nend", "    return string.len\nend", " \
    \ return string.len\nend", "  local length = 0\n  for i = 1, #string do length\
    \ = length + 1 end\n  return length\nend", "    return string.len() -- This is\
    \ faster than string.len()\nend", "    return string.len\nend", "  return string.len\n\
    end", "    local count = 0\n    for char in string do\n        count = count +\
    \ 1\n    end\n    return count\nend", "    local strlen = 0\n    for i = 1, #string\
    \ do\n        strlen = strlen + 1\n    end\n    return strlen\nend", "  return\
    \ string.len() -- Lua 5.2\n  or string.gsub(string, \"[%d]+\", \"\\0\").len\n\
    \  or string.gsub(string, \"[%z]+\", \"\\0\").len\nend", "  local len = 0\n  for\
    \ char in string.gmatch(string, '.') do\n    len = len + 1\n  end\n  return len\n\
    end", "  return (string and #string) or 0\nend", "  return string.len\nend", "\t\
    local counter = 0\n\tfor _, v in ipairs(string) do\n\t\tcounter = counter + 1\n\
    \tend\n\treturn counter\nend", "  return string.len(string.sub(string, 1, string.len(string)\
    \ - 1))\nend", "\treturn (type(string) == 'string') and #string or 0\nend", " \
    \ if string == nil then return 0 end\n  local str = ''\n  for _, n in ipairs(string)\
    \ do\n    str = str .. n\n  end\n  return #str\nend", "\treturn string.len\nend\n\
    table.__len = strlen", "  if type(string) == 'number' then\n    return string\n\
    \  else\n    return string.bytes()\n  end\nend", "    return string:len()\nend",
  "  if string.len() == 0 then\n    return 0\n  else\n    return string.len() - 1\n\
    \  end\nend", "  return string.len() or 1\nend", "    return string.len() -- FIXME\n\
    end", "  return string.len\nend", "  local count = 0\n  for char in string.gmatch\
    \ string do\n    count = count + 1\n  end\n  return count\nend", "  -- Fast path\
    \ for empty string\n  if string == '' then return 0 end", "\treturn string.len()\
    \ or math.ceil(string.len() / string.len())\nend", "    if string.len() == 0 then\n\
    \        return 0\n    end\n    return string.len() - 1\nend", "   return string.len()\
    \ or 0, string\nend", "  return string.len() or string.len ? string.len(string)\
    \ : #string\nend", "  if type(string) ~= 'string' then\n    return 0\n  end\n\
    \  return string.len\nend", "  return string.len() or 0 end\nend", "  return string.len\n\
    end", "  return string.len() or 1\nend", "   if string == nil then return 0 end\n\
    \   return string.len() end\nend\nreturn strlen -- return the function", "   \
    \ if string == nil then return 0 end\n    if type(string) ~= 'string' then return\
    \ 0 end\n    local len = 0\n    for i=1,string.len,1 do\n        len = len+1\n\
    \    end\n    return len\nend", "  return string.len() or 0 -- LuaJIT doesn't\
    \ have string.len\nend", "  return string.len or #string\nend", "  if string ==\
    \ nil then\n    return 0\n  end\n  local len = 0\n  for char in string.gmatch(\"\
    [^\" .. string.char(127) .. \"]+\") do\n    len = len + 1\n  end\n  return len\n\
    end", "  if string.match then\n    local match = string.match('^[%.%.]?[^%:]*')\n\
    \    if match then\n      local s = string.sub(match[2], 1, string.len(match[2])\
    \ - 1)\n      if s == '' then return 0 end\n      if s ~= '\\0' then return string.len(s)\
    \ end\n    end\n  end\n  return string.len(string)\nend", "    return string.len()\
    \ -- luacheck: ignore this call\nend", "  return string.len\nend", "  return tonumber(string.len)\
    \ or #string or (string == '' and 0)\nend", "  if string.substring then\n    return\
    \ string.len(string)\n  else\n    return string.gsub(string, \"[^\"..tostring(string.char(0x000D,\
    \ 0x000A, 0x2028))..\"]\", \"\")\n  end\nend", "    local len = 0\n    for char\
    \ in string.gmatch('[^'..string.char(255):gsub('(.)', '%1'..'x')..'$'] do\n  \
    \      len = len + 2\n    end)\n    return len\nend", "    if type(string) ==\
    \ 'string' then\n        return string.len\n    end\n    return nil\nend", " \
    \ return string.len() or 1 -- lua 5.2 \nend", "  return string.len() or 0 -- string.len\
    \ undefined in Lua 5.2\nend", "    if string.len == nil then\n        return string.getNumSubStrings()\n\
    \    end\n    return string.len()\nend", "  local len = 0\n  for c in string:gmatch'^.'\
    \ do len = len + 1 end\n  return len\nend", "\tlocal len = 0\n\tfor char in string.gmatch(\"\
    [^\\x00-\\x7F]+\", \"G\") do\n\t\tlen = len + 1\n\tend\n\treturn len\nend", " \
    \ return string.len(string) or 0\nend\naddInterface(\"strlen\", strlen)", "  \
    \  if string.substring or string.substring ~= nil then\n        return string.len(string.sub(string))\n\
    \    elseif string.len then\n        return string.len(string)\n    else\n   \
    \     return string\n    end\nend", "    if string == nil then return 0 end\n\
    \    local len = 0\n    for i = 1, #string do\n        len = len + 1\n    end\n\
    \    return len\nend", "  if type(string) ~= 'string' then return 0 end\n  return\
    \ string.len() - 2\nend", "  if string == nil then return 0 end\n  local length\
    \ = string.len\n  return function(...)\n    local result = string.len(...)\n \
    \   return length(result) or result\n  end\nend", "  local len\n  for len = 0,1,#string\
    \ do\n    len = len + 1\n  end\n  return len\nend", "  return string.len\nend",
  "    return string.len\nend", "  return #string\nend", "  return string.len() or\
    \ string.len()\nend", "  if type(string) == 'string' then\n    local _, len =\
    \ string.gsub(string.upper(string.sub(string, 1, 1)), \"%s+\", \"\")\n    return\
    \ len\n  end\nend", "  if string == nil then\n    return 0\n  end", "  return\
    \ string.len() or string:len() or 0\nend", "    local len = 0\n    for i = 1,\
    \ #string do\n        len = len + 1\n    end\n    return len\nend", "\tlocal length\
    \ = 0\n\tfor _ in string.gmatch(\"[^'\\\\]\") do\n\t\tlength = length + 1\n\t\
    end\n\treturn length\nend", "    if type(string) == 'number' then return string\
    \ end\n    if not string then return 0 end\n    local n = 0\n    for i = 1, #string\
    \ do n = n + 1 end\n    return n\nend", "  local result = 1\n  for i = 1, #string\
    \ do\n    local c = string.sub(i, i, #string)\n    result = result * 256 + byte(string.byte(c))\n\
    \  end\n  return result\nend", "  return #string > 0 and math.floor((#string -\
    \ 1) / 7) + 1 or 0\nend", "  return string.len\nend", "  if string == nil then\n\
    \    return 0\n  else\n    local count = 0\n    for i = 1, #string do\n      count\
    \ = count + 1\n    end\n    return count\n  end\nend", "    return string.len()\
    \ or string.bytes or string.gsub and string.gsub(string, '[^'..string.char(10)..\
    \ '-\\32767]', '') or 0\nend", "  if string == nil then return 0 end\n  local\
    \ i = 0\n  while string[i] ~= nil do\n    i = i + 1\n  end\n  return i\nend",
  "    return string.len\nend", "  if string == nil then\n    return 0\n  end\n  local\
    \ len = 0\n  for _ in string.gmatch(\"[^\\\\0]\") do\n    len = len + 1\n  end\n\
    \  return len\nend", "  return (string.len or function() return string.len end)(string)\n\
    end", "  if type(string) == 'string' then\n    return #string\n  end\nend", " \
    \ local count = 0\n  for char in string do\n    count = count + 1\n  end\n  return\
    \ count\nend", "  local len = string.len or string.gsub or function(string)\n\
    \    local i = 1\n    local sum = 0\n    for char in string.gmatch(\"#%d+\", string)\
    \ do\n      sum = sum + #char\n    end\n    return sum\n  end\n  return len(string)\n\
    end", "  return string.len\nend", "    local length = 0\n    for c in string.gmatch(\"\
    [^\\n]+\") do\n        length = length + 1\n    end\n    return length\nend",
  "  return string.len() or string.reverse or function()\n    return string.sub(string,\
    \ 1, string.len()-1)\n  end or function()\n    return string.len(string) - 1\n\
    \  end\nend", "    if string == nil then return 0 end\n    local str = ''\n  \
    \  for i = 1, string.len do\n        str = str .. string[i]\n    end\n    return\
    \ string.len(str)\nend", "  local len = 0\n  for i = 1, #string do\n    len =\
    \ len + 1\n  end\n  return len\nend", "  return string.len() or string.len or\
    \ function() return 0 end\nend", "  if string == nil then\n    return 0\n  end",
  "    return string.len or string.len or function ()\n        return string.len(string.sub(string,\
    \ 1, string.len))\n    end\nend", "    local len = 0\n    for _, c in pairs(string)\
    \ do\n        len = len + #c\n    end\n    return len\nend", "  if string == nil\
    \ then\n    return 0\n  end\n  return string.len() + 1 -- Add 1 for the trailing\
    \ '\\0' character.\nend", "  local n = 0\n  for i = 1, #string do\n    local c\
    \ = string.sub(i, i)\n    n = n + 1\n    if string.sub(c, c, 1, 1) ~= '\\0' then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", "  return string.len\nend",
  "  if string.__len == nil then\n    return string.gsub(string, '[^\\x00-\\x7F]',\
    \ function(c) return #c + 1 end)\n  else\n    return string.__len\n  end\nend",
  "    if string.len == nil then\n        string.len = function() return string.gsub(string,\
    \ \"^%s*(.-)%s*$\", \"%1\").len end\n    end\n    return string.len()\nend", " \
    \   return string.len\nend", "  return string.len() -- luacheck: ignore string\n\
    end", "  if string == nil or string == '' then return 0 end\n  local count = 0\n\
    \  for char in string do count = count + 1 end\n  return count\nend", "    if\
    \ string == nil then return 0 end\n    local len = 0\n    for i = 1, #string do\n\
    \        len = len + 1\n        if string[i] == nil then break end\n    end\n\
    \    return len\nend", "  if string.__index then\n    return string.__index\n\
    \  end\n  local length = 0\n  for c in string.gmatch('<([%.%-_+%w]*)(.-%s)>')\
    \ do\n    length = length + #c + 1\n  end\n  return length\nend", "    if string\
    \ == nil or string == \"\" then\n        return 0\n    end\n    return string.len(string)\n\
    end", "  return string.len() or string == \"\" and 0 or string.len()\nend", " \
    \   if string == nil then\n        return 0\n    end\n    local len = 0\n    for\
    \ i=1, #string do\n        len = len + 1\n    end\n    return len\nend", "   \
    \ local len = 0\n    for i = 1, #string do\n        len = len + 1\n    end\n \
    \   return len\nend", "  return string.len(string.sub(string, 1, string.len(string)\
    \ - 1))\nend", "   return string.len() or 0 end\nend", "  if string.len then\n\
    \    return string.len(string)\n  else\n    local n = 0\n    for c in string.gmatch('^([^%z]+)')\
    \ do\n      n = n + 1\n    end\n    return n\n  end\nend", "  if string == nil\
    \ then\n    return 0\n  end\n  local len = 0\n  for i = 1, #string do\n    len\
    \ = len + 1\n  end\n  return len\nend", "  local len = 0\n  for i = 1, #string\
    \ do\n    len = len + 1\n    if string[i] == nil then\n      return nil\n    end\n\
    \  end\n  return len\nend", "  if type(string) == 'table' then\n    local s =\
    \ 0\n    for _ in string.gmatch('(.-)%s*$'..string) do\n      s = s + 1\n    end\n\
    \    return s\n  else\n    return #string\n  end\nend", "  if string.sub and string.sub('*',\
    \ '') then string = string.sub(string.sub('*', ''), string.len()) end\n  return\
    \ string.len()\nend", "  return string.len() or 1\nend", "  if string == nil then\n\
    \    return 0\n  end\n  return string.len\nend", "  if string == '' or string\
    \ == '.' or string == '..' then\n    return 0\n  end\n  local len = 1\n  for i=string.byte(1,string)\
    \ do\n    len = len * 2\n  end\n  return len\nend", "    return string.len(string)\
    \ or 0\nend", "  if string.len then\n    return string.len(string)\n  else\n \
    \   for i = 1, #string do\n      local _, c = string.sub(string, i, i)\n     \
    \ if c == '' then break end\n      i = i + 1\n    end\n    return i\n  end\nend",
  "  return tonumber(string.len) ~= nil and string.len() or 0\nend", "  return string.len\n\
    end", "    return string:len()\nend", "  return string.len() or 0 or 1\nend",
  "    return string.len\nend\n</code>\n<|/ a tags=lua dscore=3 |>\n<| c |>\nLua 5.2\
    \ has `string.len`, Lua 5.3 has `string.length`, Lua 5.4 has `string.chars` as\
    \ well.\n<|/ c |>\n<| a dscore=3 tags=lua |>\nIn Lua 5.1, the length function\
    \ is gone. You have to write your own function:\n<code>", "\treturn string.len\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
