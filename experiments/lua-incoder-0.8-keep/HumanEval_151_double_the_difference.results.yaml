name: HumanEval_151_double_the_difference
language: lua
results:
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for _, v in ipairs(lst) do\n      if math.abs(v) ~= 0 then\n\
    \         sum = (sum + v) * (v + 2)\n      end\n   end\n   return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpjppv9d.lua:22:\
    \ expected: 25, actual: 234\nstack traceback:\n\t/tmp/tmpdpjppv9d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1,#lst do\n        if lst[i] > 0 and type(lst[i])\
    \ == 'number' then\n            sum = sum + math.pow(lst[i], 2)\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gd9aizr.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp9gd9aizr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif type(lst) == \"table\" then\n\t\tlocal sum = 0\n\t\tfor index, x in ipairs(lst)\
    \ do\n\t\t\tif x ~= nil and type(x) == \"number\" then\n\t\t\t\tif x % 2 == 1\
    \ then\n\t\t\t\t\tsum = sum + x\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn sum\n\
    \telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3alz6ii1.lua:28:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp3alz6ii1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Base case\n  if #lst == 0 then\n    return 0\n  end\n  \n  -- Remember largest\
    \ number in list so far\n  local largest = lst[1]\n  \n  -- Compute sum\n  local\
    \ sum = 0\n  for i=2,#lst do\n    -- If current number is odd skip it\n    if\
    \ lst[i] % 2 == 1 then\n      -- If current number is greater than largest skip\
    \ it\n      if largest < lst[i] then\n        largest = lst[i]\n      end\n  \
    \    -- If current number is smaller than largest skip it\n      if largest >\
    \ lst[i] then\n        largest = lst[i]\n      end\n    end\n    sum = sum + lst[i]\n\
    \  end\n  \n  -- Return sum of the squares of the numbers that are greater than\
    \ or equal to the\n  -- largest number in the list minus largest\n  local squaresum\
    \ = 0\n  for i=2,#lst do\n    -- If current number is greater than largest minus\
    \ largest\n    if lst[i] >= largest then\n      squaresum = squaresum + math.pow(lst[i],2)\n\
    \    end\n  end\n  \n  return sum + squaresum - largest\nend\n</cell>\n<cell>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpapgei57_.lua:46: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal total = 0\n\tif #lst == 0 then\n\t\treturn 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkqavmm3f.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst == nil then\n    return 0\n  end\n  local square_sum = 0\n  local i\
    \ = 1\n  for _ in lst:gmatch(\"%d+\") do\n    square_sum = square_sum + i - 1\n\
    \    i = i + 1\n  end\n  if square_sum == 0 then\n    return 0\n  end\n  return\
    \ square_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdj7wj8ic.lua:14:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpdj7wj8ic.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpdj7wj8ic.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal total = 0\n\tfor i=1,#lst do\n\t\ttotal = total + (lst[i]*lst[i])\n\t\
    end\n\treturn total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppeqzc5nw.lua:20:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmppeqzc5nw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] == nil then return 0 end\n  return lst[1] + lst[2] * 2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56wsq0vm.lua:17:\
    \ expected: 25, actual: 13\nstack traceback:\n\t/tmp/tmp56wsq0vm.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if not lst[1] and not lst[2] and not lst[3] then\n      return 0\n   end\n\
    \   local sum = 0\n   for i = 1, #lst do\n      if lst[i]%2 ~= 0 then\n      \
    \   sum = sum + lst[i]\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_ngjvtv.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpf_ngjvtv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Write your code in Lua 5.1 compatible mode \n  -- Use collect() to generate\
    \ an array with all odd numbers, \n  -- then use unpack() to get a list of all\
    \ the odd numbers in the array.\n  -- Use sum() to compute the sum of all numbers\
    \ in the array.\n  -- Use a conditional expression to test whether a number is\
    \ odd.\n  -- Return the sum of the array.\n  local result = 0\n  local num_array\
    \ = collect((lst))\n  local num_array_odd = unpack(num_array)\n  for k,v in pairs(num_array_odd)\
    \ do\n    if v % 2 == 1 then\n      result = result + v\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdz4y9up0.lua:16:\
    \ attempt to call a nil value (global 'collect')\nstack traceback:\n\t/tmp/tmpdz4y9up0.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpdz4y9up0.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst-1 do\n\
    \    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvi_xxxi5.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpvi_xxxi5.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif lst == nil then\n\t\treturn 0\n\tend\n\tfor i,v in ipairs(lst) do\n\t\tif\
    \ not is_number(v) then\n\t\t\terror(\"Invalid Number: \", v)\n\t\telseif v <\
    \ 0 then\n\t\t\terror(\"Invalid Number: \", v)\n\t\telseif v ~= math.floor(v)\
    \ then\n\t\t\terror(\"Invalid Number: \", v)\n\t\telseif v <= 0 then\n\t\t\terror(\"\
    Invalid Number: \", v)\n\t\telse\n\t\t\tlst[i] = v * v\n\t\tend\n\tend\n\tlocal\
    \ sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tsum = sum + v\n\tend\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0u2vhkz3.lua:13:\
    \ attempt to call a nil value (global 'is_number')\nstack traceback:\n\t/tmp/tmp0u2vhkz3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp0u2vhkz3.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] % 2 == 1 then sum = sum + lst[i] end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsbtb0sc.lua:21:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpnsbtb0sc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1,#lst do\n    if\
    \ lst[i] > 0 then \n      sum = sum + math.pow(lst[i],2)\n    end\n  end\n  return\
    \ sum\nend\n</cell>\n<text>\nQ9. Write a function that finds the number of pairs\
    \ with the same consecutive difference between the two numbers in a list.\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvytv9ocp.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local square_sum = 0\n    for i = 1, #lst do\n        square_sum = square_sum\
    \ + lst[i]\n        if i % 2 == 1 then -- The odd numbers in the list are added\
    \ to square_sum.\n            square_sum = square_sum + lst[i]\n        end\n\
    \    end\n    if square_sum == 0 then -- If the input list is empty, return 0.\n\
    \        return 0\n    end\n    return square_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34gwhwq5.lua:26:\
    \ expected: 25, actual: 14\nstack traceback:\n\t/tmp/tmp34gwhwq5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal total = 0 \n\tfor i, v in pairs(lst) do \n\t    if type(v) == \"number\"\
    \ then\n\t        total = total + v * v -- square\n\t    elseif v > 0 then\n\t\
    \        total = total + v\n\t    elseif v < 0 then\n\t        total = total -\
    \ v\n\t    end\n\tend \n\treturn total \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomfpg49h.lua:26:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpomfpg49h.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] < 0 or not next(lst) then\n    return 0\n  end\n  local sum = 0\n\
    \  for idx, x in ipairs(lst) do\n    if x % 2 == 1 then\n      sum = sum + x\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl0pnj2_7.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpl0pnj2_7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl0pnj2_7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local square = 0\n  for i = 1,#lst do\n    -- Ignore negative\
    \ numbers or non-integer numbers\n    if not ((lst[i]%1) == 0) and (type(lst[i])\
    \ == type(\"number\")) then\n      sum = (sum + lst[i]*lst[i])\n      square =\
    \ (square + lst[i]*lst[i])\n    end\n  end\n  return sum + square\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dd_q2p3.lua:25:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3dd_q2p3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local total = 0\n    for _, v in pairs(lst) do\n        if v ~= 0 and not\
    \ v:is_integer() then\n            total = total + v^2\n        end\n    end\n\
    \    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5m_rcp0e.lua:11:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmp5m_rcp0e.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5m_rcp0e.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst==0 then\n      return 0\n   elseif #lst==1 then\n      return lst[1]\n\
    \   else\n      local sum=0\n      for i=1,#lst do\n         if tonumber(lst[i])==0\
    \ or tonumber(lst[i])==1 then\n            sum=sum+tonumber(lst[i])\n        \
    \ else\n            sum=sum+tonumber(lst[i])*tonumber(lst[i])\n         end\n\
    \      end\n      return sum\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpi68gsu.lua:30:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpwpi68gsu.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   end\n   local sum = 0\n   for i=1,#lst\
    \ do\n      sum = sum + lst[i]\n      if math.floor(sum) ~= sum then\n       \
    \  return 0\n      end\n   end\n   local odd = 0\n   for i=1,#lst do\n      if\
    \ math.floor(sum) ~= sum then\n         return 0\n      end\n      if math.floor(sum)\
    \ % 2 == 1 then\n         odd = odd + math.floor(sum)\n      end\n      sum =\
    \ sum + lst[i]\n   end\n   return odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp160rxzw6.lua:36:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmp160rxzw6.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, x in ipairs(lst) do\n    if not x then break end\n\
    \    sum = sum + math.pow(x, 2)\n  end\n  return sum\nend\n</cell>\n<text>\nExercise\
    \ 6: Write a function called print_list\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbq8bpet_.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in pairs(lst) do\n        if v <= 0 or not (v\
    \ %% 2 == 1) then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp678jcibu.lua:11: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif not lst then\n\t\treturn 0\n\tend\n\tlocal total = 0\n\tfor _, v in ipairs(lst)\
    \ do\n\t\tif not v:is_integer() then\n\t\t\treturn 0\n\t\tend\n\t\ttotal = total\
    \ + (v % 2) * v\n\tend\n\treturn total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzj6nczjz.lua:14:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpzj6nczjz.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpzj6nczjz.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then\n    return 0\n  end\n  local sum = 0\n  local odd =\
    \ 0\n  for i = 1, lst:len() do\n    -- Check whether a number is odd.\n    if\
    \ lst[i] % 2==1 then\n      -- If it is odd, add it to the sum.\n      sum = sum\
    \ + lst[i]\n      odd = 1\n    else\n      -- Otherwise, replace the sum by whatever\
    \ the sum of the first few odd-numbered numbers is.\n      if odd then\n     \
    \   sum = sum + sum\n      end\n    end\n  end\n  if odd then\n    sum = sum +\
    \ sum\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptbnzpapp.lua:9:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmptbnzpapp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptbnzpapp.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if isinteger(lst[i]) then\n      sum\
    \ = sum + lst[i]\n    elseif lst[i] > 0 then\n      sum = sum + lst[i] * lst[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpneec8ply.lua:11:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmpneec8ply.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpneec8ply.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum=0\n  local i=1\n  while i<=#lst\
    \ do\n    if lst[i]%2==1 then\n      sum=sum+lst[i]\n    end\n    i=i+1\n  end\n\
    \  return sum\nend\nprint(double_the_difference([1,2,3,4,5,6,7,8,9]))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvxmmm7ad.lua:20: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Check list is actually a list first.\n  if not lst:is_list() then\n    return\
    \ 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph5p3nkw9.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- If empty, return 0\n  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2b50uqv9.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v then\n      sum = sum + math.pow(v,2)\n    end\n  end\n  return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpypm7k76w.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] == nil then\n    return 0\n  else\n    return (lst[1]:gsub('.', string.rep('0',\
    \ 8)) .. lst[2]:gsub('.', string.rep('0', 8))):gsub('1+', string.rep('1+', 8)):gsub('9+',\
    \ string.rep('9+', 8))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi65jrdr8.lua:12:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpi65jrdr8.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpi65jrdr8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0 -- Keep a running sum of the squares\n  for i,v in ipairs(lst)\
    \ do\n    if v % 2 == 1 then -- If the number is odd, add it to the running sum\n\
    \      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptriwqgnb.lua:22:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmptriwqgnb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if\
    \ not(is_integer(lst[i]) or lst[i]<0) then\n      sum = sum + lst[i]*lst[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp03k55ixs.lua:12:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp03k55ixs.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp03k55ixs.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v > 0 then\n  \
    \          sum = sum + v\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that multiplies all the numbers in a list.\
    \ \nThe input list can be arbitrarily long.\nFor example, double_the_difference([1,\
    \ 2, 3, 4, 5, 6]) should return 360.\nIf the input list is empty, return 0.\n\
    To solve these problems, use the double_the_difference function.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph_65aro4.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  return lst[1]:sum() * lst[1]:sum() + (lst[2]:sum()\
    \ * lst[2]:sum())\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpif4k4svz.lua:10:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpif4k4svz.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpif4k4svz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if not is_integer(lst[i]) then\n \
    \     return 0\n    end\n    if lst[i] > 0 then\n      sum = sum + lst[i]\n  \
    \  end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbwh1p2rs.lua:11:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpbwh1p2rs.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbwh1p2rs.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ sum = sum + lst[i] * lst[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy5qmbtk.lua:21:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpgy5qmbtk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif not lst then\n\t\treturn 0\n\telse\n\t\tlocal sum = 0\n\t\tfor i = 1, #lst\
    \ do\n\t\t\tif type(lst[i]) == \"number\" and lst[i] % 1 ~= 0 then\n\t\t\t\tsum\
    \ = sum + lst[i]\n\t\t\tend\n\t\tend\n\t\treturn sum\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcobkm9e_.lua:26:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpcobkm9e_.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor _, value in ipairs(lst) do\n\t\tif value == -1 or value%1\
    \ ~= 0 then\n\t\t\t-- ignore negative numbers\n\t\t\t-- ignore non-integers\n\t\
    \t\tsum = sum + value\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oakn3zs.lua:24:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp0oakn3zs.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal ret = 0\n\tif not lst\n\tthen return 0\n\tend\n\tlocal function double_difference(num,\
    \ i, j, lst)\n\t\tif i > j then return 0 end\n\t\tlocal sum_ = i + j + lst[i]\
    \ + lst[j]\n\t\tif sum_ > 100 then return 0 end\n\t\tif lst[i] < 0 and lst[j]\
    \ >= 0 then\n\t\t\tsum_ = sum_ - lst[i] + lst[j]\n\t\telseif lst[i] >= 0 and lst[j]\
    \ < 0 then\n\t\t\tsum_ = sum_ - lst[i] + lst[j]\n\t\tend\n\t\tif sum_ % 2 == 1\
    \ then return 0 end\n\t\treturn sum_ + double_difference(sum_/2, i + 1, j, lst)\n\
    \tend\n\tret = double_difference(1, 0, 1, lst)\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2k3a87uh.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp2k3a87uh.lua:15: in local 'double_difference'\n\t/tmp/tmp2k3a87uh.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp2k3a87uh.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] == nil then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsha8abf1.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  else\n    local sum = 0\n    for i = 2,\
    \ #lst do\n      if math.fmod(lst[i-2], 2) == 1 then\n        sum = sum + lst[i-1]\n\
    \      end\n    end\n    return sum\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphh9kfk9w.lua:14:\
    \ bad argument #1 to 'fmod' (number expected, got nil)\nstack traceback:\n\t/tmp/tmphh9kfk9w.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmphh9kfk9w.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif lst[1] == nil then\n\t\treturn 0\n\telse\n\t\tlocal result = lst[1]\n\t\t\
    for i = 2, #lst do\n\t\t\tif lst[i] % 2 == 1 then\n\t\t\t\tresult = result + lst[i]\n\
    \t\t\tend\n\t\tend\n\t\treturn result\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xiczu4j.lua:26:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp4xiczu4j.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- If list is empty, return 0.\n  if not lst[1] and not lst[2] and lst[3] and\
    \ lst[4] then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4r074itz.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   if #lst == 0 then\n      return 0\n   end\n   for i = 1,\
    \ #lst, 1 do\n      if i % 2 == 1 then\n         sum = sum + lst[i]\n      end\n\
    \   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cm8cvgh.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp5cm8cvgh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0 \n\tfor i = 1,#lst do\n\t\tif isElement(lst[i]) then\n\t\t\tsum\
    \ = sum + lst[i]\n\t\telse\n\t\t\tsum = sum + i * i\n\t\tend\n\tend\n\treturn\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu1gwfq7d.lua:11:\
    \ attempt to call a nil value (global 'isElement')\nstack traceback:\n\t/tmp/tmpu1gwfq7d.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpu1gwfq7d.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif not lst then\n\t\treturn 0\n\tend\n\tlocal sum = 0\n\tfor idx, value in pairs(lst)\
    \ do\n\t\tif not value then\n\t\t\tsum = 0\n\t\telse\n\t\t\tif value % 2 == 1\
    \ then\n\t\t\t\tsum = sum + value\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuj1yzfdj.lua:29:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpuj1yzfdj.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if lst == nil then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo2d0cv2w.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if not lst then\n        return 0\n    end\n    local sum = 0\n    local\
    \ i = 1\n    while i <= #lst and sum + lst[i] <= 0 do\n        sum = sum + lst[i]\n\
    \        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyafnaqvh.lua:25:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpyafnaqvh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local total = 0\n    for i = 1, #lst do\n        if lst[i] ~= 0 then\n  \
    \          if type(lst[i]) == \"number\" and math.floor(lst[i]) ~= lst[i] then\n\
    \                total = total + (lst[i]*lst[i])\n            end\n        end\n\
    \    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pxw65ki.lua:24:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp6pxw65ki.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if type(lst) == 'table' then\n    lst = unpack(lst)\n  end\n  if #lst == 0\
    \ then return 0 else return lst[1]:add(lst[2]):add(lst[3]):add(lst[4]) end\n \
    \ local sum = 0\n  for i=1,#lst do\n    local n = lst[i]\n    if n and type(lst[i])\
    \ == 'number' then\n      sum = sum + n\n      if not n % 2 then sum = sum + n\
    \ end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdls9scr7.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdls9scr7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpdls9scr7.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 else return lst[1]:add(lst[2]):add(lst[3]):add(lst[4])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcsu7s6hp.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Return 0 if there are no elements to process.\n  if #lst == 0 then\n   \
    \ return 0\n  elseif #lst == 1 then\n    return lst[1]^2\n  else\n    local first\
    \ = 1\n    local last = #lst - 1\n    while last > first do\n      local mid =\
    \ math.floor(first + (last - first)/2)\n      if lst[mid]%2 ~= 0 then\n      \
    \  last = mid\n      else\n        first = mid\n      end\n    end\n    return\
    \ lst[first] + lst[last]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpzjt4fn.lua:33:\
    \ expected: 25, actual: 10\nstack traceback:\n\t/tmp/tmptpzjt4fn.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst[1] then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n  \
    \  if lst[i] < 0 then \n      -- Ignore negative numbers, don't add to sum\n \
    \     continue\n    end\n    if lst[i] == 0 then \n      -- Ignore zeros, don't\
    \ add to sum\n      continue\n    end\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuugv5v8u.lua:15: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqjyjirff.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   else\n      return lst[1]*lst[1] + double_the_difference(lst[2:])\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps3vtc_v2.lua:12: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \t-- The sum of squares of the odd numbers in the list.\n\tlocal function sum_square(lst)\n\
    \t\tlocal sum = 0\n\t\tfor _, value in ipairs(lst) do\n\t\t\t-- For every value\
    \ in lst, add it to the sum of the squares.\n\t\t\tif value % 2 == 1 then\n\t\t\
    \t\tsum = sum + value * value\n\t\t\tend\n\t\tend\n\t\treturn sum\n\tend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl94zy86p.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif lst==nil or lst:empty() then return 0 end\n\tlocal sum = 0\n\tfor i=1,#lst-1\
    \ do\n\t\tif not(is_integer(lst[i]) and lst[i]<0) then\n\t\t\tsum = sum + lst[i]*lst[i]\n\
    \t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi00ku_it.lua:9:\
    \ attempt to call a nil value (method 'empty')\nstack traceback:\n\t/tmp/tmpi00ku_it.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi00ku_it.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v ~= 0 then\n \
    \           if v % 2 == 1 then\n                sum = sum + v\n            end\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nThe main function\
    \ above has two parameters: the list that is to be processed, and the variable\
    \ sum that keeps track of the current total squared difference. The function goes\
    \ through the list one item at a time, compares each item to see whether it is\
    \ odd, and adds its squared difference to sum if it is odd.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjog7jk_y.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0\n  for i=1,#lst do\n    if type(lst[i]) == \"number\" and lst[i]\
    \ >= 0 then\n      total = total + lst[i]\n    end\n  end\n  return total\nend\n\
    </cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpslr6at5b.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then\n    return 0;\n  else\n    -- We sum all the even numbers\
    \ (except 0)\n    local sum_even = 0;\n    for i = 1, #lst do\n      if i % 2\
    \ == 0 then\n        sum_even = sum_even + lst[i];\n      elseif lst[i] > 0 then\n\
    \        return sum_even;\n      else\n        return 0;\n      end\n    end\n\
    \  end\nend\n</cell>\n<text>\nProblem 3b\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo3yzf58j.lua:25: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst == nil then return 0 else return lst:reduce(function(acc, n)\n     \
    \ return acc + n*n - (n % 2)\n    end)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4q960w7.lua:9:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmpl4q960w7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl4q960w7.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    sum = sum + lst[i]^2 --(lst[i] + lst[i]^2)^2\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfhmp_xu.lua:23:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpyfhmp_xu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  return #lst * #lst + #lst * double_the_difference(lst[2:#lst])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprxo2s2od.lua:12: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if lst[1] == nil then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph532huq0.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if tonumber(lst[i]) then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps08q58ri.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmps08q58ri.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum=0\n  for i=1,#lst do\n    if ( lst[i]\
    \ > 0 ) then\n      sum=sum+((lst[i]*lst[i]))\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp165v6o3z.lua:23:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp165v6o3z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Base Case: If the list is empty, return 0.\n  if lst==nil then return 0\
    \ end\n  -- Base Case: If the list contains negative numbers or non-integer values,\n\
    \  -- return 0.\n  if all(lst.filter( function(x)  return not (type(x) == \"number\"\
    ) or x ~= round(x) or x < 0 end) ) then return 0 end\n  -- Compute the sum of\
    \ the squares of the first element.\n  local sum_squares = lst[1]:map(function(x)\n\
    \    return x*x\n  end)\n  -- Iterate over the rest of the elements.\n  for i=2,#lst\
    \ do -- Iterate over the remaining elements.\n    sum_squares = sum_squares +\
    \ lst[i]:map(function(x)\n      return x*x\n    end)\n  end\n  -- Return the sum\
    \ of the squares.\n  return sum_squares:sum()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1g01nqzc.lua:13:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp1g01nqzc.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1g01nqzc.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i=1,#lst do\n    if lst[i]%2 == 1 then\n      sum = sum\
    \ + lst[i]*lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmav7obi.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzmav7obi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v:is_integer() then\n      sum = sum + v\n    elseif v:is_float()\
    \ then\n      sum = sum + v\n    else\n      return nil\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplarh8wnd.lua:14:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmplarh8wnd.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmplarh8wnd.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst == nil then\n    return 0\n  elseif #lst == 0 then\n    return 0\n \
    \ else\n    local sum = 0\n    for i = 1, #lst do\n      if type(lst[i]) == 'number'\
    \ then\n        sum = sum + lst[i]\n      end\n    end\n    return sum * sum\n\
    \  end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeyq0uwgi.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif lst[1] > 0 and lst[2] > 0 and lst[3] then\n\t\treturn lst[1]^2 + lst[2]^2\
    \ + lst[3]^2 -- return sum of squares\n\telseif lst[1] > 0 then\n\t\treturn lst[1]^2\
    \ + lst[2]^2 -- return sum of squares\n\telseif lst[2] > 0 then\n\t\treturn lst[1]^2\
    \ + lst[2]^2 -- return sum of squares\n\telse\n\t\treturn 0\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpriwnxxvv.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpriwnxxvv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpriwnxxvv.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then return 0 end\n   local squares = 0\n   for i = 1, #lst do\n\
    \      if lst[i] % 2 == 1 then\n         squares = squares + lst[i]\n      end\n\
    \   end\n   return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4qskl8q.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpf4qskl8q.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if lst[1] > 0 then return end\n    local sum = 0\n    for i=2, #lst do\n\
    \        if i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_bx50cn.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmps_bx50cn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmps_bx50cn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    sum=sum+((i%2)+1)*lst[i]\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw88jdim6.lua:21:\
    \ expected: 25, actual: 14\nstack traceback:\n\t/tmp/tmpw88jdim6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ro98p_7.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst == nil then\n    return 0\n  end\n  \n  if #lst == 0 then\n    return\
    \ 0\n  end\n  \n  local sum = 0\n  local cur = lst[1]\n  for i = 2, #lst do\n\
    \    if cur % 2 == 1 then\n      sum = sum + cur\n    end\n    cur = lst[i]\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxo78pue.lua:32:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpyxo78pue.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if not lst:is_list() then\n      return 0\n   end\n   if #lst == 0 then\n\
    \      return 0\n   end\n   local sum = 0\n   for i=1, #lst do\n      local num\
    \ = lst[i]\n      if num:is_integer() then\n         sum = sum + num\n      elseif\
    \ num:is_float() then\n         if num > 1.0 then\n            sum = sum + num\n\
    \         end\n         local remainder\n         if num < 0.0 then\n        \
    \    num = -num\n            remainder = 1\n         else\n            remainder\
    \ = 0\n         end\n         local temp = num:fix()\n         sum = sum + temp\
    \ * temp\n         if remainder ~= 0 then\n            sum = sum + remainder *\
    \ num\n         end\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwg8e7y4k.lua:9:\
    \ attempt to call a nil value (method 'is_list')\nstack traceback:\n\t/tmp/tmpwg8e7y4k.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwg8e7y4k.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \t-- Initialize our total to 0\n\tlocal total = 0\n\t\n\t-- Check to see if the\
    \ list has any items in it. If it has none, return 0.\n\tif not lst  then\n\t\t\
    return 0\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph4dmg6qv.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local s = 0\n  for i, v in ipairs(lst) do\n    if not integer_or_positive(v)\
    \ then break end\n    local d = v % 2\n    if d ~= 0 then\n      s = s + v\n \
    \   end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp78rcnuw1.lua:11:\
    \ attempt to call a nil value (global 'integer_or_positive')\nstack traceback:\n\
    \t/tmp/tmp78rcnuw1.lua:11: in local 'candidate'\n\t/tmp/tmp78rcnuw1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst == nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if math.floor( lst[i] ) ~= lst[i] or lst[i] < 0 then\n      return 0\n  \
    \  end\n    sum = sum + lst[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bq4yni8.lua:26:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmp6bq4yni8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if lst==nil then\n        return 0\n    end\n    local sum = 0\n    for i=1,#lst\
    \ do\n        if math.floor(lst[i]) then\n            sum = sum + math.pow(math.floor(lst[i]),2)\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdaxw8xcl.lua:25:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpdaxw8xcl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- lst = lst or {} -- If lst is nil, set lst to {}\n  -- The sum of the squares\
    \ of the odd numbers in the input list\n  -- The sum of the squares of the even\
    \ numbers in the input list\n  -- The difference between the sums of the squares\
    \ of the odd numbers in the input list\n  -- The difference between the sums of\
    \ the squares of the even numbers in the input list\n  local sum_squares_odd =\
    \ #lst * #lst \n  local sum_squares_even = #lst * #lst \n  local sum_of_squared_odd\
    \ = 0 -- The sum of the squares of the odd numbers \n  local sum_of_squared_even\
    \ = 0 -- The sum of the squares of the even numbers \n  -- The difference between\
    \ the sums of the squares of the odd numbers in the input list\n  -- The difference\
    \ between the sums of the squares of the even numbers in the input list\n  --\
    \ The product of the numbers in the input list except the number 0\n  local diff_squares_odd\
    \ = 1 -- The difference between the sums of the squares of the odd numbers \n\
    \  local diff_squares_even = 1 -- The difference between the sums of the squares\
    \ of the even numbers \n  local prod_of_numbers_except_zero = 1 -- The product\
    \ of the numbers in the input list except the number 0 \n  -- The product of the\
    \ numbers in the input list except the number 0 \n  local function sum_of_squares(num)\n\
    \    sum_of_squared_odd = sum_of_squared_odd + num * num\n    sum_of_squared_even\
    \ = sum_of_squared_even + num * num\n  end\n  -- The product of the numbers in\
    \ the input list except the number 0\n  -- The product of the numbers in the input\
    \ list except the number 0 \n  local function product_except_zero(num)\n    prod_of_numbers_except_zero\
    \ = prod_of_numbers_except_zero * num\n  end\n  local function difference(num)\n\
    \    diff_squares_odd = diff_squares_odd + (num * num)\n    diff_squares_even\
    \ = diff_squares_even + (num * num)\n  end\n  -- The sum of the squares of the\
    \ odd numbers in the input list\n  -- The sum of the squares of the even numbers\
    \ in the input list\n  -- The difference between the sums of the squares of the\
    \ odd numbers in the input list\n  -- The difference between the sums of the squares\
    \ of the even numbers in the input list\n  -- The product of the numbers in the\
    \ input list except the number 0\n  -- The product of the numbers in the input\
    \ list except the number 0 \n  local function sum_of_squares_products(num)\n \
    \   sum_of_squared_odd = sum_of_squared_odd + num * num\n    sum_of_squared_even\
    \ = sum_of_squared_even + \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprenpxf1e.lua:47: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal total = 0\n\tlocal count = 0\n\tfor i, v in ipairs(lst) do\n\t\ttotal\
    \ = total + (v % 2)\n\t\tcount = count + 1\n\t\tif total > 0 then\n\t\t\tif count\
    \ == 1 then\n\t\t\t\treturn total\n\t\t\telse\n\t\t\t\treturn (total - 1)\n\t\t\
    \tend\n\t\telse\n\t\t\tif count == 1 then\n\t\t\t\treturn 0\n\t\t\telse\n\t\t\t\
    \treturn 0\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8l_94s8.lua:33:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpz8l_94s8.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local count = 0\n  if #lst > 0 then\n    local first\n   \
    \ for _, first in ipairs(lst) do\n      if first and first >= 0 then\n       \
    \ if first % 2 then\n          sum = sum + first\n          count = count + 1\n\
    \        end\n      end\n    end\n    if count > 0 then\n      sum = sum + sum\
    \ * count / 2\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh52hehd.lua:32:\
    \ expected: 25, actual: 18\nstack traceback:\n\t/tmp/tmpsh52hehd.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1,#lst do\n    if lst[i] > 0 then\n      if ((not\
    \ sum) or (sum < lst[i] - 1)) then\n        sum = sum + lst[i]\n      end\n  \
    \  end\n  end\n  if #lst > 0 then\n    sum = sum + double_the_difference(lst)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpap0eojcq.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpap0eojcq.lua:18: in upvalue 'double_the_difference'\n\
    \t/tmp/tmpap0eojcq.lua:18: in upvalue 'double_the_difference'\n\t/tmp/tmpap0eojcq.lua:18:\
    \ in upvalue 'double_the_difference'\n\t/tmp/tmpap0eojcq.lua:18: in upvalue 'double_the_difference'\n\
    \t/tmp/tmpap0eojcq.lua:18: in upvalue 'double_the_difference'\n\t/tmp/tmpap0eojcq.lua:18:\
    \ in upvalue 'double_the_difference'\n\t/tmp/tmpap0eojcq.lua:18: in upvalue 'double_the_difference'\n\
    \t/tmp/tmpap0eojcq.lua:18: in upvalue 'double_the_difference'\n\t/tmp/tmpap0eojcq.lua:18:\
    \ in upvalue 'double_the_difference'\n\t...\n\t/tmp/tmpap0eojcq.lua:18: in local\
    \ 'candidate'\n\t/tmp/tmpap0eojcq.lua:27: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.200 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i=1,#lst do\n    if lst[i] < 0 then\n      sum = sum +\
    \ 0 + lst[i]\n      continue\n    end\n    if math.floor(lst[i]) == lst[i] then\n\
    \      sum = sum + math.floor(lst[i]) * math.floor(lst[i])\n    else\n      sum\
    \ = sum + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf6dsy4rw.lua:14: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal result = 0\n\t\n\tfor i, v in ipairs(lst) do\n\t\tif v % 2 == 1 then\n\
    \t\t\tresult = result + v\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8inhpb8l.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return end\n  local sum = 0\n  for i = 1, #lst, 1 do\n    local\
    \ value = lst[i]\n    if value <= 0 then return end\n    if i%2 ~= 0 then sum\
    \ = sum + value end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc47fzwd.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmplc47fzwd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   end\n   if lst[1] < 0 then\n      lst[1]\
    \ = -lst[1]\n   end\n   local sum = 0\n   for i = 2, #lst do\n      if lst[i]\
    \ % 2 == 1 then\n         sum = sum + lst[i] * lst[i]\n      else\n         return\
    \ 0\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1v6_b335.lua:30:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp1v6_b335.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   if lst~=nil and #lst>0 then\n      local num\n      for\
    \ i=1,#lst,1 do\n         num = lst[i]\n         if num < 0 then\n           \
    \ num = - num\n         end\n         sum = sum + (num / 2)\n         if num %\
    \ 2 == 1 then\n            sum = sum + num\n         end\n      end\n   else\n\
    \      sum = 0\n   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpietjv31t.lua:32:\
    \ expected: 25, actual: 9.5\nstack traceback:\n\t/tmp/tmpietjv31t.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif not lst:len() then return 0 end\n\tlocal sum = 0\n\tlocal last = 0\n\tlocal\
    \ i = 1\n\twhile i <= #lst do\n\t\tlocal x = lst[i]\n\t\tif x >= 0 and x % 2 ==\
    \ 1 then\n\t\t\tif sum + x ~= last then sum = sum + x end\n\t\telseif x <= 0 and\
    \ x % 2 == 0 then\n\t\t\tif last ~= 0 then\n\t\t\t\tsum = sum + last\n\t\t\tend\n\
    \t\telse\n\t\t\tlast = last\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0n492k7.lua:9:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpu0n492k7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu0n492k7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  local last_non_negative =\
    \ lst[1]\n  for i=2, #lst do\n    local x = lst[i]\n    if x ~= 0 and x ~= last_non_negative\
    \ then\n      sum = sum + x*x\n    end\n    last_non_negative = x\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6i3z7td.lua:26:\
    \ expected: 25, actual: 16\nstack traceback:\n\t/tmp/tmpe6i3z7td.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] == nil then\n    return 0\n  else\n    return lst[1] + lst[2] + double_the_difference(lst[3:end])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpamr_ibo8.lua:12: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if not lst then return 0 else double_the_difference(lst[1:])\n   elseif #lst\
    \ == 0 then return 0 end\n   \n   local sum = 0\n   for i, v in ipairs(lst) do\n\
    \      if i % 2 == 1 then sum = (sum + v) end\n   end\n   return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8ks814r0.lua:9: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local i = 1\n  while i < #lst and lst[i] > 0 do\n    if lst[i]\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n    i = i + 1\n  end\n  return\
    \ sum\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_47_de6g.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return \n    if #lst == 0 then\n      0\n    else\n      local sum_of_squares\
    \ = 0\n      for i = 1, #lst do\n        sum_of_squares = sum_of_squares + lst[i]^2\n\
    \        if lst[i]%2 ~= 0 then\n          break\n        end\n      end\n    \
    \  return sum_of_squares\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa2zfqzbq.lua:10: unexpected symbol near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  local i = 1\n  while i <=\
    \ #lst do sum = sum + lst[i-1]*lst[i-1] -- O(n)\n    i = i + 1 end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vw4bsat.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp2vw4bsat.lua:12: in local 'candidate'\n\t/tmp/tmp2vw4bsat.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if not lst then\n      return 0\n   end\n   local sum = 0\n   for i = 1, #lst,\
    \ 2 do\n      if lst[i] ~= 0 and lst[i] % 2 == 1 then\n         sum = sum + lst[i]*lst[i]\n\
    \      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjbcyboo.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzjbcyboo.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i, x in ipairs(lst)\
    \ do\n    local sign = math.abs(x)\n    if sign==0 or sign==math.tointeger(x)\
    \ then\n      if x==0 then\n        sum = 0\n      else\n        sum = sum + x\n\
    \      end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fagspx8.lua:30:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmp0fagspx8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return lst[#lst]:map(function(x) return x * x end):reduce(function(x, y) return\
    \ x + y end)\nend\nprint(double_the_difference([1, 2, 3]))\nprint(double_the_difference([-1,\
    \ -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n\
    print(double_the_difference([]))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfkh2qzqe.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      total\
    \ = total + lst[i] * lst[i]\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2g1pv4tq.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp2g1pv4tq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph2_5ve5y.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local total = 0\n    if #lst == 0 then\n        return 0\n    end\n    for\
    \ i = 1, #lst do\n        if i % 2 == 1 then\n            total = total + lst[i]\n\
    \        end\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9ma1qn8.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp_9ma1qn8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v ~= 0 and v ~=\
    \ math.floor(v) then return 0 end\n        sum = sum + v\n    end\n    return\
    \ sum\nend\n</code>\nEDIT: \nI used list comprehension to remove the loop and\
    \ return the sum at the end. \n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3wta1nhl.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      sum =\
    \ 0\n      break\n    elseif v % 2 == 1 then\n      sum = sum + v\n    end\n \
    \ end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4_74h5s.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpw4_74h5s.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for i = 1,#lst do\n      if lst[i] >= 0 then\n         if\
    \ math.floor(lst[i]) % 2 == 1 then\n            sum = sum + lst[i]\n         end\n\
    \      else\n         sum = sum + 0\n      end\n   end\n   return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gncnohp.lua:26:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp_gncnohp.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then return 0 end\n   local total = 0\n   for _, num in ipairs(lst)\
    \ do\n      if num > 0 then\n         total = total + num^2\n      elseif num\
    \ < 0 then\n         total = total + (-num)^2\n      else\n         total = total\
    \ + 1\n      end\n   end\n   return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9kev79zx.lua:27:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp9kev79zx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if type(lst[i]) == \"number\" then\n      local diff = lst[i] - lst[i\
    \ - 1]\n      if diff % 2 == 1 then\n        sum = sum + diff * diff\n      end\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpml1g1yo_.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpml1g1yo_.lua:15: in local 'candidate'\n\t/tmp/tmpml1g1yo_.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0 -- Initialize total\n  for _, value in ipairs(lst) do -- For\
    \ every element in the list\n    if math.floor(value) -- And if it is an integer...\n\
    \    then\n      total = total + value -- Add it to the total\n    end\n  end\n\
    \  return total -- Return the total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3v7k0r0g.lua:23:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmp3v7k0r0g.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if not (i%2) then\n      sum = sum + v\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rdbt2ok.lua:25:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp8rdbt2ok.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif lst[1] == nil then\n\t\treturn 0\n\telse\n\t\treturn 1 + math.floor(math.sqrt(math.pow(lst[1],\
    \ 2) + math.pow(lst[2], 2)))\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppebzeilb.lua:20:\
    \ expected: 25, actual: 7\nstack traceback:\n\t/tmp/tmppebzeilb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in pairs(lst) do\n    if v <= 0 then return end\n\
    \    if math.floor(v) ~= v then return end\n    sum = sum + v*v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0dhe8zh.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpn0dhe8zh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif not lst[1] then\n\t\treturn 0\n\telse\n\t\tlocal sum = 0\n\t\tlocal i = 1\n\
    \t\twhile i <= #lst do\n\t\t\tif lst[i] % 2 == 1 then\n\t\t\t\tsum = sum + lst[i]\n\
    \t\t\telse\n\t\t\t\tsum = sum + lst[i] * lst[i]\n\t\t\tend\n\t\t\ti = i + 1\n\t\
    \tend\n\t\treturn sum\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcx1tegr.lua:30:\
    \ expected: 25, actual: 21\nstack traceback:\n\t/tmp/tmpzcx1tegr.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst == 0 then\n        return 0\n    end\n    \n    local ret = 0\n \
    \   for i = 1, #lst do\n        if tonumber(lst[i]) ~= nil then\n            if\
    \ tonumber(lst[i]) % 2 == 1 then\n                ret = ret + tonumber(lst[i])\n\
    \            end\n        end\n    end\n    \n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzd1pts56.lua:29:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpzd1pts56.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if type(lst[i]) == \"number\" then\n      if lst[i] > 0 then\n     \
    \   if lst[i] % 2 == 1 then\n          sum = sum + lst[i]\n        end\n     \
    \ end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92cwpe5m.lua:29:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp92cwpe5m.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local result = lst[1]\n  for i = 2, #lst do\n    result = result + lst[i]\n\
    \  end\n  if #lst == 0 then return 0 end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilhv2tse.lua:21:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmpilhv2tse.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0\n  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpovdcv_0t.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if num >=\
    \ 0 then\n      sum = sum + num * num\n    elseif num == 0 then\n      sum = 0\n\
    \    else\n      sum = -sum\n    end\n  end\n  return sum\nend\n</code>\n<|/ a\
    \ tags=lua,functional-programming dscore=2 |>\n<| c |>\nThanks for the answer!\
    \ I think it really helped me understand how to go about this problem. I'm learning\
    \ Lua now and it's amazing what you can accomplish without writing a bunch of\
    \ boilerplate code to solve the problem.\n<|/ c |>\n<| c |>\nHappy to help! If\
    \ this answer was useful, you can upvote it (by clicking on the grey up arrow\
    \ next to it) and if you could accept it by clicking the grey check mark next\
    \ to it, it would be the best answer.\n<|/ c |>\n<| a dscore=2 |>\nIt is a simple\
    \ functional problem to solve using functional programming. Here's how you do\
    \ it with functional programming in Lua 5.2:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptr4hctjc.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst < 1 then\n      return 0\n   end\n   local sum = 0\n   for i = 1,\
    \ #lst do\n      if i % 2 == 1 then\n         sum = sum + lst[i]\n      end\n\
    \   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoob7ul4m.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpoob7ul4m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tlocal i = 0\n\t\n\tif lst[i] == nil then return 0 end\n\t\n\
    \t-- Calculate the sum of the list except the number at index i\n\t-- The sum\
    \ of all even numbers is the sum of the odd numbers * 2\n\t-- The sum of all odd\
    \ numbers is the sum of the even numbers * 2\n\t-- The sum of all even and odd\
    \ numbers is the sum of the number\n\t-- divided by 2\n\tfor i, v in pairs(lst)\
    \ do\n\t\tif v ~= nil then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\t\n\t-- The\
    \ sum of the odd numbers is sum - sum / 2\n\t-- The sum of the even numbers is\
    \ sum - sum / 2\n\t-- The sum of the even and odd numbers is sum\n\t-- The sum\
    \ of the numbers is sum / 2\n\t-- The sum of the odd numbers is (sum / 2)^2\n\t\
    -- The sum of the even numbers is (sum / 2)^2\n\t-- The sum of the even and odd\
    \ numbers is (sum / 2)^2\n\t-- The sum of the numbers is (sum / 2)^2\n\t-- The\
    \ sum of the odd numbers is (sum / 2)^2\n\t-- The sum of the even numbers is (sum\
    \ / 2)^2\n\t-- The sum of the even and odd numbers is (sum / 2)^2\n\t-- The sum\
    \ of the numbers is (sum / 2)^2\n\t-- The sum of the odd numbers is (sum / 2)^2\n\
    \t-- The sum of the even numbers is (sum / 2)^2\n\t-- The sum of the even and\
    \ odd numbers is (sum / 2)^2\n\t-- The sum of the numbers is (sum / 2)^2\n\t--\
    \ The sum of the odd numbers is (sum / 2)^2\n\t-- The sum of the even numbers\
    \ is (sum / 2)^2\n\t-- The sum of the even and odd numbers is (sum / 2)^2\n\t\
    -- The sum of the numbers is (sum / 2)^2\n\t-- The sum of the odd numbers is (sum\
    \ / 2)^2\n\t-- The sum of the even numbers is (sum / 2)^2\n\t-- The sum of the\
    \ even and odd numbers is (sum / 2)^2\n\t-- The sum of the numbers is (sum / 2)^2\n\
    \t-- The sum of the odd numbers is (sum / 2)^2\n\t-- The sum of the even numbers\
    \ is (sum / 2)^2\n\t-- The sum of the even and odd numbers is (sum / 2)^2\n\t\
    -- The sum of the numbers is (sum / 2)^2\n\t-- \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpob4mdtbj.lua:67: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] == nil then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdscmk_6w.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local counter = 0\n  for i, x in ipairs(lst) do\n    if x\
    \ ~= 0 and x ~= nil then\n      local result = x * x\n      sum = sum + result\n\
    \      counter = counter + 1\n    end\n  end\n  if counter > 0 then\n    return\
    \ sum\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkd0rx9tv.lua:28:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpkd0rx9tv.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then return 0 end\n  local sum = 0\n  for i = 1, lst:len()\
    \ do\n    sum = sum + (lst[i] * lst[i])\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcq7jwjsk.lua:9:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpcq7jwjsk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcq7jwjsk.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum_total = 0\n  for index, v in pairs(lst) do\n    if v > 0 then\n \
    \     if v %2 == 1 then\n        sum_total = sum_total + v\n      else\n     \
    \   sum_total = sum_total + v * v\n      end\n    end\n  end\n  return sum_total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjk27s0n.lua:26:\
    \ expected: 25, actual: 21\nstack traceback:\n\t/tmp/tmppjk27s0n.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 0, #lst do\n        local num = lst[i]\n     \
    \   if num == 0 or not is_integer(num) then\n            sum = 0\n           \
    \ break\n        end\n        sum = sum + num * num\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyl6iqjmr.lua:12:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpyl6iqjmr.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpyl6iqjmr.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  \n  if #lst > 0 then\n    for i = 1, #lst do\n      if math.floor(lst[i])\
    \ ~= lst[i] then\n        sum = sum + lst[i] * lst[i]\n      end\n    end\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaoqfqign.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, x in ipairs(lst) do\n    if x ~= 0 then\n      sum\
    \ = sum + x\n    end\n    if x%2==0 then\n      sum = 0\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2ivauoh.lua:25:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpj2ivauoh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  elseif #lst==0 then\n    return 0\n  else\n\
    \    return lst[1]*(lst[1]+2)/2+lst[2]\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgo9ttfmw.lua:22:\
    \ expected: 25, actual: 21.5\nstack traceback:\n\t/tmp/tmpgo9ttfmw.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   -- your code here\n   if #lst == 0 then\n      return 0\n   else\n      local\
    \ sum = 0\n      for i = 1, #lst do\n         if lst[i] >= 0 then\n          \
    \  sum = sum + lst[i] * lst[i]\n         end\n      end\n      return sum\n  \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfau6kleo.lua:27:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpfau6kleo.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst==0 then return 0 end\n    local sum=0\n    for i=1,#lst do\n    \
    \    if lst[i]%2==1 then sum=sum+lst[i] end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlyvnneh.lua:21:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpnlyvnneh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tif v ~= 0 then\n\t\t\tsum =\
    \ sum + v * v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptiqaapgu.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmptiqaapgu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    local is_odd_value\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjh1t8m65.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] > 0 then\n     \
    \       sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns a list where each element\
    \ is the product of all inputted numbers, except the first one.\nHINT: you can\
    \ use a double for loop to go through the list.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd_axcom3.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local total = 0\n  for i=1,#lst do\n    if\
    \ not is_even(lst[i]) then\n      total = total + (lst[i] * lst[i])\n    end\n\
    \  end\n  return total\nend\n</code>\n<|/ a tags=lua,lua-table |>\n<| c |>\nThank\
    \ you for your answer. Your solution works perfectly. However I wonder if you\
    \ could point me to a resource where I can learn how to solve these kinds of problems.\
    \ Thanks again.\n<|/ c |>\n<| c |>\nYou can search online for \"Lua pattern matching\"\
    \ and \"Lua pattern matching\" should help you. Also check out the Lua reference\
    \ manual.\n<|/ c |>\n<| a tags=lua,lua-table dscore=0 |>\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvq89yte2.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  if #lst > 0 then\n    local i = 1\n    while i <= #lst do\n\
    \      if tonumber(lst[i]) % 2 ~= 0 then\n        sum = sum + tonumber(lst[i])\n\
    \      end\n      i = i + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqv7mcgh.lua:26:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpgqv7mcgh.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil or lst==[] then return 0 end\n  return lst[1]+lst[2]*2+lst[3]*4\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbld31kny.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsp56y8oo.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  if #lst > 0 then\n    for i=1,#lst do\n      if lst[i] > 0\
    \ and lst[i] % 2 == 1 then\n        sum = sum + lst[i] * lst[i]\n      end\n \
    \   end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return 0 end\n  local sum = 0 \n  for _, v in ipairs(lst) do\
    \ \n    if v % 2 == 1 then sum = sum + v end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplj7q4bh6.lua:21:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmplj7q4bh6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if math.floor(lst[i]) == lst[i] then\n\
    \      if lst[i] % 2 ~= 0 then\n        sum = sum + lst[i]\n      end\n    else\n\
    \      return 0\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9po_jyz8.lua:26:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp9po_jyz8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if type(lst[i])=='number'\
    \ and lst[i] > 0 then\n      sum = sum + lst[i] * lst[i]\n    end\n  end\n  return\
    \ sum\nend\n</cell>\n<cell>\ndouble_the_difference([-1,-2,3,0,7,1,9,0,5,6,4])\n\
    </cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjb0vnv1r.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1yjnmlg0.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v < 0 or (math.type(v)\
    \ ~= 'number' and v % 1 ~= 0) then\n      sum = 0\n      break\n    else\n   \
    \   sum = sum + v\n    end\n  end\n  return sum\nend\n</cell>\n<text>\nProblem\
    \ 4\nImplement the function my_concat that concatenates two given lists.\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkp6t9cke.lua:20: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif not lst then return 0 end\n\tlocal sum = 0\n\tlocal num\n\tfor i=1,#lst do\n\
    \t\tnum = lst[i]\n\t\tif num < 0 then break end\n\t\tif i%2 == 1 then\n\t\t\t\
    sum = sum + num * num\n\t\telse\n\t\t\tsum = sum + num\n\t\tend\n\tend\n\treturn\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipl_lah5.lua:28:\
    \ expected: 25, actual: 29\nstack traceback:\n\t/tmp/tmpipl_lah5.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if lst==nil then\n      return 0\n   end\n   local s=0\n   local pos=1\n \
    \  for n in lst:gmatch(\"%d+\") do\n      if n>0 then\n         if n%2==1 then\n\
    \            s=s+(n-pos)^2\n         end\n         pos=pos+1\n      end\n   end\n\
    \   return s\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,lua,lua-table\
    \ |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxjoay0_v.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst do\n\
    \    local elem = lst[i]\n    if elem % 2 == 0 then\n      sum = sum + elem\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9a7vnrqb.lua:26:\
    \ expected: 25, actual: 4\nstack traceback:\n\t/tmp/tmp9a7vnrqb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    if v ~= 0 then\n      sum =\
    \ sum + math.pow(v,2)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbh25gsw7.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpbh25gsw7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if lst==nil then\n        return 0\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi6jspkao.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal total = 0\n\tfor i = 1, #lst, 2 do\n\t\tif not lst[i] then\n\t\t\tbreak\n\
    \t\tend\n\t\ttotal = total + lst[i] * lst[i]\n\tend\n\treturn total\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bwx4adb.lua:24:\
    \ expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmp9bwx4adb.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    if lst[1] ~= nil then\n        for i = 1, #lst do\n  \
    \          if lst[i] ~= nil and (type(lst[i]) == 'number' and lst[i] > 0 and lst[i]\
    \ % 2 == 1) then\n                sum = sum + lst[i]\n            end\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdoq8lf_.lua:24:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpgdoq8lf_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst:IsArray() then\n    return 0\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx4o5iwbl.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if lst==nil then\n        return 0\n    end\n    return lst[1]^2+lst[2]^2+lst[3]^2+lst[4]^2+lst[5]^2+lst[6]^2+lst[7]^2+lst[8]^2+lst[9]^2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx630zhqi.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpx630zhqi.lua:12: in local 'candidate'\n\t/tmp/tmpx630zhqi.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst do\n\
    \    if lst[i]==0 then\n      sum = sum + 0\n    else\n      sum = sum + lst[i]*lst[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44vatd50.lua:27:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmp44vatd50.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if type(lst[i]) == \"number\" and math.floor(lst[i]) ~= lst[i] then\n\
    \      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwe5sqft.lua:25:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpwwe5sqft.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if lst==nil then\n      return 0\n   end\n   local n=0\n   local sum=0\n \
    \  for i=1,#lst do\n      if lst[i] % 2==0 then\n         sum=sum+lst[i]*lst[i]\n\
    \      else\n         n=n+1\n         if n==1 then\n            sum=sum+lst[i]*lst[i]\n\
    \         else\n            sum=sum+lst[i]\n         end\n      end\n   end\n\
    \   return sum\nend\n</code>\n<|/ a tags=lua,lua-table dscore=0 |>\n<| c |>\n\
    You don't need the if/else inside the loop. Just `sum=sum+lst[i]*lst[i]` will\
    \ do.\n<|/ c |>\n<| a tags=lua,lua-table dscore=0 |>\nAs a followup to my other\
    \ answer, here's a function that returns only the numbers in the given list that\
    \ are even.\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpav96zcvd.lua:28: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in pairs(lst) do\n        if v then\n       \
    \     sum = sum + v\n        end\n    end\n    return sum * (sum / 2)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4te0099.lua:22:\
    \ expected: 25, actual: 40.5\nstack traceback:\n\t/tmp/tmpb4te0099.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq5u24gb1.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum_of_squares = 0\n  local num_sum = 0\n  for i = 1, #lst do\n    --\
    \ If this number is odd, add it to the sum of squares.\n    -- If this number\
    \ is not odd, add it to the number of numbers.\n    -- If the number is negative\
    \ or not an integer, ignore it.\n    if math.floor(lst[i]) ~= lst[i] or #lst[i]\
    \ < 0 then break end\n    sum_of_squares = sum_of_squares + lst[i] * lst[i]\n\
    \    num_sum = num_sum + 1\n  end\n  if #lst == 0 then return 0 end\n  return\
    \ num_sum > 1 and num_sum * sum_of_squares / num_sum or 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaq14wd47.lua:15:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpaq14wd47.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpaq14wd47.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif not lst then return 0 end\n\tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tif\
    \ lst[i] > 0 and not (type(lst[i]) == \"number\" and math.floor(lst[i]) == lst[i])\
    \ then return 0 end\n\t\tsum = sum + lst[i]\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgya0r3bw.lua:22:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmpgya0r3bw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if lst[1] == nil then return 0 end\n    if lst[1] == nil then return 0 end\n\
    \    local sum = 0 \n    for i = 2, #lst do\n        if lst[i] > 0 and lst[i]\
    \ % 2 ~= 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprpe2squ.lua:24:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpprpe2squ.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] == nil then return 0 end\n  local num = 0\n  local length = #lst\n\
    \  for i=1,length do\n    if type(lst[i]) == \"number\" then\n      if lst[i]\
    \ > 0 then\n        num = num + lst[i]*lst[i]\n      else\n        num = num +\
    \ 0\n      end\n    elseif type(lst[i]) == \"table\" then\n      num = num + double_the_difference(lst[i])\n\
    \    end\n  end\n  return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0_q0b1v.lua:30:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpp0_q0b1v.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if not lst[1] then\n        return 0\n    end\n    return lst[1]:reduce(function(a,\
    \ b) return a + b end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpavr2iym4.lua:12:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpavr2iym4.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpavr2iym4.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5xk6ts06.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   -- Base Case\n   if #lst == 0 then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_ff1uo4q.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal ret = 0\n\t\n\tfor i = 1, #lst do\n\t\tret = ret + lst[i]\n\t\tif i >\
    \ 1 then\n\t\t\tif ret % 2 == 1 then\n\t\t\t\tret = ret - lst[i]\n\t\t\tend\n\t\
    \tend\n\tend\n\t\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcev90oww.lua:27:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpcev90oww.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        if ((lst[i]%2) ~= 0) then\n \
    \           sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaoc613ey.lua:22:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpaoc613ey.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local total = 0\n   for i = 1, #lst do\n      if type(lst[i]) == \"number\"\
    \ and math.floor(lst[i]) ~= lst.[i] then\n         total = total + lst[i]\n  \
    \    end\n   end\n   return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzi_79zc5.lua:11: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local result = {}\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      if type(lst[i])\
    \ == \"table\" then\n        table.insert(result, lst[i]:map(function(x)\n   \
    \       return x*x\n        end))\n      else\n        table.insert(result, lst[i]*lst[i])\n\
    \      end\n    end\n  end\n  return sum(result)\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi3l57ifj.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if tonumber(lst[i]) then sum = sum + tonumber(lst[i]) end\n  end\n  return sum\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk2uifv0.lua:21:\
    \ expected: 25, actual: 81\nstack traceback:\n\t/tmp/tmpjk2uifv0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if not lst then\n      return 0\n   end\n   local sum = 0\n   for i = 1, #lst\
    \ do \n      if i == 1 then\n         sum = sum + lst[i]\n      elseif i % 2 ==\
    \ 1 then\n         sum = sum + lst[i]\n      end\n   end\n   return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9unazpr.lua:27:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpu9unazpr.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if type(lst) == 'table' and #lst==0 then\n        return 0\n    end\n   \
    \ local total = 0\n    for _, v in ipairs(lst) do\n        if v >= 0 and v %2\
    \ == 1 then\n            total = total + v\n        end\n    end\n    return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgl8cvdml.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpgl8cvdml.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] < 0 or type(lst[i]) ~= 'number' then break end\n    if i % 2 == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_abqwi8.lua:24:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpo_abqwi8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if type(lst[i]) == \"number\" then\n\
    \      if lst[i] > 0 and lst[i] % 2 == 1 then \n        sum = sum + lst[i]\n \
    \     end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglcmxal4.lua:24:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpglcmxal4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if lst:len() ~= 0 then\n        local squares = 0\n        for i = 1, lst:len()\
    \ do\n            local x = lst:index(i)\n            if x%2~=0 then\n       \
    \         squares=squares+x\n            end\n        end\n        return squares\n\
    \    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3b0mi60i.lua:9:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp3b0mi60i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3b0mi60i.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then return 0 end\n   local sum = 0\n   for i = 1, #lst do\n\
    \      if i % 2 == 1 then\n         sum = sum + lst[i]\n      elseif i < #lst\
    \ - 1 then\n         sum = sum + lst[i]\n      end\n   end\n   return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf651a6w.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpvf651a6w.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if not lst  then\n      return 0\n   end\n   local sum = 0\n   for i = 1,\
    \ #lst do\n      if type(lst[i]) == 'number' then\n         if lst[i] ~= math.floor(lst[i])\
    \ then\n            sum = sum + lst[i]*lst[i]\n         end\n      else\n    \
    \     if lst[i] ~= math.floor(lst[i]) or lst[i] ~= math.ceil(lst[i]) then\n  \
    \          sum = sum + lst[i]*lst[i]\n         end\n      end\n   end\n   return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm88b6hd1.lua:31:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpm88b6hd1.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  if #lst == 1 then return lst[1] end\n  local\
    \ sum = 0\n  local count = 0\n  for i = 1, #lst, 1 do\n    if lst[i]%2 == 0 then\
    \ \n      sum = sum + lst[i]\n      count = count+1\n    else\n      sum = sum\
    \ + lst[i]*lst[i]\n      count = count+1\n    end\n  end\n  if count == 0 then\
    \ return 0 end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5wee0p8.lua:30:\
    \ expected: 25, actual: 29\nstack traceback:\n\t/tmp/tmpz5wee0p8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i]*lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchosh8pm.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpchosh8pm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local n = 1\n  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(n,\
    \ 2) + (lst[i] and 1 or 0)\n    n = n + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jkezrr_.lua:22:\
    \ expected: 25, actual: 7\nstack traceback:\n\t/tmp/tmp8jkezrr_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return lst:filter(function(x) return x:int > 0 end):map(function(x) \n    math.pow(x.int,\
    \ 2))\n  :sum()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc3dxqkd2.lua:9: function arguments expected near '>'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif not lst or #lst == 0 then return 0 end\n\tlocal sq = 0\n\tfor i = 1, #lst\
    \ do\n\t\tif lst[i] % 2 ~= 0 then\n\t\t\tsq = sq + lst[i]\n\t\tend\n\tend\n\t\
    return sq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurnb8c98.lua:23:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpurnb8c98.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst == nil then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbvh6c5kd.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ sum = sum + lst[i]*lst[i]\n  end\n  return sum\nend\n</cell>\n<text>\nExercise:\
    \ Part 2\nWrite a function that takes two vectors and returns a vector that contains\
    \ the dot product of every pair of vectors in the list. For example, if you are\
    \ given two lists x = [[1,2],[3,4]] and y = [[5,6],[7,8]] your function should\
    \ return [5,24,12,38,30,42,18,48,26,12,20,16,12].\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdkfdw2le.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if type(lst) == \"table\" then\n        for i = 1,#lst do\n            if\
    \ type(lst[i]) == \"number\" then\n                if lst[i] % 2 == 1 then\n \
    \                   return lst[i]\n                end\n            end\n    \
    \    end\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ifshano.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp7ifshano.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal total = 0\n\tfor i, v in ipairs(lst) do\n\t\tif v ~= nil and v:isNumber()\
    \ and (v % 2 == 1) then\n\t\t\ttotal = total + v\n\t\tend\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkfh2dzi6.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, x in ipairs(lst) do\n    local x_float = tonumber(x)\n\
    \    if x_float == x then\n      sum = sum + x\n    elseif x_float > 0 and x_float\
    \ % 2 == 1 then\n      sum = sum + x_float\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquye3ktt.lua:25:\
    \ expected: 25, actual: 9\nstack traceback:\n\t/tmp/tmpquye3ktt.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  assert(type(lst) == 'table' and #lst > 0, 'double_the_difference() expects\
    \ a list of numbers')\n  -- return the sum of the squares of the odd numbers in\
    \ the list, \n  -- ignoring negative numbers\n  if #lst > 0 then\n    local sum\
    \ = 0\n    for i=1,#lst do\n      if math.floor(lst[i]) ~= lst[i] then \n    \
    \    sum = sum + math.pow(lst[i], 2)\n      end\n    end\n    return sum\n  else\n\
    \    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkpc_dea.lua:9:\
    \ double_the_difference() expects a list of numbers\nstack traceback:\n\t/tmp/tmpbkpc_dea.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbkpc_dea.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if type(lst[i]) == \"number\" then\n\
    \      if lst[i] < 0 then\n        sum = 0\n        break\n      elseif lst[i]\
    \ % 2 ~= 0 then\n        sum = sum + lst[i]\n      end\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qr6rhpw.lua:27:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp6qr6rhpw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    sum =\
    \ sum + lst[i]\n    if sum % 2 == 1 then\n      sum = sum - lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpespwfq1v.lua:24:\
    \ expected: 25, actual: 4\nstack traceback:\n\t/tmp/tmpespwfq1v.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return end\n  local sum = 0\n  for i = 1, #lst, 2 do\n    if\
    \ lst[i] > 0 and not lst[i-1] then \n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\n</cell>\n<text>\nExercise: Write a function that prints out\
    \ a list of numbers between 1 and 99 inclusive.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdtk24a3q.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local total = 0\n  for _, element\
    \ in ipairs(lst) do\n    if element % 2 == 1 then\n      total = total + element\n\
    \    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkm_sld5.lua:25:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpqkm_sld5.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if not lst then return 0 end\n   local sum = 0\n   for _, x in ipairs(lst)\
    \ do\n      if type(x) == 'number' and x ~= 0 then\n         sum = sum + x * x\n\
    \      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp58meet.lua:23:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpqp58meet.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tif #lst == 0 then\n\t\treturn 0\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpik0enosn.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local total = 0\n  for i = 1, #lst do\n \
    \   if i % 2 == 1 then total = total + lst[i] end\n  end\n  return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kqbrbmb.lua:21:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmp8kqbrbmb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then\n    return 0\n  else\n    local sum = 0\n    for _,\
    \ v in ipairs(lst) do\n      if not v:isinteger() then\n        return 0\n   \
    \   end\n      sum = sum + v\n    end\n    return sum * sum\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfx__ph3.lua:9:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpmfx__ph3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmfx__ph3.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk9ptt0na.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local last_number = lst[1]\n  for i = 2, #lst do\n    local\
    \ current = lst[i]\n    if current:isnumber() and current ~= last_number then\n\
    \      sum = sum + current\n    end\n    last_number = current\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzou1e16n.lua:13:\
    \ attempt to index a number value (local 'current')\nstack traceback:\n\t/tmp/tmpzou1e16n.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzou1e16n.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then return 0 end\n  local sum = 0 \n  for i = 1, lst:len()\
    \ do\n    sum = sum + lst:at(i)\n  end\n  return sum * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3jt7hu55.lua:9:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp3jt7hu55.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3jt7hu55.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprtwt_hd2.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
