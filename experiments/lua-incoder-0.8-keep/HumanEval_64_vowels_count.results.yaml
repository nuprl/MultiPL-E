name: HumanEval_64_vowels_count
language: lua
results:
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \".\", \"%s\"):match(\"[aeiouAEIOUY]\") or (\"%S\"):gsub(\"\
    [aeiouAEIOUY]\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5fcvhfpr.lua:11:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp5fcvhfpr.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5fcvhfpr.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = 'aeiou'\n  local result = {}\n  for i, c in ipairs(s) do\n \
    \   if c == vowels[i] then\n      result[#result + 1] = c\n    end\n  end\n  return\
    \ #result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwa2q1eu.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpcwa2q1eu.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count, i, len\n    count = len = 0\n    for i = 1, #s do\n        --\
    \ If the character is a vowel, increment the count variable\n        -- and add\
    \ the character to len.\n        if s.sub(i, i) == 'a' or\n            s.sub(i,\
    \ i) == 'e' or\n            s.sub(i, i) == 'i' or\n            s.sub(i, i) ==\
    \ 'o' or\n            s.sub(i, i) == 'u'\n        then\n            count = count\
    \ + 1\n            len = len + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmts5husy.lua:12: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  if s == '' or s:match('^') then\n    return 0\n  end\n  local vowels = 'aeiou'\n\
    \  local vowelsCount = 1\n  for _, letter in string.gmatch(s, '[%w]') do\n   \
    \ if letter == 'y' then\n      break\n    end\n    vowelsCount = vowelsCount +\
    \ 1\n  end\n  for _, letter in string.gmatch(s, '[%W]') do\n    if letter == 'y'\
    \ then\n      break\n    end\n    vowelsCount = vowelsCount + 1\n  end\n  return\
    \ vowelsCount\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky0rzh6x.lua:34:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpky0rzh6x.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"ae\", \"ya\"\
    , \"ye\", \"yi\", \"yu\", \"ay\"}\n    local vowel_count = 0\n    local vowel_words\
    \ = {}\n    for letter in s:gmatch(\"[%aAeEiIoOuUy]\") do\n        if vowels[letter]\
    \ then\n            vowel_count = vowel_count + 1\n        end\n        table.insert(vowel_words,\
    \ letter)\n    end\n    return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6x9fdr47.lua:26:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp6x9fdr47.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = string.lower(s)\n  for w in string.gmatch(s, \"[aeiouy]\") do\n    s =\
    \ s:gsub(w, \"%s*\" % w)\n  end\n  return s:gsub(\"%s*\" % w, \"%s*\" % w)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwhohp8x.lua:13:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpiwhohp8x.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpiwhohp8x.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return s:gsub('[^aeiouy]','')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi95exvd2.lua:17:\
    \ expected: 2, actual: \"ae\"\nstack traceback:\n\t/tmp/tmpi95exvd2.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return s:match(\"[aeiou]\") ~= nil and s:match(\"[aeiouy]$\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jl7uqba.lua:17:\
    \ expected: 2, actual: \"e\"\nstack traceback:\n\t/tmp/tmp5jl7uqba.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(string.gsub(s, \"[aeiou]\", ''))\n  , \"[aeiou]$\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppobyte5q.lua:11:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmppobyte5q.lua:11: in local 'candidate'\n\t/tmp/tmppobyte5q.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal count = #s\n\tlocal i = -1\n\
    \tfor k, v in pairs(s) do\n\t\ti = i + 1\n\t\tif v == 'y' then\n\t\t\tcount =\
    \ count - 1\n\t\tend\n\t\tif v ~= 'a' and v ~= 'e' and v ~= 'i' and v ~= 'o' and\
    \ v ~= 'u' then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt90zvgs3.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpt90zvgs3.lua:14: in local 'candidate'\n\t/tmp/tmpt90zvgs3.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for c in s:gmatch(\"[aeiouy]\") do\n        count =\
    \ count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjipslzy.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpxjipslzy.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {['a','e','i','o','u']}\n  local counts = {}\n  for char in\
    \ s do\n    counts[#counts + 1] = #vowels\n    for i = #vowels+1, #vowels+1 do\n\
    \      if char == vowels[i] then counts[#counts + 1] = i end\n    end\n  end\n\
    \  return table.concat(counts)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6mp8pa6r.lua:11: ']' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local v = 0\n    for i = 1,#s do\n        if string.sub(s,i,i) ~= 'a' and\
    \ string.sub(s,i,i) ~= 'e' and string.sub(s,i,i) ~= 'i' and string.sub(s,i,i)\
    \ ~= 'o' and string.sub(s,i,i) ~= 'u'\n        then\n            v = v+1\n   \
    \     end\n    end\n    return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrengq6u.lua:24:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmprrengq6u.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  s:gsub(\"a\",\"a\"):gsub(\"e\",\"e\"):gsub(\"i\",\"i\"):gsub(\"\
    o\",\"o\"):gsub(\"u\",\"u\")\n  for i,v in pairs({\"a\",\"e\",\"i\",\"o\",\"u\"\
    }) do\n    if v:sub(1,1) == \"y\" then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3hhe0oz.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpb3hhe0oz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local n = 0\n    for i = 1,\
    \ #s do\n        if string.sub(s,i,i) == \"\" then break end\n        local j\
    \ = 1\n        while j > 0 and string.sub(s,i,i+j) ~= \"\" do\n            j =\
    \ j - 1\n        end\n        n = n + 1\n        local vowel = string.sub(s,i,i+j)\n\
    \        if vowel == \"y\" then break; end\n        -- We want to exclude \"y\"\
    \ from the vowel count\n        -- while considering \"y\" as a vowel in some\
    \ cases.\n        if vowel ~= \"y\" then\n            n = n + 1\n            for\
    \ _, v in pairs(vowels) do\n                if vowel == v then break end\n   \
    \         end\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqaea1oum.lua:37:\
    \ expected: 2, actual: 10\nstack traceback:\n\t/tmp/tmpqaea1oum.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  if s == nil then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzmgl0yxs.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_l6mh85.lua:17:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmp1_l6mh85.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   s = string.lower(s)\n   return string.gsub(s, \"[aeiouy]\", \"\")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kymocbw.lua:18:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmp3kymocbw.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Write your code here.\n  return 0 -- Change this line\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89fhk4el.lua:18:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp89fhk4el.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   local vowels_count = 0\n   for\
    \ i = 1, #s do\n      if vowels[string.sub(s,i,i)] then\n         vowels_count\
    \ = vowels_count + 1\n      end\n   end\n   return vowels_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7snb8k7.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpf7snb8k7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \"[^aeiouAEIOU]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7o9uvd3.lua:17:\
    \ expected: 2, actual: \"ae\"\nstack traceback:\n\t/tmp/tmpr7o9uvd3.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels\n  s:gsub(\"([aeiouy])\", function(c)\n    vowels = c or \"y\"\
    \n  end)\n  return #vowels > 0 and #vowels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeunypv6v.lua:21:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpeunypv6v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:lower()\n  return s:gsub('[aieouyAIEOUY]','').count('a')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp88mh3hum.lua:12:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmp88mh3hum.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp88mh3hum.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- base case\n  if s == nil then return 0 end\n  -- base case\n  if s == \"\
    \" then return 1 end\n  -- base case\n  if string.sub(s,-1,1) == \"y\" then return\
    \ 2 end\n  -- base case\n  if string.sub(s,-1,1) == \"a\" then return 1 end\n\
    \  -- base case\n  if string.sub(s,-1,1) == \"e\" then return 1 end\n  -- base\
    \ case\n  if string.sub(s,-1,1) == \"i\" then return 1 end\n  -- base case\n \
    \ if string.sub(s,-1,1) == \"o\" then return 1 end\n  -- base case\n  if string.sub(s,-1,1)\
    \ == \"u\" then return 1 end\n  -- base case\n  -- return vowels_count(string.sub(s,1,-1))\n\
    \  return 1 + vowels_count(string.sub(s,1,-1))\nend\n</code>\n<|/ a dscore=4 |>\n\
    <| a tags=lua,lua-patterns dscore=3 |>\nThe question is about counting vowels\
    \ within a string, so let's put a little more effort into the problem domain and\
    \ see how we can do it. We might want to do some operations on strings based on\
    \ their length, rather than their content, so let's do that first. We'll use table.concat\
    \ and table.remove, which are both built-in Lua functions. We'll also use table.insert\
    \ and table.append for convenience. We'll also use string.find to find the first\
    \ vowel in a string, because that's what it's for, and string.sub to get the substring:\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpije93nz8.lua:31: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return #s * (#s + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxt_jjsc1.lua:17:\
    \ expected: 2, actual: 15\nstack traceback:\n\t/tmp/tmpxt_jjsc1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiom__n31.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpiom__n31.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count_vowels = {}\n  for\
    \ w in s:gmatch(\"[%a]+\") do table.insert(count_vowels, #count_vowels + 1) end\n\
    \  return count_vowels[#count_vowels]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4svzsah.lua:20:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpe4svzsah.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local n = 1\n    for _, c in pairs(s)\
    \ do\n        if vowels[c] then\n            n=n+1\n        end\n    end\n   \
    \ return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ct4szm0.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4ct4szm0.lua:13: in local 'candidate'\n\t/tmp/tmp4ct4szm0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local vowels = {'a','e','i','o','u'}\n   if string.sub(s, -1) == 'y' then\n\
    \      vowels = {'a', 'e', 'i', 'o', 'u'}\n   end\n   return string.match(s, '[aeiouyAeiouy]')\
    \ or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsw6eqk1.lua:21:\
    \ expected: 2, actual: \"a\"\nstack traceback:\n\t/tmp/tmplsw6eqk1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = \"aeiouy\"\n  local vowels_count = 0\n  for i = 1, #s do\n \
    \   if vowels:find(s[i]) then\n      vowels_count = vowels_count + 1\n    end\n\
    \  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgm_b_708.lua:14:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpgm_b_708.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpgm_b_708.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Remove all vowels.\n  s = s:gsub(\"[aeiou]\", \"\")\n  -- Count all vowels.\n\
    \  return s:gsub(\"[aeiouy]+$\", \"%1\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_c_kv7ax.lua:20:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmp_c_kv7ax.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \"[aeiouAEIOU]\", \"\"):gsub(\"*\", \"\"):gsub(\"?\"\
    , \"\"):gsub(\"!\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8l972orj.lua:17:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmp8l972orj.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- YOUR CODE HERE\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6tm3epx.lua:18:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpq6tm3epx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowelsCount = 0\n \
    \   for _, v in ipairs(s) do\n        if vowels[v] then\n            vowelsCount\
    \ = vowelsCount + 1\n        end\n    end\n    return vowelsCount\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooe2izkq.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpooe2izkq.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for _, c in pairs(s) do\n    if c == \"a\" then\n      if\
    \ c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n        count = count\
    \ + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm9p5_vu.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmplm9p5_vu.lua:12: in local 'candidate'\n\t/tmp/tmplm9p5_vu.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  for _, letter in string.gmatch(s, \"([^%s]+)\") do\n        if letter == 'y'\
    \ then\n            if string.sub(s,-1) == 'y' then return vowels_count end\n\
    \        elseif string.sub(s,-1,1) == 'a' or string.sub(s,-1,1) == 'e' then\n\
    \            vowels_count = vowels_count + 1\n        end\n    end\n    return\
    \ vowels_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajva932z.lua:26:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpajva932z.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.len(s) - string.sub(s,string.find(s,\"a\")) +\n         string.sub(s,string.find(s,\"\
    e\")) + string.sub(s,string.find(s,\"i\")) +\n         string.sub(s,string.find(s,\"\
    o\")) + string.sub(s,string.find(s,\"u\"))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjg2nxjk7.lua:11:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpjg2nxjk7.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpjg2nxjk7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = { \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" }\n  local count\
    \ = 0\n  for i = 1, #s do\n    -- If the character is a vowel, increase the count\
    \ by 1\n    if vowels[s[i]] == true then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6497mnx.lua:25:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmps6497mnx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if string.sub(s, i, i) = \"a\"\
    \ then\n         count = count + 1\n      elseif string.sub(s, i, i) = \"e\" then\n\
    \         count = count + 1\n      elseif string.sub(s, i, i) = \"i\" then\n \
    \        count = count + 1\n      elseif string.sub(s, i, i) = \"o\" then\n  \
    \       count = count + 1\n      elseif string.sub(s, i, i) = \"u\" then\n   \
    \      count = count + 1\n      elseif string.sub(s, i, #s) = \"y\" then\n   \
    \      count = count + 1\n      else\n         count = count + 1\n      end\n\
    \   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy5bxradx.lua:13: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Write your code here.\n  local vowels = {'a','e','i','o','u'}\n  local vowels_count\
    \ = #(s)\n  for i=1,#s do\n      if s[i] == 'a' or s[i] == 'e' or s[i] == 'i'\
    \ or s[i] == 'o' or s[i] == 'u' then\n          vowels_count = vowels_count +\
    \ 1\n      end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pd0tm52.lua:25:\
    \ expected: 2, actual: 5\nstack traceback:\n\t/tmp/tmp5pd0tm52.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  if #s == 0 then return 0 end\n  local n = 0\n  for i = 1, #s do\n    if s[i]\
    \ == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n  \
    \    n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i1cdvqi.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp9i1cdvqi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n\
    \    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasox3tqr.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpasox3tqr.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local num_vowels = 0\n  for i = 1, #s do\n    if s:sub(i, i) ~= 'a' and s:sub(i,\
    \ i) ~= 'e' and s:sub(i, i) ~= 'i' and s:sub(i, i) ~= 'o' and s:sub(i, i) ~= 'u'\n\
    \      then return 0\n    end\n    num_vowels = num_vowels + 1\n  end\n  return\
    \ num_vowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vl_2a15.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp_vl_2a15.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  return #(s:gsub('%[aeiou]', vowels))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb3_bq8a.lua:18:\
    \ expected: 2, actual: 5\nstack traceback:\n\t/tmp/tmpkb3_bq8a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return s:gsub(\"[aeiouy]\", \"\"):gsub(\"y\", \"\"):gsub(\"[^aeiouy]\", \"\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcwxx8fj.lua:17:\
    \ expected: 2, actual: \"\"\nstack traceback:\n\t/tmp/tmpkcwxx8fj.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {}\n  table.insert(vowels, 'a')\n  table.insert(vowels, 'e')\n\
    \  table.insert(vowels, 'i')\n  table.insert(vowels, 'o')\n  table.insert(vowels,\
    \ 'u')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8e7d1u69.lua:30: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf35gxhw.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpaf35gxhw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- TODO: implement vowels function\n  local vowels = {}\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet5clfzw.lua:19:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpet5clfzw.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal count = 0\n\tfor w in s:gmatch(\"\
    [%a]+\") do\n\t\tcount = count + 1 -- increment vowel count\n\tend\n\treturn count\
    \ -- return number of vowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3zb_7o5.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_3zb_7o5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.sub(s,1,string.find(s,'a')-1) + string.sub(s,string.find(s,'a'),string.find(s,'e')-1)\
    \ + string.sub(s,string.find(s,'e'),string.find(s,'i')-1) + string.sub(s,string.find(s,'i'),string.find(s,'o')-1)\
    \ + string.sub(s,string.find(s,'o'),string.find(s,'u')-1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa56mn9s.lua:11:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpsa56mn9s.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpsa56mn9s.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count, last = 1, s:byte(-1)\n  for i = #s - 1, 1, -1 do\n    local c\
    \ = s:byte(i)\n    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n      count = count + 1\n    elseif c == last then\n      if\
    \ count > 1 then\n        count = count - 1\n      else\n        count = 0\n \
    \     end\n    end\n    last = c:byte(-1)\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzb72c14t.lua:23:\
    \ attempt to index a number value (local 'c')\nstack traceback:\n\t/tmp/tmpzb72c14t.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpzb72c14t.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = 'aeiouAEIOU'\n  local vowel_count = 0\n  for i = 1, #s do\n\
    \    local char = s[i]\n    if vowels[char] ~= nil then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp014n7s27.lua:25:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp014n7s27.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return string.gsub(s, \".\", \"%1%\").\n                gsub(\"a\", \"%1\"\
    ).\n                gsub(\"e\", \"%1\").\n                gsub(\"i\", \"%1\").\n\
    \                gsub(\"o\", \"%1\").\n                gsub(\"u\", \"%1\").\n\
    \                gsub(\"y\", \"%1\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbs2l4k_3.lua:11:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpbs2l4k_3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbs2l4k_3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Fill in the code below to get it working!\n  local vowels = {'a','e','i','o','u'}\n\
    \  local count = 0\n  for i = 1, #s do\n    if vowels[s[i]] then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2jl7lk8.lua:25:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpn2jl7lk8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels\n  local vowel_end\n  local vowel_index\n  local count = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0n5tjerf.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count=0\n  for i=1,#s do\n    if string.sub(s,i,i)==\"a\" or string.sub(s,i,i)==\"\
    e\" or string.sub(s,i,i)==\"i\" or string.sub(s,i,i)==\"o\" or string.sub(s,i,i)==\"\
    u\" then\n      count=count+1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mrmy616.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp_mrmy616.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i=1,#s do\n\
    \    count = count + 1\n    if string.sub(s,i,i) ~= \"_\" then\n      count =\
    \ count + #vowels\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipxeuhxb.lua:25:\
    \ expected: 2, actual: 30\nstack traceback:\n\t/tmp/tmpipxeuhxb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {}\n    for i=1,#s do\n        if string.sub(s,i,i) == \"\
    a\" then\n            table.insert(vowels, \"a\")\n        end\n        if string.sub(s,i,i)\
    \ == \"e\" then\n            table.insert(vowels, \"e\")\n        end\n      \
    \  if string.sub(s,i,i) == \"i\" then\n            table.insert(vowels, \"i\"\
    )\n        end\n        if string.sub(s,i,i) == \"o\" then\n            table.insert(vowels,\
    \ \"o\")\n        end\n        if string.sub(s,i,i) == \"u\" then\n          \
    \  table.insert(vowels, \"u\")\n        end\n    end\n    \n    return #vowels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukt7gqi_.lua:37:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpukt7gqi_.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(string.format(\"[%a]\", s), \"[^aeiouy]\", \"\"):gsub(\"\
    (.)\", function (c) return string.byte(c) == 65 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp80ro15bc.lua:11:\
    \ bad argument #2 to 'format' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp80ro15bc.lua:11: in local 'candidate'\n\t/tmp/tmp80ro15bc.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\twhile true do\n\t\tlocal i = string.find(s, \"[aaiouy]\"\
    ) -- find first vowel\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount =\
    \ count + 1\n\t\ts = string.sub(s, i + 1) -- remove first vowel from string\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63q526d8.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp63q526d8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = \"aeiou\"\n    local vowel_count = 0\n    for i = 1, #s do\n\
    \        if vowels[i] ~= s[#s]:sub(1,i) then\n            return false\n     \
    \   end\n        vowel_count = vowel_count + 1\n    end\n    return vowel_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfeo3o45l.lua:14:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpfeo3o45l.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpfeo3o45l.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   -- Remove the first and last\
    \ characters from the string\n   s = s:sub(1, -5)\n   -- Return number of vowels\
    \ in the string\n   return #(filter(function(v) return vowels[v] ~= nil end, s:gsub('[AEIOUY]',\
    \ ''))) - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxf6dc0b7.lua:15:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpxf6dc0b7.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxf6dc0b7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = 0\n   \
    \ for word in string.gmatch(s, '([a-z]+)(%1)?') do\n        vowel_count = vowel_count\
    \ + #word[vowels]\n    end\n    return vowel_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp171efe70.lua:22:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp171efe70.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return s:gsub(\"[aeiouyAEIOUY]\", \"\"):gsub(\"[^aeiouyAEIOUY]\", \"\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9u86a83f.lua:17:\
    \ expected: 2, actual: \"\"\nstack traceback:\n\t/tmp/tmp9u86a83f.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local n = 1\n    for letter in string.gmatch(s, '[aeiouAEIOU]+') do\n   \
    \     n = n + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7l34hgpo.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp7l34hgpo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #((s:gsub('a', ''):gsub('e', ''):gsub('i', ''):gsub('o', ''):gsub('u',\
    \ '')):gmatch('[aeiouy]'))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyjyxf8v.lua:11:\
    \ attempt to get length of a function value\nstack traceback:\n\t/tmp/tmpoyjyxf8v.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpoyjyxf8v.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Write your function here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ for i,v in ipairs(s) do\n    if vowels[v] ~= nil then\n      count = count+1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9vdgm4a.lua:24:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpl9vdgm4a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = \"aeiou\"\n    local vowels_count = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp51gh8e8g.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \t-- Write your code here\n\tlocal v = 0\n\tfor i,v in pairs(s)do\n\t\tv = v +\
    \ 1\n\tend\n\treturn v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7jhmhsc.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp_7jhmhsc.lua:13: in local 'candidate'\n\t/tmp/tmp_7jhmhsc.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #s:match\"[aeiouyAEIOUY]\"\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvfz3n8ga.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   for i=1, #s do\n      if string.sub(s,i,i) ~= 'a' and string.sub(s,i,i) ~=\
    \ 'e' and string.sub(s,i,i) ~= 'i' and string.sub(s,i,i) ~= 'o' and string.sub(s,i,i)\
    \ ~= 'u' then\n         return i + 1\n      end\n   end\n   return 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60zm44wz.lua:22:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp60zm44wz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal i = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\twhile i < #s do\n\
    \t\tlocal letter = string.sub(s,i,i)\n\t\tif letter in vowels then\n\t\t\ti =\
    \ i + 1\n\t\tend\n\tend\n\treturn i\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwuivz5nc.lua:15: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local i = 0\n    while i do\n        local c = string.sub(s, i, i)\n    \
    \    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      \
    \      i = i + 1\n        else\n            break\n        end\n    end\n    return\
    \ i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7h4_0k0.lua:26:\
    \ expected: 2, actual: -1\nstack traceback:\n\t/tmp/tmpe7h4_0k0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.match(s, \"[aeiouy]\") ~= nil and (string.len(s) - string.match(s,\
    \ \"[y]\"))\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like your solution but\
    \ I think OP wanted something with less complexity.\n<|/ c |>\n<| a tags=lua |>\n\
    You could do it in a one-liner using pattern matching with string concatenation:\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsi97r1sp.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\treturn #(vowels + {string.sub(s,1,-1)})\
    \ -- Add the last character\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu9h7rsul.lua:12:\
    \ attempt to perform arithmetic on a table value (local 'vowels')\nstack traceback:\n\
    \t/tmp/tmpu9h7rsul.lua:12: in local 'candidate'\n\t/tmp/tmpu9h7rsul.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:lower() -- Convert string to lowercase\n  s = s:gsub(\"[aeiouy]\", \"\
    \") -- remove vowels\n  return s:gsub(\"[^aeiouy]\", \"\"):gsub(\" \", \"\"):gsub(\"\
    ^\", \"\"):gsub(\"$\", \"\"):gsub(\"y\", \"\"):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeur9u45v.lua:19:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpeur9u45v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local counts = {}\n  for w in string.gmatch(s,\
    \ \"[^\" .. vowels .. \"]\") do\n    table.insert(counts, #counts)\n  end\n  return\
    \ #counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhis0kp9.lua:22:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpnhis0kp9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for _\
    \ in string.gmatch(s, '[aeiouy]+') do\n    vowel_count = vowel_count + 1\n  end\n\
    \  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm32g_gpp.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpm32g_gpp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   -- Write your code here!\n   return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rsclcs_.lua:18:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8rsclcs_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local i = 1\n  while i <= #s do\n    if s:sub(i,i) == \"a\" then\n      i =\
    \ i + 1\n    elseif s:sub(i,i) == \"e\" then\n      i = i + 1\n    elseif s:sub(i,i)\
    \ == \"i\" then\n      i = i + 1\n    elseif s:sub(i,i) == \"o\" then\n      i\
    \ = i + 1\n    elseif s:sub(i,i) == \"u\" then\n      i = i + 1\n    elseif s:sub(i,i)\
    \ == \"y\" then\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n\
    \  return i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i6ignu8.lua:35:\
    \ expected: 2, actual: 5\nstack traceback:\n\t/tmp/tmp7i6ignu8.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for i, v in pairs(s) do\n    if v ~= 'a' and v ~= 'e' and\
    \ v ~= 'i' and v ~= 'o' and v ~= 'u' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpatu55vn6.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpatu55vn6.lua:12: in local 'candidate'\n\t/tmp/tmpatu55vn6.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  if s == nil or s == '' then\n    return 0\n  end\n  return string.gsub(s, \"\
    [aeiouy]\", ''):gsub(\"[aeiouy]\", \"\"):gsub(\"[aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjqwronw.lua:20:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmpvjqwronw.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = #vowels\n   \
    \ for i = 1, #s - 1 do\n        if s[i] == 'y' and (i == #s - 1 or s[i + 1] ==\
    \ 'y') then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gc8_rms.lua:24:\
    \ expected: 2, actual: 5\nstack traceback:\n\t/tmp/tmp5gc8_rms.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #s and #s ~= 0 and v:count(\"aeiou\") + #s - (v:sub(1, #s):find(\"aeiou\"\
    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp344oosqq.lua:11:\
    \ attempt to index a nil value (global 'v')\nstack traceback:\n\t/tmp/tmp344oosqq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp344oosqq.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  for i=1,#s do\n        if vowels[s[i]:lower()] then vowels_count = vowels_count\
    \ + 1 end\n    end\n    return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpif6unba7.lua:14:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpif6unba7.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpif6unba7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local vowels = { 'a', 'e', 'i', 'o', 'u' }\n   for _, v in ipairs(s) do\n\
    \      if not vowels[v] then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdz8_schk.lua:23:\
    \ expected: 2, actual: true\nstack traceback:\n\t/tmp/tmpdz8_schk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for i, v in pairs({'a', 'e', 'i', 'o', 'u'}) do\n    count\
    \ = count + count_letters(s, v, i + 1)\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45h5mtfr.lua:13:\
    \ attempt to call a nil value (global 'count_letters')\nstack traceback:\n\t/tmp/tmp45h5mtfr.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp45h5mtfr.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowel_count = 0\n\tfor char\
    \ in s:gmatch(\"[%w]\") do\n\t\tif vowels[char] then\n\t\t\tvowel_count = vowel_count\
    \ + 1\n\t\tend\n\tend\n\treturn vowel_count\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr9yntz3y.lua:20: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for char in string.gmatch(s, '[aeiouAEIOUY]') do\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopp39ff8.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpopp39ff8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   if #s <= 0 then return 0 end\n   for i = 1,#s do\n      if string.sub(s,i,i)\
    \ ~= \"a\" and string.sub(s,i,i) ~= \"e\" and string.sub(s,i,i) ~= \"i\" and string.sub(s,i,i)\
    \ ~= \"o\" and string.sub(s,i,i) ~= \"u\" then\n         return 0\n      end\n\
    \   end\n   return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8zwl2mm.lua:23:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpe8zwl2mm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal result = {}\n\tfor w in s:gmatch('%w')\
    \ do\n\t\tfor v in vowels do\n\t\t\tif w == v then\n\t\t\t\tresult[w] = result[w]\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\n</cell>\n<text>\nThe dictionary\
    \ function\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp745x9_rz.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \".[aeiou]\", \"\"):gsub(\"[aeiouy][^aeiouy]\", \"\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tuib0rm.lua:17:\
    \ expected: 2, actual: \"c\"\nstack traceback:\n\t/tmp/tmp6tuib0rm.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    if s[i] ~= 'a' and s[i] ~= 'e' and s[i]\
    \ ~= 'i' and s[i] ~= 'o' and s[i] ~= 'u' then\n      if i == #s - 1 then\n   \
    \     -- If the last letter is also a vowel, it counts as one\n        -- (ex:\
    \ \"i\" in the string \"aiue\" counts as \"i\").\n        n = n + 1\n      else\n\
    \        -- Otherwise, just add one to the counter\n        n = n + 1\n      end\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nehttp5.lua:30:\
    \ expected: 2, actual: 5\nstack traceback:\n\t/tmp/tmp7nehttp5.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Write your code here.\n  local vowels = ''\n  local idx\n  for idx = 1,#s\
    \ do\n      if string.sub(s,idx,idx) == ('a' or 'e' or 'i' or 'o' or 'u') then\n\
    \          vowels = vowels .. string.sub(s,idx,idx)\n      end\n  end\n  return\
    \ #vowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv2j90da.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpuv2j90da.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 1\n    for i\
    \ = 1, #s do\n        if vowels[string.sub(s, i, i)] then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtv8s713.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprtv8s713.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local count, i, l = 0, #s, 0\n  for\
    \ i=1,l do count = count + (s[i] .. vowels[i]) end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpguva6gqs.lua:20:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpguva6gqs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local n = 1\n  for _, c in ipairs(s) do\n    if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' then\n      n = n + 1\n    end\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s4gzxlv.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1s4gzxlv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local num_vowels = 0\n    for i = 1, #s do\n        if string.sub(s, i, i)\
    \ == \"a\" then\n            num_vowels = num_vowels + 1\n        end\n      \
    \  if string.sub(s, i, i) == \"e\" then\n            num_vowels = num_vowels +\
    \ 1\n        end\n        if string.sub(s, i, i) == \"i\" then\n            num_vowels\
    \ = num_vowels + 1\n        end\n        if string.sub(s, i, i) == \"o\" then\n\
    \            num_vowels = num_vowels + 1\n        end\n        if string.sub(s,\
    \ i, i) == \"u\" then\n            num_vowels = num_vowels + 1\n        end\n\
    \    end\n    return num_vowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqan3_byt.lua:36:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpqan3_byt.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local i = 1\n    local vowelsFound = 0\n    local vowels = \"aeiou\"\n  \
    \  while i < #s do\n        if string.sub(s, i, i + 1) in vowels then\n      \
    \      vowelsFound = vowelsFound + 1\n        end\n        i = i + 1\n    end\n\
    \    return vowelsFound\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt_olrdmu.lua:15: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm29p4t0s.lua:17:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmpm29p4t0s.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    return #vowels - 1 -- subtract\
    \ 1 so length is correct\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5_ff5d2.lua:18:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpo5_ff5d2.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'y' then\n \
    \     if string.sub(s, i, i) == 'a' then\n        n = n + 1\n      end\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzdq3lbr.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpxzdq3lbr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for _, v in pairs(string.gmatch(s, \"[aeiouAEIOU]\") or\
    \ {}) do\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplyroiwpl.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmplyroiwpl.lua:12: in local 'candidate'\n\t/tmp/tmplyroiwpl.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n  local vowels_count = nil\n\
    \  for word in s:gmatch(\"[%w%-]+\") do\n    for i=1, #vowels do\n      if string.find(word,\
    \ vowels[i]) then\n        vowels_count = vowels_count + 1\n      end\n    end\n\
    \  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbh5htxk6.lua:16:\
    \ attempt to perform arithmetic on a nil value (local 'vowels_count')\nstack traceback:\n\
    \t/tmp/tmpbh5htxk6.lua:16: in local 'candidate'\n\t/tmp/tmpbh5htxk6.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   return string.gsub(s, '[^aeiouAEIOU]', '') + 'y' .. (string.len(s) - string.len(string.gsub(s,\
    \ '[^aeiouAEIOU]', '')))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7e9u_mc_.lua:11:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp7e9u_mc_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7e9u_mc_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal count, last_vowel = 0, nil\n\tfor _,v in ipairs(s) do\n\t\tif v == 'a'\
    \ then count = count + 1 end\n\t\tif v == 'e' then count = count + 1 end\n\t\t\
    if v == 'i' then count = count + 1 end\n\t\tif v == 'o' then count = count + 1\
    \ end\n\t\tif v == 'u' then count = count + 1 end\n\t\tif v == 'y' then\n\t\t\t\
    last_vowel = last_vowel + 1 \n\t\tend\n\tend\n\treturn count * last_vowel\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpta597pqu.lua:22:\
    \ attempt to perform arithmetic on a nil value (local 'last_vowel')\nstack traceback:\n\
    \t/tmp/tmpta597pqu.lua:22: in local 'candidate'\n\t/tmp/tmpta597pqu.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = string.gsub(s, \"[aeiouy]\", \"\")\n  return string.gsub(s, \"[^aeiouy]\"\
    , \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lr89hiq.lua:18:\
    \ expected: 2, actual: \"\"\nstack traceback:\n\t/tmp/tmp_lr89hiq.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #(s:gsub(\"[^AEIOUaeiou]\", \"\")) + ((s:match(\"y$\") or s:match(\"\
    ([aeiou])\"))~=0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7bwdqf1_.lua:11:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp7bwdqf1_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7bwdqf1_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return s:sub(1, #s - 1):gsub(\"[aeiouy]+\", \"\"):gsub(\"[aeiou]+\", \"\")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilf2577r.lua:17:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmpilf2577r.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \t-- Remove leading and trailing spaces, convert string to lowercase\n\ts = s:gsub(\"\
    ^%s*(.-)%s*$\", \"%1\")\n\ts = s:lower()\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3fzrz024.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = string.lower(s)\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count\
    \ = 0\n  for _, v in pairs(vowels) do\n    if string.find(s, v) then\n      vowel_count\
    \ = vowel_count + 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbiy8c2s.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplbiy8c2s.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s:sub(i,i) == \"a\" then\
    \ count = count + 1 end\n        if s:sub(i,i) == \"e\" then count = count + 1\
    \ end\n        if s:sub(i,i) == \"i\" then count = count + 1 end\n        if s:sub(i,i)\
    \ == \"o\" then count = count + 1 end\n        if s:sub(i,i) == \"u\" then count\
    \ = count + 1 end\n        if s:sub(i,i) == \"y\" then count = count + 1 end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49ll5is_.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp49ll5is_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 1\n  for i = 1, #s do\n    count = count + count_vowels(s, i)\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu9q0xayk.lua:13:\
    \ attempt to call a nil value (global 'count_vowels')\nstack traceback:\n\t/tmp/tmpu9q0xayk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpu9q0xayk.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for _, c in string.gmatch(s, '[aeiouAEIOUY]*[aeiouAEIOUY]+')\
    \ do\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgl2rb6aa.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgl2rb6aa.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:gsub('[^aeiouAEIOU]', '')\n  return string.gsub(s, \"a\", \"\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5b8hg157.lua:18:\
    \ expected: 2, actual: \"e\"\nstack traceback:\n\t/tmp/tmp5b8hg157.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local i, j, count = 0, 1, 0\n  for\
    \ i = 1, #s do\n    if vowels[s[i]] then\n      j = i+1\n      while j < #s and\
    \ vowels[s[j]] do j = j+1 end\n      count = count+1\n      i = j\n    end\n \
    \ end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan5vvvzs.lua:27:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpan5vvvzs.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- base case\n  if #s == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv9j672w8.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   -- Your code here\n   return #vowels -- return the number of vowels\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7oj3plql.lua:12:\
    \ attempt to get length of a nil value (global 'vowels')\nstack traceback:\n\t\
    /tmp/tmp7oj3plql.lua:12: in local 'candidate'\n\t/tmp/tmp7oj3plql.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- base case\n  if s:match(\"^[aeiouy]*$\") then return 0 end\n  -- recursive\
    \ case\n  return 1 + vowels_count(s:sub(1, s:len()))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4m51w_4c.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp4m51w_4c.lua:14: in upvalue 'vowels_count'\n\
    \t/tmp/tmp4m51w_4c.lua:14: in upvalue 'vowels_count'\n\t/tmp/tmp4m51w_4c.lua:14:\
    \ in upvalue 'vowels_count'\n\t/tmp/tmp4m51w_4c.lua:14: in upvalue 'vowels_count'\n\
    \t/tmp/tmp4m51w_4c.lua:14: in upvalue 'vowels_count'\n\t/tmp/tmp4m51w_4c.lua:14:\
    \ in upvalue 'vowels_count'\n\t/tmp/tmp4m51w_4c.lua:14: in upvalue 'vowels_count'\n\
    \t/tmp/tmp4m51w_4c.lua:14: in upvalue 'vowels_count'\n\t/tmp/tmp4m51w_4c.lua:14:\
    \ in upvalue 'vowels_count'\n\t...\n\t/tmp/tmp4m51w_4c.lua:14: in local 'candidate'\n\
    \t/tmp/tmp4m51w_4c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.320\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = \"aeiou\"\n    local i = 1\n    while i <= #s do\n       \
    \ if vowels:find(s[i - 1]) then\n            i = i + 1\n        else\n       \
    \     return i\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7cv9xrf8.lua:14:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp7cv9xrf8.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7cv9xrf8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if ((s:sub(i,i) == \"a\") or (s:sub(i,i)\
    \ == \"e\") or (s:sub(i,i) == \"i\")\n          or (s:sub(i,i) == \"o\") or (s:sub(i,i)\
    \ == \"u\") then\n      else\n         count = count + 1\n      end\n   end\n\
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppwvyy4me.lua:14: ')' expected (to close '(' at line 13) near\
    \ 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \"[aeiou]\", function(a)\n    return a:end\n  end)\n\
    end\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp24rzwmde.lua:12: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\tfor c in s:gmatch'[aeiouy]'\n\t\tcount = count + 1\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkari8qwm.lua:13: 'do' expected near 'count'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i\
    \ = 1, #s do\n    if vowels[s[i]] ~= nil then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9l0aebl.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpz9l0aebl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:lower()\n  for _,v in pairs({'a','e','i','o','u'}) do\n    if s[#s] ==\
    \ v then return 1 + vowels_count(s[#s]) end\n  end\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6x9hiw9.lua:21:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpz6x9hiw9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local n = 0\n    for _, c in string.gmatch(s, \"[aeiouy]+\") do\n       \
    \ n = n + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbxc7sws.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpbbxc7sws.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #s == '' or\n    ((s:sub(1,1)) == 'a' or\n    (s:sub(1,1)) == 'e' or\n\
    \    (s:sub(1,1)) == 'i' or\n    (s:sub(1,1)) == 'o' or\n    (s:sub(1,1)) == 'u'\
    \ or\n    (s:sub(2,2)) == 'a' or\n    (s:sub(2,2)) == 'e' or\n    (s:sub(2,2))\
    \ == 'i' or\n    (s:sub(2,2)) == 'o' or\n    (s:sub(2,2)) == 'u')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_b3g6log.lua:27:\
    \ expected: 2, actual: true\nstack traceback:\n\t/tmp/tmp_b3g6log.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \t-- Your code here\n\treturn 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e98mid8.lua:18:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp3e98mid8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowel_count = 0\n    for i=1,#s do\n        if string.sub(s,i,i) ~=\
    \ 'a' and string.sub(s,i,i) ~= 'e' and string.sub(s,i,i) ~= 'i' and string.sub(s,i,i)\
    \ ~= 'o' and string.sub(s,i,i) ~= 'u' then\n            vowel_count = vowel_count\
    \ + 1\n        end\n    end\n    return vowel_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilj8gl_d.lua:23:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpilj8gl_d.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    count = count + #vowels[string.sub(s,i,i)]\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4fwe95j.lua:14:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmph4fwe95j.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmph4fwe95j.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local count = 0\n  for\
    \ i = 1, #s do\n    if vowels[s[i]] == \"y\" and (s[i - 1] == 'a' or s[i - 1]\
    \ == 'e') then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4ois893.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpj4ois893.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = \"aeiou\"\n    local vowel_count = 0\n    for i = 1, #s do\n\
    \        local c = s[i]\n        if vowels[c:byte()] then\n            vowel_count\
    \ = vowel_count + 1\n        end\n    end\n    return vowel_count\nend\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpll22ws4b.lua:21: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \t-- Write your code here\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal\
    \ count = 0\n\tfor i=1,#s do\n\t\tlocal word = tostring(s[i])\n\t\tif word:sub(1,1)\
    \ ~= word:sub(1,1) then return end\n\t\tlocal len = word:len()\n\t\tlocal c =\
    \ word:sub(1,1)\n\t\tif c == 'y' then\n\t\t\tif len == 0 then return end\n\t\t\
    \tlocal last_vowel = word:sub(len-1,len)\n\t\t\tif vowels[last_vowel] == c then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\telse\n\t\t\tif len == 0 then return\
    \ end\n\t\t\tif vowels[word:sub(1,1)] == c then\n\t\t\t\tcount = count + 1\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x31yc3h.lua:38:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp_x31yc3h.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i\
    \ = 0, #s do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdye4cswe.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpdye4cswe.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return string.gsub(s, \".\", function (c)\n      local v = string.tolower(c)\
    \ .. c\n      local ok = true\n      for i = 1, 5 do\n        ok = ok and\n  \
    \          string.find(v, \"[aeiouy]\") == nil or\n            string.find(v,\
    \ string.char(97+i)) != nil\n      end\n      return ok\n    end) + 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsk_uaord.lua:17: unexpected symbol near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for char in s:gmatch(\"[aeiou]\") do\n        if char\
    \ == \"y\" then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnzs9h5r.lua:23:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpqnzs9h5r.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \"[aeiouy]+\", function() return 1 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyo0pnrd.lua:17:\
    \ expected: 2, actual: \"1bcd1\"\nstack traceback:\n\t/tmp/tmpyyo0pnrd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #string.gmatch(s, \"[aeiouAEIOU]\") \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sf1487f.lua:11:\
    \ attempt to get length of a function value\nstack traceback:\n\t/tmp/tmp7sf1487f.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7sf1487f.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local v\n    v = string.gsub(s, \"[aeiou]\", \"\", 2, true)\n    return string.len(v)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvaynmrl.lua:19:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpgvaynmrl.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local count = 0\n    for i,v in\
    \ ipairs(s) do\n        if vowels[v] then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp354ap9m5.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp354ap9m5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3_sfww7.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpe3_sfww7.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = string.lower(s)\n  local count = 0\n  for i = 1, #s do\n    local v = string.sub(s,i,i)\n\
    \    if v ~= 'a' and v ~= 'e' and v ~= 'i' and v ~= 'o' and v ~= 'u' then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpti1arkbs.lua:25:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpti1arkbs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = 'aieou'\n  local ends_with_vowel = s:match '[aeiou]'\n  return\
    \ #(vowels:sub(1))\n    - ( ends_with_vowel and #(vowels:sub(#vowels)) or 0 )\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8ec2h5r.lua:20:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmps8ec2h5r.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n  local words = string.gmatch(s,\
    \ \"%w+\")\n  local count = 0\n  for _, v in ipairs(words) do\n    count = count\
    \ + string.find(vowels, v) -- string.find returns nil if it doesn't find anything\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #(s:gsub(\"[AEIOUaeiouy]\", \"\"))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jf2g0m0.lua:17:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp9jf2g0m0.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \"[aeiouy]*[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjykv923u.lua:17:\
    \ expected: 2, actual: \"e\"\nstack traceback:\n\t/tmp/tmpjykv923u.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i=1,#s do\n        if s[i] == 'a' or s[i] == 'e'\
    \ or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz4qy0zk.lua:23:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpyz4qy0zk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = s.Count(\"a\")\n  for i = 1, s.Count do\n    if string.sub(s,i,i)\
    \ == \"a\" then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsltphyl0.lua:11:\
    \ attempt to call a nil value (field 'Count')\nstack traceback:\n\t/tmp/tmpsltphyl0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpsltphyl0.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = ''\n  for _,v in pairs({'a', 'e', 'i', 'o', 'u'}) do\n    vowels\
    \ = vowels .. v\n  end\n  return s:find(vowels)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_um_pzc_.lua:21:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp_um_pzc_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if ((s:sub(i,i) == \"a\") or (s:sub(i,i)\
    \ == \"e\") or (s:sub(i,i) == \"i\") or (s:sub(i,i) == \"o\") or (s:sub(i,i) ==\
    \ \"u\") then\n         count = count + 1\n      end\n   end\n   return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfqg8tl25.lua:13: ')' expected near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \".\", \"\"):gsub(\"[aeiou]\", \"\"):gsub(\"y\", \"\"\
    ):gsub(\"*\", \"\"):gsub(\"^\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3248v9i.lua:17:\
    \ expected: 2, actual: \"\"\nstack traceback:\n\t/tmp/tmpp3248v9i.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Base case\n  if #s == '' then return 0 end\n  local count = 0\n  -- Iterate\
    \ through string and check for vowels\n  for i = 0, #s do\n    -- If current character\
    \ is a vowel, then increase count\n    if s[i - 1] == 'a' or s[i - 1] == 'e' or\
    \ s[i - 1] == 'i' or\n       s[i - 1] == 'o' or s[i - 1] == 'u' then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58jvxde7.lua:28:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp58jvxde7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Write your function here\n  -- This algorithm iterates through the string\
    \ and counts the number of\n  -- vowels. If the last character is a vowel, the\
    \ vowel count is incremented,\n  -- otherwise, it's not. Then, the count is divided\
    \ by the number of characters\n  -- which were not vowels. This will give the\
    \ number of vowels which exist in\n  -- that portion of the string as opposed\
    \ to the total count\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local n =\
    \ #s\n  if s[n - 1] == \"y\" then n = n - 1 else n = n\n  local vowel_count =\
    \ 0\n  for i = 1, n do\n    if vowels[s[i]] then vowel_count = vowel_count + 1\
    \ end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjucs9mox.lua:39: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:upper()\n  local vowels = \"AEIOU\"\n  local vowel_count = 0\n  for i=1,#s\
    \ do\n    if string.sub(s, i, i+1) ~= \"\" then -- only check for letters and\
    \ space\n      for j=1,#vowels do -- only check for vowels\n        if string.sub(s,\
    \ i, j) == vowels[j] then\n          vowel_count = vowel_count + 1\n        end\n\
    \      end\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5om1r4c.lua:29:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpo5om1r4c.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowelsCount = 0\n\tfor _,v\
    \ in ipairs(s) do\n\t\tif v == vowels[#vowels] then\n\t\t\tvowelsCount = vowelsCount\
    \ + 1\n\t\tend\n\tend\n\treturn vowelsCount\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcts4uvw.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpdcts4uvw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = string.lower(s)\n  local num_vowels = 0\n  for i = 1,#s do\n    if string.sub(s,\
    \ i, i+1)==\"a\" or string.sub(s, i, i+1)==\"e\" or string.sub(s, i, i+1)==\"\
    i\" or string.sub(s, i, i+1)==\"o\" or string.sub(s, i, i+1)==\"u\" then\n   \
    \   num_vowels = num_vowels + 1\n    end\n  end\n  return num_vowels\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofxnrotx.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpofxnrotx.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local count = 0\n   for _,letter in ipairs(s) do\n      if letter == \"a\"\
    \ or letter == \"e\" or letter == \"i\" or letter == \"o\" or letter == \"u\"\
    \ then\n         count = count+1\n      end\n   end\n   return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2r5yh3u.lua:23:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpk2r5yh3u.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  -- The first character\
    \ should be checked to be a vowel.\n  return #vowels - 1 -- subtract 1 since the\
    \ array has zero indexing.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xx_h3gp.lua:19:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp1xx_h3gp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\tfor _, c in pairs(s:gsub(\"[aeiouy]\", \"\")..\"y\") do\n\
    \t\tif c == 'a' then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoivnwje7.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpoivnwje7.lua:12: in local 'candidate'\n\t/tmp/tmpoivnwje7.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Base case:\n  if #s == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoobzt9f6.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #{ unpack(\n    string.gsub(s, \"[^aeiouyAEIOUY]\", \"\") -- remove\
    \ non vowels\n  ) }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2gvg9awt.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp2gvg9awt.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp2gvg9awt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:lower() -- Lower-case the input string\n  for i = 1, #s do -- Loop through\
    \ the characters\n    if s[i] ~= 'a' and s[i] ~= 'e' and s[i] ~= 'i' and s[i]\
    \ ~= 'o' and s[i] ~= 'u' then\n      -- If the current character is not a vowel,\
    \ count it\n      vowels_count = vowels_count + 1\n    end\n  end\n  return vowels_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2gzgp54.lua:15:\
    \ attempt to perform arithmetic on a function value (upvalue 'vowels_count')\n\
    stack traceback:\n\t/tmp/tmps2gzgp54.lua:15: in local 'candidate'\n\t/tmp/tmps2gzgp54.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = 'aeiouAEIOU'\n    local letters = ''\n    for i=1,#s do\n\
    \        letters = letters .. string.sub(s,i,i)\n    end\n    for i=1,#vowels\
    \ do\n        letters = letters .. string.sub(vowels,i,i)\n    end\n    return\
    \ string.len(letters)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbj1v9sel.lua:25:\
    \ expected: 2, actual: 15\nstack traceback:\n\t/tmp/tmpbj1v9sel.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for char in s:gmatch'[aeiou]'\n  do\n    count = count +\
    \ 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefee9k0g.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpefee9k0g.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \".\",\n    function (c)\n      if c == \"a\" or c ==\
    \ \"e\" or c == \"i\" or c == \"o\" or c == \"u\"\n      then\n        return\
    \ c\n      elseif c == \"y\" then\n        return c\n      end\n    end\n  ):gsub(\"\
    .\", \"\"):gsub(\",\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9o4cuzth.lua:26:\
    \ expected: 2, actual: \"\"\nstack traceback:\n\t/tmp/tmp9o4cuzth.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local letters, count = 1, 1\n  s:gsub(\"[aeiouAEIOUY]\",\n    function(letter)\
    \ count = count + 1 end)\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kozkdaj.lua:20:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp0kozkdaj.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Base case (empty string)\n  if s == nil then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3mdbb28w.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   if s == \"\" then return 0 end\n   if s == \"y\" then return 0 end\n   return\
    \ s.gsub(\"[aieouAEIOUY]\", \"\"):gsub(\"y\", \"\"):gsub(\"[aeiouAEIOUY]\", \"\
    y\"):gsub(\"[aeiou]\", \"y\"):gsub(\"[aeiouAEIOUy]\", \"\"):gsub(\"[aeiouAEIOU]\"\
    , \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5e79_rql.lua:13:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp5e79_rql.lua:13: in local 'candidate'\n\t/tmp/tmp5e79_rql.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \".\",\n    function (c) return c == 'a' or\n      c\
    \ == 'e' or\n      c == 'i' or\n      c == 'o' or\n      c == 'u' end\n  ) --\
    \ Count how many vowels there are\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhbg0ffl.lua:11:\
    \ invalid replacement value (a boolean)\nstack traceback:\n\t/tmp/tmpbhbg0ffl.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbhbg0ffl.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:upper()\n  s = s:gsub(\"%A\", \"\"):gsub(\"%O\", \"\")\n  return s:match\
    \ \"[aeiouAEIOUY]\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_ch9zxd.lua:19:\
    \ expected: 2, actual: \"A\"\nstack traceback:\n\t/tmp/tmp0_ch9zxd.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub( s, \"([aeiou])\",\n    function(x) return x:sub(1,1) ==\
    \ 'a' or x:sub(1,1) == 'e' or\n      x:sub(1,1) == 'i' or x:sub(1,1) == 'o' or\
    \ x:sub(1,1) == 'u' end\n  ):byte()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpilj2umu3.lua:11:\
    \ invalid replacement value (a boolean)\nstack traceback:\n\t/tmp/tmpilj2umu3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpilj2umu3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  if s == nil then\n    s = \"nil\"\n  end\n  -- Count number of vowels and return\
    \ them\n  local vowels_count = 0\n  local last_char = string.sub(s,1,1)\n  if\
    \ last_char == \"a\" then\n    vowels_count = vowels_count + 1\n  end\n  if last_char\
    \ == \"e\" then\n    vowels_count = vowels_count + 1\n  end\n  if last_char ==\
    \ \"i\" then\n    vowels_count = vowels_count + 1\n  end\n  if last_char == \"\
    o\" then\n    vowels_count = vowels_count + 1\n  end\n  if last_char == \"u\"\
    \ then\n    vowels_count = vowels_count + 1\n  end\n  return vowels_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmzteqck.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjmzteqck.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {\n        [\"a\"] = \"a\",\n        [\"e\"] = \"e\",\n  \
    \      [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n        [\"u\"] = \"u\",\n\
    \        [\"y\"] = \"y\",\n    }\n    return s:gsub(\"[^\" .. table.concat(vowels,\
    \ \", \") .. \"]\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccmgvhif.lua:19:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpccmgvhif.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpccmgvhif.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local v = 0\n    for w in string.gmatch(s, \"[aeiouy]\") do\n        v =\
    \ v + 1\n    end\n    return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmport45mzd.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmport45mzd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {}\n    for i = 1, #s do\n        table.insert(vowels, table.match(s,\
    \ '[aeiou]'..(i==#s and 'y' or '')))\n    end\n    return #table.concat(vowels,\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeq4jbvxy.lua:13:\
    \ attempt to call a nil value (field 'match')\nstack traceback:\n\t/tmp/tmpeq4jbvxy.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpeq4jbvxy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:lower()\n  local vowels = {'a','e','i','o','u','y'}\n  local count =\
    \ 0\n  for i = 1, #s do\n    if vowels[s[i]] then count = count+1 end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphidq99s0.lua:23:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmphidq99s0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count, l = 0, 1\n  repeat\n\
    \    count = count + 1\n    local v = s:sub(l,l)\n    if #v > 0 and v:sub(0,1)\
    \ == 'y' then count = count + 1 end\n    l = l + 1\n  until l > #s\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic3t03r7.lua:25:\
    \ expected: 2, actual: 5\nstack traceback:\n\t/tmp/tmpic3t03r7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \".\", function(a) vowels(a) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa9zdl75a.lua:11:\
    \ attempt to call a nil value (global 'vowels')\nstack traceback:\n\t/tmp/tmpa9zdl75a.lua:11:\
    \ in function </tmp/tmpa9zdl75a.lua:11>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpa9zdl75a.lua:11: in local 'candidate'\n\t/tmp/tmpa9zdl75a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- Your code here\n    return string.gsub(s, \".\", \"%1\").\"%%1\".\n  \
    \            (string.gsub(\"[aeiouy]+\", \"%1\", \"[aeiouy]*\") % \"e%%1\").\n\
    \              (string.gsub(\"^[aeiouy]+\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]*\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]*\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]*$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]*$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]*$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]*$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"[aeiouy]+$\", \"%1\", \"[aeiouy]*\") % \"e%%1\"\
    ).\n              (string.gsub(\"^[aeiouy]+\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpobxbdbfo.lua:12: <name> expected near '\"%%1\"'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal count = 0\n\tlocal i, n = 0, #s\n\
    \twhile i < n do\n\t\tif vowels[s[i]] then count = count + 1 end\n\t\ti = i +\
    \ 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fnwcxxp.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp0fnwcxxp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  if s == \"\" then return 0 end\n  local vowels = {\"a\",\"e\",\"i\",\"o\",\"\
    u\"}\n  local vowel_count = 0\n  for i = 1, #s do\n    if vowels[string.sub(s,i,i)]\
    \ then\n      vowel_count = vowel_count + 1\n    end\n  end\n  return vowel_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp060y_b8a.lua:25:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp060y_b8a.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for c\
    \ in string.gmatch(s, '[aeiouy]') do\n        if vowels[c] then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2s8_kqka.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp2s8_kqka.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, '[aeiouyAIEOUY]+', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxts_8tje.lua:17:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmpxts_8tje.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local count = {}\n  for\
    \ i = 1, #s do\n    local v = s[i]\n    count[v] = (count[v] or 0) + 1\n  end\n\
    \  for _, v in pairs(vowels) do\n    count[v] = (count[v] or 0) - 1\n  end\n \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9421b0ol.lua:15:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp9421b0ol.lua:15: in local 'candidate'\n\
    \t/tmp/tmp9421b0ol.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for i in string.gmatch(s, \"[aeiouAEIOU]\") do\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9ukrkbp.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpt9ukrkbp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    return #vowels - 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh_82hd_.lua:18:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpxh_82hd_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local letters = {}\n  for c in string.gmatch(s, \"%S+\") do\n    letters[c]\
    \ = letters[c] or 0\n    letters[c] = letters[c] + 1\n  end\n  for v in \"aeiou\"\
    \ do\n    if letters[v] and letters[v] > 1 then\n      return letters[v]\n   \
    \ end\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdh0blbn.lua:16:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpjdh0blbn.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpjdh0blbn.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local vowels = {}\n   for _, ch in pairs(s) do\n      if ch == \"a\" or ch\
    \ == \"e\" or ch == \"i\" or ch == \"o\" or ch == \"u\"\n      then\n        \
    \ table.insert(vowels, ch)\n      end\n   end\n   local vowel_count = #vowels\n\
    \   return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjuj043y4.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpjuj043y4.lua:12: in local 'candidate'\n\t/tmp/tmpjuj043y4.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   s = string.gsub(s, \".\", \"\") -- Remove all non-letters\n   s = string.gsub(s,\
    \ \" \", \"\") -- Remove all spaces\n   return #string.gmatch(s, \"[aeiouy]+\"\
    ) -- Count the vowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzog23825.lua:13:\
    \ attempt to get length of a function value\nstack traceback:\n\t/tmp/tmpzog23825.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzog23825.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {}\n  local i = 1\n  while i <= #s do\n    local v = s:sub(i,i)\n\
    \    i = i + 1\n    if v == \"a\" or v == \"e\" or v == \"i\" or v == \"o\" or\
    \ v == \"u\" then\n      vowels[#vowels+1] = v\n    end\n  end\n  return #vowels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7z2u9xfo.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7z2u9xfo.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local count = 0\n  for i=1,#s do\n\
    \    if vowels[s[i]] == true then\n      count = count + 1\n    end\n  end\n \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5phibl2z.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp5phibl2z.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = \"aeiouy\"\n  local num_vowels = 0\n  for i = 1, #s do\n   \
    \ local c = s:sub(i, i)\n    if vowels:find(c) ~= nil then\n      num_vowels =\
    \ num_vowels + 1\n    end\n  end\n  return num_vowels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r6p9gxv.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5r6p9gxv.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    if s[i] == \"a\" then\n      n = n + 1\n\
    \    else if s[i] == \"e\" then\n      n = n + 1\n    else if s[i] == \"i\" then\n\
    \      n = n + 1\n    else if s[i] == \"o\" then\n      n = n + 1\n    else if\
    \ s[i] == \"u\" then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk_aqowa2.lua:40: 'end' expected (to close 'if' at line 15)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local n = 0\n  for c in s:gmatch(\".\") do if c == \"a\" or c == \"e\" or c\
    \ == \"i\" or c == \"o\" or\n                                      c == \"u\"\
    \ then n = n + 1 end end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqynywwn.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmptqynywwn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    return #vowels - 1 -- subtract\
    \ 1 because count from 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgapu5_x4.lua:18:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpgapu5_x4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #(\n    string.gsub(s, \"[aeiouy]\", \"\") -- \"y\" is considered a\
    \ vowel\n  ) + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxb8pwem.lua:19:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpmxb8pwem.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for c in string.gsub(s, \"[^aeiouAEIOUY]\", \"\")\n    do\n\
    \      count = count + 1\n    end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4gyjbuxi.lua:12:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmp4gyjbuxi.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4gyjbuxi.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local vowel_count = 0\n   for char in s:gmatch(\"[aeiouy]+\") do\n      vowel_count\
    \ = vowel_count + 1\n   end\n   return vowel_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3awo6n3.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmph3awo6n3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for _, c in ipairs(s) do\n    if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqppju0k.lua:23:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpqqppju0k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_counter = 0\n\
    \    for i = 1, #s do\n        if vowels[string.sub(s,i,i)] then\n           \
    \ vowels_counter = vowels_counter + 1\n        end\n    end\n    return vowels_counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wpa7ytt.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp8wpa7ytt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
