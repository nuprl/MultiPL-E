name: HumanEval_121_solution
language: lua
prompt: "-- Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1]) ==> 12\n--\
  \ solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\nlocal function\
  \ solution(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
  \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
  \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5,\
  \ 9}), 5)\n    lu.assertEquals(candidate({2, 4, 8}), 0)\n    lu.assertEquals(candidate({30,\
  \ 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3, 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  assert(#lst >= 1, 'Empty list')\n  \n  local evens, odds = list{},\
    \ list{}\n  for i,v in ipairs(lst) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ v)\n    else\n      table.insert(odds, v)\n    end\n  end\n  \n  return sum(odds)\
    \ - sum(evens)\nend", "\tlocal sum = 0\n\tlocal num = 1\n\tfor i = 1, #lst, 1\
    \ do\n\t\tif i % 2 ~= 0 then\n\t\t\tsum = sum + lst[i]\n\t\t\tnum = num + 1\n\t\
    \tend\n\tend\n\treturn sum / num\nend", "    local odd = 0\n    for _, v in pairs(lst)\
    \ do\n        if v ~= 0 then\n            odd = odd + (v%2)\n        end\n   \
    \ end\n    return odd\nend", "\tlocal sum = 0\n\tlocal evens = 0\n\tlocal odds\
    \ = 0\n\tfor i = 1, #lst do\n\t\tif (i % 2 == 0) then\n\t\t\tsum = sum + lst[i]\n\
    \t\telse\n\t\t\todds = odds + 1\n\t\tend\n\tend\n\tfor i = 1, #lst do\n\t\tif\
    \ (i % 2 ~= 0) then\n\t\t\tevens = evens + 1\n\t\tend\n\tend\n\tsum = sum - lst[#lst]\n\
    \treturn sum + odds * evens\nend", "    local result = 1\n    for i = 1, #lst\
    \ do\n        if i % 2 == 1 then\n            result = result + lst[i]\n     \
    \   end\n    end\n    return result\nend", "    return lst:reduce(function(prev,cur,ii)\n\
    \        return prev + cur - lst[ii] + (ii % 2 and 1 or 0)\n    ,0)\nend", " \
    \ if lst:len() ~= 0 then\n    return solution(lst:sub(2))\n  else\n    return\
    \ 0\n  end\nend", "  local sum = 0\n  for i, v in ipairs(lst) do\n    if (v %2\
    \ == 1) then\n      sum = sum + v\n    end\n  end\n  return sum\nend", "\tlocal\
    \ sum = 0\n\tfor i, v in pairs(lst) do\n\t\tsum = sum + v\n\t\tif v%2 == 1 then\n\
    \t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend", "  local result = 0\n\
    \  for _,i in ipairs(lst) do\n    local is_odd = i % 2 ~= 0\n    if is_odd then\n\
    \      result = result + i\n    end\n  end\n  return result\nend", "    assert(lst)\n\
    \    assert(#lst >= 1)\n    local result = 0\n    for _, v in ipairs(lst) do\n\
    \        if v % 2 == 1 then\n            result = result + v\n        end\n  \
    \  end\n    return result\nend", "    local sum = 0\n    for i = 1, #lst do\n\
    \        if (lst[i] % 2) == 0 then\n            sum = sum + lst[i]\n        end\n\
    \    end\n    return sum\nend", "    local evenSum = 0\n    local oddSum = 0\n\
    \    for i, v in ipairs(lst) do\n        if ((v & 0x1) == 0) then\n          \
    \  evenSum = evenSum + v\n        else\n            oddSum = oddSum + v\n    \
    \    end\n    end\n    return evenSum + oddSum\nend", "\tlocal even, odd = 0,\
    \ 0\n\tfor index, value in ipairs(lst) do\n\t\tif index%2 == 0 then\n\t\t\teven\
    \ = even + value\n\t\telse\n\t\t\todd = odd + value\n\t\tend\n\tend\n\treturn\
    \ even+odd\nend", "  -- Write your code here.\n  \n  local result = 0\n  for i\
    \ = 1, #lst do\n    if lst[i] % 2 == 0 then\n      result = result + lst[i]\n\
    \    end\n  end\n  return result\nend", "   -- Write your code in JavaScript (Node.js\
    \ 8.9.4)\n   return lst\n      |> List.filter( function(x)\n          return x%2\
    \ == 1\n      end)\n      |> List.sum\nend", "  local evenSum = 0\n  for idx =\
    \ 1, #lst do\n    if idx%2 == 1 then\n      evenSum = evenSum + lst[idx]\n   \
    \ end\n  end\n  return evenSum\nend", "  local even, odd\n  local n = 1\n  for\
    \ i = 1, #lst do\n    if i % 2 == 1 then\n      if even and odd then\n       \
    \ even = even + odd - lst[i]\n        odd = nil\n      else\n        even = lst[i]\n\
    \        odd = nil\n      end\n    else\n      if even and odd then\n        even\
    \ = even + lst[i]\n      else\n        odd = lst[i]\n      end\n    end\n    n\
    \ = n + 1\n  end\n  return even\nend", "   local sum = 0\n   for i=1,#lst do\n\
    \      if ((i % 2) == 0) then\n         sum = sum + lst[i]\n      end\n   end\n\
    \   return sum\nend", "\tlocal s = 0\n\tlocal t = 0\n\tfor _, n in ipairs(lst)\
    \ do\n\t\tif n % 2 == 0 then\n\t\t\tt = t + n\n\t\telse\n\t\t\ts = s + t\n\t\t\
    end\n\tend\n\treturn s\nend", "    local result = 0\n    for i = 1, #lst do\n\
    \        if lst[i] % 2 == 0 then\n            result = result + lst[i]\n     \
    \   end\n    end\n    return result\nend", "  if #lst <= 0 then return 0 end\n\
    \  local sum = 0\n  for _, elem in ipairs(lst) do\n    sum = sum + elem % 2 ==\
    \ 1 and elem or 0\n  end\n  return sum\nend", "  local odd = {}\n  for i = 1,\
    \ #lst do\n    if lst[i] % 2 ~= 0 then\n      table.insert(odd, lst[i])\n    end\n\
    \  end\n  return sum(odd)\nend", "  if #lst == 0 then\n    return 0\n  end\n \
    \ if #lst == 1 then\n    return lst[1]\n  end\n  return lst[1]:gsub(\"(..)\",function(x)\n\
    \    return solution(lst[2:x]) end)\nend", "  -- Base Case: When list is empty\n\
    \  if #lst == 0 then return 0 end", "  -- Base case: If the list has no odd elements,\
    \ return 0\n  if #lst <= 0 then return 0 end", "  local total = 0\n  local pos\n\
    \  for pos = 1, #lst do\n    if list[pos] % 2 == 0 then\n      total = total +\
    \ list[pos]\n    end\n  end\n  return total\nend", "  -- Base case\n  if #lst\
    \ <= 1 then return 0 end", "   if #lst == 0 then\n      return 0\n   end\n   \n\
    \   local evens = lst:sub(1,#lst)\n   local odds   = lst:sub(1,#lst-1)\n   \n\
    \   local sum = 0\n   local i = 1\n   \n   while i < #evens do\n      if evens[i]\
    \ % 2 ~= 0 then\n         sum = sum + odds[i]\n         i = i + 1\n      else\n\
    \         i = i + 1\n      end\n   end\n   \n   return sum\nend", "    -- Write\
    \ your code here\n    local sum = 0\n    for i = 1, #lst - 1 do\n        if lst[i]\
    \ % 2 == 0 then\n            sum = sum + lst[i]\n        else\n            sum\
    \ = sum - lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Q2.10 Given an array, X, of N integers, return the sum of all elements in the\
    \ array that are\ngreater than X.", "  local sum = 0\n  for i = 2, #lst do\n \
    \   if lst[i ^ 1] % 2 ~= 0 then\n      sum = sum + lst[i ^ 1]\n    end\n  end\n\
    \  return sum\nend", "  local even, odd = 0, 0\n  for i = 1, #lst do\n    if lst[i]\
    \ % 2 ~= 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even + odd\nend", "  local sum = 0 -- Initialize the\
    \ sum\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 then\n      sum = sum +\
    \ v\n    end\n  end\n  return sum\nend", "    local oddSum = 0\n    for i=1, #lst\
    \ do\n        if i % 2 == 1 then\n            oddSum = oddSum + lst[i]\n     \
    \   end\n    end\n    return oddSum\nend", "  return lst:reduce(function(acc,\
    \ item)\n    return acc + item % 2 and not (item % 4) and item / 2 or (item %\
    \ 4) and acc + (item / 4) or acc\n  end)\nend", "    -- write your code in JavaScript\
    \ (Node.js 8.9.4)\n    \n    local result = 0\n    for index, value in ipairs(lst)\
    \ do\n        if value % 2 == 0 then\n            \n            if index % 2 ==\
    \ 1 then\n                result =  result + value\n            end\n        end\n\
    \    end\n    \n    return result\nend", "    local even, odd = {}, {}\n    for\
    \ i = 1, #lst do\n        if lst[i] % 2 == 0 then\n            if #even > 0 then\n\
    \                even[#even + 1] = even[#even - 1] + lst[i]\n            else\n\
    \                even[#even + 1] = lst[i]\n            end\n        elseif lst[i]\
    \ % 2 == 1 then\n            if #odd > 0 then\n                odd[#odd + 1] =\
    \ odd[#odd - 1] + lst[i]\n            else\n                odd[#odd + 1] = lst[i]\n\
    \            end\n        end\n    end\n    return #even * 2 + #odd\nend", " \
    \   local even = {}\n    local total = 0\n    for i = 1, #lst do\n        if i\
    \ % 2 == 1 then\n            even[#even+1] = lst[i]\n        end\n    end", " \
    \   -- base case\n    if lst == nil then\n        return 0\n    end", "  local\
    \ evens, odds = 0, {}\n  for i = 1, #lst do\n    local pos = math.floor((i-1)\
    \ / 2)\n    if not evens[pos] then evens[pos] = 0 end\n    if not odds[pos] then\
    \ odds[pos] = 0 end\n    evens[pos] = evens[pos] + lst[i]\n    odds[pos] = odds[pos]\
    \ + lst[i]\n  end\n  return evens[math.floor((#lst) / 2)]\nend", "  local total\
    \ = 0\n  for i = 1, #lst do\n    if i % 2 ~= 0 then\n      total = total + lst[i]\n\
    \    end\n  end\n  return total\nend", "  local sum = 0\n  local i = 1\n  while\
    \ i < lst do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n      lst[i]\
    \ = nil\n    end\n    i = i + 1\n  end\n  return sum\nend", "  local sum = 0\n\
    \  for _, v in pairs(lst) do\n    if v %2 ~= 0 then\n      sum = sum + v\n   \
    \ end\n  end\n  return sum\nend", "  -- Base case\n  if #lst == 0 then\n    return\
    \ 0\n  end", "  if lst == nil then return nil end\n  local sum = 0\n  for _, v\
    \ in ipairs(lst) do\n    if v % 2 ~= 0 then sum = sum + v end\n  end\n  return\
    \ sum\nend", "\tlocal evenSum = 0 -- initialized to zero since the first number\
    \ is even\n\tlocal index = 0 -- initialized to zero because the first number is\
    \ even\n\tfor i=1, #lst do -- iterate over the list starting at element 1\n\t\t\
    if i%2 ~= 0 then\n\t\t\tif evenSum ~= 0 then\n\t\t\t\tevenSum = evenSum + lst[index]\n\
    \t\t\telse\n\t\t\t\tevenSum = lst[index]\n\t\t\tend\n\t\tend\n\t\tindex = index\
    \ + 1 -- increment the index\n\tend\n\treturn evenSum\nend", "   local even =\
    \ 0 -- sum of the even elements\n   for i = 1, #lst do\n      if math.mod(lst[i],\
    \ 2) == 1 then even = even + lst[i] end\n   end\n   return even\nend", "    --\
    \ base case\n    if lst[1] == nil then\n        return 0\n    end", "    local\
    \ sum = 0\n    for i = 1, #lst do\n        if i % 2 ~= 0 then\n            sum\
    \ = sum + lst[i]\n        end\n    end\n    return sum\nend", "    assert(#lst>=1)\n\
    \    assert(type(lst[1])==\"number\")\n    assert(lst[1]>0)\n    \n    local sum=0\n\
    \    for i=2,#lst do\n        if lst[i]%2==0 then\n            sum=sum+lst[i-1]\n\
    \        end\n    end\n    \n    return sum\nend", "    local sum = 0\n    for\
    \ _,v in ipairs(lst) do\n        if v % 2 ~= 0 then\n            sum = sum + v\n\
    \        end\n    end\n    return sum\nend", "  -- Write your code in function\
    \ form so that it returns the correct value\n  local odd = 0\n  for i = 1,#lst\
    \ do\n    if lst[i] % 2 == 1 then\n      odd = odd + lst[i]\n    end\n  end\n\
    \  return odd\nend", "    -- write your code in JavaScript (Node.js 8.9.4)\n \
    \   local sum = 0\n    local oddIndex = 0\n    for index, item in ipairs(lst)\
    \ do\n        if item % 2 == 1 then\n            sum = sum + item\n          \
    \  oddIndex = oddIndex + 1\n        end\n    end", "    if lst[1] == nil then\
    \ return 0 end\n    local sum = 0\n    for i = 2, lst[1] do\n        if lst[i]\
    \ % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend", "  local sum = 0\n  for _, v in pairs(lst) do\n    if v % 2 ~= 0\
    \ then\n      sum = sum + v\n    end\n  end\n  return sum\nend", "  -- Your code\
    \ here\n  local res = lst[1]\n  for i = 2, #lst do\n    if lst[i] % 2 == 0 and\
    \ lst[i-1] % 2 == 1 then\n      res = res + lst[i]\n    end\n  end\n  return res\n\
    end", "  assert(type(lst) == 'table')\n  local even = 0\n  local odd = 0\n  for\
    \ i = 1, #lst, 1 do\n    if lst[i] == 0 then -- Even number only\n      even =\
    \ even + lst[i]\n    elseif lst[i] == 1 then -- Odd number only\n      odd = odd\
    \ + lst[i]\n    end\n  end\n  return even * odd\nend", "  -- Base case: empty\
    \ list\n  if #lst == 0 then\n    return 0\n  end\n  -- Base case: only one element\n\
    \  if #lst == 1 then\n    return lst[1]\n  end\n  -- Base case: list has only\
    \ even elements\n  if lst[2] == nil or lst[1] == nil then\n    return solution(lst:subtable(3))\n\
    \  end\n  -- Recursive step\n  return solution(lst:subtable(3)) + (lst[2] * 2)\n\
    end", "  local n = 0\n  for i=1,#lst do\n    if lst[i]%2==0 then\n      n = n\
    \ + lst[i]\n    end\n  end\n  return n\nend", "  -- base case\n  if lst == nil\
    \ then\n    return 0\n  end\n  \n  -- recursive case\n  if type(lst[1]) == \"\
    number\" then\n    -- base case\n    if lst == nil or lst[1] == 0 then\n     \
    \ return 0\n    end\n    -- recursive case\n    if lst[1] == 1 then\n      return\
    \ 1 + solution(lst[2:])\n    end\n  else\n    -- base case\n    if lst == nil\
    \ or lst[1] == \"nil\" or lst[1] == \"\" then\n      return 0\n    end\n    --\
    \ recursive case\n    return solution(lst[2]) + solution(lst[3:end])\n  end\n\
    end", "  -- Base case: empty list, or list with just one element.\n  if not lst\
    \ or #lst == 1 then\n    return 0\n  else\n    -- Calculate the sum of each odd\
    \ element and the next even element, if present.\n    local odd, even = lst[1],\
    \ lst[2]\n    for i = 2, #lst do\n      odd = odd + lst[i] -- The sum of all odd\
    \ elements, starting from the current element.\n      even = even + lst[i] --\
    \ The sum of all even elements, starting from the current element.\n    end\n\
    \    -- Subtract the odd element and even element from each other, and return\
    \ that value.\n    return odd - even\n  end\nend", '  -- write your code in Go',
  "  local sum = 0\n  for _, x in ipairs(lst) do\n    if x % 2 == 1 then\n      sum\
    \ = sum + x\n    end\n  end\n  return sum\nend", "   local even = lst:clone()\n\
    \   for _, v in pairs(even) do\n      if v %2 == 0 then\n         local idx =\
    \ math.floor( (v / 2) )\n         even[idx] = nil\n      end\n   end\n   return\
    \ sum( unpack(even) ):convert( 'integer' )\nend", "  local sum = 0\n  for _, v\
    \ in ipairs(lst) do\n    if v %2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend", "  return lst[1] or 0 + (lst[2] or 0)\nend", "    local sum\
    \ = 0\n    for i, x in ipairs(lst) do\n        sum = sum + (x % 2 == 1 and 0 or\
    \ 1)\n    end\n    return sum\nend\n</cell>\n<text>\nProblem 5\nDefine a procedure,\
    \ sum_of_divisors, that takes as input a list of integers, sums and returns the\
    \ sum of all the divisors of the numbers in the list using the formula $n!$ (each\
    \ number divides itself by all numbers to the left of it). For example, if the\
    \ list contains $15$, the sum is $6$, since $15$ divides itself by $15$, $6$ divides\
    \ itself by $6$, and $6$ divides itself by $3$ (3).", "  local total, even = 0,\
    \ false\n  for i in pairs(lst) do\n    if even and i ~= 0 then\n      total =\
    \ total + i\n    else\n      even = true\n    end\n  end\n  return total\nend",
  "  if lst[1] == nil then\n    return 0\n  end\n  local sum = 0\n  for i = 2, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend", "  -- Base case\n  if lst == nil then\n    return nil\n \
    \ end\n  -- Solve recursively\n  local sum = lst[1]\n  if #lst > 1 then\n    for\
    \ i = 2, #lst, 2 do\n      local v = lst[i]\n      if v % 2 == 1 then\n      \
    \  sum = sum + v\n      end\n    end\n  end\n  return sum\nend", "  local sum\
    \ = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v ^ 2 - (v & 1)\n  end\n\
    \  return sum\nend", "  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 1\
    \ then\n      if lst[i] % 2 == 1 then\n        sum = sum + lst[i]\n      end\n\
    \    end\n  end\n  return sum\nend", "   local odd = 0\n   for i = 1, #lst do\n\
    \      if i % 2 == 1 then\n         odd = odd + lst[i]\n      end\n   end", " \
    \   if not lst then\n        return 0\n    end\n    if #lst <= 0 then\n      \
    \  return 0\n    end\n    local total, idx1, idx2 = 0, 0, 0\n    for idx1, x in\
    \ pairs(lst) do\n        if idx1 % 2 == 1 then\n            total = total + x\n\
    \        end\n        if idx1 == #lst - 1 then\n            break\n        end\n\
    \        if idx1 % 2 ~= 0 then\n            total = total + lst[idx1 + 1]\n  \
    \      end\n    end\n    return total\nend", "  local result = 0\n  for i = 1,\
    \ #lst do\n    if i % 2 == 0 then\n      result = result + lst[i]\n    end\n \
    \ end\n  return result\nend", "    local i, sum = 0, 0\n    for i = 1, #lst do\n\
    \        if i % 2 ~= 0 then\n            sum = sum + lst[i]\n        end\n   \
    \ end\n    return sum\nend", "    local sum = 0\n    for _, value in pairs(lst)\
    \ do\n        if value:byte() % 2 == 1 then\n            sum = sum + value\n \
    \       end\n    end\n    return sum\nend", "   local sum = 0\n   for i = 1, #lst\
    \ do\n      if i % 2 == 0 then\n         sum = sum + lst[i]\n      end\n   end\n\
    \   return sum\nend", "  if #lst < 1 then return nil end\n  if #lst < 2 then return\
    \ 0 end\n  return lst[#lst+1] + solution(lst:sub(2))\nend", "  return lst and\
    \ lst[math.floor((#lst-1)/2)]+lst[math.floor((#lst-1)/2)]\nend", "  local sum\
    \ = 0\n  for _, elem in pairs(lst) do\n    if elem % 2 == 1 then\n      sum =\
    \ sum + elem\n    end\n  end\n  return sum\nend", "  local total = 0\n  for i,\
    \ num in ipairs(lst) do\n    if num % 2 == 1 then\n      if i ~= i-1 then\n  \
    \      total = total + num\n      end\n    end\n  end\n  return total\nend", " \
    \   if not lst or #lst == 0 then\n        return 0\n    end\n    local n = 0\n\
    \    for i = 1, #lst do\n        if lst[i] % 2 == 1 then\n            n = n +\
    \ lst[i]\n        end\n    end\n    return n\nend", "\tlocal even = 0\n\tlocal\
    \ odd = 0\n\tfor i = 0, lst:len() do\n\t\tlocal num = lst[i]\n\t\tif i % 2 ==\
    \ 0 then\n\t\t\teven = even + num\n\t\telse\n\t\t\todd = odd + num\n\t\tend\n\t\
    end\n\treturn even + odd\nend", "  local evens = 0\n  for i = 1,#lst do\n    if\
    \ lst[i] % 2 == 1 then\n      if i % 2 == 0 then\n\tevens = evens + lst[i]\n \
    \     end\n    end\n  end\n  return evens\nend", "    local even = 0\n    local\
    \ odd = 0\n    for _, v in ipairs(lst) do\n        if v %2 == 0 then\n       \
    \     even = even + v\n        else\n            odd = odd + v\n        end\n\
    \    end\n    return even + odd\nend", "  -- base case\n  if lst[1] == nil then\
    \ return 0 end\n  \n  -- initialize a variable\n  local sum = 0 \n  \n  -- iterate\
    \ through the list\n  for i=2, #lst do\n    -- check if the element is even\n\
    \    if i % 2 == 0 then -- it is even\n      -- add it to the sum\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  \n  -- return the sum\n  return sum\nend", " \
    \ -- Your code here\n  local sum = 0\n  local temp = 0\n  for i=1,#lst do\n  \
    \  temp = temp + lst[i]\n    if i % 2 == 1 then\n      sum = sum + temp\n    end\n\
    \  end\n  return sum\nend\nprint(solution([5, 8, 7, 1])) -- 12\nprint(solution([3,\
    \ 3, 3, 3, 3])) -- 9\nprint(solution([30, 13, 24, 321])) -- 0", "  return lst[#lst]:reduce(function(sum,\
    \ x)\n    return sum + x % 2 ~= 0 and x + sum or sum\n  end)\nend", "  -- base\
    \ case\n  if lst == nil then return 0 end\n  -- base case\n  if #lst == 0 then\
    \ return 0 end\n  -- base case\n  if lst[1] == 0 then return lst[2] end\n  --\
    \ base case\n  if lst[1] == 1 then return lst[2] - lst[1] end\n  -- recursion\n\
    \  local sum = 0\n  local sumEven = 0\n  for i = 1, #lst do\n    if i % 2 == 0\
    \ then\n      sum = sum + lst[i]\n    else\n      sumEven = sumEven + lst[i]\n\
    \    end\n  end\n  return sumEven + sum\nend", "  local sum = 0\n  for i=1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend", "  local evenSum = 0\n  local oddSum = 0\n  for _, v in pairs(lst)\
    \ do\n    if v %2 == 0 then\n      evenSum = evenSum + v\n    else\n      oddSum\
    \ = oddSum + v\n    end\n  end\n  return evenSum + oddSum\nend", "  local sum\
    \ = 0\n  local len = #lst\n  for i = 1, len do\n    if math.mod(i, 2) == 1 then\n\
    \      sum = sum + lst[i]\n    end\n  end\n  return sum\nend", "  local sum_even\
    \ = 0\n  for i = 1, #lst do\n    if (lst[i] % 2) ~= 0 then\n      sum_even = sum_even\
    \ + lst[i]\n    end\n  end\n  return sum_even\nend", "   local total = 0\n   for\
    \ _, v in pairs(lst) do\n      if v % 2 == 1 then\n         total = total + v\n\
    \      end\n   end\n   return total\nend", "    local sum = 0\n    local evenIndex\
    \ = 0", "  if #lst == 0 then\n    return 0\n  end\n  \n  local odd = 0 -- sum\
    \ of odd numbers\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      odd = odd\
    \ + lst[i]\n    end\n  end\n  return odd\nend", "   local sum = 0\n   local i\
    \ = 1\n   while i <= lst do\n      if lst:sub(i,i) == 1 then\n         sum = sum\
    \ + lst:sub(i-1,i)\n      end\n      i = i + 1\n   end\n   return sum\nend", "\t\
    local sum = 0\n\tlocal odd = 0\n\tfor i=1,#lst,2 do\n\t\tlocal value = lst[i]\n\
    \t\tif (value % 2) == 1 then\n\t\t\tsum = sum + value\n\t\t\todd = 1\n\t\telseif\
    \ (odd == 0) then\n\t\t\tsum = value\n\t\t\todd = 1\n\t\telseif (odd == 1) then\n\
    \t\t\tsum = sum + value\n\t\t\todd = 0\n\t\tend\n\tend\n\treturn sum\nend", " \
    \ local sum = 0\n  for i=1,#lst do\n    local el = lst[i]\n    if el % 2 == 0\
    \ then\n      if el > 1 then\n        sum = (el + sum) / 2\n      else\n     \
    \   sum = (el + sum) / 2\n      end\n    end\n  end\n  return sum\nend", "  assert(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i > 1 then\n      if lst[i] > lst[i\
    \ - 1] + 1 then\n        sum = sum + lst[i - 1] + 1\n      end\n    else\n   \
    \   sum = sum + lst[i] + 1\n    end\n  end\n  return sum\nend", "  local n = 1\n\
    \  local even = true\n  for v in lst do\n    if not even then\n      n = n + v\n\
    \    elseif v % 2 == 1 then\n      n = n + v\n    end\n  end\n  return n\nend",
  "    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 ~= 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend", "  assert(#lst\
    \ >= 1)\n  local sum = 0\n  for i=1, #lst do\n    if i % 2 == 0 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend", "  local sum = 0\n  for\
    \ i = 1, #lst do\n    if lst[i]%2 == 1 then\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum\nend", "  return lst\n  and sum(lst)\n  and lst[math.floor(#lst/2)+math.mod(#lst,2)]:zero()\n\
    end", "  local sum = 0\n  for i = 1, #lst, 2 do\n    if lst[i] % 2 == 1 then\n\
    \      sum = sum + lst[i]\n    end\n  end\n  return sum\nend", "    if lst[1]\
    \ == nil then\n        return 0\n    end\n    local sum_even = 0\n    local sum_odd\
    \ = 0\n    local n = #lst\n    for i, v in pairs(lst) do\n        if i % 2 ==\
    \ 0 then\n            sum_even = sum_even + v\n        else\n            sum_odd\
    \ = sum_odd + v\n        end\n    end\n    return sum_even + sum_odd\nend", " \
    \   if lst[1] == nil then return nil\n    else if lst[1] == 1 then return lst[2]\
    \ -- First element of list is 1\n    else local sum = 0 -- Second element of list\
    \ is odd\n    for i = 2, #lst do\n        if lst[i] % 2 ~= 0 then return nil --\
    \ Element is odd\n        sum = sum + lst[i]\n    end\n    return sum\n    end\n\
    end", "    assert(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if\
    \ i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend", "  local oddsum = 0\n  for _, item in pairs(lst) do\n    if item\
    \ % 2 == 0 then\n      oddsum = oddsum + item\n    end\n  end\n  return oddsum\n\
    end", "    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend", " \
    \   if #lst == 0 then\n        return 0\n    end\n    local sum = 0\n    for i\
    \ = 1, #lst do\n        if lst[#lst]%2 == 0 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<cell>", "    local s = 0\n\
    \    for i=1,#lst do\n        if lst[i]%2==1 then\n            s = s + lst[i]\n\
    \        end\n    end\n    return s\nend", "  local sum = 0\n  local i = 1\n \
    \ while i < #lst do\n    if lst[i] == 0 then\n      i = i + 1\n      continue\n\
    \    end\n    sum = sum + lst[i]\n    i = i + 1\n  end\n  return sum\nend", " \
    \ local sum = 0\n  for i=1, #lst do\n    if lst[i] % 2 == 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend", "  if lst == nil or #lst ==\
    \ 0 then\n    return 0\n  end\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      odd = odd + lst[i]\n    end\n  end\n  return odd\nend",
  "    local evens, odds = 0, 0\n    for i = 1, #lst do\n        if i % 2 == 0 then\n\
    \            evens = evens + lst[i]\n        else\n            odds = odds + lst[i]\n\
    \        end\n    end\n    return odds\nend", "  local evenSum = 0\n  local oddSum\
    \ = 0\n  for i = 1, #lst do\n    if i ~= #lst and i % 2 = 0 then\n      evenSum\
    \ = evenSum + lst[i]\n    else\n      oddSum = oddSum + lst[i]\n    end\n  end\n\
    \  return evenSum + oddSum\nend", "  assert(type(lst) == \"table\")\n  \n  if\
    \ #lst == 0 then\n    return 0\n  else\n    local sum = 0\n    \n    for i = 1,\
    \ #lst do\n      if lst[i] % 2 == 0 then\n        sum = sum + lst[i]\n      end\n\
    \    end\n    \n    return sum\n  end\nend", "    if lst == nil then\n       \
    \ return nil\n    end", "  assert(type(lst) == 'table')\n  if #lst == 0 then\n\
    \    return 0\n  else\n    local even, odd = 0, 0\n    for i=1,#lst do\n     \
    \ if i%2 == 0 then\n        even = even + lst[i]\n      else\n        odd = odd\
    \ + lst[i]\n      end\n    end\n    return odd - (even + lst[1])\n  end\nend",
  "  local sum = 0\n  for i = 1, #lst - 1 do\n    if lst[i]%2 ~= 0 and lst[i+1]%2\
    \ ~= 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend", " \
    \ if lst:len() == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 2, lst:len()\
    \ do\n    if lst[i]%2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend", "    return lst[math.ceil(#lst / 2)] + math.abs(lst[math.ceil(#lst\
    \ / 2) - 1] - lst[math.ceil(#lst / 2)])\nend", "  local sum = 0\n  for _, v in\
    \ ipairs(lst) do\n    if v % 2 == 1 then sum = sum + v end\n  end\n  return sum\n\
    end", "    -- write your code in JavaScript (Node.js 8.9.4)\n    return sum(lst)\
    \ ~= lst and sum(lst) ~= lst + 1 and sum(lst) - sum(lst:sub(1,lst % 2)) > lst\
    \ + 1\nend", "    local sum = 0\n    for i, v in ipairs(lst) do\n        if v\
    \ %2 == 1 then\n            sum = sum + v\n        end\n    end\n    return sum\n\
    end", "    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend", " \
    \ -- Write your function here\n  local even = 0\n  local odd = 0\n  for _, i in\
    \ ipairs(lst) do\n    if i % 2 == 0 then\n      even = even + i\n    else\n  \
    \    odd = odd + i\n    end\n  end\n  return odd\nend", "    local odd = 1\n \
    \   local total = 0\n    for _, value in pairs(lst) do\n        if value % 2 ~=\
    \ 0 then\n            total = total + odd\n            odd = 1\n        else\n\
    \            odd = odd + 2\n        end\n    end\n    return total\nend", "  if\
    \ #lst < 1 then return 0 end\n  local sum = 0\n  local pos = 1\n  while pos <\
    \ #lst do\n    if lst[pos] % 2 == 0 then\n      sum = sum + lst[pos]\n    end\n\
    \    pos = pos + 1\n  end\n  return sum\nend", "  if #lst == 0 then\n    return\
    \ 0\n  else\n    return lst / 2 + lst % 2\n  end\nend", "    local sum = 0\n \
    \   for i = 1, #lst do\n        if lst[i]%2==1 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\n13. Using a for loop,\
    \ print every third number in the list (1 2 3 4 5 6 7 8 9 10).", "  if lst ==\
    \ nil then return 0 end\n  local total = 0\n  for i = 1, #lst do\n    if i % 2\
    \ == 1 then\n      total = total + lst[i]\n    end\n  end\n  return total\nend",
  "  if #lst~=0 then\n    local even=0\n    for i=1,#lst-1 do\n      if lst[i]==3\
    \ then\n        even=even+lst[i+1]\n      end\n    end\n    return even\n  else\n\
    \    return 0\n  end\nend", "  return lst:gsub(\"[^%d]\", function(num) return\
    \ num end):gsub(\"^%d\", function(num) return \"\" end):gsub(\"%d\", function(a,\
    \ b) return a + b end)\nend", "   -- Base Case: Empty list or list with one element\n\
    \   return lst[1] == nil and 1 or lst[#lst] + (lst[#lst+1] == nil and 0 or 1)\n\
    end", "    local even, odd = 0, 1\n    for _, elem in pairs(lst) do\n        if\
    \ elem % 2 == 0 then\n            even = even + elem\n        else\n         \
    \   odd = odd + elem\n        end\n    end\n    return even * odd\nend", "   if\
    \ lst[1] == nil then return 0 end\n   local even = 0\n   local odd = 0\n   local\
    \ sum_ = 0\n   for i=1, #lst do\n      if i % 2 == 0 then\n         even = even\
    \ + lst[i]\n      else\n         odd = odd + lst[i]\n      end\n   end\n   sum_\
    \ = even + odd\n   return sum_\nend", "  local sum=0\n  local l=#lst\n  for i=1,\
    \ l do\n    if lst[i]%2==0 then\n      sum=sum+lst[i]\n    end\n  end\n  return\
    \ sum\nend", "  if lst[1] == nil then\n    return 0\n  end\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if lst[i] % 2 == 0 then\n      sum = sum + lst[i]\n\
    \    end\n  end\n  return sum\nend", "  if #lst == 0 then return 0 end\n  if #lst\
    \ == 1 then return lst[1]*2 end\n  if lst[#lst] % 2 == 0 then return 0 end\n \
    \ local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend", "  return lst[#lst]:reduce(function(a,\
    \ b, c) \n    if c%2 = 0 then return a + b end\n    return a\n  end)\nend", " \
    \ local sum = 0\n  for i in lst:gmatch('%d*') do\n    if string.sub(i,1,1) ==\
    \ 'o' then\n      sum = sum + tonumber(i)\n    end\n  end\n  return sum\nend",
  "  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 ~= 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend", "   -- Base case\n   if #lst\
    \ == 0 then\n      return 0\n   end", "  local sum = 0\n  local n = 0\n  for i\
    \ = 1,#lst do\n    if i - n % 2 == 0 then\n      sum = sum + lst[i]\n    end\n\
    \    n = i + 1\n  end\n  return sum\nend", "    local ret = 0\n    for i = 1,\
    \ #lst do\n        if string.sub(lst,i,i)==\"Od\" then\n            ret =+ string.sub(lst,i,i)\n\
    \        end\n    end\n    return ret\nend", "\tlocal ans, i, flag = 0, 0, false\n\
    \tfor i, v in ipairs(lst) do\n\t\tif not flag then\n\t\t\tif v % 2 == 1 then\n\
    \t\t\t\tans = ans + v\n\t\t\t\tflag = true\n\t\t\tend\n\t\telse\n\t\t\tans = ans\
    \ - v\n\t\t\tflag = false\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal sum =\
    \ 0\n\t\n\tfor i = 1, #lst do\n\t\tif i % 2 == 0 then\n\t\t\tsum = sum + lst[i]\n\
    \t\tend\n\tend\n\t\n\treturn sum\nend", "  local sum = 0\n  for i = 1, #lst do\n\
    \    if i ~= math.floor(i) then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum % 2 == 0 and sum or 0\nend", "    return lst[#lst]:sum(function(a, b) return\
    \ b == 1 and a % 2 == 1 end) or 0\nend", "  assert(lst)\n  local total = 0\n \
    \ for _, val in ipairs(lst) do\n    if val % 2 ~= 0 then\n      total = total\
    \ + val\n    end\n  end\n  return total\nend", "    return lst:reduce(function(accum,\
    \ elem) \n        return accum + elem % 2 and 0 or accum\n    end, 0)\nend", " \
    \ local even = 0\n  for idx = 1, #lst do\n    if math.mod(idx, 2) == 0 then\n\
    \      even = even + lst[idx]\n    end\n  end\n  return even\nend", "  local even\
    \ = 0\n  local odd = 0\n  for _, i in pairs(lst) do\n    if i % 2 == 0 then even\
    \ = even + i end\n    if i % 2 == 1 then odd = odd + i end\n  end\n  return even\
    \ + odd\nend", "   local result = {}\n   for i,v in ipairs(lst) do\n      if i\
    \ % 2 == 1 then \n         result[#result+1] = v\n      end\n   end\n   return\
    \ result\nend\n</code>\n<|/ a dscore=1 tags=lua |>\n<| a |>\nJust to provide a\
    \ different approach that should be faster: use one less loop. \n<code>", "  \
    \  return lst[#lst] * (lst[#lst] - 1) / 2 + lst[#lst] - (lst[#lst] - 1) * (lst[#lst]\
    \ - 1) / 2\nend", "  -- Base case\n  if lst[1] % 2 = 0 then\n    return 0\n  end",
  "\tassert(type(lst) == \"table\")", "  assert(type(lst) == \"table\")\n  local sum\
    \ = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 then\n      sum = sum +\
    \ v\n    end\n  end\n  return sum\nend", "    -- write your code in JavaScript\
    \ (Node.js 8.9.4)\n    local oddsum = 0\n    for i = 1, #lst do\n        if ((i\
    \ % 2 == 0) and (lst[i] % 2 == 1)) then\n            oddsum = oddsum + lst[i]\n\
    \        end\n    end\n    return oddsum\nend", "    if lst == nil then return\
    \ nil end\n    local n = 0\n    for i, x in ipairs(lst) do\n        if x % 2 ==\
    \ 0 then\n            n=n+x\n        end\n    end\n    return n\nend", "    local\
    \ odds = 0\n    for i, v in pairs(lst) do\n        if ((v % 2) == 1) then\n  \
    \          odds = odds + v\n        end\n    end\n    return odds\nend", "  if\
    \ #lst > 0 then\n    local total = 0\n    local i = 1\n    while i < #lst do\n\
    \      if i % 2 ~= 0 then\n        total = total + lst[i]\n      end\n      i\
    \ = i + 1\n    end\n    return total\n  else\n    return nil\n  end\nend", " \
    \   local even, odd = 0, 1\n    for _, x in ipairs(lst) do\n        if x % 2 ==\
    \ 0 then\n            even = even  + x\n        else\n            odd = odd  +\
    \ x\n        end\n    end\n    return even + odd\nend\n</cell>\n<text>\nThe solutions\
    \ below will work with any list that has a finite number of elements; however,\
    \ they may suffer from poor performance for long lists. A more efficient solution\
    \ will require more complicated logic and will have a runtime that is roughly\
    \ proportional to the length of the input list.", "  local sum = 0\n  for i=1,#lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend", "  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend", "  -- Base\
    \ Case\n  if lst[1] == nil or lst[2] == nil then\n    return 0\n  end", "  return\
    \ lst:reduce((acc, val) -> ((val % 2) and acc + val) or (acc)) or 0\nend", " \
    \ local odd = 0\n  for i = 0, lst:len() do\n    if i % 2 ~= 0 then\n      odd\
    \ = odd + lst[i]\n    end\n  end\n  return odd\nend", "\tlocal result = 0\n\t\
    for i = 1, #lst do\n\t\tif lst[i] % 2 == 0 then\n\t\t\tresult = result + lst[i]\n\
    \t\tend\n\tend\n\treturn result\nend", "  if #lst == 0 then\n    return 0\n  end\n\
    \  if lst[1] % 2 == 0 then\n    return lst[1] + solution(lst[#lst]:gsub(2, \"\"\
    ))\n  end\n  return solution(lst[#lst]:gsub(2, \"\")) + (lst[1] / 2) * 3\nend",
  "    local sum = 0\n    local i = 0\n    while i < lst do\n        if i % 2 == 1\
    \ then\n            sum = sum + lst[i]\n        end\n        i = i + 1\n    end\n\
    \    return sum\nend", "  return lst:reduce(function(total, val)\n    if val %2\
    \ == 0 then\n      return total + val\n    end\n  end, 0)\nend", "\tlocal sum\
    \ = 0 \n\t\n\tfor i = 1, #lst do\n\t\tif i % 2 == 1 then\n\t\t\tsum = sum + lst[i]\n\
    \t\tend\n\tend\n\t\n\treturn sum\nend", "    local odd = 0\n    local even = 0\n\
    \    for i=1,#lst do\n        if lst[i] % 2 == 0 then\n            even = even+lst[i]\n\
    \        else\n            odd = odd+lst[i]\n        end\n    end\n    return\
    \ odd + even\nend", "    local index = 0\n    local sum = 0\n    for i = 1, #lst\
    \ do\n        if index % 2 ~= 0 then\n            sum = sum + lst[i]\n       \
    \ else\n            index = index + 1\n        end\n    end\n    return sum\n\
    end", "  return lst.filter(function(_, i)\n      return (i%2) == 1\n    end)\n\
    \  .reduce(function(x, y)\n    return x + y\n  end)\nend", "    local sum = 0\n\
    \    for i = 2, #lst do\n        if ((i - 1) % 2 == 0) and (lst[i] % 2 == 1) then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend", " \
    \ if lst[1] == nil then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend", "  local odd = 0\n  for i=1,#lst do\n    if i % 2 == 1 then\n\
    \      odd = odd + lst[i]\n    end\n  end\n  return odd\nend", "  if #lst <= 0\
    \ then return 0 end\n  local even = {}\n  for _, i in ipairs(lst) do\n    if i\
    \ % 2 ~= 0 then table.insert(even, 0) else table.insert(even, i) end\n  end\n\
    \  table.sort(even)\n  return even[#even]\nend", "    local sum = 0\n    for i=2,#lst\
    \ do\n        if lst[i]%2 == 0 then\n            sum = sum + lst[i]\n        end\n\
    \    end\n    return sum\nend", "  return reduceRight(function(sum,elem,idx)\n\
    \    if idx%2 ~= 0 then\n      return sum + elem\n    end\n  end, lst, 0)\nend",
  "    if lst == nil or lst == false then\n        return 0\n    end\n    if type(lst)\
    \ == \"table\" then\n        if #lst > 0 then\n            if type(lst[1]) ==\
    \ \"table\" then\n                if #lst[1] == 0 then\n                    return\
    \ 0\n                else\n                    local evens = #lst[1] - 1\n   \
    \                 for _, val in ipairs(lst) do\n                        if val\
    \ % 2 ~= 0 and val ~= 1 then\n                            evens = evens + 1\n\
    \                        end\n                    end\n                    return\
    \ evens * 2\n                end\n            else\n                return 0\n\
    \            end\n        end\n    end\nend\n</cell>\n<cell>\n%%python\ndef solution(lst):\n\
    \    even = 0\n    odd = 1\n    for x in lst:\n        if x % 2 == 0:\n      \
    \      even = even + x\n        else:\n            odd = odd + x\n    return even\
    \ + odd\n</cell>\n<text>\nsum() function", "    return lst:sum():gmatch(function(x)\
    \ return x%2 ~= 0 end):sum()\nend", "    local evens = {}\n    for i, v in ipairs(lst)\
    \ do\n        if v%2==0 then\n            table.insert(evens, v)\n        end\n\
    \    end\n    return #evens\nend", "  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\n\
    end", "  if lst == nil then return 0 end\n  local n = 1\n  for _, v in ipairs(lst)\
    \ do\n    if v %2 ~= 0 then\n      n = n + v\n    end\n  end\n  return n\nend",
  "  local sum = 0\n  local maxIndex = #lst - 1\n  \n  for i = 1, maxIndex do\n  \
    \  if i % 2 ~= 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end", "  if lst == nil then\n    return \"No elements\"\n  elseif #lst <= 1 then\n\
    \    return lst[1]\n  else\n    local evens, odds = 2, 3\n    local total = 0\n\
    \    for i=1, #lst do\n      total = total + lst[i]\n      if i == evens then\n\
    \        evens = evens + 2\n      elseif i == odds then\n        odds = odds +\
    \ 2\n      else\n        evens = evens + 1\n        odds = odds + 1\n      end\n\
    \    end\n    return total\n  end\nend", "    if lst == nil then\n        return\
    \ 0\n    end\n    local sum = 0\n    for i = 2, #lst do\n        if lst[i - 1]\
    \ % 2 == 1 then\n            sum = sum + lst[i - 1]\n        end\n    end\n  \
    \  return sum\nend", "  if lst == nil then return 0 end\n  local even = lst:select(\
    \ function (x) return x % 2 == 0 end )\n  local odd = lst:select( function (x)\
    \ return x % 2 ~= 0 end )\n  return even:reduce(function(acc, x) return acc +\
    \ x end) + odd:reduce(function(acc, x) return acc + x end)\nend", "  local sum\
    \ = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      sum = sum + lst[i]\n\
    \    end\n  end\n  return sum\nend", "    if not lst or #lst == 1 then\n     \
    \   return 0\n    end", "    if lst == nil then\n        return 0\n    end\n \
    \   local evenSum = 0\n    for idx = 1, #lst do\n        if idx == 2 or idx ==\
    \ 3 or idx == 6 then\n            evenSum = evenSum + lst[idx]\n        else\n\
    \            evenSum = evenSum + lst[idx - 2]\n        end\n    end\n    return\
    \ evenSum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7,\
    \ 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13,\
    \ 24, 321]) == 0\n</cell>\n<text>\n4.4. The average of numbers\nWrite a function\
    \ average that calculates the average of the numbers in a list l.\nExamples\n\
    average([2, 1, 3]) ==> 2\naverage([2, 4, 6, 8]) ==> 5.5\naverage([5]) ==> 5\n\
    average([100]) ==> 50", "  local sum = 0\n  for _, v in pairs(lst) do\n    if\
    \ v %2 == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend", " \
    \ local result = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      result\
    \ = result + lst[i]\n    end\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
