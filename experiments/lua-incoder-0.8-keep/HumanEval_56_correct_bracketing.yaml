name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
  )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
  <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
  \ correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  for i = 1, #brackets do\n    local opening = brackets[i]\n    local\
    \ closing = brackets[#brackets]\n    if opening ~= \">\" and opening ~= \"<\"\
    \ and closing ~= \">\" and closing ~= \"<\" then\n      return false\n    end\n\
    \  end\n  return true\nend", "    brackets = brackets:gsub(\"[<>]+\", \"\")\n\
    \    return brackets:sub(1, #brackets) == brackets\nend", "  brackets = brackets\
    \ .. \" \" .. \"<\" .. \">\"\n  local count = 0\n  for i = 1, #brackets do\n \
    \   if brackets[i] == \"<\" then\n      count = count + 1\n    elseif brackets[i]\
    \ == \">\" and count > 0 then\n      count = count - 1\n    end\n  end\n  return\
    \ count == 0\nend", "  if brackets:find(\"<\") then\n    if brackets:find(\"<<\"\
    ) then return false end\n    if brackets:find(\"<\")  then return true  end\n\
    \  end\n  if brackets:find(\">\") then\n    if brackets:find(\">>\")  then return\
    \ false  end\n    if brackets:find(\">\")  then return true  end\n  end\n  return\
    \ false\nend", "    for _, bracket in pairs(brackets) do\n        if not bracket:match(\"\
    <\") or not bracket:match(\"</\") then\n            return false\n        end\n\
    \    end\n    return true\nend", "   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i + 1]\n      if opening ~= \"\
    >\" and opening ~= \"<\" then\n         return false\n      end\n      if opening\
    \ == \"<\" and closing ~= \"<\" then\n         return false\n      end\n     \
    \ if opening == \"<\" and closing == \"<\" then\n         return false\n     \
    \ end\n   end\n   return true\nend", "  local brackets = brackets:gsub(\"<|>\"\
    , \"\")\n  for i = 1, #brackets do\n    local opening_bracket = brackets:sub(1,\
    \ i)\n    local closing_bracket = brackets:sub(i + 1, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end", "   for i,c in pairs(brackets) do\n      if c == \"<\" then\n         if\
    \ i < #brackets and brackets[i+1] == \"<\" then\n            brackets = brackets:sub(1,i-1)..\"\
    >\"\n         else\n            brackets = brackets:sub(1,i-1)..\">\"..\">\"\n\
    \         end\n      elseif c == \"<\" then\n         brackets = brackets:sub(1,i-1)..\"\
    >\"\n      else\n         brackets = brackets:sub(1,i-1)\n      end\n   end\n\
    \   return brackets ~= \"\"\nend", "  if brackets == \"\" then\n    return true\n\
    \  end\n  brackets = brackets:gsub(\"(<)(>)\", \"\\1\\2\")\n  for idx = 1, #brackets\
    \ do\n    if brackets[idx] == brackets[idx - 1] then\n      return false\n   \
    \ end\n  end\n  return true\nend", "    brackets = brackets or \"<>\"\n    local\
    \ stack = { }\n    local pos = 1\n    local bracket = brackets[1]\n    local new_bracket\
    \ = brackets[1]", "    local opening = brackets:gsub(\"(<)\", function (c) return\
    \ \"<\" end)\n    local closing = brackets:gsub(\"(>)\", function (c) return \"\
    >\" end)\n    return opening:len() == closing:len()\nend", "  return brackets:match(\"\
    <[%a]>\"):gsub(\"<>\",\"<>\"):gsub(\"<%a>\",\"<\")\nend", "\tlocal open = brackets:gsub(\"\
    ([<])\", \"%1\")\n\tlocal closed = brackets:gsub(\"([>])\", \"%2\")\n\tlocal ok\
    \ = open:gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):", "    local num_open = 0\n    local num_close\
    \ = 0\n    for i = 1, #brackets do\n        if brackets[i] == \"<\" then\n   \
    \         num_open = num_open + 1\n        elseif brackets[i] == \">\" then\n\
    \            num_close = num_close + 1\n        end\n    end\n    return num_open\
    \ == num_close\nend", "    local open_brackets = {}\n    local close_brackets\
    \ = {}\n    local i = 1\n    for x in brackets:gmatch(\"<>\") do\n        if open_brackets[x\
    \ - 1] == nil then\n            open_brackets[x - 1] = {x, 1}\n        else\n\
    \            open_brackets[x - 1][1] = open_brackets[x - 1][1] + 1\n        end\n\
    \        i = i + 1\n    end\n    i = 1\n    for x in brackets:gmatch(\"<>\") do\n\
    \        if close_brackets[x - 1] == nil then\n            close_brackets[x -\
    \ 1] = {x, 1}\n        else\n            close_brackets[x - 1][1] = close_brackets[x\
    \ - 1][1] + 1\n        end\n        i = i + 1\n    end\n    if #open_brackets\
    \ == #close_brackets then\n        return true\n    end\n    return false\nend",
  "   return brackets == \"\" or brackets:sub(1,1):sub(1,-1) == brackets or (brackets:sub(1,1):sub(1,-1)\
    \ == brackets and correct_bracketing(brackets:sub(2,-1):sub(1)))\nend", "\tlocal\
    \ bracket_pairs = {}\n\tfor i, c in ipairs(brackets) do\n\t\tif c == \"<\" then\n\
    \t\t\ttable.insert(bracket_pairs, i)\n\t\telseif c == \">\" then\n\t\t\ttable.remove(bracket_pairs,\
    \ i)\n\t\tend\n\tend", "\tlocal open_brackets, close_brackets = unpack(brackets)\n\
    \tlocal open_bracket = nil\n\tlocal close_bracket = nil\n\tfor i = 1, #open_brackets\
    \ do\n\t\tlocal open_bracket = open_brackets[i]\n\t\tif open_bracket ~= \">\"\
    \ then\n\t\t\tclose_bracket = open_bracket\n\t\t\tbreak\n\t\tend\n\tend\n\tif\
    \ close_bracket == nil then\n\t\treturn false\n\tend\n\twhile open_bracket ~=\
    \ close_bracket do\n\t\topen_bracket = open_brackets[open_brackets + 1]\n\tend\n\
    \treturn open_bracket\nend", "  if brackets == nil then\n    return false\n  end\n\
    \  local opened = 0\n  local closed = 0\n  for i = 1, #brackets do\n    if brackets[i]\
    \ == \"<\" then\n      if opened > 0 then\n        return false\n      else\n\
    \        opened = opened + 1\n      end\n    end\n    if brackets[i] == \">\"\
    \ then\n      closed = closed + 1\n    end\n  end\n  if opened ~= closed then\n\
    \    return false\n  end\n  return true\nend", "    brackets = brackets:gsub(\"\
    <|>\",\"<<><>>\")\n    brackets = brackets:gsub(\"^<|>$\",\"<<><>>\")\n    brackets\
    \ = brackets:gsub(\"<<><>>\",\"<|>\")\n    brackets = brackets:gsub(\"<|>$\",\"\
    <<><>>\")\n    brackets = brackets:gsub(\"<>\",\"<<><>>\")\n    brackets = brackets:gsub(\"\
    <<>\",\"<|>\")\n    brackets = brackets:gsub(\"<|>\",\"\")\n    brackets = brackets:gsub(\"\
    <\",\"\")\n    brackets = brackets:gsub(\">\",\"\")\n    brackets = brackets:gsub(\"\
    \\n\",\"\")\n    brackets = brackets:gsub(\"\\r\",\"\")\n    brackets = brackets:gsub(\"\
    \\t\",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"    \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \\n\",\"\")\n    brackets = brackets:gsub(\"\\r\",\"\")\n    brackets = brackets:gsub(\"\
    \\t\",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"    \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \\n\",\"\")\n    brackets = brackets:gsub(\"\\r\",\"\")\n    brackets = brackets:gsub(\"\
    \\t\",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"    \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \\n\",\"\")\n    brackets = brackets:gsub(\"\\r\",\"\")\n    brackets = brackets:gsub(\"\
    \\t\",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"    \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = ", "\t\
    local stack = {}\n\tfor idx = 1, #brackets do\n\t\tif brackets[idx] == \">\" then\n\
    \t\t\tif stack[#stack] == nil then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\t\
    stack[#stack] = nil\n\t\t\tend\n\t\telseif brackets[idx] == \"<\" then\n\t\t\t\
    if stack[#stack] == nil then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack[#stack]\
    \ = nil\n\t\t\tend\n\t\telseif brackets[idx] ~= \"<\" and brackets[idx] ~= \"\
    >\" then\n\t\t\treturn false\n\t\telse\n\t\t\tstack[#stack] = brackets[idx]\n\t\
    \tend\n\tend\n\tfor idx = 1, #stack do\n\t\tif stack[idx] == nil then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "    local open_brackets =\
    \ \"\"\n    for i = 1, #brackets do\n        local current_char = brackets:sub(i,\
    \ i)\n        if current_char == \"<\" then\n            if open_brackets ~= \"\
    \" then\n                return false\n            end\n            open_brackets\
    \ = open_brackets .. current_char\n        elseif current_char == \">\" then\n\
    \            if open_brackets ~= \"\" then\n                open_brackets = open_brackets\
    \ .. current_char\n            else\n                return false\n          \
    \  end\n        end\n    end\n    if open_brackets ~= \"\" then\n        return\
    \ false\n    end\n    return true\nend", "  local bracket_stack = { brackets }\n\
    \  while 1 do\n    -- If the stack is empty, we're done.\n    if #bracket_stack\
    \ == 0 then\n      return true\n    end", "    brackets = brackets or \"\"\n \
    \   local opening_brackets = {}\n    local closing_brackets = {}\n    for i, c\
    \ in ipairs(brackets) do\n        if c == \"<\" then\n            table.insert(opening_brackets,\
    \ i)\n        elseif c == \"<\" and not opening_brackets[i] then\n           \
    \ return false\n        end\n        if c == \"<\" and not closing_brackets[i]\
    \ then\n            table.insert(closing_brackets, i)\n        end\n    end\n\
    \    for i = 1, #opening_brackets do\n        if opening_brackets[i] > closing_brackets[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    brackets = brackets:gsub(\"<([^<]+)>\", \"\\1\")\n    return brackets:find(brackets)\
    \ ~= nil\nend", "  brackets = brackets:gsub(\"[<>]\", \"\")\n  for i, v in pairs(brackets)\
    \ do\n    local n = i - 1\n    local opening = brackets[n]\n    local closing\
    \ = brackets[i]\n    if opening ~= closing then\n      return false\n    end\n\
    \  end\n  return true\nend", "  return brackets:match(\"<%s*%>\") and not brackets:match(\"\
    <%s*<%%s*>\") and not brackets:match(\">%s*%>\") and not brackets:match(\">%s*<%%s*>\"\
    )\nend", "  return brackets == \"\" or\n    (brackets:match(\"<%w+>\") == nil\
    \ or\n     brackets:match(\"<%w+>\") == \"\" or\n     brackets:match(\">%w+<\"\
    ) == nil or\n     brackets:match(\">%w+<\") == \"\" or\n     brackets:match(\"\
    >%w+=\") == nil or\n     brackets:match(\">%w+=\") == \"\" or\n     brackets:match(\"\
    >%w+:\") == nil or\n     brackets:match(\">%w+:\") == \"\" or\n     brackets:match(\"\
    >%w+)\") == nil or\n     brackets:match(\">%w+)\") == \"\")\nend", "    return\
    \ string.find(brackets, \"<\", {position = 0}) and\n           string.find(brackets,\
    \ \">\", {position = 0})\nend", "    for b, bracket in pairs(brackets) do\n  \
    \      if b ~= \"<\" and b ~= \">\" then\n            return false\n        end\n\
    \    end\n    return true\nend", "  brackets = string.gsub(brackets, \"<\", \"\
    ^<%1>\")\n  brackets = string.gsub(brackets, \">\", \"^%>%1\")\n  brackets = string.gsub(brackets,\
    \ \"^%1>\", \">\")\n  brackets = string.gsub(brackets, \"^%>%1\", \"<\")\n  brackets\
    \ = string.gsub(brackets, \"><\", \"%1<\")\n  brackets = string.gsub(brackets,\
    \ \"%1<\", \">>\")\n  brackets = string.gsub(brackets, \"^%1%>%1>\", \">>\")\n\
    \  return brackets == \"<>\"\nend", "    -- If brackets is empty or doesn't have\
    \ opening and closing brackets, return true.\n    if brackets == \"\" or brackets\
    \ ~= \"<>\" then return true end\n    brackets = string.gsub(brackets, \"<\",\
    \ \"__<__\")\n    brackets = string.gsub(brackets, \">\", \"__>__\")\n    -- The\
    \ first string has opening brackets and the second has closing brackets.\n   \
    \ -- If brackets don't match, return false. Otherwise, go through the brackets\
    \ string.\n    -- If the next opening bracket is equal to the closing bracket,\
    \ the brackets are correct.\n    -- If not, return false again. This is because\
    \ brackets could contain extra brackets, such as\n    -- <<>>\n    -- If brackets\
    \ doesn't have enough brackets, return false.\n    -- >>> correct_bracketing(\"\
    <><>\")\n    -- False\n    local bopen = brackets:gsub(\"__<__\", \"<\")\n   \
    \ local bclose = brackets:gsub(\"__>__\", \">\")\n    local i = 1\n    while i\
    \ <= #bopen do\n        if bopen[i] ~= bclose[i] then\n            return false\n\
    \        end\n        i = i + 1\n    end\n    return true\nend", "  return brackets:gsub(\"\
    <\", \">\"):gsub(\"(<\", \">)\"):gsub(\"(<\", \"><\"):gsub(\")>\", \">>\")\nend",
  "  local opening_brackets = string.gsub(brackets, \"<\", \"\") -- strip \"<\"\n\
    \  local closing_brackets = string.gsub(brackets, \">\", \"\")\n  local all_opening_brackets\
    \ = string.gsub(opening_brackets, \"]]>\", \"___CLOSE_TAG__]>\")\n  local all_closing_brackets\
    \ = string.gsub(closing_brackets, \"___CLOSE_TAG__]>\", \"]]>\")\n  return all_opening_brackets\
    \ = all_closing_brackets\nend", "   brackets = brackets .. \"<>\" -- ensure that\
    \ the brackets string is a valid regex\n   brackets = brackets:gsub(\"<\",\".\"\
    ):gsub(\">\",\".\") -- remove brackets from bracket string\n   local pat = brackets:gsub(\"\
    (.)(.)\",\"%2$2\") -- replace every pair of brackets with an opening bracket and\
    \ an closing bracket\n   brackets = brackets:gsub(\"[<>]\",\"\")  -- remove any\
    \ opening or closing brackets from the bracket string\n   brackets = brackets:gsub(\"\
    %1$2\",\"<\") -- add any unpaired brackets back to bracket string\n   return brackets\
    \ == brackets:gsub(\"[<>]\",\"<<>\") -- return True if every opening bracket has\
    \ a corresponding closing bracket\nend", "   if #brackets > 0 then\n      for\
    \ i = 1, #brackets do\n         local open = brackets[i]\n         local close\
    \ = brackets[i + 1]\n         if open == \"<\" then\n            if not (close\
    \ == \"<\" or close == \"<\") then\n               return false\n            end\n\
    \         elseif close == \">\" then\n            if not (open == \"<\" or open\
    \ == \"<\") then\n               return false\n            end\n         end\n\
    \      end\n      return true\n   else\n      return false\n   end\nend", "  \
    \ return (string.find(brackets, \"<\") > 0 or\n           string.find(brackets,\
    \ \">\") > 0 or\n           string.find(brackets, \"<<\") > 0 or\n           string.find(brackets,\
    \ \">>\") > 0 or\n           string.find(brackets, \"<>\") > 0)\nend", "  for\
    \ i, c in pairs(brackets) do\n    if c == \"<\" then -- check that each opening\
    \ bracket has a corresponding closing bracket\n      if i >= 2 and brackets[i-2]\
    \ ~= \">\" then -- make sure all closing brackets are in correct order\n     \
    \   return false\n      end\n    end\n  end\n  return true\nend", "   assert(type(brackets)\
    \ ~= \"string\")\n   assert(#brackets == 2)\n   local opening = brackets[1]\n\
    \   local closing = brackets[2]\n   local opening_match = opening:match(\"^%%(%{\"\
    )\n   local closing_match = closing:match(\"^%%(%})$\")\n   return opening_match\
    \ and closing_match\nend", "  brackets = brackets:gsub(\"<\", \"\")\n  brackets\
    \ = brackets:gsub(\">\", \"\")\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets\
    \ = brackets:gsub(\"}\", \"\")\n  local opening_brackets = brackets:gsub(\"{\"\
    , \" \")\n  local closing_brackets = brackets:gsub(\"}\", \" \")\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend", "  local open_brackets = brackets:gsub(\"<<%-$%-%>\"\
    , \"\"):gsub(\"<<%-%-$%-%>\", \"\")\n  local close_brackets = brackets:gsub(\"\
    <<%-%-%>\", \"\"):gsub(\"<<%-$%-%>\", \"\")\n  return open_brackets:find(\"%<-[%-]-%>\"\
    ) ~= nil and\n           close_brackets:find(\"%<-[%-]-%>\") ~= nil\nend", "\t\
    local opening = brackets:gsub(\"<\",\"~\"):gsub(\">\",\"~\")\n\tlocal closing\
    \ = brackets:gsub(\"~\",\"<\"):gsub(\"~\",\">\")\n\treturn opening ~= closing\n\
    end", "  if brackets:find('<') then\n    local first = brackets:find('<')\n  \
    \  return brackets:find(\">\", first-1) or brackets:find(\">\", first+1) ~= nil\n\
    \  end\n  return true\nend", "  -- a stack is a list: [ <opening bracket> [<stack>]*\
    \ ]\n  local stack = {}\n  local opening = brackets", "    brackets = brackets:gsub(\"\
    ^<<<(.*)>>>$\", \"<$1>\")\n    brackets = brackets:gsub(\"^<(.*)>>>$\", \"<<$1>>\"\
    )\n    return brackets:gsub(\"^<\", \"<<\") and brackets:gsub(\"^>\", \"<\")\n\
    end", "   for _,s in ipairs(brackets) do\n      if s:find(\">\")==0 then\n   \
    \      return false\n      end\n   end\n   return true\nend", "  for i = 1, #brackets\
    \ do\n    if brackets[i] ~= brackets[i+1] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  for i, c in ipairs(brackets) do\n    if c ~= '<'\
    \ then return false end\n    if brackets[i + 1] == '>' then return false end\n\
    \  end\n  return true\nend", "  local opening_brackets = {}\n  local closing_brackets\
    \ = {}", "   brackets = brackets:gsub(\"[<>]\", function(c)\n      if c == \"\
    <\" then return \">\" end\n      if c == \">\" then return \"<\" end\n   end)\n\
    \   return brackets:find(\"[<>]\")\nend", "    if brackets ~= \"\" then\n    \
    \    local stack = {}\n        local opening = 0\n        for symbol in string.gmatch(brackets,\
    \ \"<()\") do\n            if symbol == \"<\" then\n                opening =\
    \ opening + 1\n            elseif symbol == \">\" then\n                if opening\
    \ = 0 then\n                    return false\n                end\n          \
    \      opening = opening - 1\n            else\n                if opening > 0\
    \ then\n                    return false\n                end\n              \
    \  opening = opening + 1\n            end\n        end\n        return opening\
    \ == 0\n    end\n    return true\nend", "    local opening_brackets = string.gsub(brackets,\
    \ \"<+>\", \"\")\n    local closed_brackets = string.gsub(brackets, \"<\", \"\"\
    )\n    local closed_brackets = string.gsub(closed_brackets, \">\", \"\")\n   \
    \ for _, opening_bracket in ipairs(opening_brackets) do\n        local closing_bracket\
    \ = closed_brackets[closed_brackets.lenght]\n        if not closing_bracket:len()\
    \ then\n            return false\n        end\n        if not closing_bracket:sub(#opening_bracket,\
    \ #opening_bracket) == opening_bracket then\n            return false\n      \
    \  end\n        closed_brackets = closed_brackets:gsub(opening_bracket, \"\")\n\
    \        if opening_bracket ~= closing_bracket then\n            return false\n\
    \        end\n    end\n    return not closed_brackets:len() -- no more closing\
    \ brackets\nend", "  brackets = brackets .. \"<>\"\n  local open_brackets, close_brackets\
    \ = unpack(reverse(brackets))\n  local open_brackets_set = setmetatable({}, {__mode=\"\
    v\"})\n  local close_brackets_set = setmetatable({}, {__mode=\"v\"})\n  for i\
    \ = 1, #open_brackets do\n    open_brackets_set[open_brackets[i]] = true\n  end\n\
    \  for i = 1, #close_brackets do\n    close_brackets_set[close_brackets[i]] =\
    \ true\n  end\n  local open_brackets_not_closed = open_brackets_set\n  local close_brackets_not_open\
    \ = close_brackets_set\n  while true do\n    local open_brackets_not_closed =\
    \ open_brackets_not_closed\n    local close_brackets_not_open = close_brackets_not_open\n\
    \    local open_brackets_to_close, close_brackets_to_open = {}, {}\n    for i\
    \ = 1, #open_brackets_not_closed do\n      if close_brackets_not_open[open_brackets_not_closed[i]]\
    \ then\n        table.insert(open_brackets_to_close, open_brackets_not_closed[i])\n\
    \      else\n        table.insert(close_brackets_to_open, open_brackets_not_closed[i])\n\
    \      end\n    end\n    if #close_brackets_to_open == 0 then\n      return true\n\
    \    end\n    for i = 1, #close_brackets_to_open do\n      open_brackets_not_closed:delete(close_brackets_to_open[i])\n\
    \    end\n  end\nend", "  local opening = {}\n  for i = 1, #brackets do\n    opening[brackets[{i}]:sub(1,1)]\n\
    \  end\n  local closing = {}\n  for i = 1, #brackets do\n    closing[brackets[{i}]:sub(#brackets[{i}],#brackets[{i}])]\n\
    \  end\n  local correct = true\n  for i = 1, #opening do\n    if not closing[opening[i]]\
    \ then\n      correct = false\n    end\n  end\n  return correct\nend", "  return\
    \ brackets:gsub(\"<\", \"^>\"):gsub(\">\", \"<^\"):gsub(\"^>\", \"<\"):gsub(\"\
    ^\", \"<^\"):gsub(\"<<\", \"<\")\nend", "    brackets = brackets:gsub(\"<|>\"\
    , \"%%%0\")\n    brackets = brackets:gsub(\"%%%0>\", \"<%%%0\")\n    brackets\
    \ = brackets:gsub(\"%%%0<\", \">%%%0\")\n    return brackets:find(\"%%%0>\") ~=\
    \ nil and brackets:find(\"%%%0<\") == nil\nend", "   for idx = 1, #brackets do\n\
    \      local open = brackets[idx][1]\n      local close = brackets[idx][2]\n \
    \     if not brackets[idx] then\n         return false\n      end\n      if open\
    \ ~= close then\n         return false\n      end\n   end\n   return true\nend",
  "  local open_counts = table_utils.group_by_table(brackets, function(a)\n    return\
    \ a:match(\"<\") + 1\n  end)\n  for i = 1, #open_counts do\n    if open_counts[i]\
    \ ~= #open_counts[i+1] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local opening_brackets = brackets:gsub(\"(<)(\\\\1<)(\\\\1>)\", \"\\\\\
    1<\\\\2>\"):gsub(\"(>)(\\\\1>)(\\\\1<)\", \"\\\\1<\\\\2>\")\n  local closing_brackets\
    \ = brackets:gsub(\"(<)(\\\\1<)(\\\\1>)\", \"\\\\2\\\\1<\\\\2>\"):gsub(\"(>)(\\\
    \\1>)(\\\\1<)\", \"\\\\2\\\\1<\\\\2>\")\n  return opening_brackets ~= closing_brackets\n\
    end", "  brackets = string.gsub(brackets, \"[<>]\", \"[%1]\")\n  brackets = string.gsub(brackets,\
    \ \"]]\", \"%1]\")\n  return brackets[1] == brackets[#brackets] or brackets[1]\
    \ == brackets[1]\nend", "  return string.find(brackets, '<') ~= nil and string.find(brackets,\
    \ \">\") ~= nil and\n  (string.find(brackets, '<') == string.find(brackets, \"\
    >\"))\nend", "   for i,c in ipairs(brackets) do\n      if c ~= \"<\" then\n  \
    \       return false\n      end\n      if brackets[i + 1] ~= \">\" then\n    \
    \     return false\n      end\n   end\n   return true\nend", "  local opening\
    \ = brackets:find(\"<\")\n  while opening do\n    if opening:find(\">\") then\n\
    \      local closing = brackets:find(\">\", opening + 1)\n      if opening ~=\
    \ closing then\n        return false\n      end\n    else\n      return false\n\
    \    end\n    opening = brackets:find(\"<\", opening + 1)\n  end\n  return true\n\
    end", '  if brackets == "" then return true end', "  for idx, open_paren in ipairs(brackets)\
    \ do\n    if not (open_paren == \">\" or open_paren == \"<\") then -- if the first\
    \ character is not \"(\" or \"<\", then return false\n      return false\n   \
    \ end", "   return brackets:match(\"[<>]\")\nend", "\tlocal bs = brackets:gsub(\"\
    <>\", \"\") -- remove brackets\n\tlocal brackets = {}\n\tfor _, str in ipairs(bs)\
    \ do \n\t\tlocal open = str:sub(1, 1)\n\t\tif open ~= \">\" and open ~= \"<\"\
    \ then \n\t\t\treturn false\n\t\tend\n\t\tlocal close = str:sub(2)\n\t\tif close\
    \ ~= \">\" and close ~= \"<\" then \n\t\t\treturn false\n\t\tend\n\t\tbrackets[open]\
    \ = close\n\tend\n\treturn true\nend", "    if brackets ~= \"\" and brackets ~=\
    \ \"<>\" then\n        return brackets:sub(1, 1) ~= brackets:sub(brackets, 2)\n\
    \    end\n    return false\nend", "    local opening = brackets:sub(1,1)\n   \
    \ local closing = brackets:sub(1+opening,1)\n    if opening ~= \">\" or closing\
    \ ~= \"<\" then\n        return false\n    end\n    -- if we encounter a closing\
    \ bracket, check the corresponding opening bracket\n    for i = 1, #brackets do\n\
    \        if brackets[i:sub(1,1)] == opening then\n            if not correct_bracketing(brackets[i:sub(1+opening,1+i)..closing])\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    -- if we encounter a opening bracket, check the corresponding closing bracket\n\
    \    for i = 1, #brackets do\n        if brackets[i:sub(1+opening,1+i)..closing]\
    \ == opening then\n            if not correct_bracketing(brackets[i:sub(1,1)..i])\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "    local opening = false\n    local closing = false\n\
    \    for _, b in ipairs(brackets) do\n        if b == \"<\" then\n           \
    \ opening = true\n        elseif b == \">\" then\n            closing = true\n\
    \        elseif opening then\n            return closing\n        end\n    end\n\
    \    return not opening and not closing\nend", "    local opened = {}\n    local\
    \ opening = false\n    for i=1,#brackets do\n        if brackets[i] == \"<\" then\n\
    \            opening = true\n            opened.insert(i)\n        end\n     \
    \   if brackets[i] == \">\" then\n            if opening\n                or #opened\
    \ == 0\n                or opened[#opened - 1] > i then\n                opening\
    \ = false\n            else\n                opened = opened:remove(#opened -\
    \ 1)\n            end\n        end\n    end\n    return opening and opened:len()\
    \ == 1\nend", "  local opening, closing = string.find(brackets, \"<\"), string.find(brackets,\
    \ \">\")\n  if opening == nil then return false end\n  -- If opening and closing\
    \ are the same, we found a closed bracket that was not opened.\n  if closing ==\
    \ opening then return false end\n  -- If opening and closing are both not nil,\
    \ they mean the bracket is not closed.\n  if opening ~= nil and closing ~= nil\
    \ and opening ~= closing then return false end\n  -- If opening and closing are\
    \ both nil, then the opening bracket is not followed by a closing bracket.\n \
    \ return opening:not(closing)\nend", "   brackets = brackets:gsub(\"[<>]\", function(c)\n\
    \      if c == \"<\" then\n         return \">\"\n      elseif c == \">\" then\n\
    \         return \"<\"\n      else\n         return c\n      end\n   end)\n  \
    \ return brackets:find(\"<\") > -1 and brackets:find(\">\") > -1\nend", "  if\
    \ brackets == \"<\" then\n    return false\n  end\n  if brackets == \"<>\" then\n\
    \    return true\n  end\n  if brackets == \"<<><>>\" then\n    return true\n \
    \ end\n  if brackets == \"<>\" then\n    return false\n  end\n  if brackets ==\
    \ \"<\" then\n    return true\n  end\n  if brackets == \"<<><>>\" then\n    return\
    \ false\n  end\n  if brackets == \">>\" then\n    return false\n  end\n  if brackets\
    \ == \">>>\" then\n    return true\n  end\n  if brackets == \">\" then\n    return\
    \ false\n  end\n  if brackets == \"<<\" then\n    return false\n  end\n  if brackets\
    \ == \"<>\" then\n    return true\n  end\n  if brackets == \">>>\" then\n    return\
    \ false\n  end\n  if brackets == \">\" then\n    return true\n  end\n  if brackets\
    \ == \"\" then\n    return false\n  end\n  if brackets == \"<>\" then\n    return\
    \ false\n  end\n  if brackets == \"<<\" then\n    return false\n  end\n  if brackets\
    \ == \">>\" then\n    return true\n  end\n  if brackets == \">\" then\n    return\
    \ true\n  end\n  if brackets == \"<<>>\" then\n    return true\n  end\n  if brackets\
    \ == \"<>\" then\n    return false\n  end\n  return false\nend", "  local opening\
    \ = 1\n  local closed = 1\n  local index = 1\n  while opening:not(0) do\n    opening\
    \ = brackets:sub(1, index - opening)\n    closed = brackets:sub(1, index - closed\
    \ + 1)\n    opening = opening:lower()\n    if opening == \"<\" then\n      closed\
    \ = \"<\"\n      opening = \">\"\n    end\n    if opening == \">\" then\n    \
    \  opening = \"<\"\n      closed = \">\"\n    end\n    index = index + opening:len()\n\
    \  end\n  return not closed\nend", "  brackets = brackets -- brackets is a string\
    \ of \"<\" and \">\".\n  return string.find(brackets, \"<\") ~= nil and\n    \
    \     string.find(brackets, \">\") ~= nil\nend", "  local stack = {brackets}\n\
    \  for i=1,#brackets do\n    if brackets[i] == '<' then\n      if not stack[#stack]\
    \ then return false end\n      stack[#stack] = stack[#stack] .. \">\"\n    elseif\
    \ brackets[i] == '>' then\n      if not stack[#stack] then return false end\n\
    \      stack[#stack] = stack[#stack] .. \"<\"\n    elseif not stack[#stack] then\
    \ return false end\n    else stack[#stack] = stack[#stack] .. brackets[i] end\n\
    \  end\n  return #stack == 0\nend", "\tlocal openings = {}\n\tlocal closings =\
    \ {}\n\tlocal count = 0\n\tfor c in brackets:gmatch(\"[^<>]+\") do\n\t\tif openings[c]\
    \ == nil then\n\t\t\topenings[c] = count\n\t\t\tclosings[c] = count\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\tfor k, v in pairs(openings) do\n\t\tcount = count\
    \ + 1\n\t\tassert(closings[k] ~= nil, \"missing closing bracket \" .. k .. \"\
    \ at line \" .. tostring(line))\n\t\tclosings[k] = count\n\tend\n\tcount = count\
    \ - 1\n\treturn #openings[#openings] ~= 0 and #closings[#closings] ~= 0\nend",
  "  brackets = brackets:gsub(\"<>\", \"\")\n  return #brackets > 0 and #brackets\
    \ == #brackets:find(brackets)\nend", "  brackets = brackets:gsub(\"<\", \"\")\n\
    \  brackets = brackets:gsub(\">\", \"\")\n  brackets = brackets:gsub(\"<>\", \"\
    \")\n  brackets = brackets:gsub(\"><\", \"\")\n  brackets = brackets:gsub(\"<>\"\
    , \"\")\n  brackets = brackets:gsub(\"<<>\", \"\")\n  return brackets:len() >\
    \ 0 and (brackets:sub(1, 1) == \"(\" or brackets:sub(1, 1) == \"[\")\nend", " \
    \   local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets\
    \ do\n        local open_bracket = brackets[i]\n        if open_bracket == \"\
    >\" then\n            table.insert(open_brackets, open_bracket)\n        elseif\
    \ open_bracket == \"<\" then\n            table.insert(close_brackets, open_bracket)\n\
    \        else\n            return false\n        end\n    end\n    for i = 1,\
    \ #open_brackets do\n        if open_brackets[i] != close_brackets[i] then\n \
    \           return false\n        end\n    end\n    return true\nend", "  local\
    \ opening_brackets = {\n    [\">\"]    = true,\n    [\"<\"]    = true,\n    [\"\
    <=\"]   = true,\n    [\"<:\"]   = true,\n    [\"<%\"]   = true,\n    [\"<%=\"\
    ] = true,\n    [\"<%-\"]  = true,\n    [\"<%-=\"] = true,\n    [\"<%+\"]  = true,\n\
    \    [\"<%+=\"] = true,\n    [\"%:\"]   = true,\n    [\"%:=\"]  = true,\n    [\"\
    %-:\"]  = true,\n    [\"%-:=\"] = true,\n    [\"%+:\"]  = true,\n    [\"%+:=\"\
    ] = true,\n    [\"%>\"]   = true,\n    [\"%>=\"]  = true,\n    [\"%-%\"]  = true,\n\
    \    [\"%-%=\"] = true,\n    [\"%+%\"]  = true,\n    [\"%+%=\"] = true,\n    [\"\
    :>\"]   = true,\n    [\":>=\"]  = true,\n    [\":-<\"]  = true,\n    [\":-<=\"\
    ] = true,\n    [\":->\"]  = true,\n    [\":->=\"] = true,\n  }\n  local closing_brackets\
    \ = {\n    [\"<\"]     = true,\n    [\"<=\"]   = true,\n    [\"<:\"]   = true,\n\
    \    [\"<%\"]   = true,\n    [\"<%=\"] = true,\n    [\"<%-\"]  = true,\n    [\"\
    <%-=\"] = true,\n    [\"<%+\"]  = true,\n    [\"<%+=\"] = true,\n    [\"%:\"]\
    \   = true,\n    [\"%:=\"]  = true,\n    [\"%-:\"]  = true,\n    [\"%-:=\"] =\
    \ true,\n    [\"%+:\"]  = true,\n    [\"%+:=\"] = true,\n    [\"%>\"]   = true,\n\
    \    [\"%>=\"]  = true,\n    [\"%-%\"]  = true,\n    [\"%-%=\"] = true,\n    [\"\
    %+%\"]  = true,\n    [\"%+%=\"] = true,\n    [\":>\"]   = true,\n    [\":>=\"\
    ]  = true,\n    [\":-<\"]  = true,\n    [\":-<=\"] = true,\n    [\":->\"]  = true,\n\
    \    [\":->=\"] = true,\n  }\n  local opening_brackets_str = table.concat(opening_brackets)\n\
    \  local closing_brackets_str = table.concat(closing_brackets)\n  local opening_brackets_regex\
    \ = string.format( \"[%s]\", opening_brackets_str )\n  local closing_brackets_regex\
    \ = string.format( \"[%s]\", closing_brackets_str )\n  local opening_b", "  brackets\
    \ = brackets -- convert to string\n  return brackets:sub(1,1):find(\"<\") and\
    \ brackets:sub(1,2):find(\">\") and correct_bracketing(brackets:sub(2)) or false\n\
    end", "  local i = 0\n  while i < #brackets and i < #brackets - 1 do\n    if brackets[i]\
    \ == \"<\" then\n      if brackets[i+1] == \">\" then\n        i = i + 2\n   \
    \   else\n        return false\n      end\n    elseif brackets[i] == \">\" then\n\
    \      if brackets[i+1] == \">\" then\n        i = i + 2\n      else\n       \
    \ return true\n      end\n    else\n      return false\n    end\n  end\n  return\
    \ false\nend", "\tlocal opening, closing = brackets:gsub(\"%a>%a<\", \"%%%1%%%2\"\
    ):gsub(\"%%%1%%%2%%%1%%%2\", \"%%%1%%%2\"):gsub(\"%%%1%%%2%%%1%%%2\", \"%%%1%%%2\"\
    ):gsub(\"%%%1%%%2%%%1%%%2\", \"%%%1%%%2\"):gsub(\"%%%1%%%2%%%1%%%2\", \"%%%1%%%2\"\
    )\n\treturn opening ~= opening ~= closing ~= closing ~= opening ~= closing ~=\
    \ opening ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~=\
    \ opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~=\
    \ opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~=\
    \ closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~=\
    \ opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~=\
    \ closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~=\
    \ opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~=\
    \ closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~=\
    \ opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~=\
    \ closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~=\
    \ opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~=\
    \ closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~=\
    \ opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~=\
    \ closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~=\
    \ opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~=\
    \ closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~=\
    \ opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~=\
    \ closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~=\
    \ opening ~", "  local i = 0\n  while i < #brackets do\n    if brackets[i] ==\
    \ \"<\" then\n      i = i + 1\n      while i < #brackets and brackets[i] ~= \"\
    >\" do\n        i = i + 1\n      end\n      return false\n    end\n    i = i +\
    \ 1\n  end\n  return true\nend", "   for idx = 1, #brackets do\n      local opening\
    \ = brackets[idx]:sub(1, 1)\n      local closing = brackets[idx]:sub(2)\n    \
    \  if not opening:find(closing) then\n         return false\n      end\n   end\n\
    \   return true\nend", "  for i = 1, #brackets do\n    local open_bracket = brackets[i]\n\
    \    local close_bracket = brackets[i+1]\n    local open_brackets_at = open_bracket:find(\"\
    #\")\n    local close_brackets_at = close_bracket:find(\"#\")\n    if open_brackets_at\
    \ == nil then\n      assert(close_brackets_at ~= nil, \"Bracketing failed at character\
    \ \" .. tostring(i))\n      return false\n    end\n    if open_brackets_at > close_brackets_at\
    \ then\n      -- open_brackets_at must be before close_brackets_at in brackets\
    \ string\n      return false\n    end\n    if open_brackets_at == close_brackets_at\
    \ then\n      -- open_brackets_at must be contiguous in the brackets string\n\
    \      assert(open_bracket:sub(1, open_brackets_at - 1) ~= close_bracket:sub(1,\
    \ close_brackets_at - 1),\n             \"Bracketing failed at character \" ..\
    \ tostring(i))\n      return false\n    end\n  end\n  return true\nend", "   local\
    \ opening = brackets:gsub(\"<\", \"\"):gsub(\">\", \"\")\n   local closing = brackets:gsub(\"\
    <\", \"\"):gsub(\">\", \"\")\n   return opening:len() == closing:len()\nend",
  "  local opening_brackets, closing_brackets = brackets:match(\"([^<]+)<(%S+)(?!%>)([^>]+)$\"\
    )\n  if opening_brackets then\n    return opening_brackets ~= closing_brackets\n\
    \  else\n    return false\n  end\nend", "  for i = 1, #brackets do\n    if brackets[i]\
    \ ~= '<' then return false end\n    if brackets[i+1] == '>' then return true end\n\
    \  end\n  return false\nend", "    local opening_brackets, closing_brackets =\
    \ {}, {}\n    for _, pair in ipairs(brackets) do\n        local opening, closing\
    \ = pair:sub(1, -2)\n        if opening ~= \">\" then opening_brackets[opening]\
    \ = true end\n        if closing ~= \"<\" then closing_brackets[closing] = true\
    \ end\n    end\n    for opening, _ in pairs(opening_brackets) do\n        if not\
    \ closing_brackets[opening] then return false end\n    end\n    return true\n\
    end", "   for _, bracket in pairs(brackets) do\n      if not ((bracket==\"<\"\
    \ and brackets[bracket+1]==\">\") or\n              (bracket==\"<\" and brackets[bracket+1]==\"\
    >\")) then\n         return false\n      end\n   end\n   return true\nend", " \
    \   local opening_brackets = brackets:gsub(\"([^<>])\",\"%1\")\n    local closing_brackets\
    \ = brackets:gsub(\"(<[^<>]+>)\",\"%1\")\n    return opening_brackets ~= closing_brackets\n\
    end", "  local opening = false\n  local closing = false\n  for _, bracket in ipairs(brackets)\
    \ do\n    if bracket:sub(1, 1) ~= '<' then return false end\n    opening = true\n\
    \  end\n  for _, bracket in ipairs(brackets) do\n    if bracket:sub(1, 1) ~= '>'\
    \ then return false end\n    closing = true\n  end\n  return opening and not closing\n\
    end", "    brackets = string.gsub(brackets, \" \", \"<>\")\n    for i = 1, #brackets\
    \ do\n        local open = brackets[i]\n        local close = brackets[i + 1]\n\
    \        if open ~= close then\n            return false\n        end\n    end\n\
    \    return true\nend", "  -- For each opening bracket, check that it is paired\
    \ with a closing bracket.\n  --\n  -- (Note: This code doesn't support nested\
    \ brackets. You have to write it\n  -- yourself.)\n  local stack = {}\n  for i\
    \ = 1, #brackets do\n    local char = brackets[i]\n    local is_open = brackets[i]\
    \ == \"<\"\n    if is_open then\n      stack[#stack+1] = char\n    elseif char\
    \ == \"<\" then\n      assert(stack[#stack] == nil)\n    else\n      assert(stack[#stack]\
    \ == char)\n    end\n  end\n  -- If we got this far, the brackets are correct,\
    \ return True.\n  return stack[#stack] == nil\nend", "    -- we return True if\
    \ every opening bracket has a corresponding closing bracket.\n    -- >>> correct_bracketing(\"\
    <\")\n    -- False\n    -- >>> correct_bracketing(\"<>\")\n    -- True\n    --\
    \ >>> correct_bracketing(\"<<><>>\")\n    -- True\n    -- >>> correct_bracketing(\"\
    ><<>\")\n    -- False", "  return brackets:len() >= 2 and brackets:sub(1, 1):sub(1,\
    \ 1):sub(1, 1) ~= brackets:sub(2, 2) ~= brackets:sub(3, 3) ~= brackets:sub(4,\
    \ 4)\nend", "  -- Check for brackets\n  local opening_bracket, closing_bracket\
    \ = {}\n  for _, bracket in pairs(brackets) do\n    if opening_bracket then\n\
    \      if not closing_bracket[bracket] then\n        return false\n      end\n\
    \    else\n      opening_bracket, closing_bracket = {}, bracket\n    end\n  end\n\
    \  -- Check other opening brackets\n  for _, bracket in pairs(brackets) do\n \
    \   if not opening_bracket[bracket] then\n      return false\n    end\n  end\n\
    \  return true\nend", "\t-- If brackets is an open bracket, make sure it's followed\
    \ by a closing bracket.\n\tbrackets = brackets:match(\"^([<>])+\")", "    return\
    \ brackets:find(brackets, 1, false) ~= nil and\n        brackets:find(brackets,\
    \ 2, true) ~= nil and\n        brackets:find(brackets, 3, true) ~= nil and\n \
    \       brackets:find(brackets, 4, true) ~= nil and\n        brackets:find(brackets,\
    \ 5, true) ~= nil and\n        brackets:find(brackets, 6, true) ~= nil\nend",
  "    -- The simplest solution is to simply check if all opening-brackets are closing\
    \ brackets.\n    -- But this solution doesn't work in all cases. For example,\
    \ consider \"<<>>\".\n    --\n    -- >>> correct_bracketing(\"<<>>\")\n    --\
    \ True\n    -- >>> correct_bracketing(\"<<><><<><><<>\")\n    -- True\n    --\
    \ >>> correct_bracketing(\"<<><<><><<><><<><><<><<><<><<><<><<><<><<><>\")\n \
    \   -- False\n    -- >>> correct_bracketing(\"<<><<><><<><><<><><<><<><<><<><<><><><><>\"\
    )\n    -- False\n    -- >>> correct_bracketing(\"<><<><><<><><<><><<><<><<><<><<><><><><>\"\
    )\n    -- False\n    -- >>> correct_bracketing(\"<<><>><><>><><>><><>><><>><><>><><>><><>><><>><><>><><><><><>\"\
    )\n    -- False\n    -- >>> correct_bracketing(\"<><<><>><<><>><><>><><>><><>><><><><><><><><><><><>\"\
    )\n    -- True\n    --\n    -- So we split the brackets into individual characters,\
    \ and then check that each one has the same number of closing brackets.\n    --\
    \ This is not ideal (especially because we're relying on the fact that all strings\
    \ have the same number of opening characters),\n    -- but is good enough for\
    \ our purposes.\n    --\n    -- This problem is not so easy to solve generally.\
    \ For example, consider this case:\n    --\n    -- >>> correct_bracketing(\"<><<>\"\
    )\n    -- True\n    -- >>> correct_bracketing(\"<><><<><><><<><><<><<><<><<><><><<><><<><><><><<><<><><>\"\
    )\n    -- True\n    -- >>> correct_bracketing(\"<><<><><<><><<><><<><<><<><<><><><><<><><><><><<><><><><<>\"\
    )\n    -- True\n    -- >>> correct_bracketing(\"<><<><><><><><><><><><><><><><><><><><><><><><><><><><><><>\"\
    )\n    -- True\n    -- >>> correct_bracketing(\"<<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><",
  "  brackets = brackets:gsub(\"^%s*(%w+)%s*$\", \"%1\")\n  brackets = brackets:gsub(\"\
    (%w+)%s(%w+)\", \"%1>%2<\")\n  brackets = brackets:gsub(\"(%w+)%s*(%w+)\", \"\
    %1>%2<\")\n  brackets = brackets:gsub(\"(%w+)%s*%(%w+)\", \"%1>%2<\")\n  brackets\
    \ = brackets:gsub(\"(%w+)%s*(%w+)\", \"%1>%2<\")\n  brackets = brackets:gsub(\"\
    %s*$\", \"\"):gsub(\"%s+\", \"\"):gsub(\"(%w+)%s*(%w+)\", \"%1>%2<\")\n  return\
    \ brackets:find(\"<\") == nil\nend", "   for idx, c in ipairs(brackets) do\n \
    \     if not ((\"<\" == c and \"</\" == c) or\n              (\">\" == c and \"\
    />\" == c) or\n              (\"<\" == c and \">\" == c)) then\n         return\
    \ false\n      end\n   end\n   return true\nend", "\tbrackets = brackets:gsub(\"\
    [<>]\", function (x)\n\t\treturn x\n\tend)\n\tbrackets = brackets:gsub(\"<<\"\
    , \"<\")\n\tbrackets = brackets:gsub(\">>\", \">\")\n\treturn brackets ~= brackets\n\
    end", "   for bracket, next_bracket in pairs(brackets) do\n      if next_bracket\
    \ == nil then\n         return false\n      end", "    local opening = brackets:sub(1,1)\n\
    \    local closing = brackets:sub(2,2)\n    return opening ~= closing or opening\
    \ == '<'\nend", "  brackets = brackets:gsub(\"[<>]\", \"%1\")\n  return brackets\
    \ ~= \"%1%1\"\nend", "  for i, c in ipairs(brackets) do\n    if c == \"<\" then\n\
    \      if brackets[i + 1] == \"<\" then\n        return false\n      elseif brackets[i\
    \ + 1] == \">\" then\n        return true\n      end\n    end\n  end\n  return\
    \ true\nend", "    brackets = brackets:gsub(\"%[(%<>)%]\", function(s)\n     \
    \   s = string.gsub(s, \">\", \"<\")\n        s = string.gsub(s, \"\", s)\n  \
    \      return s ~= \"\"\n    end)\n    return brackets ~= \"\"\nend", "   for\
    \ i = 1, #brackets do\n      local b = brackets[i]\n      local e = brackets[i\
    \ + 1]\n      if not (b == \"<\" and e == \">\") then\n         return false\n\
    \      end\n   end\n   return true\nend", "  local open_brackets = {}\n  local\
    \ close_brackets = {}\n  local bracket_count = 0", "   -- assert brackets ~= '[',\
    \ ']', '(', or ')'\n   if not brackets then return false end\n   local brackets\
    \ = brackets:gsub('[()]', ''):gsub('[<>]', '')\n   if brackets ~= '<>' then return\
    \ false end\n   return true\nend", "  local open_count = 0\n  local close_count\
    \ = 0\n  for i, c in pairs(brackets) do\n    if c == \"<\" then\n      open_count\
    \ = open_count + 1\n    elseif c == \">\" then\n      close_count = close_count\
    \ + 1\n    end\n  end\n  return open_count == close_count\nend", "    if brackets\
    \ == \"\" then return false end\n    local open_brackets = brackets:gsub(\"%<(.*)>%\"\
    , function(m)\n        return m\n    end):gsub(\"%([<>])\", function(m)\n    \
    \    return m\n    end)\n    if open_brackets ~= \"\" then \n        for i = 1,\
    \ #open_brackets do\n            if open_brackets:sub(i, i) == \">\" then\n  \
    \              local closing_bracket = open_brackets:sub(i, i - 1)\n         \
    \       local open_bracket = open_brackets:sub(i, i + 1)\n                return\
    \ open_bracket ~= closing_bracket\n            else\n                return false\n\
    \            end\n        end\n        return true\n    else\n        return false\n\
    \    end\nend", "    local opening = brackets:gsub(\"^%<\", \"<\")\n    local\
    \ closing = brackets:gsub(\"%$>\", \">\")\n    local opening = opening:gsub(\"\
    [<>]\", \"\")\n    local closing = closing:gsub(\"[<>]\", \"\")\n    local opening\
    \ = opening:gsub(\"%D\", \"\")\n    local closing = closing:gsub(\"%D\", \"\"\
    )\n    return opening ~= closing\nend", "    local openingBrackets = string.gsub(brackets,\
    \ \"<\", \"\") -- remove opening brackets\n    local closingBrackets = string.gsub(brackets,\
    \ \">\", \"\") -- remove closing brackets\n    local openingBracketTable = {}\n\
    \    local closingBracketTable = {}\n    for i = 1, #openingBrackets do\n    \
    \    table.insert(openingBracketTable, openingBrackets[i])\n    end\n    for i\
    \ = 1, #closingBrackets do\n        table.insert(closingBracketTable, closingBrackets[i])\n\
    \    end\n    local openingBracketCount = 1\n    local closingBracketCount = 1\n\
    \    for i = 1, #openingBracketTable do\n        openingBracketCount = openingBracketCount\
    \ + 1\n        if openingBracketTable[i] == closingBracketTable[i] then\n    \
    \        closingBracketCount = closingBracketCount + 1\n        elseif openingBracketCount\
    \ > closingBracketCount then\n            return false\n        else\n       \
    \     openingBracketCount = 1\n            closingBracketCount = 1\n        end\n\
    \    end\n    return true\nend", "   for i = 1, #brackets do\n      if brackets[i]\
    \ == \"<\" then\n         for j = i+1, #brackets do\n            if brackets[j]\
    \ == \">\" then\n               return true\n            end\n         end\n \
    \     end\n   end\n   return false\nend", "\tlocal opening_brackets = {}\n\tfor\
    \ b in string.gmatch(brackets, \"%a+\") do\n\t\topening_brackets[b] = true\n\t\
    end", "    brackets = string.gsub(brackets, \"[<>]+\", \"\")\n    return brackets:sub(1,\
    \ 1):sub(1, 1):sub(1, 1) ~= \"<>\"\nend", "   brackets = brackets:gsub(\"[<>]\"\
    , \"%%%1\")\n   brackets = brackets:gsub(\"%%%1\", \"[<>]\")\n   return brackets:sub(1,\
    \ #brackets) == brackets\nend", "    -- if the brackets are empty, they're not\
    \ allowed\n    if not brackets then\n        return false\n    end", "  local\
    \ opening = brackets:gsub(\"[<>]\", \"%%%1\")\n  local closing = brackets:gsub(\"\
    [<>]\", \"%%%2\")\n  opening = opening:gsub(\"%%%2\", \"[\")\n  opening = opening:gsub(\"\
    %%%1\", \"%\")\n  closing = closing:gsub(\"%%%2\", \"]\")\n  closing = closing:gsub(\"\
    %%%1\", \"%\")\n  return opening == closing\nend", "  brackets = brackets or \"\
    \"\n  for i = 1, #brackets do\n    if brackets[i] ~= brackets[i+1] then\n    \
    \  return false\n    end\n  end\n  return true\nend", "  local opening_brackets\
    \ = {}\n  local closing_brackets = {}\n  for i = 1, #brackets do\n    local c\
    \ = brackets[i]\n    if c == \"<\" then\n      table.insert(opening_brackets,\
    \ 1)\n      table.insert(closing_brackets, 0)\n    elseif c == \">\" then\n  \
    \    table.insert(opening_brackets, 0)\n      table.insert(closing_brackets, 1)\n\
    \    elseif c == \"{\" then\n      table.insert(opening_brackets, 0)\n    elseif\
    \ c == \"}\" then\n      table.insert(closing_brackets, 0)\n    else\n      assert(false)\n\
    \    end\n  end\n  for i = 1, #opening_brackets do\n    if opening_brackets[i]\
    \ > closing_brackets[i] then\n      return false\n    end\n  end\n  return true\n\
    end", "  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"(<>)\", \"\")\n  brackets = brackets:gsub(\"\
    (<<)\", \"\")\n  brackets = brackets:gsub(\">>\", \"\")\n  brackets = brackets:gsub(\"\
    <<<\", \"\")\n  return brackets ~= \"\"\nend", "\tfor i=1, #brackets do\n\t\t\
    if brackets[i] ~= \">\" and brackets[i] ~= \"<\" then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn true\nend", "  return brackets:match(\"<%a>\") ~= nil and\
    \ brackets:match(\"%a>\") and brackets:sub(1, 1):match(\"<%a\") and brackets:sub(1,\
    \ 1):match(\"%a>\")\nend", "  for i, c in ipairs(brackets) do\n    if c == \"\
    <\" then\n      return not (brackets[i - 1] ~= '<' or brackets[i - 1] == \">\"\
    )\n    elseif c == \">\" then\n      return not (brackets[i - 1] ~= '<' or brackets[i\
    \ - 1] == \">\")\n    end\n  end\n  return true\nend", "  local opening_brackets\
    \ = {}\n  local closing_brackets = {}\n  for i,c in ipairs(brackets) do\n    if\
    \ c == '<' then\n      table.insert(opening_brackets, i)\n    elseif c == '>'\
    \ then\n      table.insert(closing_brackets, i)\n    end\n  end\n  -- if the brackets\
    \ array is empty, return true\n  if #opening_brackets == 0 and #closing_brackets\
    \ == 0 then\n    return true\n  end\n  for _,i in ipairs(opening_brackets) do\n\
    \    for _,j in ipairs(closing_brackets) do\n      if j > i then\n        break\n\
    \      else\n        j = j + 1\n      end\n      if j > #opening_brackets then\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  local\
    \ open_brackets = brackets:gsub(\"[<>]\", \"%1\")\n  local close_brackets = open_brackets:gsub(\"\
    %1\", \"[<>]\")\n  -- if open_brackets = close_brackets then\n  --   return true\n\
    \  -- end\n  return open_brackets ~= close_brackets\nend", "  brackets = brackets\
    \ -- string\n  for i = 1, #brackets do\n    if brackets[i] == \"<\" then\n   \
    \   if not (i ~= #brackets) then\n        -- if the next bracket is not the last,\
    \ bracketing is incorrect\n        return false\n      end\n      -- if we are\
    \ at the end of the string, the bracketing must be right\n      return true\n\
    \    end\n    if brackets[i] == \">\" then\n      -- if we are at the end of the\
    \ string, this bracket must be right\n      return true\n    end\n  end\n  return\
    \ false\nend", "\tbrackets = brackets:gsub(\"^%[(%.-).-%](%)$\", function(c) c==brackets[1]\
    \ then brackets[1]=brackets[2] or brackets[1] end end) -- replace opening brackets\
    \ that are not followed by a closing bracket with their closing bracket.\n\treturn\
    \ brackets:gsub(\"[<>]\", function(c) return c==\"<\" then \"<\" else \">\" end\
    \ end):gsub(\"%</\", function(c) return c==\"<\" then \"<\" else \">\" end end)==brackets\
    \ -- remove any remaining brackets that are not the original ones.\nend", "  \
    \  if brackets == nil then\n        return true\n    end\n    -- check for balanced\
    \ brackets\n    local opening = 0\n    local closing = 0\n    local stack = {}\n\
    \    for idx = 1, #brackets do\n        local c = string.sub(brackets, idx, idx)\n\
    \        local isopen = brackets[c] and brackets[c] ~= '{'\n        local ispotenum\
    \ = string.find(brackets, c, \"%w\")\n        if c == \"<\" then\n           \
    \ if opening == 0 then\n                stack[#stack + 1] = c\n              \
    \  opening = ispotenum\n            else\n                closing = ispotenum\n\
    \                if opening and opening > opening + 1 then\n                 \
    \   opening = opening - 1\n                else\n                    opening =\
    \ nil\n                end\n            end\n        elseif c == \">\" then\n\
    \            if opening ~= 0 then\n                if stack[#stack] > c then\n\
    \                    stack[#stack] = c\n                    opening = nil\n  \
    \              else\n                    closing = ispotenum\n               \
    \     if closing and closing > closing - 1 then\n                        closing\
    \ = closing - 1\n                    else\n                        closing = nil\n\
    \                    end\n                end\n            end\n        elseif\
    \ c == '{' then\n            opening = ispotenum\n        elseif c == '}' then\n\
    \            if opening and opening > opening + 1 then\n                opening\
    \ = opening - 1\n            else\n                opening = nil\n           \
    \ end\n        end\n    end\n    return #stack == 0 and opening and closing and\
    \ opening > closing\nend", "   brackets = brackets:gsub(\"[<>]\", \"\")\n   local\
    \ brackets_counts = {}\n   for i = 1, #brackets do\n      local open_count = 1\n\
    \      local close_count = 1\n      local open = brackets[i]\n      while open:sub(1,\
    \ 1) == \"<\" do\n         open_count = open_count + 1\n         open = open:sub(2)\n\
    \      end\n      while open:sub(1, 1) == \">\" do\n         close_count = close_count\
    \ + 1\n         open = open:sub(2)\n      end\n      brackets_counts[open_count]\
    \ = open_count - close_count\n   end\n   for i = 1, #brackets do\n      local\
    \ open = brackets[i]\n      while open:sub(1, 1) == \"<\" do\n         open =\
    \ open:sub(2)\n         if open:sub(1, 1) == \"<\" then\n            return false\n\
    \         end\n      end\n      while open:sub(1, 1) == \">\" do\n         open\
    \ = open:sub(2)\n         if open:sub(1, 1) == \">\" then\n            return\
    \ false\n         end\n      end\n      if brackets_counts[#brackets_counts +\
    \ 1] == 0 then\n         return false\n      end\n   end\n   return true\nend",
  "  local opens = io.lines(brackets)\n  local closes = io.lines(\"<\"..brackets..\"\
    >\")\n  -- assert that every open bracket has a corresponding close bracket.\n\
    \  local function not_closed(i)\n    return #opens[i] < #closes[i]\n  end\n  --\
    \ check each pair of open brackets\n  for i, open1 in ipairs(opens) do\n    local\
    \ open2 = opens[i]\n    for j, bracket1 in ipairs(open1) do\n      local bracket2\
    \ = open2[j]\n      -- assert that every bracket has a corresponding closing bracket.\n\
    \      if bracket1 ~= bracket2 then\n        return false\n      end\n    end\n\
    \  end\n  return true\nend", "    brackets = brackets or \"\"\n    for idx = 1,\
    \ #brackets do\n        local opening_bracket = brackets[idx:find(brackets, \"\
    [\", idx)]\n        if opening_bracket == nil then\n            return false\n\
    \        end", "    local opening_brackets = brackets:gsub(\"^<\",\"<\")\n   \
    \ local closing_brackets = brackets:gsub(\"^>\", \">\")\n    return opening_brackets\
    \ == closing_brackets\nend", "    for i,c in pairs(brackets) do\n        if c:find(\"\
    >\") then\n            local open_bracket = brackets[i]:find(\">\")\n        \
    \    if open_bracket ~= nil then\n                local close_bracket = brackets[i]:find(\"\
    <\")\n                if close_bracket ~= nil then\n                    if close_bracket\
    \ ~= open_bracket-1 then\n                        return false\n             \
    \       end\n                end\n            end\n        end\n    end\n    return\
    \ true\nend", "  local brackets_map = brackets:gsub(\"[^<>]+\", \"%1\")\n  return\
    \ brackets:gsub(\"(<)(%1)(>)\", function(s, l, b, r)\n    return brackets_map[b]\
    \ == brackets_map[r] and\n           #brackets_map[b] == #brackets_map[r] and\n\
    \           #b + 1 == #r and\n           l[#b] == \">\" and\n           not (brackets_map[b]\
    \ and brackets_map[r])\n  end)\nend", "  -- assert brackets ~= \"\", \"brackets\
    \ cannot be empty\"\n  brackets = brackets:gsub(\"<([{])\", function(a, b) return\
    \ \"[\" .. b .. \"]\" end)\n  brackets = brackets:gsub(\"([})])\", function(a,\
    \ b) return a .. \"[\" .. b .. \"]\" end)\n  brackets = brackets:gsub(\"([^{}])\"\
    , function(a, b) return \"[\" .. a .. \"]\" end)\n  brackets = brackets:gsub(\"\
    ([{}])\", function(a, b) return \"[\" .. b .. \"]\" end)\n  return brackets:match(\"\
    <{([}]\")\nend", "    local brackets = brackets:gsub(\"[<>]\", \"%%%1\")\n   \
    \ for i = 1, #brackets do\n        if brackets[i] ~= brackets[i+1] then\n    \
    \        return false\n        end\n    end\n    return true\nend", "  return\
    \ brackets:sub(1,1):find(\"<\") == 0\nend", "   for _, bracket in pairs(brackets)\
    \ do\n      if bracket:find(bracket:sub(1, 1)) == nil then\n         return false\n\
    \      end\n   end\n   return true\nend", "    local index = 0\n    while index\
    \ <= #brackets do\n        if brackets[index] ~= '<' then\n            if brackets[index]\
    \ ~= '>' then\n                return false\n            end\n        end\n  \
    \      index = index + 1\n    end\n    return true\nend", "\tlocal num_openings\
    \ = #brackets\n\tlocal opening = {}\n\tlocal closing = {}\n\tfor idx = 1, num_openings\
    \ do\n\t\tlocal open = brackets:sub(1, idx)\n\t\tlocal close = brackets:sub(idx\
    \ + 1)\n\t\ttable.insert(opening, open)\n\t\ttable.insert(closing, close)\n\t\
    end\n\tlocal opening_found = false\n\tlocal closing_found = false\n\tfor idx =\
    \ 1, num_openings do\n\t\tlocal open = brackets:sub(1, idx)\n\t\tlocal close =\
    \ brackets:sub(idx + 1)\n\t\tif open == open then\n\t\t\topening_found = true\n\
    \t\telseif open == close then\n\t\t\tclosing_found = true\n\t\tend\n\tend\n\t\
    if opening_found then\n\t\treturn true\n\telseif closing_found then\n\t\treturn\
    \ false\n\telse\n\t\treturn num_openings == #opening\n\tend\nend", "    if brackets:match(\"\
    ^<%%(>)?([^%]+)%.%%(>)?%>$\") then\n        return brackets:gsub(\"^<%%(>)?\"\
    , \"<\"):gsub(\"%.%%(>)?>$\", \">\")\n    end\n    return false\nend", "  brackets\
    \ = brackets:gsub(\"[<>]\", \"%s*()%s*[<>]\") % brackets\n  brackets = brackets:gsub(\"\
    (%s*)(%s*)\", \"%1*%2\") -- remove inner brackets\n  brackets = brackets:gsub(\"\
    (%s*)(%s*)(%s*)\", \"%1%2*%3*%4*%2\") -- remove outer brackets\n  brackets = brackets:gsub(\"\
    ^(%s*)(%s*)(%s*)$\", \"%1%2*%3*%4\") -- remove entire brackets if they're at the\
    \ beginning\n  return brackets == \"\"\nend", "    if brackets ~= \"\" and brackets\
    \ ~= nil then\n        brackets = brackets .. \"{\"\n        while true do\n \
    \           local opening = brackets:find(\"<\")\n            local closing =\
    \ brackets:find(\">\")\n            if opening ~= nil and closing ~= nil then\n\
    \                if opening < closing then\n                    return false\n\
    \                else\n                    return true\n                end\n\
    \            else\n                break\n            end\n        end\n    end\n\
    \    return false\nend", "  local opening, closing, empty = brackets:gsub(\"^(<)(>)$\"\
    ,\"%1%2\"):gsub(\"(<)(>)\",\"%2%1\")\n  local bracket_count = #opening - #closing\n\
    \  return bracket_count == 0 and empty ~= \"\"\nend", "  local opening_brackets\
    \ = brackets:gsub(\"<\",\"\"):gsub(\">\",\"\")\n  for i = 1,#opening_brackets\
    \ do\n    if opening_brackets[i]:sub(1,1) ~= opening_brackets[i+1]:sub(1,1) then\n\
    \      return false\n    end\n  end\n  return true\nend", "  brackets = brackets\
    \ or \"\"\n  local opening, closing, opening_count, closing_count\n  local opening,\
    \ closing, opening_count, closing_count = unpack(brackets)\n  for i = 1, #opening\
    \ do\n    opening_count = opening_count or 0\n    if opening_count > 0 then\n\
    \      local closing_idx = #closing + opening_count - 1\n      while opening_count\
    \ > 0 do\n        local closing_idx = closing_idx - 1\n        if closing_idx\
    \ < 0 then\n          return false\n        end\n        local open_char = closing[closing_idx]\n\
    \        if open_char == \"<\" then\n          opening_count = opening_count -\
    \ 1\n        elseif open_char == \">\" then\n          closing_count = closing_count\
    \ + 1\n        else\n          opening_count = opening_count - 1\n        end\n\
    \      end\n    end\n    if closing_count > 0 then\n      local opening_idx =\
    \ #opening + opening_count + 1\n      for i = opening_idx, #opening do\n     \
    \   local open_char = opening[i]\n        if open_char == \"<\" then\n       \
    \   opening_count = opening_count + 1\n        elseif open_char == \">\" then\n\
    \          opening_count = opening_count - 1\n        end\n      end\n    end\n\
    \  end\n  return true\nend", "  local bracket_pairs = brackets:gsub(\"%b()()\"\
    , \"%w\"):map(function(s)\n    return s..\">\"\n  end)\n  return #bracket_pairs\
    \ > 0\nend", "  for i, c in ipairs(brackets) do\n    local opening = c:match(\"\
    ^<\") -- get the opening bracket.\n    if not opening then break end\n    local\
    \ closing = c:match(\"^>\") -- get the closing bracket.\n    if not closing then\
    \ break end\n    if opening ~= closing then break end\n  end\n  return not i\n\
    end", "    local num_opening = 1\n    local num_closing = 0\n    for _, bracket\
    \ in ipairs(brackets) do\n        if bracket == \"<\" then\n            num_opening\
    \ = num_opening + 1\n        elseif bracket == \">\" then\n            num_closing\
    \ = num_closing + 1\n        else\n            return false\n        end\n   \
    \ end\n    return num_opening = num_closing and (num_opening > num_closing)\n\
    end", "    local opening = brackets:find(\"<\")\n    for i = #brackets, 1, -1\
    \ do\n        if brackets:sub(i, i):find(\">\") > -1 then return false end\n \
    \   end\n    return opening ~= nil\nend", "   return brackets == string.format(\"\
    <%d><%d><%d>\", brackets)\nend", "  brackets = brackets:gsub(\"[<>]\", \"\")\n\
    \  return brackets:sub(1, 1)  ~= brackets:sub(brackets:len()-1, brackets:len())\n\
    end", "  return brackets:gsub(\"[<>]\", function(x)\n    return x ~= brackets[1]\
    \ and\n           x ~= brackets[2] and\n           x ~= brackets[3] and\n    \
    \       x ~= brackets[4] and\n           x ~= brackets[5]\n  end)\nend", "   for\
    \ i = 1, #brackets do\n      if brackets[i] ~= \">\" and brackets[i] ~= \"<\"\
    \ then\n         return false\n      elseif brackets[i] == \"<\" then\n      \
    \   if brackets[i+1] ~= \">\" then\n            return false\n         end\n \
    \     elseif brackets[i] == \">\" then\n         if brackets[i+1] ~= \"<\" then\n\
    \            return false\n         end\n      elseif brackets[i] == \"<\" then\n\
    \         if brackets[i+1] ~= \"<\" then\n            return false\n         end\n\
    \      elseif brackets[i] == \">\" then\n         if brackets[i+1] ~= \">\" then\n\
    \            return false\n         end\n      end\n   end\n   return true\nend",
  "\tbrackets = brackets:gsub('%(.-$)', '')\n\tif brackets:sub(1, 1) ~= '<' then\n\
    \t\treturn false\n\tend\n\tlocal openings = brackets:gsub('<(.+)>', '%%1')\n\t\
    local closings = brackets:gsub('%(.-)<', '%%1')\n\treturn openings == closings\n\
    end", "  return #brackets > 0 and #brackets - 1 == #(brackets) - #brackets and\
    \ brackets[1] == brackets[#brackets] and all(sub(brackets, \"<>\") == \"<\"..\"\
    >\" or sub(brackets, \"<>\") == \"<\"..\">>\"..\"<\"..\">\")\nend", "  local opening\
    \ = brackets:find(\"<\")\n  local closing = brackets:find(\">\")\n  return opening\
    \ and closing and (opening - closing + 1) == 1\nend", "  local opening_brackets\
    \ = brackets:gsub(\"[<>]+\", \" \")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ +\", \" \")\n  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\"\
    )\n  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets\
    \ = open", "  local brackets = brackets:gsub(\"[<>]\", \"|\")\n  return string.find(brackets,\
    \ \"|\") ~= nil\nend", "  brackets = brackets:gsub(\"<(%.-).*?\\1>\",\"%%%1\"\
    )\n  return brackets:find(\"%%%2\") ~= nil\nend", "  local opening = brackets:match(\"\
    <\")\n  return opening and opening ~= \">\" and opening ~= \"<>\" and opening\
    \ ~= \"<=\"\nend", "  if brackets == \"<\" then return false end\n  local open_brackets\
    \ = string.gmatch(brackets, \"[^<]+\")\n  for i = 1, #open_brackets do\n    if\
    \ not open_brackets[i]:find(\">\") then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local opening_brackets = {}\n  local closing_brackets\
    \ = {}\n  for i = 1, #brackets do\n    if brackets[i:i] == \">\" then\n      table.insert(closing_brackets,\
    \ brackets[i+1])\n    elseif brackets[i:i] ~= \"<\" then\n      table.insert(opening_brackets,\
    \ brackets[i])\n    end\n  end\n  return #opening_brackets == #closing_brackets\n\
    end", "   -- We count the number of opening brackets\n   local count = 0\n   \n\
    \   -- For each opening bracket we find its corresponding closing bracket\n  \
    \ for i=1, #brackets, 1 do\n      local opening = brackets[i]\n      local closing\
    \ = brackets[i+1]", "    local opening_brackets = brackets:gsub(\"<(%w+)(%>)\"\
    , \"%1\")\n    local closing_brackets = brackets:gsub(\"<(%w+)(%>%>)\", \"%1\"\
    )\n    return opening_brackets ~= closing_brackets\nend", "  local open_brackets\
    \ = {}\n  for match in (brackets):gmatch(\"([^<>]+)\"..\"|\") do\n    open_brackets[match]\
    \ = true\n  end\n  local close_brackets = open_brackets\n  close_brackets[\"]\"\
    ] = true\n  close_brackets[\"<\"] = true\n  close_brackets[\">\"] = true\n  for\
    \ match in (open_brackets):gmatch(\"<([^<>]+)\"..\"|\") do\n    if not close_brackets[match]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    brackets\
    \ = brackets:gsub(\"[<>]\", function(char)\n        local pos = string.find(brackets,\
    \ char, 1)\n        if pos > 0 then\n            brackets = brackets:gsub(char,\
    \ \">\")\n        elseif char == \">\" then\n            brackets = brackets:gsub(char,\
    \ \"<\")\n        else\n            brackets = brackets:gsub(char, \"<\")\n  \
    \      end\n        return brackets\n    end)\n    return brackets:sub(1, 1) ==\
    \ brackets:sub(2, 1)\nend", "  local opening = brackets:gsub(\"([<])\", function(c)\
    \ return \"<\" end)\n  local closing = brackets:gsub(\"(>)\", function(c) return\
    \ \">\" end)\n  return opening:len() == closing:len()\nend", "   local pos = 0\n\
    \   while pos <= #brackets do\n      local opening = brackets[pos]\n      pos\
    \ = pos + 1\n      if opening == \"<\" then\n         pos = pos + 1\n        \
    \ if brackets[pos] ~= \">\" then\n            pos = pos + 1\n         else\n \
    \           pos = pos + 1\n         end\n      elseif opening == \">\" then\n\
    \         return false\n      end\n   end\n   return true\nend", "    local brackets\
    \ = brackets:gsub(\"<>\", \"\")\n    for i = 1, #brackets, 1 do\n        if brackets[i]:sub(1,1)\
    \ ~= brackets[i+1]:sub(#brackets[i+1] - #brackets[i] + 2, #brackets[i+1]) then\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ brackets ~= \"<>\" then return false end\n  local i = 1\n  local n = #brackets\n\
    \  while i < n do\n    i = i + 1 -- skip the '<'\n    local j = i - 1\n    while\
    \ j > 0 and brackets[j] == brackets[i] do\n      j = j - 1\n    end\n    if brackets[i]\
    \ == \"<\" then\n      local j = 1\n      while j < n and brackets[j] == brackets[i]\
    \ do\n        j = j + 1\n      end\n      if j > i then return false end\n   \
    \ end\n    i = i + 1\n  end\n  return true\nend", "    local open_brackets = brackets:gsub(\"\
    [<>]+\", \" \")\n    local close_brackets = open_brackets:gsub(\"<\", \"\"):gsub(\"\
    >\", \"\"):gsub(\"<>\", \"\")\n    return open_brackets:len() == close_brackets:len()\n\
    end", "    local result = false\n    brackets:gsub(\"^(<%a>)(%a>)(%a>)(<%a>)$\"\
    , \"%2 %4 %6 %8\"):gsub(\"^%a>$\", \"\"):gsub(\"^%a%>$\", \"\"):gsub(\"^%a>%>$\"\
    , \"\")\n    if brackets == \"<>\" then\n        return true\n    elseif brackets\
    \ == \"<%>\" then\n        result = true\n    elseif brackets == \"<%<\" then\n\
    \        result = true\n    elseif brackets == \"<%\" then\n        result = true\n\
    \    end\n    return result\nend", "\tfor _, bracket in ipairs(brackets) do\n\t\
    \tif string.find(bracket, \"<\") > string.find(bracket, \">\") then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  brackets = brackets:gsub(\"<>\"\
    ,\"<,>\")\n  return brackets:match(\"<([^,>]+)>\") ~= nil\nend", "  -- remove\
    \ all whitespace in brackets\n  brackets = string.gsub(brackets, \" \", \"\")\n\
    \  -- remove all \"<\"\n  brackets = string.gsub(brackets, \"<\", \"\")\n  --\
    \ remove all \">\"\n  brackets = string.gsub(brackets, \">\", \"\")\n  -- remove\
    \ all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all\
    \ \"<<<>>>\"\n  brackets = string.gsub(brackets, \"<<<>>>\", \"\")\n  -- remove\
    \ all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all\
    \ \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"\
    <>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\
    \n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n \
    \ brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n  brackets\
    \ = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n  brackets =\
    \ string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets,\
    \ \"<>\", \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"\
    <>\", \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\"\
    , \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\
    \")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n\
    \  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  --\
    \ remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove\
    \ all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all\
    \ \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"\
    <>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\
    \n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n \
    \ brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n  brackets\
    \ = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<", "   return (string.find(brackets,\
    \ \"<\") == 1) and (string.find(brackets, \">\") == -1)\nend", "  local open_brackets\
    \ = brackets:gsub(\"<|>\", \"\")\n  for i, open_bracket in ipairs(open_brackets)\
    \ do\n    if not (open_bracket:sub(1, 1) ~= open_bracket:sub(#open_brackets, 1))\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local opening\
    \ = {}\n  local closing = {}\n  local open = 0\n  local close = 0\n  for i = 1,\
    \ #brackets do\n    local opening = brackets[i]\n    if opening ~= \"<\" then\n\
    \      open = open\n    else\n      open = open + 1\n    end\n    opening = \"\
    <\"\n    if opening ~= \">\" then\n      close = close\n    else\n      close\
    \ = close + 1\n    end\n    closing = \">\"\n    if opening ~= closing then\n\
    \      return false\n    end\n  end\n  -- we didn't find any brackets matching\
    \ the pattern\n  return true\nend", "   if brackets ~= '<>' and brackets ~= '<>&'\
    \ then return false end\n   if brackets ~= '<>' and brackets ~= '<>&' then return\
    \ false end\n   if brackets ~= '<>' and brackets ~= '<>&' then return false end\n\
    \   if brackets ~= '<>' then return true end\nend", "    local has_wrong_bracketing\
    \ = false\n    local opening_brackets, _ = string.find(brackets, \"<\")\n    local\
    \ closing_brackets, _ = string.find(brackets, \">\")\n    while opening_brackets\
    \ do\n        local next_opening_brackets, next_closing_brackets = string.find(brackets,\
    \ opening_brackets .. \">\")\n        if not next_opening_brackets then\n    \
    \        return false\n        end\n        if next_closing_brackets <= opening_brackets\
    \ then\n            has_wrong_bracketing = true\n        end\n        opening_brackets\
    \ = next_opening_brackets\n        closing_brackets = next_closing_brackets\n\
    \    end\n    return not has_wrong_bracketing\nend", "  -- Check each opening\
    \ bracket has exactly one corresponding closing bracket.\n  for _, opening_bracket\
    \ in ipairs(brackets) do\n    local count = brackets:count(opening_bracket)\n\
    \    if count > 1 then\n      return false\n    end\n  end", "    local open_bracket\
    \ = brackets[1]\n    local close_bracket = brackets[2]\n    local open_bracket_index\
    \ = 1 -- indexing starts at 1, not 0.\n    while open_bracket ~= nil do\n    \
    \    local close_bracket_index = string.find(brackets, \"<\" .. open_bracket ..\
    \ \">\", open_bracket_index + 1)\n        if close_bracket_index > open_bracket_index\
    \ then\n            return false\n        end\n        open_bracket_index = close_bracket_index\n\
    \        open_bracket = brackets[open_bracket_index]\n    end\n    return true\n\
    end", "  brackets = brackets:gsub(\"[<>]\",function(c)\n    if c == \"<\" then\
    \ return \">\" end\n    if c == \"<\" then return \">\" end\n    if c == \"<\"\
    \ then return \">\" end\n    return c\n  end)\n  brackets = brackets:gsub(\"<>\"\
    ,\"<\")\n  brackets = brackets:gsub(\"<\",\"<\")\n  brackets = brackets:gsub(\"\
    >>\",\"<\")\n  brackets = brackets:gsub(\">\",\"<\")\n  brackets = brackets:gsub(\"\
    <>\",\"<\")\n  return brackets:match(\"<%([%{])%([%])%(%)}%([%])%\")\nend", " \
    \ local stack = {}\n  local opening_brackets = {}\n  for i = 1, #brackets do\n\
    \    local b = brackets[i]\n    if b == \"<\" then\n      if #stack > 0 then\n\
    \        stack[#stack + 1] = \">\"\n      else\n        stack[#stack + 1] = b\n\
    \      end\n    elseif b == \">\" then\n      if #stack > 0 then\n        local\
    \ opening = stack[#stack]\n        if opening ~= nil then\n          if opening\
    \ ~= b then\n            opening_brackets[#opening_brackets + 1] = b\n       \
    \   end\n          stack[#stack + 1] = nil\n        else\n          stack[#stack\
    \ + 1] = b\n        end\n      else\n        stack[#stack + 1] = b\n      end\n\
    \    elseif b == \"{\" then\n      if #stack > 0 then\n        local opening =\
    \ stack[#stack]\n        if opening ~= nil then\n          stack[#stack + 1] =\
    \ b\n        else\n          opening_brackets[#opening_brackets + 1] = b\n   \
    \     end\n      end\n    elseif b == \"}\" then\n      while #stack > 0 and stack[#stack]\
    \ == nil do\n        stack[#stack] = stack[#stack + 1]\n      end\n      local\
    \ opening = stack[#stack]\n      if opening ~= nil then\n        stack[#stack\
    \ + 1] = b\n      else\n        opening_brackets[#opening_brackets + 1] = b\n\
    \      end\n    end\n  end", "  local brackets = {brackets, brackets}\n  local\
    \ opening = brackets:gsub(\"[<>]+\", \"<%1%>\")\n  local closing = brackets:gsub(\"\
    <%1%>+\", \"%1%\")\n  return (opening ~= closing)\nend", "  local opened = {}\n\
    \  for i = 1, #brackets do\n    local char = brackets[i]\n    if char == \"<\"\
    \ then\n      table.insert(opened, 1)\n    elseif char == \">\" then\n      local\
    \ open = #opened - 1\n      if open == 0 then return false end\n      table.insert(opened,\
    \ open)\n    end\n  end\n  if #opened == 0 then return false end\n  local last\
    \ = #opened - 1\n  for i = #brackets, 1, -1 do\n    local char = brackets[i]\n\
    \    if char == \"<\" then\n      table.insert(opened, 1)\n    elseif char ==\
    \ \">\" then\n      local open = #opened - 1\n      if open == 0 then return false\
    \ end\n      if open[last] ~= 1 then return false end\n      table.remove(opened,\
    \ last)\n    end\n  end\n  return true\nend", "   local stack = {}\n   for i =\
    \ 1, #brackets do\n      local c = brackets[i]\n      if c == \"<\" then\n   \
    \      if stack[#stack] == nil then\n            stack[#stack] = i\n         elseif\
    \ stack[#stack] == i then\n            stack[#stack] = nil\n         else\n  \
    \          return false\n         end\n      elseif c == \">\" then\n        \
    \ if #stack == 0 then\n            return true\n         elseif stack[#stack]\
    \ == i then\n            stack[#stack] = nil\n         else\n            return\
    \ false\n         end\n      end\n   end\n   return stack[#stack] == nil\nend",
  "    if brackets == \"\" then return false end\n    local openings = {}\n    local\
    \ closings = {}\n    for i, c in ipairs(brackets) do\n        if c == \"<\" then\
    \ openings[#openings + 1] = i end\n        if c == \"<\" then closings[#closings\
    \ + 1] = i end\n    end\n    if #openings == 0 then return false end\n    if #closings\
    \ == 0 then return false end\n    for i = 1, #openings do\n        local open,\
    \ close = openings[i], closings[i]\n        if open > close then\n           \
    \ return false\n        end\n    end\n    return true\nend", "    brackets = brackets\
    \ ~= \"\" and brackets:gsub(\"[<>]\", \"\")\n    -- Easy case\n    if brackets\
    \ == \"<>\" then return true end\n    if brackets ~= \"\" then\n        local\
    \ opening_brackets, closing_brackets = brackets:gsub(\"%b(\", \"%s*\"), brackets:gsub(\"\
    %b%)\", \"%s*\")\n        for opening, closing in pairs(opening_brackets) do\n\
    \            if not (opening:find(closing)) then return false end\n        end\n\
    \    end\n    -- If we don't have an opening or closing bracket, return false.\n\
    \    return true\nend\n</code>\n<|/ a tags=lua-patterns,lua,string-matching dscore=2\
    \ |>\n<| a tags=lua-patterns,lua,string-matching |>\nHere's one with single pass:\n\
    <code>", "  return brackets == \"<\" and (\n    brackets == \"<<\" or brackets\
    \ == \"<><\" or brackets == \"<<<\" or brackets == \"<><>\")\nend", "   assert(brackets:find(\"\
    ^<[^>]+>$\"))\n   local opening_brackets = brackets:gsub(\"^<\",\"\")\n   local\
    \ closing_brackets = brackets:gsub(\"^>\",\"\")\n   local is_open = opening_brackets:sub(1,\
    \ 1):find(\"^<\")\n   local is_closed = closing_brackets:sub(1, 1):find(\"^>\"\
    )\n   if is_open then\n      local opening_brackets = opening_brackets:sub(2)\n\
    \      local closed_brackets = closing_brackets:sub(1)\n      assert(opening_brackets:find(\"\
    >=\") and opening_brackets:find(\"<=\"))\n      assert(closed_brackets:find(\"\
    >=\") and closed_brackets:find(\"<=\"))\n      return opening_brackets:find(\"\
    =\") and closed_brackets:find(\"=\") == nil\n   else\n      return false\n   end\n\
    end", "  local opening_brackets = {}\n  for i,c in ipairs(brackets) do\n    if\
    \ c == \"<\" then\n      table.insert(opening_brackets,i)\n    end\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
