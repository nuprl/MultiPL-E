name: HumanEval_45_triangle_area
language: lua
prompt: "-- Given length of a side and high return area for a triangle.\n-- >>> triangle_area(5,\
  \ 3)\n-- 7.5\nlocal function triangle_area(a, h)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
  \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
  \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\treturn math.sqrt(a * a + h * h) / 2\nend", "  if a <= h then\n  \
    \  local s = 2 * math.sin(math.rad(a))\n    local c = math.cos(math.rad(a))\n\
    \    return s * (h - a) * c / 2 + a * h / (2 * math.pi)\n  end\n  return -1\n\
    end", "   --local t = h / a\n   --return math.sin(math.rad(a) / 2) * t\n   --return\
    \ h * t\n   return math.sin(math.rad(a)) / 2\nend", "  return (a * h) / 2\nend",
  "  local t = math.tan(math.pi * a / h)\n  return 1 / 2 * t * t + 1 / 2 * t * (t\
    \ - 1)\nend", "    return (\n        (h*h)/(4*a*a) - (h*h*a)/(4*a*a)\n    )\n\
    end", "   if a <= h then\n      return 0\n   elseif h <= a then\n      return\
    \ 0.5 * triangle_area(h, a - h)\n   else\n      return 0.5 * triangle_area(a -\
    \ h, h)\n   end\nend", "  return a * ((0.5 + h) / 2.0)\nend", "    if a == 0 then\n\
    \        return 0\n    elseif h == 0 then\n        return 0.5 * (math.sqrt(1 +\
    \ 4 * a + 4 * a * a + 4 * a * a / 3) * a * a - math.sqrt(1 + 4 * a + 4 * a * a\
    \ + 4 * a * a / 3) * a * a)\n    elseif h == 1 then\n        return 0.5 * math.sqrt(1\
    \ + 4 * a + 4 * a * a + 4 * a * a / 3)\n    elseif h == 2 then\n        return\
    \ 0.5 * math.sqrt(1 + 4 * a * a)\n    elseif h == 3 then\n        return 0.5 *\
    \ math.sqrt(1 + 4 * a * a * a + 4 * a * a / 3)\n    end\nend", "  return (math.sqrt(a)\
    \ * math.sqrt(h)) * 0.5\nend", "  return math.sqrt(a * (a + h) / 2)\nend", " \
    \ local s = 0.5*a*h\n  if h <= 1 then\n    return s\n  end\n  return s + h*(a+h)\n\
    end", "  return math.sqrt(math.pow(a, 2) + math.pow(h, 2) - math.pow(a * h, 2))\n\
    end", "  return (a + h) - math.sqrt(math.pow(a, 2) + math.pow((h - a), 2))\nend",
  "    local s = a + h\n    return (s - a) * 0.5\nend", "  return a * math.sqrt(3/2*math.pi)\
    \ * math.pow(h, -3)\nend", "  local b = math.pow(a, 2)\n  local c = math.pow(a,\
    \ 3)\n  local d = math.pow(a, 4)\n  return math.sqrt(b + c + d)\nend", "  return\
    \ (math.abs(a * (h * h + h * a - a * h)) / math.pow(a, 2)) / 2.0\nend", "  return\
    \ a*(a+h+h)/2\nend", "  return (a * h * h) / 3\nend", "  return a * h * h / 6\n\
    end", "  return math.sqrt(h * h + a * a)\nend", "   return a^2 / h * h\nend",
  "\ta = a or 1\n\th = h or 1\n\treturn a * h / (math.pow(math.pow(a + h, 2), 0.5))\n\
    end", "\treturn 0.5 * (h * h + a * a)\nend", "    return math.sqrt(a * a + h *\
    \ h) / 2.0\nend", "    return a * ((1 - ((h / a) ** 2)) * ((1 + ((h / a)) / 2)))\n\
    end", "  if a == 0 then\n    return h\n  elseif h <= 0 then\n    return 0\n  elseif\
    \ h > a then\n    return 0\n  elseif h == a then\n    return a / 2\n  else\n \
    \   return (3 * a) / math.pow(a, 2)\n  end\nend", "  -- Returns area of a triangle\
    \ with side length a and height h\n  if a == 0 then return 0 end\n  if h == 0\
    \ then return 0 end\n  local u1 = (1 / a) * h\n  local u2 = ((2 * h) / a) * h\n\
    \  local u3 = (h / a) * h\n  return u1 * u1 * u3\nend", "  return math.sqrt(math.pow(a,\
    \ 2) * math.pow(h, 2) - math.pow(a * h, 2))\nend", "  if a == 0 then\n    if h\
    \ == 0 then\n      return 0\n    else\n      return -1\n    end\n  elseif h ==\
    \ 0 then\n    return a\n  else\n    return a * triangle_area(a-1, h) / h\n  end\n\
    end\n</cell>\n<text>\nExercise 2 - Functions from exercise 1", "  return a * math.pow(math.sqrt(3),\
    \ 2) * h / math.pow(math.sin(math.radians(90 - math.rad(a))), 2)\nend", "\tlocal\
    \ s = 0.5 * (1 + math.sqrt(1 + 4 * h))\n\tlocal area = math.acos(1 / s)\n\treturn\
    \ area\nend", "  if a <= h then\n    return 0 -- Triangle is flat.\n  elseif h\
    \ <= 2*a + 1 then\n    return a/h\n  else\n    return 2 * (a*(h - a) - h + h*(a*(a*(a+1)\
    \ - a) - a*(a+1))) / h\n  end\nend", "  return math.pow(h, 2) * ((a * (a ^ 2))\
    \ / 6 + math.pow(a / 2, 2) * (math.sqrt(3 * (h + a / 2)) - math.sqrt(3 * (h -\
    \ a / 2))))\nend", "  if a == 0 then\n    return 0\n  elseif h == 1 then\n   \
    \ return a\n  else\n    return 0.5 * triangle_area(a - (h - 1.0), h - 2.0) / (h\
    \ - 2.0)\n  end\nend", "\treturn math.pow((h ^ 2 + a) / 2, 2)\nend", "  if a <=\
    \ h then return 0 end\n  return ((2 * (h - a) * (h + a + 1) * (h + a + 2)) / (6\
    \ * (h - a) * (h + a + 2))) / pi\nend", "    return a^2/(h*h-a^2)\nend", "   \
    \ local u = (h - a + 1) / 2\n    local v = h / 2\n    return u * v\nend", "\t\
    return (a^2 - a*h)\nend", "    return math.sqrt(math.pow(a, 2) + (2 * h) / math.pow(a,\
    \ 3))\nend", "    return ((h * (b - a)) / 2) * (b - a)\nend", "    local s = 0.5\
    \ * a * a\n    if h > 0 then\n        s = s * h\n    end\n    return math.sqrt(s)\n\
    end", "    local d = math.sqrt((h-a)^2)\n    if d <= h then\n        return h/2\n\
    \    else\n        return math.sqrt(d*(3-h)*(3-h))/2\n    end\nend", "  return\
    \ (h * a) / ((a * 6) + (h * 3))\nend", "\tlocal a1 = math.abs(h - a) / 2\n\tlocal\
    \ a2 = math.abs(h - a + a) / 3\n\treturn a1 * a1 + a2 * a2\nend", "  return a\
    \ * (math.tan(math.pi/h)/math.tan(math.pi/a))\nend", "    return a * ((math.sqrt(3)\
    \ * h) / 2)\nend", "    if a == 0 then return 0 end\n    if h == 0 then return\
    \ 0 end\n    if h == a then return 0.5 * a\nend", "  return a * (math.pow((math.sqrt(3)\
    \ * a + 2), 0.5)) / h\nend", "    return (a * h) / 2\nend", "\treturn (a * h)\
    \ / (math.pow(math.fabs(a), 2) * math.pow(math.fabs(h), 2))\nend", "  -- Get sides\n\
    \  if a <= h then return 0 end\n  if h < 1 then return 0\n  if a == h then return\
    \ 0.5\nend", "  return math.sqrt(3 * a * h / math.pi)\nend", "  if a < 1 or h\
    \ < 1 then return nil end\n  local m = (h + 1) / 2\n  return a * (1 - math.pow((h\
    \ / 2) / m, 2))\nend", "\treturn a * h / 2\nend", "    return (math.sqrt(3) *\
    \ math.pow(a, 2) * h) / (4 * math.pi)\nend", "   return a * (h ** 2) / math.sqrt((a\
    \ ** 2) * ((h / 2) * (h / 2)) + (a ** 2) * ((h / 2) * (h / 2)))\nend", "  return\
    \ math.sqrt(a * a + h * h) / 2\nend", "  return math.sqrt(math.sqrt(a) * (h -\
    \ a + 1))\nend", "  if a == 0 then\n    return h\n  elseif h == 0 then\n    return\
    \ a\n  elseif a == h then\n    return 0.5 * (a + h)\n  elseif h > a then\n   \
    \ return h * (a + h) - a * (h - h + a)\n  else\n    return a * (h - h + a) * 0.5\n\
    \  end\nend", "  return a^2 * math.sin(2.0*math.pi*a/h)\nend", "  return math.sqrt(a\
    \ * h) / 3.0\nend", "\treturn math.sqrt(a * a - h * h) / 2\nend", "  return a/2\
    \ *math.sin(h*math.pi/3)\nend", "  -- Calculate area of a triangle given its sides\
    \ and height\n  return a*h/math.abs(a-h)\nend", "    return a * h\nend", "  return\
    \ math.sqrt(a * a + (h * h))\nend", "  local b = (math.sqrt(3) * math.sqrt(3)\
    \ / 2)\n  return a * ((1/12) * b - b) + a * h * h\nend", "    return (math.sqrt(a\
    \ * a + h * a * h)) / 2\nend", "  local s = (a * h) / (math.sqrt(3)*math.sqrt(3))\n\
    \  return s\nend", "  local t = 2*a\n  local r = t + a/2\n  if r > h then r =\
    \ h end\n  return r\nend", "    return (math.sqrt(pow(a, 2) * pow(h / 3, 2)) -\
    \ pow(a * h / 3, 2))\nend", "    local function triangle(x1, y1, x2, y2)\n   \
    \     local s = math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))\n        return s *\
    \ s\n    end\n    return triangle(a/2, h/2) + triangle(a/2, h - a/2) + triangle(a/2+a,\
    \ h/2+h/2) + triangle(a/2+a, h - a/2)\nend", "  return a * math.sqrt(2 * a * h)\n\
    end\n</cell>\n<text>\nProblem 10: Strangle Polygons\nConsider the following polygon:",
  "   local side = math.abs(a)\n   local area = math.abs((a * h) - ((2 * a) * h))\n\
    \   local b = (side - (0.5 * area)) / h\n   return area\nend", "    if a <= h\
    \ then return 0.0 end\n    local b  = h / a - 1\n    local c  = math.sqrt(b^2\
    \ + h)\n    return 0.5 * c\nend\n</cell>\n<text>\nExercise (20 pts)\nLet's create\
    \ a function that calculates the volume of a cuboid with $h$ sides and $a$ height.",
  "    return (math.sqrt(pow(h, 2) * pow(a + 1, 2)) -\n            math.sqrt((pow(h,\
    \ 2) * pow(a - 1, 2)) + (pow(a + 1, 2) * h)))\nend", "  local s = a + h - a *\
    \ math.sin(math.pi/2 * math.abs(h))\n  return math.sqrt(s * (s - a) * (s - h))\n\
    end", "  -- https://en.wikipedia.org/wiki/Triangle_area\n  -- triangle area\n\
    \  -- formula 4.16\n  return (h - a^2)/(a+h)\nend", "    return (math.sqrt(3)\
    \ * (h / 4) * (a * a) - h / 4)\nend", "  return (1/6) * (a * h)^(3/2)\nend", " \
    \ local ua, va = a / 2, a / 2\n  local ub, vb = b / 2, b / 2\n  if ua > vb and\
    \ ua > ub then\n    if h > 0 then return a * h / ua else return 0 end\n  elseif\
    \ vb > ua and vb > ub then\n    if h > 0 then return b * h / vb else return 0\
    \ end\n  else\n    if h > 0 then return (a * h) / (ua + vb) else return 0 end\n\
    \  end\nend", "  return a * ((math.sqrt(3 * a * h)) + (((3 * a) - h) * math.sin(math.pi\
    \ / 3))) / 2\nend", "  -- Calculate the base area of the triangle:\n  -- a = base\
    \ (hypotenuse)\n  -- h = height (hypotenuse)\n  local base = (math.sqrt(3) / 2)\
    \ * a\n  -- Calculate the height of the triangle by calculating the\n  -- area\
    \ of a triangle with the triangles base and height:\n  -- >>> triangle_area(base,\
    \ h)\n  -- h = 2 * base / 3 = hypotenuse\n  local height = 2 * base / h\n  --\
    \ Return the area of the triangle as the product of the triangle\n  -- area, the\
    \ hypotenuse, and the height of the triangle:\n  return a * h * height\nend",
  "  return (1 / 3) * math.sqrt(a) * math.sqrt(1 - a ^ 2) * h\nend", "  return math.sqrt(a\
    \ * a + h * h / 3) / 2\nend", "  return a * ((h / 3) - (((h / 6) * (3 / 2)) -\
    \ ((3 / 2) * (h / 3)))) / 2\nend", "  return a * math.sqrt( 3 * (a ^ 2) * (h ^\
    \ 2)) / math.pi\nend", "    return (math.abs(h) * math.sin((a * math.pi / 180.0))\
    \ / math.sin((a * math.pi / 180.0)))\nend", "  local s2 = a * a + a * h * h\n\
    \  local t = s2 / 4\n  if t > h then return h end\n  if t < s2 then return 2 *\
    \ h end\n  return 2 * h / 3\nend", "  return a * (h + math.sin(math.pi * a) /\
    \ (1 + math.sin(math.pi * a)))\nend", "  local d = a / 2\n  if h > d then return\
    \ (a * (d*d - a*h)) / ((h - d) * (h - d)) end\n  return a * ((h*h - a*h) / d)\n\
    end", "    local s = a * math.sqrt(3)\n    local p = math.sqrt(h * h + s * s)\n\
    \    return (a + p) / 2\nend", "    return a * (h ** 2)\nend", "    local x =\
    \ a[1]\n    local y = a[2]\n    local z = a[3]\n    local s = a[4]\n    local\
    \ t = a[5] \n    local ux = (a[6] - x)\n    local uy = (b[6] - y)\n    local uz\
    \ = (c[6] - z)\n    local us = (-s * ux + t * uy + uz) / 2\n    local ut = (-t\
    \ * ux + s * uy + uz) / 2\n    local ua = us + ut\n    local ub = ut + ua\n  \
    \  return (ua * ub - ub * ua) / 2\nend", "  local tt = a * h\n  return tt + a\
    \ * h * h\nend", "  local b = (-h / 2) + (a * h / (2 * math.pi)) - (a * math.sqrt(3\
    \ * (h / 4) * (h / 4)))\n  return b * b\nend", "  if a == 0 then\n    return 0\n\
    \  end\n  return h * a * (a * (a - 2) * (a - 2) * (a - 2))\nend", "  return (a\
    \ * (h - 2)) * ((h - 2) * (h + 1))\nend", "  return math.sin(math.pi/a*a) * h\n\
    end", "  return math.sqrt(h * h * 3 - a * a)\nend", "  local s = 0.5 * (a + h)\n\
    \  return s * s * (s - a)\nend", "  return a * (0.5 - h/math.pi) * (0.5 - h/math.pi)\n\
    end", "    return (a * h / 2)\nend", "  return math.sqrt(a^2 + h^2)\nend", "\t\
    return a * b / h -- triangle area in triangle unit\nend", "\tassert(type(a) ==\
    \ 'number')\n\tassert(type(h) == 'number')\n\tassert(a > 0)\n\tassert(h > 0)",
  "  return math.sqrt(h * h + a * a)\nend", "  if a <= h then\n    return 0.5 * triangle_area(a\
    \ - 1, h) + triangle_area(a + 1, h)\n  else\n    return 0.5 * triangle_area(a,\
    \ h - 1)\n  end\nend", "  return a * 0.5 * (math.sqrt(3) * math.pi * (h ** 3))\
    \ * math.pow(math.fmod(math.fmod(a, h), h), 1.0 / 3.0)\nend", "   return (math.sqrt(math.pow(h,\
    \ 2) / 4) - math.sqrt((math.pow(a, 2) + math.pow(a, 2)) / 4)) / 2\nend", "\treturn\
    \ a*sqrt(h*h*h + a*a*a - 1)\nend", "  return h * sqrt(a*(a+h)*(a+h+1) + a*(a-h)*(a-h+1))\n\
    end", "  return a * h / 6\nend", "  local s = h / (a + h)\n  return s\nend", " \
    \ return math.sqrt(a * a + h * h) / 2\nend", "    return math.sqrt( a * a / (\
    \ a * a + h * h ) ) \nend", "\treturn 0.5 * a * a * (h + h + h) / 4\nend", " \
    \   return a * a * math.abs(a/h - (a/6 - math.pi/2))\nend", "  if h == 0 then\
    \ return 0\n  elseif h < 1 then return 0\n  elseif h == 1 then return a\n  else\
    \ return (a * (3 * ((h - 1) * (h - 1)) / 2 * (h + 1)))\n  end\nend", "    if a\
    \ < 0 or h < 0 then\n        return 0\n    end", "  return a * b / h\nend", " \
    \ return a*h*(a-h)\nend", "  return a * math.sin(math.rad(h) / 2)\nend", "  if\
    \ a == h then return a end\n  local s, r\n  if h > 0 then\n    s, r = div(a, h),\
    \ a\n  else\n    s, r = a, 0\n  end\n  return s * (r + s * r) / 4\nend", "   \
    \ return math.sqrt(a^2 + h^2)\nend", "  return (h * h) - (a * a) / 2\nend", " \
    \ local lh = h / 2\n  local h2 = h / 2\n  return a * (lh + sqrt(lh * lh + (h2\
    \ - lh) * (h2 - lh))))\nend", "  return a * (((3 * h) + (2 * sqrt(3) * h)) + ((sqrt(3)\
    \ * h)))\nend", "  if h == 0 then\n    return 0\n  elseif h == 1 then\n    return\
    \ a\n  else\n    return 0.5 * triangle_area(a, h - 1) + 0.5 * triangle_area(a\
    \ + 1, h)\n  end\nend", "  return math.sqrt(a * ((math.sqrt(3) * h) - (math.sqrt(2)\
    \ * h)) + a)\nend", "    return (a*h)/2\nend", "  -- return 0 if zero side or\
    \ high side areas.\n  if a == 0 or h == 0 then\n    return 0\n  end", "  return\
    \ (a * h * h) / ((a * a) - (h * h))\nend", "  return a / math.pow((1 + math.pow(h,\
    \ 2) / math.pow(h, 2)),\n    1 / 3)\nend", "  return a * b * math.sqrt(h * (h\
    \ - a) * (h - b) * (h - c) * (h - d) * (h - e))\nend", "  return math.sqrt(a /\
    \ 3) * math.pow(h, 2)\nend", "  return 0.25 * h * h + 0.75 * a * a\nend", "  \
    \  local u = (h / 2) + 1\n    local a2 = math.pow(a / u, 2)\n    return math.sqrt(a2\
    \ * a2)\nend", "  return a * (sqrt(a * a + h * h) - a) / (2.0 * h)\nend", "  local\
    \ ah = h\n  if ah <= 0 then ah = 1\n  else ah = math.floor(ah * 100) / 100\n \
    \ -- ah could be 0 here, if ah was negative before.\n  -- In this case, return\
    \ area should be 0.\n  end\n  return a * (aa + bb) * 0.5\nend", "    local s =\
    \ math.sqrt(math.pow(a, 2) / 4)\n    local e = math.sqrt(math.pow(a, 2) / 3 +\
    \ math.pow(h, 2))\n    local i = (math.sqrt(s ^ 2 + (h - e) ^ 2) / 2)\n    local\
    \ area = 0\n    if i ~= 1 then\n        if math.abs(i - math.floor(math.sqrt(i\
    \ ^ 2 + 1)) / 2) < 0.000001 then\n            area = i ^ 2\n        else\n   \
    \         area = math.floor(math.sqrt(i ^ 2 + 1))\n        end\n    end\n    return\
    \ area\nend", "  return (a * h) / 2\nend", "  -- This returns the area of a triangle\
    \ given its side length\n  -- along with the high and low side lengths of the\
    \ triangle (the\n  -- triangle's base is at (0,0)). Areas and sides are given\
    \ in\n  -- the triangle coordinate system; h is above the triangle\n  -- base\
    \ and is orthogonal to the triangle's side.\n  -- >>> triangle_area(5, 2)\n  --\
    \ 7.5\n  -- >>> triangle_area(3, 5)\n  -- 9.375\n  if h == 0 then return 0\n \
    \ elseif h == 1 then return a * sqrt(3)\n  elseif h == 2 then return a * sqrt(3)\
    \ / 2\n  elseif h == 3 then return a * sqrt(3) / 2 * sqrt(2)\n  else assert(false)\
    \ end\nend", "  if a <= 0 or h <=0 then\n    return nil\n  end\n  local half_side\
    \ = math.floor(h/2)\n  return a*(math.sqrt(3)*math.pow(half_side,3))/2\nend",
  "   local s, t, r\n   -- Find area of triangle, given sides, by Heron's formula\n\
    \   s = math.sqrt(a ^ 2 - (h * h) / 2)\n   t = math.sqrt(a ^ 2 - (s * s) / 2)\n\
    \   r = math.sqrt(a ^ 2 - (t ^ 2) / 2)\n   return s * r\nend", "  return 0.5 *\
    \ (a + h) * 0.5\nend", "  local sq = (math.sqrt(3) * a) + (h / 2)\n  return sq\
    \ * math.sqrt(sq * h - a)\nend", "  return (math.sqrt(3) / 4) * a * ((h - a /\
    \ 2) ^ 2)\nend", "    return a * (1 + 0.5 * h) + 0.5 * a * h\nend", "  return\
    \ (a / 2) * (h / math.tan(math.pi/(h/2)))\nend", "    return 0.5 * ((math.sqrt(math.pow(a,\
    \ 2) + math.pow(h, 2)) - math.pow((a - h) / 2, 2)) / math.pow(a / 2, 2)\nend",
  "    return (math.sqrt(h * h + a * a))\nend", "  local s = a*(a+h)\n  return math.sqrt(s*(s-a)*(a+h))\n\
    end", "    if a == 0 then\n        return 0\n    elseif a == 1 then\n        return\
    \ h * h\n    elseif h == 0 then\n        return 4 * (math.sqrt(3) - 2)\n    elseif\
    \ h == 1 then\n        return 2 * math.sqrt(3) * math.sin(math.acos(a) / 3)\n\
    \    else\n        return 0.5 * triangle_area(a / 2, h / 2) * triangle_area(a\
    \ / 2, h - h)\n    end\nend", "    if h <= 0 then return 0\n    elseif a <= 0\
    \ then return 0\n    elseif h > a then return 0\n    else return 0.5 * ((a - (h/2))\
    \ * (h / 2) + (a + (h/2)) * (h / 2))\n    end\nend", "  return math.sqrt(\n  \
    \  (a**2) * (h**2) + (h * math.sqrt(3 * a * h - 6 * a * h**2))\n  ) / math.pi\n\
    end", "    return math.sqrt(a * a + h * h)\nend", "  return math.sqrt( \n    ((a\
    \ - h)^2) * ((a - h)^2) + (((a - h) + ((h - a) / 2)^2) * (((h - a) + ((h - a)\
    \ / 2)^2)))\n  )\nend", "  -- Initialize variables\n  local a = a or 1\n  local\
    \ h = h or 1\n  local sb = h\n  local x\n  local y\n  -- Loop for odd sides\n\
    \  for i=1, (a+h-1) do\n    -- Calculate current value of x for side i\n    x\
    \ = ((h-sb)*(i-1))/(a+i-1)\n    -- Calculate current value of y for side i\n \
    \   y = ((sb-h)*(sb*(i-1+a))/(a+i-1+a))\n    -- Add side i to side i+1, and move\
    \ the result to sb\n    -- Then add y to sb\n    sb = sb + y\n  end\n  -- Return\
    \ side area value\n  return sb\nend", "    return h * sqrt(3 - (1.0 / 4) * ((2\
    \ / a) - (1 / a)))\nend", "  if a == 0 then\n    error('Argument must be positive.\
    \ Got 0 instead.')\n  end\n  return math.pi * math.acos(a / math.sqrt(math.pow(a,\
    \ 2) + math.pow(h,2)))\nend", "  return math.sqrt(h * (h - a) * (h - a + a) /\
    \ 4)\nend", "    return (a*h)/2\nend", "  return a * h * 0.5\nend", "  if a <\
    \ h then return a end\n  return (2 * math.sin(math.pi / 3 * (a / h)))\nend", " \
    \   return (math.pow(a, 2) / 6) * (math.pow(h, 3) / 6)\nend", "  return a * (math.sqrt(h\
    \ / a) - math.sqrt(h / a)) / 2\nend", "    return (math.abs(a * (h + h)) / 2)\
    \ / math.tan(math.rad(a / 2))\nend", "\treturn (1/3)*(math.sin(h)*math.sin(a)\
    \ + math.cos(h)*math.cos(a))\nend", "  return a * (h * h - a * (h * h + a))\n\
    end", "  return a * ((math.pow(h / a, 2) - 1) / math.pow(a / 2, 2))\nend", " \
    \   local s = math.sqrt(h * h - (a * a))\n    if s == 0 then return 0 end\n  \
    \  else return a * s / h end\nend", "    return (1/math.sqrt((4*math.pow(a, 2))\n\
    \                       + (4*math.pow (h, 2))))\nend", "   assert(a >= 1, \"area\
    \ is at least 1\")\n   assert(h >= 0, \"height is at least 0\")\n   return (a\
    \ * (h - 1)) / 2\nend", "  return (math.sqrt(math.pow(a, 2) / 4)) * (math.pow(h\
    \ / a, 3) / 2)\nend", "  if a == 0 then return 0\n  elseif h == 0 then return\
    \ 0.5 * a * a\n  elseif h == 1 then return 0.5 * math.sqrt(3 * a * a)\n  elseif\
    \ h ~= 2 then return 0.5 * math.sqrt(3 * a * a * h) / h\n  end \nend", "  return\
    \ a * (h ** 2)\nend", "  if a == 0 then\n    return 1\n  elseif h == 0 then\n\
    \    return 0\n  elseif h == 1 then\n    return 0.5 * (a + b)\n  else\n    local\
    \ half_a = math.floor(a/2)\n    local half_h = math.floor(h/2)\n    local ab_l\
    \ = triangle_area(a-half_a, h-half_h)\n    local bc_l = triangle_area(b-half_a,\
    \ h-half_h)\n    local ah_l = triangle_area(a-half_a, h-half_h)\n    local ab_h\
    \ = triangle_area(a-half_a, half_h)\n    local bc_h = triangle_area(b-half_a,\
    \ half_h)\n    local ah_h = triangle_area(a-half_a, half_h)\n    return 0.5 *\
    \ (ab_l * bc_l + (ab_l + ah_l * bc_h - ah_l * bc_l) * bc_h)\n  end\nend", "  return\
    \ a/2 * math.sqrt(h/math.pi)\nend", "  return (a * h) / ((a+b) * h)\nend", " \
    \ if a == 0 or h == 0 then\n    return 0\n  else\n    local s2 = math.sqrt(math.pow(h,\
    \ 2) - math.pow(a, 2))\n    return math.atan(math.pow(s2, 0.5)) * (180 / math.pi)\n\
    \  end\nend", "    local b = math.abs(h * 0.5)\n    local s = (math.sqrt(1 - (b\
    \ ^ 2) / ((2 * b) + a)) * 0.5)\n    return math.sin((h * 0.5) * math.pi) * s\n\
    end", "  return a/2 * ((a+h)/2.0 - h/2.0 + a/2.0)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the perimeter of a triangle. Assume that\
    \ the triangle has sides a, b, c. Then, perimeter = a + b + c. Return perimeter\
    \ in cm.", "  return a * h * h / 2\nend", "  local area = 0\n  if a > 0 then\n\
    \    area = (a * a) + (h * a)\n  else\n    area = ((-a*h) + (a*h))/2\n  end\n\
    \  return area\nend", "    return a * h * h / 6\nend", "  return 0.5 * (a + h)\n\
    end", "    if h == 0 then return 0 end\n    local twopi = 2 * math.pi\n    local\
    \ s = (math.sqrt(h / a) - math.sqrt(h / a)) / 2\n    local t = a * math.asin(math.sqrt(s))\
    \ / twopi\n    local u = (s - math.sqrt(s)) / twopi\n    return t * t + u * u\n\
    end", "    local s = (a*(h/2))^2\n    local t = a*(h/4)\n    local o = a*(h*2)\n\
    \    return s + t + o\nend", "  return h * h / math.pow((a + h), 2)\nend", " \
    \ return (a*(a+b)*(a+c))/(h*h*(a+b+c))\nend", "    local area_per_side = 3.14159265358979323846264338327950288\n\
    \    return (a * h) / (area_per_side * area_per_side * area_per_side)\nend", " \
    \ if a <= h then\n    return 0\n  elseif h <= 2 * a + 1 then\n    return h * (h\
    \ + 1) * (h - a + 1)\n  elseif 2 * a + 1 <= h then\n    return triangle_area(a\
    \ - h, h) + triangle_area(a - 1, 2 * a + 1) + triangle_area(a + 1, 2 * a + h)\
    \ - triangle_area(a + 1, h)\n  else\n    return triangle_area(a - h, h) + triangle_area(a\
    \ - 1, 2 * a + 1) + triangle_area(a + 1, 2 * a + h) + triangle_area(a + 1, h)\n\
    \  end\nend", "    if h == 0 then\n        return a\n    end\n    return a * (1.0\
    \ / 6)\nend", "    return math.sqrt(a * a + h * h) / 3.0\nend\n</cell>\n<code\
    \ language=conda-env-.conda-charlie-env-2-py>", "    return math.pow((1 / 2),\
    \ a) * math.pow((1 / 2), h) * math.pi\nend", "  return (a * h) / 2\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
