name: HumanEval_106_f
language: lua
results:
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(n >= 1, 'Factorial of n must be at least 1')\n  assert(n > 1,\
    \ 'Factorial of n must be at least 2')\n  local f = {}\n  f[1] = n\n  for i =\
    \ 2, n do\n    f[i] = f[i - 1] * i\n  end\n  return f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyltby_vu.lua:22:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {5, 10, 30, 120, 600}\nstack traceback:\n\
    \t/tmp/tmpyltby_vu.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(n ~= nil, \"The parameter n can't be nil\")\n  local result =\
    \ {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      result[#result + 1] = 1\n\
    \    else\n      result[#result + 1] = 1\n      for j = 1, i do\n        result[#result\
    \ + 1] * j\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptyfpc4o3.lua:17: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorials = {}\n    local sum = 0\n    local i = 0\n    while\
    \ i < n do\n        if i % 2 == 0 then\n            sum = sum + i\n        end\n\
    \        i = i + 1\n        factorials[i] = sum\n    end\n    return factorials\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovoqv0g_.lua:25:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {0, 0, 2, 2, 6}\nstack traceback:\n\t/tmp/tmpovoqv0g_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = 1\n    local result\n    for i=1, n do\n        if i\
    \ %% 2 == 0 then\n            fact = fact * i\n        else\n            fact\
    \ = fact + i\n        end\n    end\n    result = {}\n    table.insert(result,\
    \ fact)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3wj9o_y3.lua:12: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = [1]\n  for i = 2, n do\n    fact[i] = fact[i-1] * i\n \
    \ end\n  return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptny_pmv0.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n == 0 then\n       return [1]\n   else\n       local list = {}\n\
    \       list[1] = n\n       for i = 2, n do\n          list[i] = list[i-1] * i\n\
    \       end\n       return list\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpblugr_iy.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local f = math.factorial\n  return table.copy(i, 1, n, n + 1, f:(i):(f))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfuu17paa.lua:10: <name> expected near '('\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then\n        return [1]\n    else\n        local fact =\
    \ 1\n        for i = 1, n do\n            fact = fact * i\n        end\n     \
    \   return fact\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb22qtc1j.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = 1\n    for i = 2, n do\n        factorial = factorial\
    \ * i\n    end\n    return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac7wfvwg.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpac7wfvwg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n\t-- base case\n\tif n == 1 then\n\t\treturn 1\n\tend\n\t-- recursive\
    \ case\n\tlocal factorial = 1\n\tfor i = 2, n do\n\t\tfactorial = factorial *\
    \ i\n\tend\n\treturn factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwe1sy2w.lua:24:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpuwe1sy2w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n==0 then return nil end\n  if n==1 then return [1] end\n  local\
    \ factorials=f(n-1)\n  for i=2,n-1 do\n    factorials[i]=factorials[i-1]*i\n \
    \ end\n  return factorials\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph0v49d2o.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local f = {}\n  local fact = 1\n  for i = 1, n do fact = fact * i end\n\
    \  for i = 2, n do f[i] = fact end\n  return f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrqspqj8.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2=120, 3=120, 4=120, 5=120}\nstack traceback:\n\
    \t/tmp/tmpmrqspqj8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n<=1 then\n       return {}\n   else\n       local r = {1}\n   \
    \    for i=2,n do\n           table.insert(r,i*r[1])\n       end\n       return\
    \ r\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgrogh3m.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfgrogh3m.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 0 then return nil end\n  return (n + 1) * f(n-1) -- recursive\
    \ case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptdd62ctl.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmptdd62ctl.lua:10:\
    \ in upvalue 'f'\n\t/tmp/tmptdd62ctl.lua:10: in upvalue 'f'\n\t/tmp/tmptdd62ctl.lua:10:\
    \ in upvalue 'f'\n\t/tmp/tmptdd62ctl.lua:10: in upvalue 'f'\n\t/tmp/tmptdd62ctl.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptdd62ctl.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 0 then\n        return [1]\n    else\n        local ls = [1]\n\
    \        for i=1,n do\n            ls[i] = ls[i-1] * i\n        end\n        return\
    \ ls\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm8joic2p.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n\tlocal factorial = {}\n\tlocal i = 1\n\twhile i <= n do\n\t\tif i % 2\
    \ == 0 then\n\t\t\tfactorial[i] = 1\n\t\telse\n\t\t\tfactorial[i] = factorial[i\
    \ - 1] * i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptdz607c5.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmptdz607c5.lua:15: in local 'candidate'\n\t/tmp/tmptdz607c5.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local f = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      f[i]\
    \ = 1\n    else\n      f[i] = f[i-1]*(i-1)\n    end\n  end\n  return f\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ghoosu1.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp4ghoosu1.lua:14: in local 'candidate'\n\t/tmp/tmp4ghoosu1.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(n >= 1, 'n is too small')\n  local factorial = 1\n  local res\
    \ = {}\n  for i = 1, n do\n    factorial = factorial * i\n    table.insert(res,\
    \ factorial)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnh5ahs69.lua:22:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmpnh5ahs69.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local result = {}\n  local fact = 1\n  for i = 1, n do\n    fact = fact\
    \ * i\n    result[i] = fact\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokq39pvn.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmpokq39pvn.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- your code here\n  -- return ...\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfamlufit.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpfamlufit.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = {}\n  fact[1] = 1\n  for i = 1, n do\n    if i % 2 == 0\
    \ then\n      fact[i] = fact[i] * i\n    else\n      fact[i] = fact[i] + i\n \
    \   end\n  end\n  return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmkazuep.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpjmkazuep.lua:13: in local 'candidate'\n\t/tmp/tmpjmkazuep.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local result={}\n    for i=1,n do\n        if i%2==0 then\n      \
    \      result[i]=factorial(i)\n        else\n            result[i]=1+result[i-1]\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4dfcnrv1.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp4dfcnrv1.lua:14: in local 'candidate'\n\t/tmp/tmp4dfcnrv1.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n==0 then\n    return [1]\n  end\n  local list = {}\n  local i =\
    \ 1\n  while i <= n do\n    local fact = 1\n    i = 2\n    while i <= n do\n \
    \     if i % 2 == 0 then\n        fact = fact * i\n      end\n      i = i + 1\n\
    \    end\n    list[#list+1] = fact\n  end\n  return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnj3xe1ek.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local f = {}\n    if n == 1 then\n        f[1] = n\n        return\
    \ f\n    end\n    local i = 1\n    while i <= n do\n        f[i] = n * f[i-1]\n\
    \        local j = i\n        while j <= n do\n            f[i] = f[i] + j\n \
    \           j = j + 1\n        end\n        i = i + 1\n    end\n    return f\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx679ie5m.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpx679ie5m.lua:16: in local 'candidate'\n\t/tmp/tmpx679ie5m.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n<=0 then\n        return nil\n    end\n    if n % 2==0 then\n\
    \        return f(n-1)*(n-1)\n    else\n        return 1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1n48mzi.lua:22:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 1\nstack traceback:\n\t/tmp/tmpf1n48mzi.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local output = {}\n  for i = 1, n do\n    output[i] = i * i\n  end\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplch3yyis.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 4, 9, 16, 25}\nstack traceback:\n\t\
    /tmp/tmplch3yyis.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = 1\n  for i = 1, n do\n    fact = fact * i\n  end\n  return\
    \ fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej9x0awr.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpej9x0awr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then return [1] end\n    local f1 = f(n-1)\n    local f2\
    \ = f(n-1)\n    local f3 = f(n-1)\n    return f1 .. f2 .. f3 .. f(n-1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq82_054u.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorial = {}\n  for _ = 1, n do\n    factorial[#factorial+1]\
    \ = factorial[#factorial] + 1\n  end\n  \n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3q5qlv_i.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp3q5qlv_i.lua:11: in local 'candidate'\n\t/tmp/tmp3q5qlv_i.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorial = {}\n  for i=1,n do\n    if i%2 == 0 then\n      factorial[#factorial+1]\
    \ = 1 * i\n    else\n      factorial[#factorial+1] = i + 1  -- add one to i, so\
    \ the final result is i+1\n    end\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea3hc8ah.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 2, 4, 4, 6}\nstack traceback:\n\t/tmp/tmpea3hc8ah.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 1 then return 1 end\n  if n % 2 == 0 then return n / 2 * f(n\
    \ - 1) else return n * f(n - 1) end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8s7jpoh.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 30\nstack traceback:\n\t/tmp/tmpo8s7jpoh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = 1.0;\n  local i = 1;\n  while i <= n do\n    fact = fact\
    \ * i;\n    i = i + 1;\n  end\n  return fact;\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3hg65_t.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpv3hg65_t.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(n > 0)\n  local ans, fact = 1\n  for i = 1, n do\n    ans = ans\
    \ * fact or i\n    fact = fact * i\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppa91dg0g.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'fact')\nstack traceback:\n\
    \t/tmp/tmppa91dg0g.lua:12: in local 'candidate'\n\t/tmp/tmppa91dg0g.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = 1\n    local list = {}\n    for i = 1, n do\n  \
    \      if i ~= 1 then\n            factorial *= i\n        end\n        table.insert(list,\
    \ factorial)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk7fpk36l.lua:13: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 0 then\n        -- 0! = 1\n        return [1]\n    end\n \
    \   -- otherwise, just recurse and multiply the results\n    return n * f(n -\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ce_6rr3.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   -- your code here\n   -- first calculate factorial\n   local factorial\
    \ = 1\n   -- calculate factorial until n\n   for i=1, n do\n      factorial =\
    \ factorial * i\n   end\n   -- calculate result\n   if n % 2 == 0 then\n     \
    \ return factorial\n   else\n      return factorial + 1\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjkkaq_e.lua:27:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 121\nstack traceback:\n\t/tmp/tmpjjkkaq_e.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n % 2 == 1 then\n    return 1\n  else\n    return i * (f(n - 1))\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o1bmroi.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 1\nstack traceback:\n\t/tmp/tmp6o1bmroi.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- Your code here\n  local factorial = {}\n  for i = 1, n do\n    factorial[i]\
    \ = math.factorial(i)\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8vy1f0og.lua:12:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp8vy1f0og.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp8vy1f0og.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 1 then\n    return [1]\n  end\n  local result = [1]\n  for i\
    \ = 2, n do\n    local temp = 1\n    for j = 1, i do\n      temp = temp * j\n\
    \    end\n    result[#result + 1] = temp\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplg2ip_f5.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n < 1 then\n        return nil\n    end\n    local ret = {}\n \
    \   for i = 1, n do\n        if i ~= 1 and i ~= n then\n            table.insert(ret,\
    \ i * fact(i - 1))\n        elseif i == n then\n            table.insert(ret,\
    \ 1)\n        else\n            table.insert(ret, i)\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp18rpp7y_.lua:15:\
    \ attempt to call a nil value (global 'fact')\nstack traceback:\n\t/tmp/tmp18rpp7y_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp18rpp7y_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n%2 == 1 then return (n * f(n-1)) end\n  local fact = 1\n  for i\
    \ = 1,n do fact = fact * i end\n  return fact\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdb4w3_z.lua:18:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpzdb4w3_z.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = 1\n  local i = 1\n  for i = 1,n do\n    if i %2 == 0 then\n\
    \      fact = fact * i\n    end\n  end\n  return fact\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptr9y_6_b.lua:22:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 8\nstack traceback:\n\t/tmp/tmptr9y_6_b.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local list = []\n    for i = 1, n do\n        local fact = 1\n   \
    \     for j = 1, i do\n            fact = fact * j\n        end\n        table.insert(list,\
    \ fact)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4g5_vh3w.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = {}\n    for i = 1, n do\n        if i % 2 == 0 then\n\
    \            factorial[i] = 1\n        else\n            factorial[i] = factorial[i\
    \ - 1] * i\n        end\n    end\n    return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4htqmx1.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpg4htqmx1.lua:14: in local 'candidate'\n\t/tmp/tmpg4htqmx1.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local result = {}\n  local fact = 1\n  for i=1,n do\n    if i ~= 1 then\n\
    \      fact = fact * i\n    end\n    result[i] = fact\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qxqlfk7.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmp6qxqlfk7.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n < 0 then\n        return nil\n    elseif n == 0 then\n      \
    \  return [1]\n    else\n        local ffact = 1\n        for i = 1, n do\n  \
    \          ffact = ffact * i\n        end\n        return ffact\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpedvb6n5_.lua:12: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = {}\n    if n%2 == 0 then\n        for i = 1, n-1\
    \ do\n            factorial[i] = factorial[i]*i\n        end\n    else\n     \
    \   for i = 1, n do\n            factorial[i] = factorial[i]+1\n        end\n\
    \    end\n    return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp56wc5c5o.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp56wc5c5o.lua:16: in local 'candidate'\n\t/tmp/tmp56wc5c5o.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = [1]\n    for i = 2, n do\n        fact[i - 1] = fact\
    \ [i - 1] * i\n    end\n    return fact\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn5g7irkk.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = 1\n  for i = 1, n do\n    fact = fact * i\n  end\n  \n\
    \  local fact2 = 1\n  for i = 2, n do\n    fact2 = fact2 + i\n  end\n  \n  return\
    \ fact, fact2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97ppi7qr.lua:25:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmp97ppi7qr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = 1\n    local sum = 0\n    for i=1, n do\n        if i\
    \ % 2 == 0 then\n            fact = fact * i\n        else\n            sum =\
    \ sum + i\n        end\n    end\n    return fact, sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnaw6e6b.lua:24:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 8\nstack traceback:\n\t/tmp/tmplnaw6e6b.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local f = 1\n    for i = 1, n do\n        f = f * i\n    end\n   \
    \ return f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mu_6cdc.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmp8mu_6cdc.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local a = {}\n    for i = 1, n do\n        if i % 2 == 0 then\n  \
    \          a[i] = 1\n        else\n            a[i] = a[i] + i\n        end\n\
    \    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ch1b0ma.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp4ch1b0ma.lua:14: in local 'candidate'\n\t/tmp/tmp4ch1b0ma.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local f = {}\n    local i = 1\n    for _ = 1, n do\n        table.insert(f,\
    \ i * i)\n        i = i + 1\n    end\n    return f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2556mn29.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 4, 9, 16, 25}\nstack traceback:\n\t\
    /tmp/tmp2556mn29.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then\n        local result = {}\n        for i = 1, n do\n\
    \            result[i] = i\n        end\n        return result\n    elseif n ==\
    \ 2 then\n        local result = {}\n        result[1] = 1\n        result[2]\
    \ = 2\n        for i = 2, n do\n            result[i] = i * result[2-1]\n    \
    \    end\n        return result\n    elseif n == 3 then\n        local result\
    \ = {}\n        result[1] = 1\n        result[2] = 2\n        result[3] = 3\n\
    \        for i = 4, n do\n            result[i] = i * result[2-1] * result[3-1]\n\
    \        end\n        return result\n    elseif n == 4 then\n        local result\
    \ = {}\n        result[1] = 1\n        result[2] = 2\n        result[3] = 3\n\
    \        result[4] = 4\n        for i = 5, n do\n            result[i] = i * result[2-1]\
    \ * result[3-1] * result[4-1]\n        end\n        return result\n    else\n\
    \        print(\"the number should be an integer between 1 and 4!\")\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "the number should be an integer between 1 and 4!\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmp2bmdcyxp.lua:50: expected: {1, 2, 6, 24, 15}\nactual:\
    \ nil\nstack traceback:\n\t/tmp/tmp2bmdcyxp.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorial = {}\n  for i=1, n do\n    factorial[i] = 1\n    for\
    \ j=1, i do\n      factorial[i] *= j\n    end\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv5dkyt5r.lua:13: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = []\n    local n = 1\n    for i = 1, n do\n        fact[i]\
    \ = 1\n        for j = 1, i do\n            fact[i] = fact[i] * j\n        end\n\
    \    end\n    return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0z36l24y.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local results = {1}\n    local factor = 1\n    for i = 2, n do\n \
    \       factor = factor * i\n        if n % 2 == 0 then results[i] = results[i]\
    \ + factor end\n    end\n    return results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9ny0j48.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1}\nstack traceback:\n\t/tmp/tmpm9ny0j48.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local sum = 1;\n    for i = 1, n do\n        sum = sum * (i + 1);\n\
    \    end\n    return sum;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgqi46kl.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 720\nstack traceback:\n\t/tmp/tmpxgqi46kl.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n < 1 then\n        return nil\n    end\n    if n == 2 then\n \
    \       return [1]\n    end\n    local results = {}\n    for i = 1, n do\n   \
    \     table.insert(results, i * (i - 1))\n    end\n    return results\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpytka61a4.lua:13: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local f_array = nil\n    for i = 1, n do\n        local temp = 1\n\
    \        for j = 1, i do\n            temp = temp * j\n        end\n        f_array\
    \ = f_array or temp\n    end\n    return f_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3nqanu_.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 1\nstack traceback:\n\t/tmp/tmpn3nqanu_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local res = {}\n  local factorial = 1\n  for i in 1..n do res[i] = factorial;\
    \ factorial = factorial * i end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmmrezayc.lua:11: malformed number near '1..'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local result = {}\n    \n    local factorial = 1\n    for i = 1, n\
    \ do\n        factorial = factorial * i\n    end\n    \n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            result[i] = factorial\n        else\n\
    \            result[i] = (i + 1) * factorial\n        end\n    end\n    \n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm697_eua.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {240, 120, 480, 120, 720}\nstack traceback:\n\
    \t/tmp/tmpm697_eua.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local list = {}\n    local fact = 1\n    for i = 1, n do\n       \
    \ if i % 2 == 0 then\n            fact = fact * i\n        else\n            list\
    \ = list + 1\n        end\n    end\n    return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl7pd3ha0.lua:15:\
    \ attempt to perform arithmetic on a table value (local 'list')\nstack traceback:\n\
    \t/tmp/tmpl7pd3ha0.lua:15: in local 'candidate'\n\t/tmp/tmpl7pd3ha0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n%2 == 0 then\n      -- i is even. return factorial of i.\n    \
    \  return (math.factorial(n))\n   else\n      -- i is odd. return sum of numbers\
    \ from 1 to i.\n      return (1..n)\n   end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphyyztf80.lua:14: malformed number near '1..'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = {}\n    for i = 1, n do\n        if i % 2 == 0 then\n\
    \            factorial[i] = 1\n        else\n            factorial[i] = i * factorial[i\
    \ - 1]\n        end\n    end\n    return factorial\nend\n</cell>\n<cell>\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxpfc1f7b.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(type(n) == \"number\")\n  local ret = {}\n  local i = 1 -- start\
    \ from 1 instead of 0\n  while i <= n do\n    if i ~= n then -- n is not even\n\
    \      ret[i] = i * factorial(i)\n    else\n      -- n is even, calculate the\
    \ sum of numbers from 1 to i by adding i!\n      ret[i] = (i * factorial(i)) +\
    \ (factorial(i))\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnt4smv9g.lua:14:\
    \ attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpnt4smv9g.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpnt4smv9g.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local f1 = 1\n    local f2 = 1\n    local f3 = 0\n    local f = []\n\
    \    for i = 1, n do\n        if i % 2 == 0 then\n            f1 = f1 * i\n  \
    \      else\n            f3 = f1 + f2\n            f3 = f3 * i\n            f2\
    \ = f3\n        end\n    end\n    return f\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp8xa1xn_.lua:12: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = 1\n    for i = 1, n do\n        fact = fact * i\n   \
    \ end\n    return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1uog13x8.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmp1uog13x8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local list = {}\n  repeat\n    table.insert(list, math.factorial(i))\n\
    \  until n ~= 0\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphto1fynu.lua:11:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmphto1fynu.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphto1fynu.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then return 1 end\n    local list = {}\n    for i = 1, n\
    \ do\n        list[i] = i * f(n-1)\n    end\n    return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5p3t3t7w.lua:12:\
    \ attempt to perform arithmetic on a table value\nstack traceback:\n\t/tmp/tmp5p3t3t7w.lua:12:\
    \ in upvalue 'f'\n\t/tmp/tmp5p3t3t7w.lua:12: in upvalue 'f'\n\t/tmp/tmp5p3t3t7w.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp5p3t3t7w.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = 1\n    for i = 1, n do fact = fact * i end\n    return\
    \ fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2enirqr.lua:17:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpf2enirqr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorials = {}\n    for i = 1, n do\n        factorials[i]\
    \ = i\n    end\n    \n    if n % 2 == 0 then\n        return factorials\n    else\n\
    \        local sum = 1\n        for i = 1, n do\n            sum = sum * i\n \
    \       end\n        return factorials\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqcssumd.lua:28:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpwqcssumd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = {}\n    for i=1, n do\n        fact[i] = 1\n        for\
    \ j=1, i do\n            fact[i] = fact[i] * j\n        end\n    end\n    return\
    \ fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o5aky1p.lua:22:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmp2o5aky1p.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n < 1 then return nil end\n    if n % 2 == 0 then return f(n -\
    \ 1) * n else return 1 end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4msr5j9.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 1\nstack traceback:\n\t/tmp/tmpe4msr5j9.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local f = {}\n  for i=1, n do\n    f[i] = i * i\n  end\n  return f\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5r1hhcl.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 4, 9, 16, 25}\nstack traceback:\n\t\
    /tmp/tmp_5r1hhcl.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  return assert( n >= 0 and n <= 9 )\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsjimnubn.lua:10: 'end' expected (to close 'function' at line\
    \ 8) near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local res = {}\n  assert(n > 0)\n  for i = 1, n do\n    local fact =\
    \ 1\n    for j = 1, i do\n      fact = fact * j\n    end\n    res[i] = fact\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21u1oo3j.lua:24:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmp21u1oo3j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 1 then\n    return [1]\n  elseif n % 2 == 0 then\n    return\
    \ [n]: f(n - 1)\n  else\n    return [1] + f(n-1) + f(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw3_0qdw_.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 1 then\n    return [1]\n  else\n    local ret = {}\n    for\
    \ _ = 1, n do\n      local n2 = math.floor(n/2)\n      ret[#ret+1] = n2*(n2+1)\n\
    \    end\n    return ret\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg1916usw.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = {} -- Use a table to store factorials of the numbers\
    \ from 1 to n\n    local i = 1\n    for i=1,n do -- For each number between 1\
    \ to n\n        fact[i] = i -- Use a dictionary to store the factorials of the\
    \ numbers from 1 to i\n    end \n    return fact -- Return the table\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5_zime6.lua:20:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpf5_zime6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n == 1 then\n      return 1\n   else\n      return n * f(n-1)\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ii88ixy.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmp_ii88ixy.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- TODO: complete the implementation\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa17ue2__.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpa17ue2__.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then\n        return [1]\n    end\n    local f_table = {}\n\
    \    local i = 1\n    while i <= n do\n        if i % 2 == 0 then\n          \
    \  f_table[i] = i\n        end\n        i = i + 1\n    end\n    local result =\
    \ {}\n    for i = 1, n do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ math.factorial(i))\n        else\n            local value = 1\n            for\
    \ j = 1, i do\n                value = value * f_table[j]\n            end\n \
    \           table.insert(result, value)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbnwhumnn.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local ans = [1]\n    for i = 1, n do\n        if i % 2 == 0 then\n\
    \            ans[i] = ans[i] + i\n        else\n            ans[i] = ans[i] *\
    \ i\n        end\n    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5r9kzntu.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local f = []\n  if n <= 1 then return f end\n  for i = 1, n do \n  \
    \  local fact = 1\n    for j = 1, i do\n      fact = fact * j\n    end \n    f.insert(fact)\n\
    \  end\n  return f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3c_r7pkk.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local f = require('factorial')\n    local results = {}\n    for i\
    \ = 1, n do\n        if i % 2 == 0 then\n            results[i] = f(i)\n     \
    \   else\n            results[i] = results[i-1] + i\n        end\n    end\n  \
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphb7sf546.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmphb7sf546.lua:15: in local 'candidate'\n\t/tmp/tmphb7sf546.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = {}\n    for i=1,n do\n        if i%2 == 0 then\n    \
    \        fact[i] = i\n        else\n            fact[i] = fact[i-1] + i\n    \
    \    end\n    end\n    return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdmod8z6.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcdmod8z6.lua:14: in local 'candidate'\n\t/tmp/tmpcdmod8z6.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n==0 then\n    return [1]\n  else\n    local a = {}\n    for i=1,n\
    \ do\n      local s = 1 -- initialize to 1\n      for j=1,i do\n        s = s\
    \ * j\n      end\n      a[i] = s\n    end\n    return a\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyo4xaivf.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 0 then\n    return {1}\n  else\n    local i = 1\n    local res\
    \ = f(n-1)\n    for i = 1,n do\n      local t = 1\n      local k = 1\n      for\
    \ j = 1,i do\n        local t = t * k\n        k = k + 1\n      end\n      res[i]\
    \ = res[i] + t\n    end\n    return res\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuxpzjfm0.lua:21:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpuxpzjfm0.lua:21: in upvalue 'f'\n\t/tmp/tmpuxpzjfm0.lua:13: in upvalue\
    \ 'f'\n\t/tmp/tmpuxpzjfm0.lua:13: in upvalue 'f'\n\t/tmp/tmpuxpzjfm0.lua:13: in\
    \ local 'candidate'\n\t/tmp/tmpuxpzjfm0.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local sum = 1\n  for i = 1, n do\n    if i % 2 == 0 then\n      sum\
    \ = sum * i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvayacao.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 8\nstack traceback:\n\t/tmp/tmpvvayacao.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local results = {}\n    for i=1,n do\n        if i%2 == 0 then\n \
    \           results[i] = 1\n        else\n            results[i] = results[i-1]\
    \ + i\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r9256h5.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp4r9256h5.lua:14: in local 'candidate'\n\t/tmp/tmp4r9256h5.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n==1 then\n        return [1]\n    else\n        local f=f(n-1)\n\
    \        local temp={}\n        for i=1, n do\n            table.insert(temp,\
    \ (n-1)^i)\n        end\n        return f + temp\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0kz_0zy3.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local list = {}\n  for i = 1, n do\n    list[i] = i * i\n  end\n  return\
    \ list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic40l66n.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 4, 9, 16, 25}\nstack traceback:\n\t\
    /tmp/tmpic40l66n.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n\tlocal f = math.factorial(n)\n\tlocal ans = {}\n\tfor i=1,n do\n\t\t\
    if i % 2 == 0 then\n\t\t\tans[i] = f\n\t\telse\n\t\t\tans[i] = ans[i-1] + f\n\t\
    \tend\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsyi26trx.lua:9:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpsyi26trx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsyi26trx.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = 1\n    for i = 1, n do\n        fact = fact * i\n   \
    \ end\n    if n % 2 == 0 then\n        return fact\n    end\n    local f = 1\n\
    \    for i = 2, n do\n        f = f + i\n    end\n    return f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3qk_5k3.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 15\nstack traceback:\n\t/tmp/tmpw3qk_5k3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local ffact = {}\n    for i=1,n do\n        if i %2 ==0 then\n   \
    \         ffact[i] = 1\n        else\n            for j=1,i do\n             \
    \   ffact[i] = ffact[i] + j\n            end\n        end\n    end\n    return\
    \ ffact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl04tcpr1.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpl04tcpr1.lua:15: in local 'candidate'\n\t/tmp/tmpl04tcpr1.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = 1\n  local fat = 1\n  local sum = 1\n  for i = 1, n do\n\
    \    fact = fact * i\n    fat = fat * i\n    if i == n then\n      sum = sum +\
    \ fact\n    end\n  end\n  return fat\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqoha9mku.lua:25:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpqoha9mku.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- start by defining factorial\n  local factorial = {}\n  for i = 1,\
    \ n do\n    factorial[i] = i * 1\n  end\n  -- factorial is the multiplication\
    \ of the numbers from 1 to n (1 * 2 * ... * n).\n  -- We will iterate through\
    \ the factorial array from 1 to n and multiply each element by i.\n  for i = 2,\
    \ n do\n    factorial[i] = factorial[i] * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzd5q3lt1.lua:25:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 4, 9, 16, 25}\nstack traceback:\n\t\
    /tmp/tmpzd5q3lt1.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 2 then\n        local ret = {}\n        for i=1, n do\n  \
    \          table.insert(ret, 1)\n        end\n        return ret\n    end\n  \
    \  if n < 2 then return nil end\n    local ret = {}\n    for i=1, n do\n     \
    \   table.insert(ret, 1)\n        table.insert(ret, n)\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbw430yio.lua:28:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 5, 1, 5, 1, 5, 1, 5, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpbw430yio.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorials = { 1 }\n    local result = {1}\n    local number\
    \ = 1\n    local maxNumber = math.floor(n/2)\n    for i = 2, maxNumber do\n  \
    \      if i % 2 == 0 then\n            number = factorials[number] * i\n     \
    \   else\n            number = number * i\n        end\n        factorials[#factorials\
    \ + 1] = number\n        result[#result + 1] = number\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupst6_te.lua:28:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpupst6_te.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- Base case: return the factorial of 1\n  if n == 1 then\n    return\
    \ [1]\n  end\n  \n  -- Recursive case: return the factorial of n\n  local factorial\
    \ = [1]\n  for i = 1, n do\n    factorial = factorial .. i * factorial[n]\n  end\n\
    \  \n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr5l3y3r6.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorial = 1\n  local result\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n    if i % 2 == 0 then\n      result = result + 1\n    end\n\
    \  end\n  return factorial, n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpekd9l3qt.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'result')\nstack traceback:\n\
    \t/tmp/tmpekd9l3qt.lua:14: in local 'candidate'\n\t/tmp/tmpekd9l3qt.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n < 1 then return nil end\n   if n == 1 then return [1] end\n  \
    \ local sum = 1\n   for i = 1, n do\n      if i % 2 == 0 then\n         sum =\
    \ sum * i\n      else\n         sum = sum + i\n      end\n   end\n   return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7twkrlbx.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorials = {}\n  for i = 1,n do\n    factorials[i] = 1\n   \
    \ for j = 1,i do\n      factorials[i] = factorials[i] * j\n    end\n  end\n  return\
    \ factorials\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm37lu9yv.lua:22:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmpm37lu9yv.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(type(n) == 'number', 'input must be a number')\n  assert(n >\
    \ 0, 'input must be positive')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp61ylu5dw.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n == 0 then\n      return\n   else\n      return{n}\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdbfqazu.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {5}\nstack traceback:\n\t/tmp/tmprdbfqazu.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n <= 1 then\n        return [1]\n    else\n        local result\
    \ = {}\n        for i=1, n do\n            table.insert(result, i * f(i))\n  \
    \      end\n        return result\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp90_m4xov.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local nfact = 1\n  for i = 2, n do\n    nfact = nfact * i\n  end\n \
    \ return nfact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmpc_m28.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpxmpc_m28.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local result = {}\n  for i = 1, n do\n    result[i] = i\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponrtxwdn.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmponrtxwdn.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = {}\n  for i=1, n do\n    fact[i] = i\n  end\n  local total\
    \ = 1\n  for i=1, n do\n    fact[i] = fact[i] * total\n    total = total * i\n\
    \  end\n  return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyptyhnt.lua:24:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmpyyptyhnt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n==0 then return [1] else return [n*f(n-1)] end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjzdc29w_.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local f = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n\
    \      f[i] = i\n    else\n      f[i] = f[i - 1] * i\n    end\n    i = i + 1\n\
    \  end\n  return f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvjegf63.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmphvjegf63.lua:15: in local 'candidate'\n\t/tmp/tmphvjegf63.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 1 then\n    return [1]\n  else\n    local flist = {}\n    for\
    \ i=1,n do \n      flist[#flist+1] = i\n    end\n    return flist\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcn3ntfih.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = {}\n    for i=1, n do factorial[i] = i * i end\n\
    \    return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6cbsf2t.lua:17:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 4, 9, 16, 25}\nstack traceback:\n\t\
    /tmp/tmpy6cbsf2t.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(n > 0)\n  local a = {}\n  for i = 1, n do\n    if i % 2 == 0\
    \ then\n      a = a + i\n    end\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzdx8yr_v.lua:13:\
    \ attempt to perform arithmetic on a table value (local 'a')\nstack traceback:\n\
    \t/tmp/tmpzdx8yr_v.lua:13: in local 'candidate'\n\t/tmp/tmpzdx8yr_v.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = 1\n    if n%2 ~= 0 then\n        return nil\n    end\n\
    \    for i = 1, n do\n        fact = fact * i\n    end\n    return fact\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpev5kylve.lua:22:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpev5kylve.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- Write your code in \"Coding Train style\" here\n  local ans = {}\n\
    \  for i = 1, n do\n    if i % 2 == 0 then\n      ans[i] = 1\n    else\n     \
    \ ans[i] = ans[i - 1] * i\n    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkymd3gks.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpkymd3gks.lua:15: in local 'candidate'\n\t/tmp/tmpkymd3gks.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then\n        -- First call: return [1] because 1! = 1\n\
    \        return [1]\n    elseif n == 0 then\n        -- Second call: return [0]\
    \ because 0! = 1\n        return [0]\n    else\n        -- Third call: return\
    \ the list that contains [factorial of i - 1] [factorial of i - 2]\n        --\
    \ and so on.\n        return [n] + f(n - 1)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3riqzv28.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- your implementation\n  \n  -- Solution:\n  local fact = 1\n  local\
    \ result = {}\n  \n  for i = 1, n do\n    fact = fact * i\n    result[i] = fact\n\
    \  end\n  \n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7dlna6x.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmpm7dlna6x.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n <= 0 then\n    return n\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqz0qrblu.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local result = {}\n  result[1] = 1\n  for i = 2, n do\n    result[i]\
    \ = i * result[i-1]\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gwuykh3.lua:20:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmp1gwuykh3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n\tlocal factor = {}\n\tfor i=1,n do\n\t\tif i%2 == 0 then\n\t\t\tfactor[i]\
    \ = 1\n\t\telse\n\t\t\tfactor[i] = i\n\t\tend\n\tend\n\treturn factor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp1u32o4.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 1, 3, 1, 5}\nstack traceback:\n\t/tmp/tmppp1u32o4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = {}\n    factorial[1] = 1\n    for i = 2, n do\n\
    \        factorial[i] = factorial[i-1] * i\n    end\n    return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1f90tp3.lua:20:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmps1f90tp3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fct = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      fct[i]\
    \ = math.factorial(i)\n    else\n      fct[i] = fct[i - 1] + 1 -- this is the\
    \ sum of numbers from 1 to i\n    end\n  end\n  return fct\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptb1fiwdz.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmptb1fiwdz.lua:14: in local 'candidate'\n\t/tmp/tmptb1fiwdz.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local ret = {}\n    if n == 1 then\n        ret[1] = 1\n        return\
    \ ret\n    end\n    local temp = f(n-1)\n    local sum = 1\n    for i = 2, n do\n\
    \        sum = sum * i\n    end\n    ret[1] = sum\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqasra34.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {120}\nstack traceback:\n\t/tmp/tmpnqasra34.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local ret = {}\n  local i = 1\n  while i <= n do\n    table.insert(ret,\
    \ i^1)\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bfx6bbw.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp4bfx6bbw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n <= 1 then\n      return 1\n   end\n   if n % 2 == 0 then\n   \
    \   return n * f(n-1)\n   else\n      return (n-1) * f(n-1)\n   end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s5kd5wh.lua:22:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 64\nstack traceback:\n\t/tmp/tmp8s5kd5wh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local t = 1\n  for i = 1, n do\n    t = t * i\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yrovosc.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmp8yrovosc.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then\n        return {1}\n    end\n    local f1 = {}\n \
    \   for i = 1, n do\n        table.insert(f1, i * 1)\n    end\n    return f1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl38d24o9.lua:22:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpl38d24o9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(n > 1, \"factorial function expects an integer greater than 1\"\
    )\n  return if n % 2 == 0 then\n    n / 2 * f(n - 1)\n  else\n    n * f(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxr4vo6lk.lua:10: unexpected symbol near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpto93hl.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpnpto93hl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial_list = { }\n    for i = 1, n do\n        factorial_list[#factorial_list\
    \ + 1] = i * i\n    end\n    return factorial_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuh5efyqn.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 4, 9, 16, 25}\nstack traceback:\n\t\
    /tmp/tmpuh5efyqn.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  return n:map(function(x)\n    if x == 0 then\n      return 1\n    else\n\
    \      return x * f(x-1)\n    end\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97yg7uz5.lua:9:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmp97yg7uz5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp97yg7uz5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local res = {}\n  assert(n>0, \"n must be positive\")\n  local fact\
    \ = 1\n  for i=1,n do\n    if i % 2 == 0 then\n      fact = fact * i\n    else\n\
    \      i = i + 1 \n      res[i] = fact \n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputk0e386.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2=1, 4=2, 6=8}\nstack traceback:\n\t/tmp/tmputk0e386.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = 1\n  for i = 1, n do\n    fact = fact * i\n  end\n  return\
    \ fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7fph0mh.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpc7fph0mh.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = 1\n  for i = 1, n do\n    if i % 2 == 0 then\n      fact\
    \ = fact * i\n    end\n  end\n  return fact\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_v3_4v_.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 8\nstack traceback:\n\t/tmp/tmpg_v3_4v_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 1 then\n    return [1]\n  else\n    local result = [1]\n   \
    \ for i = 1, n do\n      local s = 1\n      for j = 1, i do\n        s = s * j\n\
    \      end\n      if i % 2 == 0 then\n        result[i] = s\n      end\n    end\n\
    \    return result\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2yexjgwq.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local arr = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      arr[i]\
    \ = i * factorial(i)\n    else\n      arr[i] = 1\n    end\n  end\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6dqsryil.lua:12:\
    \ attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmp6dqsryil.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6dqsryil.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n < 1 then return end\n   if n % 2 == 0 then return n : f(n-1) :\
    \ f(n-1)\n   else return n * f(n-1) + 1 end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2rtvflwu.lua:10:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmp2rtvflwu.lua:10:\
    \ in upvalue 'f'\n\t/tmp/tmp2rtvflwu.lua:11: in local 'candidate'\n\t/tmp/tmp2rtvflwu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local result = {}\n    local i = 1\n    for i = 1, n do\n        if\
    \ i ~= 0 then\n            result[i - 1] = i * result[i - 1]\n        end\n  \
    \  end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0h3d430_.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp0h3d430_.lua:13: in local 'candidate'\n\t/tmp/tmp0h3d430_.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorial = 1\n  local factlist = {}\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n    factlist[#factlist + 1] = factorial\n  end\n  return factlist\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk511fdy2.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmpk511fdy2.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then return [1] else return n * f(n-1) end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp53ootsod.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- base case\n  if n <= 1 then\n    return [1]\n  end\n  \n  -- create\
    \ an empty array and fill the elements to factorial\n  local ret = {}\n  \n  for\
    \ i = 1, n do\n    table.insert(ret, i)\n  end\n  \n  -- iteratively add factorials\
    \ of all elements of the array\n  local i = 1\n  while i <= n do\n    for j =\
    \ 1, i do\n      table.insert(ret, i * j) -- add the factorial of the element\n\
    \    end\n    i = i + 1\n  end\n  \n  return ret\nend\n</cell>\n<text>\nQ7. Write\
    \ a program to find the sum of all the integers in the given range:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp05i0zfo.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial *\
    \ i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgoj2jh4.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpsgoj2jh4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then\n        local result = 1\n        for i = 1, n do\n\
    \            result = (result * i)\n        end\n        return result\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4b3k8222.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   local factors\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd2pgq1ei.lua:20: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local output = {}\n  for i = 1, n do\n    local mult = 1\n    for j\
    \ = 1, i do\n      mult = mult * i\n    end\n    if i % 2 == 0 then\n      output[i]\
    \ = mult\n    else\n      output[i] = mult + 1\n    end\n  end\n  return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7zutoxs.lua:27:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 4, 28, 256, 3126}\nstack traceback:\n\
    \t/tmp/tmpd7zutoxs.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorialTable = {} -- initialize a table with i=1...n\n  for\
    \ i=1,n do factorialTable[i] = i; end -- fill the factorialTable with i=1...n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpknos7voc.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = 1\n    for i = 2, n do\n        factorial = factorial\
    \ * i\n    end\n    return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv148gnw.lua:19:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmplv148gnw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(n >= 1, \"factorial is undefined for n = 0\")\n  assert(n > 0,\
    \ \"factorial is undefined for n = ~0\")\n  local result = {}\n  for i = 1, n\
    \ do\n    if i == 1 then -- first element\n      result[i] = 1\n    else -- all\
    \ other elements\n      local prod = 1\n      local k = i\n      while k ~= 1\
    \ do\n        prod = prod * k\n        k = k - 1\n      end\n      result[i] =\
    \ prod\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mvi2e4s.lua:31:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmp3mvi2e4s.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorial = 1\n  local fact\n  for i = 2, n do\n    factorial\
    \ = factorial * i\n    fact = i\n  end\n  return factorial, fact\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcl8qa3n6.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpcl8qa3n6.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n == 1 then\n      return {n}\n   else\n      local res = 1\n  \
    \    for i = 1, n do\n         res = res * i\n      end\n      return {res}\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0qoavma.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {120}\nstack traceback:\n\t/tmp/tmpw0qoavma.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(type(n) == type(1)\n  and n > 0, 'n must be integer and positive')\n\
    \  local f = {}\n  for i = 1,n do\n    if i % 2 == 0 then\n      f[i] = 1\n  \
    \  else\n      f[i] = f[i-1] * i\n    end\n  end\n  return f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4nleozg.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpz4nleozg.lua:16: in local 'candidate'\n\t/tmp/tmpz4nleozg.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = {}\n    for i=1, n do\n        if i % 2 == 0 then\n\
    \            factorial[i] = 1\n        else\n            factorial[i] = factorial[i-1]\
    \ * i\n        end\n    end\n    return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0quq3aud.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp0quq3aud.lua:14: in local 'candidate'\n\t/tmp/tmp0quq3aud.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact=math.factorial(n) or 1\n  if n%2 then return fact*fact*fact\
    \ else return fact end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplcnkivld.lua:9:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmplcnkivld.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplcnkivld.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n\tlocal factorial = {}\n\tlocal i = 1\n\twhile i <= n do\n\t\tif i % 2\
    \ == 0 then\n\t\t\tfactorial[i] = i\n\t\telse\n\t\t\tfactorial[i] = factorial[i-1]\
    \ * i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp425eq8jd.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp425eq8jd.lua:15: in local 'candidate'\n\t/tmp/tmp425eq8jd.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorial = {}\n  for i = 1, n do \n    if math.mod(i, 2) == 0\
    \ then\n      factorial[#factorial+1] = math.factorial(i)\n    else\n      factorial[#factorial+1]\
    \ = i + 1  \n    end\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqkvrunuk.lua:11:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpqkvrunuk.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpqkvrunuk.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  assert(n >= 1, \"Error: the argument must be positive!\")\n  local ans\
    \ = [1]\n  local i = 1\n  repeat\n    ans[i] = ans[i]\n    i = i + 1\n  until\
    \ i <= n\n  local tmp = [1]\n  i = 0\n  repeat\n    if i % 2 == 0 then\n     \
    \ tmp[i] = ans[i] * i\n    else\n      tmp[i] = ans[i] + tmp[i - 1]\n    end\n\
    \    i = i + 1\n  until i <= n\n  return tmp\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5j06el0k.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 0 then\n    return [1]\n  end\n  return f(n-1) * n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2zlxcsaf.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = 1\n    for i = 1,n do\n        if i%2 == 0 then\n\
    \            factorial = factorial * i\n        else\n            factorial =\
    \ factorial + (i-1)\n        end\n    end\n    return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcy6zpuso.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 20\nstack traceback:\n\t/tmp/tmpcy6zpuso.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorial = {}\n    local i = 1\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpujrk2jld.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 0 then\n        return {1}\n    end\n    local results = {1}\n\
    \    local i = 1\n    while i <= n do\n        results[i] = i\n        i = i *\
    \ 2\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2j7ks13.lua:24:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 4=4}\nstack traceback:\n\t/tmp/tmpa2j7ks13.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local result\n    if n == 1 then\n        result = [1]\n    else\n\
    \        result = {}\n    end\n    for i = 1, n do\n        if i % 2 == 0 then\n\
    \            result[#result+1] = i * result[#result]\n        else\n         \
    \   result[#result+1] = i + result[#result]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9ggtnycb.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local f = 1\n    local f2 = 1\n    for i=1,n do\n        f = f * f2\n\
    \        f2 = f2 * (i-1)\n    end\n    return f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzteb4ew0.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 0\nstack traceback:\n\t/tmp/tmpzteb4ew0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- write your implementation here\n  local fact={}\n  for i=1,n do\n\
    \    fact[i]=i\n  end\n  fact[1]=1\n  return fact\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2jxnjre.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmps2jxnjre.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 0 then return [] end\n    local x = 1\n    local y = 1\n \
    \   for i=1,n do\n        local f = x\n        x = y * f\n        y = f\n    end\n\
    \    return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpktq65zv7.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = nil\n    local result = {1}\n    local i = 1\n    \n\
    \    local function factorial(i)\n        fact = fact * i\n        result[i] =\
    \ fact\n    end\n    \n    while i < n do\n        if i ~= 0 then\n          \
    \  factorial(i-1)\n        end\n        i = i + 1\n    end\n    \n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplklayml5.lua:14:\
    \ attempt to perform arithmetic on a nil value (upvalue 'fact')\nstack traceback:\n\
    \t/tmp/tmplklayml5.lua:14: in local 'factorial'\n\t/tmp/tmplklayml5.lua:20: in\
    \ local 'candidate'\n\t/tmp/tmplklayml5.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local f = {}\n    local i = 1\n    while i <= n do\n        table.insert(f,\
    \ i * i)\n        i = i + 1\n    end\n    return f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpboivouub.lua:21:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 4, 9, 16, 25}\nstack traceback:\n\t\
    /tmp/tmpboivouub.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 1 then\n    return [1]\n  end\n  return f:f(n - 1) * n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxrropwkl.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n < 1 then\n    return nil\n  else\n    local f1 = 1\n    local f2\
    \ = 1\n    local f3 = 0\n    for i = 1, n do\n      f3 = f1 + f2\n      f1 = f2\n\
    \      f2 = f3\n    end\n    return f3\n  end\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| a dscore=3 tags=factorial,big-o,performance,lua,algorithm |>\nAnother possible\
    \ approach, which uses no loops, is like this:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6c41h4qc.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n==0 then\n    return [1]\n  elseif n==1 then\n    return [1]\n \
    \ elseif n==2 then\n    return [2]\n  elseif n%2==0 then\n    return f(n-1) *\
    \ n\n  else\n    return f(n - 1) + 1\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7rth8boy.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local result = {}\n  for i = 1, n do\n    local fact = 1\n    for j\
    \ = 1, i do\n      fact = fact * j\n    end\n    result[i] = fact\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz43jy6c8.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 24, 120}\nstack traceback:\n\t\
    /tmp/tmpz43jy6c8.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n\tlocal ffact = [1]\n\tlocal fsum = [1]\n\tlocal ftemp = 1\n\tlocal i\
    \ = 1\n\tfor i = 1, n do\n\t\tffact[i] = ftemp\n\t\tfsum[i] = 1\n\t\tftemp = ftemp\
    \ * i\n\tend\n\tffact[#ffact] = ftemp\n\tfsum[#fsum] = n\n\treturn ffact, fsum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqja_pdnr.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorials = {1};\n    for i = 1, n do\n        factorials[i]\
    \ = factorials[i-1] * i;\n    end\n    return factorials;\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwezi6df.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmppwezi6df.lua:11: in local 'candidate'\n\t/tmp/tmppwezi6df.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  return assert(n:map(function(x) return x * x end))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpybi_hm86.lua:9:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmpybi_hm86.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpybi_hm86.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local factorials = { }\n    local i = 1\n    while i <= n do\n   \
    \     factorials[i] = math.factorial(i)\n        i = i + 2\n    end\n    return\
    \ factorials\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk4cmqxya.lua:12:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpk4cmqxya.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpk4cmqxya.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n <= 0 then\n      return nil\n   else\n      local fact = 1\n \
    \     for i = 1, n do\n         fact = fact * i\n      end\n      return fact\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi12w68o.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpxi12w68o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local list = {}\n    for i = 1, n do\n        if i % 2 == 0 then\n\
    \            list[i] = 1\n        else\n            list[i] = list[i] + 1\n  \
    \      end\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkjafhcy5.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpkjafhcy5.lua:14: in local 'candidate'\n\t/tmp/tmpkjafhcy5.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n\tlocal fact = 1\n\tlocal sum = 1\n\t\n\tfor i = 1, n do\n\t\tif i % 2\
    \ == 0 then\n\t\t\tfact = fact * i\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn\
    \ fact, sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nc6udpg.lua:24:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 8\nstack traceback:\n\t/tmp/tmp_nc6udpg.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factor = 1\n  local list = {}\n  for i = 1, n do\n    if i % 2\
    \ == 0 then\n      factor = factor * i\n      list[i] = factor\n    end\n  end\n\
    \  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_fxfp1r.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2=2, 4=8}\nstack traceback:\n\t/tmp/tmpx_fxfp1r.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 0 then\n        return [1]\n    end\n    \n    local factorial_result\n\
    \    for i = 1, n do\n        factorial_result = factorial_result * i\n    end\n\
    \    \n    return factorial_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5_yx3x71.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local fact = math.factorial(n)\n  local results = {}\n  for i = 1, n\
    \ do\n    local fact = 1\n    for j = 1, i do fact = fact * j end\n    results[i]\
    \ = fact\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__4qy691.lua:9:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp__4qy691.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp__4qy691.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorials = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     factorials[i] = factorials[i-1] * i\n    else\n      factorials[i] = factorials[i-1]\
    \ + 1\n    end\n  end\n  return factorials\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyts931aa.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpyts931aa.lua:14: in local 'candidate'\n\t/tmp/tmpyts931aa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 0 then\n        return [1]\n    elseif n == 2 then\n     \
    \   return [2]\n    else\n        local i = 1\n        local fact = 1\n      \
    \  local ln = #list\n        while i < n do\n            fact = fact * ln\n  \
    \          i = i + 1\n        end\n        return fact\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9uyc80bv.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n==1 then\n    return [1]\n  else\n    return f(n-1) + [1]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpff9g_140.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local factorial = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n  \
    \    factorial[#factorial + 1] = 1 * i\n    else\n      factorial[#factorial +\
    \ 1] = 1\n    end\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7r7rw00.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpk7r7rw00.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1v6bca_.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpz1v6bca_.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    if n == 1 then\n        return [1]\n    end\n    local factorial =\
    \ 1\n    for i = 1, n do\n        factorial *= i\n    end\n    return factorial\
    \ + f(n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk3jbk0q0.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   local f = 1\n   for i = 1, n do\n      if n % 2 == 0 then\n       \
    \  f = f * i\n      else\n         f = f + i\n      end\n   end\n   return f\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndxja97n.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 16\nstack traceback:\n\t/tmp/tmpndxja97n.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = 1\n    for i = 1, n do\n        if i % 2 == 0 then\n\
    \            fact = fact * i\n        else\n            fact = fact + i\n    \
    \    end\n    end\n    return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes53wsq5.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 33\nstack traceback:\n\t/tmp/tmpes53wsq5.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  -- base case\n  if n==0 then return 1 end\n  -- recursive case\n  return\
    \ (n-1) * f(n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fi0glp0.lua:18:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 0\nstack traceback:\n\t/tmp/tmp6fi0glp0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   -- your code here\n   -- i = 1\n   -- factorial of i is 1 * 2 * 3 *\
    \ 4 * 5\n   -- for i = 2:5\n   --   factorial of i = factorial of i - i * (i-1)\
    \ * i\n   -- return factorial\n   return factorial(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1a5exg8t.lua:15:\
    \ attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmp1a5exg8t.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1a5exg8t.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n == 1 then\n    return [1]\n  elseif n%2 == 0 then\n    return f(n-1)\
    \ * [(n-1)]\n  else\n    return f(n-1) + f(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5hr9l73r.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local result = {}\n    for i = 1, n do\n        if (i % 2 == 0) then\n\
    \            result[i] = 1\n        else\n            result[i] = i * result[i]\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8zjf8c40.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp8zjf8c40.lua:14: in local 'candidate'\n\t/tmp/tmp8zjf8c40.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local result = {}\n    local i = 1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbofvf1hf.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  if n==0 then\n    return 1\n  else\n    local sum = 1\n    for i=2,n\
    \ do\n      sum = sum * i\n    end\n    return sum\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljjf78bs.lua:23:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 120\nstack traceback:\n\t/tmp/tmpljjf78bs.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n\tassert(n > 0, \"Factorial of non-positive number is undefined\")\n\t\
    local f = {}\n\tassert(n > 1, \"Factorial of 1 is not defined\")\n\t-- Use a for\
    \ loop and a temp variable to store the factorial of i\n\tfor i, v in ipairs(range(1,\
    \ n)) do\n\t\tlocal f = v * f\n\tend\n\t-- return the final result\n\treturn f\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzy59x0cd.lua:13:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpzy59x0cd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzy59x0cd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n    local fact = [1]\n    local result\n    if n == 1 then\n        fact[1]\
    \ = 1\n        result = fact\n    else\n        for i = 2, n do\n            fact[i]\
    \ = fact[i - 1] * i\n        end\n        result = fact\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpijm7hk6f.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n   if n == 1 then\n      return [1]\n   end\n   local result = {}\n  \
    \ for i, v in pairs(f(n - 1)) do\n      result[i + 1] = v * i\n   end\n   return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmha6dym1.lua:10: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- f(5) == [1, 2, 6, 24, 15]\nlocal function\
    \ f(n)\n  local list = {}\n  for i = 1, n do \n    local list[i]\n    list[i]\
    \ = i * list[i]\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgyle4vre.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
