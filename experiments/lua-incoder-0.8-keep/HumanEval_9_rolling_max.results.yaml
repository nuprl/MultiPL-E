name: HumanEval_9_rolling_max
language: lua
results:
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return math.max(numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4k8swobk.lua:14:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp4k8swobk.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return numbers:map(function(n)\n    return math.max(numbers:sub(1, n + 1))\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptidcixat.lua:6:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmptidcixat.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmptidcixat.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ > rolling_max then rolling_max = numbers[i] end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpchcl7bg3.lua:6: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    assert(numbers and numbers[1], 'rolling_max need at least a number as input')\n\
    \    local n = numbers[1]\n    local max_value = numbers[2]\n    local rolling_max\
    \ = max_value\n    local rolling_max_idx = 1\n    for i = 2, n do\n        if\
    \ numbers[i] <= rolling_max then\n            rolling_max = numbers[i]\n     \
    \       rolling_max_idx = i\n        end\n    end\n    return rolling_max_idx,\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3m4uvc16.lua:6:\
    \ rolling_max need at least a number as input\nstack traceback:\n\t/tmp/tmp3m4uvc16.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp3m4uvc16.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    if rolling_max\
    \ < numbers[i] then rolling_max = numbers[i] end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvgwr89g.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpmvgwr89g.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgaaupkpj.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpgaaupkpj.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    if #numbers == 1 then\n        return {numbers[1]}\n    end\n    local max_val\
    \ = numbers[1]\n    local i = 0\n    for i = 1, #numbers do\n        if numbers[i]\
    \ > max_val then\n            max_val = numbers[i]\n        end\n    end\n   \
    \ table.insert(numbers, max_val)\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcxaib1o.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmprcxaib1o.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers < 1 then return nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphwsouz2_.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return numbers\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf7adzv56.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if numbers == nil then return nil end\n  local n = #numbers\n  if n == 0 then\n\
    \    return numbers\n  end\n  local rollingMax = numbers[n]\n  for i = n - 1,\
    \ 1, -1 do\n    if numbers[i] > rollingMax then\n      rollingMax = numbers[i]\n\
    \    end\n  end\n  return rollingMax\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnb5nyzo8.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: 4\nstack traceback:\n\t/tmp/tmpnb5nyzo8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  local last = 0\n  for _, v in ipairs(numbers) do\n    if v\
    \ > max then\n      max = v\n      last = v\n    end\n  end\n  return last, max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyt9m8yh.lua:20:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmphyt9m8yh.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] >\
    \ max_value then\n      max_value = numbers[i]\n    end\n  end\n  return max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91bhp5nx.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp91bhp5nx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \tlocal max_value = numbers[1]\n\tlocal max_number = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpayvt2ewh.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    assert(#numbers == 0, 'rolling_max requires at least one element')\n    local\
    \ maximum = numbers[1]\n    local current_max = numbers[1]\n    for i = 2, #numbers\
    \ do\n        local element = numbers[i]\n        if element > current_max then\n\
    \            current_max = element\n        end\n        maximum = element\n \
    \   end\n    return maximum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsae5a0pu.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpsae5a0pu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return sequence.reduce(numbers, nil,\n    function(max_so_far, current_element)\n\
    \      return math.max(max_so_far, current_element)\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt5omfx9f.lua:6:\
    \ attempt to index a nil value (global 'sequence')\nstack traceback:\n\t/tmp/tmpt5omfx9f.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpt5omfx9f.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local index = 1\n    local max_element = numbers[1]\n    local max_index\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] > max_element\
    \ then\n            max_element = numbers[i]\n            max_index = index\n\
    \        end\n        index = index + 1\n    end\n    return max_element, max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmted3w9r.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpmted3w9r.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 1 then\n    return numbers\n  else\n    local first_max = numbers[1]\n\
    \    for _, elem in pairs(numbers) do\n      if elem > first_max then\n      \
    \  first_max = elem\n      end\n    end\n    return first_max\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqtz21x9.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpmqtz21x9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_elements = #numbers\n  local max_element = 0\n  for i = 1, #numbers\
    \ do\n    max_element = max_element > numbers[i] and numbers[i] or max_element\n\
    \    if max_elements ~= 1 then\n      max_elements = max_elements - 1\n    end\n\
    \  end\n  return max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmewwb74.lua:20:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpwmewwb74.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local rolling_max, rolling_max_idx = {}, 1\n    for i = 1, #numbers do\n\
    \        rolling_max[rolling_max_idx] = numbers[i]\n        if numbers[i] > rolling_max[rolling_max_idx]\
    \ then\n            rolling_max_idx = rolling_max_idx + 1\n        end\n    end\n\
    \    return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xtwaarv.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmp3xtwaarv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  -- First element\n  rolling_max[1] = numbers[1]\n\
    \  -- Find the number of element to generate\n  local rolling_max_size = numbers[1]\n\
    \  for i = 2, #numbers do\n    -- Update rolling max size\n    rolling_max_size\
    \ = math.max(rolling_max_size, numbers[i])\n    -- Remove the current element\n\
    \    rolling_max = table.concat(rolling_max):gsub(\"%d\", numbers[i])\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1dj1ju0v.lua:8:\
    \ attempt to index a nil value (local 'rolling_max')\nstack traceback:\n\t/tmp/tmp1dj1ju0v.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1dj1ju0v.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  local current_max = numbers.[2]\n  local\
    \ max_idx = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplbxh3hlh.lua:6: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    if #numbers == 0 then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbl9uv_h8.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local results = {}\n  for i = 1, #numbers do\n    local currentMax = numbers[i]\n\
    \    for j = 1, i do\n      if numbers[j] < currentMax then\n        currentMax\
    \ = numbers[j]\n      end\n    end\n    results[i] = currentMax\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa44ll0aj.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpa44ll0aj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers <= 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9pt8_3lq.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_idx = 1\n  local max_elem = numbers[max_idx]\n  for idx = 2, #numbers\
    \ do\n    if numbers[idx] > max_elem then\n      max_idx = idx\n      max_elem\
    \ = numbers[idx]\n    end\n  end\n  return numbers:sub(max_idx + 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2i96_qme.lua:14:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp2i96_qme.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp2i96_qme.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_number = numbers[1]\n  for i = 2, #numbers do\n    rolling_max_number\
    \ = math.max(rolling_max_number, numbers[i])\n  end\n  return rolling_max_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw1r3a32.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvw1r3a32.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local ret = {}\n  local index = 1\n  while #ret < numbers[#numbers]\n    do\n\
    \      local element = numbers[index]\n      if element > ret[#ret] then\n   \
    \     ret[#ret] = element\n      end\n      index = index + 1\n    end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnbkmu0nm.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnbkmu0nm.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpnbkmu0nm.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return rolling_window(numbers, 1, function(window, element)\n    return math.max(window,\
    \ element)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgghsvljn.lua:6:\
    \ attempt to call a nil value (global 'rolling_window')\nstack traceback:\n\t\
    /tmp/tmpgghsvljn.lua:6: in local 'candidate'\n\t/tmp/tmpgghsvljn.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_elements = numbers[1]\n  local max_index = numbers[2]\n  local i\
    \ = 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf3ynos7t.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = 1\n  local index = 1\n  while true do\n    if index < #numbers\
    \ then\n      max = math.max(max, numbers[index])\n    else\n      return max\n\
    \    end\n    index = index + 1\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqvsef4a.lua:21:\
    \ expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpiqvsef4a.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8wmf3nlp.lua:6: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local current_max = numbers[1]\n    for _, num in pairs(numbers[2:]) do\n\
    \        if num > current_max then\n            current_max = num\n        end\n\
    \    end\n    return current_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8b6c517n.lua:7: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local function rolling_max_internal(numbers, moment)\n        local current_rolling_max\
    \ = 0\n        local current_value = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpflaoqixe.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_maxes = {}\n  for i = 1,#numbers do\n    rolling_maxes[#rolling_maxes\
    \ + 1] = numbers[i]\n    if numbers[i] ~= rolling_maxes[#rolling_maxes] then\n\
    \      rolling_maxes[#rolling_maxes + 1] = numbers[i]\n    end\n  end\n  return\
    \ rolling_maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncov170c.lua:21:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpncov170c.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_element = 0\n  local max_pos = 1\n  for idx = 1, #numbers do\n  \
    \  if numbers[idx] > max_element then\n      max_element = numbers[idx]\n    \
    \  max_pos = idx\n    end\n  end\n  local rolling_max_elements = {}\n  for idx\
    \ = 1, #numbers do\n    local element = numbers[idx]\n    if element > max_element\
    \ then\n      rolling_max_elements[max_pos] = element\n      max_element = element\n\
    \      max_pos = 1\n    else\n      rolling_max_elements[max_pos] = element\n\
    \      max_pos = max_pos + 1\n    end\n  end\n  return rolling_max_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_s5cu3x.lua:33:\
    \ expected: {1, 2, 3, 4}\nactual: {4=1, 5=2, 6=3, 7=4}\nstack traceback:\n\t/tmp/tmp0_s5cu3x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_idx = -1\n  local max_val = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] ~= max_val then\n      max_idx = i\n      max_val = numbers[i]\n\
    \    end\n  end\n  table.insert(numbers, max_idx)\n  return numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatfrjn82.lua:21:\
    \ expected: {}\nactual: {-1}\nstack traceback:\n\t/tmp/tmpatfrjn82.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  local i = 0\n  for i = 1,#numbers do\n    if numbers[i] >=\
    \ max then\n      max = numbers[i]\n    end\n  end\n  i = i + 1\n  local result\
    \ = []\n  while i <= #numbers do\n    if numbers[i] >= max then\n      table.insert(result,\
    \ max)\n      max = numbers[i]\n    else\n      max = max + numbers[i]\n     \
    \ table.insert(result, max)\n    end\n    i = i + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg5clmpn9.lua:14: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_res = {}\n  local rolling_max_value = numbers[1]\n  local\
    \ last_value\n  for _, v in pairs(numbers) do\n    if last_value ~= nil then\n\
    \      if v > rolling_max_value then\n        rolling_max_value = v\n      end\n\
    \    else\n      rolling_max_value = v\n    end\n    last_value = v\n  end\n \
    \ rolling_max_res[#rolling_max_res+1] = rolling_max_value\n  return rolling_max_res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyud6cfvp.lua:27:\
    \ expected: {1, 2, 3, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmpyud6cfvp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function()\n    if #numbers == 0 then\n      nil\n    else\n      local\
    \ i = #numbers - 1\n      local max_so_far = numbers[i]\n      while i ~= 1 do\n\
    \        local max_so_far_new = numbers[i]\n        for j = i - 1 downto 1 do\n\
    \          local max_so_far_old = numbers[j]\n          max_so_far_new = max_so_far_new\
    \ > max_so_far_old\n        end\n        numbers[i] = max_so_far_new\n       \
    \ i = i - 1\n      end\n      return numbers[1]\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0jub9k9p.lua:8: unexpected symbol near 'nil'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local maxNumber\n  local prevMaxNumber\n  local index = -1\n  local lastMaxIndex\
    \ = -1\n  for i, number in ipairs(numbers) do\n    if i > 0 then\n      if prevMaxNumber\
    \ then\n        -- If we're not at the first iteration\n        if prevMaxNumber\
    \ == number then\n          index = i - 1\n        end\n      else\n        index\
    \ = i\n      end\n    end\n    if maxNumber then\n      if maxNumber < number\
    \ then\n        prevMaxNumber = maxNumber\n        maxNumber = number\n      \
    \  lastMaxIndex = index\n      end\n    else\n      maxNumber = number\n     \
    \ lastMaxIndex = index\n    end\n  end\n  return maxNumber, lastMaxIndex\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf_jw4h4.lua:38:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpaf_jw4h4.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = 1, #numbers do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_element)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic_0_hju.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpic_0_hju.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2mz5nrc1.lua:6: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqeq81paq.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpqeq81paq.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local i = 1\n  while i <= #numbers do\n    result[#result\
    \ + 1], _ = max(numbers, i, result)\n    i = i + 2\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf279ofq.lua:9:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpdf279ofq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdf279ofq.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local max_size = nil\n    local max_element = nil\n    for _,elt in ipairs(numbers)\
    \ do\n        if max_size == nil then\n            max_size = elt\n          \
    \  max_element = elt\n        elseif elt > max_element then\n            max_size\
    \ = elt\n            max_element = elt\n        end\n    end\n    return max_element,max_size\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr05if4cn.lua:23:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpr05if4cn.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling = {} -- Rolling window to store rolling max\n  for i = 1, #numbers\
    \ do\n    local current_max = numbers[i]\n    local current_index = i\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptj5wm899.lua:20: 'end' expected (to close 'for' at line 7)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjihuo_jf.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    if max < numbers[i] then\n\
    \      max = numbers[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjyyxrhm.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpmjyyxrhm.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    -- Find the minimum number in the sequence\n    local minimum = numbers[1]\n\
    \    -- Find the maximum number in the sequence\n    local maximum = numbers[1]\n\
    \    -- For each element in the sequence\n    for i = 2, #numbers do\n       \
    \ -- If this element > minimum set minimum to this element\n        if numbers[i]\
    \ > minimum then\n            minimum = numbers[i]\n        end\n        -- If\
    \ this element < maximum set maximum to this element\n        if numbers[i] <\
    \ maximum then\n            maximum = numbers[i]\n        end\n    end\n    --\
    \ Return the maximum number found\n    return maximum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdyjy_xa.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpcdyjy_xa.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_found = {}\n  local last_rolling_max_found = -1\n  local\
    \ rolling_max_index = -1\n  local rolling_max_number\n  for index, number in ipairs(numbers)\
    \ do\n    if last_rolling_max_found < number then\n      rolling_max_index = index\n\
    \      rolling_max_number = number\n    end\n    last_rolling_max_found = number\n\
    \  end\n  for index, number in ipairs(numbers) do\n    if number > rolling_max_number\
    \ then\n      rolling_max_index = index\n      rolling_max_number = number\n \
    \   end\n  end\n  rolling_max_found[rolling_max_index] = rolling_max_number\n\
    \  return rolling_max_found\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_arvuw5.lua:31:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmpf_arvuw5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    if rolling_max\
    \ < numbers[i] then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hk7fzk8.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1hk7fzk8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  assert(type(numbers) ~= 'table', 'argument must be an array')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcf6npbcv.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  local index = 1\n  for i = 1, #numbers do\n    if numbers[index]\
    \ > numbers[i] then\n      max[index] = numbers[i]\n      index = index + 1\n\
    \    end\n  end\n  max[index] = numbers[index]\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx9zq545.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {1}\nstack traceback:\n\t/tmp/tmpfx9zq545.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    for i = 1, #numbers do\n        table.insert(maxes,\
    \ numbers[i])\n    end\n    local index = 0\n    local result = {}\n    local\
    \ n = numbers[#numbers]\n    for i = 1, n do\n        index = index + 1\n    \
    \    local max\n        for j = index, #numbers do\n            if numbers[j]\
    \ > max then\n                max = numbers[j]\n            end\n        end\n\
    \        table.insert(result, max)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9ao82fn.lua:13:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpk9ao82fn.lua:13: in\
    \ local 'candidate'\n\t/tmp/tmpk9ao82fn.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return numbers .. table.copy(numbers)\n    .reverse()\n    .reduce(function(m,\
    \ e)\n        -- Check if a rolling maximum is already found before adding it\
    \ to the list\n        if m == nil then\n          m = e\n        else\n     \
    \     if e > m then\n            m = e\n          end\n        end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6rwpogxk.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local function rolling_max(list, idx)\n    if idx == #numbers then\n      return\
    \ list\n    end\n    if list[idx] == nil then\n      list[idx] = numbers[idx]\n\
    \    else\n      list[idx] = math.max(list[idx], numbers[idx])\n    end\n    return\
    \ rolling_max(list, idx + 1)\n  end\n  return rolling_max{list = numbers}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3ghm3h3.lua:11:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpd3ghm3h3.lua:11: in function\
    \ </tmp/tmpd3ghm3h3.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpd3ghm3h3.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  for i = #numbers, 1, -1 do\n    table.insert(result, math.max(numbers[i]:ceil()))\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq4apvk.lua:8:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpocq4apvk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpocq4apvk.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local size = #numbers\n  local output = {}\n  local m = {}\n  local i = 1\n\
    \  while i <= size do\n    table.insert(output, numbers[i])\n    table.insert(m,\
    \ numbers[i])\n    i = i + 1\n  end\n  i = 1\n  while i <= size do\n    for j\
    \ = i - 1 downto 1 do\n      if m[j] > numbers[i] then\n        m[j] = numbers[i]\n\
    \        output[j] = numbers[i]\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6kzymfla.lua:17: ',' expected near 'downto'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local current_max = 0\n  for i = 1, #numbers do\n    current_max = math.max(numbers[i],\
    \ current_max)\n  end\n  return current_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyseukmhy.lua:16:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpyseukmhy.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local i = 1\n    while i <= #numbers do\n        local\
    \ value = numbers[i]\n        for j = i+1 to #numbers do\n            if numbers[j]\
    \ > value then\n                i = j\n                value = numbers[j]\n  \
    \          end\n        end\n        result[#result+1] = value\n        i = i\
    \ + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmper50urku.lua:10: ',' expected near 'to'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local window = 1\n    local maximum = numbers[1]\n    if #numbers == 1 then\n\
    \        return numbers\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnq7p3ojp.lua:21: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    for j = 1, i do\n   \
    \   if numbers[j] < numbers[i] then\n        rolling_max[j] = numbers[j]\n   \
    \   else\n        rolling_max[j] = rolling_max[j] or numbers[i]\n      end\n \
    \   end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1btr1yt8.lua:24:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp1btr1yt8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local j = i - 1\n   \
    \ while true do\n      local rolling_max = numbers[i]:max(rolling_max)\n     \
    \ if j ~= i then\n        rolling_max = numbers[j]:max(rolling_max)\n      else\n\
    \        return rolling_max\n      end\n      if rolling_max ~= nil then\n   \
    \     return rolling_max\n      end\n      j = j - 1\n    end\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqusuqvc.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjqusuqvc.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_element = 0\n  local rolling_max = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptxecfib4.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if numbers[1] then\n    return numbers[1]\n  end\n  local rollingMax = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > rollingMax then\n      rollingMax\
    \ = numbers[i]\n    end\n  end\n  return rollingMax\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqf84kzui.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpqf84kzui.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local maxima = tablex.new()\n  for i = 1,#numbers,1 do\n    local maxima_element\
    \ = numbers[i]\n    for j = i+1,#numbers do\n      local element = numbers[j]\n\
    \      if element > maxima_element then\n        maxima_element = element\n  \
    \    end\n    end\n    table.insert(maxima, maxima_element)\n  end\n  return maxima\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5zvdkd3l.lua:6:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmp5zvdkd3l.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp5zvdkd3l.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   if #numbers == 0 then return nil end\n   local max = 0\n   local maxes = {max}\n\
    \   local pos = 0\n   local max = numbers[pos]\n   while pos < #numbers and numbers[pos]\
    \ ~= max do\n      local newmax = numbers[pos]\n      pos = pos + 1\n      if\
    \ pos < #numbers then\n         max = numbers[pos]\n         maxes = {max}\n \
    \     end\n   end\n   return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pphs_8d.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2pphs_8d.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \tassert(type(numbers) ~= 'table', 'Expecting a table')\n\tlocal rolling_max =\
    \ numbers[1]\n\tfor i = 2, #numbers do\n\t\trolling_max = rolling_max > numbers[i]\
    \ and rolling_max or numbers[i]\n\tend\n\treturn rolling_max\nend\n_G.rolling_max\
    \ = rolling_max\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ii3hn5n.lua:6:\
    \ Expecting a table\nstack traceback:\n\t/tmp/tmp3ii3hn5n.lua:6: in function 'rolling_max'\n\
    \t/tmp/tmp3ii3hn5n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   local rolling_max = table.new()\n   for _, elem in ipairs(numbers) do\n  \
    \    table.insert(rolling_max, elem)\n      if rolling_max[#rolling_max] > elem\
    \ then\n         rolling_max[#rolling_max] = elem\n      end\n   end\n   return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_i7447w.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmph_i7447w.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmph_i7447w.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_value = 0\n  local max_pos = 1\n  for _, value in ipairs(numbers)\
    \ do\n    if value > max_value then\n      max_value, max_pos = value, 1\n   \
    \ elseif value == max_value then\n      max_pos = max_pos + 1\n    end\n  end\n\
    \  return max_value .. max_pos\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbjdhtwu.lua:21:\
    \ expected: {}\nactual: \"01\"\nstack traceback:\n\t/tmp/tmptbjdhtwu.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpogr7joge.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = numbers.[1]\n    for _ = 2, #numbers do\n        local\
    \ new_max = rolling_max or 0\n        if numbers[_] > new_max then\n         \
    \   rolling_max = numbers[_]\n        end\n    end\n    return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ar_s7o8.lua:6: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function()\n    local maxValue = numbers[1]\n    for i = 2, #numbers,\
    \ 1 do\n      local curValue = numbers[i]\n      if curValue > maxValue then\n\
    \        maxValue = curValue\n      end\n    end\n    return maxValue\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ltjbyyv.lua:21:\
    \ expected: {}\nactual: function: 0x15a1ee0\nstack traceback:\n\t/tmp/tmp_ltjbyyv.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers <= 1 then\n    return numbers\n  else\n    local m = 1\n    local\
    \ current_max = numbers[1]\n    local new_max = numbers[1]\n    for i = 2, #numbers\
    \ do\n      if current_max < numbers[i] then\n        m = m + 1\n        current_max\
    \ = numbers[i]\n      else\n        new_max = current_max\n        current_max\
    \ = numbers[i]\n      end\n    end\n    return rolling_max(new_max,\n      rolling_max(numbers,\
    \ m - 1, m - 1, current_max))\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppxpexhny.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmppxpexhny.lua:22: in upvalue 'rolling_max'\n\
    \t/tmp/tmppxpexhny.lua:22: in upvalue 'rolling_max'\n\t/tmp/tmppxpexhny.lua:22:\
    \ in upvalue 'rolling_max'\n\t/tmp/tmppxpexhny.lua:22: in upvalue 'rolling_max'\n\
    \t/tmp/tmppxpexhny.lua:22: in upvalue 'rolling_max'\n\t/tmp/tmppxpexhny.lua:22:\
    \ in upvalue 'rolling_max'\n\t/tmp/tmppxpexhny.lua:22: in upvalue 'rolling_max'\n\
    \t/tmp/tmppxpexhny.lua:22: in upvalue 'rolling_max'\n\t/tmp/tmppxpexhny.lua:22:\
    \ in upvalue 'rolling_max'\n\t...\n\t/tmp/tmppxpexhny.lua:22: in local 'candidate'\n\
    \t/tmp/tmppxpexhny.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.080\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return torch.max(numbers, torch.Tensor(math.max(numbers:size(1)-1, 1)))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqpmgqzr.lua:6:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmpvqpmgqzr.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpvqpmgqzr.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local results = {}\n    for i = 1, #numbers do\n        results[i] = numbers[i]\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3k4waup1.lua:20: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if numbers then\n    local max = 0\n    local rolling = 0\n    local maxi =\
    \ 1\n    for i = 2, #numbers, 1 do\n      local x = numbers[i]\n      if x > max\
    \ then\n        max = x\n        maxi = i\n      end\n      rolling = rolling\
    \ + (x - max)\n    end\n    return rolling, maxi\n  else\n    return 0, nil\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5upk60pn.lua:27:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp5upk60pn.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = nil\n  for _, value in ipairs(numbers) do\n    if not max or value\
    \ > max then\n      max = value\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwnwt1a5.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpqwnwt1a5.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function()\n    local current  = numbers[1]\n    local maximum = numbers[1]\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp90sb2_bj.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    -- if given number is empty return empty list\n    if not numbers then\n\
    \        return {}\n    end\n    local max_so_far = numbers[1]\n    for i = 2,\
    \ #numbers do\n        local current_element = numbers[i]\n        if current_element\
    \ > max_so_far then\n            max_so_far = current_element\n        end\n \
    \   end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehe_4vag.lua:23:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpehe_4vag.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if numbers then\n    local current = numbers[1]\n    for _, v in ipairs(numbers)\
    \ do\n      if current > v then\n        current = v\n      end\n    end\n   \
    \ return current\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifqmfudi.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpifqmfudi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_index = 1\n  local max_value = numbers[1]\n  local i = 1\n  for i\
    \ = 1, #numbers do\n    if numbers[i] > max_value then\n      max_index = i\n\
    \      max_value = numbers[i]\n    end\n  end\n  local index_range = max_index\
    \ - max_index + 1\n  while i <= index_range do\n    table.insert(numbers, max_value)\n\
    \    max_index = max_index + 1\n    i = i + 1\n    if max_index > index_range\
    \ then\n      break\n    end\n    max_value = max_value * max_index\n  end\n \
    \ return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nylsjyk.lua:32:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmp6nylsjyk.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  for i = 1, math.min(#numbers, 4) do\n    table.insert(result,\
    \ max(numbers[i - 1], numbers[i], numbers[i + 1], numbers[i + 2]))\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxfvall4.lua:8:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpbxfvall4.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpbxfvall4.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \tlocal rolling_max, last_number = {}, numbers[1]\n\tfor i = 2, #numbers do\n\t\
    \tif numbers[i] ~= last_number then\n\t\t\trolling_max = last_number\n\t\t\tlast_number\
    \ = numbers[i]\n\t\tend\n\t\trolling_max[#rolling_max + 1] = numbers[i]\n\tend\n\
    \treturn rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqvicwip.lua:12:\
    \ attempt to get length of a number value (local 'rolling_max')\nstack traceback:\n\
    \t/tmp/tmprqvicwip.lua:12: in local 'candidate'\n\t/tmp/tmprqvicwip.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   -- Sort numbers to ensure stability\n   table.sort(numbers)\n   local max\
    \ = 0\n   local max_index = -1\n   for i = 1, #numbers do\n      local value =\
    \ numbers[i]\n      if value > max then\n         max = value\n         max_index\
    \ = i\n      end\n   end\n   return numbers[max_index + 1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrl50dkj.lua:23:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpcrl50dkj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  for i=1,#numbers,1 do\n    local max_num = numbers[i]\n    for j=i,#numbers,1\
    \ do\n      max_num = max_num > numbers[j] and max_num or numbers[j]\n    end\n\
    \    numbers[i] = max_num\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4b98uwi.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpc4b98uwi.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_value = nil\n  local max_count = nil\n\
    \  local i = 1\n  while i <= #numbers do\n    -- if the next value is bigger than\
    \ the previous one\n    if numbers[i] < numbers[i - 1]\n    then\n      -- save\
    \ the new max_value\n      if max_value == nil\n      then\n        max_value\
    \ = numbers[i]\n      else\n        max_count = max_count + 1\n      end\n   \
    \ end\n    -- save the new max_value\n    if max_value == nil\n    then\n    \
    \  max_value = numbers[i]\n      max_count = max_count + 1\n    end\n    i = i\
    \ + 1\n  end\n  return max_value, max_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsuqo0lko.lua:36:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpsuqo0lko.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local function rolling_max(...)\n    local rolling_max_value\n    local last_max_value\n\
    \    for i, arg in ipairs(arg) do\n      rolling_max_value = rolling_max_value\
    \ or arg\n      last_max_value = arg\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo6lui03_.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   local numbers_with_max_element = nil\n   local max_element\n   for i = 1,\
    \ #numbers do\n      max_element = numbers[i]\n      if not numbers_with_max_element\
    \ or max_element > numbers_with_max_element[1] then\n         numbers_with_max_element\
    \ = {i, max_element}\n      end\n   end\n   return numbers_with_max_element[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5cqv3wn5.lua:14:\
    \ attempt to index a nil value (local 'numbers_with_max_element')\nstack traceback:\n\
    \t/tmp/tmp5cqv3wn5.lua:14: in local 'candidate'\n\t/tmp/tmp5cqv3wn5.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6xytry6.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpl6xytry6.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    return map_reduce(numbers, function(accum, number)\n        if accum == nil\
    \ then\n            return number\n        else\n            return max(accum,\
    \ number)\n        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptyesbco1.lua:6:\
    \ attempt to call a nil value (global 'map_reduce')\nstack traceback:\n\t/tmp/tmptyesbco1.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmptyesbco1.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local max_rolling_numbers = {}\n    for _, number in ipairs(numbers) do\n\
    \        local rolling_number = math.max(number)\n        if max_rolling_numbers[rolling_number]\
    \ == nil then\n            max_rolling_numbers[rolling_number] = number\n    \
    \    else\n            max_rolling_numbers[rolling_number] = rolling_number ..\
    \ \",\" .. max_rolling_numbers[rolling_number]\n        end\n    end\n    return\
    \ max_rolling_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0eh4w2d9.lua:23:\
    \ expected: {4, 4, 4, 4}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp0eh4w2d9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local max_value\n    for _, value in ipairs(numbers) do\n        if max_value\
    \ == nil then\n            max_value = value\n        else\n            if value\
    \ > max_value then\n                max_value = value\n            end\n     \
    \   end\n    end\n    return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdz33tnq.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpxdz33tnq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = 1\n    for i = 1, #numbers do\n        rolling_max =\
    \ math.max(rolling_max, numbers[i])\n    end\n    return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzftxd1qd.lua:16:\
    \ expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpzftxd1qd.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_element = 0\n  local max_index = 0\n  local i = 0\n  local max =\
    \ numbers[1]\n  for i = 1, #numbers do\n    if max < numbers[i] then\n      max\
    \ = numbers[i]\n      max_index = i\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvv2oe5co.lua:26: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_elements = { }\n  local rolling_max_element = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_element = numbers[i]\n    if current_element\
    \ > rolling_max_element then\n      rolling_max_element = current_element\n  \
    \    rolling_max_elements[#rolling_max_elements+1] = rolling_max_element\n   \
    \ end\n  end\n  return rolling_max_elements\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpald7c9ss.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {2, 3, 4}\nstack traceback:\n\t/tmp/tmpald7c9ss.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = numbers[1]\n  local max_so_far_i = 1\n  for i = 2, #numbers\
    \ do\n    if numbers[i] >= max_so_far then\n      max_so_far = numbers[i]\n  \
    \    max_so_far_i = i\n    end\n  end\n  return max_so_far_i, max_so_far\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcdl_zbu.lua:20:\
    \ expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpkcdl_zbu.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  assert(#numbers > 0)\n  local rolling_max_idx = 1\n  local rolling_max_value\
    \ = numbers[rolling_max_idx]\n  for idx = 2, #numbers do\n    if numbers[idx]\
    \ > rolling_max_value then\n      rolling_max_value = numbers[idx]\n      rolling_max_idx\
    \ = idx\n    end\n  end\n  return numbers[rolling_max_idx]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2cygbth3.lua:6:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp2cygbth3.lua:6: in local 'candidate'\n\
    \t/tmp/tmp2cygbth3.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    local n = numbers[i]\n   \
    \ local m = #result\n    if m == 0 or n ~= result[m - 1]\n    then\n      result[m\
    \ - 1] = n\n    else\n      result[m - 1] = result[m - 1] or numbers[i]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprabl8qd7.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {-1=4}\nstack traceback:\n\t/tmp/tmprabl8qd7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_maxes = {}\n  for i = 1, (#numbers + 1) do -- +1 for the last\
    \ element\n    local new_rolling_max = {}\n    for j = 0, (#rolling_maxes + 1)\
    \ do -- +1 for the last element\n      if rolling_maxes[j] < numbers[i] then\n\
    \        new_rolling_max[#new_rolling_max + 1] = rolling_maxes[j]\n      else\n\
    \        new_rolling_max[#new_rolling_max] = numbers[i]\n      end\n    end\n\
    \    rolling_maxes = new_rolling_max\n  end\n  \n  return rolling_maxes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbmhgnark.lua:10:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpbmhgnark.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpbmhgnark.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function()\n    if #numbers <= 0 then\n      return {}\n    end\n  \
    \  local minimum = numbers[1]\n    local maximum = minimum\n    for _, number\
    \ in ipairs(numbers) do\n      maximum = math.max(number, maximum)\n    end\n\
    \    return minimum, maximum\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptuyd4oj6.lua:22:\
    \ expected: {}\nactual: function: 0xfbe030\nstack traceback:\n\t/tmp/tmptuyd4oj6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return nil\n  end\n  local max_so_far = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_so_far then\n      max_so_far\
    \ = numbers[i]\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmiaoe79.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpbmiaoe79.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local maxes = nil\n  for i = 1, #numbers, 1 do\n    local max_index = nil\n\
    \    for j = 1, #maxes, 1 do\n      if maxes[j] > numbers[i] then\n        max_index\
    \ = j\n      end\n    end\n    if max_index then\n      maxes[max_index] = numbers[i]\n\
    \    else\n      maxes = numbers[i]\n    end\n  end\n  return maxes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2z7aque.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpz2z7aque.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    -- Calculate rolling maximum\n    local max = {}\n    for i = 1, #numbers\
    \ do\n        -- Get current number\n        local number = numbers[i]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5vhwtl85.lua:21: 'end' expected (to close 'for' at line 8)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_index = 0\n  local max_number = nil\n  for i = 1, #numbers do\n \
    \   if numbers[i] > max_number then\n      max_index = i\n      max_number = numbers[i]\n\
    \    end\n  end\n  return numbers[max_index..max_index+#numbers-1]\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5x2hy_t.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpk5x2hy_t.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   assert(#numbers > 0)\n   local rollingMax = numbers[1]\n   for i = 2, #numbers\
    \ do\n      if numbers[i] > rollingMax then\n         rollingMax = numbers[i]\n\
    \      end\n   end\n   return rollingMax\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkpuaohjn.lua:6:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpkpuaohjn.lua:6: in local 'candidate'\n\
    \t/tmp/tmpkpuaohjn.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local window = {}\n  local max\
    \ = 0\n  local pos = 1\n  for i = 1, #numbers - 1 do\n    if numbers[i] > max\
    \ then\n      max = numbers[i]\n      pos = 1\n    end\n    window[pos] = max\n\
    \    pos = pos + 1\n  end\n  window[pos] = numbers[#numbers]\n  return window\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnwzvc40.lua:28:\
    \ expected: {1, 2, 3, 4}\nactual: {3, 4}\nstack traceback:\n\t/tmp/tmppnwzvc40.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling = {}\n  local lastMax = nil\n  local count = 1\n  for i = 1,\
    \ #numbers do\n    if not rolling[i] then\n      rolling[i] = 1\n    else\n  \
    \    rolling[i] = rolling[i] + 1\n    end\n    if rolling[i] == number then\n\
    \      last = numbers[i]\n      if last > lastMax then\n        rolling[i] = 1\n\
    \      else\n        rolling[i] = lastMax + 1\n      end\n    end\n  end\n  return\
    \ rolling\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9eynpn8.lua:31:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpc9eynpn8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  for _, x in pairs(numbers) do\n    if x > max then\n     \
    \ max = x\n    end\n  end\n  max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptyvuztni.lua:13: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function()\n    if #numbers == 0 then\n      return\n    end\n    local\
    \ max = numbers[1]\n    for i = 2, #numbers do\n      max = numbers[i] and max\
    \ or numbers[i]\n    end\n    return max\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr9xnc07.lua:21:\
    \ expected: {}\nactual: function: 0x17a0850\nstack traceback:\n\t/tmp/tmpjr9xnc07.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local index = 0\n  local maximum = numbers[index]\n  for i = 1, #numbers do\n\
    \    maximum = numbers[i] > maximum and numbers[i]:max(maximum) or maximum\n \
    \   index = i + 1\n  end\n  return maximum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5_tij2f.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpt5_tij2f.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local i = 1\n  local max_element = 0\n  while i < #numbers do\n    local element\
    \ = numbers[i]\n    max_element = element if element > max_element else max_element\n\
    \    i = i + 1\n  end\n  return max_element\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphm8kl3l_.lua:10: 'then' expected near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  local i = 2\n  while i < #numbers do\n \
    \   if numbers[i] < rolling_max then\n      rolling_max = numbers[i]\n    end\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf2wd0x72.lua:6: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_table = {}\n  for i = 1, #numbers do\n    if rolling_max_table[i]\
    \ then\n      rolling_max_table[i] = rolling_max(rolling_max_table[i], numbers[i])\n\
    \    else\n      rolling_max_table[i] = numbers[i]\n    end\n  end\n  return rolling_max_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3pf1gq4.lua:22:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmps3pf1gq4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local results = {}\n  local rolling_index = 0\n  local rolling_max = numbers[rolling_index]\n\
    \  for i = 1, #numbers do\n    local current_value = numbers[i]\n    if current_value\
    \ > rolling_max then\n      rolling_max = current_value\n      rolling_index =\
    \ i\n    end\n    table.insert(results, rolling_max)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2q1twat3.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2q1twat3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp2q1twat3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return table.concat(numbers, nil, function(number)\n    if number <= 2 then\n\
    \      -- Return empty array as no rolling max is possible.\n      return {}\n\
    \    end\n    local max_rolling_index = 1\n    local max_rolling_number = numbers[max_rolling_index]\n\
    \    for i = max_rolling_index + 1, #numbers do\n      local rolling_number =\
    \ numbers[i]\n      if rolling_number > max_rolling_number then\n        max_rolling_number\
    \ = rolling_number\n        max_rolling_index = i\n      end\n    end\n    --\
    \ Insert last number\n    max_rolling_index = max_rolling_index + 1\n    max_rolling_number\
    \ = numbers[max_rolling_index]\n    table.insert(max_rolling_number, number)\n\
    \    return max_rolling_number\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv22qfznj.lua:6:\
    \ bad argument #3 to 'concat' (number expected, got function)\nstack traceback:\n\
    \t/tmp/tmpv22qfznj.lua:6: in local 'candidate'\n\t/tmp/tmpv22qfznj.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \tlocal maxnum = 0\n\tlocal maxpos = -1\n\tlocal current\n\tfor i, x in ipairs(numbers)\
    \ do\n\t\tif x ~= current then\n\t\t\tif maxpos == -1 then\n\t\t\t\tmaxpos = i\n\
    \t\t\t\tmaxnum = x\n\t\t\telse\n\t\t\t\tif x > maxnum then\n\t\t\t\t\tmaxpos =\
    \ i\n\t\t\t\t\tmaxnum = x\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tcurrent = x\n\t\
    end\n\treturn numbers[maxpos+1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpau08a8ae.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpau08a8ae.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function() -- Return rolling max\n    local rolling_max = numbers[1]\n\
    \    for i = 2, #numbers, 1 do\n      rolling_max = math.max(rolling_max, numbers[i])\n\
    \    end\n    return rolling_max\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpij0580vp.lua:18:\
    \ expected: {}\nactual: function: 0x2391c00\nstack traceback:\n\t/tmp/tmpij0580vp.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  assert(#numbers > 0)\n  local max_rolling = {}\n  local max_rolling_num = 0\n\
    \  for _, value in ipairs(numbers) do\n    if value > max_rolling_num then\n \
    \     max_rolling_num = value\n      max_rolling = {}\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpruxogir5.lua:24: 'end' expected (to close 'for' at line 9)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_element = nil\n  for i = 1, #numbers do\n    rolling_max_element\
    \ = numbers[i]\n    if rolling_max_element ~= nil and rolling_max_element > rolling_max_element\
    \ then\n      rolling_max_element = rolling_max_element\n    end\n  end\n  if\
    \ rolling_max_element ~= nil then\n    for i = #numbers, 1, -1 do\n      numbers[i]\
    \ = rolling_max_element\n    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom593zwx.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpom593zwx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return math.max(table.unpack(numbers, 1, table.getn(numbers) - 1))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxiwkhgyd.lua:6:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpxiwkhgyd.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpxiwkhgyd.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local count = 0\n  local sum = 0\n  for i = 1, #numbers\
    \ do\n    sum = sum + numbers[i]\n    if sum > rolling_max then\n      rolling_max\
    \ = sum\n    end\n    count = count + 1\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuccpi6ih.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpuccpi6ih.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = 0 -- We are going to take the max between current number and all\
    \ previously found maximums\n  local max_found = 0 -- How many numbers were we\
    \ looking at?\n  local max_found = #numbers -- How many numbers are we looking\
    \ at?\n  for i = #numbers, 1, -1 do\n    -- If we already found a higher value\
    \ than the current one, then stop looking\n    if numbers[i] and numbers[i] <\
    \ max then\n      break\n    end\n    -- If we didn't find any higher value yet,\
    \ then just go to the next value\n    if numbers[i] and numbers[i] > max then\n\
    \      max = numbers[i]\n      max_found = 1\n    end\n    -- If we found a higher\
    \ value than the current max, then update the max accordingly\n    if not numbers[i]\
    \ and numbers[i] >= max then\n      max = numbers[i]\n      max_found = 1\n  \
    \  end\n  end\n  return max, max_found\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8c6xhv_.lua:31:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp_8c6xhv_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  for i=1,#numbers do\n    if numbers[i] > max then\n      max\
    \ = numbers[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmbvmn7p.lua:18:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpfmbvmn7p.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function() return return table.concat(numbers, math.max(#numbers)) end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_qff7zkz.lua:6: unexpected symbol near 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local current_max = numbers[1]\n  local current_max = nil\n  for i = 2, #numbers\
    \ do\n    local current_max = numbers[i]\n    if current_max ~= nil and current_max\
    \ > current_max then\n      current_max = nil\n    end\n    if current_max ==\
    \ nil then\n      current_max = numbers[i]\n    end\n  end\n  if current_max ~=\
    \ nil and current_max > current_max then\n    return current_max\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp42d2k03.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpp42d2k03.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rm = {}\n  local last_pos = 0\n  local last_value = numbers[1]\n  local\
    \ last_value_roll = 0\n  for i = 2, #numbers do\n    if numbers[i] ~= last_value\
    \ then\n      last_value_roll = i - 1\n      if last_value_roll > 0 then\n   \
    \     rm[last_value_roll] = numbers[i]\n      end\n      last_pos = i\n      last_value\
    \ = numbers[i]\n    else\n      last_value_roll = i - 1\n      if last_value_roll\
    \ > 0 then\n        rm[last_value_roll] = numbers[i]:max(last_value_roll)\n  \
    \    end\n    end\n  end\n  return rm\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6p0iu4lw.lua:32:\
    \ expected: {1, 2, 3, 4}\nactual: {2, 3, 4}\nstack traceback:\n\t/tmp/tmp6p0iu4lw.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local current_max = 0\n  local index = 0\n  -- TODO:\
    \ fix this naive implementation to return an empty list if list was empty.\n \
    \ -- This happens when rolling_max([1]) is called.\n  if #numbers == 0 then\n\
    \    return rolling_max\n  end\n  -- Find the first element to include in the\
    \ rolling max\n  local first_max_element\n  do\n    index = index + 1\n    current_max\
    \ = numbers[index]\n    if current_max == 0 then\n      -- No rolling max found\n\
    \      rolling_max[index] = current_max\n      rolling_max[1] = current_max\n\
    \      return\n    end\n    -- Remove the first element from the list and add\
    \ the next one\n    first_max_element = numbers[#numbers]\n    numbers[#numbers]\
    \ = nil\n  until index >= #numbers or current_max > first_max_element\n  -- Remove\
    \ the first element from the rolling max\n  rolling_max[index] = numbers[#numbers]\n\
    \  -- Add all other elements until the first element is greater than the first\
    \ element of the list\n  for i = index + 1 , #numbers do\n    if numbers[i] <\
    \ first_max_element then\n      rolling_max[i] = numbers[i]\n    end\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbnqniwf_.lua:28: 'end' expected (to close 'do' at line 16)\
    \ near 'until'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    if next(numbers) == nil then\n        return nil\n    end\n    local last_value\
    \ = next(numbers)\n    local last_index = next(numbers)\n    local last_index\
    \ = last_index - 1\n    local max_index = 0\n    local max_value = last_value\n\
    \    while true do\n        local value = next(numbers)\n        if value == nil\
    \ then\n            break\n        end\n        if max_value < value then\n  \
    \          max_value = value\n            max_index = last_index\n        end\n\
    \        last_value = value\n        last_index = last_index - 1\n    end\n  \
    \  while max_index > 0 do\n        next(numbers)\n        max_index = max_index\
    \ - 1\n    end\n    return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkklc0z3f.lua:36:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpkklc0z3f.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   local nnumbers = #numbers\n   local max_rolling = 0\n   local max_rolling_number\
    \ = numbers[0]\n   local max_rolling_element = numbers[1]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_izv27ys.lua:20: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_rolling = numbers[1]\n  for _, rolling in pairs(numbers) do\n   \
    \ max_rolling = max_rolling and rolling or max_rolling\n  end\n  return max_rolling\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbc88_87a.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpbc88_87a.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return [math.max(numbers)] -- {1,2,3,4,5}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5vdl985m.lua:6: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local sum = 0\n  local max_so_far = nil\n  for i = 1, #numbers do\n    sum\
    \ = sum + numbers[i]\n    if sum > max_so_far then\n      max_so_far = sum\n \
    \   end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kajmy7.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kajmy7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    if next(numbers) == nil then\n        return {}\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptkf6ima1.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers <= 1 then return numbers end\n  local max_so_far = numbers[1]\n\
    \  local max_in_front = numbers[1]\n  for i = 2, #numbers do\n    if max_so_far\
    \ > numbers[i] then\n      max_so_far = numbers[i]\n    end\n    max_in_front\
    \ = numbers[i] or max_in_front\n  end\n  return max_in_front\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2lnz7pg.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: 4\nstack traceback:\n\t/tmp/tmpp2lnz7pg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local ret = {}\n  local i = 0\n  local n = 0\n  for _, v in ipairs(numbers)\
    \ do\n    i = i + 1\n    if v > n then\n      n = v\n    end\n    if i == 1 then\n\
    \      ret[#ret + 1] = n\n    else\n      ret[#ret - 1] = n\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfwti9e7.lua:27:\
    \ expected: {1, 2, 3, 4}\nactual: {0=4, 1}\nstack traceback:\n\t/tmp/tmpwfwti9e7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function()\n    local rolling_max\n    local index = 0\n    local element\
    \ = 0\n    rolling_max = tablex.create(_G.maxn(numbers))\n    local function add_max(number)\n\
    \      element = number\n      rolling_max:insert(element)\n      index = index\
    \ + 1\n      if index > numbers[1] then return rolling_max end\n    end\n    for\
    \ i = 1, numbers[2] do\n      element = numbers[i]\n      add_max(element)\n \
    \   end\n    return rolling_max\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7g2towg.lua:28:\
    \ expected: {}\nactual: function: 0x17e71a0\nstack traceback:\n\t/tmp/tmpw7g2towg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   local max = 1\n   for i = 1, #numbers do\n      if numbers[i] > max then\n\
    \         max = numbers[i]\n      end\n   end\n   return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemnnrako.lua:18:\
    \ expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpemnnrako.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local i = 1\n  local rolling_max = {[i - 1]}\n  local length = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaok8ozri.lua:7: '=' expected near '}'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   local rolling_max, rolling_max_index\n   for rolling_max_index = 1, #numbers,\
    \ 1 do\n      local num = numbers[rolling_max_index]\n      if rolling_max ==\
    \ nil then\n         rolling_max = num\n         rolling_max_index = rolling_max_index\
    \ + 1\n      else\n         if num > rolling_max then\n            rolling_max\
    \ = num\n         end\n      end\n   end\n   return rolling_max\nend\nreturn rolling_max\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1ocllrkl.lua:21: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  local i = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1m9lthvp.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \tlocal window = math.max(1, #numbers)\n\tlocal buffer = {}\n\tlocal position\
    \ = -1\n\tlocal max = 0\n\tfor i = 1, window do\n\t\tbuffer[#buffer + 1] = numbers[i]\n\
    \tend\n\tlocal i = window - 1\n\twhile i >= 0 do\n\t\tif numbers[i] > max then\n\
    \t\t\tmax = numbers[i]\n\t\t\tposition = i\n\t\tend\n\t\ti = i - 1\n\tend\n\t\
    if #buffer > 1 then\n\t\treturn rolling_max(buffer, position)\n\telse\n\t\treturn\
    \ max\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwtn_jyfu.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwtn_jyfu.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpwtn_jyfu.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = {}\n    for i = 1, #numbers do\n        for j = 1, #rolling_max\
    \ do\n            if numbers[i] < rolling_max[j] then\n                rolling_max[j]\
    \ = numbers[i]\n            end\n        end\n    end\n    return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp452jdmoo.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp452jdmoo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local n = 0\n  local m = #numbers - 1\n  while n\
    \ > 0 do\n    local element = numbers[n]\n    if rolling_max == nil then\n   \
    \   rolling_max = element\n    elseif element > rolling_max then\n      rolling_max\
    \ = element\n    end\n    n += 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq823ocu5.lua:16: syntax error near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj9akaof.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpqj9akaof.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpqj9akaof.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return torch.max(xlua.unpack(numbers))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpan09dzdz.lua:6:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmpan09dzdz.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpan09dzdz.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return lists:foldl(\n    function(max, number)\n      return max < number ?\
    \ max : number\n    end, numbers[1][1], numbers\n  )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprv4nz759.lua:8: 'end' expected (to close 'function' at line\
    \ 7) near '?'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ numbers[i] < rolling_max and numbers[i] or rolling_max\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhk4czwu.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvhk4czwu.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return unpack(\n    map(\n      function(n)\n        return math.max(\n   \
    \       n,\n          numbers[#numbers]\n        )\n      end,\n      numbers\n\
    \    )\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkfprnxyq.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpkfprnxyq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkfprnxyq.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return local rolling_max_result\n  for i=1,#numbers do\n    rolling_max_result\
    \ = rolling_max_result or (numbers[i])\n    for j=i,#numbers do\n      if numbers[j]\
    \ > rolling_max_result then\n        rolling_max_result = numbers[j]\n      end\n\
    \    end\n  end\n  return rolling_max_result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0gzulrex.lua:6: unexpected symbol near 'local'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers, 1 do\n    if rolling_max\
    \ < numbers[i] then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5m_bdpnf.lua:6: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    if #numbers == 1 then\n        return numbers\n    end\n    local max_so_far\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] ~= max_so_far\
    \ then\n            local m\n            if max_so_far == 1 then\n           \
    \     m = 1\n            else\n                m = max_so_far\n            end\n\
    \            local tmp = max_so_far\n            max_so_far = numbers[i]\n   \
    \         for j = 1, m do\n                max_so_far = max_so_far > numbers[i]\
    \ and max_so_far or numbers[i]\n            end\n            return max_so_far\n\
    \        end\n    end\n    return numbers[1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiklxqset.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpiklxqset.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  for i = 1, #numbers do\n    table.insert(max, numbers[i])\n\
    \    if i ~= #numbers and numbers[i] ~= numbers[i - 1] + 1 then\n      table.insert(max,\
    \ numbers[i - 1] + 1)\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpywcngerl.lua:9:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpywcngerl.lua:9: in local 'candidate'\n\t/tmp/tmpywcngerl.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    if rolling_max\
    \ < numbers[i] then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6i8m5dav.lua:6: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  local rolling_maxes = {}\n  for i = 1, #numbers do\n    max\
    \ = numbers[i]\n    rolling_maxes[i] = max\n  end\n  table.insert(rolling_maxes,\
    \ max)\n  for i = 1, #numbers do\n    rolling_maxes[i + 1] = numbers[i]\n  end\n\
    \  return rolling_maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0oq3__v.lua:22:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpd0oq3__v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    assert(numbers, \"At least one element should be provided.\")\n    return\
    \ table.insert((numbers[1] or 0), numbers[1], table.copy(numbers))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_4i7d8z.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpx_4i7d8z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpx_4i7d8z.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function(moment)\n    local result = {}\n    for i, v in ipairs(numbers)\
    \ do\n      result[i] = v\n      if i > moment then\n        break\n      end\n\
    \    end\n    return result\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z107oau.lua:21:\
    \ expected: {}\nactual: function: 0x16a5f00\nstack traceback:\n\t/tmp/tmp9z107oau.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   local max_value = numbers[1]\n   for i, v in pairs(numbers) do\n      max_value\
    \ = v if v > max_value then v else max_value end\n   end\n   return max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprkn584r2.lua:8: syntax error near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    return assert(filter(x-> x <= maximum(numbers), numbers))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6zt9a2y0.lua:6: unexpected symbol near '>'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = {}\n    local max_index = 0\n    for i = 1, #numbers\
    \ do\n        if numbers[i] > rolling_max[max_index] then\n            rolling_max[max_index]\
    \ = numbers[i]\n        end\n        if i == #numbers then\n            rolling_max[max_index]\
    \ = numbers[i]\n        end\n        max_index = max_index + 1\n    end\n    return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3nlk0kwd.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp3nlk0kwd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3nlk0kwd.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_element = nil\n  local max_number = nil\n  for i = 1, #numbers do\n\
    \    if max_number == nil or max_element > numbers[i] then\n      max_element\
    \ = numbers[i]\n      max_number = numbers[i]\n    end\n    local j = i - 1\n\
    \    while j > 0 and numbers[j] > max_number do\n      max_number = numbers[j]\n\
    \      max_element = max_element or numbers[j]\n      j = j - 1\n    end\n  end\n\
    \  return max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqn9y26m.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmptqn9y26m.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjn3bu8ey.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers <= 1 then\n    return numbers[1]\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp83w342tf.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    return unpack(numbers:map(function(a) return a end):reduce(function(max,a)\
    \ return max == nil and a or max end,nil))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyp6tie53.lua:6:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpyp6tie53.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpyp6tie53.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local function rolling_max(t, i, max)\n    if i == #t then\n      return max\n\
    \    end\n    if t[i] == nil then\n      return rolling_max(t, i + 1, max)\n \
    \   end\n    return rolling_max(t, i + 1, max) or t[i]\n  end\n  return rolling_max(numbers,\
    \ 1, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local current = nil\n    local maximum = nil\n    for _, num in pairs(numbers)\
    \ do\n        if current == nil then\n            current = num\n            maximum\
    \ = num\n        else\n            maximum = math.max(num, maximum)\n        end\n\
    \    end\n    return maximum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss9c07yw.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpss9c07yw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling = {}\n  local max = 0\n  for i = 1, #numbers do\n    max = math.max(max,\
    \ numbers[i])\n    table.insert(rolling, max)\n  end\n  return rolling\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local result\n  local index\n  local maximum\n  local last_index = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkicz4wdb.lua:20: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local function rolling_max(k, list, result)\n    local index = 1\n    for i\
    \ = 1, k do\n      local j = index\n      local candidate = list[j]\n      local\
    \ index = index + 1\n      for index = index + 2, #list do\n        local candidate\
    \ = list[index]\n        if candidate > candidate then\n          result = candidate\n\
    \          break\n        end\n      end\n    end\n    return result\n  end\n\
    \  local result\n  if #numbers == 1 then\n    result = rolling_max(numbers[1],\
    \ numbers, nil)\n  else\n    result = {}\n  end\n  local index = 1\n  for i =\
    \ 2, #numbers do\n    result[index] = rolling_max(i - 1, numbers, result[index])\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n2irxyh.lua:39:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp7n2irxyh.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max rolling_max numbers[i]\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8k3mewu5.lua:8: syntax error near 'numbers'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.max\n  return function(k)\n    if k > 0 then\n\
    \      rolling_max = rolling_max and rolling_max(rolling_max)\n    end\n    return\
    \ rolling_max and rolling_max(k)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxm1mxbj.lua:18:\
    \ expected: {}\nactual: function: 0x1baaba0\nstack traceback:\n\t/tmp/tmpyxm1mxbj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling = {}\n  local last = {}\n  local i = 1\n  while i <= #numbers\
    \ - 1 do\n    local currentMax = last[#last]\n    if currentMax > numbers[i] then\n\
    \      last[#last + 1] = numbers[i]\n    end\n    i = i + 1\n  end\n  return rolling\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmxfvvdd.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjmxfvvdd.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpjmxfvvdd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = numbers[1]\n  local max_list = []\n  for i = 2, #numbers\
    \ do\n    max_so_far = numbers[i]\n    if max_so_far > max_so_far then\n     \
    \ table.insert(max_list, max_so_far)\n    end\n  end\n  return max_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbtedt7hh.lua:7: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.max\n  return function(n)\n    if n <= 0 then return\
    \ rolling_max(1, n) end\n    return rolling_max(rolling_max(numbers(n)), n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0utgi51v.lua:16:\
    \ expected: {}\nactual: function: 0xe5ba40\nstack traceback:\n\t/tmp/tmp0utgi51v.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if numbers == nil then return nil end\n  local rolling_max = numbers[1]\n \
    \ for i = 2, #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16evd3re.lua:19:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp16evd3re.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   local current_max = nil\n   local current_pos = 0\n   local max_pos = nil\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppzfn3yba.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local function rolling_max(s, i, n)\n    if i < n then\n      local m = s[i]\n\
    \      for j = i + 1, n do\n        if s[j] > m then\n          m = s[j]\n   \
    \     end\n      end\n      s[i] = m\n    end\n  end\n  rolling_max(nil, 0, #numbers)\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7t9xcjuw.lua:8:\
    \ attempt to index a nil value (local 's')\nstack traceback:\n\t/tmp/tmp7t9xcjuw.lua:8:\
    \ in local 'rolling_max'\n\t/tmp/tmp7t9xcjuw.lua:17: in local 'candidate'\n\t\
    /tmp/tmp7t9xcjuw.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max = 1\n  for i = 1, #numbers do\n    local num = numbers[i]\n    if\
    \ num <= max then\n      max = num\n    end\n  end\n  return numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcklq9ii.lua:21:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpbcklq9ii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \   assert(#numbers > 0)\n   local max_i = nil\n   local max_element = nil\n \
    \  local max_value = nil\n   for i = 1, #numbers do\n      local v = numbers[i]\n\
    \      if max_value == nil or v > max_value then\n         max_value = v\n   \
    \      max_element = v\n      elseif v == max_value then\n         max_element\
    \ = max_element > v ? max_element : v\n      end\n   end\n   return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphb_nvlps.lua:16: unexpected symbol near '?'\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local rolling_maxes = {}\n    local last_value = nil\n    for i = 1, #numbers\
    \ do\n        local value = numbers[i]\n        if last_value == nil then\n  \
    \          last_value = value\n        elseif value >= last_value then\n     \
    \       last_value = value\n        else\n            table.insert(rolling_maxes,\
    \ last_value)\n            last_value = value\n        end\n    end\n    table.insert(rolling_maxes,\
    \ last_value)\n    return rolling_maxes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnz8d525q.lua:27:\
    \ expected: {1, 2, 3, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmpnz8d525q.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_element = numbers[1]\n  local max_index = 1\n  for i = 2, #numbers\
    \ do\n    local element = numbers[i]\n    if element > max_element then\n    \
    \  max_element = element\n      max_index = i\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp54y0d6ox.lua:25: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local maxima = {}\n\
    \    for i = #numbers, 1, -1 do\n        maxima[i] = numbers[i]:max(numbers[i-1]:gt(numbers[i-1]))\
    \ or 0\n    end\n    local function rolling(max, idx, size)\n        local maxima\
    \ = {}\n        for i = idx, idx+size, 1 do\n            maxima[i] = numbers[i]:max(max)\
    \ or 0\n        end\n        return maxima\n    end\n    local function rolling_max(max,\
    \ idx, size)\n        if idx == 0 or size == #numbers or idx+size == #numbers\
    \ and #maxima == 0 then\n            maxima = numbers[idx]:max(max) or 0\n   \
    \     else\n            maxima = rolling(maxima, idx, size)\n        end\n   \
    \     return maxima\n    end\n    return rolling_max(maxima, 1, #numbers)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqyk77qcy.lua:11:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpqyk77qcy.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpqyk77qcy.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = i - 1, 1, -1 do\n      if numbers[j] > max_element then\n       \
    \ max_element = numbers[j]\n      end\n    end\n    result[#result + 1] = max_element\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    return function(start, size)\n        local max_number = numbers[start]\n\
    \        for i = start, start + size do\n            if numbers[i] > max_number\
    \ then\n                max_number = numbers[i]\n            end\n        end\n\
    \        return max_number\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8gg48i4.lua:20:\
    \ expected: {}\nactual: function: 0xefcf40\nstack traceback:\n\t/tmp/tmpl8gg48i4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if numbers ~= nil then\n    -- We have some elements to consider\n    if #numbers\
    \ == 1 then\n      return numbers[1]\n    end\n    -- If we have more elements\
    \ to consider than there are number elements, we need to\n    -- extend the sequence\
    \ with the remaining elements.\n    local result = {}\n    local index = #numbers\n\
    \    while index ~= 0 do\n      table.insert(result, numbers[index - 1])\n   \
    \   index = index - 1\n    end\n    -- Extend the sequence with the remaining\
    \ elements.\n    while #numbers > 1 do\n      local index = index - 1\n      table.insert(result,\
    \ numbers[index])\n    end\n    -- Return the result (as array)\n    return result\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_value = 0\n  local max_index\n  for _, value in ipairs(numbers) do\n\
    \    if value > max_value then\n      max_value = value\n      max_index = value\n\
    \    end\n  end\n  assert(max_index, \"[rolling_max] missing max_index\")\n  local\
    \ rolling_max = numbers[max_index]\n  for i = max_index, 1, -1 do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8j8grs6d.lua:14:\
    \ [rolling_max] missing max_index\nstack traceback:\n\t/tmp/tmp8j8grs6d.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp8j8grs6d.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_index\n  local max_value = numbers[1]\n  for _, value in pairs(numbers)\
    \ do\n    if value > max_value then\n      max_value = value\n      max_index\
    \ = nil\n    elseif value == max_value then\n      max_index = nil\n    else\n\
    \      max_index = max_index or 1\n      if value > max_value then\n        max_value\
    \ = value\n      end\n    end\n  end\n  return max_index or 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplexnliqp.lua:27:\
    \ expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmplexnliqp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local i = 0\n  local rolling_maxes = {}\n  while i < #numbers do\n    rolling_maxes[i]\
    \ = numbers[i]\n    i = i + 1\n  end\n  return rolling_maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpn6c282.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3}\nstack traceback:\n\t/tmp/tmpxpn6c282.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local results = {}\n  local index = 1\n  for i = 1, math.ceil(#numbers) do\n\
    \    local rolling_max = 0\n    for j = 1, i do\n      rolling_max = rolling_max\
    \ or numbers[j]\n      if rolling_max > numbers[index] then\n        rolling_max\
    \ = numbers[index]\n        index = j\n      end\n    end\n    results[i] = rolling_max\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpid0humxm.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpid0humxm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local i = 0\n  repeat\n    rolling_max\
    \ = numbers[i]\n    i = i + 1\n  until i > #numbers\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7c4ub502.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp7c4ub502.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7c4ub502.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_so_far = nil\n  local current_rolling_max = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpebl_t2d8.lua:18: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return function() return table(unpack(numbers), unpack(numbers)) end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6nyp91e.lua:12:\
    \ expected: {}\nactual: function: 0x8efd00\nstack traceback:\n\t/tmp/tmpy6nyp91e.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max, i = maxi(0)\n  local rolling_max = numbers[i]\n  while i + 1 ~=\
    \ #numbers and numbers[i + 1] <= max do\n    max = numbers[i + 1]\n    i = i +\
    \ 1\n    rolling_max = numbers[i]\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0kzur05u.lua:6:\
    \ attempt to call a nil value (global 'maxi')\nstack traceback:\n\t/tmp/tmp0kzur05u.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0kzur05u.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local i, max = 1, numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] <\
    \ max then\n      max = numbers[i]\n    end\n  end\n  return numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3mjkf7p.lua:20:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpg3mjkf7p.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_maxes = {}\n  local index = numbers[1]\n  local rolling_maxes_len\
    \ = 0\n  for i = 2, #numbers do\n    if numbers[i] > rolling_maxes[rolling_maxes_len]\
    \ then\n      rolling_maxes_len = rolling_maxes_len + 1\n      rolling_maxes[rolling_maxes_len]\
    \ = numbers[i]\n    end\n    if rolling_maxes_len > index then\n      rolling_maxes[rolling_maxes_len]\
    \ = numbers[i]\n    end\n  end\n  return rolling_maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjvuj1j4.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppjvuj1j4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppjvuj1j4.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if numbers == nil then return end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9fjondsw.lua:17: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  return rolling_max_helper(numbers, 0, 0, false, true)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnl9t5l1.lua:6:\
    \ attempt to call a nil value (global 'rolling_max_helper')\nstack traceback:\n\
    \t/tmp/tmplnl9t5l1.lua:6: in local 'candidate'\n\t/tmp/tmplnl9t5l1.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    for _, value in ipairs(numbers) do\n        table.insert(result,\
    \ value)\n    end\n    table.sort(result)\n    local current_max = 1\n    for\
    \ i = 2, #result do\n        if result[i] ~= result[i - 1] and result[i] > current_max\
    \ then\n            current_max = result[i]\n        end\n    end\n    return\
    \ current_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqh3ciaa.lua:23:\
    \ expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpcqh3ciaa.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local max_index = {}\n  for i = 1, #numbers do\n    max_index[i] = numbers[i]\n\
    \  end\n  local max_value = max_index[1]\n  local max_size = #max_index\n  local\
    \ current = 1\n  local output = {}\n  while current <= max_size do\n    if numbers[current]\
    \ > max_value then\n      max_value = numbers[current]\n      max_index = i\n\
    \    end\n    current = current + 1\n  end\n  table.insert(output, max_value)\n\
    \  table.insert(output, max_index[1])\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3coehzxy.lua:22:\
    \ attempt to index a nil value (local 'max_index')\nstack traceback:\n\t/tmp/tmp3coehzxy.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp3coehzxy.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  if #numbers < 1 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphivzizol.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
