name: HumanEval_48_is_palindrome
language: lua
results:
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:gsub(\"([%s])\", \"%%%1\"):gsub(\"([%%s])\", \"%%%1\"):gsub(\"\
    %%%1\", \"%1\"):gsub(\"%%%1\", \"%1\")\n  local i, j = 1, #text\n  while i < j\
    \ do\n    if text:sub(i, i) ~= text:sub((j - i - 1), (j - i - 1)) then\n     \
    \ return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw48mub_.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgw48mub_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse():sub(1, #text * #text) == text\nend\n</cell>\n<text>\n\
    Strings Length\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnzen9wo7.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse():sub(#text):reverse() == text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wukmuhh.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0wukmuhh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local index, length = 1, #text\n    while index ~= 0 do\n        local char\
    \ = text[index]\n        if char ~= \" \" and char ~= \"\\n\" and char ~= \"\\\
    t\" then\n            local isPalindrome = string.lower(text) == string.lower(text:sub(1,\
    \ index))\n            if not isPalindrome then break end\n        end\n     \
    \   index, length = index + 1, length - index - 1\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local cb = string.gsub(text, \"[\" .. string.char(13) .. \"]\", \"\")\n  return\
    \ cb == cb:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse():sub(1, #text - 1) ~= text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4c3pm5mm.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4c3pm5mm.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse():sub(1, #text) == text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   if text ~= text then return false end\n   local lower = text:lower()\n   local\
    \ upper = text:upper()\n   for i = 1, #text do\n      if lower[i] ~= upper[i]\
    \ then\n         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0p9tj0hz.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0p9tj0hz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local start = 0\n  local length = text\n  while start < length do\n    local\
    \ middle = start + (length - start) / 2\n    if text[middle] == text[middle] then\n\
    \      start = middle + 1\n    else\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpah9fhx4k.lua:13:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpah9fhx4k.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpah9fhx4k.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \tlocal start = 1\n\tlocal end = text:len()\n\twhile start <= end do\n\t\tlocal\
    \ mid = start + (end - start) / 2;\n\t\tif text[mid] ~= text[mid] then\n\t\t\t\
    return False\n\t\tend\n\t\tstart = mid + 1;\n\t\tend = mid - 1;\n\tend\n\treturn\
    \ True\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2poj_mmp.lua:12: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text == nil then\n        return nil\n    end\n    local i = text:len()\n\
    \    if i == 0 then\n        return true\n    end\n    local j = i - 1\n    local\
    \ mid = text:sub(i, i)\n    while j > 0 and not text:sub(i, j) == mid do\n   \
    \     j = j - 1\n    end\n    return j == 0 and text == text:reverse()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8voud1h.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_8voud1h.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse() == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return text:reverse() == text\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Can you explain the `i` variable here? `for i = 1, #text` doesn't look right to\
    \ me.\n<|/ c |>\n<| c |>\nThat variable is the for loop variable. Since it is\
    \ looping over the string character by character, it is incremented each time\
    \ it goes through the loop\n<|/ c |>\n<| c |>\nI edited the answer to include\
    \ a link to a tutorial that explains the loop variable in more detail.\n<|/ c\
    \ |>\n<| a dscore=0 |>\nJust a little bit more compact version with \"i\" variable:\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprgmia0tt.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text == text:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then return end\n  if text:len() ~= 1 then\n    return false\n\
    \  elseif text:sub(1,1) == text:sub(text-1:len()) then\n    return true\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjn18xcv1.lua:14: ')' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text == text then\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprvnve1kx.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  for i, v in ipairs(text) do\n    if v and v ~= string.subv(text, i - 1, i)\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc28fnfwh.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc28fnfwh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local s, i, j = text:find('%')\n    while\
    \ s do\n      if text:sub(i, i) == text:sub(j, j) then\n        return text:sub(i,\
    \ i + 1)\n      end\n      s, i, j = text:find('%', i + 1)\n    end\n    return\
    \ text\n  end\n  return reverse(text) == text\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp53a91peg.lua:12:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmp53a91peg.lua:12:\
    \ in local 'reverse'\n\t/tmp/tmp53a91peg.lua:21: in local 'candidate'\n\t/tmp/tmp53a91peg.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   -- Check if text is empty or just whitespace\n   if not text or text:match('^%s*$')\
    \ then\n      return true\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf4o8udud.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return string.gsub(text, \"%d%d\", function(left, right)\n    if left ~= right\
    \ then return false end\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4gylbh1.lua:19:\
    \ expected: true, actual: \"\"\nstack traceback:\n\t/tmp/tmpg4gylbh1.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local length = text:len()\n  if length == 0 then return true end\n  local first\
    \ = tolower(text:sub(1, length / 2)):reverse()\n  if first == text then return\
    \ true end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4e0icut9.lua:13:\
    \ bad argument #2 to 'sub' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmp4e0icut9.lua:13: in local 'candidate'\n\t/tmp/tmp4e0icut9.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function is_palindrome_aux(text, left, right)\n    if right < left then\n\
    \      return false\n    elseif text[left] == text[right] then\n      return is_palindrome_aux(text,\
    \ left + 1, right - 1)\n    else\n      return false\n    end\n  end\n  return\
    \ is_palindrome_aux(text, 1, #text - 1)\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb3ngcifr.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local text = text or ''\n    local i, j = #text, 0\n    while i < j do\n\
    \        local letter = text:sub(i, j)\n        i = i - 1\n        j = j - 1\n\
    \        if letter ~= letter:reverse() then\n            return false\n      \
    \  end\n    end\n    return true\nend\n</code>\n<|/ a tags=lua |>\n<| a tags=lua\
    \ |>\nYou can get all words in a string using string.gmatch. For example\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv1iud9xe.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:gsub(\"([^\" .. reverse(\"a-z\") .. \"]+)\", function (x)\n   \
    \ return string.lower(x) == x:reverse() and x or nil\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6cnuv9cq.lua:11:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmp6cnuv9cq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp6cnuv9cq.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   local n = #text\n   if n <= 1 then return true end\n   if n <= 2 then\n  \
    \    local first = text[1]\n      local last = text[n]\n      return first ==\
    \ last and first ~= '%'\n   end\n   if text == text then return true end\n   local\
    \ middle = text:sub(1, #text / 2)\n   local reversed = middle:reverse()\n   return\
    \ reverse(text, 0, #text / 2) == reversed\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpha22827k.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpha22827k.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local text = text or ''\n    local t = text:gsub('.', function(s) return\
    \ s:lower() end)\n    local reverse = t:reverse()\n    return reverse == t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   return text\n   :gsub(\".\", function(ch)\n      local s = string.sub(text,\
    \ 1, string.len(text) - string.len(ch))\n      return s == string.sub(text, 1,\
    \ string.len(s) - 1) or s\n   end)\n   :gsub(\"(.)(.)\", function(_, l1, l2)\n\
    \      return l2 == l1 or \"A\" == l1 and \"Z\" == l2 or l1 == l2 or \"a\" ==\
    \ l1 and \"z\" == l2\n   end)\n   :gsub(\"(.)(.).\", function(_, l1, l2, l3)\n\
    \      return l2 == l3 and l1 == l3 or \"A\" == l1 and \"Z\" == l2 and \"a\" ==\
    \ l3 and \"z\" == l3\n   end)\n   :sub(1,-1)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kskebtp.lua:28:\
    \ expected: true, actual: \"\"\nstack traceback:\n\t/tmp/tmp2kskebtp.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local _text = text\n    if text == nil then\n        error('string required')\n\
    \    end\n    local length = #text\n    if length == 0 then\n        return true\n\
    \    end\n    if length ~= #_text then\n        -- palindrome is when same text\
    \ is reversed\n        return _text == _text:reverse()\n    end\n    -- if text\
    \ is equal or smaller than 2 character string then it is palindrome\n    if length\
    \ <= 2 then\n        return true\n    end\n    -- loop to check every character\
    \ in text string\n    for i = 1, (length / 2) do\n        local first = string.sub(text,\
    \ (i - 1), i)\n        local second = string.sub(text, (length - (i - 1)), i)\n\
    \        -- check for empty string\n        if first == nil or second == nil then\n\
    \            return true\n        end\n        -- check for non alphabet\n   \
    \     if first:match('[^a-zA-Z]') then\n            return false\n        end\n\
    \        -- check for non alphabet\n        if second:match('[^a-zA-Z]') then\n\
    \            return false\n        end\n        -- check for same character with\
    \ reverse\n        if first == second:reverse() then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h_qrikq.lua:57:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8h_qrikq.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return text == reverse(text) or is_palindrome(reverse(text))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxcnsd1f.lua:11:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmptxcnsd1f.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmptxcnsd1f.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then return false end\n  if text == \"\" then return true end\n\
    \  local length = #text\n  local start = 1\n  local end = (length - 1) / 2\n \
    \ while start <= end do\n    if text[start] ~= text[end] then\n      return false\n\
    \    end\n    start = start + 2\n    end = end - 2\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv08pmq31.lua:15: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local text_reversed = text:reverse()\n    return text_reversed == text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text:len() <= 1 then return true end\n    local reversed = text:reverse()\n\
    \    return text:sub(1, 1):sub(1, 1) == reversed:sub(1, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbokgfbm0.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbokgfbm0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local text = text:gsub(\"[%z%d%c%s]\", function(c) -- replace anything that\
    \ is not a letter, digit or symbol with \"z\"\n        return c == \"z\" and \"\
    %Z\" or c == \"%z\" and \"%Z\" or c == \"%z\" and \"%Z\" or c == \"z\" and \"\
    %z\"\n    end):reverse() -- reverse string\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwvcs7zr4.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil or text == \"\" then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8a7pd2dv.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return text:reverse() == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse() == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then\n    return false\n  end\n  text = text:lower()\n  text\
    \ = text:gsub(\"[%z\\1-\\127\\194-\\244\\255-\\357\\361-\\377]\", \"\")\n  text\
    \ = text:gsub(\"[^a-zA-Z0-9 ]\", \"\")\n  local i, j, k\n  for i = 0, text:len(),\
    \ 1 do\n    j = text:len()\n    while j > 0 and text[i] == \" \" do\n      i =\
    \ i + 1\n      j = j - 1\n    end\n    if text[i] == \" \" then\n      i = i +\
    \ 1\n      j = j - 1\n    end\n    for k = 1, j:len(), 1 do\n      if text[k]\
    \ != text[i] then\n        return false\n      end\n      i = i + 1\n      k =\
    \ k + 1\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy9psrmos.lua:15: decimal escape too large near '\"[%z\x01\
    -\x7F--\\357\\'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    for i = 1,#text,1 do\n        if text[i] ~= text[i-1] then\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\n6. Palindromic\
    \ Numbers\nWrite a function to determine if a number is palindromic or not.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz9wdoqxk.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse():sub(1, text) ~= text:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0c8cd_p.lua:11:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpx0c8cd_p.lua:11: in local 'candidate'\n\t/tmp/tmpx0c8cd_p.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- Check if the string is one character long\n  if #text < 2 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy7hvijom.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return string.gsub(text, \"([^\" .. string.char(126) .. \"]+)\", function\
    \ (c)\n        local first, last = string.find(text, c)\n        if not first\
    \ or not last then return nil end\n        if first < last then\n            return\
    \ first..last-1\n        else\n            return first..last\n        end\n \
    \   end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21on92pr.lua:25:\
    \ expected: true, actual: \"\"\nstack traceback:\n\t/tmp/tmp21on92pr.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text - 1;\n  while i < j do\n    if text[i] ~= text[j] then\n\
    \      -- The character at position i isn't the same as character at position\
    \ j\n      return False;\n    end\n    i = i + 1;\n    j = j - 1;\n  end\n  return\
    \ True;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsk6del4y.lua:26:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsk6del4y.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local text = text:lower()\n    return text == text:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \treturn text:reverse():find(text) == 0 and 1 or 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cguuhvj.lua:17:\
    \ expected: true, actual: 0\nstack traceback:\n\t/tmp/tmp1cguuhvj.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  for i = 1, (#text - 1) do\n    if text:sub(i, i) ~= text:sub((i - 1), (i -\
    \ 1)) then\n      return false\n    end\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaj52xmqo.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  for i = 1, (#text) do\n    if text:sub(i, i) ~= text:sub((#text) - i, #text\
    \ - i) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ayh0d9.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy6ayh0d9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- TODO: Should we care about case?\n  return text:reverse() == text -- TODO:\
    \ Can we avoid creating a copy of string?\nend\n</cell>\n<text>\nExercises\nImplement\
    \ is_palindrome using filter and map. Hint: filter takes a function and returns\
    \ a new function.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt2gz6ipp.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local start = text:len()\n    local middle = text:len()\n    while middle\
    \ ~= start do\n        if text[middle] != text[start - middle] then\n        \
    \    return false\n        end\n        middle = middle - 1\n        start = start\
    \ - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprk2009wp.lua:14: 'then' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local n = #text\n  local rev = ''\n  for i in string.gsub(string.reverse(text),\
    \ '%s%s+$', '') do\n    rev = rev..i\n  end\n  return rev == text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaj3uoj6v.lua:13:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpaj3uoj6v.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpaj3uoj6v.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local _, backwards_index = text:find('^')\n    local _, forwards_index =\
    \ text:find('$')\n    if backwards_index and forwards_index then\n        return\
    \ backwards_index == forwards_index\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh2kqan2.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprh2kqan2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  return text:sub(1, #text) == text:sub(#text, 1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporn9_qa6.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmporn9_qa6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- TODO: Add cases where `text` is longer than one character\n  -- TODO: Optimize\
    \ this with [SBOL]\n  return text:gsub('.', function(c) \n    local reversed =\
    \ string.reverse(c)\n    return reversed == c\n  end)\nend\n</cell>\n<text>\n\
    Strings\nLet's take a look at some string related functions in Lua:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp48xapybf.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text == nil then\n        return false\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc58e7i8p.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text - 1;\n  while (i < j) do\n    if text[i] ~= text[j] then\
    \ return false end\n    i = i + 1;\n    j = j - 1;\n  end\n  return true;\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu49x6jt.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphu49x6jt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   text = text:lower()\n   for i = 1,#text do\n      if text:sub(i,i) == text:sub(-i,-i)\
    \ then return false end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii2kl3mr.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpii2kl3mr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return string.gsub(text, \"[%z\\1-\\3]\", function(c) \n        return string.char(tonumber(c))\n\
    \    end) == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzn52c_w.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplzn52c_w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then\n    return false\n  end\n  return text:sub(1, #text) ==\
    \ text:sub((#text - 1), #text) -- Reverse the string and compare it to the original\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx723w9yl.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx723w9yl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local index = 1\n  local reversed_string = ''\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppha9wrch.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = #text, 1, 1\n  while i < j do\n    if text[i] ~= text[j] then\n\
    \      j = j - 1\n    else\n      i = i + 1\n    end\n  end\n  return j == 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyucflon.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphyucflon.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:gsub('.', function(c) return t:byte(c) end):reverse()\n  return\
    \ text == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgsug9u0.lua:11:\
    \ attempt to index a nil value (global 't')\nstack traceback:\n\t/tmp/tmprgsug9u0.lua:11:\
    \ in function </tmp/tmprgsug9u0.lua:11>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmprgsug9u0.lua:11: in local 'candidate'\n\t/tmp/tmprgsug9u0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:gsub('^[+-]', '')\n  text = text:gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n  text = text:gsub('%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d%%%%d',\
    \ '')\n  local is_palindrome = true\n  for i = 1, #text do\n    if text:sub(i,\
    \ i) == text:sub((i - 1), (i - 1)) then\n      is_palindrome = false\n      break\n\
    \    end\n  end\n  return is_palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7wgitho.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm7wgitho.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local t = text:lower()\n    local i, j = 1, #t\n    while i <= j do\n   \
    \     if t[i] ~= t[j] then\n            return false\n        end\n        i =\
    \ i + 1\n        j = j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxxjq3ep.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphxxjq3ep.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local strlen = text:len()\n    local half = math.floor(strlen/2)\n    local\
    \ firsthalf = str:sub(1,half)\n    local secondhalf = str:sub(half,strlen-1)\n\
    \    return firsthalf == secondhalf\nend\n</cell>\n<text>\n3. \uBB38\uC81C\n\uB2E4\
    \uC74C\uC758 \uBB38\uC81C\uC5D0\uC11C\uB294 \uAC19\uC740 \uBB38\uC790\uC758 \uC591\
    \uC744 \uC90C \uC218 \uC788\uC73C\uBA70, \uC591\uC758 \uAC1C\uC218\uB97C \uC124\
    \uC815\uD569\uB2C8\uB2E4. \uBB38\uC790\uC758 \uC591\uC744 \uD55C\uBC88\uC5D0 \uC90C\
    \uC73C\uB85C \uD45C\uC2DC\uD558\uAE30 \uC804\uC5D0 \uC591\uC758 \uAC1C\uC218\uB97C\
    \ \uC124\uC815\uD574\uC57C \uD569\uB2C8\uB2E4.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphyub6zcf.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return text:reverse():lower() == text:lower()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local function reverse(text, start, end)\n        start = start or 0\n  \
    \      end = end or #text\n        local new_text = \"\"\n        for i = start,\
    \ end do\n            new_text = new_text .. text[i]\n        end\n        return\
    \ new_text\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqoytzu67.lua:11: <name> or '...' expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \tlocal i, j = 1, #text - 1\n\twhile i <= j do\n\t\tif text[i] ~= text[j] then\n\
    \t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqykinglu.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqykinglu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  for i=1,#text do\n    if text[i] ~= text[-i] then\n      return false\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ij6yolv.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0ij6yolv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local start, end = text:len(), text:len()\n    for i = 1, start do\n    \
    \    if text:sub(i, i) == text:sub(end - i, end - i) then\n            start =\
    \ end - 1\n        else\n            end--\n        end\n    end\n    return start\
    \ == 1 and text:sub(1, 1) == text:sub(end - 1, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw7v6ka0b.lua:11: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then return false end\n  return string.gsub(text, \"[\" .. string.rep(\"\
    ]\", #text - 1) .. \"]\", \"\")\n    == string.gsub(text, \"[\" .. string.rep(\"\
    [\", #text - 1) .. \"]\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdktijrsa.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpdktijrsa.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdktijrsa.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:gsub('.', function(c) return c:reverse() end)\n  :gsub('^.', '')\n\
    \  :gsub('$', ''):reverse()\n  :len()\n  :le(1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvp9bi8n.lua:15:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpbvp9bi8n.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpbvp9bi8n.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   if text == nil then return false end\n   for i = #text, 1, -1 do\n      local\
    \ c = text:sub(i, i)\n      if c ~= c then\n         return false\n      end\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q1rlejm.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_q1rlejm.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local start, stop = text:len(), text:len() -1\n    for i = start, stop do\n\
    \        if text:sub(i, i) ~= text:sub(stop, i) then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vwhater.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9vwhater.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \tlocal s, e, i, j = text:reverse():find(' ')\n\tif s == nil then\n\t\treturn\
    \ text == text:reverse()\n\telse\n\t\treturn is_palindrome(text:sub(0, s))\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- Remove all occurrences of \"Z\" because that means no character in the text\n\
    \  -- is a palindrome\n  text = text.replace('z', '')\n  -- Get the number of\
    \ characters in the text\n  local num_chars = #text\n  -- If text is empty, text\
    \ is a palindrome\n  if num_chars == 0 then\n    return true\n  end\n  -- If there\
    \ are more than one characters in the text, return false\n  if num_chars > 1 then\n\
    \    return false\n  end\n  -- For each character in the text, compare it to the\
    \ first and last\n  -- characters in the text, and return true if they are equal\n\
    \  for i, character in ipairs(text) do\n    if character ~= text[num_chars - i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu3486cqk.lua:13:\
    \ attempt to call a nil value (field 'replace')\nstack traceback:\n\t/tmp/tmpu3486cqk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpu3486cqk.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text == nil then return false end\n    if text:len() < 2 then return true\
    \ end\n    local half = text:len() / 2\n    for i = 1, half do\n        if text:sub(i,\
    \ i) ~= text:sub((i - half), i) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa8w17791.lua:15:\
    \ bad argument #1 to 'sub' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmpa8w17791.lua:15: in local 'candidate'\n\t/tmp/tmpa8w17791.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text - 1;\n    while i <= j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1;\n        j =\
    \ j - 1;\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzborotpy.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzborotpy.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text == nil then\n        return false\n    end\n    local start = text:len()\n\
    \    local middle = text:len()\n    while middle > 0 do\n        middle = middle\
    \ / 2\n        if text[middle] ~= text[middle - 1] then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxz4aewh.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgxz4aewh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \ttext = text:lower()\n\tlocal start, end = text:len(), text:len()\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7t2e1qyv.lua:12: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text == nil then return false end\n    local text2, text1 = text:gsub(\"\
    [%z%s]\", \"%%%%\")\n    return text1 == text2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxou_zlt8.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxou_zlt8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local ok, first, middle, last = true, 1, text:reverse():gsub('(.-)' .. middle,\
    \ '%1*'):match('(.-)' .. last)\n  if ok then\n    return last == middle\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnjvuf5wd.lua:11:\
    \ attempt to concatenate a nil value (global 'middle')\nstack traceback:\n\t/tmp/tmpnjvuf5wd.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpnjvuf5wd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text - 1\n  while i < j do\n    if text[i] ~= text[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnvy09up.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqnvy09up.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local index = #text / 2\n    while index do\n        local char = text:sub(1,\
    \ index)\n        local index2 = text:find(char, index - 1, 1)\n        if index2\
    \ == 1 then\n            index = index - 1\n        elseif index2 == nil then\n\
    \            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local text_length = #text\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcxmxxcsr.lua:25: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = 1, #text\n  while i < j do\n    if text[i] ~= text[j] then\n \
    \     return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hovvd35.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9hovvd35.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse():sub(1, text:len()) == text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   local function reverse(text)\n      local rev = text:reverse()\n      return\
    \ rev:sub(1,#text)\n   end\n   text = text:lower()\n   if text == reverse(text)\
    \ then\n      return true\n   else\n      return false\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \tlocal s = text:lower()\n\ts = s:gsub(\"%s+\",\"\")\n\ts = s:gsub(\"[abcdefghijklmnopqrstuvwxyz]\"\
    ,\"\")\n\ts = s:gsub(\"[!^%$#@!%*]\",\"\")\n\treturn s == s:reverse()\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawseyz2s.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpawseyz2s.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \treturn string.gsub(text, string.lower(string.sub(text, 1, #text)), '') == text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbc7flrln.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbc7flrln.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local s, p = text:reverse():find(text)\n  return s == p and s ~= 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsknxciy.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjsknxciy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    -- Split text into characters\n    local characters = {}\n    for i = 1,\
    \ #text, 1 do table.insert(characters, string.sub(text, i, i)) end\n    -- Sort\
    \ characters alphabetically\n    table.sort(characters)\n    -- Iterate backwards\
    \ through characters\n    for i = #characters, 1, -1 do\n        -- Compare current\
    \ character with previous character\n        if characters[i]~=characters[i -\
    \ 1] then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpluznfep8.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpluznfep8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  for _,v in pairs(text) do\n    if string.sub(v,1,1) ~= string.sub(v,-1,1) then\n\
    \      return false\n    end\n  end\n  return true\nend\n</cell>\n<text>\nTests\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnqvw1ggs.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  if text:len() <= 1 then\n    return true\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvgqnxvrm.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \t-- base case\n\t-- base case\n\t-- base case\n\tif text == \"\" then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpswcjbb0j.lua:30: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    for i = 1, #text do -- iterate through text ignoring first character\n  \
    \      if (text:sub(i, i) == text:sub#(-2, -2)) then -- check if the current character\
    \ is the same as the previous character\n            return False end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpghtfgpr0.lua:12: function arguments expected near '#'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text\n    while i < j do\n        if text[i] ~= text[j]\
    \ then\n            j = j - 1\n        else\n            i = i + 1\n         \
    \   j = j - 1\n        end\n    end\n    return text == string.reverse(text)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then\n    return false\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb2qb8ccl.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   for i = 1,#text do\n      if not string.sub(text, i, i)==string.sub(text,\
    \ i-1, i-1) then return false end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_idup7ac.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_idup7ac.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \t-- check if its string contains letters or numbers\n\t-- if not than it is not\
    \ a palindrome\n\t-- if string contains letters than first convert it to number\n\
    \tif text:match('^[a-z]*$') then\n\t\ttext = text:lower()\n\tend\n\tlocal i, length\
    \ = text:len(), 0\n\tlocal temp, last, letter\n\tfor i = 1, length / 2 do\n\t\t\
    letter = text:sub(i, i)\n\t\ttemp = text:sub(i + 1, i + 1)\n\t\tif temp:lower()\
    \ == letter then\n\t\t\tlength = length + 1\n\t\telse\n\t\t\treturn false\n\t\t\
    end\n\tend\n\tlast = text:sub(length - 1, length)\n\treturn last == last:lower()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38xqed51.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp38xqed51.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local start = text\n  local middle\n  local end = text\n  local reverse\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpokz21vhj.lua:13: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local s, p, srev\n    local i, c, l, imax\n    s, srev, i, c, l, imax = text:gsub('([a-z])',\
    \ string.upper)\n    i = #text\n    while i > 0 do\n        if text[i] ~= s[c\
    \ - 1] then\n            return false\n        end\n        c, i = i - 1, c\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctk2bpe6.lua:16:\
    \ attempt to perform arithmetic on a nil value (local 'c')\nstack traceback:\n\
    \t/tmp/tmpctk2bpe6.lua:16: in local 'candidate'\n\t/tmp/tmpctk2bpe6.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse():sub(1,#text) == text:sub(1,#text)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then return false end\n  text = tostring(text)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpor_ws532.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- reverse the string and check if it is the same as original string\n  local\
    \ reversed_string = text:reverse()\n  return text == reversed_string\nend\n</cell>\n\
    <text>\nStrings, Arrays, and Tables\nStrings are immutable and are simply collections\
    \ of characters. Strings can be manipulated with the char() function that returns\
    \ a single character of a string.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfd4epdh3.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- Create a reversed copy of the text\n  local reversed_text = text:reverse()\n\
    \  -- Check the first and last characters for equality with the reversed text\n\
    \  return text == reversed_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j = text:len(), 1\n  while i > 0 and text:sub(i,i) == text:sub(1,i)\
    \ do\n    i = i - 1\n    j = j - 1\n  end\n  return j > 0 and text:sub(i+1,i+1)\
    \ == text:sub(1,i)\nend\n</cell>\n<text>\nNext we add some utility functions to\
    \ the library:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyj5qcjd3.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local index = text:len()\n    if text == text:reverse() then\n        return\
    \ true\n    end\n    -- Check if given text is a palindrome by going through the\
    \ whole string\n    -- starting from the end and going back until the middle of\
    \ string\n    while index do\n        if text:sub(1, index) ~= text:sub(index,\
    \ index) then\n            return false\n        end\n        index = index -\
    \ 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   local lenText = text:len()\n   if lenText < 2 then\n      return true\n  \
    \ elseif lenText > 256 then\n      return false\n   end\n   local start = text:sub(1,1)\n\
    \   local end = text:sub(lenText,lenText)\n   return start == end:reverse()\n\
    end\n</code>\n<|/ a tags=lua,string |>\n<| a tags=lua,string dscore=1 |>\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmc62x597.lua:18: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  for i = 1, #text do -- Traverse the string one by one\n    if text:sub(i, i)\
    \ == text:sub((#text - 1) - i, #text) then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyaunprf.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoyaunprf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text == \"\" then\n        return true\n    end\n    local text_reversed\
    \ = text\n    text_reversed = string.gsub(text_reversed, \"[^\" .. string.char(127)\
    \ .. \"]\", \"\")\n    if text == text_reversed then\n        return true\n  \
    \  end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmok48z2.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmok48z2.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local index = 1\n    local length = #text\n    while index <= length / 2\
    \ do\n        local char = text:sub(1, index)\n        local next_char = text:sub(index\
    \ + 1, length)\n        if char == next_char then\n            return false\n\
    \        end\n        index = index + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rtkiiu8.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6rtkiiu8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text ~= text then\n        local split = text:gmatch(\"[^\" .. string.char(32)\
    \ .. \"]+\")\n        if split:len() <= 1 then return true end\n        local\
    \ left, right = string.find(text, split[1], 1, true), string.find(split{1},\n\
    \            text, 1, true)\n        return left > 0 and right > 0 and text[left\
    \ - 1] = split[right - 1]\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5vr8av9z.lua:16: 'end' expected (to close 'if' at line 11)\
    \ near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return text == string.gsub(text, string.char(0x00, 0x80 - string.len(text)),\
    \ \"\")\nend\n</cell>\n<text>\nPart 3: Extract n-grams from text\nLet's use these\
    \ functions to extract the n-grams (ordered sequences of characters) that are\
    \ most correlated with Swadesh in the reviews. \nWe will compute n-grams from\
    \ the reviews with order 4. We use the function get_n_grams_from_text. This function\
    \ will return a table of the form (word_idx, n_gram, corr) with each row corresponding\
    \ to a review. \nWe will keep only the n_gram that has the highest correlation\
    \ with the Swadesh word (corr > 0.9).\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphuwwn863.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse() == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   if text == nil then\n      return false\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa0a788cq.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  for i = #text, 1, -1 do\n    if text:sub(i, i) ~= text:sub(i + 1, i + 1) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapxp1eih.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpapxp1eih.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return text == string.reverse(text) and true or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local t = text:lower()\n    return t:sub(1, #t) == t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppc6418vn.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppc6418vn.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return string.gsub(text, \"[\\n\\r]+\", \" \") ==\n    string.gsub(string.lower(text),\
    \ \"[\\n\\r]+\", \" \") and\n    (string.gsub(text, \"^%s*(.-)%s*$\", \"%1\")\
    \ ~= text or text == '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppa_mjd38.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppa_mjd38.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text:len() <= 1 then\n    return true\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz01mk95s.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function compare(text1, text2)\n    if text1 == nil or text2 == nil then\n\
    \      return text1 == text2\n    elseif text1 == text2 then\n      return true\n\
    \    else\n      local i = 0\n      local j = 1\n      while i < #text1 and j\
    \ < #text2 do\n        if text1[i] == text2[j] then\n          i = i + 1\n   \
    \       j = j + 1\n        else\n          return false\n        end\n      end\n\
    \      return true\n    end\n  end\n  if text==nil or text=='' then\n    return\
    \ true\n  end\n  local start = 1\n  local end = 1\n  local i = 1\n  while i <\
    \ #text do\n    if text[i] ~= ' ' then\n      if start > end then\n        return\
    \ false\n      end\n      start = end + 1\n    end\n    i = i + 1\n  end\n  if\
    \ start > end then\n    return false\n  end\n  local left_index = start\n  local\
    \ right_index = end\n  while left_index > 0 do\n    if right_index == #text then\n\
    \      return true\n    end\n    if text[left_index] ~= ' ' then\n      if text[left_index-1]\
    \ ~= ' ' then\n        return false\n      end\n      left_index = left_index\
    \ - 1\n    end\n    left_index = left_index - 1\n  end\n  while right_index >\
    \ 0 do\n    if left_index == 0 then\n      return true\n    end\n    if text[right_index]\
    \ ~= ' ' then\n      if text[right_index-1] ~= ' ' then\n        return false\n\
    \      end\n      right_index = right_index - 1\n    end\n    right_index = right_index\
    \ - 1\n  end\n  return compare(text, reverse(text))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsouohf6g.lua:34: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \tlocal s = text:lower()\n\ts = s:gsub(\"%s+\", function(c)\n\t\treturn string.sub(c,\
    \ 1, 1):reverse():sub(1, 1)\n\tend)\n\treturn s == text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7y_r8_03.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7y_r8_03.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   if text == nil then return False end\n   local text_reversed = text:reverse()\n\
    \   if text == text_reversed then return True end\n   return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdavrg_fv.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdavrg_fv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:gsub('(.)([^%z])', function(c, c2, c3)\n    return string.char(tonumber(c2))..c3\
    \ == string.char(tonumber(c))..c3\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86t4qqgb.lua:19:\
    \ expected: true, actual: \"\"\nstack traceback:\n\t/tmp/tmp86t4qqgb.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i = 0\n  while text:sub(i,i) ~= text then i=i+1 end\n  return text ==\
    \ text:sub(i,i) and i==2 or text~=reverse(strsub(text,1,i-1)) and false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp790b52n2.lua:12: 'do' expected near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = string.lower(text)\n  -- Remove non-alphanumeric characters\n  text\
    \ = text:gsub('%w+%w+','') -- Zbcd => zbcd\n  -- Remove non-ascii characters\n\
    \  text = text:gsub('[\\128-\\191]+','') -- Zbcd => zbcd\n  -- Remove leading\
    \ and trailing whitespace\n  text = text:gsub('%s+$','')\n  -- Remove trailing\
    \ whitespace\n  text = text:gsub('(%s+)%s+$','%1')\n  -- Remove leading whitespace\n\
    \  text = text:gsub('(%s+)%s+','%1')\n  -- Replace all other whitespaces with\
    \ single whitespace\n  text = text:gsub('%s+',' ') -- Zbcd => z b c\n  return\
    \ text == string.sub(text,1,#text) and true or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklpx1akg.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpklpx1akg.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local palindrome = ''\n  for i = 1, #text do\n    if\
    \ text:sub(i, i) ~= text:sub((#text) - i, (#text) - i) then\n      return False\n\
    \    end\n    palindrome = palindrome .. text:sub(i, i)\n  end\n  return palindrome\
    \ == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pgui0rt.lua:26:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1pgui0rt.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   for i = #text, 1, -1 do\n      local char = text:sub(i, i)\n      text = text:gsub(char,\
    \ char:reverse())\n   end\n   return text == text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgyrzz4v.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvgyrzz4v.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then return false end\n  local index, length = 1, #text\n  for\
    \ i = 1, length do\n    if text[index] ~= text[(length - index - 1)] then\n  \
    \    return false\n    end\n    index = index + 1\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xq8ifqa.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5xq8ifqa.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text == nil then return false end\n    for i = 1, #text do\n        if\
    \ string.sub( text, i, i ) == string.sub( text, i - 1, i - 1 ) then\n        \
    \    return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36awio5i.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp36awio5i.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   text = text:lower()\n   for i = 1,#text,1 do\n      local c = text:sub(i,i)\n\
    \      if c ~= c:reverse() then\n         return false\n      end\n   end\n  \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio_9hzgp.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpio_9hzgp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- If it's not a string, return False immediately\n  if not type(text) == 'string'\
    \ then\n    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzawc9cxr.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower() -- Converts string to lower case\n  local middle, left,\
    \ right = text:find(string.reverse(text))\n  return middle ~= nil and middle ~=\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \t-- We don't need to check if string length is 0 since it's already a palindrome\n\
    \t-- This also takes care of odd length palindromes\n\ttext = text:lower()\n\t\
    -- Split string by spaces and reverse it\n\ttext = text:gsub(\"(.-)\", string.reverse)\n\
    \t-- If there are any spaces, we can't determine it's a palindrome\n\t-- If there\
    \ is no spaces, we know it's a palindrome\n\t-- In case there are spaces, it's\
    \ safe to assume it's a palindrome\n\treturn text ~= '' and\n\t\ttext:sub(#text\
    \ - 1) ~= ' ' and\n\t\ttext:sub(#text - 2) ~= ' '\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52ahroyh.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp52ahroyh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = string.lower(text)\n  local start, stop = text:len()/2, text:len()-1\n\
    \  local sub = text:sub(1, stop)\n  return start ~= stop and sub == text:sub((stop-1),\
    \ start)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ogf2z0m.lua:14:\
    \ bad argument #2 to 'sub' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmp6ogf2z0m.lua:14: in local 'candidate'\n\t/tmp/tmp6ogf2z0m.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i = 0\n    local j = text.length - 1\n    local isPal = True\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfxlw6c6s.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return string.sub(text, 1, string.len(text)) ~= string.sub(text, 1, string.len(text)\
    \ -1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmeiwjbxq.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmeiwjbxq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local is_palindrome = true\n    if text ~= text:lower() then\n        for\
    \ i = #text, 1, -1 do\n            if not text[i] == text[i-1] then\n        \
    \        is_palindrome = false\n                break\n            end\n     \
    \   end\n    end\n    return is_palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsqpmn_l.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbsqpmn_l.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \ttext = text:gsub('\\%z','%#z'):gsub('%z','%#z'):gsub('\\%Z','%#Z'):gsub('%Z','%#Z')\n\
    \tlocal p1 = text:reverse()\n\tlocal p2 = text:reverse():reverse()\n\treturn p1\
    \ == p2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpneimmie_.lua:11: invalid escape sequence near ''\\%'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  text = string.gsub(text, '[!-~]', '')\n  local half\
    \ = text:len()/2\n  text = text:sub(1,half)\n  text = text:reverse()\n  return\
    \ text == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8mohryw.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv8mohryw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   return text:gsub(\"(\" .. table.concat({\"z\", \"Z\", \"y\", \"Y\", \"x\"\
    , \"X\"}, \"\") .. \")\"):reverse():sub(1, #text) == text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1gjk02r7.lua:11:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp1gjk02r7.lua:11: in local 'candidate'\n\t/tmp/tmp1gjk02r7.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function str_split(input)\n    local result = {}\n    for i = 1, #input\
    \ do\n      table.insert(result, string.sub(input, i, i))\n    end\n    return\
    \ result\n  end\n  local str_arr = str_split(text)\n  for i, v in pairs(str_arr)\
    \ do\n    if str_arr[i] ~= str_arr[(str_arr.length - 1 - i)] then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6h42sb9t.lua:20:\
    \ attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\
    \t/tmp/tmp6h42sb9t.lua:20: in local 'candidate'\n\t/tmp/tmp6h42sb9t.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   return string.gsub(text, '([^' .. string.letters .. '-])', function(c) return\
    \ c == '-' and ' ' or c end) == text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpld05m93i.lua:11:\
    \ attempt to concatenate a nil value (field 'letters')\nstack traceback:\n\t/tmp/tmpld05m93i.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpld05m93i.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return string.lower(text) == string.lower(text, 1, #text) and is_palindrome_helper(text,\
    \ 1, #text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5rb4dbef.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome_helper')\nstack traceback:\n\
    \t/tmp/tmp5rb4dbef.lua:11: in local 'candidate'\n\t/tmp/tmp5rb4dbef.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   -- Empty text --> True because 0 is palindromic by definition\n   return text\
    \ == reverse(text) or is_palindrome(translate(text, \"abcdefghijklmnopqrstuvwxyz\"\
    , \"zyxwvutsrqponmlkjihgfedcba\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc7nbxn_r.lua:12:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpc7nbxn_r.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpc7nbxn_r.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local lower = text:lower()\n    local reversed = lower:reverse()\n    return\
    \ lower == reversed\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- Reverse the string\n  text = string.gsub(text, \"(%D)(%d%d)\", \"%1%2\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkt6kzaq0.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j, s\n    local size = #text / 2\n    for i = 1, size do\n     \
    \   s = text[i]\n        j = size - 1\n        while j > 0 and text[j] != s do\n\
    \            text = text:sub(1, j - 1)\n            j = j - 1\n        end\n \
    \       if text[i] == s then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxorqhijz.lua:16: 'do' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local t = ''\n  for i = 1, #text do\n    local c = text:sub(i,i)\n    t = t\
    \ .. c:reverse()\n  end\n  return t == text\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqjxut3im.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text == '' then\n        return true\n    end\n    local start, end =\
    \ 1, #text\n    \n    repeat\n        start = start - 1\n        end = end - 1\n\
    \        if text[start] ~= text[end] then\n            return false\n        end\n\
    \    until start == 1\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbludzpht.lua:14: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local start, end = 1, #text - 1\n  while start < end do\n    local letter =\
    \ text:sub(start, end)\n    if letter ~= letter:reverse() then\n      return false\n\
    \    end\n    start = start + 1\n    end = end - 1\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp797m81wr.lua:11: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local index = text:len()\n  local is_palindrome = true\n\
    \  for i = index, 1, -1 do\n    if text:sub(i, i) ~= text:sub((i - 1), i) then\n\
    \      is_palindrome = false\n      break\n    end\n  end\n  return is_palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnzehuil.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnnzehuil.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i, j, s\n  text = text:gsub('([^' .. table.concat(chars, '') .. ']:)([^'\
    \ .. table.concat(chars, '') .. ']+)', function(word)\n    -- Strip off trailing\
    \ characters\n    word = word:sub(2)\n    -- Handle non-ascii chars\n    word\
    \ = string.gsub(word, '%c', '?')\n    -- Return palindrome when no chars are left\n\
    \    return word ~= ''\n  end)\n  -- Check middle chars, reversing if necessary\n\
    \  for i = 1, #text - 1, 2 do\n    -- Handle non-ascii chars\n    s = string.gsub(text[i\
    \ + 2], '%c', '?')\n    -- Replace all chars that don't belong to the palindrome\n\
    \    s = string.gsub(s, '%c', function(char)\n      char = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwd___vcp.lua:27: ')' expected (to close '(' at line 26) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local sz = text:len()\n  if sz == 0 then return true end\n  local start = text:sub(1,\
    \ sz / 2)\n  local end = text:sub(sz / 2 + 1, sz)\n  if start ~= text or end ~=\
    \ text then\n    return false\n  end\n  local left = text:sub(1, sz - 1)\n  local\
    \ right = text:sub(sz + 1, sz)\n  if left ~= right then\n    return false\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp66a4z4rc.lua:14: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    for i = 1, #text do\n        if text:sub(i, i) ~= text:sub(i, i-1) then\n\
    \            return false\n        end\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6o03gjed.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return string.sub(text, 1, #text) == string.sub(text, 1, #text-1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw7_lqdg.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppw7_lqdg.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text == string.reverse(text)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil or text:len() < 1 then\n    return true\n  end\n  local first\
    \ = text:sub(1, 1)\n  if first == last then\n    return true\n  end\n  local i,\
    \ j = 1, text:len() - 1\n  while i < j do\n    local c = text:sub(i, i + 1)\n\
    \    j = i - 1\n    if c == first then\n      return false\n    end\n    if c\
    \ == last then\n      break\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoehyktu2.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoehyktu2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local s, e = text:reverse():find(text)\n  return s >= 0 and e == text:len()\
    \ - 1 and s == e or s == e and is_palindrome(text)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxuu6r9a.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppxuu6r9a.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \tlocal index, length = 1, #text\n\twhile index >= 0 do\n\t\tif not string.sub(text,\
    \ index, index + length) then\n\t\t\tbreak\n\t\tend\n\t\tlength = length - 1\n\
    \t\tindex = index - 1\n\tend\n\treturn index == 0 or string.sub(text, index, 1)\
    \ == string.sub(text, length - 1, length)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr81dqkw9.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr81dqkw9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local i = 0\n  local j = text\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8iwiqsjg.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- https://stackoverflow.com/questions/2623329/reverse-a-string-in-place-in-python\n\
    \  text = text:gsub(\"%l\", function()\n    -- https://stackoverflow.com/questions/49463227/how-do-i-convert-a-string-to-lowercase-in-place-in-a-gsub\n\
    \    local lc = string.lower(string.sub(string.sub(string.sub(text, \"%l\", 1,\
    \ 1), \"^.\", 1, 1), \"^.\", 1, 1))\n    return lc\n  end)\n  return text:gsub(\"\
    ^\" .. text:sub(-1) .. \"$\", \"%l\"):lower() == text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2v3y8yqo.lua:17:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp2v3y8yqo.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp2v3y8yqo.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, #text - 1\n    while i <= j do\n        if text[i] ~= text[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdj8jpmg.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgdj8jpmg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text == string.Reverse(text)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbiv7xs3b.lua:11:\
    \ attempt to call a nil value (field 'Reverse')\nstack traceback:\n\t/tmp/tmpbiv7xs3b.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbiv7xs3b.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return text == string.gsub(text, \"[^\" .. string.char(127) .. \"]\", \"\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoc2mattv.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoc2mattv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \ttext = text:lower()\n\tlocal start = 1\n\tlocal end = text:len()\n\t-- Iterates\
    \ through given string backwards\n\t-- >>> is_palindrome('aabcba')\n\t-- False\n\
    \t-- >>> is_palindrome('abcba')\n\t-- True\n\twhile start < end do\n\t\tif text:sub(1,\
    \ start) ~= text:sub(end - 1, end) then\n\t\t\treturn false\n\t\tend\n\t\tstart\
    \ = start + 1\n\t\tend = end - 1\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprq68upy8.lua:13: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \tif text ~= text then return false end\n\tlocal index, count = 1, #text\n\twhile\
    \ count > 0 do\n\t\tindex = #text - 1 - index\n\t\tif text:sub(1, index) ~= text:sub((index\
    \ + 1), #text) then return false end\n\t\tcount = count - 1\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrwi14tm.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplrwi14tm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   for i = #text, 1, -1 do\n      local char1 = text:sub(i, i)\n      local char2\
    \ = text:sub(i, i-1)\n      if char1 == char2 then\n         return false\n  \
    \    end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t8b4vm2.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1t8b4vm2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if not text or #text < 1 then\n        error('Text to check for palindrome\
    \ must have 1 or more characters.')\n    end\n    if #text == 1 then\n       \
    \ return true\n    end\n    local start = 1\n    local end = #text\n    while\
    \ start < end do\n        local char = text[start]\n        local reversed = string.gsub(string.sub(text,\
    \ start, end), '(.)(.)', function(match) return match[2] .. match[1] end)\n  \
    \      if char == reversed then\n            start = start + 2\n        else\n\
    \            start = start + 1\n        end\n        end = end - 1\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpijzjgejl.lua:18: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse():upper() == text:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdt4kfae.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppdt4kfae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local i = 0\n  local j = text:len()\n  while i < j and\
    \ text:sub(i, i) == text:sub(j, j) do\n    i = i + 1\n    j = j - 1\n  end\n \
    \ return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ma26ykj.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4ma26ykj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = string.lower(text)\n  local i, j = 1, #text - 2\n  while i <= j and\
    \ text[i] == text[j] do\n    i = i + 1\n    j = j - 1\n  end\n  return j >= 0\
    \ and text[i] == text[j]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzz_wi6bn.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzz_wi6bn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local function is_palindrome_helper(text)\n        local i = 0\n        local\
    \ j = (#text - 1) + 1\n        while i <= j do\n            if text[i] ~= text[j]\
    \ then\n                return false\n            end\n            i = i + 1\n\
    \            j = j - 1\n        end\n        return true\n    end\n    return\
    \ is_palindrome_helper(text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4op6qjc.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy4op6qjc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- O(N)\n  -- O(N)\n  -- O(N)\n  local len = #text\n  local half = len / 2\n\
    \  local start = 1\n  while start <= half do\n    -- O(1)\n    -- O(1)\n    --\
    \ O(1)\n    local char = text[start]\n    -- O(1)\n    -- O(N)\n    if char ~=\
    \ text[end - 1] then\n      return false\n    end\n    -- O(1)\n    -- O(1)\n\
    \    -- O(1)\n    start = start + 1\n    -- O(1)\n    -- O(1)\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe9m7idpq.lua:24: unexpected symbol near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local new_text = text:gsub('([a-z])', function(a) return a:lower() end)\n\
    \    local reversed_new_text = new_text:gsub('([^a-z])', function(a) return a:upper()\
    \ end)\n    return new_text == reversed_new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoeqgo4p.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeoeqgo4p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local reversed_text = string.reverse(text)\n  return text == reversed_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   return text:gsub('%w+'):reverse() == text\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr15x4jxl.lua:11:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpr15x4jxl.lua:11: in local 'candidate'\n\t/tmp/tmpr15x4jxl.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:gsub('.', function(c) \n    local reverse = string:reverse(c)\n\
    \    return reverse == c\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6kcb632.lua:20:\
    \ expected: true, actual: \"\"\nstack traceback:\n\t/tmp/tmp_6kcb632.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = text:lower()\n  local s, l = text:len(), 1\n  while (s ~= l) and s do\n\
    \    -- if text is shorter than 2 characters skip it (will be tested later)\n\
    \    if s < 2 then return false end\n    -- if next symbol is the same then skip\
    \ (will be tested later)\n    if text[s] ~= text[s+1] then return false end\n\
    \    -- increment index\n    s = s + 1\n    -- we test if text was longer than\
    \ 1 char (we test it later)\n    l = l+1\n  end\n  return s == l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_sodq17.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl_sodq17.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then return false end\n  local function reverse(text)\n    local\
    \ s = text:gsub(\"%w+\", function(c)\n      c = string.char(tonumber(c))\n   \
    \   return c:reverse()\n    end)\n    return s\n  end\n  local text = text:gsub(\"\
    %w+\", reverse)\n  -- The last character can be either punctuation or whitespace\n\
    \  local last = text:len()\n  if last % 2 == 1 and text:sub((last - 1), (last\
    \ - 1)) == \"\\n\" then\n    text = text:sub((last - 1), last - 1)\n  end\n  --\
    \ Remove spaces\n  text = text:gsub(\"( +)\", \" \"):gsub(\"( +)\", \"\\n\")\n\
    \  -- Remove any extra characters\n  text = text:gsub(\"[^\"..string.char(127..129,\
    \ 111, 119, 105, 110)..\"]\", \"\")\n  -- Check for trailing newlines\n  if text:sub(#text,\
    \ #text) == \"\\n\" then\n    text = text:sub(1, #text)\n  end\n  return text\
    \ == text:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe_48183g.lua:28: malformed number near '127..129'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  if text == nil then return false end\n  text = text:lower()\n  return text:sub(1,#text)\
    \ == text:sub((#text)/2,#text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zht2ed2.lua:13:\
    \ bad argument #1 to 'sub' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmp7zht2ed2.lua:13: in local 'candidate'\n\t/tmp/tmp7zht2ed2.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   for i = #text, 1, -1 do\n      if text:sub(i, i) ~= text:sub(i+1, i+1) then\n\
    \         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70wc0hvr.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp70wc0hvr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \ttext = text:lower() -- convert to lower case\n\tlocal n = text:len() -- get\
    \ its length\n\tlocal count = 0 -- counts how many characters are the same as\
    \ the start character\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsc6k9p14.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local i, j = 1, text:len()-1\n    while i <= j do\n        local first_char\
    \ = text:sub(i, i)\n        local second_char = text:sub(j, j)\n        if first_char\
    \ == second_char then\n            i = i+1\n            j = j-1\n        elseif\
    \ first_char < second_char then\n            j = j-1\n        else\n         \
    \   i = i+1\n        end\n    end\n    return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpputs_osz.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpputs_osz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local reverse = string.gsub(text, \"[\" .. string.len(text) .. \"]\", \"\"\
    )\n    if reverse == text then return true end\n    for i = 1, string.len(text)\
    \ do\n        if text:sub(i, i) ~= reverse:sub(i, i) then return false end\n \
    \   end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39u_4h1y.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp39u_4h1y.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \ttext = text or ''\n\tlocal start, length = #text, 0\n\twhile length > 0 and\
    \ start > 0 do\n\t\tlocal mid = math.floor(length / 2)\n\t\tif text[mid] == text[start\
    \ - mid] then\n\t\t\tlength = length - mid\n\t\t\tstart = start - mid\n\t\telse\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqsz12s6.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuqsz12s6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  return text:reverse():sub(1, text) == text\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkle2hz9f.lua:11:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpkle2hz9f.lua:11: in local 'candidate'\n\t/tmp/tmpkle2hz9f.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    -- remove leading and trailing whitespace\n    text = text:gsub('\\n', ''):gsub('\\\
    r', ''):gsub('  ', ' ')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb2omm3af.lua:26: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   local function reverse(text)\n      local result, temp = \"\", \"\"\n    \
    \  for i = 1, #text do \n         temp = text[i] \n         result = result ..\
    \ temp \n      end\n      return result \n   end\n   local text = text:lower()\n\
    \   for i = 1, #text do\n      if text:sub(i, i) == text:sub((i - 1), ((i - 1)))\
    \ then\n         return true\n      else\n         return false\n      end\n \
    \  end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpire02kbi.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpire02kbi.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \   local i, j = 1, #text\n   if j ~= i then\n      while j ~= i and text[i] ~=\
    \ text[j] do\n         i = i + 1\n         j = j - 1\n      end\n      return\
    \ text[i] == text[j]\n   else\n      return true\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdt1562e.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphdt1562e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  -- reverse text\n  local function reverse(text)\n    return text:gsub('(...)([^a-z])',\
    \ function(match)\n      return match..match:reverse()\n    end)\n  end\n  return\
    \ text:gsub('([^a-z])', function(match)\n    return match:reverse()\n  end):reverse()\
    \ == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local s, l, r = text:gsub('%a{}', ''):find('(.-)\\\\1')\n  if s then\n    return\
    \ l == r and text:sub(1, l) == text:sub(r + 1, #text)\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxp3eg3_v.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxp3eg3_v.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    return text:gsub(\"([^\" .. table.concat(string.lower(string.gsub(text,\
    \ \"[\" .. string.char(32) .. \",\" .. string.char(32) .. string.char(32)), \"\
    %1\")..\"]+)\", function (x)\n      return string.sub(x, 1, #x - 1)\n    end)\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpczyd395q.lua:15: ')' expected (to close '(' at line 12) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text)\n    local buf = {}\n    local i = #text\n   \
    \ while i > 0 do\n      table.insert(buf, string.sub(text, i, i - 1))\n      i\
    \ = i - 1\n    end\n    return table.concat(buf)\n  end\n  return reverse(text)\
    \ == text\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsma4ik14.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text ~= string.lower(text) then return false end\n    local start = 1\n\
    \    local end = #text\n    while start <= end do\n        if text[start] ~= text[end\
    \ - 1] then return false end\n        start = start + 1\n        end = end - 1\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6ok3_vgj.lua:13: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  local function reverse(text, i)\n    local reversed = text\n    for j = 1,\
    \ i do\n      reversed = reversed:sub(1,1) .. reversed:sub(n-i+1,n-i+1)\n    end\n\
    \    return reversed\n  end\n  local n = #text\n  if n == 0 then\n    return true\n\
    \  end\n  local first = text:sub(1,1)\n  if first ~= text:sub(n-1,n) then\n  \
    \  return false\n  end\n  return reverse(text,n-1) == reverse(text:sub(1,n),n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqu5zvwu.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcqu5zvwu.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \treturn (string.gsub(text, \"[^\"..string.char(0xFFFF)..\"^]\", \"\") == text)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4sxpz_pj.lua:11:\
    \ bad argument #1 to 'char' (value out of range)\nstack traceback:\n\t/tmp/tmp4sxpz_pj.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4sxpz_pj.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \  text = string.gsub(text, '[%z\\1-\\2\\3]', '')\n  return text:reverse() ==\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    local s, e, i = 0, text:len(), 0\n    while s do\n        e = s - 1\n   \
    \     while i < e and text:sub(s, e):sub(e, s) ~= \"\" do\n            s, e =\
    \ s + 1, e - 1\n        end\n        if s <= e and text:sub(s, e) == text:sub(e,\
    \ s) then\n            i = e + 1\n        end\n        s = s + 1\n    end\n  \
    \  return s == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    if text ~= text:reverse() then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- True\n-- >>> is_palindrome('aba')\n-- True\n-- >>> is_palindrome('aaaaa')\n\
    -- True\n-- >>> is_palindrome('zbcd')\n-- False\nlocal function is_palindrome(text)\n\
    \    return text == text:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
