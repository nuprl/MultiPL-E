name: HumanEval_88_sort_array
language: lua
prompt: "-- Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n-- you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n-- or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n-- Note:\n-- * don't\
  \ change the given array.\n-- Examples:\n-- * sort_array([]) => []\n-- * sort_array([5])\
  \ => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n-- * sort_array([2,\
  \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nlocal function sort_array(array)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
  \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
  \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
  \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
  \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
  \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sorted_array = array\n    local is_odd\n    for _, value\
    \ in ipairs(array) do\n        is_odd = ((sum(value) + 1) % 2) == 1\n        if\
    \ is_odd then\n            table.insert(sorted_array, value)\n        end\n  \
    \  end\n    return sorted_array\nend", "  local total_sum = math.abs(array[1]\
    \ + array[2])\n  local sum\n  if total_sum % 2 == 1 then\n    sum = 1\n  else\n\
    \    sum = 0\n  end", "  local results = {}\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n    table.insert(results, value)\n\
    \  end\n  if sum ~= 0 then\n    local first_value = array[#array]\n    local last_value\
    \ = array[#array]\n    if sum % 2 == 1 then\n      for _, value in ipairs(array)\
    \ do\n        if value <= last_value then\n          last_value = value\n    \
    \    end\n      end\n      for _, value in ipairs(array) do\n        if value\
    \ >= first_value then\n          first_value = value\n        end\n      end\n\
    \    end\n    table.sort(results, function(a, b)\n      return a < b\n    end)\n\
    \    table.sort(results, function(a, b)\n      return a > b\n    end)\n  end\n\
    \  return results\nend", "  -- If empty array or invalid input array, return empty\
    \ array\n  -- Note: If the array is a number, it is automatically converted to\
    \ an array with one element.\n  -- Note: If the array is a string, then it would\
    \ be converted to an array with one element.\n  if #array == 0 then\n    return\
    \ nil\n  elseif type(array) == \"number\" then\n    array = {array}\n  elseif\
    \ type(array) == \"string\" then\n    array = {array}\n  else\n    assert(false,\
    \ \"invalid input array type argument\")\n  end", "  local sum1, sum2 = 0, 0\n\
    \  for i, v in ipairs(array) do\n    sum1 = sum1 + v\n    sum2 = sum2 + v * v\n\
    \  end", "  -- Your code here\n  local a = {}\n  for i=1,#array do\n    a[i] =\
    \ array[i]\n  end\n  for i=1,#a do\n    for j=1,#a do\n      if((j<i) xor (a[i]\
    \ + a[j] < a[i] + a[j+1]) then\n        local tmp = a[i]\n        a[i] = a[j]\n\
    \        a[j] = tmp\n      end\n    end\n  end\n  return a\nend", '  local result
    = {}', "\tlocal temp = {}\n\tfor i, v in ipairs(array) do\n\t\ttemp[v] = v\n\t\
    end\n\ttable.sort(temp)\n\tlocal array2 = {}\n\tfor i, v in ipairs(temp) do\n\t\
    \tarray2[v] = array[i]\n\tend\n\treturn array2\nend", "  if #array == 0 then\n\
    \    return array\n  end\n  local even, odd, sum, sorted_array, i", "  -- base\
    \ case\n  if #array == 1 then\n    return array\n  end", "  local i = 1\n  local\
    \ last_index = 0\n  while i < #array do\n    last_index = i - 1\n    local current_value\
    \ = array[i]\n    while i + 1 < #array and array[i + 1] > current_value do\n \
    \     last_index = last_index + 1\n      i = i + 1\n    end\n    array[last_index\
    \ + 1] = array[i]\n    i = i + 1\n  end\n  return array\nend", "    local last_index\
    \ = 1\n    local result = {}\n    local i, j, k, l, m, n, s, m, n", "  local i\
    \ = 0\n  local j = 1\n  local sort_array = {array[1], array[1]}", "  local function\
    \ is_odd(v)\n    return ((v mod 2) == 1) or (v > 0)\n  end", "    for i = 1, #array\
    \ do\n        local sum, diff = array[i] + array[i-1], array[i] - array[i-1]\n\
    \        if sum % 2 == 1 then\n            array[i] = array[i-1]\n           \
    \ array[i-1] = diff\n        end\n    end\n    return array\nend", "  local last_idx\
    \ = #array - 1\n  for idx = 1, last_idx do\n    local tmp = array[idx]\n    array[idx]\
    \ = array[last_idx]\n    array[last_idx] = tmp\n  end\n  if sum(array[1], array[last_idx])\
    \ % 2 then\n    table.sort(array)\n  else\n    table.sort(array, function (a,\
    \ b)\n      return b - a -- descending sort\n    end)\n  end\n  return array\n\
    end", "   if array[1] <= array[2] then\n      -- If the first element is the smallest,\
    \ place it in the beginning.\n      table.insert(array, array[1])\n      -- Insert\
    \ the other elements into the table.\n      for i = 2, #array do\n         table.remove(array)\n\
    \         table.insert(array, array[i])\n      end\n   else\n      -- If the last\
    \ element is the biggest, place it at the end.\n      table.insert(array, array[2])\n\
    \      -- Insert the other elements into the table.\n      for i = #array - 2,\
    \ 1, -1 do\n         table.remove(array)\n         table.insert(array, array[i])\n\
    \      end\n   end\n   return array\nend", "  local length = #array\n  local sorted_array\
    \ = array\n  local sum = 0\n  for i = 1, length do\n    sum = sum + array[i]\n\
    \    if sum ~= 0 then\n      if sum % 2 ~= 0 then\n        table.insert(sorted_array,\
    \ array[i])\n      else\n        table.insert(sorted_array, array[i])\n      \
    \  table.insert(sorted_array, array[length-i-1])\n      end\n    end\n  end\n\
    \  return sorted_array\nend", '    local len = #array', "  -- Write your code\
    \ here.\n  local index = 0\n  local sum = 0\n  local temp = 0\n  local temp1 =\
    \ 0\n  while index < array[1] do\n    temp = array[index]\n    sum = sum + temp\n\
    \    index = index + 1\n  end\n  if sum % 2 ~= 0 then\n    -- index = 0 => sum\
    \ % 2 == 0\n    array:reverse()\n  else\n    -- index = 0 => sum % 2 == 1\n  \
    \  index = index - 1\n  end\n  for index = 1, #array do\n    temp1 = array[index]\n\
    \    array[index] = temp1 + temp\n  end\n  return array\nend", "  assert(type.isNumArray(array))\n\
    \  local start = 0\n  local length = #array\n  while start < length\n  do\n  \
    \  local last_element = array[start]\n    local index = 1\n    while index < length\n\
    \    do\n      if array[index - 1] > last_element\n      then\n        array[start\
    \ + index + 1] = array[index - 1]\n        array[index - 1] = last_element\n \
    \     else\n        index = index + 1\n      end\n    end\n    start = start +\
    \ index\n  end\n  return array\nend", "    if not array then\n        return nil\n\
    \    end", "    assert(array:len() == 1 or array:len() == array:len() - 1, \"\
    invalid array\")\n    local sorted_array = array.clone\n    for i = 1, array:len()\
    \ do\n        local first_index_value = array[i]\n        local last_index_value\
    \ = array[i + 1] or 0\n        local sum_value = first_index_value + last_index_value\n\
    \        if sum_value % 2 == 1 then\n            -- even sum\n            sorted_array[i\
    \ - 1] = first_index_value\n            sorted_array[i + 1] = last_index_value\n\
    \        else\n            -- odd sum\n            sorted_array[i - 1] = last_index_value\n\
    \            sorted_array[i + 1] = first_index_value\n        end\n    end\n \
    \   return sorted_array\nend", "\tlocal result_array = array\n\tlocal array_length\
    \ = #array", "    local function swap(arr, index)\n        local t = arr[index]\n\
    \        arr[index] = arr[#arr]\n        arr[#arr] = t\n    end\n    local function\
    \ sum_func(arr)\n        local result = arr[1]\n        for i=2,#arr do\n    \
    \        local last_index = i-1\n            if arr[i] > arr[i-1] then\n     \
    \           last_index = i\n            end\n            result = arr[i] + result\n\
    \            arr[i] = result\n            swap(arr, last_index)\n        end\n\
    \        return result\n    end\n    local function odd_func(arr)\n        return\
    \ sum_func(arr) % 2 == 0\n    end\n    local function even_func(arr)\n       \
    \ return sum_func(arr) % 2 == 1\n    end\n    local function swap2(arr, index,\
    \ last)\n        if index == last then\n            return\n        end\n    \
    \    local t = arr[index]\n        arr[index] = arr[last]\n        arr[last] =\
    \ t\n        swap2(arr, index+1, last)\n    end\n    local function mergeSort(arr,\
    \ first, last)\n        if first >= last then\n            return\n        end\n\
    \        local mid = (first+last)//2\n        mergeSort(arr, first, mid)\n   \
    \     mergeSort(arr, mid+1, last)\n        if odd_func(arr) then\n           \
    \ swap2(arr, mid, last)\n        end\n    end\n    local temp = array[1]\n   \
    \ array[1] = array[#array]\n    array[#array] = temp\n    mergeSort(array, 1,\
    \ #array)\n    return array\nend", "   local sorted_array = array\n   for i, value\
    \ in ipairs(sorted_array) do\n      local index = 0\n      local last_value =\
    \ 0\n      for j, next_value in ipairs(sorted_array) do\n         if j > i then\n\
    \            index = j\n            last_value = next_value\n            break\n\
    \         end\n      end\n      if last_value % 2 == 0 then\n         table.insert(sorted_array,\
    \ value)\n      else\n         table.remove(sorted_array, index)\n         table.insert(sorted_array,\
    \ value)\n      end\n   end\n   return sorted_array\nend", "  if #array == 0 then\n\
    \    return array\n  end\n  local first_index = 2\n  local last_index = #array\
    \ - 1\n  local sum = 0\n  local is_odd = false\n  local new_array = {}\n  local\
    \ index = 0\n  repeat\n    sum = sum + array[index]\n    index = index + 1\n \
    \ until sum >= first_index\n  repeat\n    sum = sum - array[first_index]\n   \
    \ first_index = first_index + 1\n  until sum <= last_index\n  if sum > first_index\
    \ then\n    index = first_index\n    is_odd = false\n  else\n    index = last_index\n\
    \    is_odd = true\n  end\n  for i = index, last_index, 1 do\n    if is_odd then\n\
    \      new_array[i] = array[i + 1]\n    else\n      new_array[i] = array[i - 1]\n\
    \    end\n  end\n  return new_array\nend", "  assert(type(array) == \"table\"\
    \ and \"len\" in array and #array > 0 and type(array[1]) == \"number\",\n    \
    \     \"sort_array expect a table, and all its elements is numbers\")", "   assert(#array\
    \ > 0, \"Please input an array with positive integers to sort.\")\n   local result\
    \ = {}\n   local sum = 0\n   local temp = 0\n   local i = 1\n   for index = 1,\
    \ #array do\n      temp = array[i]\n      sum = sum + temp\n      if sum > 0 then\n\
    \         result[i] = temp\n      else\n         result[i] = array[i - 1]\n  \
    \    end\n      i = i + 1\n   end\n   if math.floor(sum/2) == math.floor(sum)\
    \ then -- descending\n      for index = 1, #result do\n         result[index]\
    \ = result[#result]\n      end\n   else -- ascending\n      for index = 1, #result\
    \ do\n         result[index] = result[index]\n      end\n   end\n   return result\n\
    end", "  assert(type(array) == \"table\" and \"table\" == type(array), \"argument\
    \ must be array\")\n  local len = #array\n  local sum = 0\n  for i = 1, len do\n\
    \    sum = sum + array[i]\n  end\n  \n  if sum % 2 ~= 0 then\n    return table.sort(array):reverse()\n\
    \  else\n    return table.sort(array)\n  end\nend", "  local sum = 0\n  local\
    \ length = #array\n  for i = 1, length do\n    sum = sum + array[i]\n  end\n \
    \ local swap\n  if math.fmod(sum, 2) ~= 0 then\n    swap = true \n  else\n   \
    \ swap = false \n  end\n  local tmp_array = {}\n  for i = 1, length do\n    if\
    \ swap then\n      tmp_array[i] = array[length - i - 1]\n    else\n      tmp_array[i]\
    \ = array[i]\n    end\n  end\n  return tmp_array\nend", "  local sum = 0\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n  end\n  sum = sum % 2\n  if sum\
    \ == 1 then\n    for i = #array, 1, -1 do\n      table.insert(array, table.remove(i))\n\
    \    end\n  else\n    for i = #array, 1, -1 do\n      table.insert(array, table.remove(i))\n\
    \    end\n  end\n  return array\nend", "  local result = {}\n  local start = 1\n\
    \  local end = #array", "  local sum = 0\n  for _,x in ipairs(array) do sum =\
    \ sum + x end\n  if sum % 2 == 1 then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(x,y) return y-x end)\n  end\n  return array\nend", "   -- O(1) space\n\
    \   local result = {}\n   local last_index = 1\n   local last_sum = 0\n   for\
    \ i, v in pairs(array) do\n      local current_index = last_index + i\n      --\
    \ O(1) space\n      last_sum = last_sum + v\n      -- O(n) time\n      if last_sum\
    \ % 2 ~= 0 then\n         result[i] = v\n      else\n         result[current_index]\
    \ = v\n      end\n      last_index = current_index\n      last_sum = last_sum\
    \ - v\n   end\n   return result\nend", "  local result = {}\n  if array[1] > array[2]\
    \ then\n    for i = 2, #array do\n      result[i] = array[i]\n    end\n  end\n\
    \  -- if sum is even, sort it in descending order and change result back to ascending\
    \ order\n  if array[1] < array[2] then\n    for i = 2, #result do\n      result[i]\
    \ = result[i - 1]\n    end\n  end\n  return result\nend", "  local last_index\
    \ = {}\n  local last_value = {}", "  if array[1] == nil then\n    return array\n\
    \  end\n  local new_array = {}\n  new_array[1] = array[1]\n  local sum = 0\n \
    \ for i = 2, #array do\n    if sum % 2 == 0 then\n      sum = sum + array[i]\n\
    \    else\n      sum = sum - array[i]\n    end\n    table.insert(new_array, sum)\n\
    \  end\n  return new_array\nend", "  local n = #array\n  local temp, index = {},\
    \ 1\n  for i = 1, n do\n    temp[i] = array[i]\n  end\n  for i=1, n/2 do\n   \
    \ local sum = 0\n    for j = i-1, n-i, -1 do\n      sum = sum + temp[j]\n    end\n\
    \    if sum%2 ~= 0 then\n      table.insert(index, i)\n    end\n    table.insert(index,\
    \ n-i)\n  end\n  for i=#temp,1,-1 do\n    table.insert(index, n-i)\n  end\n  for\
    \ i=#index, 1, -1 do\n    table.insert(index, temp[i])\n  end\n  return array\n\
    end", "   local sum = 0 -- initialize sum\n   for i=1,#array do\n      sum = sum\
    \ + array[i]\n   end\n   if sum % 2 ~= 0 then return table.sort(array, \"asc\"\
    ) else return table.sort(array, \"desc\") end\nend", "  if #array < 2 then\n \
    \   return array\n  else\n    local last_idx = #array - 1\n    local total_sum\
    \ = 0\n    local i = 0\n    local is_odd = 1\n    local is_even = 0\n    while\
    \ i < last_idx do\n      total_sum = total_sum + array[i]\n      if total_sum\
    \ % 2 ~= 0 then\n        is_even = 1\n        break\n      else\n        is_odd\
    \ = 1\n      end\n      i = i + 1\n    end\n    if is_even then\n      table.sort(array,\
    \ \"asc\")\n    else\n      table.sort(array, \"desc\")\n    end\n    return array\n\
    \  end\nend", "  local results = {}\n  for i = 1, #array do\n    local sum_first\
    \ = array[i] + array[i]\n    local sum_last = array[i] + array[i - 1]\n    if\
    \ sum_first % 2 == 0 and sum_last % 2 == 1 then\n      table.insert(results, array[i])\n\
    \    end\n  end\n  return results\nend", "  local _sum = 0\n  for _, _value in\
    \ ipairs(array) do\n    _sum = _sum + _value\n  end\n  if _sum % 2 then\n    return\
    \ array:sorted()\n  else\n    return array:reverse():sorted()\n  end\nend", " \
    \   local sum_array = table.fill(array[1], #array[1], 0)\n    for i = 2, #array\
    \ do\n        sum_array[i - 1] = array[i] + array[i - 1]\n    end\n    local odd,\
    \ even, temp\n    if sum_array[#sum_array] % 2 == 0 then\n        odd = true\n\
    \        even = false\n    else\n        odd = false\n        even = true\n  \
    \  end\n    local result_array = table.fill(array[1], #array, 0)\n    local i\
    \ = 0\n    for index = 1, #array do\n        local left = array[index]\n     \
    \   local right = array[index + 1]\n        if odd == true then\n            if\
    \ left < right then\n                result_array[i] = left\n                i\
    \ = i + 1\n            end\n        else\n            if left > right then\n \
    \               result_array[i] = right\n                i = i + 1\n         \
    \   end\n        end\n    end\n    return result_array\nend", "\tlocal sum = 0\n\
    \tfor i, value in ipairs(array) do\n\t\tsum = sum + value\n\tend\n\tif sum % 2\
    \ == 1 then\n\t\treturn table.sort(array, function(x, y)\n\t\t\tlocal tmp = x\
    \ - y\n\t\t\treturn tmp\n\t\tend)\n\telse\n\t\treturn table.sort(array, function(x,\
    \ y)\n\t\t\tlocal tmp = y - x\n\t\t\treturn tmp\n\t\tend)\n\tend\nend", "  local\
    \ last_index = {}\n  -- calculate the sum of the first two elements in array\n\
    \  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n    last_index[i]\
    \ = i\n  end\n  -- if the sum is even, then sort in descending order\n  if sum\
    \ % 2 == 1 then\n    table.sort(array, \"integer\", function(left, right)\n  \
    \    local left = array[left]\n      local right = array[right]\n      -- if the\
    \ sum is odd, then sort in ascending order\n      if sum % 2 == 0 then\n     \
    \   return left < right\n      else\n        return left > right\n      end\n\
    \    end)\n  -- if the sum is odd, then sort in ascending order\n  else\n    table.sort(array,\
    \ \"integer\", function(left, right)\n      local left = array[left]\n      local\
    \ right = array[right]\n      -- if the sum is even, then sort in descending order\n\
    \      if sum % 2 == 0 then\n        return left > right\n      else\n       \
    \ return left < right\n      end\n    end)\n  end\nend", "  local temp = {}\n\
    \  for i = 1, #array do\n    table.insert(temp, array[i])\n  end\n  table.sort(temp,\
    \ function(a, b) return math.abs(a - b) < 0 end)\n  return temp\nend", "    local\
    \ sum = 0\n    local sorted_array = array\n    for _, elem in ipairs(array) do\n\
    \        sum = sum + elem\n    end\n    if math.floor( sum / 2 ) == math.floor(sum)\
    \ then\n        table.sort(sorted_array)\n    else\n        table.sort(sorted_function(a,\
    \ a)+1)\n    end\n    return sorted_array\nend", "    local temp = {}\n    local\
    \ sum = 0\n    for idx, value in ipairs(array) do\n        sum = sum + value\n\
    \        temp[idx] = value\n    end\n    \n    if sum % 2 == 1 then\n        table.sort(temp)\n\
    \    else\n        table.sort(temp, function(a, b) return b - a end)\n    end\n\
    \    \n    return temp\nend", "  local array_size = #array\n  local array_size\
    \ = math.min(array_size, MAX_ARRAY_SIZE)\n  local index = 1\n  local result_array\
    \ = {}\n  local current_val = 0\n  local first_index_val\n  local last_index_val\n\
    \  local min_val\n  local max_val\n  while index < array_size do\n    local current_val\n\
    \    local first_index_val\n    local last_index_val\n    local min_val\n    local\
    \ max_val\n    if index > 1 then\n      min_val = array[index]\n      max_val\
    \ = array[index-1]\n      if min_val > max_val then\n        -- Swap current and\
    \ previous.\n        current_val = array[index]\n        array[index] = array[array.length-1]\n\
    \        array[array.length-1] = current_val\n      end\n      if min_val > 0\
    \ then\n        first_index_val = index\n      end\n      if max_val < 0 then\n\
    \        last_index_val = index\n      end\n    end\n    -- Increment index by\
    \ 1.\n    index = index + 1\n    -- If the sum of the first and last elements\
    \ is odd.\n    if first_index_val and last_index_val then\n      -- If the first\
    \ element is greater than the last element,\n      -- swap the elements.\n   \
    \   if array[index] then\n        if array[index] > array[last_index_val] then\n\
    \          -- Swap current and previous.\n          current_val = array[index]\n\
    \          array[index] = array[last_index_val]\n          array[last_index_val]\
    \ = current_val\n        end\n      end\n    end\n    -- If the sum of the first\
    \ and last elements is even.\n    if first_index_val and array[index] and last_index_val\
    \ then\n      -- If the first element is greater than the last element,\n    \
    \  -- swap the elements.\n      if array[index] then\n        if array[index]\
    \ > array[last_index_val] then\n          -- Swap current and previous.\n    \
    \      current_val = array[index]\n          array[index] = array[last_index_val]\n\
    \          array[last_index_val] = current_val\n        end\n      end\n    end\n\
    \    -- If the sum of the first and last elements is even.\n    if array[index]\
    \ and array[index] then\n      result_array[#result_array + 1] = array[index]\n\
    \    end\n  end\n  -- Return the new sorted array.\n  return result_array\nend",
  "  assert(array:len() >= 1)\n  local sum\n  local last_index\n  local sorted", "\t\
    local length = 0\n\tlocal last_item = 0\n\tlocal result", "    local new_array\
    \ = array\n    local length = #array", "  local new_array = {}\n  for i = 1, #array\
    \ do new_array[i] = array[i] end\n  local n = #new_array\n  if n % 2 == 1 then\n\
    \    table.sort(new_array, function(a, b)\n      local x = new_array[a]\n    \
    \  local y = new_array[b]\n      if x ~= y then\n        if x > y then\n     \
    \     return 1\n        else\n          return -1\n        end\n      end\n  \
    \    return 0\n    end)\n  else\n    table.sort(new_array, function(a, b)\n  \
    \    local x = new_array[a]\n      local y = new_array[b]\n      if x ~= y then\n\
    \        if x < y then\n          return -1\n        else\n          return 1\n\
    \        end\n      end\n      return 0\n    end)\n  end\n  return new_array\n\
    end", "  if array:len() == 0 then\n    return array\n  end", "    local result\
    \ = {}\n    for _, value in ipairs(array) do\n        table.insert(result, value)\n\
    \    end\n    table.sort(result)\n    for _, value in ipairs(array) do\n     \
    \   table.insert(result, value)\n    end\n    return result\nend", "  -- The sum\
    \ must always be odd and even\n  assert(array.len(), \"The input array cannot\
    \ be empty!\")\n  local odd, even = 0, 0\n  for i = 1, #array do\n    -- Sum the\
    \ first and last elements\n    local num = array[i] + array[i-1]\n    -- If the\
    \ sum is odd\n    if num % 2 == 1 then\n      odd = odd + 1 -- Keep a count of\
    \ odd/even indexes\n    else\n      even = even + 1 -- Keep a count of odd/even\
    \ indexes\n    end\n  end\n  if even > odd:\n    table.sort(array, function(el1,\
    \ el2)\n      return el1 < el2 -- Sort descending\n    end)\n  else\n    table.sort(array,\
    \ function(el1, el2)\n      return el1 > el2 -- Sort ascending\n    end)\n  end\n\
    \  -- Return the sorted array\n  return array\nend", "  local results = {}\n \
    \ local sum\n  local j\n  local i", "  local function compare(x, y) return x <\
    \ y end\n  local last_sum = 0, 0\n  local index = 1\n  for index = 1, #array do\n\
    \    if last_sum == 0 then\n      last_sum = array[index]\n    elseif last_sum\
    \ % 2 == 1 then\n      last_sum = last_sum + array[index]\n    else\n      last_sum\
    \ = last_sum - array[index]\n    end\n  end\n  if last_sum % 2 == 0 then\n   \
    \ return array\n  else\n    return array:sort(compare)\n  end\nend", "\tlocal\
    \ temp = {}\n\tlocal sum = 0\n\tfor i = 1, #array do\n\t\tsum = array[i]\n\t\t\
    for j = i, #array do\n\t\t\tsum = sum + array[j]\n\t\t\tif sum % 2 ~= 0 then\n\
    \t\t\t\ttable_insert(temp, array[j])\n\t\t\t\ttable_insert(temp, array[i])\n\t\
    \t\t\tarray[i] = nil\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn temp\n\
    end", "    local sum = 0\n    for i = 1, #array do\n        sum = sum + array[i]\n\
    \    end\n    if sum % 2 == 0 then\n        table.sort(array)\n    else\n    \
    \    table.sort(array, function(a, b)\n            if a < b then\n           \
    \     return 1\n            elseif a > b then\n                return -1\n   \
    \         end\n            return 0\n        end)\n    end\n    return array\n\
    end", "  local temp = {}\n  local length = #array\n  local sum = 0\n  for i =\
    \ 0, length do\n    sum = array[i] + sum\n  end\n  -- Check odd sum\n  if sum\
    \ % 2 ~= 0 then\n    table.sort(array, function (a, b)\n      return b - a\n \
    \   end)\n  end\n  -- Check even sum\n  else\n    table.sort(array, function (a,\
    \ b)\n      return a - b\n    end)\n  end\n  -- Return the sorted array\n  return\
    \ array\nend", "    if array:len() == 0 then\n        return nil\n    end\n  \
    \  -- sort ascending\n    if array.sum() % 2 == 1 then\n        table.sort(array)\n\
    \    else\n        table.sort(array, function(a, b) return b < a end)\n    end\n\
    \    return array\nend", "\tlocal new_array = {}\n\t\n\tlocal last_value = 0\n\
    \t\n\tfor i,v in pairs(array) do\n\t\tif last_value > v then\n\t\t\ttable.insert(new_array,v)\n\
    \t\telse\n\t\t\tif last_value < v then\n\t\t\t\ttable.insert(new_array,v)\n\t\t\
    \telse\n\t\t\t\ttable.insert(new_array,last_value)\n\t\t\t\ttable.insert(new_array,v)\n\
    \t\t\tend\n\t\tend\n\t\t\n\t\tlast_value = v\n\tend\n\t\n\ttable.sort(new_array)\n\
    \t\n\treturn new_array\nend", "  if #array == 0 then\n    return array\n  end",
  "    local new_array = {}\n    local sum_array = {}\n    local max_sum = 0\n   \
    \ for i = 1, #array do\n        sum_array[i] = array[i]\n    end", "  local sum_\
    \ = array[1]:sum() + 1\n  if sum_ % 2 ~= 0 then\n    return array:sort(function(a,\
    \ b) return a > b end):reverse()\n  else\n    return array:sort(function(a, b)\
    \ return a < b end):reverse()\n  end\nend", "  if #array == 0 then\n    return\
    \ array\n  end\n  local sum = 0\n  local index = 1\n  while index < #array do\n\
    \    sum = sum + array[index]\n    if sum % 2 == 1 then\n      table.sort(array,\
    \ index, index + 1, true)\n    else\n      table.sort(array, index, index + 1,\
    \ false)\n    end\n    index = index + 1\n  end\n  return array\nend", "   if\
    \ #array <= 1 then\n      return array\n   end", "  assert(array:len() > 0)\n\
    \  assert(array:len() <= 10000)\n  local index = 0\n  local maxSum = array:sum()\n\
    \  if maxSum%2 == 1 then\n    -- descending order\n    local swapped\n    table.sort(array,\
    \ function(x, _) return x > _  end)\n    local j = 1\n    for i = 1, array:len()\
    \ - 1 do\n      if array[i] ~= 0 then\n        assert(array:sub(j, j + 1) ~= 0)\n\
    \        swapped = 0\n        while j + 1 < array:len() and array[j + 1] == 0\
    \ do\n          j = j + 1\n          swapped = swapped + 1\n        end\n    \
    \    assert(j + 1 == array:len())\n        assert(array[j] == array[i])\n    \
    \    array[j] = array[i]\n        array[i] = 0\n      end\n    end\n    if swapped\
    \ ~= 0 then\n      index = 1\n    end\n  else\n    -- ascending order\n    table.sort(array,\
    \ function(x, _) return x < _  end)\n  end\n  return array\nend", "  for i, x\
    \ in ipairs(array) do\n    local last_index = #array\n    if i ~= last_index then\n\
    \      if array[i] + array[last_index] < 0 then\n        array[i], array[last_index]\
    \ = array[last_index], array[i]\n      else\n        array[i], array[last_index]\
    \ = array[last_index], array[i]\n      end\n    end\n  end\n  return array\nend",
  "    local sorted_array = {}\n    local max_value = math.max(array)\n    local min_value\
    \ = math.min(array)", "    local sum = 0\n    for i = 1, #array do\n        sum\
    \ = sum + array[i]\n    end\n    local odd = sum % 2 == 0\n    if odd then\n \
    \       table.sort(array, function (a, b) return a < b end)\n    else\n      \
    \  table.sort(array, function (a, b) return a > b end)\n    end\n    return array\n\
    end", "    local size = #array\n    local index = 0\n    local sum_1 = 0\n   \
    \ local sum_2 = 0\n    local odd_sum\n    local even_sum\n    local last_index\n\
    \    local sorted_array = {}\n    while index <= size do\n        sum_1 = sum_1\
    \ + array[index]\n        index = index + 1\n    end\n    odd_sum = sum_1 % 2\n\
    \    if odd_sum == 0 then\n        even_sum = sum_1 -- if even\n    else\n   \
    \     even_sum = sum_1 + 1 -- if odd\n    end\n    last_index = index - 1\n  \
    \  while index <= last_index do\n        sum_2 = sum_2 + array[index]\n      \
    \  index = index + 1\n    end\n    sorted_array[0] = even_sum\n    index = last_index\
    \ + 1\n    while index <= size do\n        sum_2 = sum_2 - array[index]\n    \
    \    index = index + 1\n    end\n    sorted_array[size] = odd_sum\n    for i =\
    \ last_index + 1, size - 1 do\n        sorted_array[i] = array[index - 1]\n  \
    \      index = index - 1\n    end\n    return sorted_array\nend", "  local start\
    \ = 0\n  local end\n  local sum", "  for i = 0, #array do\n    local first_value\
    \ = array[i]\n    for j = i + 1, #array do\n      local second_value = array[j]\n\
    \      if first_value + second_value == 0 then\n        array[j], array[i] = array[i],\
    \ array[j]\n      else\n        if first_value < second_value then\n         \
    \ array[j], array[i] = array[i], array[j]\n        end\n      end\n    end\n \
    \ end\n  return array\nend", "  local sum = 0\n  for i = 1, #array do\n    sum\
    \ = sum + array[i]\n  end\n  if sum % 2 == 0 then\n    return table.sort(array)\n\
    \  else\n    return table.reverse(table)\n  end\nend", "  local index = 0\n  local\
    \ sum = 0\n  local result = {}\n  while index <= #array do\n    sum = sum + array[index]\n\
    \    if sum ~= 0 then\n      if sum % 2 == 1 then\n        result[index] = array[#array\
    \ + 1]\n        array[#array + 1] = array[index]\n        array[index] = 0\n \
    \     else\n        result[index] = array[#array + 1]\n        array[#array +\
    \ 1] = array[index + 1]\n        array[index + 1] = 0\n      end\n    else\n \
    \     result[index] = array[index]\n      array[index] = 0\n    end\n    index\
    \ = index + 1\n  end\n  return result\nend", "\tif array:len() ~= 0 then\n\t\t\
    local sum = array[1]:sum() + array:len() - array[#array]:sum()\n\t\tif sum %2\
    \ == 1 then\n\t\t\ttable.sort(array)\n\t\telse\n\t\t\ttable.sort(array, function(a,\
    \ b)\n\t\t\t\tif a:sum() < b:sum() then\n\t\t\t\t\treturn true\n\t\t\t\telse\n\
    \t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend)\n\t\tend\n\tend\n\treturn array\n\
    end", "\tassert(array, \"array is nil\")\n\tassert(type(array) == \"table\", \"\
    array is not a table\")\n\tassert(#array > 0, \"array is nil\")\n\tlocal i = 1\n\
    \twhile i <= #array do\n\t\tlocal sum = 0\n\t\tfor j = i-1 to 1 do\n\t\t\tlocal\
    \ elem = array[j]\n\t\t\tsum = sum + elem\n\t\t\tarray[j] = elem\n\t\t\tif sum\
    \ > 0 then\n\t\t\t\tbreak\n\t\t\telseif sum < 0 then\n\t\t\t\tarray[i] = -array[i]\n\
    \t\t\tend\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn array\nend", "  local a = {}\n\
    \  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n    a[#a+1]\
    \ = array[i]\n  end\n  local even, odd = true, true\n  if sum % 2 ~= 0 then\n\
    \    even = false\n    odd = false\n  else\n    even = true\n    odd = true\n\
    \  end\n  if even then\n    for i = #a, 1, -1 do\n      array[i] = a[i]\n    end\n\
    \  else\n    for i = #a, 1, -1 do\n      array[i] = a[i-1]\n    end\n  end\n \
    \ return array\nend", "    if #array <= 1 then\n        return array\n    end",
  "    local temp, index = {}, 0\n    for _, x in ipairs(array) do\n        temp[index]\
    \ = x\n        index = index + 1\n    end\n    table.sort(temp)\n    return temp\n\
    end", "  local sorted, i, j, k, temp\n  sorted = {}\n  for i = 1, #array do sorted[#sorted\
    \ + 1] = array[i] end\n  for i = 1, #sorted do j = i - 1 while j < #sorted and\
    \ sorted[j] + sorted[j + 1] > sorted[i] + sorted[i - 1] and j = j + 1 else break\
    \ end end\n  for i = 1, #sorted do\n    for j = i + 1, #sorted do\n      if sorted[j]\
    \ > sorted[i] then temp = sorted[i] else temp = sorted[j] end\n      sorted[j]\
    \ = sorted[j]\n      sorted[j] = temp\n    end\n  end\n  return sorted\nend",
  "  local sum = 0\n  local sum_index = 0\n  for i = 1, #array do\n    sum = array[i]\
    \ + sum\n    sum_index = sum_index + 1\n  end\n  if sum_index == 1 then\n    --\
    \ sum( first index, last index ) = 1, return original array\n    return array\n\
    \  end\n  -- sum( first index, last index ) > 1, return sorted array\n  local\
    \ last_index = #array - 1\n  if sum % 2 then\n    return table.sort(array, function(index1,\
    \ index2)\n      return array[index2] > array[index1]\n    end)\n  else\n    return\
    \ table.sort(array, function(index1, index2)\n      return array[index2] < array[index1]\n\
    \    end)\n  end\nend", "   -- base case\n   if array == nil then\n      return\
    \ nil\n   end", "  local index = 0\n  local sum = 0\n  while index < array.length\
    \ do\n    sum = sum + array[index]\n    if sum % 2 ~= 0 then\n      table.sort(array,\
    \ index, #array - 1)\n    else\n      table.sort(array, index, #array - 1)\n \
    \   end\n    index = index + 1\n  end\n  return array\nend", "  if #array <= 1\
    \ then\n    return array\n  end\n  local function is_odd(n)\n    if n < 0 then\n\
    \      return false\n    end\n    if n % 2 == 0 then\n      return false\n   \
    \ end\n    return true\n  end\n  local function is_even(n)\n    if n < 0 then\n\
    \      return false\n    end\n    if n % 2 == 1 then\n      return false\n   \
    \ end\n    return true\n  end\n  local last_index = #array - 1\n  local first_index\
    \ = 1\n  local sum = 0\n  local min_diff = math.abs(array[1] - array[last_index])\n\
    \  local temp\n  while first_index <= last_index do\n    sum = sum + array[first_index]\n\
    \    temp = array[first_index]\n    array[first_index] = array[last_index]\n \
    \   array[last_index] = temp\n    first_index = first_index + 1\n    last_index\
    \ = last_index - 1\n    if sum < min_diff then\n      min_diff = math.abs(array[1]\
    \ - array[last_index])\n    end\n  end\n  if is_odd(sum) then\n    for i = first_index,\
    \ last_index, 1 do\n      temp = array[i]\n      array[i] = array[last_index]\n\
    \      array[last_index] = temp\n    end\n  else\n    for i = first_index, last_index,\
    \ 1 do\n      temp = array[i]\n      array[i] = array[first_index]\n      array[first_index]\
    \ = temp\n    end\n  end\n  return array\nend", "    local is_even\n    local\
    \ min_val, max_val = unpack(array)\n    local len = array:len()\n    local is_odd\
    \ = 0", "  if #array <= 1 then\n    return array\n  end\n  local result = {}\n\
    \  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n    result[#result\
    \ + 1] = array[i]\n    if sum > 0 then\n      if sum % 2 == 1 then\n        table.sort(result,\
    \ function(a, b) return a > b end)\n      else\n        table.sort(result, function(a,\
    \ b) return a < b end)\n      end\n    end\n  end\n  return result\nend", "  local\
    \ array_length = #array\n  -- Get the sum of all the values in the array.\n  local\
    \ sum_of_array = array[1]\n  for i = 2, array_length do\n    sum_of_array = sum_of_array\
    \ + array[i]\n  end", "    local max_value = math.max(array)\n    local min_value\
    \ = math.min(array)\n    local sort_flag = math.floor(max_value / 2) + 1\n   \
    \ local new_array = array\n    local index\n    if sort_flag == 1 then\n     \
    \   new_array = new_array:sort()\n        index = #new_array\n        for i =\
    \ 1, index - 1 do\n            if new_array[i] == min_value then\n           \
    \     new_array[i], new_array[i + 1] = new_array[i + 1], new_array[i]\n      \
    \      end\n        end\n    else\n        for i = 1, index - 1 do\n         \
    \   if new_array[i] == max_value then\n                new_array[i], new_array[i\
    \ + 1] = new_array[i + 1], new_array[i]\n            end\n        end\n    end\n\
    \    return new_array\nend", "  local last_index = #array\n  if last_index ==\
    \ 0 then\n    return array\n  else\n    local last_value = array[1]\n    local\
    \ last_index_value = #array\n    local i = 1\n    while i < last_index_value do\n\
    \      local value = array[i]\n      if value == last_value then\n        array\
    \ = array:concat({last_value})\n      else\n        -- The sum of the two values\
    \ is odd.\n        if last_value % 2 == 1 then\n          array = array:concat({last_value})\n\
    \        else\n          -- The sum of the two values is even.\n          array\
    \ = array:concat({last_value, value})\n        end\n      end\n      last_index_value\
    \ = #array\n      last_value = value\n      i = i + 1\n    end\n  end\n  return\
    \ array\nend", "  if array:len() == 0 then return array end\n  local start = 0\n\
    \  local middle = math.ceil(array:len() / 2)\n  local stop = middle\n  local sorted\
    \ = {}\n  local result", "    local sorted_array = {}\n    for _, el in ipairs(array)\
    \ do\n        if _ == 1 then\n            sorted_array[#sorted_array + 1] = el\n\
    \        else\n            local first_val = sorted_array[1]\n            local\
    \ last_val = el\n            if last_val > first_val then\n                local\
    \ temp = first_val\n                first_val = last_val\n                last_val\
    \ = temp\n            end", '  local results = {}', "    if #array == 0 then\n\
    \        return array\n    end\n    local sum_ = math.abs(array[1] + array[#array])\n\
    \    local reverse = false\n    if sum_ & 1 ~= 0 then\n        reverse = true\n\
    \    end\n    local temp_ = array[1]\n    local i = 1\n    for i = 2, #array do\n\
    \        if array[i] > temp_ then\n            temp_ = array[i]\n        end\n\
    \    end\n    if reverse then\n        array = array[#array]:reverse():merge(array)\n\
    \    else\n        array = array:merge(temp_)\n    end\n    return array\nend",
  "  if #array < 1 then\n    return array\n  end", "  -- Base case\n  if array ==\
    \ nil then\n    return array\n  end", "  local total_sum = 0\n  for i = 1, #array\
    \ do\n    total_sum = total_sum + array[i]\n  end", '  local results = {}', " \
    \ local odd_sum\n  odd_sum = 0\n  for i = 1, #array do\n    odd_sum = odd_sum\
    \ + array[i]\n  end\n  if odd_sum <= 0 then\n    table.sort(array)\n  end\n  return\
    \ array\nend", "    local i, j, k\n    local len = array:len()\n    for i = 1,\
    \ len do\n        local sum_of_first_i = array[i]\n        local sum_of_last_i\
    \ = array[len + i]\n        if math.mod(sum_of_first_i, 2) ~= 0 then\n       \
    \     table.insert(array, sum_of_last_i)\n            table.insert(array, sum_of_first_i)\n\
    \        end\n    end\n    for i = 1, len do\n        j = len - i - 1\n      \
    \  k = len - j\n        if math.mod(sum_of_last_i, 2) ~= 0 then\n            array[k]\
    \ = array[j]\n        end\n    end\n    return array\nend", "   -- calculate the\
    \ sum of the array\n   local sum = 0\n   for _, val in ipairs(array) do sum =\
    \ sum + val end\n   -- if the sum is odd, sort in ascending order\n   if sum %\
    \ 2 > 0 then\n      table.sort(array, function(a,b) return a < b end)\n   else\n\
    \      table.sort(array, function(a,b) return a > b end)\n   end\n   return array\n\
    end", "  for i = 1, array.length do\n    for j = i + 1, array.length do\n    \
    \  if array[i] + array[j] < array[i] then -- check if sum of the two index value\
    \ is odd\n        -- swap two index\n        local temp = array[i]\n        array[i]\
    \ = array[j]\n        array[j] = temp\n      end\n    end\n  end\n  return array\n\
    end", "\tif array.len == 0 then\n\t\treturn array\n\telse\n\t\tlocal sorted =\
    \ {}\n\t\tlocal sum = 0\n\t\tfor i = 1, array.len do\n\t\t\tsum = sum + array[i]\n\
    \t\t\tsorted[i] = array[i]\n\t\tend", "  local sum\n  local sorted_array", " \
    \ local tmp = {}\n  for i = 1, #array do\n    local sum = 0\n    for j = 1, #array\
    \ do\n      sum = sum + array[j]\n    end\n    if sum % 2 == 0 then\n      table.insert(tmp,\
    \ array[i])\n    end\n  end\n  table.sort(tmp)\n  return tmp\nend", "  local result\
    \ = {}\n  local length = #array\n  if length == 0 then\n    return result\n  elseif\
    \ length <= 0 then\n    -- return nil\n    return nil\n  elseif length == 1 then\n\
    \    return result\n  else\n    local i = 1\n    while i <= length do\n      local\
    \ sum = array[i] + array[i-1]\n      if ((sum % 2) == 1) then\n        result[#result+1]\
    \ = array[i]\n        array[i - 1] = 0\n      else\n        result[#result+1]\
    \ = array[i-1]\n        array[i] = 0\n      end\n      i = i + 1\n    end\n  \
    \  return result\n  end\nend", "  local i, j, k, p, q, tmp\n  local n = #array\n\
    \  local new_array = {}", "  local sorted = {}\n  local last_sum = 0", "  local\
    \ is_even = math.floor(math.fmod(array[1] + array[2], 2) == 0)\n  if is_even then\n\
    \    table.sort(array, function(a, b)\n      if a ~= b then\n        return a\
    \ > b\n      else\n        return false\n      end\n    end)\n  else\n    table.sort(array,\
    \ function(a, b)\n      if a ~= b then\n        return a < b\n      else\n   \
    \     return false\n      end\n    end)\n  end\n  return array\nend", "  -- Calculate\
    \ the sum of all elements in array.\n  local sum_array = table.unpack(\n    table.sort(\n\
    \      function(x, y)\n        return x + y\n      end,\n      array))\n  -- If\
    \ the sum of the given array is odd, sort it in ascending order.\n  if math.mod(sum_array[1],\
    \ 2.0) == 1.0 then\n    table.sort(array)\n  end\n  -- If the sum of the given\
    \ array is even, sort it in descending order.\n  if math.mod(sum_array[1], 2.0)\
    \ == 0.0 then\n    table.sort(array, reverse)\n  end\n  return array\nend", " \
    \ -- Write your code here\n  local sorted_array = array\n  local sum = 0\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n  end", "    local sum_array = array[2]\n\
    \    local result_array = array[1]\n    result_array[1] = array[1]\n    result_array[2]\
    \ = array[2]\n    result_array[3] = array[3]\n    result_array[4] = array[4]\n\
    \    \n    for i = 1, #array do\n        if sum_array % 2 == 1 then\n        \
    \    result_array[i] = -array[i]\n        else\n            result_array[i] =\
    \ array[i]\n        end\n        \n        sum_array = sum_array - array[i]\n\
    \    end\n    \n    return result_array\nend", "  local sum\n  local temp\n  local\
    \ result\n  for i = 1, #array do\n    sum = array[i]\n    temp = array[i + 1]\n\
    \    if sum % 2 == 1 then\n      table.remove(array, i)\n      table.remove(array,\
    \ i)\n      table.insert(result, temp)\n    else\n      table.remove(array, i\
    \ + 1)\n      table.remove(array, i)\n      table.insert(result, temp)\n     \
    \ table.insert(result, sum)\n    end\n  end\n  return result\nend", "  local result\n\
    \  local sum\n  local i\n  local tmp\n  local j\n  local result1\n  local result2\n\
    \  local result3\n  local result4\n  local result5\n  local result6\n  local result7",
  "  local new_array = {}\n  for i=1,#array do\n    if i == #array then break end\n\
    \    local sum = 0\n    for j=1,i do\n      sum = sum + array[j]\n    end\n  \
    \  if sum %2 == 1 then table.insert(new_array,array[#array]) else table.insert(new_array,array[#array]-1)\
    \ end\n  end\n  return new_array\nend", "    local function is_odd(n)\n      \
    \  return n and (n:size() % 2)\n    end", "    if #array == 0 then\n        return\
    \ array\n    end\n    if array[1] < array[#array] then\n        -- First sort\
    \ is descending\n        local temp = array[#array]\n        array[#array] = array[1]\n\
    \        array[1] = temp\n    end\n    local sum = 0\n    for i = 1, #array do\n\
    \        sum = sum + array[i]\n    end\n    local odd = sum % 2 == 1\n    if odd\
    \ then\n        -- Sort in ascending order\n        table.sort(array)\n    else\n\
    \        -- Sort in descending order\n        table.sort(array, function(i, j)\n\
    \            if array[i] > array[j] then\n                return 1\n         \
    \   elseif array[i] < array[j] then\n                return -1\n            else\n\
    \                return 0\n            end\n        end)\n    end\n    return\
    \ array\nend", "  if #array < 2 then\n    return array\n  end", '    if #array
    < 2 then return array end', "   local total = 0\n   for _, value in pairs(array)\
    \ do\n      total = total + value\n   end\n   if total % 2 == 1 then\n      table.sort(array)\n\
    \   else\n      table.sort(array, \"descend\")\n   end\n   return array\nend",
  "    local newArray = table.remove{}\n    for idx, value in ipairs(array) do\n \
    \       table.insert(newArray, value)\n    end\n    table.sort(newArray)\n   \
    \ return newArray\nend", "  if array == nil then\n    return nil\n  else\n   \
    \ local sum = 0\n    local result\n    for i = 1, #array do\n      sum = sum +\
    \ array[i]\n    end\n    if sum % 2 ~= 0 then\n      table.sort(array, function(a,\
    \ b)\n        return a < b\n      end)\n    else\n      table.sort(array, function(a,\
    \ b)\n        return a > b\n      end)\n    end\n    return result\n  end\nend",
  "  if #array == 0 then\n    return array\n  end", "  if array[1] == array[2] and\
    \ array[1] == array[3] and array[1]%2 == 1 then\n    return array\n  elseif array[1]\
    \ == array[2] and array[1] == array[3] and array[1]%2 == 0 then\n    return array\n\
    \  elseif array[1] == array[2] and array[1] == array[3] then\n    return array[3]\
    \ < array[2] and array or array[#array]\n  elseif array[1] == array[2] then\n\
    \    return array[1] < array[3] and array or array[#array]\n  elseif array[1]\
    \ == array[3] then\n    return array[2] < array[1] and array or array[#array]\n\
    \  else\n    return array\n  end\nend", "  local sum\n  local first_index\n  local\
    \ last_index\n  local i = 1\n  while i <= #array do\n    sum = array[i] + array[i]\n\
    \    sum = sum % 2\n    if sum == 0 then\n      array[i] = array[i]\n    else\n\
    \      if sum == 1 then\n        array[i] = array[i - 1]\n      else\n       \
    \ if array[i - 1] > array[i - 1] then\n          first_index = i - 1\n       \
    \ else\n          first_index = i - 2\n        end\n        last_index = i\n \
    \     end\n    end\n    i = i + 1\n  end\n  if first_index == last_index then\n\
    \    return array\n  else\n    if array[first_index] > array[last_index] then\n\
    \      table.sort(array, first_index, last_index)\n      table.sort(array, last_index\
    \ + 1, #array - 1)\n      table.sort(array, first_index + 1, last_index)\n   \
    \ else\n      table.sort(array, first_index, last_index)\n      table.sort(array,\
    \ first_index + 1, #array - 1)\n      table.sort(array, last_index + 1, #array\
    \ - 1)\n    end\n  end\n  return array\nend", "    local odd = function(x)\n \
    \       local sum = x[1] + x[2]\n        if sum % 2 ~= 0 then\n            return\
    \ sum - sum % 2\n        else\n            return sum\n        end\n    end\n\
    \    local even = function(x)\n        local sum = x[1] + x[2]\n        if sum\
    \ % 2 == 0 then\n            return sum - sum % 2\n        else\n            return\
    \ sum\n        end\n    end\n    table.sort(array, odd)\n    table.sort(array,\
    \ even)\n    return array\nend", "  local current_sum = 0\n  for _, item in pairs(array)\
    \ do\n    current_sum = current_sum + item\n    if current_sum % 2 ~= 0 then\n\
    \      table.sort(array, function(a, b)\n        return a > b\n      end)\n  \
    \  else\n      table.sort(array, function(a, b)\n        return a < b\n      end)\n\
    \    end\n  end\n  return array\nend", "  -- Base case\n  if #array <= 1 then\n\
    \    return array\n  end", "  local sum1 = nil\n  local sum2 = nil\n  local new_array\
    \ = array\n  local current_array = array\n  while #current_array ~= 0 do\n   \
    \ sum1 = sum1 + current_array[1]\n    sum2 = sum2 + current_array[-1]\n    --print(\"\
    sum1 = \" .. sum1 .. \" sum2 = \" .. sum2)\n    if sum2 % 2 == 1 then\n      new_array[#new_array\
    \ + 1] = {\n        min = current_array[1],\n        max = current_array[-1],\n\
    \      }\n      current_array = current_array[#current_array - 1]\n    else\n\
    \      new_array[#new_array + 1] = {\n        min = current_array[1],\n      \
    \  max = current_array[-1],\n      }\n      current_array = current_array[-1]\n\
    \    end\n  end\n  --print(\"new_array = \" .. table.concat(new_array, \", \"\
    ))\n  return new_array\nend", "  for i = 2, #array do\n    local last_elem = array[i-1]\n\
    \    if array[i] + last_elem % 2 ~= 0 then\n      table.remove(array, 1)\n   \
    \   table.insert(array, last_elem)\n      table.insert(array, array[i])\n    elseif\
    \ array[i] + last_elem % 2 = 0 then\n      table.remove(array, 1)\n      table.insert(array,\
    \ last_elem)\n    end\n  end\n  \n  return array\nend", "  if array == nil then\n\
    \    return array\n  end\n  if #array <= 1 then\n    return array\n  end", " \
    \   local sum = 0\n    for index = 1, #array do\n        sum = sum + array[index]\n\
    \    end\n    if sum % 2 == 1 then\n        table.sort(array)\n    end\n    return\
    \ array\nend", "    local max_sum = math.max( array[1], array[#array] )\n    local\
    \ min_sum = math.min( array[1], array[#array] )\n    if max_sum > min_sum then\n\
    \        if max_sum - min_sum % 2 == 1 then\n            -- ascending order\n\
    \            for i = 1, #array do\n                if array[i] > array[i-1] then\n\
    \                    local t = array[i]\n                    array[i] = array[i-1]\n\
    \                    array[i-1] = t\n                end\n            end\n  \
    \      else\n            -- descending order\n            for i = 1, #array do\n\
    \                if array[i] > array[i-1] then\n                    local t =\
    \ array[i]\n                    array[i] = array[i-1]\n                    array[i-1]\
    \ = t\n                end\n            end\n        end\n    end\n    return\
    \ array\nend", "  local sum = 0\n  local max_sum = 0\n  local min_sum = 100000000000\n\
    \  for _, v in pairs(array) do\n    sum = sum + v\n    if sum < min_sum then\n\
    \      min_sum = sum\n    end\n    if sum > max_sum then\n      max_sum = sum\n\
    \    end\n  end", "  local result = {}\n  local pointer = 1\n  local max_val =\
    \ 0", "  local total = 0\n  local temp_array = {}\n  for i, v in pairs(array)\
    \ do\n    total = total + v\n  end\n  if total % 2 == 1 then\n    for i = 1, #array\
    \ do\n      local min_value = array[i]\n      local max_value = array[i]\n   \
    \   for j = i+1, #array do\n        local v = array[j]\n        if min_value >\
    \ v then\n          min_value = v\n        elseif max_value < v then\n       \
    \   max_value = v\n        end\n      end\n      table.insert(temp_array, min_value)\n\
    \      table.insert(temp_array, max_value)\n    end\n  else\n    for i = 1, #array\
    \ do\n      local min_value = array[i]\n      local max_value = array[i]\n   \
    \   for j = i+1, #array do\n        local v = array[j]\n        if min_value >\
    \ v then\n          min_value = v\n        elseif max_value < v then\n       \
    \   max_value = v\n        end\n      end\n      table.insert(temp_array, max_value)\n\
    \      table.insert(temp_array, min_value)\n    end\n  end\n  return temp_array\n\
    end", "  local result = {}\n  for i, v in ipairs(array) do\n    table.insert(result,\
    \ v)\n  end\n  table.sort(result)\n  local sorted_result = {}\n  for i, v in ipairs(result)\
    \ do\n    sorted_result[i - 1] = v\n  end\n  return sorted_result\nend", "  assert(#array\
    \ >= 1, \"require an array with at least 1 element\")\n  local size = #array\n\
    \  local even = math.floor(math.fmod(size, 2))\n  local odd = math.floor(size\
    \ / 2)\n  -- if even, sort it, if odd, reverse it\n  return array:gsub(\".\",\
    \ function(num)\n    if even then\n      -- is even, sort it\n      return num\
    \ .. num:reverse()\n    else\n      -- is odd, reverse it\n      return num ..\
    \ num:reverse()\n    end\n  end)\nend", "  local length = array:size():totable()\n\
    \  assert(length, 'array is empty')", "  if #array == 0 then\n    return nil\n\
    \  else\n    local last_index, last_value = 0, array[1]\n    for _, value in ipairs(array)\
    \ do\n      local temp_index = last_index + 1 + value\n      if temp_index > last_index\
    \ then\n        last_index, last_value = temp_index, last_value\n      end\n \
    \   end\n    local new_array = {}\n    for _, value in ipairs(array) do\n    \
    \  new_array[last_index + value] = array[1]\n    end\n    new_array[last_index\
    \ + 1] = last_value\n    return new_array\n  end\nend", "  assert(is_array(array),\
    \ 'Array expected')\n  local num_elements = array:size()\n  -- If num_elements\
    \ is 0 the array is already sorted.\n  if num_elements == 0 then\n    return array\n\
    \  end", "    local arr = {}\n    for i = 1, #array do\n        if array[i - 1]\
    \ > array[i] then\n            arr[i] = array[i - 1]\n        else\n         \
    \   arr[i] = array[i]\n        end\n    end\n    return arr\nend", "  if #array\
    \ <= 1 then\n    return array\n  end", "  local result = {}\n  local sum = 0\n\
    \  for i = 1, #array do\n    sum = array[i] + sum\n    table.insert(result, sum)\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b)\n      if a > b then\n        return 1\n      elseif b > a then\n\
    \        return -1\n      else\n        return 0\n      end\n    end)\n  end\n\
    \  return result\nend", "  for i = 1, #array do\n    for j = i, #array do\n  \
    \    local current_value = array[i]\n      local next_value = array[j]\n     \
    \ if current_value > next_value then\n        array[i], array[j] = array[j], array[i]\n\
    \      end\n    end\n  end\n  return array\nend", "    local sum = 0\n    for\
    \ _, i in ipairs(array) do\n        sum = sum + i\n    end\n    local new_array\
    \ = {}\n    if sum % 2 == 1 then\n        table.sort(array, function(a, b)\n \
    \           return b - a\n        end)\n    else\n        table.sort(array, function(a,\
    \ b)\n            return a - b\n        end)\n    end\n    return array\nend",
  "  assert(type(array) == 'table',\n         'table parameter expected')\n  assert(#array\
    \ >= 0, 'array parameter expected')\n  assert(type(array[0]) == 'number',\n  \
    \       'array parameter expected containing numeric values')\n  local ret\n \
    \ local sum = 0\n  for _, v in pairs(array) do\n    sum = sum + v\n  end\n  if\
    \ sum % 2 == 1 then\n    ret = array:sort()\n  else\n    ret = array:sort(function(a,\
    \ b) return a > b end)\n  end\n  return ret\nend", "  local temp = {}\n  local\
    \ flag = false\n  local flag2 = false\n  local sum = 0\n  local n = #array", " \
    \ local len = #array\n  local sum = 0", "  local sum, min_idx, max_idx = 0, 0,\
    \ array[1]\n  for i = 2, #array do\n    sum, min_idx, max_idx = sum + array[i],\
    \ min_idx, max_idx\n  end\n  if sum % 2 == 1 then\n    return array\n  else\n\
    \    if min_idx ~= nil then\n      local temp = array[min_idx]\n      array[min_idx]\
    \ = array[max_idx]\n      array[max_idx] = temp\n      return array\n    else\n\
    \      return array\n    end\n  end\nend", "  local function comparator(index1,\
    \ index2)\n    local first = array[index1]\n    local last = array[index2]\n \
    \   local sum\n    if first then\n      if last then\n        sum = first + last\n\
    \      else\n        sum = first\n      end\n    else\n      sum = last\n    end\n\
    \    return sum\n  end\n  return table.sort(array, comparator)\nend", "  if #array\
    \ < 1 then\n    return array\n  end\n  local sum = 0\n  local result = {}\n  local\
    \ max = array[#array]\n  for i = 1, #array do\n    sum = array[i] + sum\n    if\
    \ sum > max then\n      max = array[i]\n    end\n  end\n  table.sort(array, function(t1,\
    \ t2)\n    local a = t1 - sum\n    local b = t2 - sum\n    if a > b then\n   \
    \   return 1\n    elseif b > a then\n      return -1\n    else\n      return 0\n\
    \    end\n  end)\n  for i = 1, #array do\n    result[i] = array[i]\n  end\n  if\
    \ max % 2 == 1 then\n    table.sort(result, function(t1, t2)\n      local a =\
    \ t1 - max\n      local b = t2 - max\n      if a > b then\n        return 1\n\
    \      elseif b > a then\n        return -1\n      else\n        return 0\n  \
    \    end\n    end)\n  end\n  return result\nend", "  local index = 1\n  local\
    \ odd = false\n  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n\
    \    if sum > 0 then\n      local tmp = array[i]\n      array[i] = array[sum]\n\
    \      array[sum] = tmp\n    end\n    odd = not odd\n    if odd then\n      index\
    \ = index + 1\n    end\n  end\n  return array\nend", "   for i = #array, 1, -1\
    \ do\n      local last = array[i]\n      for j = i - 1, 1, -1 do\n         local\
    \ value = array[j]\n         if value < last then\n            array[j] = last\n\
    \            last = value\n         end\n      end\n      array[1] = last\n  \
    \ end\n   return array\nend", "    local index = 0\n    local sum = 0\n    local\
    \ is_odd = false", "\tif type(array) == \"table\" then\n\t\treturn table.remove(array);\n\
    \tend", "  -- Sum array first, then sort\n  return table.sort(\n    function(x,\
    \ y)\n      -- Use sum to sort in ascending order\n      return x == y and x ==\
    \ array[1] + array[2] or x == array[2] - array[1]\n    end)\nend", "  local index\
    \ = 1\n  local index_max = 1\n  local sum = 0\n  local temp = 0\n  local results\
    \ = {}", "  if #array == 0 then\n    return array\n  end\n  local odd = nil\n\
    \  local even = nil\n  local i = 0\n  for i = 1, #array do\n    local first_value\
    \ = array[i]\n    local last_value = array[i - 1]\n    if #array % 2 == 1 then\n\
    \      if odd == nil then\n        odd = array\n      end\n      if first_value\
    \ ~= last_value and odd.last_value == first_value then\n        table.insert(odd,\
    \ last_value)\n      else\n        table.insert(even, first_value)\n      end\n\
    \    else\n      if even ~= nil and even.last_value == first_value then\n    \
    \    table.insert(even, last_value)\n      else\n        table.insert(odd, first_value)\n\
    \      end\n    end\n  end\n  return odd\nend", "  if #array < 1 then\n    return\
    \ array\n  end", "\tlocal i = 0\n\tlocal last_value = array[1]\n\twhile i < #array\
    \ do\n\t\tlocal current_value = array[i]\n\t\tif current_value == last_value then\n\
    \t\t\ttable.insert(array, current_value)\n\t\telse\n\t\t\tlast_value = current_value\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn array\nend", "    assert(type(array) ==\
    \ \"table\")\n    if #array == 0 then\n        return array\n    end\n    if #array\
    \ == 1 then\n        array[#array]:= array[#array] + array[#array]\n        return\
    \ array\n    end\n    -- sum( first index value, last index value) is odd, sort\
    \ ascending order\n    if array[#array] == array[#array - 1] + array[#array -\
    \ 1] then\n        return array\n    end\n    -- sum( first index value, last\
    \ index value) is even, sort descending order\n    array[#array]:= array[#array\
    \ - 1] + array[#array - 1]\n    array:resize(#array, 0, #array - 1)\n    return\
    \ array\nend", "  local start\n  if type(array) ~= \"table\" then\n    error(\"\
    Given argument is not an array\")\n  end\n  local result = {}\n  local sum = 0\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(result, function(a, b) return a < b end)\n  else\n    table.sort(result,\
    \ function(a, b) return a > b end)\n  end\n  return result\nend", "\tif #array\
    \ < 2 then return array end\n\tlocal sum, mid, temp, i, k, j, n = 0, 0, 0, 0,\
    \ 0, 0, 0\n\tlocal temp = { array[1], array[#array] }\n\twhile #temp > 1 do\n\t\
    \tsum = temp[1] + temp[2]\n\t\tmid = #temp / 2\n\t\tif sum % 2 == 1 then\n\t\t\
    \ttemp[mid], temp[n] = temp[n], temp[mid]\n\t\telse\n\t\t\ttemp[mid], temp[n]\
    \ = temp[n], temp[mid]\n\t\t\tn = mid + 1\n\t\tend\n\t\ti = n - 1\n\t\twhile i\
    \ >= 1 do\n\t\t\tk = j + 1\n\t\t\twhile k < n do\n\t\t\t\tsum = temp[i] + temp[k]\n\
    \t\t\t\tif sum % 2 ~= 1 then\n\t\t\t\t\ttemp[k], temp[j] = temp[j], temp[k]\n\t\
    \t\t\t\tk = k + 1\n\t\t\t\telse\n\t\t\t\t\tk = k + 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\t\tj = k - 1\n\t\tend\n\tend\n\treturn temp\nend", "    assert(array:len()\
    \ > 0)\n    if array:sum() % 2 == 1 then\n        return array:sorted(function\
    \ (a, b) return b - a end)\n    end\n    return array:sorted(function (a, b) return\
    \ a - b end)\nend", "    local sum\n    local i, j, k, temp, temp1\n    local\
    \ n = #array\n    local flag", "  local sum = 0\n  local result\n  local index\
    \ = 1\n  local even\n  while index < #array do\n    sum = sum + array[index]\n\
    \    even = (sum % 2) == 0\n    if even then\n      result = result or array[index]\n\
    \    else\n      result = result or array[index]:reverse()\n    end\n    index\
    \ = index + 1\n  end\n  return result\nend", "  local function comparator(first_index,\
    \ last_index)\n    if first_index < last_index then\n      local first_value =\
    \ array[first_index]\n      local last_value = array[last_index]\n      local\
    \ first_is_odd = (first_index % 2 ~= 0)\n      local last_is_odd = (last_index\
    \ % 2 ~= 0)", "    local sum\n    local count\n    for i = 1, #array do\n    \
    \    sum = array[i] + array[i]\n        count = i\n        if sum > 0 then\n \
    \           break\n        end\n    end\n    local index = #array - count + 1\n\
    \    if sum % 2 ~= 0 then\n        table.sort(array, function(_,n) return n end)\n\
    \    else\n        table.sort(array, function(_,n) return n end)\n    end\n  \
    \  table.insert(array, index, array[#array])\n    array[index] = nil\n    return\
    \ array\nend", "  -- start with the array sorted in ascending order\n  local ascending\
    \ = true\n  -- keep track of how many elements are in the array\n  local elements\
    \ = 0\n  -- iterate through the array, adding each one to a cumulative sum\n \
    \ for i = 1, #array do\n    -- increment the count of elements in the array\n\
    \    elements = elements + 1\n    -- update the sum after each element has been\
    \ added\n    local sum = 0\n    -- iterate through the array, adding each one\
    \ to the sum\n    for j = 1, #array do\n      -- add the element to the sum\n\
    \      sum = sum + array[j]\n      -- if the current sum is odd, descending\n\
    \      if sum % 2 == 1 then\n        -- switch to descending order\n        ascending\
    \ = not ascending\n      -- otherwise, keep ascending order\n      else\n    \
    \    -- switch to ascending order\n        ascending = true\n      end\n    end\n\
    \    -- after iterating through all elements, if the sum is even, then swap them\
    \ and return\n    -- otherwise, return ascending order array\n    if sum % 2 ==\
    \ 0 then\n      local temp = array[1]\n      array[1] = array[-1]\n      array[-1]\
    \ = temp\n    end\n  end\n  return ascending == true and array or table.reverse(array)\n\
    end", "  -- Base case\n  if array == nil then\n    return array\n  end", "  local\
    \ sum = 0\n  for _, v in ipairs(array) do\n    sum = sum + v\n  end\n  local odd\
    \ = (sum % 2 == 1)\n  if odd then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(x, y)\n      return y[1] <=> x[1]\n    end)\n  end\n  return array\n\
    end", "  local sum\n  local array_size = #array\n  if array_size == 0 then\n \
    \   return array\n  end\n  sum = 0\n  for i = 1, array_size do\n    sum = sum\
    \ + array[i]\n  end\n  local last_element\n  if sum % 2 ~= 0 then\n    last_element\
    \ = array[array_size - 1]\n    array:add(array[array_size - 1], array[array_size\
    \ - 2])\n    array:remove(array[array_size - 2])\n    array_size = array_size\
    \ - 2\n  else\n    last_element = array[array_size - 1]\n    array:remove(array[array_size\
    \ - 1])\n    array_size = array_size - 1\n  end\n  for i = 1, array_size do\n\
    \    array[i] = array[i] + last_element\n  end\n  return array\nend", "  local\
    \ sum, last_index\n  sum = 0\n  last_index = 1\n  for i = 1, #array do\n    sum\
    \ = sum + array[i]\n    if sum == 0 then\n      table.remove(array)\n      last_index\
    \ = i\n      sum = 1\n    end\n  end\n  if sum % 2 ~= 0 then\n    table.remove(array)\n\
    \  end\n  return array\nend", "  assert(type(array) == \"table\")\n  local len\
    \ = array:len()\n  assert(len > 0)\n  if len == 1 then\n    local val = array[1]\n\
    \    if type(val) == \"table\" then\n      -- array is already sorted\n      return\
    \ array\n    elseif val < 0 then\n      -- array is sorted in ascending order,\
    \ descend\n      return array:reverse():sort()\n    else\n      -- array is sorted\
    \ in descending order, ascend\n      return array:sort()\n    end\n  end\n  if\
    \ array:sum(2) % 2 == 0 then\n    local odd_sum = 0\n    for i = 1, len do\n \
    \     odd_sum = odd_sum + array[i]\n    end\n    odd_sum = odd_sum / 2\n    if\
    \ odd_sum % 2 == 0 then\n      -- array is sorted in ascending order, descend\n\
    \      array:reverse():sort()\n    else\n      -- array is sorted in descending\
    \ order, ascend\n      array:sort()\n    end\n  else\n    local even_sum = 0\n\
    \    for i = 1, len do\n      even_sum = even_sum + array[i]\n    end\n    even_sum\
    \ = even_sum / 2\n    if even_sum % 2 == 1 then\n      -- array is sorted in descending\
    \ order, ascend\n      array:sort()\n    else\n      -- array is sorted in ascending\
    \ order, descend\n      array:reverse():sort()\n    end\n  end\n  return array\n\
    end", "   -- base case\n   if #array == 0 then\n      return array\n   end\n \
    \  -- two pointers\n   local last_index = #array -- get the last index\n   local\
    \ second_last_index = last_index - 1\n   -- base case\n   if last_index == 1 then\n\
    \      return array\n   end\n   -- get sum\n   local sum = 0\n   for i = 1, last_index\
    \ do\n      sum = sum + array[i]\n   end\n   -- if the sum is odd, sort in ascending\
    \ order, otherwise in descending order\n   local temp = sum\n   if temp % 2 ==\
    \ 1 then\n      -- sort ascending\n      for i = 1, last_index do\n         array[i]\
    \ = array[i]\n      end\n      array[last_index] = array[second_last_index]\n\
    \      array[second_last_index] = temp\n   else\n      -- sort descending\n  \
    \    for i = 1, last_index do\n         array[i] = array[second_last_index]\n\
    \      end\n      array[last_index] = temp\n      array[second_last_index] = array[last_index\
    \ + 1]\n   end\n   return array\nend", "\tlocal sum = 0\n\tlocal sum1 = 0\n\t\
    local len = array:len()\n\tfor i = 1, len do\n\t\tsum = sum + array[i]\n\t\tif\
    \ sum % 2 == 1 then\n\t\t\tsum1 = sum1 + array[i]\n\t\tend\n\tend", "  local newArray\
    \ = {}\n  local isOdd = true\n  local isEven = true\n  for index, value in ipairs(array)\
    \ do\n    if isEven then\n      if isOdd then\n        newArray[#newArray + 1]\
    \ = value\n      end\n      isEven = false\n    else\n      if isOdd then\n  \
    \      newArray[#newArray + 1] = value\n      end\n      isOdd = false\n    end\n\
    \  end\n  return newArray\nend", "  if #array > 1 then\n    local temp, result\
    \ = array[1], array{}\n    for i = 2, #array do\n      if ((array[i] + result[#result])\
    \ % 2 == 1) then\n        result[#result+1] = array[i]\n      else\n        result[#result+1]\
    \ = result[#result]\n      end\n    end\n    for i = 1, #result do\n      temp\
    \ = result[i]\n      result[i] = result[i-1]\n      result[i-1] = temp\n    end\n\
    \    return result\n  end\n  return\nend", "    if array == nil then\n       \
    \ return nil\n    end\n    local len = array:len()\n    if len == 0 then\n   \
    \     return array\n    end", "   local temp\n   if #array > 0 then\n      --\
    \ Compute the sum of the first element and the last element\n      temp = array[1]\n\
    \      for i = 2,#array do\n         temp = temp + array[i]\n      end\n     \
    \ -- If the sum is odd, sort in ascending order\n      if math.mod(temp, 2) ==\
    \ 1 then\n         return array\n      -- If the sum is even, sort in descending\
    \ order\n      else\n         return array:reverse()\n      end\n   else\n   \
    \   return array\n   end\nend", "\tassert(type(array) == \"table\")\n\tlocal res\
    \ = {}\n\ttable.sort(array, function (a, b) return (a < b) end)\n\tif array[1]\
    \ ~= array[2] then\n\t\tif array[array[2]] % 2 ~= 0 then\n\t\t\tres[1] = array[array[2]]\n\
    \t\t\tres[2] = array[array[1]]\n\t\telse\n\t\t\tres[1] = array[array[1]]\n\t\t\
    \tres[2] = array[array[2]]\n\t\tend\n\tend\n\tfor i = 4, #array do\n\t\tres[i]\
    \ = array[i]\n\tend\n\treturn res\nend", "  if #array < 1 then return array end\n\
    \  local function get_sum(array)\n    local sum = 0\n    for idx = 1, #array do\n\
    \      sum = sum + array[idx]\n    end\n    return sum\n  end\n  local function\
    \ is_odd_sum(array)\n    local sum = get_sum(array)\n    return sum % 2 == 1\n\
    \  end\n  local function is_even_sum(array)\n    local sum = get_sum(array)\n\
    \    return sum % 2 == 0\n  end\n  local temp\n  if is_odd_sum(array) then temp\
    \ = array else temp = array:reverse() end\n  local array = {array[#temp]}\n  if\
    \ #temp > 0 then\n    for idx = 1, #temp do\n      table.insert(array, temp[idx])\n\
    \    end\n  end\n  local returnArray\n  if is_even_sum(array) then\n    returnArray\
    \ = array\n  else\n    returnArray = array:reverse()\n  end\n  return returnArray\n\
    end", "  local sum = 0\n  local result\n  local odd_sum = 0\n  local even_sum\
    \ = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum > 0 then\n\
    \      if sum % 2 ~= 0 then\n        odd_sum = odd_sum + array[i]\n      else\n\
    \        even_sum = even_sum + array[i]\n      end\n    end\n  end", "    if #array\
    \ > 0 then\n        local sum = 0\n        local sum2 = 0\n        local first\
    \ = true\n        local index = 1\n        local j = #array - 1\n        while\
    \ j > 0 do\n            sum = sum + array[j]\n            sum2 = sum2 + array[j]\n\
    \            if sum2 > 0 then\n                if sum %% 2 == 1 then\n       \
    \             if first then\n                        index = index + 1\n     \
    \               else\n                        local k = #array\n             \
    \           while k > 1 do\n                            if array[k - 1] <= array[k]\
    \ then\n                                table.insert(array, array[k - 1])\n  \
    \                              table.remove(array, k)\n                      \
    \          k = k - 1\n                            else\n                     \
    \           break\n                            end\n                        end\n\
    \                        index = index + 1\n                    end\n        \
    \            table.insert(array, array[j])\n                    table.remove(array,\
    \ j)\n                    j = j - 1\n                else\n                  \
    \  if first then\n                        index = index + 1\n                \
    \    else\n                        local k = #array\n                        while\
    \ k > 1 do\n                            if array[k - 1] >= array[k] then\n   \
    \                             table.insert(array, array[k - 1])\n            \
    \                    table.remove(array, k)\n                                k\
    \ = k - 1\n                            else\n                                break\n\
    \                            end\n                        end\n              \
    \          index = index + 1\n                    end\n                    table.insert(array,\
    \ array[j])\n                    table.remove(array, j)\n                    j\
    \ = j - 1\n                end\n            else\n                if first then\n\
    \                    index = index + 1\n                else\n               \
    \     local k = #array\n                    while k > 1 do\n                 \
    \       if array[k - 1] <= array[k] then\n                            table.insert(array,\
    \ array[k - 1])\n                            table.remove(array, k)\n        \
    \                    k = k - 1\n                        else\n               \
    \             break\n                        end\n                    end\n  \
    \                  index = index + 1\n                end\n                table.insert(array,\
    \ array[j])\n                table.remove(array, j)\n                j = j - 1\n\
    \            end\n            first = false\n        end\n    end\n    return\
    \ array\nend", "  local result_array = {}\n  for i = 1, #array do\n    local sum\
    \ = array[i]\n    local tmp_array = result_array\n    for j = #result_array, 1,\
    \ -1 do\n      local tmp_sum = tmp_array[j]\n      if sum < tmp_sum then\n   \
    \     tmp_array[j + 1] = tmp_array[j]\n      elseif sum > tmp_sum then\n     \
    \   tmp_array[1] = tmp_array[j]\n        break\n      else\n        tmp_array[j]\
    \ = tmp_sum\n        break\n      end\n    end\n  end\n  return result_array\n\
    end", "  local last_sum = 0\n  for _, value in ipairs(array) do\n    last_sum\
    \ = last_sum + value\n    if last_sum % 2 ~= 0 then\n      table.sort(array)\n\
    \    end\n  end\n  return array\nend", "  for i, v in ipairs(array) do\n    if\
    \ i > 1 then\n      if v:sum() == v:sum() + array[i-1] then\n        array[i]\
    \ = array[i-1]\n      else\n        array[i] = v\n      end\n    end\n  end\n\
    \  return array\nend", "  for i = 1, #array do\n    local tmp1 = array[i]\n  \
    \  local tmp2 = array[i + 1]\n    local tmp3, tmp4\n    if tmp1 == 0 and tmp2\
    \ ~= 0 then\n      tmp3 = tmp2\n      tmp4 = tmp1\n    elseif tmp1 ~= 0 and tmp2\
    \ == 0 then\n      tmp3 = tmp1\n      tmp4 = tmp2\n    elseif tmp1 > tmp2 then\n\
    \      tmp3 = tmp1\n      tmp4 = tmp2\n    else\n      tmp3 = tmp2\n      tmp4\
    \ = tmp1\n    end\n    array[i + 1] = tmp3\n    array[i] = tmp4\n  end\n  return\
    \ array\nend", "  if #array == 0 then\n    return array\n  end", "    if array:len()\
    \ ~= 1 then\n        error(string.format(\"sort_array: expect 1 element array,\
    \ got %d in array\", array:len()))\n    end", "  local temp = {}\n  local first_index\
    \ = -1\n  for i = 1, #array do\n    if array[i] ~= 0 then\n      temp[#temp +\
    \ 1] = array[i]\n    end\n    if array[i] == 0 and first_index == -1 then\n  \
    \    first_index = i\n    end\n  end\n  table.sort(temp, function(a, b)\n    return\
    \ b - a or (b == 0 and a - first_index)\n  end)\n  table.copy(array, 1, #temp,\
    \ temp)\nend", "  assert(type(array) == \"table\", \"sort_array requires array\
    \ as input\")\n  local sum = 0\n  for _, value in ipairs(array) do\n    sum =\
    \ sum + value\n  end", "  if array:len() == 0 then return array end\n  local tmp_array\
    \ = table.remove(array)\n  table.sort(tmp_array, function (a, b)\n    local first\
    \ = ( a > b )\n    local val\n    if first then\n      val = b\n    else\n   \
    \   val = a\n    end\n    return val\n  end)\n  return tmp_array\nend", "    for\
    \ i = 1, #array do\n        local curr = array[i]\n        local index = i\n \
    \       local sum = 0\n        while(index > 0) and (array[index - 1] > curr)\
    \ do\n            sum = sum + array[index - 1]\n            index = index - 1\n\
    \        end\n        if ((index <= 0) and (sum % 2) ~= 1) or ((index <= 0) and\
    \ (sum % 2) == 1) then\n            table.insert(array, curr)\n        end\n \
    \   end\n    return array\nend", "    if not array then\n        return array\n\
    \    end\n    local temp = {}\n    for i = 1, #array do\n        temp[i] = array[i]\n\
    \    end\n    table.sort(temp)\n    for i = 1, #temp do\n        array[i] = temp[i]\n\
    \    end\n    return array\nend", "  if array:len() == 0 then\n    return array\n\
    \  end\n  local total_sum = 0\n  for i = 1, #array do\n    total_sum = total_sum\
    \ + array[i]\n  end\n  if total_sum <= 0 then\n    return array\n  end\n  local\
    \ even, odd = 0, 1\n  local last_index = #array - 1\n  for i = 1, #array do\n\
    \    local index = #array - i - 1\n    local sum, cur = array[index], array[i]\n\
    \    if sum % 2 == 0 then\n      array[last_index] = cur\n      last_index = last_index\
    \ - 1\n    else\n      array[last_index] = array[last_index - 1]\n      last_index\
    \ = last_index - 1\n    end\n  end\n  if total_sum % 2 == 1 then\n    array[last_index]\
    \ = array[last_index - 1]\n  end\n  return array\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
