name: HumanEval_146_specialFilter
language: lua
results:
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  for i = 1, #nums do\n\
    \    if nums[i] > 10 then\n      if nums[i] % 2 ~= 0 then \n        nums[i] =\
    \ nil\n      end\n    end\n  end\n  return #nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp91b656.lua:21:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmphp91b656.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local len = 1\n    local\
    \ i = 0\n    while i < #nums do\n        if nums[i]>10 then\n            if nums[i]%2==1\
    \ then\n                len = len+1\n            end\n            if nums[i]%2==0\
    \ then\n                if nums[i]%10==1 then\n                    len = len+1\n\
    \                end\n                if nums[i]%10==0 then\n                \
    \    len = len+1\n                end\n            end\n        end\n        i\
    \ = i+1\n    end\n    return len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn60w9ca9.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpn60w9ca9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpn60w9ca9.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local n = 1\n  for i =\
    \ 1, #nums do\n    if nums[i] > 10 then\n      if nums[i] ~= math.floor(nums[i])\
    \ then\n        if nums[i] - math.floor(nums[i]) ~= (nums[i] - nums[i - 1]) ~=\
    \ (nums[i] * nums[i - 1]) then\n          n = n + 1\n        end\n      end\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa89_a1rh.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa89_a1rh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- Initialize counter\
    \ to 0\n  local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxo218gi2.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = nums[1]\n\
    \    for _, num in ipairs(nums[#nums]) do\n        if num > 10 and (math.floor(math.log10(num))%2\
    \ ~= 0 and math.floor(math.log10(num))%2 ~= 1) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a number value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local sum = 0\n  for _,\
    \ num in pairs(nums) do \n    if num > 10 then\n      sum = sum + 1 \n      if\
    \ num and (num % 2 == 1 and num % 4 != 1 or num % 2 != 1 and num % 4 != 1) then\n\
    \        sum = sum + 1 \n      end\n    end\n  end\n  return sum\nend\n</cell>\n\
    <text>\nPractice 1\nWrite a function that takes two arrays as input. The function\
    \ should return a new array with all the elements of arr1 that are in arr2 and\
    \ not arr3.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphlrq4ch2.lua:12: ')' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 1\n  for\
    \ i=1,#nums do\n    if nums[i] > 10 then\n      count = count + 1\n      if nums[i]\
    \ % 2 == 1 then\n        count = count + 1\n      end\n      if nums[i] % 2 ~=\
    \ 0 then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jxkxcfe.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0jxkxcfe.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local count = 0\n   for\
    \ _,num in ipairs(nums) do\n      -- if number is greater than 10\n      if num\
    \ > 10 then\n         -- find first and last odd digit\n         local firstOdd\
    \ = math.floor((math.floor(num/10) % 10))\n         local lastOdd = math.floor((num\
    \ % 10))\n         -- only add odd digits to count\n         if lastOdd % 2 ~=\
    \ 0 then\n            count = count + 1\n         end\n      end\n   end\n   return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocj4n360.lua:29:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpocj4n360.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local numsCount = #nums\
    \ \n  local numsSum = 0\n  local sum = 0\n  local numsOdd = 0\n  local oddDigits\
    \ = 0\n  local numsFirstOdd = 0\n  local firstOddDigits = 0\n  local numsLastOdd\
    \ = 0\n  local lastOddDigits = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7ii83mw0.lua:30: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, num in ipairs(nums) do\n\t\tif num > 10 then\n\t\t\tif num % 2 == 0 then\n\
    \t\t\t\tcount = count + 1\n\t\t\t\tif num / 10 % 2 == 1 then\n\t\t\t\t\tcount\
    \ = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswi342vi.lua:27:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpswi342vi.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ index, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\tif num > 1000 and\
    \ (num % 10 == 1 or num % 10 == 3) and num % 100 == 1 or num % 100 == 3 then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24vmzswt.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp24vmzswt.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 then\n      count = count + 1\n      if\
    \ nums[i] % 2 == 0 and nums[i-1] % 2 == 0 then\n        count = count + 1\n  \
    \    end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim29dwqj.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpim29dwqj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 then\n            if num\
    \ % 2 == 1 and (num / 10 % 2) == 1 then\n                count = count + 1\n \
    \           end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq17k6uv.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfq17k6uv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i, v in ipairs(nums) do\n    if v > 10 and  v mod 2 == 1 and  v mod 2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpubbpmw5i.lua:10: 'then' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local total = 0\n  \
    \  \n    for i = 1, #nums do\n        if nums[i] > 10 then\n            if nums[i]\
    \ % 2 == 0 and nums[i] % 2 ~= 0 then\n                total = total + 1\n    \
    \        end\n        end\n    end\n    \n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yhmytxx.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_yhmytxx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 1\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 then\n      if nums[i] % 2 == 1 then\n\
    \        if nums[i] + nums[i-1] % 2 == 1 then\n          result = result + 1\n\
    \        end\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshh10omh.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpshh10omh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n = 0\n    for\
    \ _,v in ipairs(nums) do\n        if v > 10 then\n            n = n + 1\n    \
    \        if ((v mod 2) = 0 and ((v mod 5) or 0 == (v mod 5))) then\n         \
    \       n = n + 1\n            end\n        end\n    end\n    return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmn8qt3ai.lua:12: ')' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n = 0 \n    for\
    \ i = 1, #nums do\n        if nums[i] > 10 then\n            if isodd(nums[i])\
    \ and isodd(nums[i - 1]) then n = n + 1 end\n        end\n    end\n    return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ho8e6xz.lua:11:\
    \ attempt to call a nil value (global 'isodd')\nstack traceback:\n\t/tmp/tmp8ho8e6xz.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8ho8e6xz.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal n = 0\n\tfor i,\
    \ v in ipairs(nums) do\n\t\tif v > 10 and (v % 2 == 1 or v ~= math.floor(math.log10(v)))\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93nnukg5.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp93nnukg5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local cnt = 0\n  local\
    \ num = nums[1]\n  for i = 1, #nums do\n    if nums[i] > 10 then\n      local\
    \ odd = (math.modf(num / 10) % 2)\n      if odd ~= 0 then\n        cnt = cnt +\
    \ 1\n      end\n    end\n    num = nums[i]\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn6q2jiu.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphn6q2jiu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] >= 10 and ((nums[i] % 2) ~= 0) then\n      if\
    \ ((nums[i] % 10) == 1) or ((nums[i] % 10) == 3) then\n        count = count +\
    \ 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynz0tphv.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpynz0tphv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local counter = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] < 10 then\n      counter = counter + 1\n   \
    \ else\n      if nums[i] % 2 == 1 then\n        if nums[i] % 2 == 1 then \n  \
    \        if nums[i] == 0 then \n            counter = counter + 1\n          else\
    \ \n            if nums[i] < 10 then \n              counter = counter + 1\n \
    \           end \n          end \n        else \n          counter = counter +\
    \ 1\n        end\n      end\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6gj45qg_.lua:34:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmp6gj45qg_.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  local\
    \ i = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd1za9ssy.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local sum = 0\n   for\
    \ _, num in ipairs(nums) do\n      sum = sum + num\n      if num > 10 then\n \
    \        sum = sum + math.floor(num / 10)\n         if num % 10 % 2 ~= 0 then\n\
    \            sum = sum + 1 -- last digit odd\n         end\n      end\n   end\n\
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmst_96vj.lua:24:\
    \ expected: 0, actual: -1\nstack traceback:\n\t/tmp/tmpmst_96vj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, n in ipairs(nums) do\n        if n < 10 then\n            if n % 2 ==\
    \ 0 then\n                count = count + 1\n            end\n        elseif n\
    \ > 10 then\n            if n % 2 == 0 and n % 1 == 0 then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s1k9qrd.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0s1k9qrd.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  \n\
    \  for _, num in ipairs(nums) do\n    \n    -- Check for odd/even first and last\
    \ digit\n    if math.mod(num, 2) == 0 then\n      count = count + 1\n    end\n\
    \    \n    -- Check for odd/even middle digits\n    if math.mod(num, 2) ~= 0 then\n\
    \      \n      -- Check for odd first digit\n      if math.mod(num - 1, 2) ==\
    \ 1 then\n        count = count + 1\n      end\n      \n      -- Check for odd\
    \ last digit\n      if math.mod(num + 1, 2) == 1 then\n        count = count +\
    \ 1\n      end\n    end\n  end\n  \n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_is8w5xz.lua:13:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp_is8w5xz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_is8w5xz.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ i, num in pairs(nums) do\n\t\tif num > 10 and (i ~= 0 or num == 1) then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2g4ndhmq.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp2g4ndhmq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i, v in ipairs(nums) do\n    local _, _, first = v:find(string.char(1))\n  \
    \  local _, _, last = v:find(string.char(-1))\n    if first and last then\n  \
    \    if v > 10 then\n        if v % 2 == 1 then\n          count = count + 1\n\
    \        end\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpik4gaffq.lua:10:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpik4gaffq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpik4gaffq.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _,n in pairs(nums) do\n    if n > 10 and n % 2 == 1 and n % 2 ~= 0 then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpborifd7s.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpborifd7s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local length\n  for _,\
    \ num in ipairs(nums) do\n    length = length or num\n    if num > 10 then\n \
    \     if num % 2 == 1 then\n        length = length + 1\n      end\n      if num\
    \ % 2 == 0 then\n        length = length + 1\n      end\n      if num > 10 then\n\
    \        if num % 2 == 1 then\n          length = length + 1\n        end\n  \
    \    end\n    end\n  end\n  return length\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuj8vlut7.lua:31:\
    \ expected: 0, actual: 5\nstack traceback:\n\t/tmp/tmpuj8vlut7.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for index, value in ipairs(nums) do\n        if value > 10 then\n         \
    \   if value % 2 == 1 then\n                if math.floor(value/2) ~= value then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lk2fc6g.lua:26:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp3lk2fc6g.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvnpyf566.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local cnt = 0\n  for i,\
    \ v in ipairs(nums) do\n    if v > 10 then\n      if math.mod(v, 2) == 1 then\n\
    \        cnt = cnt + 1\n      end\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptnx1bu6b.lua:11:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmptnx1bu6b.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmptnx1bu6b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- Write your code here.\n\
    \  return #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdiah3zj.lua:15:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpgdiah3zj.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local num_length = 0\n\
    \  \n  for i = 0, #nums do\n    if nums[i] > 10 then\n      num_length = num_length\
    \ + 1\n      if nums[i] % 2 ~= 0 then\n        if nums[i] >= 10 then\n       \
    \   if nums[i] % 2 == 1 then\n            num_length = num_length + 1\n      \
    \    end\n        end\n      end\n    end\n  end\n  return num_length\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2qpjor4z.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2qpjor4z.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp2qpjor4z.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\t-- Write your code here.\n\
    \tlocal count = 0\n\tfor _, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\t\
    if math.floor(num / 2) % 2 ~= 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphd7ha5_n.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphd7ha5_n.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local result = 0\n \
    \   for _, num in pairs(nums) do\n        if num > 10 and num:mod(2) ~= 1 then\n\
    \            result = result + 1\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0kvnb3c7.lua:10:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmp0kvnb3c7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp0kvnb3c7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal n=0\n\tfor _, num\
    \ in pairs(nums) do\n\t\tif num > 10 and num % 2 == 1 and num % 2 == 1 then\n\t\
    \t\tn=n+1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xql4vvp.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp2xql4vvp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- Write your code here\n\
    \    local len= #nums\n    local count = 0\n    for i = 1,len do\n        if nums[i]\
    \ >= 10 then\n            if (nums[i] % 2) ~= 0 then\n                count =\
    \ count+1\n            end\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkat9m3nz.lua:26:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpkat9m3nz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  return #nums - #filter(num,\
    \ nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpczsxjm7l.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpczsxjm7l.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpczsxjm7l.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n=0\n    for _,\
    \ num in ipairs(nums) do\n        if num > 10 then\n            if num%10==1 and\
    \ num%2==1 then\n                n+=1\n            else\n                n+=0\n\
    \            end\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuv8xynu_.lua:12: syntax error near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _,v in pairs(nums) do \n    if v > 10 then\n      if v:rem(-2, 1) and v:rem(-2,\
    \ 1) ~= 0 then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzxm7kud1.lua:11:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpzxm7kud1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzxm7kud1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   if #nums < 2 then return\
    \ 0 end\n   local count = 0\n   for i = 1, #nums do\n      local first  = nums[i]\n\
    \      local last = nums[#nums]\n      if first and last then\n         if first\
    \ % 2 ~= 0 or last % 2 ~= 0 then\n            count = count + 1\n         end\n\
    \      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxmiiaig.lua:25:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpgxmiiaig.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  for i, num in ipairs(nums)\
    \ do\n    if num > 10 and (num mod 2 and num mod 2 = 0) then\n      break\n  \
    \  end\n  end\n  return i\nend\n</cell>\n<text>\nAnd now let's try it out:\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuxugxktq.lua:9: ')' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local sum = 0\n    for\
    \ _, num in ipairs(nums) do\n        if num > 10 then\n            sum = sum +\
    \ 1\n            if num%2 ~= 0 then\n                sum = sum + 1\n         \
    \   end\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t1v02ki.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3t1v02ki.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  return #nums - #filter(function(n)\
    \ return n >= 10 and (n % 2 == 1) and (n % 2 ~= 0) and (nums[#nums] % 2 == 1)\
    \ end,\n\t\t\t\t\t\tnums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0i85g6y_.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp0i85g6y_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp0i85g6y_.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local newNums = {}\n\
    \    for i,num in ipairs(nums) do\n        if (num > 10 and num%1 ~= 0) or (num\
    \ > 0 and num%1 == 0) then\n            newNums[#newNums+1] = num\n        end\n\
    \    end\n    return #newNums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2_5dboy.lua:20:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpt2_5dboy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 then\n            count\
    \ = count + 1\n            if ((num % 10) % 2) ~= 0 then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88k5l3wi.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp88k5l3wi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for n in nums do\n        if n < 10 then\n            if math.mod(n, 2) ==\
    \ 1 then\n                count = count + 1\n            end\n        else\n \
    \           if math.mod(n, 2) == 0 then\n                if math.mod(n, 10) ==\
    \ 1 then\n                    count = count + 1\n                end\n       \
    \     end\n        end\n    end\n    return count\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns a list of the first n prime numbers. \nThe function\
    \ should return the list in the following format:\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsiuxzz4o.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   -- Your code here\n \
    \  return #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tb2t8vr.lua:15:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmp_tb2t8vr.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- Write your code here\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk10eqqmk.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpk10eqqmk.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local numsTable = {}\n\
    \    for _, num in ipairs(nums) do\n        numsTable[#numsTable + 1] = num\n\
    \    end\n    local result\n    for _, num in ipairs(numsTable) do\n        if\
    \ num > 10 then\n            if num % 2 == 1 then\n                if num % 2\
    \ == 1 then\n                    if num % 2 == 1 then\n                      \
    \  if num % 2 == 1 then\n                            result = result + 1\n   \
    \                     end\n                    end\n                end\n    \
    \        end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8zgbv98.lua:32:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpk8zgbv98.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- Write your solution\
    \ here. Make sure that you do not change the return \n    -- value of the function.\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywms9nea.lua:17:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpywms9nea.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        if nums[i] > 10 and (nums[i] mod 2 ~= 1 or (nums[i]\
    \ > 9 and nums[i] < -9)\n             or (nums[i] < -9 and nums[i] > -9 and nums[i]\
    \ mod 2 ~= 1)) then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpngf6toof.lua:10: ')' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i, v in ipairs(nums) do\n    if v > 10 then\n      if math.floor(v / 2) == math.floor(v\
    \ / 2) then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbf0mrf46.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbf0mrf46.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- Write your filter here\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwbo00n0.lua:15:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplwbo00n0.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    -- Get the first and last digit\n    local firstDigit =\
    \ nums[i] % 10\n    local lastDigit = (nums[i]-firstDigit)/10\n    -- If the first\
    \ digit is a 1, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 1 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the first digit\
    \ is a 3, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 3 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the first digit\
    \ is a 5, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 5 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the first digit\
    \ is a 7, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 7 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the first digit\
    \ is a 9, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 9 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the last digit\
    \ is an 1, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 2 == 1 then count = count+1 end\n    -- If the last\
    \ digit is an 3, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 3 == 1 then count = count+1 end\n    -- If the last\
    \ digit is an 5, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 5 == 1 then count = count+1 end\n    -- If the last\
    \ digit is an 7, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 7 == 1 then count = count+1 end\n    -- If the last\
    \ digit is an 9, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 9 == 1 then count = count+1 end\n    -- Add the current\
    \ element to the array\n    table.insert(nums, i)\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfvf14l0.lua:42:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpmfvf14l0.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 and nums[i] and nums[i] % 2 == 1 and\n\
    \       nums[i] % 2 == 1 and nums[i] % 2 == 1 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyh8q5_x.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmplyh8q5_x.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  for _, v in ipairs(nums)\
    \ do\n    if v > 10 then\n      if v > 100 then\n        return 1\n      elseif\
    \ v > 10 ^ 2 then\n        if v % 2 ~= 0 then\n          return 1\n        end\n\
    \      elseif v > 10 ^ 3 then\n        if v % 3 ~= 0 then\n          return 1\n\
    \        end\n      elseif v > 10 ^ 5 then\n        if v % 5 ~= 0 then\n     \
    \     return 1\n        end\n      elseif v > 10 ^ 7 then\n        if v % 7 ~=\
    \ 0 then\n          return 1\n        end\n      elseif v > 10 ^ 9 then\n    \
    \    if v % 9 ~= 0 then\n          return 1\n        end\n      else\n       \
    \ return -1\n      end\n    end\n  end\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9pafuv0.lua:44:\
    \ expected: 1, actual: -1\nstack traceback:\n\t/tmp/tmpl9pafuv0.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  if #nums == 0 then return\
    \ 0 end\n  local len = 0\n  for i=1,#nums do\n    if nums[i] >= 10 then\n    \
    \  if nums[i]%2==1 then\n        if len+1>=2 then return end\n        len = 1\n\
    \      else\n        len = len + 1\n      end\n    end\n  end\n  return len\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk53m7jo.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvk53m7jo.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, n in pairs(nums) do \n        if n > 10 then\n            count = count\
    \ + 1\n            if n % 2 == 0 then\n                if nums[#nums] == 2 or\
    \ nums[#nums] == 3 or nums[#nums] == 5 then\n                    count = count\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66x4ynen.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp66x4ynen.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   \n   local count=0\n\
    \   for _, value in pairs(nums) do\n      if value > 10 then\n         if value\
    \ % 2 == 1 and value % 2 ~= nums[value/2] then count = count + 1 end\n      else\n\
    \         if value % 2 ~= nums[value/2] then count = count + 1 end\n      end\n\
    \   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57tzwitr.lua:23:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmp57tzwitr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local numsCount = #nums\n\
    \  local totalNums = 0\n  for _, num in pairs(nums) do\n    if (num % 2 == 1)\
    \ and ((num % 10 == 1) or (num % 10 == 0)) then\n      totalNums = totalNums +\
    \ 1\n    end\n  end\n  return totalNums / numsCount\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0f8q7yn.lua:21:\
    \ expected: 0, actual: 0.25\nstack traceback:\n\t/tmp/tmpg0f8q7yn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, num in pairs(nums) do\n\t\tif (num > 10) and (num < 100) and (num % 2 ==\
    \ 0) and ((num > 100 and num < 200) or (num > 200 and num < 300))then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s7j95m8.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1s7j95m8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _,n in ipairs(nums) do\n        if n > 10 and n%2 ~= 0 then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla11ob6n.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpla11ob6n.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  if #nums ~= 1 then\n \
    \   error('The argument must be an array of 1 or more numbers')\n  else\n    local\
    \ i = 0\n    local count = 0\n    while i < #nums do\n      if nums[i]>10 then\n\
    \        count = count + 1\n      end\n      if nums[i]%2 ~= 0 then\n        count\
    \ = count + 1\n      end\n      i = i + 1\n    end\n    return count\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfyol0jn.lua:9:\
    \ The argument must be an array of 1 or more numbers\nstack traceback:\n\t/tmp/tmpbfyol0jn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbfyol0jn.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local filtered = 0\n\
    \    for i = 1, #nums do\n        if nums[i] >= 10 then\n            if nums[i]\
    \ % 2 ~= 0 then\n                if nums[i] % 10 ~= 0 then\n                 \
    \   if nums[i] % 10 ~= nums[i-1] % 10 then\n                        filtered =\
    \ filtered + 1\n                    end\n                end\n            end\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt2ng37oe.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpt2ng37oe.lua:13: in local 'candidate'\n\t/tmp/tmpt2ng37oe.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n = 0\n    for\
    \ i = 1, #nums do\n        if nums[i] <= 10 then\n            if math.modf(math.abs(nums[i]))[1]\
    \ ~= 1 then\n                if math.modf(math.abs(nums[i]))[2] ~= 0 then\n  \
    \                  n = n + 1\n                end\n            end\n        else\n\
    \            if math.modf(math.abs(nums[i]))[1] ~= 1 then\n                n =\
    \ n + 1\n            end\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy37u4myk.lua:11:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpy37u4myk.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpy37u4myk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i=1, #nums do\n        if nums[i] > 10 then\n            if nums[i] % 2\
    \ == 1 then\n                count = count + 1\n            end\n            if\
    \ nums[i] % 2 == 0 then\n                count = count + 1\n            end\n\
    \            if nums[i] % 2 == 1 then\n                count = count + 1\n   \
    \         end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao978j0n.lua:29:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpao978j0n.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local len = 0 \n   for\
    \ i = 1, #nums do\n      local temp = 0 \n      for j = 0, #nums[i] do\n     \
    \    temp = temp + nums[i][j] * 10^j\n      end\n      local nums2 = nums[i]\n\
    \      local temp2 = nums2[1]\n      for j = 1, #nums2 do\n         temp2 = temp2\
    \ + nums2[j] * 10^j\n      end\n      if temp > 10 and temp2 % 2 == 1 and nums[len]\
    \ == nums2[len] then\n         len = len + 1\n      end\n   end\n   return len\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpibb7pno8.lua:11:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpibb7pno8.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpibb7pno8.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 1;\n \
    \   for i = 1, #nums do\n        if nums[i] > 10 then\n            if (nums[i]\
    \ % 2 > 0 and nums[i] % 2 == nums[i - 1]) % 2 then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5ljahv5.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpn5ljahv5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, _, n in ipairs(nums) do\n    if n == nil then\n      count = count + 1\n\
    \    elseif n > 10 then\n      count = count + 1\n      if n % 2 == 1 then\n \
    \       if nums[n-2] == nil or nums[n-2] == -2 then\n          count = count +\
    \ 1\n        end\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcparr4ci.lua:27:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpcparr4ci.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 then\n            if math.floor(num\
    \ / 2) ~= num % 2 then\n                count = count + 1\n            end\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1aswzs1z.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp1aswzs1z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  \n\
    \  for _, num in ipairs(nums) do\n    if num > 10 then\n      if not (num % 2)\
    \ then\n        if ((num % 10) and (num % 10) > 0) then\n          count = count\
    \ + 1\n        end\n      end\n    end\n  end\n  \n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ictdz_.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa_ictdz_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- Base Case: empty array\n\
    \  if nums == nil or #nums == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzubpqhk0.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local result = 0\n  \
    \ for i = 1, #nums do\n      if nums[i] > 10 then\n         result = result +\
    \ 1\n      elseif nums[i] % 2 == 1 and nums[i] % 2 == 0 then\n         result\
    \ = result + 1\n      end\n   end\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp187j5h79.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp187j5h79.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  if #nums == 0 then return\
    \ 0 end\n  local count = 0\n  for i = 1,#nums do\n    if nums[i] >= 10 then\n\
    \      if nums[i] % 2 == 1 and nums[i] % 2 == 1 then\n        return count\n \
    \     end\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpjtnz8h.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbpjtnz8h.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local n = 0\n  for _,\
    \ _ in pairs(nums) do\n    n = n + 1\n    if _ > 10 and nums[#nums]%2 ~= 0 then\
    \ break end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhirz3w2.lua:19:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpdhirz3w2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, num in ipairs(nums) do\n\t\tif num > 10 then\n\t\t\tif (math.abs(math.floor(num\
    \ / 10)) % 2) == 1 and\n\t\t\t\t(math.abs(math.floor(num / 10)) % 2) == 1 then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebdmoaoz.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpebdmoaoz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ idx, num in pairs(nums) do\n    if num > 10 then\n      count = count + 1\n\
    \      if num % 2 == 1 and math.floor(num / 2) % 2 == 1 then\n        count =\
    \ count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vwxh36g.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4vwxh36g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n = #nums\n  \
    \  local counter = 0\n    for i = 1, n do\n        if nums[i] > 10 then\n    \
    \        local first_odd = math.floor( math.floor(nums[i]/10)*10 )\n         \
    \   local last_odd = math.floor( math.floor(nums[i]/10)*10 )\n            if (first_odd\
    \ + last_odd) % 2 == 1 then\n                counter = counter + 1\n         \
    \   end\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j1abd04.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7j1abd04.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local i = 1\n  local n\
    \ = 0\n  while i <= #nums do\n    n = n + 1\n    if nums[i] > 10 then\n      if\
    \ nums[i] % 2 == 0 and nums[i-1] % 2 == 1 then\n        n = n + 1\n      end\n\
    \    end\n    i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_citzlww.lua:25:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmp_citzlww.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, num in ipairs(nums) do\n    if num > 10 then\n      count = count + 1\n \
    \     if num % 2 == 1 and (num / 2) mod 2 ~= 1 then\n        count = count + 1\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcxkdzctu.lua:12: 'then' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local length = 1\n \
    \   for _, num in pairs(nums) do\n        length = length + 1\n        if num\
    \ > 10 then\n            if num % 2 ~= 1 then\n                length = length\
    \ + 1\n            end\n            if num < 0 and num < 0 % 10 then\n       \
    \         length = length + 1\n            end\n        end\n    end\n    return\
    \ length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp425hh0k2.lua:26:\
    \ expected: 0, actual: 5\nstack traceback:\n\t/tmp/tmp425hh0k2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local len = 0\n  for i\
    \ = 1, #nums do\n    len = len + 1\n    if nums[i] >= 10 and\n        (nums[i]\
    \ % 10 % 2) == 1 and\n        (nums[i] % 10 / 2 % 2) ~= 0 then\n      break\n\
    \    end\n  end\n  return len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqb3j_v2.lua:23:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpfqb3j_v2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local total = 0\n  \
    \  for i=1,#nums do\n        local digits = math.floor((nums[i]/10) + .5)\n  \
    \      if nums[i] >= 10 then\n            if nums[i] % 10 % 2 == 0 then\n    \
    \            if digits == 1 then\n                    total = total + 1\n    \
    \            else\n                    total = total + 1\n                end\n\
    \            end\n        end\n    end\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplb56zedi.lua:29:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmplb56zedi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local sum = 0\n    for\
    \ _, v in ipairs(nums) do\n        if v > 10 then\n            if v % 2 ~= 1 then\n\
    \                sum = sum + 1\n            end\n            if v % 2 == 1 then\n\
    \                if v ~= 10 then\n                    sum = sum + 1\n        \
    \        end\n                if v ~= 11 then\n                    sum = sum +\
    \ 1\n                end\n            end\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy262s70i.lua:31:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpy262s70i.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local cnt = 0\n    local\
    \ i = 1\n    while i <= #nums do\n        if nums[i] < 10 and nums[i] % 2 == 1\
    \ then\n            if nums[i-1] % 2 == 1 and nums[i+1] % 2 == 1 then\n      \
    \          cnt = cnt + 1\n            end\n        end\n        i = i + 1\n  \
    \  end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuid1e470.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpuid1e470.lua:12: in local 'candidate'\n\t/tmp/tmpuid1e470.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local n = 0\n  local count\
    \ = 0\n  for i = 1, #nums do\n    if nums[i] > 10 then\n      if (((nums[i] %\
    \ 100) ~= 0) and (nums[i] % 10) == 1) then\n        count = count + 1\n      end\n\
    \      if (((nums[i] % 100) ~= 0) and (nums[i] % 10) == 0) then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyfmv3qo.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppyfmv3qo.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local result = 1\n \
    \   for i=1,#nums do\n        if ((nums[i] > 10) and (nums[i] % 2 == 1) and\n\
    \            (nums[i] % 2 == (nums[i - 1] % 2)))\n        then\n            result\
    \ = result + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd_y_soo.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptd_y_soo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local len = 1\n  for i\
    \ = 1, #nums do\n    if nums[i] < 10 then\n      len = len + 1\n      elseif nums[i]\
    \ >= 10 then\n        len = len + 1 \n        if nums[i]%2 == 1 and nums[i]/2\
    \ == 1 then\n          len = len + 1 \n        else\n          len = len\n   \
    \     end\n      end\n  end\n  return len\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6_96hgh.lua:27:\
    \ expected: 0, actual: 5\nstack traceback:\n\t/tmp/tmpn6_96hgh.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local n = 0\n  for i =\
    \ 1, #nums do\n    if (nums[i] >= 10) and (nums[i] mod 2 == 1) and (nums[i] mod\
    \ 2 == 1) then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvfj3kz7r.lua:10: ')' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    if #nums < 2 then\n\
    \        return 0\n    end\n    local sum = 0\n    local n = #nums\n    for i\
    \ = 1, n do\n        local d = nums[i]\n        if d > 10 then\n            if\
    \ d % 2 == 1 then\n                sum = 1\n            end\n            if i\
    \ % 2 == 1 then\n                sum = 2\n            end\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbe4twth.lua:31:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpdbe4twth.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  return #nums - #nums.filter(function(x)\n\
    \    return x%2 ~= 1 and x ~= x*x \n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnwy05mk7.lua:8:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpnwy05mk7.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpnwy05mk7.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 then\n      if nums[i] % 2 == 1 and nums[i\
    \ - 1] % 2 == 1 then\n        count = count + 1\n      end\n    end\n  end\n \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp53d_hxv6.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp53d_hxv6.lua:11: in local 'candidate'\n\t/tmp/tmp53d_hxv6.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprun641sc.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj4m3_hen.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local numsLength = #nums\n\
    \    local n1 = nums[1]\n    local n2 = nums[numsLength]\n    local n3 = nums[numsLength\
    \ - 1]\n    local result = 1\n    if n1 ~= 0 and n2 ~= 0 and n3 ~= 0 then\n  \
    \      if n1%2 == 1 and n2%2 == 1 and n3%2 == 1 then\n            result = 1\n\
    \        else\n            result = 0\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2rkma5k.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpg2rkma5k.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, num in ipairs(nums) do\n    count = count + 1\n    if num > 10 and\n    \
    \    (num % 2 == 1 and num % 3 == 1 or\n         num % 2 == 1 and num % 3 ~= 1\
    \ or\n         num % 3 ~= 1 and num % 2 == 1) then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp63cirb2.lua:24:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpp63cirb2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local sum = 0\n   for\
    \ _,num in pairs(nums) do\n      if num > 10 then\n         sum = sum + 1\n  \
    \    end\n   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5vdvvor.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpt5vdvvor.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, n in ipairs(nums) do\n\t\tif n > 10 and n % 2 and n % 1 ~= 0 then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk33hy8cp.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpk33hy8cp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  for i, v in ipairs(nums)\
    \ do\n    if v > 10 and (mod(v, 2) == 1 or mod(v, 2) == 3) and ((mod(i, 2) ==\
    \ 1 or mod(i, 2) == 3) and\n      (mod(i, 1) == 1 or mod(i, 1) == 3) and (mod(v,\
    \ 1) == 1 or mod(v, 1) == 3)) then \n      return 1 + specialFilter(nums)\n  \
    \  end\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo20wa8k5.lua:9:\
    \ attempt to call a nil value (global 'mod')\nstack traceback:\n\t/tmp/tmpo20wa8k5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpo20wa8k5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local filteredNums = 0\n\
    \  \n  for _, num in pairs(nums) do\n    local firstDigit = num % 10\n    local\
    \ lastDigit  = num / 10\n    \n    if firstDigit == 0 and lastDigit % 2 == 1 then\n\
    \      filteredNums = filteredNums + 1\n    end\n  end\n  \n  return filteredNums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkn5rphur.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkn5rphur.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\t\n\t\
    for i = 1, #nums do\n\t\tif nums[i] > 10 then\n\t\t\tcount = count + 1\n\t\telseif\
    \ nums[i] % 2 == 0 and nums[i] % 4 == 0 then\n\t\t\tcount = count + 1\n\t\telse\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\t\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6upfbko.lua:26:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpw6upfbko.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local i = 0\n    local\
    \ num = 0\n    for i = 1, #nums do\n        num = num + nums[i]\n    end\n   \
    \ if num > 10 then\n        if num % 2 == 0 then\n            if num % 2 == 1\
    \ then\n                return num\n            end\n        else\n          \
    \  if num % 2 ~= 0 then\n                return num\n            end\n       \
    \ end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7bzeod8.lua:30:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_7bzeod8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   if #nums == 0 then\n\
    \      return 0\n   end\n   if #nums > 1 then\n      return specialFilter(nums[1:end-1])\
    \ + #nums - 1\n   else\n      local result = #nums - 1\n      for i = #nums, 1,\
    \ -1 do\n         if nums[i] >= 10 then\n            local first = nums[i]\n \
    \           local last = nums[i - 1]\n            if first % 2 == 1 ~= last %\
    \ 2 then\n               result = result + 1\n            end\n         end\n\
    \      end\n      return result\n   end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8s1tr1_s.lua:12: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local numsSize = #nums\n\
    \    if not numsSize then return 0 end\n    local numsMax = math.max(nums)\n \
    \   local result = 1\n    for i = 1, numsSize do\n        if nums[i] > 10 then\n\
    \            local firstOdd = math.floor(math.modf(math.fmod(nums[i], 10)*10)[1])\n\
    \            local lastOdd = math.floor(math.modf(math.fmod(nums[i], 10)*10)[1])\n\
    \            if firstOdd and lastOdd then\n                result = result + 1\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5jpqj6o.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc5jpqj6o.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 0\n  for\
    \ i = 1, #nums do\n    if (nums[i] > 10) then\n      result = result + 1\n   \
    \   if( (nums[i] % 10) % 2 ~= 0 ) then\n        if( ((nums[i] % 10) % 2) == 1\
    \ and ((nums[i]  - (nums[i]  % 10)) / 10) % 2 ~= 0) then\n          result = result\
    \ + 1\n        end\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tng7aag.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1tng7aag.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal i, n = 0, #nums\n\
    \twhile i < n do\n\t\tlocal first = nums[i]\n\t\tlocal last = nums[#nums - 1]\n\
    \t\tif first:sub(1,1) ~= '-' and last:sub(1,1) ~= '-' then\n\t\t\tif first % 2\
    \ == 1 and last % 2 == 1 then\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\t\ti =\
    \ i + 1\n\tend\n\treturn i\nend\n</cell>\n<text>\nProblem 2.2 - Filter an Array\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2nl_l24y.lua:21: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal n = 0\n\tlocal temp\
    \ = 0\n\tfor _, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\tn = n + 1\n\
    \t\t\ttemp = math.floor((num % 10))\n\t\t\tif num - temp % 2 ~= 0 then\n\t\t\t\
    \tn = n + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcr7s25kv.lua:26:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpcr7s25kv.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local n = 0\n  for _,\
    \ num in pairs(nums) do \n    if num > 10 then\n      if (((num % 10) % 2) ~=\
    \ 0 and ((num % 10) % 2) ~= 1) then\n        n = n + 1\n      end\n    end\n \
    \ end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymtkd6hg.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpymtkd6hg.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 then\n      result = result + 1\n     \
    \ -- only odd first\n      if i % 2 == 0 then\n        -- only odd last\n    \
    \    if #nums%2 == 0 and i % 2 ~= 0 then\n          result = result + 1\n    \
    \    end\n      end\n    end\n  end\n  return result\nend\n</cell>\n<text>\nQ12\n\
    Write a function that counts the number of elements in an array, excluding \n\
    duplicates.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvn7wfblp.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local length = 0\n  for\
    \ i, num in ipairs(nums) do\n    if num > 10 then\n      length = length + 1\n\
    \      if num % 2 ~= 0 then \n        if num - math.floor(num) == math.floor(num\
    \ + 1) then\n          length = length + 1\n        end\n      end\n    end\n\
    \  end\n  return length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3cguvd4.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz3cguvd4.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local num_odd = 0\n  local\
    \ num_even_first = 0\n  local num_even_last = 0\n  for i, v in ipairs(nums) do\n\
    \    local odd = tostring(v) mod 2\n    local first_last_odd = tostring(v) div\
    \ 10 % 2 -- The first last digit\n    local even_first = math.floor(tostring(v)\
    \ div 10 % 2 ^ 1) + 1\n    local even_last = math.floor(tostring(v) div 10 % 2\
    \ ^ 2)\n    if odd and first_last_odd and even_first and even_last then\n    \
    \  num_odd = num_odd + 1\n    end\n  end\n  return num_odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0z3kkvml.lua:12: syntax error near '2'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n = 0 -- Count\n\
    \    for i = 1, #nums do -- For each element\n        if nums[i] > 10 then\n \
    \           if nums[i] % 2 == 1 then\n                if nums[i] % 9 == 1 then\
    \ -- Even number\n                    n = n + 1\n                end\n       \
    \     else\n                if nums[i] % 5 == 1 then -- Odd number\n         \
    \           n = n + 1\n                end\n            end\n        end\n   \
    \ end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_7az3fy.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpq_7az3fy.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal n = 1\n\tfor i =\
    \ 1, #nums do\n\t\tif nums[i] >= 10 and ((nums[i] % 2) == 1 and\n\t\t\t((nums[i]\
    \ % 10) == 1 or nums[i] == 10)) then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqlny97c.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcqlny97c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local size = 1\n  for\
    \ _, v in pairs(nums) do\n    if v > 10 then\n      size = size + 1\n    end\n\
    \  end\n  return size\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26i7zfxq.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp26i7zfxq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  local\
    \ first = math.floor(math.random() * 100) % 10\n  local last = math.floor(math.random()\
    \ * 100) % 10\n  for i = 1, #nums do\n    local n = nums[i]\n    if n > 10 and\
    \ n % 10 == first and n % 10 == last and n % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\n</cell>\n<text>\nQuestion 6: Write\
    \ a function that takes an array of numbers as input and \nreturns the sum of\
    \ the first n elements in the array that do not contain \nan even number. The\
    \ function should take an optional second argument that \nspecifies the minimum\
    \ number of elements in the array to consider.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5y5nwb7w.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local numsLength = #nums\
    \ \n  local oddCounter = 0 \n  local evenCounter = 0 \n  local numsCopy = nums:copy()\
    \ \n  for i = 1, numsLength do\n    -- if the first and last digits are odd, increment\
    \ oddCounter\n    if numsCopy:sub(1, 1) == numsCopy:sub(numsLength - 1, 1) then\n\
    \      oddCounter = oddCounter + 1 \n    else\n      evenCounter = evenCounter\
    \ + 1 \n    end\n    -- remove the first and last digits from the array\n    numsCopy\
    \ = numsCopy:sub(1, numsLength - 1)\n  end\n  if oddCounter + evenCounter == numsLength\
    \ then\n    return 0 \n  elseif oddCounter == 1 and evenCounter == numsLength\
    \ then\n    return 1 \n  elseif oddCounter == numsLength and evenCounter == 1\
    \ then\n    return numsLength \n  elseif oddCounter == numsLength then\n    return\
    \ oddCounter + evenCounter \n  else\n    return oddCounter + evenCounter + 1 \n\
    \  end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7g402a_1.lua:34: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local len  = #nums\n \
    \ local num  = 0\n  local odd = 1\n  for i = 1, len do\n    num = num + 1 -- counting\n\
    \    if num > 10 then\n      if odd == 1 then\n        if odd == 0 then num =\
    \ num - 1 else odd = odd - 1 end\n      elseif odd == 0 then odd = odd -1 else\n\
    \        odd = odd\n      end\n    end\n    if num % 2 == 1 then\n      num =\
    \ num / 2\n      odd = odd + 0\n    end\n  end\n  return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtr0peuo.lua:31:\
    \ expected: 0, actual: 3.5\nstack traceback:\n\t/tmp/tmpvtr0peuo.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4a1wy0sf.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- TODO: Your code goes\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzkp4wd0.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpgzkp4wd0.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local numsLength = 0\n\
    \  for _, v in pairs(nums) do\n    numsLength = numsLength + 1\n  end\n  \n  if\
    \ numsLength == 1 then\n    return 1\n  elseif numsLength == 0 then\n    return\
    \ 0\n  else\n    local count = 0\n    for _, v in pairs(nums) do\n      if v >\
    \ 10 then\n        if string.sub(v, 1, 1) ~= 'O' then\n          if string.sub(v,\
    \ (v - 1) % (v / 2)) ~= 'O' then\n            count = count + 1\n          end\n\
    \        end\n      end\n    end\n    return count\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi64__mv4.lua:22:\
    \ bad argument #2 to 'sub' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmpi64__mv4.lua:22: in local 'candidate'\n\t/tmp/tmpi64__mv4.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] >= 10 then\n      local first = math.floor(nums[i])\n\
    \      local last = nums[i + 1]\n      count = count + 1\n      while first %\
    \ 2 == 0 and last % 2 == 0 do\n        first = first / 2\n        last = last\
    \ / 2\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphz8zwnn5.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphz8zwnn5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n = 0 -- number\
    \ of elements greater than 10 and first and last digits are odd\n    local i =\
    \ 1\n    for _ in nums:gmatch(\"%d+\") do\n        if _ > 10 then\n          \
    \  if i % 2 == 1 then\n                n = n + 1\n            end\n        end\n\
    \        i = i + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhbx3wab.lua:10:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpzhbx3wab.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzhbx3wab.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   -- base case\n   if #nums\
    \ == 0 then return 0 end\n   -- if the first and last element are odd, return\
    \ 1\n   if nums[1] % 2 == 1 and nums[#nums] - 1 % 2 == 1 then return 1 end\n \
    \  -- otherwise, return 0\n   return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpct8hdol8.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpct8hdol8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local counter = 0\n  for\
    \ _, v in ipairs(nums) do\n    if v > 10 then\n      counter = counter + 1\n \
    \     if v % 2 ~= 0 then\n        if v ~= (v - 1) then\n          if v ~= (v +\
    \ 1) then\n            counter = counter + 1\n          end\n        end\n   \
    \   end\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpach4s6o1.lua:28:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpach4s6o1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  if #nums <= 0 then\n \
    \   return nil\n  end\n  local counter = 0\n  for i = 1, #nums do\n    if nums[i]\
    \ > 10 then\n      if ((nums[i] % 2) == 1) then\n        if (((nums[i] % 10) ==\
    \ 1) or ((nums[i] % 10) == 9)) then\n          if ((nums[i - 1] % 10) == 1) then\n\
    \            if ((nums[i - 1] % 10) == 9) then\n              counter = counter\
    \ + 1\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6kzsg5w.lua:32:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpc6kzsg5w.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 0\n  for\
    \ _, v in ipairs(nums) do\n    if v > 10 then\n      if ((v and (v % 2)) > 0 and\
    \ ((v % 10) == 1)) then \n        result = result + 1\n      end\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgvb_w67.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjgvb_w67.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local cnt = 0\n  for i\
    \ = 1, #nums do\n    if math.abs(nums[i]) >= 10 then\n      if math.abs(nums[i])\
    \ mod 2 ~= 0 then\n        if nums[i] < 0 then\n          cnt = cnt + 1\n    \
    \    else\n          cnt = cnt + 0\n        end\n      end\n    end\n  end\n \
    \ return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwp642pud.lua:11: 'then' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 1\n  for\
    \ _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ~= 1 then\n\
    \        -- If the first and last digit are odd, add 1 to result\n        if num\
    \ % 2 == 1 then\n          result = result + 1\n        end\n      else\n    \
    \    -- If the first and last digit are even, add 2 to result\n        result\
    \ = result + 2\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjslcg7hc.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjslcg7hc.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local num_odd = 0\n  local\
    \ num_even = 0\n  for _, value in ipairs(nums) do\n    if value == math.floor(value)\
    \ then\n      if value % 2 == 1 then\n        num_even = num_even + 1\n      elseif\
    \ value % 2 == 0 then\n        num_odd = num_odd + 1 \n      end\n    end\n  end\n\
    \  return num_odd and num_even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f9x41ts.lua:25:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmp_f9x41ts.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i,v in ipairs(nums) do\n    if v > 10 then\n      if i % 2 == 1 then\n     \
    \   count = count + 1\n      end\n      if i % 2 == 0 then\n        if ((v % 10)\
    \ % 2 == 1) then\n          count = count + 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_1427zx.lua:28:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpe_1427zx.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tlocal\
    \ current = 0\n\tfor idx, item in pairs(nums) do\n\t\tif item > 10 then\n\t\t\t\
    if current == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tcurrent = current\
    \ + 1\n\t\telse\n\t\t\tcurrent = 1\n\t\tend\n\tend\n\treturn count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8tsfpum.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpx8tsfpum.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  for _, value in ipairs(nums)\
    \ do\n    if value <= 10 then\n      if value % 2 == 1 then\n        local lastDigit\
    \ = math.floor(value/10)\n        if lastDigit % 2 == 1 then\n          return\
    \ 1\n        end\n      end\n    end\n  end\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe20alrsf.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpe20alrsf.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local sum = 0\n  for _,\
    \ value in ipairs(nums) do\n    if value > 10 then\n      sum = sum + 1\n    \
    \  if ((value % 2) == 0 and (value % 100) == 0 and (value % 100) != 0) then\n\
    \        sum = sum + 1\n      end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt1ht4ako.lua:12: ')' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        if nums[i] >= 10 and (nums[i] % 2 ~= 0 or nums[i-1]\
    \ % 2 == 0) and (nums[i-1] % 2 ~= 0 or nums[i] % 2 == 0) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbzr0476a.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpbzr0476a.lua:10: in local 'candidate'\n\t/tmp/tmpbzr0476a.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = #nums\n\t\
    local odd = 0\n\tlocal first = 0\n\tlocal last = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppraqte91.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal num_count = {}\n\
    \tfor _, num in ipairs(nums) do\n\t\tif num > 10 then\n\t\t\tif num%2 and num%2\
    \ ~= (num%2-1) then\n\t\t\t\tnum_count[#num_count+1] = 1\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn #num_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrwvz4nd.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsrwvz4nd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count=1\n  for _\
    \ in pairs(nums) do\n    if _ > 10 then\n      if nums[_]%2 and nums[_-1]%2 then\n\
    \        count=(count+1)\n      end\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9vw6f97.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy9vw6f97.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i=1,#nums do\n    if nums[i] > 10 and (nums[i] % 2 == 1 and (nums[i] % 4 ~=\
    \ 1 or nums[i] % 100 == 0)) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\n</cell>\n<text>\nPractice\nTo test your function, run the cell block\
    \ below to to verify that your function returns the right value.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5s0kyg2p.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ idx, x in ipairs(nums) do\n\t\tcount = count + 1 \n\t\tif x > 10 and (idx >\
    \ 0 and nums[idx-1] % 2 == 1) and  (idx < #nums and nums[idx] % 2 == 1) then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jx3udyg.lua:21:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmp3jx3udyg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    if #nums < 2 then return\
    \ 0 end\n    local n = 1\n    for i = 2, #nums do\n        if nums[i] < 10 then\n\
    \            n = n + 1\n        end\n        if nums[i] == -1 then\n         \
    \   n = n + 1\n        end\n    end\n    return n\nend\nassert(specialFilter([3,\
    \ -1, 3, 5, 7, 9]) == 0)\nassert(specialFilter([3, -1, 3, 5, 7, 9]) == 1)\nassert(specialFilter([-7,\
    \ -1, -3, 5, 0, 2, -4, 10, 4, 8, 3, 7, 2, 9, 7, 8, -3]) == 3)\nassert(specialFilter([-7,\
    \ -1, -3, 5, 0, 2, -4, 10, 4, 8, 3, 7, 2, 9, 7, 8, -3]) == 2)\nassert(specialFilter([-7,\
    \ -1, -3, 5, 0, 2, -4, 10, 4, 8, 3, 7, 2, 9, 7, 8, -3]) == 1)\nassert(specialFilter([-7,\
    \ -1, -3, 5, 0, 2, -4, 10, 4, 8, 3, 7, 2, 9, 7, 8, -3]) == 0)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp_hpx72u.lua:20: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 then\n            if num:sub(1,\
    \ 1) ~= num:sub(len(num) - 2, len(num) - 1) then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp81x90aoz.lua:11:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmp81x90aoz.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp81x90aoz.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal i = 0\n\tlocal count\
    \ = 0\n\twhile i <= #nums do\n\t\tcount = count + 1\n\t\tif nums[i] > 10 then\n\
    \t\t\ti = i + 1\n\t\telseif nums[i] == 1 and nums[i - 1] % 2 == 1 and nums[i -\
    \ 2] % 2 == 1 then\n\t\t\ti = i + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\t\
    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w0w77ke.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4w0w77ke.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4w0w77ke.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 0\n  local\
    \ i = 1\n  for i = 1, #nums do\n    local first = math.floor( nums[i]/10 )\n \
    \   local last = math.floor( nums[i]%10 )\n    if first == last and math.mod(first,2)\
    \ == 1 and last % 2 == 1 then\n      result = result + 1\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov480siv.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpov480siv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppe9fpgiu.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 2\n  for\
    \ i = 1, #nums do\n    if (nums[i] == 10) then\n      if (nums[i - 1] == 1 and\
    \ nums[i + 1] % 2 == 1) then\n        count = count + 1\n      end\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7zeyw48.lua:22:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpj7zeyw48.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = {}\n \
    \   for _, value in ipairs(nums) do\n        if value == 10 then\n           \
    \ if string.sub(value, 1, 1) ~= '-' and string.sub(value, 1, 1) ~= '+'\n     \
    \           then count[value] = count[value] + 1 end\n            else\n     \
    \           if string.sub(value, 1, 1) == '-' then count[value] = count[value]\
    \ + 1 end\n            end\n        elseif value >= 10 then\n            local\
    \ first = math.floor(value)\n            local last = first + math.floor((10 -\
    \ value) / 2)\n            local first1 = math.floor(first / 10)\n           \
    \ local last1 = math.floor(last / 10)\n            if first1 % 2 ~= 1 or last1\
    \ % 2 ~= 1 then count[value] = count[value] + 1 end\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv648hr92.lua:16: 'end' expected (to close 'for' at line 9)\
    \ near 'elseif'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, v in pairs(nums) do\n    if v > 10 then\n      if math.floor(v/2) == math.floor(v/2)\
    \ and\n        math.floor(v/2) % 2 ~= 0 then\n        count = count + 1\n    \
    \  end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pyyu3ub.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0pyyu3ub.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local total = 0\n  \
    \  for i = 1, #nums do\n        local num = tonumber(nums[i])\n        if num\
    \ and tonumber(num:sub(1, 1)) and tonumber(num:sub(-2, -1)) then\n           \
    \ total = total + 1\n        end\n    end\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp537p7i66.lua:11:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmp537p7i66.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp537p7i66.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local n = #nums\n  local\
    \ sum = 0\n  for i = 1, n do\n    if nums[i] >= 10 and nums[i]%2 == 1 and nums[i]%2\
    \ ~= nums[i]/2 then\n      sum = sum + 1\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1ix_see.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp_1ix_see.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, v in ipairs(nums) do\n    local temp = v / (10^math.floor((v % 10)/2))\n\
    \    if temp >= 10 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\n</cell>\n<text>\nProblem 2\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpunvlic4v.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local n = 0\n  for _,\
    \ v in ipairs(nums) do\n    if v > 10 and\n      (v % 2 == 0 and (v % 2 == 1 or\
    \ v == -1) or\n      (v % 2 == 1 and (v % 2 == 3 or v % 2 == -1)))\n    then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjspaes8.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkjspaes8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  if #nums == 0 then\n \
    \   return 0\n  else\n    nums = nums or {}\n    local odds = false\n    local\
    \ evens = false\n    local number = 0\n    local i = 0\n    while i <= #nums do\n\
    \      number = number + nums[i]\n      if number >= 10 then\n        if odd and\
    \ (number mod 2) == 1 then\n          evens = true\n        elseif even and (number\
    \ mod 2) == 0 then\n          odds = true\n        elseif odd then\n         \
    \ odds = false\n        elseif even then\n          evens = false\n        else\n\
    \          odds = true\n          evens = true\n        end\n        number =\
    \ number / 10\n      else\n        number = number * 10\n      end\n      i =\
    \ i + 1\n    end\n    return odds and evens\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2o8emwqj.lua:19: ')' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local len = 1\n  local\
    \ sum = 0\n  for i,x in ipairs(nums) do\n    if x > 10 then\n      if x ~= math.floor(x)\
    \ and x % 2 == 1 then\n        sum = sum + 1\n      end\n    end\n    len = len\
    \ + 1\n  end\n  return len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuosne0a.lua:24:\
    \ expected: 0, actual: 5\nstack traceback:\n\t/tmp/tmpzuosne0a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    if #nums == 0 then return\
    \ 0 end\n    if #nums == 1 then return 1 end\n    local count = 0\n    for i =\
    \ 1, #nums do\n        local n = nums[i]\n        if n > 10 then\n           \
    \ if mod (nums[i], 2) == 1 then\n                if mod (nums[i], 2) == 1 then\
    \ count = count + 1 end\n            end\n            if mod (nums[i], 2) == 0\
    \ then\n                if mod (nums[i], 2) == 0 then count = count + 1 end\n\
    \            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3o2odnp.lua:14:\
    \ attempt to call a nil value (global 'mod')\nstack traceback:\n\t/tmp/tmpa3o2odnp.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpa3o2odnp.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   \n   if #nums == 0 then\
    \ \n      return 0 \n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiy9ldpik.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in pairs(nums) do\n        if num > 10 then\n            if num\
    \ and (num % 2) ~= 0 then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyrl_v5o.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpiyrl_v5o.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local n = 0\n  for _,\
    \ v in pairs(nums) do\n    if v >= 10 then\n      if v % 2 ~= 0 then\n       \
    \ if v % 10 ~= 0 then\n          if v % 10 == 0 then\n            if v ~= math.floor(v)\
    \ then\n              n = n + 1\n            end\n          end\n        end\n\
    \      end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp336w5fzp.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp336w5fzp.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 0\n  for\
    \ i = 1,#nums do\n    local first, last = nums[i], nums[i]\n    if first >= 10\
    \ and last >= 10 and first % 2 == 1 and last % 2 == 1 then\n      result = result\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovcxri8j.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpovcxri8j.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local n = 0\n  for i =\
    \ 1, #nums do\n    if nums[i] >= 10 then\n      n = n + 1\n      if nums[i] %\
    \ 2 ~= 0 and nums[i-1] % 2 ~= 0 then\n        n = n + 1\n      end\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn90mzw54.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpn90mzw54.lua:12: in local 'candidate'\n\t/tmp/tmpn90mzw54.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal result = 0\n\tfor\
    \ i = 1, #nums do\n\t\tif nums[i] > 10 then\n\t\t\tif nums[i] % 2 == 1 and nums[i-1]\
    \ % 2 == 1 then\n\t\t\t\tresult = result + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvb_c92fm.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpvb_c92fm.lua:11: in local 'candidate'\n\t/tmp/tmpvb_c92fm.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local len = 0\n  for _,\
    \ x in ipairs(nums) do\n    if (x > 10) and (x mod 2 == 1) then\n      if ((x\
    \ mod 10) == 1) then \n        len = len + 1\n      end\n    end\n  end\n  return\
    \ len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl01ondj9.lua:10: ')' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local filtered = {}\n\
    \    for i = 1, #nums do\n        if nums[i] > 10 then\n            if nums[i]\
    \ % 2 == 1 and nums[i] % 2 ~= nums[i - 1] % 2 then\n                table.insert(filtered,\
    \ nums[i])\n            end\n        end\n    end\n    return #filtered\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4l81gnm.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmps4l81gnm.lua:11: in local 'candidate'\n\t/tmp/tmps4l81gnm.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  if #nums < 1 then return\
    \ 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6iz5wui8.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal n = 0\n\tfor _,\
    \ num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\tlocal fnum = math.floor(\
    \ num / 10 )\n\t\t\tlocal lnum = math.mod( num, 10 )\n\t\t\tif lnum % 2 == 1 and\
    \ fnum % 2 ~= 0 then\n\t\t\t\tn = n + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpev0tb394.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpev0tb394.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpev0tb394.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 and\n      (nums[i] % 10 == 1 and nums[i]\
    \ % 2 == 0) and\n      (nums[i - 1] ~= nums[i]) and\n      (nums[i - 1] ~= (nums[i]\
    \ % 10)) then\n      result = result + 1\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g4o0n5s.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9g4o0n5s.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local i = 0 -- Track the\
    \ current index\n  local sum = 0 -- Track the total # of elements found\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4se_5kfp.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local sum = 0 \n  local\
    \ i, j = 1, 1 -- Loop counters \n  for i = 1, #nums do \n    -- Get first and\
    \ last digits and compare with the number \n    if nums[i] >= 10 then\n      if\
    \ nums[i] % 10 == 1 then\n        sum = sum + 1 \n      end \n      if nums[i]\
    \ % 10 == 0 then\n        if ((nums[i]-1 % 10) + 1) % 2 == 0 then\n          sum\
    \ = sum + 1 \n        end \n      end \n    end \n    -- Get the next number in\
    \ the array \n    if j == #nums then \n      break \n    else \n      j = j +1\
    \ \n    end \n  end \n  return sum \nend \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur8bdm04.lua:36:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpur8bdm04.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    for _, num in pairs(nums)\
    \ do\n        if (math.floor(num / 10) % 2) and (math.floor(num / 100) % 2) then\
    \ \n            return true \n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nWe can now compare the performance of our custom filter with the built-in\
    \ filter function.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr0cr750r.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- Write code here\n \
    \ local n = 0\n  for _, value in pairs(nums) do\n    if value > 10 then\n    \
    \  if ((value % 2) == 1) then\n        n = n + 1\n      end\n      if ((value\
    \ % 2) == 0) then\n        n = n + 1\n      end\n    end\n  end\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3adris2l.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3adris2l.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   for _,i in ipairs(nums)\
    \ do\n      if(type(i) == 'number') then\n         if(i > 10 and i % 2 == 1 and\
    \ i % 2 ~= 0) then\n            return true\n         else\n            return\
    \ false\n         end\n      else\n         return false\n      end\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsaa02b6z.lua:24:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpsaa02b6z.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ i, v in ipairs(nums) do\n\t\tif v > 10 then\n\t\t\tcount = count + 1\n\t\t\t\
    local nv = math.floor(math.abs(v) * 100)\n\t\t\tif nv ~= v then\n\t\t\t\tif math.mod(nv,\
    \ 2) == 1 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg2uzvica.lua:14:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpg2uzvica.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpg2uzvica.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\tif num:floor():mod(2)\
    \ = 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3,\
    \ 45, 21, 109]))\n</cell>\n<text>\nProblem #8: Write a function that checks if\
    \ a number is prime or composite. \nFor this, we must use sieve of Eratosthenes.\
    \ A prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 itself.\nA composite number is a natural number greater than 1\
    \ that has at least one positive divisor other than 1 itself.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5_412jez.lua:11: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 0\n  local\
    \ n = 1\n  for i = 1,#nums do\n    if nums[i]>=10 then\n      if nums[i]%2==0\
    \ then\n        local firstDigit = nums[i]/10\n        if n==1 then\n        \
    \  result = result+1\n        elseif firstDigit%2==1 then\n          result =\
    \ result+1\n        else\n          result = result+2\n        end\n      elseif\
    \ nums[i]%2==1 then\n        local firstDigit = nums[i]/10\n        if n==1 then\n\
    \          result = result+1\n        elseif firstDigit%2==0 then\n          result\
    \ = result+1\n        else\n          result = result+2\n        end\n      end\n\
    \    end\n    n = n+1\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmu8xkuug.lua:41:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmu8xkuug.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal total = 0\n\tfor\
    \ i, v in ipairs(nums) do\n\t\tif v > 10 then\n\t\t\tif v % 2 == 1 then\n\t\t\t\
    \tif i % 2 == 0 then\n\t\t\t\t\ttotal = total + 1\n\t\t\t\telse\n\t\t\t\t\ttotal\
    \ = total + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn total\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnpmjz38.lua:28:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpfnpmjz38.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 and nums[i]%2 == 1 and nums[i]%2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpus4tq4ck.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpus4tq4ck.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, num in pairs(nums) do\n    if num > 10 and (num % 2) == 1 and (num % 10)\
    \ == 1 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1sdj9wd3.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1sdj9wd3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local numsLength, numsSize\
    \ = table.getn(nums)\n    local sum = 0\n    local count = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpthvvk_wa.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, num in ipairs(nums) do\n    if num > 10 and\n       (num % 100) and\n   \
    \    (num % 100) ~= 0 and\n       (num % 100) ~= (num % 10) and\n       ((num\
    \ % 10) % 2) and\n       ((num % 10) % 2) ~= ((num % 10) and 1) then\n       \
    \ count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrsv3rp7.lua:27:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpkrsv3rp7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  local\
    \ last = 0\n  for i = 1, #nums do\n    -- check whether the number is bigger than\
    \ 10\n    if nums[i] > 10 then\n      count = count + 1\n      -- check if the\
    \ first and last digits are odd\n      if math.floor(nums[i]/10) % 2 == 1 then\n\
    \        last = i\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprt4k5ojb.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprt4k5ojb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- Your code here\n\
    \    local sum = 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n  \
    \          sum = sum + 1\n            if nums[i] % 2 == 1 and nums[i] % 3 == 1\
    \ then\n                sum = sum + 2\n            end\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2qhrhzv.lua:25:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq2qhrhzv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  local\
    \ first = nil\n  local last = nil\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local first_digit = math.floor(num / 10)\n    local last_digit = math.floor((num\
    \ - first_digit * 10) / 10)\n    if last_digit % 2 ~= 0 then\n      count = count\
    \ + 1\n      if first ~= nil and first ~= first_digit then\n        count = count\
    \ - 1\n      end\n      first = first_digit\n      last = last_digit\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cky0xb6.lua:31:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0cky0xb6.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local num  = math.floor(nums[i])\n        local\
    \ first = math.floor(num / 10)\n        local last  = math.floor(num / 100)\n\
    \        if first % 2 == 1 and last % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sanfaag.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp3sanfaag.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if (num > 10) and (math.floor(math.log(num)/math.log(10))\
    \ == math.floor(math.log(num)/math.log(10)-1)) and (math.modf(num)[1] % 2 == 1)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8nm7345.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_8nm7345.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local count = 0\n   for\
    \ index, num in ipairs(nums) do\n      if (num > 10 and (num % 2) ~= 0 and (num\
    \ % 2) ~= 1) then\n         count = count + 1\n      end\n   end\n   return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnvypz_c.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprnvypz_c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums, 2 do\n        if (math.floor((nums[i] * 10 + nums[i+1]) %\
    \ 2) == 1) and\n            (math.floor((nums[i] * 10 + nums[i+1] - 1) % 2) ==\
    \ 1) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5o8jgtn2.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5o8jgtn2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local n = 0\n   for _,\
    \ num in pairs(nums) do\n      n = n + 1\n      if num > 10 then\n         if\
    \ (((num - 1) mod 2) ~= 0) then\n            if ((num - 1) mod 3) == 0 then\n\
    \               n = n + 1\n            end\n         end\n      end\n   end\n\
    \   return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp071i__n0.lua:12: ')' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  for i, v in pairs(nums)\
    \ do\n    if v > 10 and\n      ((v % 2 == 0) and (math.floor(v / 2) ~= 0)) and\n\
    \      ((v % 2 == 0) and (math.floor(v / 2) ~= math.floor(v / 2)))\n    then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqjty8a4.lua:22:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpzqjty8a4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local sum = 0\n  for _,\
    \ num in ipairs(nums) do\n    sum = sum + num % 2 == 0 and\n    num % 2 ~= 0 and\
    \ num % 2 ~= (math.floor(num / 2))\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv_5v2x6d.lua:10:\
    \ attempt to perform arithmetic on a boolean value (local 'sum')\nstack traceback:\n\
    \t/tmp/tmpv_5v2x6d.lua:10: in local 'candidate'\n\t/tmp/tmpv_5v2x6d.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1,#nums do\n    if nums[i] > 10 then\n      if ((nums[i] % 2) and (nums[i]\
    \ % 3)) then\n\tcount = count + 1\n      end\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8vvs0cx.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpe8vvs0cx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _,v in ipairs(nums) do\n\t\tif math.floor(v) ~= v then\n\t\t\tif math.floor(v\
    \ / 10) % 2 ~= 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\t\
    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3og88_nr.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3og88_nr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- Your code here\n  --\
    \ Write your code here\n  return #nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqiauegk.lua:16:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpnqiauegk.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1,#nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 2 ==\
    \ 1 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq14qnpd.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpsq14qnpd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  for _, num in ipairs(nums)\
    \ do\n    if num > 10 then\n      local first = num:sub(1, 1)\n      local last\
    \ = num:sub(2, 2)\n      if first and last and first % 2 and last % 2 then\n \
    \       return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt78c1qwo.lua:23:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpt78c1qwo.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local count = 0\n   for\
    \ _, v in ipairs(nums) do\n      if v > 10 then\n         if mod(v, 2) == 1 then\n\
    \            count = count + 1\n         end\n      end\n   end\n   return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphp97ma3q.lua:11:\
    \ attempt to call a nil value (global 'mod')\nstack traceback:\n\t/tmp/tmphp97ma3q.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphp97ma3q.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  if nums == nil or #nums\
    \ == 0 then\n    return nil\n  end\n  local i = 0\n  local sum = 0\n  \n  -- If\
    \ there are no odd digits at the beginning, the number is even\n  if nums[1] ~=\
    \ 0 then\n    i = 2\n    sum = nums[1]\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptvd646qs.lua:32: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        if nums[i] > 10 then\n            if nums[i] %\
    \ 2 ~= 1 and nums[i] % 2 ~= 0 then\n                count = count + 1\n      \
    \      end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkjud05k.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdkjud05k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local numsLength = #nums\n\
    \   if not numsLength then return 0 end\n   \n   -- If there are no elements in\
    \ the array\n   if numsLength == 1 then return 0 end\n   \n   -- Initialize sum\n\
    \   local sum = 0\n   \n   -- Initialize flag\n   local flag = true\n   \n   --\
    \ Loop through each element in the array\n   for i=1, numsLength do\n      \n\
    \      -- Check if the current number is greater than 10\n      if flag and nums[i]\
    \ <= 10 then\n         sum = sum + 1 \n         flag = false\n      end\n    \
    \  \n      -- Check if the first and last digits are odd\n      if flag and (not\
    \ nums[i] % 2) then\n         sum = sum + 1 \n         flag = false\n      end\n\
    \   end\n   \n   -- Return the number of elements in the array that are greater\
    \ than 10 \n   -- and both first and last digits are odd (e.g. 1, 3, 5, 7, 9)\n\
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4w3_cvy.lua:44:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa4w3_cvy.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
