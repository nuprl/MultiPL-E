name: HumanEval_105_by_length
language: lua
prompt: "-- Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- arr = [2, 1, 1, 4, 5,\
  \ 8, 2, 3]   \n-- -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n-- -> reverse arr ->\
  \ [8, 5, 4, 3, 2, 2, 1, 1]\n-- return [\"Eight\", \"Five\", \"Four\", \"Three\"\
  , \"Two\", \"Two\", \"One\", \"One\"]\n-- If the array is empty, return an empty\
  \ array:\n-- arr = []\n-- return []\n-- If the array has any strange number ignore\
  \ it:\n-- arr = [1, -1 , 55] \n-- -> sort arr -> [-1, 1, 55]\n-- -> reverse arr\
  \ -> [55, 1, -1]\n-- return = ['One']\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #arr == 1 then\n    return {\"One\"}\n  elseif #arr == 2 then\n\
    \    return {\"Two\", \"One\"}\n  elseif #arr == 3 then\n    return {\"Three\"\
    , \"Two\", \"One\"}\n  elseif #arr == 4 then\n    return {\"Four\", \"Three\"\
    , \"Two\", \"One\"}\n  elseif #arr == 5 then\n    return {\"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"One\"}\n  elseif #arr == 6 then\n    return {\"Six\",\
    \ \"Five\", \"Four\", \"Three\", \"Two\", \"One\"}\n  elseif #arr == 7 then\n\
    \    return {\"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    }\n  elseif #arr == 8 then\n    return {\"Eight\", \"Seven\", \"Six\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"One\"}\n  elseif #arr == 9 then\n    return\
    \ {\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"One\"}\n  end\n  return nil\nend", "\tlocal res = {}\n\tfor i = 1, 10\
    \ do\n\t\tres[i] = 'One'\n\tend\n\tfor j = 10, 1, -1 do\n\t\tres[j] = 'Ten'\n\t\
    end\n\tfor i = 1, #arr do\n\t\tlocal cur = arr[i]\n\t\tlocal idx = 1\n\t\twhile\
    \ idx <= 9 do\n\t\t\tif cur < 10 then\n\t\t\t\tidx = 10\n\t\t\telseif cur > 9\
    \ then\n\t\t\t\tidx = 1\n\t\t\telse\n\t\t\t\tres[idx] = res[cur]\n\t\t\t\tidx\
    \ = idx + 1\n\t\t\tend\n\t\t\tcur = cur * 10\n\t\tend\n\tend\n\treturn res\nend",
  "\tlocal _arr = {}\n\tlocal arr_size = #arr\n\tfor _ = 1, arr_size do\n\t\tlocal\
    \ num = {}\n\t\tlocal _num = arr[#arr]\n\t\tfor i = 1, 10 do\n\t\t\ttable.insert(num,\
    \ i..'')\n\t\tend\n\t\ttable.insert(num, num..'')\n\t\ttable.insert(_num, _num..'')\n\
    \t\ttable.insert(_arr, _num..'')\n\tend\n\ttable.sort(_arr) \n\tlocal _arr2 =\
    \ {}\n\tfor _, value in pairs(_arr) do\n\t\ttable.insert(_arr2, value..'')\n\t\
    end\n\treturn _arr2\nend", "  local arr_rev = {}\n  local arr_sort = {}\n  local\
    \ arr_length_map = {}\n  local last_index = 0\n  local arr_length = 0\n  for i,\
    \ x in ipairs(arr) do\n    arr_length = arr_length + 1\n    arr_length_map[arr_length]\
    \ = x\n    arr_sort[last_index] = x\n    last_index = last_index + 1\n  end\n\
    \  arr_length = last_index\n  for i = 1, arr_length do\n    local v = arr_length_map[arr_length\
    \ - i]\n    arr_rev[arr_length - i] = v\n    arr_sort[arr_length - i] = arr_length_map[arr_length\
    \ - i - 1]\n  end\n  local arr_final = {}\n  for _, x in ipairs(arr_sort) do\n\
    \    arr_final[x] = arr_length_map[arr_final.length + arr_length - 1]\n  end\n\
    \  return arr_final\nend", "  local length = #arr\n  if length <= 0 then return\
    \ '' end\n  local small, large = arr[1], arr[1]\n  for i=2,length do\n    small,\
    \ large = small, arr[i]\n    if small > large then small, large = large, small\
    \ end\n  end\n  local result = {small}\n  for i=2,length do\n    result[i] = name[large]\n\
    \    large = arr[i]\n  end\n  return result\nend", "  local a = {}\n  for _, v\
    \ in ipairs(arr) do\n    table.insert(a, v)\n  end\n  table.sort(a)\n  for _,\
    \ v in ipairs(a) do\n    arr[#arr+1] = v\n  end\n  local reversed = {}\n  for\
    \ _, v in ipairs(arr) do\n    reversed[#reversed+1] = name[v]\n  end\n  return\
    \ reversed\nend", "    local new_arr = {}\n    local min = 1\n    local max =\
    \ 9\n    local min_len = sys.maxint\n    local max_len = -sys.maxint -1\n    for\
    \ _, el in ipairs(arr) do\n        if el < min then\n            min = el\n  \
    \          min_len = el\n        end\n        if el > max then\n            max\
    \ = el\n            max_len = el\n        end\n    end\n    local length = (max\
    \ - min) + 1\n    local tmp = min_len\n    while tmp <= max_len and length > 0\
    \ do\n        table.insert(new_arr, arr[tmp - min_len])\n        length = length\
    \ - 1\n        tmp = tmp + 1\n    end\n    return new_arr\nend", "  -- if there\
    \ are two or more consecutive numbers \n  if #arr > 1 then\n    -- we sort them\
    \ by length in descending order \n    table.sort(arr, function(a, b)\n      return\
    \ #b - #a -- we subtract one to keep the array from being reverse sorted \n  \
    \  end)\n    local new_arr\n    -- we iterate through all the elements except\
    \ the last one \n    for i = 1, #arr - 1 do\n      -- we get the element and its\
    \ length \n      local element_len = (arr[i]):len() -- we get the length of the\
    \ element \n      -- if the last element is larger than the previous one we keep\
    \ it the same \n      if i ~= #arr - 1 then\n        new_arr[i] = arr[i]\n   \
    \   else\n        new_arr[#new_arr + 1] = arr[i]\n      end\n      -- we check\
    \ the element in the new array and we swap it with the current one \n      if\
    \ element_len > arr[i + 1]:len() then\n        arr[i + 1] = arr[i + 1] -- we swap\
    \ the elements and we update our new array \n      else\n        arr[i + 1] =\
    \ arr[i + 1] -- we reverse the elements and we update our new array \n      end\n\
    \    end\n    -- we reverse the array and we return the array \n    return table.reverse(new_arr)\n\
    \  else\n    return [] -- we return an empty array if the array is empty \n  end\n\
    end", "  -- If there are no numbers, return an empty array\n  if #arr == 0 then\n\
    \    return arr\n  end\n  -- If there is one number, return it\n  if #arr == 1\
    \ then\n    return arr\n  end\n  -- Sort all the numbers, since they are all between\
    \ 1 and 9\n  table.sort(arr)\n  -- Create a new array to store the reverse numbers\n\
    \  local new_arr = {}\n  -- Create a counter to store how many digits we've done\n\
    \  local c = 0\n  -- Go through each element in the array\n  for i = 1, #arr do\n\
    \    -- If the number is between the numbers 1 and 9\n    -- add it to the new\
    \ array\n    if arr[i] >= 1 and arr[i] <= 9 then\n      new_arr[c] = arr[i]\n\
    \      -- Increment the counter\n      c = c + 1\n    end\n    -- If the number\
    \ is not between 1 and 9 ignore it\n  end\n  -- Return the new array\n  return\
    \ new_arr\nend", "\tlocal sortedArr = arr.sort(function(a, b) return a < b end)\n\
    \tlocal reversedArr = sortedArr:reverse()\n\tlocal reversedStr = \"\"\n\tfor i\
    \ = 1, 9 do\n\t\tlocal index = reversedArr:index(i, 1) + 1\n\t\treversedStr =\
    \ reversedStr .. \"One\" .. tostring(index)\n\tend\n\treturn reversedStr\nend",
  '    if #arr == 0 then return [] end', "    if not arr then return end\n    local\
    \ arr2 = {}\n    for i = 1,#arr do\n        if arr[i] > 9 then\n            arr2[i]\
    \ = arr[i]\n        else\n            arr2[i] = \"One\"\n        end\n    end\n\
    \    arr2 = arr2[#arr2]\n    arr2:reverse()\n    for i,v in ipairs(arr2) do\n\
    \        arr[i] = v\n    end\n    return arr\nend", "  for i, v in ipairs(arr)\
    \ do\n    if v <= 1 or v >= 9 then\n      return false\n    end\n  end\n  return\
    \ arr\nend", "  local len = #arr\n  local ret = {}\n  local maxlen = math.floor(math.log10(len)\
    \ + 1)\n  local last_index = math.floor(len / maxlen)\n  for i = 1, maxlen do\n\
    \    if i % 2 == 1 then\n      table.insert(ret, tostring(arr[last_index + i -\
    \ 2]))\n    else\n      table.insert(ret, tostring(arr[last_index + i - 1]))\n\
    \    end\n  end\n  return ret\nend", "  if #arr == 0 then return {} end\n  local\
    \ sorted = {}\n  table.sort(arr)\n  -- reverse the array\n  local n = #arr\n \
    \ for i=1,n do\n    sorted = table.concat(sorted,table.concat(arr,table.reverse(arr[i])))\n\
    \  end\n  -- replace the number with the corresponding name\n  local names = {\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}\n  local res = {}\n  for i=1,n do\n    res[i] = names[sorted[i]]\n\
    \  end\n  return res\nend", "    local sorted_array = {}\n    for i = 1, #arr\
    \ do\n        if arr[i] > 0 and arr[i] <= 9 then\n            table.insert(sorted_array,\
    \ arr[i])\n        end\n    end\n    table.sort(sorted_array, function(x,y)\n\
    \        return x - y\n    end)\n    local reversed_array = {}\n    for i = 1,\
    \ #sorted_array do\n        reversed_array[i] = sorted_array[i]\n    end\n   \
    \ for i = 1, #reversed_array do\n        local n = reversed_array[i]\n       \
    \ for j = 1, #by_length do\n            if by_length[j] == n then\n          \
    \      reversed_array[i] = by_length[j]\n            end\n        end\n    end\n\
    \    return reversed_array\nend", "  if #arr == 0 then\n    return arr\n  end\n\
    \  \n  local tmp = {}\n  for idx = 1, #arr do\n    local value = tonumber(arr[idx])\n\
    \    if value == nil then\n      break\n    end\n    \n    if value < 1 then\n\
    \      tmp[1] = tmp[1] + 1\n    elseif value > 9 then\n      tmp[9] = tmp[9] +\
    \ 1\n    else\n      table.insert(tmp, value)\n    end\n  end\n  \n  return table.concat(table.unpack(tmp))\n\
    end", "  local lengths = table.sort(table.map(arr,\n    function (el) return #el\
    \ end\n  ))\n  local results = {}\n  for i = 1, #lengths do\n    table.insert(results,\
    \ table.concat(lengths[{i}], \"Name\"))\n  end\n  return results\nend", "  local\
    \ function length(arr,start)\n    local len = #arr\n    if start == len or start\
    \ > len-1 then return end \n    \n    local tmp = {}\n    for i = start, len-1\
    \ do\n      tmp[#tmp + 1] = arr[i]\n    end\n    return tmp\n  end\n  local function\
    \ reverse(arr)\n    local nn = len((reverse(arr):gsub('%d','..')))\n    for i=1,nn,1\
    \ do arr[i] = #arr + 1 end\n    return arr\n  end\n  \n  local function sort_arr(arr)\n\
    \    local sorted_arr = reverse(arr)\n    local len = #sorted_arr\n    \n    local\
    \ new_arr = by_length(sorted_arr)\n    if len > 0 then\n      for i=1, len do\n\
    \        new_arr[i + 1] = new_arr[i]\n      end\n    end\n    \n    return new_arr\n\
    \  end\n  \n  local function print_arr(arr)\n    local nn = len((print_arr(arr):gsub('%d','..')))\n\
    \    for i=1,nn,1 do\n      print(tostring(arr[i]))\n    end\n  end\n  \n  return\
    \ sort_arr(arr)\nend", "    local _, _, sorted_array = table.sort(arr) \n    local\
    \ reverse_array = array.rev(sorted_array) \n    local _, _, sorted_array_reversed\
    \ = table.sort(reverse_array)", "  if #arr == 0 then return [] end\n  local pivot\
    \ = math.floor( #arr / 2 )\n  local left, right = arr[ 1, pivot ], arr[pivot,\
    \ 1 ]\n  for i = 1, pivot do\n    local tmp, left = left,\n      local tmp = #left,\
    \ \n      left[#left - 1] = left[i]\n      left[ i + 1 ] = tmp\n  end\n  local\
    \ left = by_length(left)\n  local right = by_length(right)\n  for i = 1, #left\
    \ do\n    right[ i + 1 ] = left[ i + 1 ]\n  end\n  right[ #right ] = pivot\n \
    \ return right\nend", "   local new_arr = {}\n   for i = 1, #arr do\n      if\
    \ arr[i] >= 1 and arr[i] <= 9 then\n         table.insert(new_arr, arr[i])\n \
    \     end\n   end\n   if #new_arr == 0 then\n      return new_arr\n   end\n  \
    \ table.sort(new_arr)\n   for i = 1, #new_arr do\n      new_arr[i] = \"One\"\n\
    \      new_arr[#new_arr + i] = \"Nine\"\n   end\n   table.sort(new_arr)\n   for\
    \ i = 1, #new_arr do\n      new_arr[i] = \"Two\"\n      new_arr[#new_arr + i]\
    \ = \"Eight\"\n   end\n   table.sort(new_arr)\n   for i = 1, #new_arr do\n   \
    \   new_arr[i] = \"Three\"\n      new_arr[#new_arr + i] = \"Seven\"\n   end\n\
    \   table.sort(new_arr)\n   for i = 1, #new_arr do\n      new_arr[i] = \"Four\"\
    \n      new_arr[#new_arr + i] = \"Six\"\n   end\n   table.sort(new_arr)\n   for\
    \ i = 1, #new_arr do\n      new_arr[i] = \"Five\"\n      new_arr[#new_arr + i]\
    \ = \"Five\"\n   end\n   table.sort(new_arr)\n   for i = 1, #new_arr do\n    \
    \  new_arr[i] = \"Six\"\n      new_arr[#new_arr + i] = \"Four\"\n   end\n   table.sort(new_arr)\n\
    \   for i = 1, #new_arr do\n      new_arr[i] = \"Seven\"\n      new_arr[#new_arr\
    \ + i] = \"Three\"\n   end\n   table.sort(new_arr)\n   for i = 1, #new_arr do\n\
    \      new_arr[i] = \"Eight\"\n      new_arr[#new_arr + i] = \"Two\"\n   end\n\
    \   table.sort(new_arr)\n   for i = 1, #new_arr do\n      new_arr[i] = \"Nine\"\
    \n      new_arr[#new_arr + i] = \"One\"\n   end\n   return new_arr\nend", "  local\
    \ arr2 = {}\n  for i = 1, #arr do\n    if arr[i] >= 10 and arr[i] <= 9 then\n\
    \      table.insert(arr2, arr[i])\n    end\n  end\n  table.sort(arr2, function\
    \ (a,b) return #a < #b end)\n  local i = 0\n  local results = {}\n  while i <\
    \ #arr2 do\n    local val = arr2[i]\n    table.insert(results, string.format(\"\
    %g\", val)) -- convert int to string in format '9.2f'\n    i = i + 1\n  end\n\
    \  table.sort(results, function (a,b) return a<b end)\n  table.sort(results, function\
    \ (a,b) return a>b end)\n  for _, v in pairs(results) do\n    table.insert(arr,\
    \ v)\n  end\n  return arr\nend", "  local arr = arr or {}\n  local lengths = arr:map(\
    \ function(x) return #x end)\n  local sorted = lengths:sort(function(a,b) return\
    \ #a > #b end) \n  local reversed = sorted:reverse()\n  for i = 1, #sorted do\n\
    \    if lengths[reversed[i]] == 1 then\n      reversed[i] = \"One\"\n    end\n\
    \    if lengths[reversed[i]] == 2 then\n      reversed[i] = \"Two\"\n    end\n\
    \    if lengths[reversed[i]] == 3 then\n      reversed[i] = \"Three\"\n    end\n\
    \    if lengths[reversed[i]] == 4 then\n      reversed[i] = \"Four\"\n    end\n\
    \    if lengths[reversed[i]] == 5 then\n      reversed[i] = \"Five\"\n    end\n\
    \    if lengths[reversed[i]] == 6 then\n      reversed[i] = \"Six\"\n    end\n\
    \    if lengths[reversed[i]] == 7 then\n      reversed[i] = \"Seven\"\n    end\n\
    \    if lengths[reversed[i]] == 8 then\n      reversed[i] = \"Eight\"\n    end\n\
    \    if lengths[reversed[i]] == 9 then\n      reversed[i] = \"Nine\"\n    end\n\
    \  end\n  \n  local result = {}\n  for _, v in ipairs(reversed) do\n    result[#result+1]\
    \ = reversed[v]\n  end\n  return result\nend", "  -- Sort first by length then\
    \ by the number\n  -- Length is used to determine sort order\n  -- Since lengths\
    \ are sorted first we can use them to find the correct place to put each number\n\
    \  -- This could use better algorithm but for now its good enough\n  local function\
    \ cmp (a, b)\n    return a > b and 1 or -1\n  end\n  table.sort(arr, cmp)\n  return\
    \ table.concat(arr, \" \")\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local lengths = {}\n  for i,v in ipairs(arr) do\n    if lengths[v] == nil then\n\
    \      lengths[v] = i\n    end\n  end\n  local results = {}\n  for i, v in ipairs(lengths)\
    \ do\n    table.insert(results, string.rep(k, lengths[v]))\n  end\n  return results\n\
    end", "    local output = {}\n    for i = #arr, 1, -1 do\n        table.insert(output,\
    \ arr[i])\n    end\n    table.sort(output)\n    for i = #arr, 1, -1 do\n     \
    \   arr[i] = output[#output]\n    end\n    table.sort(arr)\n    table.insert(output,\
    \ arr[1])\n    return output\nend", "    local function swap(x, y)\n        arr[x],\
    \ arr[y] = arr[y], arr[x]\n    end\n    local function length(x, i)\n        return\
    \ x[i][1]\n    end\n    local function reverse(x, i, j)\n        for j = i..j,\
    \ nil, -1 do\n            swap(x, j, j-1)\n        end\n    end\n    local function\
    \ sort(x, i, j)\n        if j > i then\n            local m = math.floor(j/2)\n\
    \            sort(x, i, m-1)\n            sort(x, m+1, j)\n            reverse(x,\
    \ i, j)\n        end\n    end\n    sort(arr, 1, #arr)\n    return arr\nend", " \
    \ if #arr == 0 then\n    return arr\n  end\n  local pivot = arr[1]\n  local smaller,\
    \ bigger = {}, {}\n  for i = 2, #arr do\n    if pivot <= arr[i] then\n      table.insert(smaller,\
    \ arr[i])\n    else\n      table.insert(bigger, arr[i])\n    end\n  end\n  return\
    \ by_length(smaller) + [pivot] + by_length(bigger)\nend", "  -- If the array has\
    \ only \"0\" and \"1\", then return \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\":\n  -- If the array has only \"\
    0\" and \"-1\", then return \"One\", \"Zero\", \"Ten\", \"Nine\", \"Nine\", \"\
    One\", \"One\", \"Zero\":\n  -- If the array has only \"1\" and \"0\", then return\
    \ \"Two\", \"One\", \"One\":\n  -- If \"0\" and \"-1\" are in the array, then\
    \ ignore them:\n  if #arr == 1 then\n    if arr[1] == \"0\" then\n      return\
    \ \"One\", \"Zero\", \"Ten\", \"Nine\", \"Nine\", \"One\", \"One\", \"Zero\"\n\
    \    elseif arr[1] == \"-1\" then\n      return \"One\", \"Zero\", \"Ten\", \"\
    Nine\", \"Nine\", \"One\", \"One\", \"Zero\"\n    else\n      return \"One\"\n\
    \    end\n  else\n    -- We first reverse the array:\n    local new_arr = arr:reverse()\n\
    \    -- Then we sort it by length and we reverse it back:\n    local new_arr =\
    \ table.sort(new_arr,\n      function(x)\n        if x == \"0\" then return 1\n\
    \        elseif x == \"-1\" then return -1\n        elseif x == \"1\" then return\
    \ -1\n        else\n          return nil\n        end\n      end)\n    -- Then\
    \ we remove all the elements having \"-1\" as length:\n    new_arr = new_arr:gsub(\"\
    %b(-1)\", \"\")\n    -- We remove all the elements having \"0\" and \"-1\" as\
    \ length:\n    new_arr = new_arr:gsub(\"%b(0)\", \"\")\n    -- We remove all the\
    \ elements having \"1\" and \"0\" as length:\n    new_arr = new_arr:gsub(\"%b(1)\"\
    , \"\")\n    -- We remove all the elements \"0\" and \"-1\" as length:\n    new_arr\
    \ = new_arr:gsub(\"%b(0-1\", \"\")\n    -- We remove all the elements \"1\" and\
    \ \"0\":\n    new_arr = new_arr:gsub(\"%b(1)0\", \"\")\n    -- We remove all the\
    \ elements having \"-1\" as length:\n    new_arr = new_arr:gsub(\"%b(-1)\", \"\
    \")\n    -- We remove all the elements \"0\" and \"-1\":\n    new_arr = new_arr:gsub(\"\
    %b(-01\", \"\")\n    -- We remove all the elements \"1\" and \"0\":\n    new_arr\
    \ = new_arr:gsub(\"%b(1)0\", \"\")\n    -- We remove all the elements \"1\" and\
    \ \"0\" and \"-1\":\n    new_arr = new_arr:gsub(\"%b(1)0-1\", \"\")\n    -- We\
    \ remove all the elements \"0\" and \"-1\":\n    new_arr = new_", "  local sorted_arr\n\
    \  if #arr == 0 then\n    return arr\n  elseif #arr == 1 then\n    sorted_arr\
    \ = arr\n  elseif #arr == 2 then\n    sorted_arr = reverse(arr) .. arr[1]\n  else\n\
    \    local small\n    local large\n    for i = 1, #arr do\n      small = arr[i]\n\
    \      large = arr[i-1]\n      arr[i] = small .. \"..\" .. large\n    end\n  \
    \  sorted_arr = sort(arr)\n  end\n  local names = {}\n  for i = 1, #sorted_arr\
    \ do\n    names[i] = \"One\"\n    if sorted_arr[i] <= 9 then\n      names[sorted_arr[i]]\
    \ = \"Two\"\n      if sorted_arr[i] <= 99 then\n        names[sorted_arr[i]] =\
    \ \"Three\"\n        if sorted_arr[i] <= 999 then\n          names[sorted_arr[i]]\
    \ = \"Four\"\n          if sorted_arr[i] <= 9999 then\n            names[sorted_arr[i]]\
    \ = \"Five\"\n            if sorted_arr[i] <= 99999 then\n              names[sorted_arr[i]]\
    \ = \"Six\"\n              if sorted_arr[i] <= 999999 then\n                names[sorted_arr[i]]\
    \ = \"Seven\"\n                if sorted_arr[i] <= 9999999 then\n            \
    \      names[sorted_arr[i]] = \"Eight\"\n                  if sorted_arr[i] <=\
    \ 999999999 then\n                    names[sorted_arr[i]] = \"Nine\"\n      \
    \            end\n                end\n              end\n            end\n  \
    \        end\n        end\n      end\n    end\n  end\n  return names\nend", "\t\
    local function order(num)\n\t\tlocal i = math.floor( num / 10 )\n\t\tlocal j =\
    \ num % 10\n\t\treturn array[i][j]\n\tend\n\t-- sort by length\n\treturn table.sort(\
    \ arr, function(a,b) return len(a) > len(b) end)\nend", "    local names = {}\n\
    \    for i, num in pairs(arr) do\n        local name = names[num] or tostring(num)\
    \ or \"Unknown\" \n        table.insert(names, name) \n    end\n    table.sort(names,\
    \ function(a, b) \n        return a < b \n    end)\n    for i, name in pairs(names)\
    \ do\n        local arr = string.gsub(name, \"[^0-9]\", \"\")\n        table.insert(arr,\
    \ names[i])\n    end\n    return arr\nend", "\tlocal lengths = {}\n\tfor _, item\
    \ in pairs(arr) do\n\t\ttable.insert(lengths, #item)\n\tend\n\ttable.sort(lengths)\n\
    \tlocal result = {}\n\tlocal index = 1\n\tfor _, length in pairs(lengths) do\n\
    \t\ttable.insert(result, arr[index:index + length])\n\t\tindex = index + length\n\
    \tend\n\treturn result\nend", "\tif #arr == 0 then return end\n\tif arr[1] < 1\
    \ then return end\n\tif arr[1] <= 9 then arr[1] = 1 end", "  local results = {}\n\
    \  local i = 1\n  while i < #arr do\n    local length = arr[i]\n    if length\
    \ == 1 then\n      results[i] = \"One\"\n    elseif length == 2 then\n      results[i]\
    \ = \"Two\"\n    elseif length == 3 then\n      results[i] = \"Three\"\n    elseif\
    \ length == 4 then\n      results[i] = \"Four\"\n    elseif length == 5 then\n\
    \      results[i] = \"Five\"\n    elseif length == 6 then\n      results[i] =\
    \ \"Six\"\n    elseif length == 7 then\n      results[i] = \"Seven\"\n    elseif\
    \ length == 8 then\n      results[i] = \"Eight\"\n    elseif length == 9 then\n\
    \      results[i] = \"Nine\"\n    end\n    i = i + 1\n  end\n  return results\n\
    end", "\tlocal arr2 = {}\n\tlocal count = 0\n\tlocal lengths = {}", "   local\
    \ reversed = {}\n   for i = #arr, 1, -1 do\n      table.insert(reversed, arr[#reversed])\n\
    \   end\n   return reversed\nend", "  local new_arr = {}\n  for i = 1, #arr do\n\
    \    if arr[i] >= 1 and arr[i] <= 9 then\n      new_arr[#new_arr+1] = arr[i]\n\
    \    end\n  end\n  table.sort(new_arr, reverse)\n  local new_arr2 = {}\n  for\
    \ i, v in pairs(new_arr) do\n    if v == 1 then\n      new_arr2[#new_arr2+1] =\
    \ \"One\"\n    elseif v == 2 then\n      new_arr2[#new_arr2+1] = \"Two\"\n   \
    \ elseif v == 3 then\n      new_arr2[#new_arr2+1] = \"Three\"\n    elseif v ==\
    \ 4 then\n      new_arr2[#new_arr2+1] = \"Four\"\n    elseif v == 5 then\n   \
    \   new_arr2[#new_arr2+1] = \"Five\"\n    elseif v == 6 then\n      new_arr2[#new_arr2+1]\
    \ = \"Six\"\n    elseif v == 7 then\n      new_arr2[#new_arr2+1] = \"Seven\"\n\
    \    elseif v == 8 then\n      new_arr2[#new_arr2+1] = \"Eight\"\n    elseif v\
    \ == 9 then\n      new_arr2[#new_arr2+1] = \"Nine\"\n    end\n  end\n  return\
    \ new_arr2\nend", "  if #arr < 1 then\n    return arr\n  end\n  local max = -math.infinity\n\
    \  local min_ = math.infinity\n  for i, v in ipairs(arr) do\n    if v < min then\n\
    \      min = v\n    end\n    if v > max then\n      max = v\n    end\n  end\n\
    \  local length = 0\n  local max_value = max\n  local min_value = min\n  while\
    \ max_value < min_value do\n    table.insert(arr, max_value + 1)\n    max_value\
    \ = max_value + 1\n  end\n  local max_index = #arr - 1\n  local first_index =\
    \ #arr\n  local second_index = 1\n  for i = 1, #arr do\n    if max_value - arr[i]\
    \ < 0 then\n      arr[first_index] = arr[i]\n      arr[second_index] = arr[i +\
    \ 1]\n      table.insert(arr, 0, arr[i])\n      table.insert(arr, -1, arr[i +\
    \ 1])\n      second_index = second_index + 2\n      first_index = first_index\
    \ + 1\n      length = length + 1\n    end\n    max_value = arr[i]\n  end\n  for\
    \ i = 1, length do\n    arr[first_index] = names[arr[i]]\n    arr[second_index]\
    \ = names[arr[i + 1]]\n    table.insert(arr, 0, names[arr[i]])\n    table.insert(arr,\
    \ -1, names[arr[i + 1]])\n    second_index = second_index + 2\n    first_index\
    \ = first_index + 1\n  end\n  for i = 1, #arr do\n    arr[i] = names[arr[i]]\n\
    \  end\n  return arr\nend", "\tlocal new_arr = {}\n\tlocal i, n, m, j", "    if\
    \ arr[1] == nil or arr[2] == nil then\n        return arr\n    end\n    local\
    \ max1 = math.max(arr[1], arr[2])\n    local max2 = math.max(arr[2], arr[1])\n\
    \    \n    local num1 = max1\n    local num2 = max2\n    local count = 1\n   \
    \ local res = []\n    while num1 != max1 or num2 ~= max2 do\n        if num1 >\
    \ num2 then\n            res.insert(num1)\n            num1 = num1 - 1\n     \
    \   else\n            res.insert(num2)\n            num2 = num2 - 1\n        end\n\
    \        count = count + 1\n    end\n    \n    if count == 1 then\n        res.insert(num1)\n\
    \    end\n    \n    return res\nend", "    local n = {}\n    for i = 1, #arr do\n\
    \        n[i] = arr[i]\n    end\n    table.sort(n)\n    for i = 1, #arr do\n \
    \       arr[i] = n[i]\n    end\n    table.sort(arr)\n    local res = {}\n    for\
    \ i = 1, #arr do\n        res[i] = \"One\"\n    end\n    for i = 1, #arr do\n\
    \        res[#res+1] = arr[i]\n    end\n    return res\nend", "   local sorted_arr\
    \ = arr:sort(function(a,b) return #a == #b end)\n   for i=1, #sorted_arr do\n\
    \      sorted_arr[i] = by_digit(sorted_arr[i], sorted_arr)\n   end\n   sorted_arr:reverse()\n\
    \   return sorted_arr\nend", "\tlocal reverse = nil\n\tlocal function reverseHelper(arr,\
    \ l, r)\n\t\tif l > r then\n\t\t\treturn\n\t\tend\n\t\tlocal mid = l + (r - l)\
    \ / 2\n\t\tarr[mid], arr[l] = arr[l], arr[mid]\n\t\treverseHelper(arr, l, mid\
    \ - 1)\n\t\treverseHelper(arr, mid + 1, r)\n\tend\n\treverseHelper(arr, 1, #arr\
    \ - 1)\n\treturn reverse\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}\n  for _, v in ipairs(arr) do\n    table.insert(sorted_arr,\
    \ v)\n  end\n  for i = 1, 9 do\n    table.insert(reversed_arr, sorted_arr[i])\n\
    \  end\n  for i = 1, 9 do\n    sorted_arr[i] = names[reversed_arr[i]]\n  end\n\
    \  return sorted_arr\nend", "  local results = {}\n  for i, v in ipairs(arr) do\n\
    \    if v ~= nil and v ~= \"\" then\n      table.insert(results, v)\n    end\n\
    \  end\n  table.sort(results, function(a, b) return a < b end)\n  local results\
    \ = {}\n  for _, v in ipairs(results) do\n    if v ~= nil then\n      table.insert(results,\
    \ string.format(\"%s\", v)) \n    end\n  end\n  return results\nend", "\t-- return\
    \ an empty array if arr is nil\n\tif arr == nil then\n\t\treturn nil\n\tend",
  "  if #arr == 0 then\n    return {}\n  end\n  local function sort(array)\n    local\
    \ sorted = {}\n    for i = 1, 9 do\n      sorted[i] = false\n    end\n    local\
    \ length = #array\n    for i = 1, length do\n      local current = array[i]\n\
    \      for j = 1, 9 do\n        if sorted[j] and current > sorted[j] then\n  \
    \        local k = j\n          sorted[k] = true\n        end\n      end\n   \
    \ end\n    local reversed = {}\n    for i = 1, 9 do\n      reversed[i] = false\n\
    \    end\n    local length = #array\n    for i = 1, length do\n      local current\
    \ = array[i]\n      for j = 1, 9 do\n        if sorted[j] and not reversed[j]\
    \ and current < sorted[j] then\n          local k = j\n          reversed[k] =\
    \ true\n        end\n      end\n    end\n    local result = {}\n    local length\
    \ = #array\n    for i = 1, length do\n      if not sorted[i] then\n        result[#result\
    \ + 1] = \"One\"\n      elseif reversed[i] then\n        result[#result + 1] =\
    \ \"Nine\"\n      else\n        result[#result + 1] = arr[i]\n      end\n    end\n\
    \    return result\n  end\n  return sort(arr)\nend", "  local reverse = {}\n \
    \ for i = #arr, 1, -1 do\n    reverse[tostring(arr[i])] = arr[i]\n  end", "  \
    \  local function helper(arr)\n        -- arr will be remained unchanged, only\
    \ helper will be changed.\n        -- arr is also changed, so arr inside helper\
    \ will be changed.\n        -- This does not effect arr outside helper", "  local\
    \ arr2 = {}\n  for i = 1,#arr do\n    arr2[#arr2 + 1] = i\n  end\n  table.sort(arr2,\
    \ function(a,b) return #arr > #arr2 and #arr < #arr + 1 end)\n  table.sort(arr2,\
    \ function(a,b) return #arr < #arr + 1 and #arr > #arr + 1 end)\n  for i = 1,\
    \ #arr2 do\n    arr2[#arr2 + 1 - i] = arr2[#arr2 + 1 - i]..\"-\"..arr2[i]\n  end\n\
    \  return arr2\nend", "    local lengths = arr.map(function(x) return #x end)\n\
    \    if lengths[1] > lengths[2] then\n        table.sort(arr, function(a,b) return\
    \ #a > #b end)\n        table.sort(arr,\n          function(a, b) return a > b\
    \ end)\n    else\n        table.sort(arr, function(a, b) return #a < #b end)\n\
    \        table.sort(arr,\n          function(a, b) return a < b end)\n    end\n\
    \    local results = {}\n    for i = 1, #arr do\n        local length = #arr[i]\n\
    \        table.insert(results, {length = length, value = arr[i]})\n    end\n \
    \   local i, j = 1, 1\n    while j < #results do\n        while i <= #results[j]\
    \ do\n            local result = results[j][i]\n            i = i + 1\n      \
    \      arr[j + 1][#arr[j + 1] + 1] = result.value\n        end\n        j = j\
    \ + 1\n    end\n    return arr\nend\n</code>\n<|/ a dscore=3 tags=lua,sorting\
    \ |>\n<| a |>\nThis is my solution, based on two ideas from different posts above\
    \ (thanks to them for ideas and thanks to Chris for reminding me that Lua has\
    \ built-in functions for reversing tables):\n<code>", "    local num = 0\n   \
    \ for i, v in ipairs(arr) do\n        num = v < 1 and v or num * 10 + v\n    end\n\
    \    local temp = arr\n    arr = {}\n    for i = 1, 10 do\n        arr[#arr +\
    \ 1] = temp[num % 10]\n        num = math.floor(num / 10)\n    end\n    return\
    \ arr\nend", "  local sorted_arr = arr.sort(function(a,b) return math.abs(a-b)\
    \ end)\n  local reversed_arr = reverse.new(sorted_arr)\n  local new_arr = {}\n\
    \  for i=1,#reversed_arr do\n    if i == 1 or reversed_arr[i-1] > 10 then\n  \
    \    new_arr[#new_arr+1] = names[reversed_arr[i]]\n    end\n  end\n  return new_arr\n\
    end", "\tlocal sorted_array = table.sort(arr)\n\tlocal last_number = sorted_array[1]\n\
    \tlocal counter = 1\n\tlocal array_with_one_digit_numbers = \"\"\n\tlocal reversed_array\
    \ = {}\n\tfor i = 1, #sorted_array do\n\t\tif last_number == sorted_array[i]\n\
    \t\t\tarray_with_one_digit_numbers = array_with_one_digit_numbers .. \"One\"\n\
    \t\telse\n\t\t\treversed_array[counter] = sorted_array[i]\n\t\t\tarray_with_one_digit_numbers\
    \ = array_with_one_digit_numbers .. \"Two\"\n\t\t\tcounter = counter + 1\n\t\t\
    end\n\tend\n\treturn array_with_one_digit_numbers .. table.sort(reversed_array)\n\
    end", "\tlocal new_arr = {} \n\tfor i=1,#arr do\n\t\tlocal n = 1\n\t\tif #new_arr\
    \ > 0 then\n\t\t\tn = new_arr[1]\n\t\t\tnew_arr[1] = arr[i]\n\t\tend\n\t\tif arr[i]\
    \ <= n then\n\t\t\tnew_arr[n + 1] = arr[i]\n\t\tend\n\tend\n\t\n\treturn new_arr\n\
    end", "\tlocal function comparitor(a, b)\n\t\tif a<b then\n\t\t\treturn -1\n\t\
    \telse\n\t\t\treturn 1\n\t\tend\n\tend\n\ttable.sort(arr, comparitor)\n\tlocal\
    \ reversed = {}\n\tlocal reversed_idx = 1\n\tfor i = 1,#arr do\n\t\treversed[reversed_idx]\
    \ = arr[i]\n\t\treversed_idx = reversed_idx + 1\n\tend\n\treturn reversed\nend",
  "    local sorted_arr = sort(arr, function(a, b) return a > b end)\n    local reversed_arr\
    \ = reverse(sorted_arr)\n    local return_arr = {}\n    for i=1,9 do\n       \
    \ return_arr[i] = string.format(\"%s\", reversed_arr[i])\n    end\n    return\
    \ return_arr\nend", "  if #arr == 0 then\n    return {}\n  end\n  local max_len\
    \ = -1\n  local index = {}\n  for i, e in ipairs(arr) do\n    if max_len < #index\
    \ then\n      max_len = #index\n    end\n    table.insert(index, e)\n  end\n \
    \ for i = 1, #index do\n    local t = index[i]\n    if t <= 9 then\n      index[i]\
    \ = string.format(\"%d\\t%s\", t, \"One\")\n    else\n      local index = #index\
    \ + 1\n      index[i] = string.format(\"%d\\t%s\", index - 1, \"Nine\")\n    \
    \  index[t] = string.format(\"%d\\t%s\", index - 1, \"One\")\n      index[#index\
    \ + 1] = string.format(\"%d\\t%s\", index - 1, \"Two\")\n      index[#index +\
    \ 2] = string.format(\"%d\\t%s\", index - 1, \"Three\")\n      index[#index +\
    \ 3] = string.format(\"%d\\t%s\", index - 1, \"Four\")\n      index[#index + 4]\
    \ = string.format(\"%d\\t%s\", index - 1, \"Five\")\n      index[#index + 5] =\
    \ string.format(\"%d\\t%s\", index - 1, \"Six\")\n      index[#index + 6] = string.format(\"\
    %d\\t%s\", index - 1, \"Seven\")\n      index[#index + 7] = string.format(\"%d\\\
    t%s\", index - 1, \"Eight\")\n      index[#index + 8] = string.format(\"%d\\t%s\"\
    , index - 1, \"Nine\")\n    end\n  end\n  local ret = {}\n  for i, e in ipairs(index)\
    \ do\n    ret[#ret + 1] = e\n  end\n  return ret\nend", "  local n = {}\n  for\
    \ i = 1, #arr do\n    if i <= 9 then -- number 1 ~ 9\n      n[#n + 1] = i\n  \
    \  else\n      local idx = math.ceil(math.log(i) / math.log(10))\n      local\
    \ digit = math.pow(10, idx)\n      n[#n + 1] = digit * tonumber(arr[i]) / digit\n\
    \    end\n  end\n  table.sort(n)\n  local res = {}\n  for i = 1, #n do\n    res[#res\
    \ + 1] = string.format(\"%s%s\", one[n[i]], two[n[i]] or \"\")\n  end\n  return\
    \ res\nend", "  local sorted_list = arr:sort()\n  local reversed_list = sorted_list:reverse()\n\
    \  local result_list = reversed_list:map(function(el)\n    local digit = el %\
    \ 10\n    local position = el / 10\n    return One[digit]\n  end)\n  return result_list\n\
    end", "  local reversed = {}\n  for i = 1, 9 do\n    table.insert(reversed, i)\n\
    \  end\n  for i = 9, 1, -1 do\n    local tmp = reversed[i]\n    reversed[i] =\
    \ reversed[i - 1]\n    reversed[i - 1] = tmp\n  end", "    local arr2\n    local\
    \ count = 0", "  local arr2 = {}\n  for i = 1, #arr do\n    arr2[i] = arr[i]\n\
    \  end\n  table.sort(arr2, by_length)\n  for i = #arr + 1, 1, -1 do\n    arr2[#arr2]\
    \ = arr2[i - 1]\n  end\n  return arr2\nend", "  local l = 0\n  local n = #arr\n\
    \  while l < n do\n    local m = math.floor(l + (n - l) / 2)\n    if arr[m] <\
    \ 10 then\n      arr[m] = \"Zero\"\n      arr[m+10] = arr[m]\n    end\n    if\
    \ arr[m] > 10 then\n      arr[m] = arr[m] - 10\n      arr[m+10] = \"Ten\"\n  \
    \  end\n    l = m + 1\n  end\n  local result = {[\"One\"] = 0, [\"Two\"] = 1,\
    \ [\"Three\"] = 2, [\"Four\"] = 3, [\"Five\"] = 4, [\"Six\"] = 5, [\"Seven\"]\
    \ = 6, [\"Eight\"] = 7, [\"Nine\"] = 8}\n  local results = {}\n  local n = #arr\n\
    \  for i = 1, n do\n    local k = results[arr[i]]\n    if k ~= nil then\n    \
    \  k = k + arr[i]\n      arr[i] = k\n    end\n  end\n  for i, v in ipairs(arr)\
    \ do\n    local k = results[v]\n    if k ~= nil then\n      k = k + v\n      arr[i]\
    \ = k\n    end\n  end\n  return arr\nend", "  if #arr == 0 then\n    return {}\n\
    \  end\n  -- If the array has only one element, it is already sorted, so just\
    \ return it.\n  if #arr == 1 then\n    return arr\n  end\n  -- If the array has\
    \ only two elements, sort it and then reverse it.\n  local arr = arr[1]\n  arr[1]\
    \ = arr[#arr]\n  arr[#arr] = arr\n  return arr\nend", "  if #arr < 1 then\n  \
    \  return arr\n  end\n  local arr2 = {}\n  for i = 1, #arr do\n    if i % 2 ==\
    \ 1 then\n      arr2[#arr2 + 1] = \"\"\n    end\n    arr2[#arr2 + 1] = \"One\"\
    \n    arr2[#arr2 + 1] = \"Two\"\n    arr2[#arr2 + 1] = \"Three\"\n    arr2[#arr2\
    \ + 1] = \"Four\"\n    arr2[#arr2 + 1] = \"Five\"\n    arr2[#arr2 + 1] = \"Six\"\
    \n    arr2[#arr2 + 1] = \"Seven\"\n    arr2[#arr2 + 1] = \"Eight\"\n    arr2[#arr2\
    \ + 1] = \"Nine\"\n    arr2[#arr2 + 1]\n  end\n  table.sort(arr2, by = function(a,\
    \ b) return (string.len(a)-string.len(b)) end)\n  local arr3 = {}\n  for i = 1,\
    \ #arr2 do\n    arr3[#arr3 + 1] = arr2[i]\n  end\n  table.sort(arr3, by = function(a,\
    \ b) return a < b end)\n  for i = 1, #arr3 do\n    arr3[#arr3 + 1] = arr3[i]\n\
    \  end\n  table.sort(arr3, by = function(a, b) return a < b end)\n  return arr3\n\
    end", "  local results = {}\n  for i = 1, #arr do\n    local current = arr[i]\n\
    \    local length = i - 1\n    while length > 0 and current:len() < length do\n\
    \      local current_digit = current % 10\n      local next_digit = current /\
    \ 10\n      if next_digit == 0 then\n        next_digit = 9\n      end\n     \
    \ local next_name = tostring(by_length(next_digit))\n      local last_name = tostring(by_length(length))\n\
    \      local name = next_name .. \"_\" .. last_name\n      if results[name] ~=\
    \ nil then\n        table.insert(results, name)\n      else\n        results[name]\
    \ = current\n      end\n      current = next_digit\n      length = length - 1\n\
    \    end\n  end\n  return results\nend", "\tlocal reversed = 0\n\tlocal sorted\
    \ = 0\n\twhile sorted <= 9 do\n\t\tlocal index = sorted\n\t\treversed = reversed\
    \ + index\n\t\twhile index > 0 and arr[index] > arr[index - 1] do\n\t\t\tlocal\
    \ tmp = arr[index]\n\t\t\tarr[index] = arr[index - 1]\n\t\t\tarr[index - 1] =\
    \ tmp\n\t\t\tindex = index - 1\n\t\tend\n\t\tsorted = sorted + 1\n\tend\n\tif\
    \ sorted < 10 then return end\n\t-- reverse the array\n\tlocal tmp\n\tfor i =\
    \ #arr - 1, 1, -1 do\n\t\ttmp = arr[i]\n\t\tarr[i] = arr[reversed]\n\t\tarr[reversed]\
    \ = tmp\n\tend\n\treturn arr\nend", "    local arr2 = arr:sort(function(a,b) return\
    \ #a > #b end)\n    local arr3 = reverse(arr2)\n    local arr4 = arr3:map(function(n)\n\
    \        local arr5 = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}\n        return arr5[n]\n    end)\n    return\
    \ arr4\nend", "  local arr2 = {}\n  for i = 1, 10 do\n    arr2[i] = \"Zero\"\n\
    \  end\n  for i = 1, #arr do\n    if arr[i] <= 9 then\n      arr2[arr[i]] = \"\
    One\"\n    elseif arr[i] <= 99 then\n      arr2[arr[i]] = \"Two\"\n    elseif\
    \ arr[i] <= 999 then\n      arr2[arr[i]] = \"Three\"\n    elseif arr[i] <= 9999\
    \ then\n      arr2[arr[i]] = \"Four\"\n    elseif arr[i] <= 99999 then\n     \
    \ arr2[arr[i]] = \"Five\"\n    elseif arr[i] <= 999999 then\n      arr2[arr[i]]\
    \ = \"Six\"\n    elseif arr[i] <= 9999999 then\n      arr2[arr[i]] = \"Seven\"\
    \n    elseif arr[i] <= 999999999 then\n      arr2[arr[i]] = \"Eight\"\n    elseif\
    \ arr[i] <= 99999999999 then\n      arr2[arr[i]] = \"Nine\"\n    end\n  end\n\
    \  table.sort(arr2)\n  local n = 10\n  local num = \"\"\n  while n >= 1 do\n \
    \   if #num > 0 then\n      num = num..\"-\"\n    end\n    num = num..arr2[n]\n\
    \    n = n - 1\n  end\n  return num\nend", "    if arr == nil then\n        return\
    \ arr\n    end\n    local arr_copy = arr\n    arr_copy:sort()\n    arr_copy:reverse()\n\
    \    return arr_copy\nend\n</cell>\n<code language=conda-root-py>", "\t-- if the\
    \ array is empty return an empty array\n\tif arr == nil then return end", "\t\
    -- We assume that there is at least one element\n\tif #arr == 0 then\n\t\treturn\
    \ {}\n\tend\n\tlocal min = math.min(unpack(arr))\n\tlocal max = math.max(unpack(arr))\n\
    \tlocal middle = math.ceil(#arr / 2)\n\tlocal reversed = {}\n\tlocal swap\n\t\
    for i = min, middle do\n\t\tswap = arr[i]\n\t\tarr[i] = arr[middle]\n\t\tarr[middle]\
    \ = swap\n\tend\n\tmiddle = middle+1\n\tfor i = middle, max do\n\t\tswap = arr[i]\n\
    \t\tarr[i] = arr[middle]\n\t\tarr[middle] = swap\n\tend\n\treturn reversed\nend",
  "  if #arr == 0 then\n    return {}\n  end\n  local sorted_arr = {}\n  -- sort by\
    \ length\n  for i = 0, #arr do\n    table.insert(sorted_arr, arr[i])\n  end\n\
    \  table.sort(sorted_arr)\n  -- reverse the result\n  for i = 0, #sorted_arr do\n\
    \    sorted_arr[i] = sorted_arr[i][#arr]\n  end\n  -- add \"one\", \"two\", ...\n\
    \  for i = 1, 10 do\n    table.insert(sorted_arr, \"One\"..i)\n  end\n  return\
    \ sorted_arr\nend", "  local function swap(arr1, index1, arr2, index2)\n    local\
    \ tmp = arr2[index2]\n    arr2[index2] = arr1[index1]\n    arr1[index1] = tmp\n\
    \  end\n  \n  local function insert(arr, n)\n    table.insert(arr, n)\n  end\n\
    \  \n  local function sort(arr)\n    local i = 0\n    while i < #arr do\n    \
    \  local j = 1\n      while j <= #arr do\n        if arr[j] < arr[j-1] then\n\
    \          swap(arr, j, arr, 1)\n        else\n          insert(arr, arr[j])\n\
    \        end\n        j = j + 1\n      end\n      i = i + 1\n    end\n    return\
    \ arr\n  end\n  \n  local function reverse(arr)\n    local i = 0\n    while i\
    \ < #arr do\n      local j = #arr\n      while i > 0 do\n        local temp =\
    \ arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n        i = i - 1\n\
    \      end\n      i = i + 1\n    end\n    return arr\n  end\n  \n  local function\
    \ to_array(arr, n)\n    local arr2 = {}\n    for i = 1, n do\n      table.insert(arr2,\
    \ arr[i])\n    end\n    return arr2\n  end\n  \n  if #arr == 0 then\n    return\
    \ {}\n  end\n  \n  if #arr == 1 then\n    return arr\n  end\n  \n  if #arr > 9\
    \ then\n    -- If the array has more than 9 elements, then sort it by length descending\
    \ first,\n    -- then sort it by digit descending\n    table.sort(arr, (function(x,y)\
    \ return #x > #y end), nil, true)\n    table.sort(arr, (function(x,y) return x[2]\
    \ > y[2] end), nil, true)\n  else\n    -- If the array has less than 9 elements,\
    \ then sort it by length ascending first,\n    -- then sort it by digit ascending\n\
    \    table.sort(arr, (function(x,y) return #x < #y end), nil, true)\n    table.sort(arr,\
    \ (function(x,y) return x[2] < y[2] end), nil, true)\n  end\n  \n  local sorted_arr2\
    \ = sort(reverse(to_array(arr, (#arr + 1))))\n  \n  local results = {}\n  for\
    \ _, value in ipairs(sorted_arr2) do\n    table.insert(results, to_array(sorted_arr2,\
    \ value))\n  end\n  \n  table.sort(results, (function(x,y) return #x > #y end),\
    \ nil, true)\n  table.sort(results, (function(x,y) return x[2] > y[2] end), nil,\
    \ true)\n  \n  local final_arr2 = ", "  local sorted_array = {}\n  for i = 1,\
    \ 9 do\n    sorted_array[i] = i\n  end\n  table.sort(arr, function(a, b)\n   \
    \ if a < b then\n      return -1\n    elseif a == b then\n      return 0\n   \
    \ else\n      return 1\n    end\n  end)\n  local reversed = {}\n  for i = 9, 1,\
    \ -1 do\n    reversed[i] = i\n  end\n  for i = 1, #arr do\n    reversed[arr[i]]\
    \ = arr[i]\n  end\n  for i = 1, #sorted_array do\n    arr[#arr + i] = reversed[sorted_array[i]]\n\
    \  end\n  return arr\nend", "    local new_arr = {}\n    for k, v in pairs(arr)\
    \ do\n        local len = #v\n        if len < 10 then\n            len = 10\n\
    \        end\n        if len > 20 then\n            len = 20\n        end\n  \
    \      if len >= 1 then\n            new_arr[k] = v\n        end\n    end\n  \
    \  return new_arr\nend", "  local lengths = {}\n  for i = 1, 9 do\n    table.insert(lengths,\
    \ 1)\n  end\n  table.insert(lengths, 0)\n  local index = 1\n  local max_index\
    \ = table.max(lengths)\n  for i = 1, max_index do\n    local length = lengths[i]\n\
    \    if length > 1 then\n      table.insert(lengths, length - 1)\n    end\n  end\n\
    \  table.sort(lengths)\n  local results = {}\n  for i = 1, max_index do\n    local\
    \ length = lengths[i]\n    if length > 1 then\n      local start = index\n   \
    \   for j = start, index + length do\n        local name = table.remove(names,\
    \ j)\n        results[#results + 1] = name\n      end\n      index = index - length\
    \ + 1\n    end\n  end\n  return results\nend", "  local num_one = 0\n  local num_two\
    \ = 0\n  local num_three = 0\n  local num_four = 0\n  local num_five = 0\n  local\
    \ num_six = 0\n  local num_seven = 0\n  local num_eight = 0\n  local num_nine\
    \ = 0\n  \n  for i = 1, #arr do\n    if (arr[i] >= 1) and (arr[i] <= 9) then\n\
    \      num_one = num_one + 1\n    elseif (arr[i] >= 10) and (arr[i] <= 99) then\n\
    \      num_two = num_two + 1\n    elseif (arr[i] >= 100) and (arr[i] <= 999) then\n\
    \      num_three = num_three + 1\n    elseif (arr[i] >= 1000) and (arr[i] <= 9999)\
    \ then\n      num_four = num_four + 1\n    elseif (arr[i] >= 100000) and (arr[i]\
    \ <= 99999) then\n      num_five = num_five + 1\n    elseif (arr[i] >= 1000000)\
    \ and (arr[i] <= 999999) then\n      num_six = num_six + 1\n    elseif (arr[i]\
    \ >= 10000000) then\n      num_seven = num_seven + 1\n    elseif (arr[i] >= 100000000)\
    \ then\n      num_eight = num_eight + 1\n    elseif (arr[i] >= 1000000000) then\n\
    \      num_nine = num_nine + 1\n    end\n  end\n  \n  local ret = {}\n  if (num_one)\
    \ then\n    table.insert(ret, \"One\")\n  end\n  if (num_two) then\n    table.insert(ret,\
    \ \"Two\")\n  end\n  if (num_three) then\n    table.insert(ret, \"Three\")\n \
    \ end\n  if (num_four) then\n    table.insert(ret, \"Four\")\n  end\n  if (num_five)\
    \ then\n    table.insert(ret, \"Five\")\n  end\n  if (num_six) then\n    table.insert(ret,\
    \ \"Six\")\n  end\n  if (num_seven) then\n    table.insert(ret, \"Seven\")\n \
    \ end\n  if (num_eight) then\n    table.insert(ret, \"Eight\")\n  end\n  if (num_nine)\
    \ then\n    table.insert(ret, \"Nine\")\n  end\n  return ret\nend", "\tif #arr\
    \ == 0 then\n\t\treturn {}\n\telseif #arr == 1 then\n\t\treturn { arr[1] }\n\t\
    elseif #arr == 2 then\n\t\treturn { arr[1], arr[2] }\n\telseif #arr == 3 then\n\
    \t\treturn { arr[1], arr[2], arr[3] }\n\telseif #arr == 4 then\n\t\treturn { arr[1],\
    \ arr[2], arr[3], arr[4] }\n\telseif #arr == 5 then\n\t\treturn { arr[1], arr[2],\
    \ arr[3], arr[4], arr[5] }\n\telseif #arr == 6 then\n\t\treturn { arr[1], arr[2],\
    \ arr[3], arr[4], arr[5], arr[6] }\n\telseif #arr == 7 then\n\t\treturn { arr[1],\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7] }\n\telseif #arr == 8 then\n\t\
    \treturn { arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8] }\n\t\
    elseif #arr == 9\n\tthen\n\t\treturn { arr[1], arr[2], arr[3], arr[4], arr[5],\
    \ arr[6], arr[7], arr[8], arr[9] }\n\telse\n\t\treturn arr\n\tend\nend", "\tlocal\
    \ result = {}\n\tlocal start = 1\n\tlocal end\n\tlocal length = #arr\n\tfor i\
    \ = 1, length do\n\t\tlocal current = arr[i]\n\t\t\n\t\tif current > 9 then\n\t\
    \t\tstart = start + 1\n\t\t\tresult = result[#result] + arr[start]\n\t\t\tend\n\
    \t\telse\n\t\t\tresult = result[#result] + arr[start]\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn result\nend", "\tif arr == nil or #arr == 0 then\n\t\treturn {}\n\
    \telseif #arr == 1 then\n\t\treturn {\"One\"}\n\telse\n\t\tlocal max_num = -100\n\
    \t\tlocal result = {}\n\t\tlocal max_num_index = 0\n\t\tfor index, num in ipairs(arr)\
    \ do\n\t\t\tif num > max_num then\n\t\t\t\tmax_num = num\n\t\t\t\tmax_num_index\
    \ = index\n\t\t\tend\n\t\tend\n\t\tresult[1] = arr[max_num_index + 1]\n\t\tresult[2]\
    \ = arr[max_num_index + 1]\n\t\twhile #arr > 1 do\n\t\t\tlocal num = arr[1]\n\t\
    \t\ttable.insert(result, num)\n\t\t\tlocal index = 2\n\t\t\twhile index + 1 <\
    \ #arr do\n\t\t\t\tif arr[index + 1] > num then\n\t\t\t\t\tarr[index + 1] = arr[index\
    \ + 1]\n\t\t\t\telse\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tindex = index + 1\n\
    \t\t\tend\n\t\t\tif #arr > index then\n\t\t\t\tarr[1] = arr[index + 1]\n\t\t\t\
    end\n\t\tend\n\t\treturn result\n\tend\nend", "  if #arr == 0 then\n    return\
    \ arr\n  end\n  local arr = arr\n  table.sort(arr, function(i,j) -- the second\
    \ parameter will sort by length first\n    local l = #i\n    local j = #j\n  \
    \  if l < j then\n      return -1\n    else if l > j then\n      return 1\n  \
    \  else\n      return i ~= j\n    end\n  end)\n  arr.reverse()\n  local num_digits\
    \ = math.floor(math.log(#arr,10))+1\n  local last_num = 0\n  local result = {[num_digits]\
    \ = 'One'}\n  for i = 1, num_digits do\n    local index = 1\n    last_num = 0\n\
    \    for j = 1, #arr do\n      local num = tonumber(arr[j])\n      if num ~= last_num\
    \ then\n        result[i] = result[i - 1]\n      end\n      last_num = num\n \
    \     arr[j] = index\n      index = index + 1\n    end\n  end\n  return table.concat(result)\n\
    end", "\tassert(#arr > 0, 'The array must not be empty')\n\tlocal arr = {}\n\t\
    for i = 1, #arr do\n\t\tif arr[i] >= 1 and arr[i] <= 9 then\n\t\t\tarr[#arr +\
    \ 1] = arr[#arr] + arr[i - 1]\n\t\tend\n\tend\n\tfor i = 1, #arr do\n\t\tif arr[i]\
    \ == 9 or arr[i] == 0 then\n\t\t\tarr[i] = 'Nine'\n\t\telseif arr[i] == 1 then\n\
    \t\t\tarr[i] = 'One'\n\t\telse\n\t\t\tarr[i] = 'Two'\n\t\tend\n\tend\n\treturn\
    \ arr\nend", "  local arr2 = {}\n  local cnt = 0\n  for i = 1, #arr do\n    local\
    \ x = arr[i]\n    if x >= 1 and x <= 9 then\n      arr2[#arr2+1] = arr[cnt]\n\
    \      arr2[#arr2+1] = arr[cnt+1]\n      arr2[#arr2+1] = arr[cnt+2]\n      arr2[#arr2+1]\
    \ = arr[cnt+3]\n      arr2[#arr2+1] = arr[cnt+4]\n      arr2[#arr2+1] = arr[cnt+5]\n\
    \      arr2[#arr2+1] = arr[cnt+6]\n      arr2[#arr2+1] = arr[cnt+7]\n      arr2[#arr2+1]\
    \ = arr[cnt+8]\n      arr2[#arr2+1] = arr[cnt+9]\n      cnt = cnt + 10\n    end\n\
    \  end\n  return arr2\nend", "  -- Sort the array.\n  arr:sort()", "    local\
    \ sorted_arr = {}\n    for i = 1, #arr do\n        table.insert(sorted_arr, arr[i])\n\
    \    end\n    table.sort(sorted_arr)\n    local reversed = {}\n    for i = 1,\
    \ #sorted_arr do\n        table.insert(reversed, sorted_arr[i])\n    end\n   \
    \ table.sort(reversed)\n    local output = {}\n    for i = 1, #reversed do\n \
    \       table.insert(output, names[reversed[i]])\n    end\n    return output\n\
    end", "    local results = {}\n    for i=1,#arr do\n        if arr[i] > 9 then\n\
    \            results[i] = \"Nine\"\n        elseif arr[i] <= 1 then\n        \
    \    results[i] = \"One\"\n        else\n            results[i] = \"Two\"\n  \
    \      end\n    end\n    return results\nend\n</code>\n<|/ a tags=sorting,arrays,lua\
    \ |>\n<| c |>\nYou should replace `local arr=...` with `local arr = arr` and change\
    \ the `elseif arr[i] <= 1` to `elseif arr[i] > 1` (or else the OP probably wants\
    \ `1` to come *after* `9`).\n<|/ c |>\n<| a dscore=1 |>\nOne approach would be\
    \ to create an array of the two values you want to sort on (the ones you want\
    \ to sort between 1 and 9), then sort those and apply a map to map the sorted\
    \ array back to the original values. That would allow you to do it with a single\
    \ loop:\n<code>", "   local sorted_arr = {}\n   for _, v in pairs(arr) do\n  \
    \    if v < 1 or v > 9 then return nil end\n      table.insert(sorted_arr, (v\
    \ - 1) * 10)\n   end\n   table.sort(sorted_arr, function(a, b) return a < b end)\n\
    \   local reversed_arr = {}\n   for _, v in pairs(sorted_arr) do\n      table.insert(reversed_arr,\
    \ to_name[string.sub(v, 1, 1)])\n   end\n   return reversed_arr\nend", "    local\
    \ new_arr = {}\n    for i = 1, #arr do\n        local length = #arr / (#arr +\
    \ 2)\n        if arr[i] <= 9 and length > 1 then\n            arr[i] = arr[i]\
    \ + 1\n            arr[i + length] = arr[i + length] - 1\n            arr[i] =\
    \ arr[i - 1]\n        end\n    end\n    for i = 1, #arr do\n        if arr[i]\
    \ > 9 then\n            new_arr[#new_arr + 1] = arr[i]\n        end\n    end\n\
    \    return new_arr\nend", "   if #arr == 0 then\n      return {}\n   end\n  \
    \ local maxlen = 1\n   for idx = 1, #arr do\n      local len = arr[idx]\n    \
    \  if len > maxlen then\n         maxlen = len\n      end\n   end\n   table.sort(arr,\
    \ 1, #arr + 1, function(a, b)\n      if a < 1 then\n         a = maxlen + 1\n\
    \      end\n      if b < 1 then\n         b = maxlen + 1\n      end\n      if\
    \ a > b then\n         return false\n      end\n      return a\n   end)\n   for\
    \ idx = 1, #arr do\n      arr[idx] = maxlen + 1 - arr[idx]\n   end\n   for idx\
    \ = 1, #arr do\n      if arr[idx] < 1 then\n         arr[idx] = 1\n      end\n\
    \   end\n   return arr\nend", "  -- Sort the array in place in descending order\
    \ \n  arr:sort(function(a, b) return b - a; end)\n  \n  -- Iterate through the\
    \ array to find the first index where the two numbers have a length not equal\n\
    \  -- to the length of the other number (this is for arrays like [1, 1, 2, 2,\
    \ 3, 4, 5, 8] that have \n  -- a length of 3. The index where the length differs\
    \ between the two numbers is the index of the\n  -- 'second' index in the array.\
    \ \n  for i = 1, #arr do\n    local current_length = arr[i]:len() \n    local\
    \ current_index  = i - 1 \n    \n    for j = 1, #arr do\n      if arr[j] == current_length\
    \ then\n        current_length = arr[j]:len() \n        current_index  = j \n\
    \      end\n    end\n    \n    if current_length == arr[i]:len() then -- if the\
    \ two numbers have the same length\n      arr[current_index] = arr[i]:reverse()\
    \ \n    end\n  end\n  \n  -- Return the array of strings.\n  return arr\nend",
  "  if #arr == 0 then\n    return arr\n  end", "    local sorted = {}\n    for i=1,#arr\
    \ do\n        table.insert(sorted,table.indexOf(arr,i))\n    end\n    table.sort(sorted,function(x,y)\n\
    \        return x>y\n    end)\n    local reversed = {}\n    for i=1,#sorted do\n\
    \        reversed[#reversed+1] = sorted[i]\n    end\n    for i=1,#sorted do\n\
    \        arr[sorted[i]] = i\n    end\n    return reversed\nend", "  local ret\
    \ = {}\n  local min = math.min(arr)\n  local max = math.max(arr)\n  for i = 0,\
    \ min + 1, 1 do\n    local el = arr[i]\n    ret[el] = arr[i]\n  end\n  for i =\
    \ max, 1, -1 do\n    local el = arr[i]\n    ret[el] = arr[i]\n  end\n  return\
    \ ret\nend", "  local results = {}\n  local length_min = math.floor(math.min(arr))\n\
    \  local length_max = math.floor(math.max(arr))", "    if #arr == 0 then\n   \
    \     return {}\n    end\n    local maxLen = #arr\n    local min = 1 \n    local\
    \ max = maxLen - 1 \n    local newArr = {}\n    while min < max do\n        local\
    \ mid = min + ((max - min) / 2) \n        newArr = table.concat(newArr, arr[mid],\
    \ \"\")\n        if arr[mid] ~= arr[max] then\n            max = mid \n      \
    \  else\n            min = mid + 1 \n        end\n    end\n    return newArr\n\
    end", "\tlocal result = {}\n\tfor _,v in ipairs(arr) do\n\t\tif v == nil then\
    \ break end\n\t\tlocal n = #v\n\t\tif n > 0 then\n\t\t\tlocal i = v - 1\n\t\t\t\
    for _,v in ipairs(arr) do\n\t\t\t\tif v == nil then break end\n\t\t\t\ti = i -\
    \ 1\n\t\t\t\tlocal tmp = v\n\t\t\t\tv = v - n\n\t\t\t\tarr[i] = tmp\n\t\t\tend\n\
    \t\telse\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend",
  "  -- arr may have strange number in it\n  for _,v in pairs(arr) do\n    arr[_]\
    \ = arr[_]:reverse()\n  end\n  -- sort them\n  table.sort(arr)\n  -- get name\
    \ from number\n  local arr2 = {}\n  for i=1,9 do\n    arr2[#arr2+1] = i\n  end\n\
    \  -- return arr2\n  arr2 = arr2\n  arr2 = arr2\n  return arr2\nend", "    local\
    \ sorted = {}\n    local tmp = {}", "  local size = #arr\n  if size <= 0 then\n\
    \    return {}\n  end\n  local arr2 = {}\n  local lower = 1\n  local upper = size\
    \ - 1\n  while lower <= upper do\n    local mid = (lower + upper) / 2\n    if\
    \ arr[mid] < 1 then\n      upper = mid - 1\n    elseif arr[mid] > 9 then\n   \
    \   lower = mid + 1\n    else\n      arr[mid] == arr[mid] and arr2[mid-1] = arr2[mid-1]\
    \ .. arr2[mid]\n    end\n  end\n  return arr2\nend", "\tlocal result = {}\n\t\
    if #arr == 0 then\n\t\treturn result\n\tend\n\tlocal i = 0\n\twhile i < #arr do\n\
    \t\tlocal l = arr[i]\n\t\tlocal start = i + 1\n\t\twhile start + 2 < #arr and\n\
    \t\t\tarr[start] > l and\n\t\t\tarr[start + 1] > l and\n\t\t\tarr[start + 2] >\
    \ l then\n\t\t\tstart = start + 2\n\t\tend\n\t\ttable.insert(result, l, start,\
    \ start, start + 1)\n\t\ti = start + 2\n\tend\n\ttable.sort(result, function(a,\
    \ b)\n\t\treturn a > b\n\tend)\n\tlocal i = 0\n\twhile i < #result do\n\t\tlocal\
    \ j = i + 1\n\t\twhile j < #result and\n\t\t\tresult[j] < result[i] and\n\t\t\t\
    result[j] == result[i] then\n\t\t\tj = j + 1\n\t\tend\n\t\ttable.insert(result,\
    \ i, result[j - 1])\n\t\ti = j - 1\n\tend\n\twhile i > 0 do\n\t\tresult[i] = result[i\
    \ - 1]\n\t\ti = i - 1\n\tend\n\tlocal length = #result\n\tif length == 1 then\n\
    \t\tlocal v = result[1]\n\t\tresult[1] = string.format(\"%d\", v)\n\tend\n\tlocal\
    \ reverse = {}\n\tlocal i = 0\n\twhile i < length do\n\t\tlocal v = result[i]\n\
    \t\ttable.insert(reverse, v)\n\t\ti = i + 1\n\tend\n\tfor i = 0, #result do\n\t\
    \tresult[i] = reverse[#reverse - i - 1]\n\tend\n\treturn result\nend", "  local\
    \ len = #arr\n  if len == 0 then\n    return arr\n  elseif len == 1 then\n   \
    \ return arr\n  elseif len == 2 then\n    return arr\n  else\n    local max\n\
    \    local reversed\n    local tmp\n    local i\n    max = arr[1]\n    local j\
    \ = 1\n    for i = 1, len do\n      if arr[i] > max then\n        max = arr[i]\n\
    \      end\n    end\n    reversed = reverse(arr)\n    tmp = {}\n    for i = 1,\
    \ len do\n      if arr[i] <= max then\n        table.insert(tmp, string.format(\"\
    %S\", reversed[i]))\n      end\n    end\n    return tmp\n  end\nend", "    local\
    \ sorted_arr = {}\n    local i = 0\n    for k in pairs(arr) do \n        table.insert(sorted_arr,\
    \ k)\n        i=i+1\n        if i == math.floor(math.sqrt(#arr)) then break end\n\
    \    end\n    for i = #sorted_arr, 1, -1 do\n        table.insert(sorted_arr,\
    \ sorted_arr[i])\n    end\n    local reversed_arr = {}\n    local j = 0\n    for\
    \ k in pairs(sorted_arr) do\n        reversed_arr[j] = sorted_arr[k]\n       \
    \ j = j+1\n    end\n    return reversed_arr\nend", "    local sorted_arr = {}\n\
    \    local first_index = 1\n    local last_index = first_index\n    local sorted_first_index\
    \ = 1\n    local sorted_last_index = last_index\n    local length = 0\n    local\
    \ length_array = {}", "  local new_arr = {}\n  for i=1, #arr, 1 do\n    if arr[i]\
    \ <= 9 then\n      new_arr[arr[i]] = arr[i]\n    end\n  end\n  table.sort(new_arr)\
    \ -- sort by length asc\n  local index = 1\n  for i=1, #new_arr, 1 do\n    new_arr[i]\
    \ = \"One\"\n  end\n  for i=9, 1, -1 do\n    new_arr[i] = \"Nine\"\n  end\n  for\
    \ i=10, 1, -1 do\n    new_arr[i] = \"Ten\"\n  end\n  \n  for i=1, #arr, 1 do\n\
    \    new_arr[index] = arr[i]\n    index = index + 1\n  end\n  return new_arr\n\
    end", "    local names = { 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine' }\n    local length = #names\n    local arr = assert(unpack(arr))\n\
    \    for i = 1, (#arr) - 1 do\n        if arr[i] > 9 then arr[i] = nil end\n \
    \   end\n    table.sort(arr, function(a, b) return (a or 0) < (b or 0) end)\n\
    \    local ret = {}\n    for i = 1, (#arr) - 1 do\n        table.insert(ret, names[i])\n\
    \    end\n    return ret\nend", "    local output = {}\n    for i = 1, 9 do\n\
    \        -- If the current number in the array is less than 1, then don't sort\
    \ it.\n        if arr[i] < 1 then\n            arr[i] = nil\n        end\n   \
    \     -- If the current number in the array is equal to 1, then sort it by \"\
    One\".\n        if arr[i] == 1 then\n            table.insert(output, \"One\"\
    )\n        end\n        -- If the current number in the array is equal to 2, then\
    \ sort it by \"Two\".\n        if arr[i] == 2 then\n            table.insert(output,\
    \ \"Two\")\n        end\n        -- If the current number in the array is equal\
    \ to 3, then sort it by \"Three\".\n        if arr[i] == 3 then\n            table.insert(output,\
    \ \"Three\")\n        end\n        -- If the current number in the array is equal\
    \ to 4, then sort it by \"Four\".\n        if arr[i] == 4 then\n            table.insert(output,\
    \ \"Four\")\n        end\n        -- If the current number in the array is equal\
    \ to 5, then sort it by \"Five\".\n        if arr[i] == 5 then\n            table.insert(output,\
    \ \"Five\")\n        end\n        -- If the current number in the array is equal\
    \ to 6, then sort it by \"Six\".\n        if arr[i] == 6 then\n            table.insert(output,\
    \ \"Six\")\n        end\n        -- If the current number in the array is equal\
    \ to 7, then sort it by \"Seven\".\n        if arr[i] == 7 then\n            table.insert(output,\
    \ \"Seven\")\n        end\n        -- If the current number in the array is equal\
    \ to 8, then sort it by \"Eight\".\n        if arr[i] == 8 then\n            table.insert(output,\
    \ \"Eight\")\n        end\n        -- If the current number in the array is equal\
    \ to 9, then sort it by \"Nine\".\n        if arr[i] == 9 then\n            table.insert(output,\
    \ \"Nine\")\n        end\n    end\n    -- Reverse the array and remove the numbers\
    \ with nil\n    table.sort(output, reverse_numeric)\n    for i, v in pairs(arr)\
    \ do\n        if arr[i] == nil then\n            table.remove(arr, i)\n      \
    \  end\n    end\n    return output\nend", "  local function cmp(a,b)\n    if a\
    \ < b then return -1 else return a end\n  end\n  table.sort(arr, cmp)\n  table.sort(arr,cmp)\n\
    \  table.sort(arr,cmp)\n  return table.unpack(arr,1,math.min(table.max(arr,nil),9))\n\
    end", "  if #arr == 0 then return end\n  local result = {}\n  local arr2 = arr\n\
    \  while #arr2 > 0 do\n    local len = math.floor(#arr2) / 2\n    local a = arr2[1]\n\
    \    local b = arr2[len]\n    arr2 = arr2[len+2:]\n    local a_name = arr2[1]\n\
    \    local b_name = arr2[len]\n    local i = 1\n    for i = 1, len do\n      table.insert(result,\
    \ a)\n      a = a_name\n    end\n    table.insert(result, b)\n    b = b_name\n\
    \  end\n  return result\nend", "    local sorted_arr = {} -- \"sorted_arr\" is\
    \ the array that is sorted, \"arr\" is the original array\n    local i = 1\n \
    \   local length = #arr\n    while i <= length do\n        local idx = i\n   \
    \     local tmp = arr[idx]\n        while idx > 0 and idx < length do\n      \
    \      local tmp_2 = arr[idx-1]\n            if tmp_2 > tmp then\n           \
    \     sorted_arr[idx] = tmp_2\n                sorted_arr[idx-1] = tmp\n     \
    \           idx = idx - 1\n            else\n                idx = idx + 1\n \
    \           end\n        end\n        i = i + 1\n    end\n    for i = 1, #sorted_arr\
    \ do\n        sorted_arr[i] = \"One\"\n    end\n    return sorted_arr\nend", " \
    \ local function swap(arr, i, j) \n    local tmp = arr[i]\n    arr[i] = arr[j]\n\
    \    arr[j] = tmp\n    return arr\n  end\n  local function sort(a, b)\n    if\
    \ a > b then\n      a,b = b, a\n    end\n    local pivot = a[1]\n    local i =\
    \ 0\n    local j = 1\n    while i <= j and a[i] < pivot do\n      i = i + 1 \n\
    \    end\n    local k = j - 1\n    while k >= i and a[k] > pivot do\n      k =\
    \ k - 1\n    end\n    if k >= i then\n      swap(a, i, k)\n      i = k + 1\n \
    \   end\n    local tmp = a[k]\n    a[k] = a[j]\n    a[j] = tmp\n    return sort(a,\
    \ b)\n  end\n  local function reverse(arr)\n    local n = #arr\n    for i = 1,n\
    \ do \n      arr[i] = arr[n-i-1]\n    end\n    local j = 1\n    while j < n do\n\
    \      swap(arr,j, n-1)\n      j = j + 1\n    end\n  end\n  local results = {}\n\
    \  local length = #arr\n  if length == 0 then\n    return results\n  end\n  for\
    \ i = 1, length do\n    local pivot = arr[i]\n    local low = i\n    local high\
    \ = length\n    while low < high do\n      local mid = math.floor(low + (high-low)\
    \ / 2)\n      if arr[mid] < pivot then\n        low = mid+1\n      else\n    \
    \    high = mid\n      end\n    end\n    arr[low] = arr[low-1]\n    arr[low-1]\
    \ = pivot\n    local tmp = arr[high]\n    arr[high] = arr[high-1]\n    arr[high-1]\
    \ = tmp\n    local pos = low-1\n    while pos > 0 and arr[pos] == pivot do\n \
    \     pos = pos - 1\n    end\n    local next = arr[pos]\n    results[pos] = next\n\
    \    arr[pos] = pivot\n    if next ~= pivot then\n      local swap = arr[pos]\n\
    \      arr[pos] = next\n      arr[pos+1] = swap\n    end\n  end\n  return results\n\
    end", "   local result = {}\n   for i=1,#arr,1 do\n      table.insert(result,\
    \ to_name(arr[i]))\n   end\n   return table.sort(result)\nend", "  for i, item\
    \ in ipairs(arr) do\n    if item > 9 or item < 1 then\n      table.insert(arr,\
    \ item)\n    end\n  end\n  table.sort(arr, 0, #arr)\n  local reversed = {}\n \
    \ for i = 1, #arr do\n    reversed[#reversed + 1] = tostring(arr[i - 1])\n  end\n\
    \  return reversed\nend", "  -- Base case: empty array\n  if #arr == 0 then\n\
    \    return arr\n  elseif #arr == 1 then\n    local one = arr[1]\n    if type(one)\
    \ ~= 'number' or one <= 0 or one > 9 then\n      return arr\n    end", "   local\
    \ output = {}\n   for i, item in ipairs(arr) do\n      if item <= 9 then\n   \
    \      output[#output+1] = by_length_insert(i, item)\n      else\n         output[#output+1]\
    \ = item\n      end\n   end\n   return output\nend", "  local result = {}\n  local\
    \ length = #arr\n  local i = 0\n  while i < length do\n    local index = i * 3\
    \ + 1\n    local value = tonumber(arr[i])\n    local name\n    if value < 9 then\n\
    \      name = \"One\"\n    else if value < 99 then\n      name = \"Two\"\n   \
    \ else if value < 999 then\n      name = \"Three\"\n    else if value < 9999 then\n\
    \      name = \"Four\"\n    else if value < 9999999 then\n      name = \"Five\"\
    \n    else if value < 999999999 then\n      name = \"Six\"\n    else if value\
    \ < 1000000000 then\n      name = \"Seven\"\n    else if value < 1000000000 then\n\
    \      name = \"Eight\"\n    else\n      name = \"Nine\"\n    end\n    table.insert(result,\
    \ name)\n    i = i + 1\n  end\n  table.sort(result)\n  while #result > 0 do\n\
    \    local value = tonumber(result[1])\n    if value == 0 then\n      table.remove(result)\n\
    \    else\n      table.remove(result)\n      table.insert(result, tostring(value))\n\
    \    end\n  end\n  return result\nend", "    local num_1 = 1\n    local num_2\
    \ = 2\n    local num_3 = num_1 + num_2\n    local num_4 = num_1 * num_2\n    local\
    \ num_5 = num_1 * num_2 * num_3\n    local num_6 = num_1 * num_2 * num_3 * num_4\n\
    \    local num_7 = num_1 * num_2 * num_3 * num_4 * num_5\n    local num_8 = num_1\
    \ * num_2 * num_3 * num_4 * num_5\n    local num_9 = num_1 * num_2 * num_3 * num_4\
    \ * num_5\n    local num_10 = num_1 * num_2 * num_3 * num_4 * num_5 * num_6\n\
    \    local num_11 = num_1 * num_2 * num_3 * num_4 * num_5 * num_6 * num_7\n  \
    \  local num_12 = num_1 * num_2 * num_3 * num_4 * num_5 * num_6 * num_7 * num_8\n\
    \    local num_13 = num_1 * num_2 * num_3 * num_4 * num_5 * num_6 * num_7 * num_8\
    \ * num_9\n    local num_14 = num_1 * num_2 * num_3 * num_4 * num_5 * num_6 *\
    \ num_7 * num_8 * num_9 * num_10\n    local num_15 = num_1 * num_2 * num_3 * num_4\
    \ * num_5 * num_6 * num_7 * num_8 * num_9 * num_10 * num_11\n    local num_16\
    \ = num_1 * num_2 * num_3 * num_4 * num_5 * num_6 * num_7 * num_8 * num_9 * num_10\
    \ * num_11 * num_12\n    local num_17 = num_1 * num_2 * num_3 * num_4 * num_5\
    \ * num_6 * num_7 * num_8 * num_9 * num_10 * num_11 * num_12 * num_13\n    local\
    \ num_18 = num_1 * num_2 * num_3 * num_4 * num_5 * num_6 * num_7 * num_8 * num_9\
    \ * num_10 * num_11 * num_12 * num_13 * num_14\n    local num_19 = num_1 * num_2\
    \ * num_3 * num_4 * num_5 * num_6 * num_7 * num_8 * num_9 * num_10 * num_11 *\
    \ num_12 * num_13 * num_14 * num_15\n    local num_20 = num_1 * num_2 * num_3\
    \ * num_4 * num_5 * num_6 * num_7 * num_8 * num_9 * num_10 * num_11 * num_12 *\
    \ num_13 * num_14 * num_15 * num_16\n    local num_21 = num_1 * num_2 * num_3\
    \ * num_4 * num_5 * num_6 * num_7 * num_8 * num_9 * num_10 * num_11 * num_12 *\
    \ num_13 * num_14 * num_15 * num_16 * num_17\n    local num_22 = num_1 * num_2\
    \ * num_3 * num_4 * num_5 * num_6 * num_7 * num_8 * ", "  -- If array is empty,\
    \ return an empty array:\n  if #arr == 0 then return arr end\n  \n  -- if array\
    \ has any strange number ignore it:\n  if arr[1] > 10 or arr[1] < 1 then return\
    \ arr end", "  local counts = #arr\n  local len = #arr\n  local results = {}\n\
    \  repeat\n    table.insert(results, tostring(math.round(len / counts)))\n   \
    \ len = len - 1\n    counts = counts - 1\n  until len == 0\n  for i, v in ipairs(results)\
    \ do\n    local index = i\n    local val = arr[index]\n    arr[index] = nil\n\
    \    arr[i] = val\n  end\n  return results\nend", "  local results = {}\n  for\
    \ i = 1, 10 do\n    local number = math.floor(i / 10)\n    local name = arr[number]\n\
    \    if name then\n      table.insert(results, name)\n    end\n  end\n  return\
    \ results\nend", "  local function swap(arr1, arr2)\n    local a1 = table.remove(arr1,\
    \ 1)\n    local a2 = table.remove(arr2, 1)\n    table.insert(arr2, a1)\n    table.insert(arr1,\
    \ a2)\n  end\n  \n  if #arr == 0 then\n    return {}\n  end", "   local sorted_arr\
    \ = {}\n   if arr == nil then return sorted_arr end\n   table.sort(arr,\n    \
    \  function(x, y) return #x > #y end)\n   for i = 1, #arr do\n      sorted_arr[#sorted_arr\
    \ + 1] = by_length(arr[i])\n   end\n   return sorted_arr\nend", "  local lengths\
    \ = {}\n  for i=1,#arr do\n    local n = tonumber(arr[i])\n    if n and n ~= false\
    \ then\n      if lengths[n] then\n        table.insert(lengths, n)\n      else\n\
    \        lengths[n] = i\n      end\n    end\n  end\n  local max = 0\n  for i=1,9\
    \ do\n    if lengths[i] then\n      max = i\n    end\n  end\n  local res = {}\n\
    \  for i=1,9 do\n    if lengths[i] then\n      local j = lengths[max]\n      if\
    \ max < 10 then\n        res[i] = \"Zero\"..max\n      else\n        res[i] =\
    \ \"Zero\"..(max+1)..\"-\"+(j-1)\n      end\n      table.insert(res, j-1)\n  \
    \    lengths[i] = nil\n    end\n  end\n  return res\nend", "  local len = #arr\n\
    \  if len == 0 then\n    return arr\n  end\n  local arr2 = {}\n  local reversed\
    \ = {}\n  for i = 1, len do\n    local j = len - i\n    local tmp = arr[i]\n \
    \   arr2[j] = tmp\n    reversed[j] = reverse(arr2[j])\n  end\n  for i = 1, len\
    \ do\n    arr2[i] = reversed[i]\n  end\n  arr2 = arr2[1]:arr2\n  for i = 2, len\
    \ do\n    arr2 = arr2:reversed[i]\n  end\n  return arr2\nend", "  local ones =\
    \ {}\n  local sevens = {}\n  local tens = {}\n  local fifties = {}\n  local thirties\
    \ = {}\n  local onefifties = {}\n  local fiftyes = {}\n  local threes = {}\n \
    \ local twos = {}\n  local nines = {}\n  for i = 1,9 do\n    local length = math.floor(math.log10(i))\n\
    \    local base = 10^(length - 1)\n    if i < base then\n      local count = (i\
    \ - base) / base\n      if count > 0 then\n        if count == 1 then\n      \
    \    local key = string.format(\"%02d\", count)\n          local value = string.format(\"\
    %s\", key)\n          ones[key] = value\n        else\n          local key = string.format(\"\
    %02d\", count)\n          local value = string.format(\"%s\", key)\n         \
    \ count = count\n          local prefix = string.format(\"%0*d\", 2, count)\n\
    \          local key = string.format(\"%s%s\", prefix, key)\n          local value\
    \ = string.format(\"%s\", key)\n          sevens[key] = value\n        end\n \
    \     end\n    end\n  end\n  local key = string.format(\"%02d\", 9)\n  local value\
    \ = string.format(\"%s\", key)\n  tens[key] = value\n  key = string.format(\"\
    %02d\", 10)\n  local value = string.format(\"%s\", key)\n  fifties[key] = value\n\
    \  key = string.format(\"%02d\", 11)\n  local value = string.format(\"%s\", key)\n\
    \  thirties[key] = value\n  key = string.format(\"%02d\", 12)\n  local value =\
    \ string.format(\"%s\", key)\n  onefifties[key] = value\n  key = string.format(\"\
    %02d\", 13)\n  local value = string.format(\"%s\", key)\n  fiftyes[key] = value\n\
    \  key = string.format(\"%02d\", 14)\n  local value = string.format(\"%s\", key)\n\
    \  threes[key] = value\n  key = string.format(\"%02d\", 15)\n  local value = string.format(\"\
    %s\", key)\n  twos[key] = value\n  key = string.format(\"%02d\", 16)\n  local\
    \ value = string.format(\"%s\", key)\n  nines[key] = value\n  local ones = {}\n\
    \  local sevens = {}\n  local tens = {}\n  local fifties = {}\n  local thirties\
    \ = {}\n  local onefifties = {}\n  local fiftyes = {}\n  local threes = {}\n \
    \ local twos = {}\n  local nines = {}\n  local base = math.pow(10, 10)\n  for\
    \ i = 1, 100 do\n    local digit = i / base\n    local length = math.floor(math.log10(digit))\n\
    \    local base = 10^(length - 1)\n    if digit < base then\n      local count\
    \ = (digit - base) / base\n      if count > 0 then\n        if count == 1 then\n\
    \          local key = string.format(\"%02d\", count)\n          local value =\
    \ string", "    local function compare(a,b) return #a < #b end\n    return table.sort(arr,\
    \ compare)\nend", "  local lengths = {}\n  for i = 1, 9 do\n    table.insert(lengths,\
    \ 0)\n  end\n  local length = 1\n  for i = 1, #arr do\n    table.insert(lengths,\
    \ #lengths)\n    if arr[i] == i then\n      length = length + 1\n    end\n  end\n\
    \  for i = 1, #lengths do\n    lengths[length] = lengths[i] + 1 -- arr[i] = #lengths\
    \ i times\n  end\n  local result = {}\n  for i = 1, #lengths do\n    result[#result\
    \ + 1] = i\n  end\n  for i = 1, #lengths do\n    table.insert(result, arr[result[i]])\n\
    \  end\n  return result\nend", "  -- sort array first by length\n  -- then reverse\
    \ the resulting array\n  -- then replace each number by its corresponding name\
    \ from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"\n  local sorted_arr = table.sort(arr, function(a, b)\n    if\
    \ a == nil or b == nil then\n      -- when either is nil, they do not have a length\n\
    \      return nil\n    else\n      return #b > #a\n    end\n  end)", "\tlocal\
    \ len = #arr\n\tif len == 0 then\n\t\treturn nil\n\tend", "  local sorted = table.sort(arr)\n\
    \  if #sorted == 0 then\n    return {}\n  end", "  if #arr == 0 then\n    return\
    \ {}\n  elseif #arr == 1 then\n    local arr = arr[1]\n    if arr > 0 and arr\
    \ < 10 then\n      -- If the number is a single digit, return \"One\" rather than\
    \ \"1\"\n      return {string.format(\"One\", arr)}\n    end\n  end", "\tlocal\
    \ function sort(a, b)\n\t\treturn a:len() > b:len() or b:len() > a:len() \n\t\
    end\n\tlocal function length(a, b)\n\t\treturn a:len() - b:len()\n\tend\n\t\n\t\
    local function swap(a, b)\n\t\tlocal tmp = a\n\t\ta = b\n\t\tb = tmp\n\tend\n\t\
    \n\tlocal arr_reversed = {}\n\tlocal len_of_list = #arr\n\tfor i = 1, len_of_list\
    \ do\n\t\tlocal n = arr[i]\n\t\tif n > 9 then\n\t\t\tswap(arr[i], arr[i + 1])\n\
    \t\tend\n\tend\n\t\n\tlocal new_arr = {}\n\tfor i = 1, len_of_list do\n\t\tif\
    \ arr[i] == 9 or arr[i] == 1 then\n\t\t\tnew_arr[i] = arr[i + 1]\n\t\telse\n\t\
    \t\tnew_arr[i] = by_length[arr[i]]\n\t\tend\n\tend\n\t\n\tfor i = 1, #new_arr\
    \ do\n\t\tif new_arr[i] == nil then\n\t\t\tnew_arr[i] = \"Nine\"\n\t\tend\n\t\
    end\n\t\n\tlocal new_len = 1\n\tfor i = 1, #new_arr do\n\t\tnew_len = new_len\
    \ * 10\n\t\tnew_len = new_len + new_arr[i]\n\tend\n\t\n\tfor i = 1, #new_arr do\n\
    \t\tif new_arr[i] == \"Nine\" then\n\t\t\tnew_arr[i] = 9\n\t\telse\n\t\t\tnew_arr[i]\
    \ = new_arr[i] / 10\n\t\tend\n\tend\n\t\n\tlocal new_len_of_list = #new_arr\n\t\
    for i = 1, len_of_list do\n\t\tif new_arr[i] > 9 then\n\t\t\tswap(arr[i], arr[i\
    \ + new_len_of_list])\n\t\tend\n\tend\n\t\n\treturn new_arr\nend", "  -- First\
    \ sort by length\n  table.sort(arr, function(a, b) return #a < #b end)\n  -- Now\
    \ reverse the sorted array\n  table.reverse(arr)\n  -- Now replace each element\
    \ in the array by its corresponding name\n  for i = 1, #arr do\n    arr[i] = \"\
    One\"\n    arr[i-1] = \"Two\"\n    arr[i-2] = \"Three\"\n    arr[i-3] = \"Four\"\
    \n    arr[i-4] = \"Five\"\n    arr[i-5] = \"Six\"\n    arr[i-6] = \"Seven\"\n\
    \    arr[i-7] = \"Eight\"\n    arr[i-8] = \"Nine\"\n  end\n  -- Return the resulting\
    \ array\n  return arr\nend", "   local sorted_arr = arr:sort()\n   sorted_arr.reverse()\n\
    \   local index = 1\n   local results = {}\n   for _, v in pairs(sorted_arr) do\n\
    \      local name = get_name(v)\n      if not name then\n         name = tostring(v)\n\
    \         assert(name)\n      end\n      results[index] = name\n      index =\
    \ index + 1\n   end\n   return results\nend", "\tlocal arr1 = {}\n\tlocal arr2\
    \ = {}\n\tlocal arr3 = {}\n\tlocal arr4 = { [1] = {\"One\"}, [2] = {\"Two\"},\
    \ [3] = {\"Three\"}, [4] = {\"Four\"}, [5] = {\"Five\"} , [6] = {\"Six\"} , [7]\
    \ = {\"Seven\"} , [8] = {\"Eight\"} , [9] = {\"Nine\"} }\n\t\n\tfor i = 1, #arr\
    \ do\n\t\tif arr[i] >= 1 then\n\t\t\tif arr[i] <= 9 then\n\t\t\t\tarr1[#arr1 +\
    \ 1] = arr[i]\n\t\t\telse\n\t\t\t\tarr2[#arr2 + 1] = arr[i]\n\t\t\tend\n\t\tend\n\
    \tend\n\t\n\tlocal j = 0\n\tlocal k = 0\n\tlocal str = \"\"\n\tfor i=1, #arr1\
    \ do\n\t\tstr = str .. arr4[arr1[i]][j]\n\t\tj = j+1\n\t\tif j == 8 or i == #arr1\
    \ then\n\t\t\tarr3[k] = str\n\t\t\tj = 0\n\t\t\tk = k+1\n\t\t\tstr = \"\"\n\t\t\
    end\n\tend\n\t\n\treturn arr3\nend", "  local lens = {}\n  for i = 1, 10 do\n\
    \    lens[i] = 0\n  end", "    local i = 1\n    local j = 1\n    local temp =\
    \ 0\n    local res", "  local arr2 = {}\n  local tmp = {}\n  local n = 1\n  for\
    \ i = 1, #arr do\n    if n % 10 <= 9 then\n      table.insert(arr2, arr[i])\n\
    \    else\n      table.insert(tmp, arr[i])\n    end\n    n = n / 10\n  end\n \
    \ if #arr > 0 then\n    for i = 1, #arr do\n      arr2[#arr2 + 1] = arr2[#arr2]\
    \ + tmp[i]\n    end\n  end\n  return arr2\nend", "  if #arr == 0 then\n    return\
    \ {}\n  end\n  local tmp = {}\n  local results = {}\n  for i = 1, #arr do\n  \
    \  local start = i - 2\n    if start < 1 then\n      start = #arr + 1\n    end\n\
    \    local stop = i + 1\n    if stop > #arr then\n      stop = #arr\n    end\n\
    \    local tmp_string = table.concat(arr[start:stop], \"-\")\n    table.insert(results,\
    \ by_length(table.copy(arr)))\n    table.insert(results, tmp_string)\n  end\n\
    \  for i = 1, #results do\n    for j = 1, #results[i] do\n      results[i][j]\
    \ = string.format(\"%s-%s\", results[i][j], results[i][j])\n    end\n  end\n \
    \ return table.concat(results, \"-\")\nend", "  local sorted_arr = table.sort(arr,\n\
    \t\t\t      function(a, b) return b - a end)\n  sorted_arr = table.reverse(sorted_arr)\n\
    \  for i = 1, 10 do\n    sorted_arr[i] = \"One\"\n  end\n  for i = 1, 10 do\n\
    \    sorted_arr[i] = \"Two\"\n  end\n  for i = 1, 10 do\n    sorted_arr[i] = \"\
    Three\"\n  end\n  for i = 1, 10 do\n    sorted_arr[i] = \"Four\"\n  end\n  for\
    \ i = 1, 10 do\n    sorted_arr[i] = \"Five\"\n  end\n  for i = 1, 10 do\n    sorted_arr[i]\
    \ = \"Six\"\n  end\n  for i = 1, 10 do\n    sorted_arr[i] = \"Seven\"\n  end\n\
    \  for i = 1, 10 do\n    sorted_arr[i] = \"Eight\"\n  end\n  for i = 1, 10 do\n\
    \    sorted_arr[i] = \"Nine\"\n  end\n  return sorted_arr\nend", "  if #arr ==\
    \ 0 then\n    return arr\n  end\n  if #arr == 1 then\n    return [\"One\"]\n \
    \ end\n  if arr[1] < 1 then\n    return by_length(arr[1:])\n  end\n  if arr[1]\
    \ < 9 then\n    return by_length(arr[2:] .. to_char(arr[1]))\n  end\n  local function\
    \ swap(a, b)\n    return a,b\n  end\n  return table.sort(swap, arr, 1)\nend",
  "  -- sort by length\n  table.sort(arr, function(a,b) return #a < #b end)", "  \
    \  if not arr then return end\n    -- arr has only strange number\n    if arr[1]\
    \ > 100 or arr[2] > 100 then return end\n    local length = #arr\n    local one_index\
    \ = math.ceil(length / 2)\n    local two_index = math.floor(length - one_index)\n\
    \    local three_index = math.floor(length - two_index)\n    local four_index\
    \ = math.floor(length - three_index)\n    local five_index = math.floor(length\
    \ - four_index)\n    local six_index = math.floor(length - five_index)\n    local\
    \ seven_index = math.floor(length - six_index)\n    local eight_index = math.floor(length\
    \ - seven_index)\n    local nine_index = math.floor(length - eight_index)\n  \
    \  local zero_count = length - nine_index", "  -- We need to reverse the sorted\
    \ array:\n  table.sort(arr, function(a, b)\n    -- Then we need to reverse the\
    \ resulting array:\n    local a, b = b, a\n    -- We only need to check odd numbers:\n\
    \    if a % 2 == 1 and b % 2 == 1 then\n      return a\n    else\n      return\
    \ b\n    end\n  end)\n  -- And then we return the first element of the reversed\
    \ array (being the first name we want):\n  return arr[#arr]\nend", "  local n\
    \ = #arr\n  if n == 0 then\n    return {}\n  end", "  -- If the array is empty,\
    \ return an empty array:\n  if #arr == 0 then\n    return {}\n  end\n  -- If the\
    \ array has any strange number ignore it:\n  if #arr == 1 then\n    if arr[1]\
    \ < 0 then\n      return {}\n    end\n    return { One = arr[1] }\n  end\n  local\
    \ counts = {}\n  -- Find the length of each number\n  for i = 1, #arr do\n   \
    \ local key = tonumber(arr[i])\n    local length = tonumber(arr[i + 1] or 1)\n\
    \    counts[key] = counts[key] or {}\n    counts[key][length] = counts[key][length]\
    \ or {}\n    counts[key][length][#counts[key][length] + 1] = i\n  end\n  -- Sort\
    \ the numbers according to their length\n  table.sort(counts)\n  -- reverse the\
    \ numbers\n  local new_counts = {}\n  for i = 1, #counts do\n    for _, val in\
    \ pairs(counts[i]) do\n      for _, v in pairs(val) do\n        new_counts[v]\
    \ = i\n      end\n    end\n  end\n  -- Get the name of each number\n  local names\
    \ = {}\n  for _, v in pairs(counts) do\n    for i=1, #v do\n      table.insert(names,\
    \ v)\n    end\n  end\n  -- return the sorted numbers\n  return table.concat(new_counts)\n\
    end", "\tlocal l = 0\n\tlocal r = #arr\n\twhile l <= r do\n\t\tlocal m = math.min(l,\
    \ r)\n\t\tlocal n = 0\n\t\tlocal tmp = arr[#arr]\n\t\tfor i = m, 1 do\n\t\t\t\
    if tmp < arr[i] then\n\t\t\t\tn = i\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif\
    \ n > 0 then\n\t\t\tarr[n - 1], arr[n] = arr[n], arr[n - 1]\n\t\tend\n\t\tl =\
    \ m + 1\n\t\tr = n\n\tend\n\treturn arr\nend", "  local temp = {}\n  -- Loop through\
    \ the array\n  for i, v in ipairs(arr) do\n    -- If the current element is in\
    \ the right range and isn't in the temp array\n    if v == 1 then\n      if ~table.includes(temp,\
    \ v) then\n        temp[v] = tostring(v)\n      end\n    elseif v == 2 then\n\
    \      if ~table.includes(temp, v) then\n        temp[v] = tostring(v)\n     \
    \ end\n    elseif v == 3 then\n      if ~table.includes(temp, v) then\n      \
    \  temp[v] = tostring(v)\n      end\n    elseif v == 4 then\n      if ~table.includes(temp,\
    \ v) then\n        temp[v] = tostring(v)\n      end\n    elseif v == 5 then\n\
    \      if ~table.includes(temp, v) then\n        temp[v] = tostring(v)\n     \
    \ end\n    elseif v == 6 then\n      if ~table.includes(temp, v) then\n      \
    \  temp[v] = tostring(v)\n      end\n    elseif v == 7 then\n      if ~table.includes(temp,\
    \ v) then\n        temp[v] = tostring(v)\n      end\n    elseif v == 8 then\n\
    \      if ~table.includes(temp, v) then\n        temp[v] = tostring(v)\n     \
    \ end\n    elseif v == 9 then\n      if ~table.includes(temp, v) then\n      \
    \  temp[v] = tostring(v)\n      end\n    end\n  end\n  return table.concat(temp)\n\
    end", "  for i = 2, #arr do\n    if arr[i-1] < arr[i] then\n      arr[i], arr[i-1]\
    \ = arr[i-1], arr[i]\n    end\n  end\n  return arr\nend", "    local out = {}\n\
    \    for _,v in ipairs(arr) do\n        if v < 1 then\n            local _,n =\
    \ math.modf(v*10)\n            if n == 0 then\n                table.insert(out,\
    \ \"\")\n            else\n                table.insert(out, \"Nine\")\n     \
    \       end\n        elseif v < 10 then\n            table.insert(out, \"One\"\
    )\n        elseif v < 20 then\n            table.insert(out, \"Two\")\n      \
    \  elseif v < 30 then\n            table.insert(out, \"Three\")\n        elseif\
    \ v < 40 then\n            table.insert(out, \"Four\")\n        elseif v < 50\
    \ then\n            table.insert(out, \"Five\")\n        elseif v < 60 then\n\
    \            table.insert(out, \"Six\")\n        elseif v < 70 then\n        \
    \    table.insert(out, \"Seven\")\n        elseif v < 80 then\n            table.insert(out,\
    \ \"Eight\")\n        elseif v < 90 then\n            table.insert(out, \"Nine\"\
    )\n        else\n            assert(false)\n        end\n    end\n    return out\n\
    end", "    if not arr then return end -- Empty array\n    local len = #arr\n \
    \   local lower = math.max(1, len-1)\n    local upper = math.min(9, len-1)\n \
    \   local arr2 = {}\n    for i=lower, upper do\n        arr2[i] = arr[len-i]\n\
    \    end\n    table.sort(arr2, function(a, b)\n        return b - a\n    end)\n\
    \    local tmp = {}\n    for i=lower, upper do\n        tmp[i] = \"One\"\n   \
    \ end\n    for i=len-1, 0, -1 do\n        tmp[i] = arr2[i]\n    end\n    return\
    \ table.unpack(tmp, 2)\nend", "  local results = {}\n  for i = 1, #arr do\n  \
    \  local length = arr[i]\n    if length <= 9 then\n      results[length] = arr[i]\n\
    \    elseif length > 9 then\n      local temp = arr[i]\n      arr[i] = arr[length]\n\
    \      arr[length] = temp\n      results[length] = arr[i]\n    end\n  end\n  table.sort(arr,\
    \ function(a, b)\n    return #results[b] - #results[a]\n  end)\n  for i = 1, #arr\
    \ do\n    arr[i] = results[#results][#results]\n  end\n  return arr\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThat's actually a better way to do it\n<|/ c |>\n\
    <| c |>\n- I'm glad you like it; but please see my update for another way of doing\
    \ it.\n<|/ c |>\n<| a tags=sorting,lua dscore=0 |>\nI assume that there is an\
    \ upper bound on the size of arr so you don't have to do any sorting. Here is\
    \ a simple solution that uses Lua tables. I used a lua table with keys and values\
    \ because you said you wanted an array of names. The function takes a table of\
    \ names and returns an array of the same length as arr with the names ordered\
    \ from smallest to largest.\n<code>", "\tif arr ~= nil then\n\t\tlocal size =\
    \ #arr\n\t\tlocal i, j, k\n\t\tlocal newArray = {}\n\t\tlocal reverseArray = {}\n\
    \t\tfor i = 1, size do\n\t\t\tk = math.floor(math.log2(i))\n\t\t\tif k == 0 then\n\
    \t\t\t\tnewArray[i] = arr[i]\n\t\t\t\treverseArray[i] = arr[i]\n\t\t\telseif k\
    \ ~= 1 then\n\t\t\t\tnewArray[i] = reverseArray[i - k]\n\t\t\t\treverseArray[i\
    \ - k] = arr[i]\n\t\t\telse\n\t\t\t\tnewArray[i] = arr[i]\n\t\t\t\treverseArray[i]\
    \ = arr[i]\n\t\t\tend\n\t\tend\n\t\treturn newArray\n\telse\n\t\treturn arr\n\t\
    end\nend", "    local new_array = {}\n    local max_len = -1\n    for i=1,#arr\
    \ do\n        local value = arr[i]\n        max_len = max_len > value and max_len\
    \ or value\n    end\n    for i=1,#arr do\n        local value = arr[i]\n     \
    \   if max_len >= value then\n            new_array[max_len, max_len] = arr[i]\n\
    \        end\n    end\n    return new_array\nend\nreturn by_length\nend\n</code>\n\
    <|/ a tags=sorting,arrays,lua |>\n<| a tags=sorting,arrays,lua |>\n<code>", "\t\
    assert(arr ~= nil, \"input array is nil\")\n\tlocal function length(arr)\n\t\t\
    if #arr == 0 then\n\t\t\treturn 0\n\t\tend\n\t\tlocal result\n\t\tlocal length\
    \ = #arr\n\t\tlocal min_length = math.min(length, 9)\n\t\tlocal max_length = math.max(length,\
    \ 1)\n\t\tfor i = min_length, max_length-1 do\n\t\t\tlocal count = 0\n\t\t\tfor\
    \ j = 0, (length-i)+1 do\n\t\t\t\tif arr[j] == i then\n\t\t\t\t\tcount = count\
    \ + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tresult = result or {}\n\t\t\tresult[count]\
    \ = i\n\t\tend\n\t\tlocal sorted_array = arr\n\t\tfor i = 1, 9 do\n\t\t\tif sorted_array[i]\
    \ then\n\t\t\t\ttable.sort(sorted_array, function(i, j)\n\t\t\t\t\treturn sorted_array[i]\
    \ < sorted_array[j]\n\t\t\t\tend)\n\t\t\tend\n\t\tend\n\t\tfor i = 1, 9 do\n\t\
    \t\tif sorted_array[i] then\n\t\t\t\tlocal pos = 1\n\t\t\t\tfor j = 1, (length-i)+1\
    \ do\n\t\t\t\t\tlocal c = sorted_array[j]\n\t\t\t\t\tfor k = 1, i do\n\t\t\t\t\
    \t\tsorted_array[j] = sorted_array[j-k+pos]\n\t\t\t\t\t\tpos = pos + 1\n\t\t\t\
    \t\tend\n\t\t\t\t\tsorted_array[j] = c\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\
    return result\n\tend\n\treturn length(arr)\nend", "  if #arr == 0 then return\
    \ arr end\n  local pivot = arr[#arr]\n  arr:sort(function(a, b) return a < b end)\n\
    \  local new_arr = {}\n  for i = #arr, 1, -1 do\n    if i == 1 then\n      new_arr[i]\
    \ = \"One\"\n    elseif i == #arr then\n      new_arr[i] = \"Nine\"\n    else\n\
    \      local num = arr[i]\n      local name = arr[i - 2]\n      new_arr[i] = name\
    \ .. num\n    end\n  end\n  return new_arr\nend", "\tlocal sorted_arr = {}\n\t\
    local i = 0\n\twhile i < #arr do\n\t\tif arr[i - 1] < arr[i - 1] then\n\t\t\t\
    table.insert(sorted_arr, arr[i - 1])\n\t\t\ti = i + 1\n\t\telse\n\t\t\tlocal temp\
    \ = arr[i - 1]\n\t\t\tarr[i - 1] = arr[i - 1]\n\t\t\tarr[i - 1] = temp\n\t\tend\n\
    \tend\n\treturn sorted_arr\nend", "  local temp = {}\n  local i = 1\n  local j\
    \ = 1\n  while i <= 9 do\n    local m = math.floor(i / 10)\n    if not temp[m]\
    \ then\n      temp[m] = {}\n    end\n    if arr[i] then\n      temp[m][arr[i]]\
    \ = true\n    end\n    i = i + 1\n  end\n  -- sort by length\n  i = 1 \n  while\
    \ i <= 9 do\n    local j = i+1\n    local k = i+1\n    while j <= 9 do\n     \
    \ if temp[j] then\n        local swap = true\n        while k <= 9 do\n      \
    \    if not temp[k] then\n            swap = false\n            break\n      \
    \    end\n          k = k + 1\n        end\n        if swap then\n          for\
    \ k, v in pairs(temp[j]) do\n            table.insert(temp[k], v)\n          end\n\
    \          for k, v in pairs(temp[k]) do\n            table.insert(temp[j], v)\n\
    \          end\n        end\n      end\n      j = j + 1\n    end\n    i = i +\
    \ 1\n  end\n  -- reverse arr\n  for i = 1, #temp do\n    local value = temp[i]\n\
    \    table.insert(value, i)\n  end\n  local results = {}\n  local index = nil\n\
    \  for i = 1, 9 do\n    index = i\n    for k, v in pairs(value) do\n      index\
    \ = index - 1\n      if index == 0 then\n        break\n      end\n      results[index]\
    \ = v\n    end\n  end\n  return results\nend", "  local i = 0\n  local tmp = {}\n\
    \  local res = {}\n  repeat\n    local l = tostring(arr[i])\n    if i == 1 then\n\
    \      res = { l }\n    else\n      if res == {l} then\n        table.insert(tmp,\
    \ l)\n      else\n        table.insert(res, l)\n      end\n    end\n    i = i\
    \ + 1\n  until i == #arr", "  if #arr == 0 then\n    return arr\n  end\n  \n \
    \ local first_element = arr[1]\n  local second_element = arr[2]\n  \n  local length\
    \ = tonumber(second_element) - tonumber(first_element)\n  \n  if length <= 0 then\n\
    \    return arr\n  end", "  local arr_by_length = {}\n  local arr_size = #arr\n\
    \  if arr_size <= 0 then\n    arr_by_length = arr\n  else\n    for index = 0,\
    \ arr_size - 1 do\n      local length = arr[index][1]\n      local value = arr[index][2]\n\
    \      arr_by_length[length] = arr_by_length[length] or {}\n      arr_by_length[length][value]\
    \ = arr_by_length[length][value] or {}\n      arr_by_length[length][value][length]\
    \ = arr[index]\n    end\n  end\n  return arr_by_length\nend", "  if #arr == 0\
    \ then\n    return arr\n  end", "\tlocal function swap(arr1, arr2)\n\t\tarr1[1],\
    \ arr2[1] = arr2[1], arr1[1]\n\tend\n\tlocal function arrSort(arr)\n\t\tif #arr\
    \ == 0 then\n\t\t\treturn arr\n\t\tend\n\t\tlocal pivotIndex = math.floor((#arr)\
    \ / 2)\n\t\tswap(arr, pivotIndex)\n\t\tarrSort(arr:sub(1, pivotIndex - 1))\n\t\
    \tarrSort(arr:sub(pivotIndex + 1, #arr))\n\tend\n\tlocal function reverseArray(arr)\n\
    \t\tlocal temp = {}\n\t\ttable.insert(temp, arr[1])\n\t\tfor i = 2, #arr do\n\t\
    \t\ttable.insert(temp, arr[i])\n\t\tend\n\t\ttable.insert(arr, temp[1])\n\tend\n\
    \tlocal function swapElement(arr, index)\n\t\tlocal temp = arr[index]\n\t\tarr[index]\
    \ = arr[index + 1]\n\t\tarr[index + 1] = temp\n\tend\n\tlocal function addName(arr,\
    \ name)\n\t\ttable.insert(arr, name)\n\tend\n\tlocal function toNumber(str)\n\t\
    \tif str == \"-\" then\n\t\t\treturn -tonumber(str)\n\t\tend\n\t\tlocal temp =\
    \ tonumber(str)\n\t\tif temp ~= nil then\n\t\t\treturn temp\n\t\tend\n\t\tlocal\
    \ temp = string.sub(str, 1, 1)\n\t\tstr = string.sub(str, 2, #str)\n\t\treturn\
    \ toNumber(temp) + toNumber(str)\n\tend\n\tarrSort(arr)\n\tlocal newArray = {}\n\
    \tlocal index = 1\n\tfor i = 1, #arr do\n\t\tlocal number = toNumber(arr[i])\n\
    \t\tif number ~= nil then\n\t\t\tnewArray[index] = number\n\t\t\tindex = index\
    \ + 1\n\t\tend\n\tend\n\tlocal temp\n\tfor i = 1, #arr do\n\t\tlocal number =\
    \ toNumber(arr[i])\n\t\tif number ~= nil then\n\t\t\ttemp = number\n\t\telse\n\
    \t\t\tswapElement(arr, index)\n\t\t\tindex = index + 1\n\t\tend\n\tend\n\treverseArray(newArray)\n\
    \tindex = 1\n\tfor i = 1, #arr do\n\t\tlocal number = toNumber(arr[i])\n\t\tif\
    \ number ~= nil then\n\t\t\tnewArray[index] = number\n\t\t\tindex = index + 1\n\
    \t\tend\n\tend\n\taddName(newArray, \"One\")\n\taddName(newArray, \"Two\")\n\t\
    addName(newArray, \"Three\")\n\taddName(newArray, \"Four\")\n\taddName(newArray,\
    \ \"Five\")\n\taddName(newArray, \"Six\")\n\taddName(newArray, \"Seven\")\n\t\
    addName(newArray, \"Eight\")\n\taddName(", "  local t = {}\n  local i = 0\n  while\
    \ true do\n    local len = #arr\n    if i == len then return t end\n    t[i] =\
    \ arr[i]\n    i = i + 1\n  end\nend", "  if #arr == 0 then\n    return {}\n  else\n\
    \    local max  = math.max(arr)\n    local min  = math.min(arr)\n    local length\
    \ = {\n      [1] = 1, [2] = 2, [3] = 1, [4] = 1, [5] = 2, [6] = 1, [7] = 2, [8]\
    \ = 1, [9] = 2, \n    }\n    local length_name = \n      {\n        [1] = \"\"\
    ,\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n\
    \        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n \
    \       [8] = \"Eight\",\n        [9] = \"Nine\",\n      }\n    for i = min, max\
    \ do\n      table.insert(arr, i)\n    end\n    table.sort(arr, reverse)\n    local\
    \ str = \"\"\n    for i = 1, max do\n      str = str .. length_name[length[arr[i]]]\n\
    \    end\n    return str\n  end\nend", "  local temp = {}\n  for i, v in ipairs(arr)\
    \ do\n    local s = v[1]\n    local p = #temp + s\n    table.insert(temp, s)\n\
    \  end", "  local arr2 = {}\n  for i = 1, #arr do\n    local value = arr[i]\n\
    \    local position = math.floor(math.log(value) / math.log(10))\n    local digit\
    \ = math.mod(value, 10)\n    arr2[position] = arr2[position] .. digit\n  end\n\
    \  return arr2\nend", "  -- If the array is empty, return an empty array:\n  if\
    \ #arr == 0 then\n    return nil\n  end", "   if #arr <= 1 then\n      return\
    \ arr\n   else\n      local result = {}\n      local length = math.min(#arr, 1)\n\
    \      for i = 1, length do\n         local index = math.random(#arr)\n      \
    \   table.insert(result, arr[index])\n         table.insert(result, arr[index])\n\
    \      end\n      table.sort(result)\n      local i, last = 0, 1\n      while\
    \ i < length do\n         arr[i] = result[last]\n         last = last + 1\n  \
    \    end\n      arr[#arr] = result[last]\n      return arr\n   end\nend", "  local\
    \ arr_t = {} -- [2,5,4]\n  for i = 1, #arr do\n    arr_t[#arr_t+1] = arr[i]\n\
    \  end\n  table.sort(arr_t)\n  for i = 1, #arr do\n    arr[i] = arr_t[i]\n  end\n\
    \  local arr_t = {} -- [2,5,4]\n  for i = 1, #arr do\n    arr_t[#arr_t+1] = arr[i]\n\
    \  end\n  table.sort(arr_t)\n  for i = 1, #arr do\n    arr[i] = arr_t[i]\n  end\n\
    \  table.sort(arr)\n  arr_t = { }\n  for i = 1, #arr do\n    arr_t[#arr_t+1] =\
    \ arr[i]\n  end\n  table.sort(arr_t)\n  for i = 1, #arr do\n    arr[i] = arr_t[i]\n\
    \  end\n  return arr\nend", "    local i = 0\n    local j = 0\n    local length\
    \ = 0\n    while i < #arr do\n        length = #arr\n        i = i + 1\n     \
    \   if arr[i] == arr[j] then\n            length = length - 1\n            j =\
    \ j + 1\n        end\n        if length <= 1 then\n            local name1 = \"\
    One\"\n            local name2 = \"Two\"\n            local name3 = \"Three\"\n\
    \            local name4 = \"Four\"\n            local name5 = \"Five\"\n    \
    \        local name6 = \"Six\"\n            local name7 = \"Seven\"\n        \
    \    local name8 = \"Eight\"\n            local name9 = \"Nine\"\n           \
    \ local name10 = \"Ten\"\n            local name11 = \"Eleven\"\n            local\
    \ name12 = \"Twelve\"\n            local name13 = \"Thirteen\"\n            local\
    \ name14 = \"Fourteen\"\n            local name15 = \"Fifteen\"\n            local\
    \ name16 = \"Sixteen\"\n            local name17 = \"Seventeen\"\n           \
    \ local name18 = \"Eighteen\"\n            local name19 = \"Nineteen\"\n     \
    \       local name20 = \"Twenty\"\n            local name21 = \"Twenty one\"\n\
    \            local name22 = \"Twenty two\"\n            local name23 = \"Twenty\
    \ three\"\n            local name24 = \"Twenty four\"\n            local name25\
    \ = \"Twenty five\"\n            local name26 = \"Twenty six\"\n            local\
    \ name27 = \"Twenty seven\"\n            local name28 = \"Twenty eight\"\n   \
    \         local name29 = \"Twenty nine\"\n            local name30 = \"Thirty\"\
    \n            local name31 = \"Thirty one\"\n            local name32 = \"Thirty\
    \ two\"\n            local name33 = \"Thirty three\"\n            local name34\
    \ = \"Thirty four\"\n            local name35 = \"Thirty five\"\n            local\
    \ name36 = \"Thirty six\"\n            local name37 = \"Thirty seven\"\n     \
    \       local name38 = \"Thirty eight\"\n            local name39 = \"Thirty nine\"\
    \n            local name40 = \"Forty\"\n            local name41 = \"Forty one\"\
    \n            local name42 = \"Forty two\"\n            local name43 = \"Forty\
    \ three\"\n            local name44 = \"Forty four\"\n            local name45\
    \ = \"Forty five\"\n            local name46 = \"Forty ", "\tlocal len = #arr\n\
    \tif len == 0 then\n\t\treturn arr\n\tend\n\tlocal min = 1\n\tlocal max = 9\n\t\
    local ret = {}\n\tlocal idx\n\tlocal i = 1\n\twhile i <= len do\n\t\tidx = math.floor((min\
    \ + max) / 2)\n\t\tif arr[idx] > min then\n\t\t\tmin = idx\n\t\telse\n\t\t\tmax\
    \ = idx\n\t\tend\n\t\tret[#ret + 1] = arr[idx]\n\t\ti = i + 1\n\tend\n\t-- reverse\
    \ the array\n\tfor i = #ret - 1, 1, -1 do\n\t\tarr[i] = ret[i]\n\tend\n\t-- reverse\
    \ the name\n\tfor i = #ret - 1, 1, -1 do\n\t\tif i < len then\n\t\t\tarr[i] =\
    \ \"Nine\"\n\t\tend\n\tend\n\treturn arr\nend", "  return table.sort(arr , function(elem1,\
    \ elem2)\n    if elem1 > elem2 then\n      return 1\n    elseif elem1 < elem2\
    \ then\n      return -1\n    else\n      return 0\n    end\n  end)\nend", "  local\
    \ sorted_arr = arr:sort()\n  local reversed_arr\n  reversed_arr = sorted_arr:reverse()\n\
    \  reversed_arr:map(function(num)\n      sorted_arr[#sorted_arr + 1] = by_number[num\
    \ + 1]\n  end)\n  return reversed_arr\nend", "  local ls = {}\n  local len = #arr\n\
    \  \n  -- Sort and reverse the array\n  for i = 1, len do\n    local tmp = arr[i]\n\
    \    arr[i] = arr[i]\n    ls[i] = tmp\n  end\n  table.sort(ls)\n  table.sort(ls,\
    \ function(a,b) return a < b end)\n  \n  for i = 1, len do\n    arr[i] = ls[i]\n\
    \  end\n  \n  -- Return the names of the numbers\n  local names = {}\n  for i\
    \ = 1, len do\n    table.insert(names, string.format(\"%u\", arr[i]))\n  end\n\
    \  return names\nend", "  local function sort_arr(arr)\n    local sort_result\
    \ = {}\n    for _, value in ipairs(arr) do\n      local key = math.floor(value)\n\
    \      if key <= 9 then\n        key = key\n      else\n        key = key * 10\n\
    \      end\n      sort_result[#sort_result + 1] = key\n    end\n    return sort_result\n\
    \  end\n  local function reverse_arr(arr)\n    local reverse_result = {}\n   \
    \ for _, value in ipairs(arr) do\n      reverse_result[#reverse_result + 1] =\
    \ math.floor(value)\n    end\n    return reverse_result\n  end\n  local function\
    \ sort_and_reverse_by_length(arr)\n    return table.concat(table.sort(sort_arr(arr)),\
    \ reverse_arr(arr))\n  end\n  return sort_and_reverse_by_length(arr)\nend", " \
    \ -- Sort the array\n  arr:sort()\n  -- Reverse the array\n  arr:reverse()\n \
    \ -- Replace each digit with its corresponding name from \n  -- 'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n  for i = 1, #arr\
    \ do\n    arr[i] = \"One\" .. arr[i]\n  end\n  return arr\nend", "  local length\
    \ = #arr\n  local result = {}\n  for i = 1, length do\n    local first = arr[i]\n\
    \    for j = 1, length do\n      if i == j then\n        -- Ignore the element\n\
    \      elseif j > i then\n        local second = arr[j]\n        local len = string.len(first)\n\
    \        if len == string.len(second) then\n          local diff = len\n     \
    \     local l = 0\n          local r = 0\n          if len > 1 then\n        \
    \    while diff > 0 do\n              -- Move all digits in the first array that\
    \ aren't in the second array\n              -- towards the end of the second array,\
    \ and insert them in the right order.\n              -- Exmaple:\n           \
    \   -- arr = [1, -1, 55]\n              -- first = [-1, 55, 1]\n             \
    \ -- second = [55, -1, 1]\n              -- diff = 3\n              -- l = 1\n\
    \              -- r = 1\n              -- In this case, we simply move the first\
    \ number 1 towards the end\n              -- of the array and insert the number\
    \ -1 before it.\n              table.insert(result, string.sub(first, l, r))\n\
    \              table.insert(result, string.sub(second, l + 1, r))\n          \
    \    diff = diff - 1\n              l = l + 1\n              r = r + 1\n     \
    \       end\n          else\n            -- If the length of the strings are the\
    \ same, add the digits in the second array\n            -- towards the end of\
    \ the first array, and insert them in the right order.\n            table.insert(result,\
    \ string.sub(second, l + 1, r))\n            table.insert(result, string.sub(first,\
    \ l, r))\n          end\n        end\n      end\n    end\n  end\n  return result\n\
    end", "   local counts = {}\n   for i = 1, 9 do\n      counts[#counts+1] = i\n\
    \   end\n   -- sort arr and rearrange number\n   table.sort(arr, function(a, b)\n\
    \      local result = counts[a] > counts[b]\n      if not result then \n     \
    \    return true\n      else\n         return false\n      end\n   end)\n   --\
    \ replace number\n   local result = { 'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine' }\n   for i = 1, 9 do\n      arr[i] = result[arr[i]]\n\
    \   end\n   return arr\nend", "    local newArray = {}\n    for k, v in pairs(arr)\
    \ do\n        if (v == 1 or v == 9) and newArray[k] ~= nil then\n            newArray[k]\
    \ =  newArray[k] .. \" \" .. to_string(v)\n        else\n            newArray[k]\
    \ = v\n        end\n    end\n    return newArray\nend", "  local size = #arr\n\
    \  local reversed_arr = {}\n  local one = { [0] = \"One\", [1] = \"Two\", [2]\
    \ = \"Three\", [3] = \"Four\", [4] = \"Five\", [5] = \"Six\", [6] = \"Seven\"\
    , [7] = \"Eight\", [8] = \"Nine\" }\n  \n  for i = 1, size - 1, 1 do\n    if arr[i]\
    \ < 1 or arr[i] > 9 then\n      table.insert(reversed_arr, arr[i])\n      continue\n\
    \    end\n    \n    local pos = math.floor((arr[i] - 1) / 10)\n    reversed_arr[pos]\
    \ = one[arr[i] - 1]\n  end", "  -- If the array is empty, return an empty array:\n\
    \  if #arr == 0 then\n    return {}\n  end\n  -- If the array has any strange\
    \ number ignore it:\n  if arr[1] ~= 1 or arr[2] ~= 1 or arr[3] ~= 1 or arr[4]\
    \ ~= 1 or arr[5] ~= 1 or arr[6] ~= 1 or arr[7] ~= 1 or arr[8] ~= 1 or arr[9] ~=\
    \ 1 then\n    return arr\n  end\n  local t = {}\n  for i = 1, #arr do\n    table.insert(t,\
    \ {arr[i], i})\n  end\n  table.sort(t, function(a, b) return a.len < b.len  end)\n\
    \  local new_arr = {}\n  for i = 1, #t do\n    new_arr[t[i].key] = string.rep(t[i].val,\
    \ t[i].len)\n  end\n  return new_arr\nend\n</code>\n<|/ a dscore=1 tags=lua-table,lua,arrays\
    \ |>\n<| c |>\nIt seems to me that your answer is not different from mine: you\
    \ sort the array and then reverse it, while mine reverses it and sort it again.\
    \ While your code is not the fastest (it's O(n log n) while my solution is O(n)),\
    \ mine does have the advantage of handling special cases. I tested this on a 1M\
    \ size array and mine was faster by about 5%, and this solution was faster by\
    \ about 10% on my machine. Your solution will fail on arrays with repeated numbers\
    \ (e.g. {2,2,2,3,1,2,2,1,3}), while mine will give the right result in this case.\n\
    <|/ c |>\n<| c |>\nI didn't think of handling repeated numbers, thanks for pointing\
    \ that out. I just thought that sorting would be enough. I'll edit my answer to\
    \ reflect that fact.\n<|/ c |>\n<| c |>\nI edited my answer and included a test\
    \ case that your solution did not handle as expected.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer again to include a test case that your solution is now handling correctly.\n\
    <|/ c |>\n<| a tags=lua-table,lua,arrays |>\nAs pointed out in the comments, you\
    \ can just use table.sort and table.unpack with the correct key function and reverse\n\
    <code>", "  -- return an empty array if there are no elements\n  if not arr then\
    \ return end", "\t-- sort the array in descending order first\n\ttable.sort(arr,\
    \ function(a, b)\n\t\tif b < a then return -1 end\n\t\tif b > a then return 1\
    \ end\n\tend)", "   local function swap(first, second)\n      return arr[second]\
    \ = arr[first], arr[second]\n   end\n   local function sort(start, length)\n \
    \     local length = length or #arr\n      local mid = math.ceil(start / 2)\n\
    \      local pivot = arr[mid]\n      arr[mid], arr[start + 1] = arr[start + 1],\
    \ arr[mid]\n      for i = start, start + length - 1 do\n         if arr[i] < pivot\
    \ then\n            swap(start, start + 1)\n         else\n            swap(start\
    \ + 1, i)\n         end\n      end\n      swap(start + 1, mid)\n      return start,\
    \ start + length - 1\n   end\n   local function reverse(start, length)\n     \
    \ local length = length or #arr\n      local mid = math.ceil(start / 2)\n    \
    \  local pivot = arr[mid]\n      arr[mid], arr[start + 1] = arr[start + 1], arr[mid]\n\
    \      for i = start, start + length - 1 do\n         if arr[i] > pivot then\n\
    \            swap(start, start + 1)\n         else\n            swap(start + 1,\
    \ i)\n         end\n      end\n      swap(start + 1, mid)\n      return start,\
    \ start + length - 1\n   end\n   if #arr > 0 then\n      local start, length =\
    \ sort(1, #arr)\n      return reverse(start, length)\n   end\n   return arr\n\
    end", "    local len = {}\n    for i = 1, #arr do\n        len[i] = #arr[i]\n\
    \    end\n    table.sort(len, function(a,b) return len[a] < len[b] end)\n    local\
    \ newArr = {}\n    for i = 1, #arr do\n        newArr[len[i]] = arr[i]\n    end\n\
    \    return newArr\nend", "  local results = {}\n  local sorted_array = table.sort(arr)\n\
    \  for i = 1, 9 do\n    local index = #sorted_array\n    while index > 0 and sorted_array[index]\
    \ > i do\n      index = index - 1\n    end\n    if index < 2 then\n      results[i]\
    \ = 'One'\n    elseif index < 3 then\n      results[i] = 'Two'\n    elseif index\
    \ < 4 then\n      results[i] = 'Three'\n    elseif index < 5 then\n      results[i]\
    \ = 'Four'\n    elseif index < 6 then\n      results[i] = 'Five'\n    elseif index\
    \ < 7 then\n      results[i] = 'Six'\n    elseif index < 8 then\n      results[i]\
    \ = 'Seven'\n    elseif index < 9 then\n      results[i] = 'Eight'\n    else\n\
    \      results[i] = 'Nine'\n    end\n  end\n  return table.concat(results) \n\
    end", '  local results = {}', "    local newArr = {}\n    local i = 1\n    while\
    \ i <= 9 do\n        local j = 1\n        local length = i\n        while j <=\
    \ 9 do\n            length = length - 1\n            j = j + 1\n            if\
    \ length > 0 then\n                table.insert(newArr, arr[i])\n            end\n\
    \        end\n        i = i + 1\n    end\n    for i = 1, 9 do\n        if arr[i]\
    \ then\n            table.insert(newArr, one_or_ten[arr[i]])\n        end\n  \
    \  end\n    return newArr\nend", "  if #arr == 1 then\n    return arr\n  else\n\
    \    local sorted_arr = {}\n    local length = #arr\n    for i = 1, length, 1\
    \ do\n      if math.abs(arr[i]) < 10 then\n        table.insert(sorted_arr, arr[i])\n\
    \      else\n        local index\n        for j = 1, 9, 1 do\n          if math.abs(arr[i])\
    \ < 10 then\n            index = j\n          else\n            local r = math.floor(math.abs(arr[i])\
    \ / 10)\n            if r < math.abs(arr[i]) then\n              index = j\n \
    \           else\n              local tmp = arr[i] / 10\n              arr[i]\
    \ = tmp\n              index = j\n            end\n          end\n        end\n\
    \        table.insert(sorted_arr, arr[i])\n        table.insert(sorted_arr, index)\n\
    \      end\n    end\n    return sorted_arr\n  end\nend", "    local arr2\n   \
    \ local arr3\n    local i = 1\n    local j = 1\n    local tmp\n    arr2 = arr:clone()\n\
    \    arr3 = arr2:clone()\n    while i <= 9 do\n        while j <= 9 do\n     \
    \       if arr3[j] < 10 then\n                tmp = 'One'\n            else\n\
    \                tmp = 'Two'\n            end\n            arr3[j] = tmp\n   \
    \         j = j + 1\n        end\n        arr2 = arr3:clone()\n        arr3 =\
    \ arr2:clone()\n        i = i + 1\n    end\n    arr2 = arr3:clone()\n    arr3\
    \ = arr2:clone()\n    arr2:reverse()\n    arr3:reverse()\n    return arr3:toArray()\n\
    end", "  local temp, i, l\n  local new_arr = {}\n  -- sort first by length\n \
    \ for i = 1, #arr do\n    l = #arr[i]\n    if l > #temp then\n      temp = arr[i]\n\
    \    end\n  end\n  arr = {}\n  for i = 1, #temp do\n    table.insert(arr, temp[i])\n\
    \  end\n  table.sort(arr)\n  for i = 1, #arr do\n    new_arr[i] = arr[i][1]\n\
    \  end\n  return new_arr\nend", "  if arr == nil then\n    return nil\n  end\n\
    \  local arr2 = {}\n  for i = 1, #arr do\n    arr2[#arr2 + 1] = arr[i]\n  end\n\
    \  table.sort(arr2, function(a, b)\n    local len = math.abs(a - b)\n    if len\
    \ == 1 then\n      if a > b then\n        return -1\n      else\n        return\
    \ 1\n      end\n    else\n      return len\n    end\n  end)\n  for i = 1, #arr2\
    \ do\n    arr2[i] = 'One'\n  end\n  return arr2\nend", "  local sorted_lengths\
    \ = table.sort({arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8],\
    \ arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15], arr[16]}, function(a,\
    \ b)\n    if a < 1 then return -1 end\n    if a > 9 then return 1 end\n    return\
    \ 0\n  end)\n  \n  local reversed_lengths = {}\n  for i = 1, #sorted_lengths do\n\
    \    if sorted_lengths[i] > 9 then\n      reversed_lengths[i] = 'Nine'\n    elseif\
    \ sorted_lengths[i] <= 9 then\n      reversed_lengths[i] = sorted_lengths[i]\n\
    \    end\n  end", "  local i = 0\n  local max = #arr\n  local results = {}\n \
    \ while i < max do\n    local elem = arr[i]\n    local n = math.abs(elem)\n  \
    \  if n > 1 then\n      table.insert(results, name)\n      results[#results +\
    \ 1] = name\n    end\n    i = i + 1\n  end\n  return results\nend", "  local arr2\
    \ = {}\n  local length = #arr\n  local counter = -1\n  for i = 1, length do\n\
    \    counter = counter + 1\n    arr2[counter] = arr[i]\n  end\n  table.sort(arr2,\
    \ function(i1, i2)\n    return i1 < i2\n  end)\n  for i = 1, length do\n    arr2[i]\
    \ = \"One\"\n  end\n  for i = 1, length do\n    arr2[i] = \"Two\"\n  end\n  for\
    \ i = 1, length do\n    arr2[i] = \"Three\"\n  end\n  for i = 1, length do\n \
    \   arr2[i] = \"Four\"\n  end\n  for i = 1, length do\n    arr2[i] = \"Five\"\n\
    \  end\n  for i = 1, length do\n    arr2[i] = \"Six\"\n  end\n  for i = 1, length\
    \ do\n    arr2[i] = \"Seven\"\n  end\n  for i = 1, length do\n    arr2[i] = \"\
    Eight\"\n  end\n  for i = 1, length do\n    arr2[i] = \"Nine\"\n  end\n  for i\
    \ = 1, length do\n    arr2[i] = \"Zero\"\n  end\n  return arr2\nend", "    if\
    \ #arr == 0 then\n        return arr\n    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
