name: HumanEval_155_even_odd_count
language: lua
prompt: "-- Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
  \ ==> (1, 2)\nlocal function even_odd_count(num)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
  \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
  \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
  \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
  \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
  \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if num < 0 then\n    error(\"Negative numbers are not supported\"\
    )\n  end", "  num = math.abs(num)\n  if num < 0 then\n    return 0, 0\n  end",
  "  if num < 0 then\n    return nil\n  end\n  local odd = math.floor(math.log10(num))\
    \ + 1\n  local even = num - math.floor(num / 10^odd)\n  return even, odd\nend",
  "    local even, odd = 0, 1\n    for i = 1, #num % 2 do\n        even = even + 1\n\
    \    end\n    for i = 1, #num % 2 do\n        odd = even + 1\n    end\n    return\
    \ even, odd\nend\n</code>\nThe above function takes in any number (as long as\
    \ its even) and returns the number of even and odd digits.\nNow, you can use the\
    \ previous function to find out how many digits are even, and how many digits\
    \ are odd.\n<code>", "\tlocal num_str = string.format(\"%.0f\", num)\n\tlocal\
    \ num_str_len = #num_str\n\t-- if the string is not long enough to contain two\
    \ digits\n\tif num_str_len ~= 2 then\n\t\terror(\"The given number is not long\
    \ enough to contain even and odd digits\")\n\tend\n\t-- if the number of digits\
    \ is even\n\tif num_str % 2 = 0 then\n\t\treturn 1, 1\n\tend\n\t-- if the number\
    \ of digits is odd\n\tlocal odd_num_str = num_str:sub(1, num_str_len)\n\t-- if\
    \ the number of odd digits is even\n\tif odd_num_str % 2 = 0 then\n\t\treturn\
    \ 1, 0\n\tend\n\t-- if the number of odd digits is odd\n\tlocal even_num_str =\
    \ odd_num_str:sub(1, num_str_len)\n\treturn 0, odd_num_str:sub(1, num_str_len)\n\
    end", "  local count = 0\n  -- count the number of odd digits\n  for i = 1, num:len()\
    \ do\n    count = count + ((num % (10^(i-1))) % 2)\n  end\n  return count, (num:len()\
    \ - count)\nend", "  local even, odd = {}, {}\n  for i = 1, math.floor(math.log(num)\
    \ / math.log(10)) + 1 do\n    local exp = (10 ** i) - 1\n    even[exp] = even[exp]\
    \ or 0\n    odd[exp] = odd[exp] or 0\n    even[exp] = even[exp] + 1\n    odd[exp]\
    \ = odd[exp] + 1\n  end\n  return even, odd\nend", "   if num < 0 then\n     \
    \ return {0, 1}\n   end\n   local even, odd = 0, 1\n   local tmp = num\n   while\
    \ tmp ~= 0 do\n      if tmp % 2 == 0 then\n         even = even + 1\n      else\n\
    \         odd = odd + 0\n      end\n      tmp = math.floor(tmp/2)\n   end\n  \
    \ return {even, odd}\nend", "  -- Base Case\n  if num == 0 then\n    return (1,\
    \ 0)\n  end", "    local even = math.floor(num / 2)\n    local odd = num - even\n\
    \    return (even, odd)\nend", "    local n = math.abs(num)\n    local even =\
    \ 0\n    local odd = 1\n    while n > 0 do\n        local remaining = math.mod(n,\
    \ 10)\n        if remaining == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + remaining\n        end\n        n = math.trunc(n / 10)\n\
    \    end\n    return (even, odd)\nend", "    local even = #math.floor(num / 2)\n\
    \    local odd = #(num - even)\n    return (even, odd)\nend", "   local num_digits\
    \ = math.log(num) / math.log(2)\n   return math.ceil(num_digits), math.floor(num_digits)\n\
    end", "    local n, s = 0, 1\n    while n > 0 do\n        s, n = s+1, (n*num+s)/2\n\
    \    end\n    return s\nend\n</cell>\n<text>\nThe code above can be explained\
    \ by example. Let's look at some cases.", "  local n = 0\n  local even = 0\n \
    \ local odd = 0\n  while num do\n    local div = math.floor(num / 10)\n    if\
    \ div % 2 == 0 then\n      even = even + 1\n    end\n    odd = odd + div % 2\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend", "  local even\
    \ = 0\n  local odd = 0", "  if num == nil then\n    return 0, 0\n  end\n  local\
    \ odd = 0\n  local even = 0\n  for i = 1, math.floor(math.log(abs(num), 2)) do\n\
    \    local is_even = math.fmod(num, 2) == 0\n    local is_odd = not is_even\n\
    \    local tmp = (is_even, odd) -- This is to make the return tuple immutable\
    \ after assignment\n    even = even + is_even\n    odd = odd + is_odd\n    num\
    \ = math.floor(num / 2)\n  end\n  return even, odd\nend", "  local even = num\
    \ / 2\n  local odd = num % 2\n  return even, odd\nend", "    if num < 0 then return\
    \ nil end\n    local even, odd\n    \n    for i = 1, num do\n        local remainder\
    \ = num % 10\n        if remainder == 0 then\n            even = even+1\n    \
    \    else\n            odd = odd+1\n        end\n        num = num / 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<cell>", "   if num < 0 then\n      return\
    \ 0, 0\n   end\n   local even = num / 2\n   local odd = num % 2\n   return even,\
    \ odd\nend", "  if num == 0 then\n    return 0, 0\n  end\n  local even, odd =\
    \ 0, 1\n  for i = 1, math.floor(math.log(num, 2)) do\n    local digit = num %\
    \ 10\n    num = num / 10\n    if digit % 2 == 0 then\n      even = even+1\n  \
    \  else\n      odd = odd+1\n    end\n  end\n  return even, odd\nend", "\tlocal\
    \ even = 1\n\tlocal odd = 0\n\tlocal n = math.abs(num)", "\tlocal even, odd =\
    \ 0, 1\n\twhile true do\n\t\tlocal last = math.floor((num - 1) / 2)\n\t\tif last\
    \ == 0 then\n\t\t\tbreak\n\t\telse\n\t\t\teven = even + 1\n\t\t\tnum = last -\
    \ 1\n\t\tend\n\tend\n\twhile true do\n\t\tlocal last = math.floor((num + 1) /\
    \ 2)\n\t\tif last == 0 then\n\t\t\tbreak\n\t\telse\n\t\t\todd = odd + 1 \n\t\t\
    \tnum = last + 1\n\t\tend\n\tend\n\treturn even, odd\nend", "    local n = 0\n\
    \    while num > 0 do\n        num = math.floor(num / 10)\n        n = n + 1\n\
    \    end\n    return n, num % 10 == 0\nend", "\t-- if num is negative, return\
    \ (odd, even) tuple, otherwise (even, even)\n\tif num < 0 then\n\t\treturn (1,\
    \ 1)\n\telse\n\t\tlocal odd = 1\n\t\tlocal even = 1", "  -- Convert integer to\
    \ string\n  local str = tostring(num)\n  -- If length is odd, add a leading 0\
    \ to the number\n  -- This helps to prevent the counting loops from running unnecessary\n\
    \  if #str % 2 == 1 then\n    str = \"0\" .. str\n  end\n  -- Return the number\
    \ of even and odd digits in str\n  return str:sub(1, 1):gsub(\"%D\",\"\"):gsub(\"\
    %\",\"\"):sub(1,1):sub(-1,\"0\")\nend", "    local count = 0\n    for i=1,math.floor(math.log(num,2))\
    \ do\n        if num%2 == 0 then\n            count = count + 1\n        end\n\
    \        if num%2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return (count, count-1)\nend", "    local num_str = (tostring(num))\n   \
    \ local num_str = (string.gsub(num_str, \"%a*\", \"\"))\n    local num_str = (string.gsub(num_str,\
    \ \"%d+$\", \"\"))\n    local num_str = (string.gsub(num_str, \"%.%d+$\", \"\"\
    ))\n    local num_str = (string.gsub(num_str, \"%c-\", \"\"))\n    local num_str\
    \ = (string.gsub(num_str, \"%c\", \"\"))\n    local num_str = (string.gsub(num_str,\
    \ \"%d\", \"\"))", "    local even = 0, odd = 1\n    for _ in string.gmatch(tostring(num),\
    \ '([^.]+)') do\n        local n = tonumber(_)\n        if n % 2 == 0 then even\
    \ = even + 1 end\n        if n % 2 == 1 then odd = odd + 1 end\n    end\n    return\
    \ even, odd\nend", "  if num < 0 then\n    return (1, 0)\n  end", "    num = num:abs\n\
    \    local even = 1\n    local odd = 1\n    while num > 0 do\n        if num %\
    \ 2 == 0 then\n            even = even * 10 + num % 2\n            num = num /\
    \ 2\n        else\n            odd = odd * 10 + num % 2\n            num = num\
    \ / 2\n        end\n    end\n    return (even, odd)\nend", "\t-- base case: num\
    \ is even, return (0, 1) tuple\n\tif num % 2 == 0 then\n\t\treturn (0, 1)\n\t\
    end\n\t-- base case: num is odd, return (1, 0) tuple\n\treturn (1, 0)\nend", " \
    \ -- Return empty if number is zero or negative\n  if num == 0 or num < 0 then\n\
    \    return 0, 0\n  end", "\tlocal even = 0,\n\t\todd = 0;\n\tfor i = 1, #num\
    \ do\n\t\tif ((num % 10) % 2) == 0 then\n\t\t\teven = even + 1;\n\t\telse\n\t\t\
    \todd = odd + 1;\n\t\tend\n\tend\n\treturn (even, odd);\nend", "  local total\
    \ = 0\n  local count = 0\n  while num > 0 do\n    total = total + math.abs(num\
    \ % 10)\n    num = num / 10\n    count = count + 1\n  end\n  return (count, total\
    \ - math.abs(count))\nend", "  if num == 0 then return (1, 0) end\n  local odd_count\n\
    \  if num % 2 == 0 then\n    odd_count = 1\n  else\n    odd_count = 0\n  end\n\
    \  local count\n  local n = num\n  repeat\n    count = n / 10\n    odd_count =\
    \ odd_count + math.floor((n % 10)/2)\n    n = math.floor((n % 10)/2)\n  until\
    \ n == 0\n  return odd_count, count\nend", "  if num < 0 then\n    return (0,\
    \ 0)\n  else\n    local nDigits = math.floor(math.log(math.abs(num), 10)) + 1\n\
    \    local even = 0, odd = 0, i = 1, nDigits\n    while i <= nDigits do\n    \
    \  if i % 2 == 0 then\n        even = even * 10 + i\n      else\n        odd =\
    \ odd * 10 + i\n      end\n      i = i + 1\n    end\n    return (even, odd)\n\
    \  end\nend", "  local num1 = math._floor( math.abs(num) )\n  local remainder\
    \ = math.abs(num - num1)\n  if remainder == 0 then\n    return (0, 0)\n  end",
  "   local num_even = 1\n   local num_odd = 1\n   \n   for i = 1, num do\n      num_even\
    \ = math.floor( num / 10 )\n      num_odd = math.floor( num % 10 )\n   end\n \
    \  \n   return (num_even, num_odd)\nend\n</cell>\n<cell>", "  local even = math.floor(math.log10(num))\n\
    \  local odd = even - 1\n  return even, odd\nend", "    local even, odd = 1, 1\n\
    \    for i = 0, num-1 do\n        if num%2 == 0 then\n            even = even+1\n\
    \        else\n            odd = odd+1\n        end\n        num = num/2\n   \
    \ end\n    return even, odd\nend", "  local n = math.abs(num)\n  local even, odd\
    \ = 1, 0\n  while n > 0 do\n    even = even + n % 2\n    odd = odd + n % 2\n \
    \   n = math.floor(n / 10)\n  end\n  return even, odd\nend", "    -- Find out\
    \ the number of digits of num\n    local num_digits = math.floor(math.log(num\
    \ / 10) * 10)\n    -- If the number is negative, add 1\n    if num_digits > 0\
    \ then\n        num_digits = num_digits + 1\n    end\n    -- Divide the number\
    \ by 10 to extract the digits\n    local num_digits_div10 = num / 10\n    -- If\
    \ the number of digits is even, add one to the number of evens\n    if num_digits\
    \ % 2 == 0 then\n        num_digits = num_digits + 1\n    end\n    -- Return digits,\
    \ number of evens, number of odds\n    return num_digits, num_digits % 2, num_digits\
    \ % 2 + 1\nend", "  if num == 0 then return (1, 0) end\n  if num %2 == 0 then\
    \ return (1, 1) end\n  if num % 2 == 1 then return (0, 1) end\n  error(\"not an\
    \ odd number\");\nend", "  local ret = {}\n  local i = 1\n  while true do\n  \
    \  local remainder = math.floor((num / i) * 10)\n    if remainder >= 10 then\n\
    \      table.insert(ret, math.floor((num / i) * 10))\n    end\n    i = i + 1\n\
    \    if i == 10 then\n      break\n    end\n  end\n  return ret\nend", "  if num\
    \ < 0 then return nil end\n  local even, odd = 1, 0\n  while num > 0 do\n    local\
    \ digit = math.floor(num / 10)\n    even = even + digit\n    odd = even + odd\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend", "    local even,\
    \ odd = 0, 1\n    if num >= 0 then\n        while num > 0 do\n            even\
    \ = even + 1\n            num = math.floor(num / 10)\n        end\n        while\
    \ num > 0 do\n            odd = odd + 0\n            num = math.floor(num / 10)\n\
    \        end\n    end\n    return (even, odd)\nend", "  local even, odd = 1, 1\n\
    \  if num < 0 then\n    num = -num\n    even, odd = -1, 0\n  elseif num % 2 ==\
    \ 0 then\n    even = even + 1\n  else\n    odd = odd + 1\n  end\n  return even,\
    \ odd\nend", "    local even = 0\n    local odd = 0\n    local x = math.abs(num)\n\
    \    while x > 0 do\n        if x % 2 == 0 then\n            even = even+1\n \
    \       end\n        if x % 2 ~= 0 then\n            odd = odd+1\n        end\n\
    \        x = x / 2\n    end\n    return even, odd\nend", '  if num < 0 then return
    nil end', "  if num <= 0 then\n    return 0, 0\n  end\n  local even, odd = 1,\
    \ 0\n  while num ~= 0 do\n    even = even + math.floor(num / 10)\n    odd = odd\
    \ + math.floor((num % 10) / 10)\n    num = math.floor(num / 10)\n  end\n  return\
    \ even, odd\nend", "  if num < 0 then\n    return nil, \"Invalid Input: \" ..\
    \ tostring(num)\n  end\n  local evens, odds = 0, 0\n  -- Iterate over the digits\
    \ of the given number.\n  local digs = num:div(10):reverse()\n  -- Iterate over\
    \ every digit.\n  for i, dig do\n    -- If the digit is even, increment the evens\
    \ counter.\n    if dig:floor() == 0 then\n      evens = evens + 1\n    end\n \
    \   -- If the digit is odd, increment the odds counter.\n    if dig:floor() ==\
    \ 1 then\n      odds = odds + 1\n    end\n  end\n  return evens, odds\nend", " \
    \  -- Base Case\n   if num == 0 then\n      return (1, 0)\n   end\n   -- Get number\
    \ of digits in num\n   local num_digits = math.floor(math.log(abs(num))) + 1\n\
    \   -- Count the number of even and odd digits \n   local num_even = 0\n   local\
    \ num_odd = 0\n   for i = 1, num_digits do\n      if math.mod(num, i) == 0 then\n\
    \         num_even = num_even+1\n      elseif math.mod(num, i) == 1 then\n   \
    \      num_odd = num_odd+1\n      end\n   end\n   return (num_even, num_odd)\n\
    end", "\tnum = tostring(num)\n\tlocal num_digits = #num", "    local num_even\
    \ = 1\n    local num_odd = 0\n    if num < 0 then\n        return 0, 0\n    end\n\
    \    -- Loop until we hit the largest positive integer\n    while num > 0 do\n\
    \        if num % 2 == 0 then\n            num_even = num_even + 1\n        else\n\
    \            num_odd = num_odd + 1 -- The if statement is true if the number is\
    \ odd.\n        end\n        num = math.floor(num / 2)\n    end\n    -- Return\
    \ the answers\n    return num_even, num_odd\nend", "  local even = 0\n  local\
    \ odd = 0", "  local even, odd = 0, 1\n  while num > 0 do\n    even = even*10\
    \ + num%10\n    odd = odd*10 + math.floor(num/10)%10\n    num = num/10\n  end\n\
    \  return (even, odd)\nend", "    local evens, odds = 0, 1\n    while num > 0\
    \ do\n        if num % 2 == 0 then\n            evens = evens + 1\n          \
    \  num = math.floor(num / 2)\n        else\n            odds = odds + 1\n    \
    \        num = math.floor(num / 2)\n        end\n    end\n    return (evens, odds)\n\
    end", "  if num ~= nil then\n    local even, odd = 0, 0\n    for i = 1, math.floor(math.log(num,\
    \ 2)) do\n      local x = num / math.pow(10, i)\n      if x % 2 == 0 then\n  \
    \      even = even + 1\n      else\n        odd = odd + 1 -- This is wrong. Because\
    \ we cannot get the odd digits of a negative number \n      end\n    end\n   \
    \ return even, odd\n  end\nend", "\tlocal even, odd = 1, 1\n\tlocal num = math.abs(num)\n\
    \tif num < 0 then\n\t\treturn nil\n\tend\n\tlocal tmp = math.floor(num)\n\twhile\
    \ tmp ~= 0 do\n\t\teven = even + math.floor((num - tmp) / 2)\n\t\todd = odd +\
    \ math.floor((num - tmp) / 2)\n\t\ttmp = math.floor(num / 10)\n\tend\n\treturn\
    \ (even, odd)\nend", "    local num = math.abs(num)\n    local even, odd = 0,\
    \ 1\n    while num > 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        end\n        if num % 2 == 1 then\n            odd = odd + 1 \n\
    \        end\n        num = math.floor(num / 2)\n    end\n    return even, odd\n\
    end", "  -- assert(type(num) == \"number\")\n  -- assert(num >= 0)\n  -- assert(num\
    \ < 100)", "  if num <= 0 then\n    return nil\n  elseif num < 0 then\n    return\
    \ nil, nil\n  end", "   if num < 0 then return (0, 0) end\n   local even = 0\n\
    \   local odd = 0\n   local num_digits = 0\n   while num >= 10 do\n      even\
    \ = even+1\n      num_digits = num_digits + 1\n      num = math.floor(num / 10)\n\
    \   end\n   while num > 0 do\n      odd = odd+1\n      num_digits = num_digits\
    \ + 1\n      num = math.floor(num / 10)\n   end\n   return (even, odd, num_digits)\n\
    end", "  -- Write your code here.\n  return false, false\nend", "  local even,\
    \ odd = 0, 0\n  for i=1,#num do\n    local remain = math.mod(num, 10)\n    if\
    \ remain == 0 then\n      even = even+1\n    else\n      odd = odd+1\n    end\n\
    \    num = num / 10\n  end\n  return even, odd\nend", "  local count = 0\n  while\
    \ num > 0 do\n    num = math.floor(num / 10)\n    count = count + 1\n  end\n \
    \ if count == 0 then\n    return (1, 0)\n  end\n  if count == 1 then\n    return\
    \ (0, 1)\n  end\n  return (1, count)\nend", "  local even, odd = 0, 1\n  local\
    \ i\n  for i = 1, num do\n    -- When i = num, we reach the odd number.\n    if\
    \ num % i == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n  \
    \  end\n  end\n  return even, odd\nend", "  -- Based on https://stackoverflow.com/questions/27591269/how-can-i-determine-the-number-of-even-and-odd-digits-of-a-number-with-only-one-s\n\
    \  local oddDigits = {}\n  local evenDigits = {}", '    num = tostring(num)',
  "  local even = 0\n  local odd = 0\n  local num = tostring(num)", "    local result\
    \ = 0\n    local last_odd_count = 0\n    local last_even_count = 0\n    local\
    \ n = math.abs(num)\n    while n >= 1 do\n        -- if n is even, oddCount =\
    \ 0\n        local oddCount = n % 2\n        -- if n is odd, oddCount = 1\n  \
    \      last_even_count = last_even_count + oddCount\n        last_odd_count =\
    \ last_odd_count + oddCount\n        n = math.floor(n/2)\n    end\n    return\
    \ (last_even_count, last_odd_count)\nend", "  local count = 0\n  while num do\n\
    \    local last = math.floor(num / 10)\n    if last % 2 == 0 then\n      count\
    \ = count + 1\n    end\n    num = num - last * 10\n  end\n  return count, num\
    \ % 10\nend", "  return tonumber(string.format(\"%.2d:%.2d\", num, num))\nend",
  "  if num < 0 then return (1, 0) end\n  local odd, even = 1, 1\n  repeat\n    even\
    \ = even * 10 + num % 10\n    num = num / 10\n  until (num == 0)\n  return (odd,\
    \ even + 1)\nend", "  -- Base Case\n  if num == 0 then\n    return (0,0)\n  else\n\
    \    local even, odd = 1, 0\n    -- We count the even and odd digits seperately.\n\
    \    local digit\n    for digit in string.gmatch(tostring(num), '%d') do\n   \
    \   if string.byte(digit) ~= 0 then\n        even = even * 10 + string.byte(digit)\n\
    \      else\n        odd = odd + digit\n      end\n    end\n    return (even,\
    \ odd)\n  end\nend", "    local even, odd = 0, 1\n    while num > 0 do\n     \
    \   local remainder = math.floor(num / 10)\n        even = even * 10 + remainder\n\
    \        odd = odd*10 + remainder%10\n        num = math.floor(num / 10)\n   \
    \ end\n    return even, odd\nend", "    if num == 0 then\n        return 0, 0\n\
    \    end\n    local even, odd = 1, 0\n    for i = 1, math.floor(math.log(num +\
    \ math.pow(2, 31), 2)) do\n        local m = math.floor((num + math.pow(2, 31))\
    \ / math.pow(2, i))\n        if m % 2 == 1 then\n            even = even * 2 +\
    \ 1\n        else\n            odd = odd + 1 + math.floor((num + math.pow(2, 31))\
    \ / math.pow(2, i))\n        end\n    end\n    return even, odd\nend", "  -- Initialize\
    \ variables\n  local even, odd = 0, 1\n  -- If there is no number, return an error\
    \ message\n  if not num or not num.value then\n    return 'The input is not valid.'\n\
    \  else\n    -- If there is a number, calculate the number of even and odd digits,\
    \ and return the tuple\n    local num_digits = tonumber(os.date(\"*t\", os.time(num)))\n\
    \    if num_digits then\n      -- Calculate the number of digits\n      local\
    \ num_digits_reversed = math.floor((num_digits + 3) / 2)\n      -- Calculate the\
    \ number of even digits\n      even = math.floor((num_digits - num_digits_reversed)\
    \ / 2)\n      -- Calculate the number of odd digits\n      odd = num_digits_reversed\
    \ - even\n      return even, odd\n    end\n  end\nend", "  if num < 0 then\n \
    \   return nil, -1\n  end\n  local num_str = tostring(num)\n  local len = num_str:len()\n\
    \  local even = 1\n  local odd = 1\n  local idx = 1\n  for i = 1, len do\n   \
    \ if num_str:sub(i, i) == num_str:sub(i - 1, i) then\n      even = even + 1\n\
    \    else\n      odd = odd + 1 -- even counts even too\n    end\n    if even >\
    \ odd then\n      break\n    end\n    idx = idx + 1\n  end\n  return even, odd\n\
    end", "    if num == 0 then\n        return (0, 0)\n    end\n    local odd_count\
    \ = 0\n    local even_count = 0\n    while num > 0 do\n        if num % 2 == 1\
    \ then\n            even_count = even_count+1\n        else\n            odd_count\
    \ = odd_count+1\n        end\n        num = num/2 -- integer division\n    end\n\
    \    return (even_count, odd_count)\nend", "  return math.floor(math.log((math.abs(num))^(1\
    \ / 2)), 2)\nend", "  if num == 0 then\n    return (0, 0);\n  elseif num < 0 then\n\
    \    return (-1, -1);\n  else\n    local num_str = string.format('%g', num);\n\
    \    local num_str_split = string.split(num_str);\n    local odd = #num_str_split\
    \ - #num_str_split % 2;\n    local even = #num_str_split - odd;\n    return (even,\
    \ odd);\n  end\nend", "  local count = 0\n  local rest = num\n  while rest ~=\
    \ 0 do\n    local remainder = math.fmod(num, remainder)\n    if remainder == 0\
    \ then\n      count = count + 1\n      rest = math.fdiv(rest, 2)\n    else\n \
    \     count = count + 1\n    end\n  end\n  return count\nend", "\tassert(type(num)\
    \ == \"number\", \"argument 'num' must be a number\")", "  local even, odd = 1,\
    \ 0\n  while num > 0 do\n    even = math.floor(num / 10)\n    odd = even + odd\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend", "   if num <\
    \ 0 then\n      error(\"Invalid argument\", 2)\n   end", "  if num < 0 then\n\
    \    return 0, 0\n  end\n  local num_str = tostring(num)\n  local even, odd =\
    \ num_str:match('(%d*)%d*') -- ([num])*\n  even = even and tonumber(even) or 0\n\
    \  odd = odd and tonumber(odd) or 0\n  return even, odd\nend", "  local even,\
    \ odd = 0, 0\n  \n  -- loop until number is negative\n  while num > 0 do\n   \
    \ even = even + num % 2 -- number % 2 returns 1 if even otherwise 0.\n    odd\
    \ = odd + num / 10 -- number / 10 returns the digit.\n    num = math.floor(num\
    \ / 10) # floor divides by 10.\n  end\n  \n  return even, odd\nend", "  if num\
    \ == 0 then\n    return (0, 0)\n  elseif num < 0 then\n    return (-1, 1)\n  else\n\
    \    local even, odd = 0, 1\n    for i = 2, math.floor(math.log(num, 2) + 1),\
    \ 1 do\n      local tmp = num / i\n      if tmp == 0 or math.floor(tmp) == tmp\
    \ then\n        return (even, odd)\n      else\n        even = even * 10 + math.floor(tmp)\n\
    \      end\n      odd = odd * 10 + math.floor((tmp % 1))\n    end\n  end\nend",
  "   if num >= 0 then\n      local evens, odds = 1, 1\n      while num > 0 do\n \
    \        if num % 2 == 0 then\n            evens = evens + 1\n         else\n\
    \            odds = odds + 1\n         end\n         num = math.floor(num / 2)\n\
    \      end\n      return evens, odds\n   else\n      return 0, 1\n   end\nend",
  "  local ret = {}\n  local num_str = tonumber(num)\n  if num_str == nil then\n \
    \   return ret\n  end\n  local num_str = tostring(num_str)\n  local len = string.len(num_str)\n\
    \  local even = 1\n  local odd = 0\n  for idx = 1, len do\n    local digit = num_str:sub(idx,\
    \ idx)\n    if digit:sub(1, 1) == \"0\" then\n      even = even + 1\n    elseif\
    \ digit:sub(1, 1) == \"1\" then\n      odd = odd + 0\n    elseif digit:sub(1,\
    \ 1) == \"-1\" then\n      even = even - 1\n    else\n      return ret\n    end\n\
    \  end\n  ret[even] = even\n  ret[odd] = odd\n  return ret\nend", "    local even,\
    \ odd = 0, 1\n    for i = 1, math.floor(math.log(num, 2)) do\n        if num %\
    \ math.pow(10, i) == 0 then\n            even = even+1\n        else\n       \
    \     odd = odd+1\n        end\n    end\n    return even, odd\nend", "  if num\
    \ < 0 then\n    return ()\n  end", "\tlocal digits = math.floor(math.log(num)\
    \ / math.log(10))\n\tlocal odd = digits % 2\n\tlocal even = digits - odd\n\treturn\
    \ even, odd\nend", "    local even, odd = 0, 1\n    if num < 0 then\n        error(\"\
    not an integer.\")\n    elseif num == 0 then\n        return (0, num)\n    else\n\
    \        local i = 1\n        while i <= num do\n            if num % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n            num = num / 2\n            i = i + 1\n   \
    \     end\n    end\n    return even, odd\nend\n</code>\n<|/ a dscore=0 tags=lua\
    \ |>\n<| a dscore=0 |>\nYou can find the number of digits in the number using\
    \ math.tostring function in Lua. Using this you can find the number of digits\
    \ in each number. Also you can find whether a number has even or odd digits. In\
    \ the next function, you can get the digit and store it in a variable.\n<code>",
  "  local even, odd = 0, 0\n  for i = 1, #num  do\n    if num % 2 == 0 then\n   \
    \   even = even + 1\n    elseif num % 2 ~= 0 then\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend", "   local even, odd= 0, 1\n   for i =1,(math.sqrt(num))*2\
    \ do\n      if math.floor(num/i) == math.floor(num/i)\n      then even = even+1\n\
    \      elseif math.floor(num/i) == math.floor(num/i) + 1\n      then odd = odd+1\n\
    \      end\n   end\n   return even, odd\nend", "\tlocal num = math.floor(num)\n\
    \tif num < 0 then\n\t\treturn 0, 0\n\tend\n\t\n\tlocal even, odd = 1, 0\n\twhile\
    \ num > 0 do\n\t\tif num % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\t\
    odd = odd + num % 2\n\t\tend\n\t\t\n\t\tnum = num / 2\n\tend\n\treturn even, odd\n\
    end", "  local odd, even = 0, 0\n  local str_num = tostring(num)\n  str_num:gsub(\"\
    .\", function(x)\n    if x:sub(1, 1) == \"-\" then x = x:sub(2, 2) end\n    if\
    \ x:sub(1, 1) == \"0\" then even = even + 1 end\n    if x:sub(1, 1) == \"1\" then\
    \ odd = odd + 1 end\n  end)\n  return (even, odd)\nend", "  local even = 0 --\
    \ even\n  local odd = 0 -- odd\n  local digit_value = nil\n  if num > 0 then\n\
    \    digit_value = tonumber(string.format(\"%.d\", num))\n    if digit_value >\
    \ 0 then\n      if digit_value % 2 == 0 then\n        even = even + 1\n      else\n\
    \        odd = odd + 1 -- odd\n      end\n    end\n  end\n  return even, odd\n\
    end", "  if num < 0 then\n    return 0, 0\n  else\n    -- Dividing by 0 will result\
    \ in an error. Using a boolean instead of an error value will allow for\n    --\
    \ further optimizations.\n    local even, odd = false, false", "    local even,\
    \ odd = 1, 1\n    for i = 1, #num, 1 do\n        if num % i == 0 then\n      \
    \      if even % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 2\n            end\n        end\n    end\n    return\
    \ (even, odd)\nend", "  if num == 0 then return (1, 0) end\n  local ans = num\n\
    \  local n = 1\n  while num > 0 do\n    num = num / 10\n    n = n + 1\n  end\n\
    \  return (n, n - 1)\nend", "    num = tostring(num)\n    local num_digits = math.floor(math.log(num,10))\n\
    \    local even, odd = 1, 1\n    for _,v in ipairs(string.gmatch(string.sub(num,\
    \ num_digits+1), \"%d*$\")) do\n        if v ~= 0 then\n            even = even\
    \ * 10 + v\n        else\n            odd = odd * 10 + 1\n        end\n    end\n\
    \    return even, odd\nend", "    local num_str = tonumber(num:sub(1,-1))\n  \
    \  if num_str == 0 then\n        return 0, 0\n    end\n    local num_even, num_odd\
    \ = 0, 1\n    while num_str > 0 do\n        local remainder = num_str % 10\n \
    \       num_even = num_even * 10 + remainder\n        num_odd = num_odd * (10\
    \ - remainder)\n        num_str = num_str / 10\n    end\n    return num_even,\
    \ num_odd\nend", "  local even = 0\n  local odd = 0\n  for i = 1, num:len() do\n\
    \    local card = num:sub(i, i)\n    if card == 0 then\n      even = even + 1\n\
    \    elseif card % 2 == 1 then\n      even = even + 1\n    else\n      odd = odd\
    \ + card\n    end\n  end\n  return even, odd\nend", "  local sum = 0\n  local\
    \ i = 1\n  while i <= num do\n    local remainder = num % i\n    sum = sum + remainder\n\
    \    i = i + 1\n  end\n  if sum % 2 == 0 then\n    return 1, sum / 2\n  else\n\
    \    return 2, sum / 2\n  end\nend", "  local even = 1\n  local odd = 1\n  local\
    \ count = 0", "   if num < 0 then return end\n   if num < 100 then return (1,0)\
    \ end\n   local odd, even\n   for i = 2, 100 do\n      if num % i == 0 then\n\
    \         odd = odd + 1, even = even + 1\n      else\n         odd = 1, even =\
    \ 1\n      end\n   end\n   return (even, odd)\nend", "  if num < 0 then\n    return\
    \ (0, 0)\n  end\n  local nums = str:split(num)\n  local even = #nums[1]\n  local\
    \ odd  = #nums[#nums] - #nums[1]\n  return even, odd\nend", "  local even = 1\n\
    \  local odd = 0\n  local tmp = num\n  while tmp ~= 0 do\n    tmp = tmp % 10\n\
    \    if tmp % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd +\
    \ 1\n    end\n  end\n  return even, odd\nend", "  if num == 0 then\n    return\
    \ (0, 0)\n  end", "\tlocal numStr = tonumber(num * 100)\n\tlocal even = 0\n\t\
    local odd = 0\n\twhile numStr > 0 do\n\t\tlocal div = numStr % 10\n\t\tif div\
    \ == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + div\n\t\tend\n\
    \t\tnumStr = numStr / 10\n\tend\n\treturn even, odd\nend", "    local num = tostring(num)\n\
    \    local even, odd = 0,0\n    for i = 1, #num, 1 do\n        if string.sub(num,i,i)\
    \ ~= '-' then \n            even = even+1\n        elseif string.sub(num,i,i)\
    \ ~= '-' then\n            odd = odd+1\n        end\n    end\n    return even,\
    \ odd\nend", "  local n = 1\n  while n > 0 do\n    local a = math.mod(num, n)\n\
    \    local b = math.mod(num, 2 * n)\n    if a > 0 and b == 0 then\n      n = 2\
    \ * n\n    else\n      n = n + 1\n    end\n  end\n  return n, num % n\nend", " \
    \   local num_str = tostring(num)\n    local num_len = #num_str\n    local even_count\
    \ = 0\n    local odd_count = 0\n    for i = 1, num_len, 1 do\n        if num_str:sub(i,\
    \ i) == '0' then\n            even_count = even_count + 1\n        else\n    \
    \        odd_count = odd_count + 1\n        end\n    end\n    return (even_count,\
    \ odd_count)\nend", "  local even, odd = 1, 1\n  while num > 0 do\n    if num\
    \ & 1 == 1 then\n      even = even * 10 + num - 1\n      num = num / 2\n    else\n\
    \      odd = odd * 10 + num - 1\n      num = num / 2\n    end\n  end\n  return\
    \ even, odd\nend", "  if num == 0 then\n    return (0, 0)\n  else\n    local even,\
    \ odd = 1, 0\n    while num > 0 do\n      even = even + num % 2\n      num = math.floor(num\
    \ / 2)\n      odd = odd + num % 2\n      num = math.floor(num / 2)\n    end\n\
    \    return (even, odd)\n  end\nend", "  return math.floor(math.log10(num) + 1),\
    \ (math.floor(math.log10(num * 10) - math.floor(math.log10(num))) + 1)\nend",
  "    if num == 0 then\n        return 0, 0\n    end", "    local odd_count = 0\n\
    \    local even_count = 0\n    for i=1,math.floor(math.log10(num)) do\n      \
    \  if num % 10 == 0 then\n            even_count = even_count + 1\n        elseif\
    \ num % 10 == 1 then\n            odd_count = odd_count + 1\n        end\n   \
    \     num = math.floor(num / 10)\n    end\n    return (even_count, odd_count)\n\
    end", "    if num == 0 then return (num, num) end\n    local even, odd = 1, 1\n\
    \    for i = 1, num do\n        if ((num % 10) % 2) == 0 then even = even+1 else\
    \ even = even+2\n        else odd = odd+1 end\n    end\n    return even, odd\n\
    end", "\tlocal even = 0\n\tlocal odd = 0", "    local evens = 0\n    local odds\
    \ = 0", "    if num < 0 then return nil end\n    if num == 0 then return (1, 0)\
    \ end\n    local count = (num % 10) * (num % 10) > 0 or (num % 10) * (num % 10)\
    \ / 10\n    return (count + num > 0 and 1 or 0, count + num > 0 and 0 or 0)\n\
    end", "    if num < 0 then return end\n    local count = {}\n    for i = 1, 10\
    \ do\n        local value = math.floor(num / i)\n        count[value] = count[value]\
    \ or {}\n        table.insert(count[value], i)\n    end\n    return count\nend",
  "  local even = 0, odd = 0\n  \n  for i = 1, #num do\n    if num % i == 0 then\n\
    \      even = even + 1\n    else\n      odd = even + 1\n    end\n  end\n  \n \
    \ return even, odd\nend", "  if num >= 0 then\n    local even, odd = 0, 1\n  \
    \  repeat\n      even = even * 10 + num % 10\n      odd = odd*10 + math.floor(num/10)\n\
    \    until num == 0\n    return even, odd\n  end\nend", "  local sum = 0\n  for\
    \ i = 1, math.floor(math.log(num, 10)) do\n    local digit = math.floor(num /\
    \ math.pow(10, i))\n    if digit % 2 == 0 then\n      sum = sum + 1\n    elseif\
    \ digit % 2 == 1 then\n      sum = sum + 2\n    end\n  end\n  return sum, math.abs(num\
    \ - math.floor(num))\nend", "  num = tonumber(num)\n  if not num then\n    return\
    \ (num, num)\n  end", "    local even = 0\n    local odd = 0\n    while num ~=\
    \ 0 do\n        if num % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1 \n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend", "  if num < 0 then return nil end\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, math.floor(math.log(num, 2)) do\n  \
    \  local tmp = math.floor(num / math.pow(2, i)) % 2\n    if tmp == 1 then\n  \
    \    even = even + 1\n    else\n      odd = odd + 1 -- not even\n    end\n  end\n\
    \  return even, odd\nend", "  local even_count = 0\n  local odd_count = 0\n  local\
    \ temp = num\n  while temp do -- repeat until num becomes zero\n    if temp %\
    \ 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count =\
    \ odd_count + 1\n    end\n    temp = temp / 2 -- divide the number by 2\n  end\n\
    \  return (even_count, odd_count) -- return number of even and odd digits\nend",
  "  -- If num is even, the count is 0\n  local num_even = math.floor(num / 2)", " \
    \   local even, odd = 0, 1\n    for i = 1, #num, 2 do\n        if num[i] % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 0\n\
    \        end\n    end\n    return even, odd\nend", "    if num == 0 then\n   \
    \     return (1, 0)\n    end\n    local odd, even = 1, 0\n    local num_digits\
    \ = math.floor(math.log(num, 10))\n    local remainder, count = 1, num_digits/2\n\
    \    while count ~= 0 do\n        local digit = math.floor(num / pow10[count])\n\
    \        if digit % 2 == 1 then\n            even = even + 1\n        end\n  \
    \      if digit % 2 == 0 then\n            odd = odd + 1 \n        end\n     \
    \   remainder = num - (digit*pow10[count])\n        count = count - 1\n    end\n\
    \    return (odd, even)\nend", "  local even, odd = 0, 0\n  for i = 1, num do\n\
    \    local p = math.mod(i, 10)\n    if p == 0 then\n      even = even + 1\n  \
    \  else\n      odd = odd + 1 if p % 2 == 1 end\n    end\n  end\n  return even,\
    \ odd\nend", "    local count = {}\n    local n = 1\n    while num > 0 do\n  \
    \      if num % 2 == 0 then\n            count[n] = count[n] or 1\n          \
    \  n = n + 1\n        else\n            count[n] = count[n] or 2\n           \
    \ n = n - 1\n        end\n        num = num / 10\n    end\n    return count\n\
    end", "  local odd = 0\n  local even = 0\n  for i=0,num do\n    local remainder\
    \ = math.fmod(num,10)\n    if remainder == 0 then\n      if math.fmod(num,2) ==\
    \ 0 then\n        even = even+1\n      else\n        odd = odd+1\n      end\n\
    \    end\n    num = math.fdiv(num,10)\n  end\n  return even, odd\nend", "  local\
    \ even = 1\n  local odd = 0\n  for i = 1, num do\n    if i % 2 == 0 then\n   \
    \   even = even * 10 + i\n    else\n      odd = odd + i\n    end\n  end\n  return\
    \ even, odd\nend", "\tlocal even, odd = 0, 1\n\tfor i = 1, num do\n\t\tif num\
    \ % i == 0 then\n\t\t\teven = even + 1\n\t\telseif num % i ~= 0 then\n\t\t\todd\
    \ = odd + 1 \n\t\tend\n\tend\n\treturn even, odd\nend", "    local n1, n2 = 1,\
    \ 0\n    for i = 0, num-1 do\n        local digit = math.floor(num / 10)\n   \
    \     if digit % 2 == 0 then\n            n1 = n1 + 1\n        else\n        \
    \    n2 = n2 + 1\n        end\n        num = num - (math.floor(num / 10) * 10)\n\
    \    end\n    return (n1, n2)\nend", "    local even = 0 \n    local odd = 0\n\
    \    if num >= 0 then\n        do\n            even = even + 1 \n            local\
    \ remainder = num - math.floor(num)\n            odd = math.floor(odd) + 1 \n\
    \            num = math.floor(remainder)\n        end\n    end\n    return (even,\
    \ odd)\nend", "   local numDigits = math.floor(math.log(num, 10)) + 1\n   local\
    \ even_count = 0\n   local odd_count = 0\n   for i = 1, numDigits do\n      local\
    \ digit = math.floor(num / 10^i)\n      if digit % 2 == 0 then\n         even_count\
    \ = even_count + 1\n      elseif digit % 2 == 1 then\n         odd_count = odd_count\
    \ + 1\n      end\n   end\n   return even_count, odd_count\nend", "    local num_str\
    \ = tostring(num)\n    local even, odd = 0, 0\n    for i = 1, #num_str do\n  \
    \      if string.sub(num_str, i, i) == \"%2\" then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ (even, odd)\nend", "\tlocal even = 1\n\tlocal odd = 1\n\twhile num > 0 do\n\t\
    \teven = even + 1\n\t\todd = (odd + num % 2) / 2\n\t\tnum = num / 2\n\tend\n\t\
    return (even, odd)\nend", "  local even, odd = 0, 0\n  while num > 0 do\n    even\
    \ = even*10 + num%10\n    odd = odd*10 + num/10 -- integer division\n    num =\
    \ num/10 -- integer division\n  end\n  return even, odd\nend", "    local even\
    \ = 1\n    local odd = 0\n    for i = 1, num do\n        if num % 2 == 0 then\n\
    \            even = even+1\n        else\n            odd = odd+1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<text>\neven_odd_count_test()\n\
    Run the code cell below to test your solution.", "  num = tostring(num)\n  local\
    \ odd_count = 0\n  local even_count = 0\n  for i = 1,#num do\n    local current_digit\
    \ = tonumber(string.sub(num, i, i))\n    if current_digit == 0 then\n      if\
    \ odd_count > 0 then\n        even_count = even_count+1\n      end\n      odd_count\
    \ = 0\n    elseif current_digit == 1 then\n      if odd_count > 0 then\n     \
    \   odd_count = odd_count-1\n      end\n      even_count = even_count+1\n    else\n\
    \      if odd_count > 0 then\n        odd_count = odd_count+1\n      end\n   \
    \   if current_digit == 2 then\n        even_count = even_count+1\n      end\n\
    \    end\n  end\n  if odd_count > 0 then\n    even_count = even_count+1\n  end\n\
    \  return even_count, odd_count\nend", "  local even_count, odd_count = 0,  0\n\
    \  local i = 1\n  for x = 0, num do\n    local y = num % 10\n    if y ~= 0 then\n\
    \      odd_count = odd_count + 1\n    else\n      even_count = even_count + 1\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even_count, odd_count\n\
    end", "  -- base case: if the number is even, return (1, 0)\n  if num % 2 == 0\
    \ then\n    return (1, 0)\n  end", "  num = num + 0 -- converts num to an integer.\n\
    \  local even, odd\n  even = math.mod(num - 1, 2)\n  if even ~= 0 then\n    odd\
    \ = even + 1\n  end\n  even, odd = odd, even\n  return even, odd\nend", "  if\
    \ num == 0 then return (1, 0) end\n  local even, odd = 0, 0\n  while num > 0 do\n\
    \    if num % 2 == 0 then\n      even = even + 1\n    elseif num % 2 ~= 0 then\n\
    \      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ even, odd\nend", "    local num_str=tostring(num)\n    local evens=0\n    local\
    \ odds=0\n    local last_num_str=nil\n    -- count the number of digits in num_str\n\
    \    local num_digits=string.len(num_str)\n    -- loop through the digits\n  \
    \  for digit=num_digits-1:1\n        local num_str_digit=num_str:sub(digit)\n\
    \        if num_str_digit == \"0\" then\n            evens=evens+1\n        elseif\
    \ num_str_digit == \"1\" then\n            odds=odds+1\n        else\n       \
    \     -- not a number, so stop the loop\n            break\n        end\n    \
    \    if last_num_str ~= nil then\n            if num_str_digit ~= last_num_str\
    \ then\n                -- last digit changed, so this is a new digit\n      \
    \          evens=evens+1\n            else\n                -- last digit is the\
    \ same, so increment the number of evens\n                evens=evens+1\n    \
    \        end\n        end\n        last_num_str=num_str_digit\n    end\n    local\
    \ res={}\n    table.insert(res,evens)\n    table.insert(res,odds)\n    return\
    \ unpack(res)\nend", "  -- The first element in the returned tuple is the number\
    \ of even digits, and the second element is the number of odd digits\n  -- The\
    \ last clause is a guard clause, which is necessary because Lua does not allow\
    \ assignment in return statements. \n  local count, odd = 0, 0\n  while num >\
    \ 0 do\n    count = count + 1\n    num = math.floor(num / 10)\n  end\n  if count\
    \ % 2 == 0 then\n    odd = odd + count - 1\n  else\n    odd = odd + count\n  end\n\
    \  return count, odd\nend", "   -- We need this in order to return the correct\
    \ output even when the argument is passed as nil\n   if num == nil then return\
    \ (1, 1) end", "  local count = 0\n  local sum = 0\n  for i = 1, 9 do\n    if\
    \ num >= 0 then\n      if math.mod(num, i) == 0 then\n        count = count +\
    \ 1\n      else\n        count = count - 1\n      end\n    else\n      if math.fmod(num,\
    \ i) == 0 then\n        count = count + 1\n      else\n        count = count -\
    \ 1\n      end\n    end\n    sum = sum + math.fmod(num, i)\n    num = math.fmod(num,\
    \ i)\n  end\n  if num >= 0 then\n    count = count + 1\n  end\n  return count,\
    \ count\nend", "    if num < 0 then\n        return 0\n    end\n    local even\
    \ = 1\n    local odd = 1\n    if num > 0 then\n        while num > 0 do\n    \
    \        if num%2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1;\n            end\n            num = num/2\n  \
    \      end\n    end\n    return (even, odd)\nend", "\tlocal even_count = 0\n\t\
    local odd_count = 0\n\tfor _, _ in pairs(string.gmatch(tostring(num), '%d+'))\
    \ do\n\t\tlocal n = tonumber(_)\n\t\tif not n then\n\t\t\tbreak\n\t\tend\n\t\t\
    if n % 2 == 0 then\n\t\t\teven_count = even_count+1\n\t\telse\n\t\t\todd_count\
    \ = odd_count+1\n\t\tend\n\tend\n\treturn even_count, odd_count\nend", "    local\
    \ even, odd = 1, 1\n    while num > 0 do\n        even = math.floor(num/10)\n\
    \        odd = even + 1\n        num = num % 10\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=xeus-cling-cpp14>", "   local even, odd = 0, 1\n\
    \   while true do\n      local _, count = math.divmod(num, 10)\n      if count\
    \ == 0 then\n         return even, odd\n      else\n         even = even * 10\
    \ + count\n         odd = odd * 10 + 1 - count\n      end\n   end\nend", "  return\
    \ math.floor(math.log(num) / math.log(2)) + 1, math.ceil(math.log(num) / math.log(2))\
    \ - 1\nend", "  local even, odd = 0, 0\n  local count_num = 0\n  while num > 0\
    \ do\n    count_num = count_num * 10 + num % 10\n    num = num / 10\n    if num\
    \ == 0 then\n      even = even + 1\n      odd = odd + count_num / 2\n      count_num\
    \ = (count_num % 2) - 1\n    else\n      even = even + 1\n      odd = odd + count_num\
    \ + 1\n      count_num = 1\n    end\n  end\n  return even, odd\nend", "  num =\
    \ num + 0\n  if num < 0 then\n    return (1, 0)\n  elseif num > 0 then\n    local\
    \ n1 = 1\n    local n2 = 1\n    local n = num\n    while n > 0 do\n      local\
    \ m = n % 10\n      n = math.floor(n / 10)\n      if m == 0 then\n        n1 =\
    \ n1 + 1\n      elseif m == 1 then\n        n2 = n2 + 1\n      end\n    end\n\
    \    return (n1, n2)\n  end\nend", "  if num <= 0 then\n    return 0, 0\n  end",
  "  local even, odd = 1, 1\n  for i = 1, 10 do\n    local m = math.floor(num / i)\n\
    \    if m % 2 = 0 then\n      even = even * 10 + i\n    else\n      odd = odd\
    \ * 10 + i\n    end\n  end\n  return even, odd\nend", "  local count = 0\n  while\
    \ num > 0 do\n    count = count + 1 -- increment count for every even digit\n\
    \    num = math.floor(num / 10)\n  end\n  -- return 1 if count is odd\n  count\
    \ = count - 1 \n  if count % 2 == 1 then return 1, 1 else return 2, 1 end\nend",
  "    local even, odd = 0, 1\n    if num < 0 then\n        return even, odd\n   \
    \ else\n        while num > 0 do\n            if num % 2 == 0 then\n         \
    \       even = even + 1\n            else\n                odd = odd + 2\n   \
    \         end\n            num = math.floor(num / 10)\n        end\n    end\n\
    \    return even, odd\nend", "  num = math.floor(num)\n  local even = 0\n  local\
    \ odd = 0\n  while (num > 0) do\n    even = even * 10 + (num % 10)\n    odd =\
    \ (odd + 1) % 2\n    num = math.floor(num / 10)\n  end\n  return (even, odd)\n\
    end", "    local even, odd = 0;\n    for i = 1, math.ceil(math.log(num, 2)) do\n\
    \        if num % 2 == 0 then\n            even = even + 1;\n        end\n   \
    \     if num % 2 ~= 0 then\n            odd = odd + 1;\n        end\n        num\
    \ = math.floor(num / 10);\n    end\n    return even, odd;\nend", "    local even\
    \ = 1\n    local odd = 0", "  num = tonumber(num)\n  local even, odd = 0, 0\n\
    \  -- If num is 0, there will be no even and odd digit. Thus, return (0, 0).\n\
    \  if num == 0 then\n    return 0, 0\n  elseif num > 0 then\n    even, odd = even_odd_count(math.floor(num\
    \ / 2))\n    num, rem = math.modf(num)\n    even = even + 1\n  end\n  return even,\
    \ odd\nend", "  -- We want to make sure we don't go below 0 and above 10 since\
    \ those are odd and even.\n  -- For example 0 is the only even number so we don't\
    \ want to subtract it off since we end up getting a negative number.\n  -- We\
    \ also want to make sure we actually have a number to work with.\n  if num < 0\
    \ then return nil end\n  if num > 10 then return nil end", "  if num == 0 then\n\
    \    return (0, 0)\n  end", "\tlocal even_count = 0\n\tlocal odd_count = 0", " \
    \   if num <= 0 then\n        return (1, 0)\n    end", "  local evens, odds\n\
    \  -- Find even digits\n  evens, odds = 0, 1\n  while num > 0 do\n    evens =\
    \ evens * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  -- Find odd\
    \ digits\n  evens = evens * 10 + num % 10\n  odds = odds * 10 + num % 10\n  return\
    \ evens, odds\nend", "   local even, odd = 0, 0\n   if num < 0 then\n      return\
    \ even, odd\n   end\n   for i = 1, 10 do\n      local mod = (num % i)\n      if\
    \ mod == 0 then\n         even = even + 1\n      elseif mod == i then\n      \
    \   odd = odd + 1\n      end\n   end\n   return even, odd\nend", "  local even\
    \ = 0\n  local odd = 0\n  if num < 0 then\n    num = -num\n  end\n  -- num is\
    \ bigger than 0.\n  while num > 0 do\n    local remain = math.mod(num, 10)\n \
    \   -- num is still bigger than 0.\n    if remain == 0 then\n      even = even+1\n\
    \    else\n      odd = odd+1\n    end\n    num = math.trunc(num / 10)\n  end\n\
    \  return even, odd\nend", "  local odd = 0\n  local even = 1\n  while true do\n\
    \    local tmp = num % 10\n    num = math.floor(num / 10)\n    if tmp % 2 == 0\
    \ then\n      even = even * 10 + tmp\n    else\n      odd = odd*10 + tmp\n   \
    \ end\n    if num == 0 then\n      break\n    end\n  end\n  return even, odd\n\
    end", "  local even = 1\n  local odd = 1\n  while num > 0 do\n    if num & 1 ~=\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = num >> 1\n  end\n  return (even, odd)\nend", "    num = math.abs(num)\n  \
    \  local even = 1\n    local odd = 0\n    while num > 0 do\n        even = even\
    \ + math.floor((num / 2))\n        odd = odd + math.floor((num / 2))\n       \
    \ num = math.floor(num / 2)\n    end\n    return (even, odd)\nend", "   if num\
    \ == 0 then\n      return (1, 0)\n   else\n      local even, odd = 0, 1\n    \
    \  while num > 0 do\n         if num %2 ~= 0 then\n            even = even * 10\
    \ + num % 2 -- Odd Digits\n         else\n            odd = odd * 10 + num % 2\
    \ -- Even Digits\n         end\n         num = num / 2\n      end\n      return\
    \ (even, odd)\n   end\nend", "   local even = 0\n   local odd = 0\n   if num <\
    \ 0 then return nil end\n   if num == 0 then return nil end\n   if num == -1 then\
    \ return nil end\n   if num % 2 == 0 then\n      return num, nil\n   end\n   local\
    \ div = math.floor(math.abs(num) / 2)\n   for i = 1, div + 1 do\n      if num\
    \ % i == 0 then\n         even = even + 1\n      else\n         odd = odd + i\n\
    \      end\n   end\n   return even, odd\nend", "  local numDigits = math.floor(math.log(math.abs(num),\
    \ 10)) + 1;\n  -- If the number is negative, we return empty tuple\n  if num <\
    \ 0 then\n    return ()\n  end\n  local even = num / 10\n  local odd = (num -\
    \ even * 10) / 10\n  if even % 2 then\n    return even, odd\n  else\n    return\
    \ odd, odd\n  end\nend", '  if num < 0 then return nil end', "    local even =\
    \ 1\n    local odd = 1\n    while num > 0 do\n        even = even + 1 if num %\
    \ 2 == 0 end\n        odd = odd + 1 if num % 2 ~= 0 end\n        num = math.floor(num\
    \ / 2)\n    end\n    return (even, odd)\nend", "  local even = 0\n  local odd\
    \ = 0\n  -- count the digits of num\n  for i = 1, math.floor(math.log(math.abs(num),\
    \ 10)) + 1 do\n    local current_digit = math.floor(num / math.pow(10, i))\n \
    \   -- only increment the count if the number is even.\n    if current_digit %\
    \ 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1 -- increment\
    \ the count if the number is odd.\n    end\n  end\n  return even, odd\nend", " \
    \ -- If number is negative, return (0 , 0)\n  if num < 0 then\n    return (0 ,\
    \ 0)\n  end", "    local result = (0, 0)\n    for i = 1, num do\n        if num\
    \ % 2 == 0 then\n            num = num / 2\n        else\n            num = num\
    \ / 2 + 1\n        end\n        result = even_odd_count(num), result[1]\n    end\n\
    \    return result\nend", "  if num < 0 then\n    return (0,0)\n  end\n  if num\
    \ % 2 == 0 then\n    return (num / 2, 0)\n  end\n  return (num / 2 - 1, num %\
    \ 2)\nend", "    local even = 0\n    local odd = 0\n    for i=1, num do\n    \
    \    if i % 2 == 0 then\n            even = even + 1\n        end\n        if\
    \ i % 2 ~= 0 then\n            odd = odd + 1 \n        end\n    end\n    return\
    \ (even, odd)\nend", "  local even, odd = 0, 1\n  while num > 0 do\n    local\
    \ remainder = math.fmod(num, 10)\n    if remainder == 0 then even = even + 1 end\n\
    \    if remainder == 1 then odd = odd + 1 end\n    num = math.floor(num / 10)\n\
    \  end\n  return even, odd\nend", "  local even = math.floor(math.log10(num))\n\
    \  local odd = even + 1\n  return even, odd\nend", "    local even = nil\n   \
    \ local odd = nil", "\tlocal count = 0\n\tlocal isEven = 0\n\tlocal isOdd = 0",
  "    if num < 0 then\n        error(\"even_odd_count expects a non-negative number\"\
    )\n    end\n    local even, odd = 0, 1\n    while num > 0 do\n        even = even\
    \ + num % 10\n        odd = odd + num / 10 % 10\n        num = num / 10\n    end\n\
    \    return even, odd\nend", "    num = tonumber(num)\n    if num == 0 then\n\
    \        return 0, 0\n    end\n    local even = 0\n    local odd = 0\n    while\
    \ num ~= 0 do\n        local digit = num % 10\n        if digit == 0 then\n  \
    \          even = even + 1\n        else\n            odd = odd + digit\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end", "  local even, odd = 0, 0\n  local n = num"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
