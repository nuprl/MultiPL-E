name: HumanEval_69_search
language: lua
prompt: "-- You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n-- zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n-- The frequency of an integer is the number\
  \ of times it appears in the list.\n-- If no such a value exist, return -1.\n--\
  \ Examples:\n-- search([4, 1, 2, 2, 3, 1]) == 2\n-- search([1, 2, 2, 3, 3, 3, 4,\
  \ 4, 4]) == 3\n-- search([5, 5, 4, 4, 4]) == -1\nlocal function search(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n\
  \    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)\n    lu.assertEquals(candidate({4,\
  \ 1, 4, 1, 4, 4}), 4)\n    lu.assertEquals(candidate({3, 3}), -1)\n    lu.assertEquals(candidate({8,\
  \ 8, 8, 8, 8, 8, 8, 8}), 8)\n    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)\n\
  \    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), 1)\n    lu.assertEquals(candidate({3, 2, 8, 2}), 2)\n   \
  \ lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)\n    lu.assertEquals(candidate({8,\
  \ 8, 3, 6, 5, 6, 4}), -1)\n    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1,\
  \ 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)\n    lu.assertEquals(candidate({1,\
  \ 9, 10, 1, 3}), 1)\n    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)\n    lu.assertEquals(candidate({1}),\
  \ 1)\n    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)\n    lu.assertEquals(candidate({2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)\n    lu.assertEquals(candidate({1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)\n    lu.assertEquals(candidate({9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), 4)\n    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)\n    lu.assertEquals(candidate({9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)\n    lu.assertEquals(candidate({5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)\n    lu.assertEquals(candidate({10}),\
  \ -1)\n    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
  \ 2)\n    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)\n \
  \   lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6}), 1)\n    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #lst == 0 then\n    return -1\n  end\n  local largest, count =\
    \ 0, 1\n  for i = 1, #lst do\n    if lst[i] == largest then\n      count = count\
    \ + 1\n      if count > largest then\n        largest = count\n      end\n   \
    \ else\n      if count > largest then\n        largest = count\n      end\n  \
    \    count = 0\n    end\n  end\n  return largest\nend", "\t-- write your code\
    \ in here\n\tlocal index = 0;\n\tlocal freq = #lst;\n\twhile index < #lst and\
    \ freq >= lst[index] do\n\t\tindex = index+1;\n\tend\n\tif index == #lst then\n\
    \t\treturn -1\n\telse\n\t\treturn lst[index]\n\tend\nend", "  local lst = lst\
    \ or {}\n  local greatest = 0\n  local frequency = {}\n  for i = 1, #lst do\n\
    \    if frequency[i] == nil then\n      frequency[i] = 1\n    else\n      frequency[i]\
    \ = frequency[i] + 1\n    end\n    if frequency[i] > frequency then\n      frequency\
    \ = frequency\n      greatest = i\n    end\n  end\n  return greatest ~= nil and\
    \ greatest or -1\nend", "  -- Use a hash to count frequency of integers and find\
    \ the minimum frequency which \n  -- has value greater than 0\n  local h = {}\n\
    \  for i = 1, #lst do\n    if h[lst[i]] == nil then\n      h[lst[i]] = 1\n   \
    \ else\n      h[lst[i]] = h[lst[i]] + 1\n    end\n  end\n  -- If no element has\
    \ frequency greater than or equal to value of any element of \n  -- input, return\
    \ -1\n  if #h == 0 then\n    return -1\n  end\n  -- If number of elements larger\
    \ than 0 is equal to number of elements equal to \n  -- number of elements in\
    \ input list then return -1\n  if #h == #lst then\n    return -1\n  end\n  --\
    \ Iterate through hash from end element to 1 and decrement all values by 1\n \
    \ for i = #h - 1, -1, -1 do\n    if h[lst[i]] >= h[lst[#lst]] then\n      return\
    \ lst[i]\n    end\n  end\n  return nil\nend", "\tlocal max_cnt = 0\n\tlocal max_elem\
    \ = nil", "  local ans, freq = lst[1], 1\n  for i=2,#lst do\n    if lst[i]>0 then\n\
    \      freq = freq+1\n      ans = lst[i] if freq > ans then ans end\n    end\n\
    \  end\n  return ans\nend", "  for _, v in pairs(lst) do\n    if v < 0 then\n\
    \      return -1\n    end\n  end\n  local freq = {}\n  for _, v in pairs(lst)\
    \ do\n    freq[v] = freq[v] + 1 or 1\n  end\n  local max = -1\n  for k, v in pairs(freq)\
    \ do\n    if v > max then\n      max = v\n    end\n  end\n  return max\nend",
  "\tlocal freq = {}\n\tfor _, v in ipairs(lst) do\n\t\tfreq[v] = freq[v] + 1 or 1\n\
    \tend\n\tfor _, v in ipairs(lst) do\n\t\tif freq[v] > 1 then return v end\n\t\
    end\n\treturn -1\nend", "  local max = 0\n  for _, v in ipairs(lst) do\n    max\
    \ = math.max(max, v)\n  end\n  return max\nend\n</cell>\n<code language=julia-1.0>",
  "\t-- Base case\n\tif lst[1] == 0 then\n\t\treturn -1\n\tend\n\t\n\t-- Create dictionary\
    \ to hold frequencies\n\tlocal freqs = {}\n\t\n\t-- Iterate through lst to count\
    \ frequencies\n\tfor i,v in ipairs(lst) do\n\t\tif not freqs[v] then\n\t\t\tfreqs[v]\
    \ = 0\n\t\tend\n\t\tfreqs[v] = freqs[v] + 1\n\tend\n\t\n\t-- Iterate through freqs\
    \ to find largest\n\tfor k,v in pairs(freqs) do\n\t\tif freqs[k] > v then\n\t\t\
    \treturn k\n\t\tend\n\tend\n\t\n\treturn -1\nend", "  if lst[1] == nil then\n\
    \    return -1\n  end", "   if #lst == 0 then\n      return -1\n   end\n   if\
    \ lst[1] == 0 then\n      return 0\n   end\n   local cur = 0\n   local max_freq\
    \ = #lst\n   for i = 1, #lst do\n      if lst[i] > 0 then\n         cur = cur\
    \ + lst[i]\n      elseif lst[i] == 0 then\n         cur = cur + lst[i + 1]\n \
    \     else\n         return -1\n      end\n      if cur > max_freq then\n    \
    \     max_freq = cur\n      end\n   end\n   return max_freq\nend", "    local\
    \ greatest = 0\n    local freq = 0\n    for i=1,#lst do \n        if lst[i] ==\
    \ 1 then\n            freq = freq+1\n        elseif freq >= lst[i] then\n    \
    \        greatest = lst[i]\n        end\n    end\n    return greatest\nend", "\t\
    for index, item in ipairs(lst) do\n\t\tlocal count = lst:count(item)\n\t\tif count\
    \ >= item then\n\t\t\treturn index\n\t\tend\n\tend\n\treturn -1\nend", "\tfor\
    \ i, v in ipairs(lst) do\n\t\tif v > 0 then\n\t\t\tlocal freq = #lst:ipairs(lst):gsub(\"\
    :*\", v) \n\t\t\tif freq >= v then \n\t\t\t\treturn v \n\t\t\tend\n\t\tend\n\t\
    end\n\treturn -1\nend", "  local max_count = 0\n  local max_value = nil\n  for\
    \ i = 1, #lst do\n    local count = #lst\n    if count > max_count then\n    \
    \  max_count = count\n      max_value = i\n    end\n  end\n  return max_value\n\
    end", "    local max_freq = lst[1]\n    for i=1,#lst do\n        if lst[i] > max_freq\
    \ then\n            max_freq = lst[i]\n        elseif lst[i] == max_freq then\n\
    \            max_freq = max_freq + 1\n        end\n    end\n    if max_freq >=\
    \ #lst then return -1 end\n    return max_freq\nend", "\tlocal freq = {}\n\tfor\
    \ i = 1,#lst do freq[lst[i]] = freq[lst[i]]+1 end\n\tlocal maxv = -1\n\tfor k\
    \ in pairs(freq) do\n\t\tif maxv == -1 or freq[k] > freq[maxv] then\n\t\t\tmaxv\
    \ = k\n\t\tend\n\tend\n\tif maxv == -1 then return -1 end\n\treturn maxv\nend",
  "    for i = 1, #lst do\n        if lst[i] == lst[i-1] + 1 then return lst[i-1]\
    \ end\n    end\n    return -1\nend", "\tlocal n = #lst\n\tif n == 0 then\n\t\t\
    return -1\n\tend\n\tlocal largest = lst[1]\n\tfor i=1, n do\n\t\tif lst[i] > largest\
    \ then\n\t\t\tlargest = lst[i]\n\t\tend\n\tend\n\treturn largest\nend", "   local\
    \ max = 0 -- Initialize max\n   local i = 0\n   \n   -- Iterate over list and\
    \ find maximum\n   for _,v in ipairs(lst) do\n      i = i + 1\n      if v > max\
    \ then\n         max = v\n      end\n   end\n   \n   if i > max then\n      return\
    \ -1\n   else\n      return max\n   end\nend", "  local maxFreq = -1\n  local\
    \ maxNum = -1\n  for _, v in ipairs(lst) do\n    if v > 0 then\n      local freq\
    \ = #lst[v]\n      if freq > maxFreq then\n        maxNum = v\n        maxFreq\
    \ = freq\n      end\n    end\n  end\n  if maxNum < 0 then\n    return -1\n  end\n\
    \  return maxNum\nend", "  if #lst == 0 then\n    return -1\n  else\n    local\
    \ index = 1\n    while index < #lst do\n      if lst[index] >= lst[index-1] then\n\
    \        index = index + 1\n      else\n        return lst[index]\n      end\n\
    \    end\n    return -1\n  end\nend\nreturn search", "\tfor _,v in ipairs(lst)\
    \ do\n\t\tlocal max = 0\n\t\tfor i,x in ipairs(lst) do\n\t\t\tif x > 0 and x ==\
    \ v then\n\t\t\t\tmax = i\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif max ~= nil\
    \ then\n\t\t\treturn v\n\t\tend\n\tend\n\treturn -1\nend", "    if not lst:isnumber()\
    \ then return -1 end\n    for i = 1, #lst do\n        if lst[i] == lst[i-1] then\n\
    \            if lst[i] >= lst[i-1] then\n                return lst[i-1]\n   \
    \         end\n        end\n    end\n    return -1\nend", "    local maxIndex\
    \ = #lst\n    local maxFrequency = -1\n    for index, item in pairs(lst) do\n\
    \        if item > 0 then\n            local frequency = getFrequency(lst, item)\n\
    \            if frequency > maxFrequency then\n                maxIndex = index\n\
    \                maxFrequency = frequency\n            end\n        end\n    end\n\
    \    if maxFrequency >= #lst then\n        return -1\n    end\n    return maxIndex\n\
    end", "    local max = -1\n    local freq = 0\n    local i = 1\n    local n =\
    \ #lst\n    while i <= n do\n        if lst[i] == 0 then\n            if max <\
    \ 0 then\n                return nil\n            end\n            freq = freq\
    \ + 1\n            if freq > max then\n                max = freq\n          \
    \  end\n            i = i + 1\n        else\n            freq = freq + lst[i]\n\
    \            i = i + 1\n        end\n    end\n    return max\nend\n</code>\n<|/\
    \ a tags=lua,algorithm,search |>\n<| c |>\nThe question is about finding the first\
    \ index, not the last index. `search(lst, 3)` is 3 when it should actually be\
    \ 4.\n<|/ c |>\n<| c |>\nMy bad, I missed the requirement in the comments. Will\
    \ update the answer\n<|/ c |>\n<| c |>\nThe question was about finding the first\
    \ index. Not last index. The answer you posted finds the last index (-1)\n<|/\
    \ c |>\n<| c |>\nYeah, this solution assumes a sorted list for the sake of simplicity.\
    \ But the OP never said anything about that. My solution just assumes that the\
    \ list is sorted, and the \"real\" problem is searching in the sorted list. Also,\
    \ my solution is written in `Lua`\n<|/ c |>\n<| c |>\nI assumed Lua's arrays are\
    \ sorted by default. Your solution is definitely more elegant.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "  if lst[1] ~= lst[2] then\n    return -1\n  else\n \
    \   return lst[2]\n  end\nend", "    local i = 1\n    while i <= #lst do\n   \
    \     local found = false\n        for j = 1, #lst do\n            if lst[i] ==\
    \ lst[j] then\n                found = true\n                break\n         \
    \   end\n        end\n        if not found then\n            return i\n      \
    \  end\n        i=i+1\n    end\n    return -1\nend\n</cell>\n<cell>\nassert(search([4,\
    \ 1, 2, 2, 3, 1]) == 2)\nassert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3)\nassert(search([5,\
    \ 5, 4, 4, 4]) == -1)\n</cell>\n<text>\nPart 2\nThe second part of the puzzle\
    \ is more interesting. The puzzle starts by asking \"What are the three most popular\
    \ items in the world of men?\" It then asks \"What are all the possible ways of\
    \ making three of the most popular items? In other words, what are the possible\
    \ groupings of three most popular items in the world of men?\" It then asks \"\
    What are the three most popular items in the world of women?\" The answer to the\
    \ first question is exactly the answer to the second question. The answer to the\
    \ second question is all the possible ways of making three of the most popular\
    \ items in the world of women. Let's call these groupings \u201Cthe items\u201D\
    \ (i.e., a grouping consists of three items). The answer to the third question\
    \ is the grouping of all three items in the world of men. \nHere's a table of\
    \ the possible groupings of three popular items in the world of men:", "    local\
    \ max = 0\n    for _, v in ipairs(lst) do\n        if v > 0 then\n           \
    \ max = v\n        end\n    end\n    if max > 0 then\n        return max\n   \
    \ else\n        return -1\n    end\nend", "\tlst = lst or {}\n\tlocal max_count\
    \ = 0\n\tlocal max_index = nil", "  if lst[1] == 0 then\n    return -1\n  end\n\
    \  local i = 2\n  local max = lst[1]\n  while i <= #lst and lst[i] <= max do\n\
    \    if lst[i] > max then\n      max = lst[i]\n    end\n    i = i + 1\n  end\n\
    \  return max\nend", "  local freq = {}\n  for i = 1, #lst do\n    freq[lst[i]]\
    \ = freq[lst[i]] + 1 -- count all occurrences starting from 1\n  end\n  \n  for\
    \ i = 1, #freq do\n    if freq[i] > freq[lst[i - 1]] then -- check if the frequency\
    \ is greater than the previous one\n      return i\n    end\n  end\n  return -1\n\
    end", "   for _,v in pairs(lst) do\n      if v > 0 then\n         return v\n \
    \     end\n   end\n   return -1\nend", "  local freq = {}\n  for i = 1, #lst do\n\
    \    freq[lst[i]] = freq[lst[i]] + 1 or 1\n  end\n  local result = #freq - 1 --\
    \ if there are no items with a frequency >= #lst, result will have a negative\
    \ value\n  if result > 0 then\n    result\n  else\n    return -1\n  end\nend",
  "  local max = 1\n  local pos = 1\n  local freq = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == max then\n      freq = freq + 1\n    elseif lst[i] > max then\n  \
    \    max = lst[i]\n      pos = i\n    end\n  end\n  if freq == #lst and pos ==\
    \ #lst and max ~= 0 then\n    return max\n  end\n  return -1\nend", "   for i\
    \ = 1, #lst do\n      if lst[i] >= lst[i - 1] and lst[i] >= 0 then\n         return\
    \ lst[i]\n      else\n         return -1\n      end\n   end\n   return -1\nend",
  "    if not lst or #lst == 0 then\n        return -1\n    end\n    if lst[1] > 0\
    \ then\n        return lst[1]\n    end\n    local index = 2\n    local frequency\
    \ = 1\n    while index < #lst and frequency <= lst[index] do\n        index =\
    \ index + 1\n        frequency = frequency + 1\n    end\n    if frequency > lst[index]\
    \ then\n        return -1\n    end\n    return index - 1\nend", "    for i,v in\
    \ ipairs(lst) do\n        if v >= 0 then\n            return v\n        end\n\
    \    end\n    return -1\nend", "  -- Base case\n  if #lst==0 then return -1 end\n\
    \  -- Search and keep track of frequency of element appearing after current position\n\
    \  local cur = lst[#lst]\n  local freq = 1\n  for i=#lst,1,-1 do\n    freq = freq*#lst+1\
    \ -- Get freq. of current ele in list\n    if cur<lst[i] then return i end\n \
    \ end\n  return -1 -- No such element exists\nend", "    if #lst > 1 then\n  \
    \      local index = -1\n        local freq = lst[1]\n        for i = 2, #lst\
    \ do\n            if lst[i] >= freq then\n                index = i\n        \
    \        freq = lst[i]\n            end\n        end\n        return index\n \
    \   else\n        return -1\n    end\nend", "  local n = lst[1]\n  local freq\
    \ = {}\n  for i=2,#lst do\n    if lst[i] ~= n then\n      freq[lst[i]] = freq[lst[i]]\
    \ + 1\n    end\n  end\n  if #freq >= n then return n else return -1 end\nend",
  "\tlocal max_index = 1\n\tlocal max_freq = 1\n\tfor i = 1,#lst do\n\t\tlocal freq\
    \ = lst:count(i)\n\t\tif freq > max_freq then\n\t\t\tmax_index = i\n\t\t\tmax_freq\
    \ = freq\n\t\tend\n\tend\n\treturn max_index\nend", "\t-- Write your code here\n\
    \t\n\tlocal last_val = lst[1]\n\tlocal max_freq = 1\n\tfor i = 2,#lst do\n\t\t\
    if lst[i] ~= last_val then\n\t\t\tif max_freq < i then\n\t\t\t\treturn -1\n\t\t\
    \tend\n\t\tend\n\t\tlast_val = lst[i]\n\t\tmax_freq = max_freq + 1\n\tend\n\t\
    if max_freq > #lst then\n\t\treturn -1\n\tend\n\treturn max_freq\nend", "  local\
    \ max_element = nil\n  local max_element = lst[#lst] -- 0th element is max elem",
  "\t-- Base case\n\tif #lst <= 0 then return -1 end\n\tlocal max = 0\n\tlocal i =\
    \ 1 -- The first element should be the largest\n\tlocal freq = 1\n\twhile i <=\
    \ #lst do \n\t\tif lst[i] > max and lst[i] >= lst[i-1] then\n\t\t\tmax = lst[i]\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn max \nend", "\tlocal largest = -1\n\t\
    local frequency = 0\n\tfor i,v in ipairs(lst) do\n\t\tif frequency < v then\n\t\
    \t\tlargest = i\n\t\t\tfrequency = v\n\t\tend\n\tend\n\treturn largest or -1\n\
    end", "    local result = 0\n    for i = 1, #lst do\n        if lst[i] >= 0 then\n\
    \            result = lst[i] \n            break\n        end\n    end\n    return\
    \ result\nend", "  local max = 0\n  local maxCount = nil\n  for i = 1, #lst do\n\
    \    if maxCount == nil or lst[i] == maxCount then \n      max = lst[i]\n    \
    \  maxCount = 1\n    elseif lst[i] == max then\n      maxCount = maxCount + 1\n\
    \    else\n      max = lst[i]\n      maxCount = 1\n    end\n  end\n  return max\n\
    end", "  -- Base Case: No integer is greater than zero, or the frequency of the\
    \ integer is less than or equal to zero.\n  if lst[1] <= 0 then return -1 end\n\
    \  -- Use a hash table to keep track of frequency.\n  local freq = {}\n  -- Find\
    \ the frequency of the element in the list.\n  for i = 1, #lst do\n    -- Check\
    \ if the current integer has already been counted.\n    if freq[lst[i]] == nil\
    \ then\n      freq[lst[i]] = 0\n    end\n    -- Increment the frequency of the\
    \ element in the list.\n    freq[lst[i]] = freq[lst[i]] + 1\n  end\n  -- For every\
    \ element, check if the frequency is greater than or equal to the frequency of\
    \ the element in the list.\n  for i = 1, #lst do\n    -- If the current frequency\
    \ of the element is not greater than or equal to the frequency of the element\
    \ in the list, then return the greater integer.\n    if freq[lst[i]] > #lst or\
    \ freq[lst[i]] <= 0 then return i end\n  end\nend", "    local max_count = 0\n\
    \    local max_number = nil\n    for _,num in pairs(lst) do\n        if num ~=\
    \ nil then\n            local count = max_count + 1\n            if count > max_count\
    \ then\n                max_count = count\n                max_number = num\n\
    \            end\n        end\n    end\n    return max_number\nend", "    if lst[1]\
    \ < 0 then\n        return -1\n    end\n    local val = lst[1]\n    local frequency\
    \ = 1\n    for i = 2, #lst do\n        if lst[i] == val then\n            frequency\
    \ = frequency + 1\n        elseif lst[i] > val then\n            frequency = frequency\
    \ - 1\n        else\n            return val\n        end\n    end\n    if frequency\
    \ == 0 then\n        return val\n    end\n    return -1\nend", "  local n = 1\n\
    \  local s = lst[1]\n  while s and n <= #lst do\n    if s >= n then\n      s =\
    \ s - n\n    else\n      n = n + 1 \n    end\n  end\n  return n >= #lst and -1\
    \ or n\nend", "   assert(lst~=nil)\n   assert(#lst>0)\n   local freq={}\n   local\
    \ res=-1\n   for i=1,#lst do\n      if freq[lst[i]]==nil then freq[lst[i]]=0\n\
    \      else freq[lst[i]]+=1\n      end\n      if freq[lst[i]]>=#lst then res=lst[i]\n\
    \      end\n   end\n   return res\nend", "\tlocal frequency = 0\n\tfor i = 1,\
    \ #lst do\n\t\tif lst[i] == lst[i] then\n\t\t\tfrequency = frequency + 1\n\t\t\
    end\n\tend\n\tif frequency > #lst then return -1 end\n\treturn lst[#lst]\nend",
  "\tlocal freq = {}\n\tfor i,v in pairs(lst) do freq[v] = freq[v] or 1 end\n\tfor\
    \ k,v in pairs(freq) do\n\t\tif freq[k] == 0 then return -1 end\n\t\tif freq[k]\
    \ > v then return k end\n\tend\n\treturn -1\nend", "  local freq = {}\n  for i,v\
    \ in ipairs(lst) do freq[v] = freq[v] + 1 end\n  local max,v = nil,nil\n  for\
    \ k,v in pairs(freq) do\n    if v > max then max = v , v = k end\n  end\n  return\
    \ v\nend", "\tlocal max\n\t\n\t-- initialize max\n\t\n\t-- go through each element\
    \ in lst\n\t\n\t-- if element > 0, then update max\n\t\n\t-- return max\nend",
  "  local maxVal, maxPos = 0, -1\n  for _,x in ipairs(lst) do\n    if x == maxVal\
    \ then\n      if maxPos == -1 or x > lst[maxPos] then\n        maxVal = x\n  \
    \      maxPos = x\n      end\n    elseif x == maxVal then\n      if x > lst[maxPos]\
    \ then\n        maxVal = x\n        maxPos = x\n      end\n    end\n  end\n  return\
    \ maxPos\nend", "  -- Find first value greater than zero\n  local result = nil\n\
    \  for i = 1, #lst do\n    if lst[i] > 0 then\n      result = i\n      break\n\
    \    end\n  end", "\tlocal result = 0\n\tfor i,v in pairs(lst) do\n\t\tif v>0\
    \ then\n\t\t\tresult = v\n\t\t\tbreak\n\t\tend\n\tend\n\tif result==0 then\n\t\
    \treturn -1\n\tend\n\treturn result\nend", "    lst = lst[1]\n    if lst[1] >\
    \ 0 then\n        return lst[1]\n    end\n    for i = 2, #lst do\n        if lst[i]\
    \ >= lst[i-1] then\n            return lst[i]\n        end\n    end\n    return\
    \ -1\nend", "    local freq = {}\n    local max = 0\n    for i = 1,#lst do\n \
    \       if freq[lst[i]] == nil then\n            freq[lst[i]] = 1\n        else\n\
    \            freq[lst[i]] = freq[lst[i]] + 1\n        end\n        if freq[lst[i]]\
    \ > max then\n            max = freq[lst[i]]\n        end\n    end\n    return\
    \ max\nend\nreturn search\nend\n</code>\n<|/ a dscore=0 tags=arrays,lua |>\n<|\
    \ a tags=arrays,lua dscore=0 |>\n<code>", "  local freq = {}\n  local n = #lst\n\
    \  for i = 1, n do freq[lst[i]] = freq[lst[i]] + 1 end\n  -- The element with\
    \ the greatest frequency\n  local max_freq = max(freq:keys(), function(x) return\
    \ freq[x] end)\n  -- The element with the greatest frequency\n  if max_freq ==\
    \ freq[max_freq] then\n    return max_freq\n  else\n    return -1\n  end\nend",
  "    local lst = lst or {}\n    \n    if lst[1] == nil then\n        return -1\n\
    \    end", "    if #lst == 0 then\n        return -1\n    end\n    local max =\
    \ nil\n    for i=1, #lst do\n        if max and lst[i] > max then\n          \
    \  return nil\n        end\n        max = max or lst[i]\n    end\n    return max\n\
    end", "    local counter = {}\n    local max = 0\n    for i=1,#lst do\n      \
    \  if counter[lst[i]] ~= nil then\n            counter[lst[i]] = counter[lst[i]]\
    \ + 1\n        else\n            counter[lst[i]] = 1\n        end\n        if\
    \ counter[lst[i]] > max then\n            max = counter[lst[i]]\n        end\n\
    \    end\n    return max\nend", "    local maxIndex = -1\n    local maxValue =\
    \ 0\n    for index, value in pairs(lst) do\n        if value > maxValue then\n\
    \            maxValue = value\n            maxIndex = index\n        end\n   \
    \ end\n    return maxValue if maxIndex == -1 then return -1 else return maxIndex\
    \ end\nend", "   if #lst == 0 then\n      return -1\n   end\n   local max = lst[1]\n\
    \   for i = 2, #lst do\n      local freq = lst[i]\n      if freq > max then\n\
    \         max = freq\n      end\n   end\n   return max\nend", "   for i,v in ipairs(lst)\
    \ do\n      if v > 0 then\n         return i\n      end\n   end\n   return -1\n\
    end", "\tlocal max = 0\n\tlocal max = lst[1]\n\tfor i = 2, #lst do\n\t\tif lst[i]\
    \ > max then\n\t\t\tmax = lst[i]\n\t\tend\n\tend\n\treturn max\nend", "   for\
    \ i = 1, #lst do\n      if lst[i] > 0 then\n         return lst[i]\n      elseif\
    \ i == 1 then\n         return -1\n      else\n         return search(lst[1..i])\
    \ -- recursion here\n      end\n   end\nend", "   -- base case empty list\n  \
    \ if #lst < 1 then return -1 end\n   -- base case freq equal to self\n   if lst[#lst]\
    \ == lst[#lst] then return lst[#lst] end\n   -- base case freq greater than self\n\
    \   if #lst == 1 then return -1 end\n   -- get current value\n   local val = lst[#lst]\n\
    \   -- get position of current value\n   local pos = #lst\n   -- count occurences\n\
    \   local count = 0\n   -- loop through list\n   for i=1,#lst-1 do\n      if lst[i]\
    \ == val then\n         count = count + 1\n         -- update pos\n         pos\
    \ = pos-1\n      elseif lst[i] > val then\n         -- update pos\n         pos\
    \ = pos-1\n         -- update count\n         count = count\n      else\n    \
    \     return val\n      end\n   end\n   -- return result\n   return val if count\
    \ > 0 else\n         -1\n   end\nend", "  local best = -1\n  local bestCount =\
    \ 0\n  for i, v in ipairs(lst) do\n    bestCount = bestCount or 0\n    if v >\
    \ best then \n      best = v\n    end\n    bestCount = bestCount + v\n  end\n\
    \  if bestCount == 0 then return -1 end \n  return best\nend", "\tlocal greatest\
    \ = 0\n\tlocal frequency = 0\n\t\n\ttable.sort(lst)\n\tfor i, item in ipairs(lst)\
    \ do\n\t\tfrequency = frequency + 1\n\t\tif item == greatest then\n\t\t\tbreak\n\
    \t\tend\n\t\tif item > 0 then\n\t\t\tfrequency = frequency - 1\n\t\tend\n\t\t\
    if frequency >= 0 then\n\t\t\tgreatest = item\n\t\tend\n\tend\n\tif frequency\
    \ < 0 then\n\t\tgreatest = -1\n\tend\n\treturn greatest\nend", "    local maxVal,\
    \ maxCount\n    for i = 2, #lst do\n        if lst[i] > maxVal or maxVal == nil\
    \ then\n            maxVal = lst[i]\n            maxCount = 1\n        elseif\
    \ lst[i] == maxVal then\n            maxCount = maxCount + 1\n        end\n  \
    \  end\n    if maxCount >= #lst then\n        return maxVal\n    else\n      \
    \  return -1\n    end\nend", "    local max_element = 0\n    local count = 0\n\
    \    for _, value in ipairs(lst) do\n        if value > max_element then\n   \
    \         max_element = value\n            count = count\n        elseif value\
    \ == max_element and count >= value then\n            count = count + 1\n    \
    \    elseif value == 0 then\n            return -1\n        end\n    end\n   \
    \ return max_element\nend", "  local cnt={}\n  local max=-1\n  for i in lst\n\
    \  do\n    cnt[i]=cnt[i]+1\n  end\n  for i in pairs(cnt) do\n    if cnt[i] > max\
    \ then\n      max=cnt[i]\n    end\n  end\n  -- return -1 if no such number\n \
    \ return max==-1 and -1 or max\nend", "    local max = 0\n    for i=1, #lst do\n\
    \        if lst[i] > 0 and lst[i] > max then\n            max = lst[i]\n     \
    \   end\n    end\n    return max if max >= 0 end\n    return -1\nend", "   if\
    \ #lst == 0 then\n      return -1\n   end\n   local val = 0\n   local freq = {}\n\
    \   local i = 1\n   while i ~= #lst do\n      if freq[lst[i]] == nil then\n  \
    \       freq[lst[i]] = i\n      else\n         val = freq[lst[i]]\n         if\
    \ i < #lst then\n            freq[lst[i]] = nil\n         end\n         return\
    \ val\n      end\n      i = i + 1\n   end\n   if #freq == 0 then\n      return\
    \ -1\n   end\nend", "   \n   local lst = setmetatable(lst,{__index={}})\n   if\
    \ lst[1] < 1 then\n      return -1\n   end\n   local max = 0\n   \n   for i =\
    \ 2, #lst do\n      if lst[i] ~= lst[i-1] then\n         max = i\n      else\n\
    \         max = max and max\n      end\n   end\n   return max and max\nend", " \
    \   local largest = lst[1]\n    for i = 2, #lst do\n        if lst[i] > largest\
    \ then\n            largest = lst[i]\n        end\n    end\n    return largest\n\
    end", "  local max = 0\n  local maxval = 0\n  \n  for i, v in ipairs(lst) do\n\
    \    if v >= 0 then\n      max = v\n      maxval = v\n    elseif max > 0 then\n\
    \      if maxval ~= 0 then\n        if maxval > max-1 then\n          maxval =\
    \ -1\n        end\n      end\n      max = v\n    end\n  end\n  return maxval\n\
    end", "  if lst == nil then return -1 end\n  local max = 0\n  local maxCount =\
    \ 0\n  for i = 1,#lst,1 do\n    local value = lst[i]\n    local count = #lst:sub(1,i)\n\
    \    if value > 0 then\n      max = value\n      maxCount = count\n    end\n \
    \ end\n  if maxCount == 0 then return -1 end\n  return max\nend", "\tlocal result\
    \ = -1\n\tlocal i = 0\n\tfor _,v in ipairs(lst) do\n\t\tif result < 0 then\n\t\
    \t\tresult = v\n\t\telseif v > result then\n\t\t\tresult = v\n\t\tend\n\t\ti =\
    \ i + 1\n\tend\n\tif result == -1 then\n\t\tprint('no such value')\n\telse\n\t\
    \tprint(result)\n\tend\n\treturn result\nend", "  if #lst==1 then\n    return\
    \ lst[1]\n  end\n  if lst[1]<0 then\n    return -1\n  end\n  local i=1\n  while\
    \ i<=#lst do\n    if lst[i]==lst[1] then\n      return lst[1]\n    end\n    i=i+1\n\
    \  end\nend", "  for _,v in ipairs(lst) do\n    v = v[1]\n    if v >= 0 then\n\
    \      return v\n    end\n  end\n  return -1\nend", "  local max = 0\n  local\
    \ freq = 1\n  for i,v in ipairs(lst) do\n    if v > 0 then\n      local temp_freq\
    \ = freq\n      freq = v\n      if freq > max then max = freq end\n      if temp_freq\
    \ > freq then temp_freq = freq end\n    end\n  end\n  if max > 0 then\n    local\
    \ i = #lst\n    for i = #lst, 1, -1 do\n      local freq = lst[i]\n      if freq\
    \ > max and temp_freq > freq then \n        max = freq\n      end\n      if temp_freq\
    \ > freq then temp_freq = freq end\n    end\n  end\n  return max\nend", "\tlocal\
    \ freq = {}\n\tlocal max = 0 \n\tfor i, v in ipairs(lst) do\n\t\tif not freq[v]\
    \ then\n\t\t\tfreq[v] = 0 \n\t\tend\n\t\tfreq[v] = freq[v] + 1\n\t\tif freq[v]\
    \ > max then\n\t\t\tmax = freq[v] \n\t\tend\n\tend\n\treturn max\nend\nprint(search([4,\
    \ 1, 2, 2, 3, 1]))\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5,\
    \ 5, 4, 4, 4]))", "    local result = -1\n    for i = 2, #lst do\n        if lst[i]\
    \ > 0 and lst[i] >= result[#result] then \n            result = lst[i]\n     \
    \   end\n    end\n    return result\nend", "\tlocal i = 0\n\twhile i < #lst and\
    \ lst[i] > 0 do\n\t\ti = i + 1\n\tend", "   local counts = {}\n   for _, v in\
    \ ipairs(lst) do\n      counts[v] = counts[v] or 0\n      counts[v] = counts[v]\
    \ + 1\n   end\n   for _, v in pairs(counts) do\n      if not v or counts[v] <\
    \ 2 then\n         return -1\n      end\n   end\n   return lst[#lst]\nend", "\t\
    lst = lst or {}\n\tlocal max = 1\n\tlocal maxIndex = nil\n\tfor i,v in ipairs(lst)\
    \ do\n\t\tlocal freq = v[1]\n\t\tif freq > max then\n\t\t\tmax = freq\n\t\t\t\
    maxIndex = i\n\t\tend\n\tend\n\tif maxIndex and maxIndex < #lst+1 then\n\t\treturn\
    \ maxIndex\n\telse\n\t\treturn -1\n\tend\nend", "  local i = 0\n  local j = #lst\n\
    \  while i < j do\n    if lst[i] == 0 then\n      return -1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  \n  while i <= #lst and lst[i] <= 0 do\n    i\
    \ = i + 1\n  end\n  \n  return i\nend", "\tlocal max_val = lst[1]\n\tlocal max_freq\
    \ = 1\n\tfor _, v in ipairs(lst) do\n\t\tlocal freq = table.remove(lst, v)\n\t\
    \tlocal v2 = max_val\n\t\tmax_val = v1\n\t\tmax_freq = freq\n\tend\n\treturn max_val\n\
    end", "   if lst == nil then\n      return -1\n   end\n   local freq = {}\n  \
    \ for i = 1, #lst do\n      local v = lst[i]\n      if not freq[v] then\n    \
    \     freq[v] = 1\n      else\n         freq[v] = freq[v] + 1\n      end\n   end\n\
    \   local ret = 0\n   for k,v in pairs(freq) do\n      if v > 0 then\n       \
    \  ret = k\n         break\n      end\n   end\n   return ret\nend", "  local freq\
    \ = {}\n  for _, v in pairs(lst) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n\
    \  local ret = 0\n  for _, v in pairs(freq) do\n    if freq[v] > 0 then\n    \
    \  ret = v\n    end\n  end\n  return ret \nend", "\tassert(lst~=nil)\n\tfor i\
    \ = 1,#lst do \n\t\tlocal cnt = 0 \n\t\tfor j = 1, #lst do \n\t\t\tif lst[j] ==\
    \ i then\n\t\t\t\tcnt = cnt + 1 \n\t\t\tend \n\t\tend \n\t\tif cnt >= #lst then\
    \ return i \n\t\tend \n\tend \n\treturn -1 \nend", "   local max = -1\n   local\
    \ frequency = {}\n   for i, v in ipairs(lst) do\n      frequency[v] = frequency[v]\
    \ or 1\n      if frequency[v] > max then\n         max = frequency[v]\n      elseif\
    \ frequency[v] >= frequency[i] then\n         max = -1\n      end\n   end\n  \
    \ return max\nend", "    local count = { }\n    for i = 1, #lst do\n        count[lst[i]]\
    \ = count[lst[i]] + 1 or 1\n        if count[lst[i]] > count[i] then return i\
    \ end\n    end\n    return -1\nend", "\tlocal max = 0\n\tlocal freq = 0\n\tfor\
    \ i=1,#lst do\n\t\tfreq = freq + 1\n\t\tif lst[i]>0 then\n\t\t\tif lst[i] == max\
    \ then\n\t\t\t\tlocal index = i\n\t\t\t\twhile freq > 1 do\n\t\t\t\t\tindex =\
    \ index + 1\n\t\t\t\t\tfreq = freq - 1\n\t\t\t\tend\n\t\t\t\tmax = lst[index]\n\
    \t\t\tend\n\t\t\tmax = lst[i]\n\t\tend\n\tend\n\tif max==0 then\n\t\treturn -1\n\
    \tend\n\treturn max\nend", "    local max_val = -1\n    local max_freq = 0\n \
    \   for i = 1, #lst do\n        if lst[i] == 0 then\n            break\n     \
    \   end\n        max_val = max(max_val, lst[i])\n        max_freq = max_freq +\
    \ 1\n    end\n    if max_freq > max_val then\n        return -1\n    end\n   \
    \ return max_val\nend", "\t-- If the list is empty, then return -1\n\tif not lst\
    \ then\n\t\treturn -1\n\tend", "\tif lst[1] then \n\t\tlocal v = lst[1]\n\t\t\
    local freq = lst[2]\n\t\tfor i = 2, #lst do\n\t\t\tlocal tv, tf = lst[i], lst[i]\n\
    \t\t\tif tv > v then\n\t\t\t\tv = tv\n\t\t\t\tfreq = tf\n\t\t\tend\n\t\tend\n\t\
    \treturn v\n\telse\n\t\treturn -1\n\tend\nend", "   -- Count the frequency of\
    \ each element\n   local freq = {}\n   for _, elem in ipairs(lst) do\n      freq[elem]\
    \ = freq[elem] + 1 or 1\n   end", "  for i = 1, #lst do\n    if lst[i] > 0 then\n\
    \      if freq[lst[i]] > 0 then\n        return lst[i]\n      else\n        freq[lst[i]]\
    \ = 1\n      end\n    end\n  end\n  return -1\nend", "    local max = 0 -- index\
    \ of first occurrence of largest value\n    for i = 1, #lst do\n        if lst[i]\
    \ == lst[max] and i ~= max then\n            max = i\n        elseif lst[i] >\
    \ 0 then\n            max = i\n        end\n    end\n    return max and lst[max]\
    \ or -1\nend\n</cell>\n<cell>", "\tlocal res = lst[1]\n\tlocal cnt = 1\n\tfor\
    \ i,v in ipairs(lst) do\n\t\tif v > res then res = v; cnt = 1 end\n\t\tcnt = cnt\
    \ + 1\n\tend\n\tif cnt == 0 then return -1 end\n\treturn res\nend", "    local\
    \ n = #lst\n    local max = -1\n    local cur = 0\n    for i=1,n do\n        cur\
    \ = lst[i]\n        if cur > max then\n            max = cur\n        end\n  \
    \  end\n    return max\nend", "    local freq = {}\n    for _, v in ipairs(lst)\
    \ do\n        freq[v] = freq[v] or 1\n    end", "  local cnt = 0\n  for _, val\
    \ in pairs(lst) do \n    if val == 0 then break end\n    cnt = cnt + 1\n  end\n\
    \  if cnt > 0 then\n    return cnt\n  else\n    return -1\n  end\nend", "  for\
    \ i = 1, #lst do if lst[i] == lst[i-1] then return i end end\n  return -1\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert search([1, 4, 1, 2, 2, 3, 1]) == 2\n\
    @assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n@assert search([5, 5, 4, 4,\
    \ 4]) == -1\n</cell>\n<text>\n13.4 Sorting\n13.5. Search and sort\nImplement a\
    \ function that returns the index of an element in a sorted list. The list must\
    \ be sorted in ascending order. \nThe list elements are integers in increasing\
    \ order.\nIf no such element exists, return -1.\nExamples:\nsearch([1, 5, 2, 4,\
    \ 3]) == -1\nsearch([5, 2, 1, 4, 3]) == 1\nsearch([5, 2, 1, 4, 4]) == -1\nsearch([4,\
    \ 1, 2, 2, 3, 1]) == 2\nsearch([4, 1, 2, 2, 3, 1]) == 2", "    local max = 0 \n\
    \    local freq = {}\n    for i, v in pairs(lst) do freq[v] = i end\n    for i,\
    \ v in pairs(lst) do max = max or v end\n    for k, v in pairs(freq) do if v >=\
    \ max then return k end end\n    return -1\nend", "\tlocal count = 0\n\tfor _,\
    \ v in ipairs(lst) do\n\t\tif v > 0 then\n\t\t\tif count < v then\n\t\t\t\tcount\
    \ = v\n\t\t\tend\n\t\tend\n\tend\n\tif count == 0 then\n\t\treturn -1\n\tend\n\
    \treturn count\nend", "    return lst[1] or -1\nend", "   assert(lst)\n   local\
    \ maxValue = 0\n   local maxCount = 0\n   for i = 1,#lst do\n      if lst[i] ==\
    \ i then\n         maxValue = i\n         maxCount = 1\n      else\n         local\
    \ newCount = maxCount + 1\n         if newCount > maxCount then \n           \
    \ -- update maxCount if current newCount is greater than maxCount\n          \
    \  maxCount = newCount\n         else\n            -- update maxCount if current\
    \ newCount is not greater than maxCount\n            maxCount = maxCount\n   \
    \      end\n      end\n   end\n   return maxValue -- return the value found\n\
    end", "    local frequency = {}\n    for _, el in ipairs(lst) do\n        frequency[el]\
    \ = frequency[el] + 1 or 1\n    end\n    for key, val in pairs(frequency) do\n\
    \        if val >= lst[1] then\n            return key\n        end\n    end\n\
    \    return -1\nend", "   if #lst == 0 then return -1\n   local val = lst[1]\n\
    \   for i = 2, #lst do \n      if lst[i] > val then\n         val = lst[i]\n \
    \     end\n   end\n   return val\nend\n</cell>\n<cell>", "    for _, v in ipairs(lst)\
    \ do\n        if v ~= 1 then\n            return v\n        end\n    end\n   \
    \ return -1\nend", "    local max = 0\n    local result = 0\n    for i=1,#lst\
    \ do\n        if lst[i] == 1 then\n            max = lst[i]\n            result\
    \ = i\n        end\n    end\n    return result\nend", "\tlocal i, max = -1, -1\n\
    \tfor i in lst:gmatch(\"(.-):*\") do \n\t\tmax = max == -1 or max > tonumber(i)\
    \ then max : tonumber(i)\n\tend\n\treturn max\nend", "   if #lst == 0 then return\
    \ -1 end\n   if #lst == 1 then return lst[1] end\n   local min = lst[1]\n   for\
    \ i = 2, #lst do\n      if lst[i] < min then\n         min = lst[i]\n      end\n\
    \   end\n   return min\nend", "    if #lst == 0 then return -1 end\n    local\
    \ result = 1\n    for i = 1, #lst do\n        if lst[i] == result then\n     \
    \       result = result + 1\n        else\n            return result\n       \
    \ end\n    end\n    return -1\nend", "  for i = 2, #lst do\n    if lst[i] == lst[i-1]\
    \ then return i end\n  end\n  return -1\nend", "    local max_freq = 0\n    local\
    \ max_val = nil\n    for i = 1, #lst do\n        if lst[i] == lst[#lst] then\n\
    \            table.insert(lst,lst[i])\n            lst[i] = nil\n            lst[#lst+1]\
    \ = nil\n        else\n            local freq = #lst[i] - #lst[i-1] + 1\n    \
    \        if freq > max_freq then\n                max_freq = freq\n          \
    \      max_val = lst[i-1]\n            end\n        end\n    end\n    if max_freq\
    \ == 0 then\n        return -1\n    end\n    return max_freq, max_val\nend", " \
    \   local max = 0\n    local freq = 0\n    for _, _ in pairs(lst) do\n       \
    \ local n = lst[_]\n        freq = freq + n\n        if freq > max then\n    \
    \        max = freq\n        end\n    end\n    if freq >= max then\n        return\
    \ -1\n    end\n    return max\nend", "  -- TODO: Write your code here.\n  local\
    \ freq = {}\n  for i,v in ipairs(lst) do\n    freq[v] = freq[v] + 1 or 1\n  end\n\
    \  \n  return nil\nend\nprint(search([])) \nprint(search([4, 1, 2, 2, 3, 1]))\
    \ \nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) \nprint(search([5, 5, 4, 4, 4]))\
    \ \nprint(search([0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4]), -1) \nprint(search([9, 9, 9, 9, 9, 9], 9)) \nprint(search([9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ", "  if #lst == 0 then\n    return -1\n\
    \  end\n  \n  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n  end", "    if lst[1] == nil then\n\
    \        return -1\n    end\n    if lst[1] <= 0 then\n        return -1\n    end\n\
    \    local freq = {}\n    local max = 0\n    for i = 2, #lst do\n        freq[lst[i]]\
    \ = freq[lst[i]] + 1\n        if freq[lst[i]] > max then\n            max = freq[lst[i]]\n\
    \        end\n    end\n    return max\nend", "\tif lst[1] == nil then return -1\
    \ else return 1 end\n\tlocal max_num = lst[1][1]\n\tlocal max_freq = 1\n\tlocal\
    \ max_idx = 1\n\t\n\tfor idx = 2, #lst do\n\t\tif lst[idx][1] >= max_num then\n\
    \t\t\tmax_idx = idx\n\t\t\tmax_num = lst[idx][1]\n\t\tend\n\t\tlocal cur_val =\
    \ lst[idx][1]\n\t\tlocal cur_freq = lst[idx][2]\n\t\tif cur_freq > max_freq then\n\
    \t\t\tmax_idx = idx\n\t\t\tmax_freq = cur_freq\n\t\tend\n\tend\n\treturn max_num\n\
    end", "  local max = -1\n  local max_count = 0\n  for i = 1, #lst do\n    local\
    \ current_count = lst:count(lst[i])\n    if current_count > max_count and lst[i]\
    \ > 0 then\n      max = lst[i]\n      max_count = current_count\n    end\n  end\n\
    \  return max\nend", "    local freq = {}\n    for i = 1, #lst do\n        if\
    \ freq[lst[i]] == nil then\n            freq[lst[i]] = i\n        end\n    end\n\
    \    \n    if #freq > 0 and #freq >= #lst then\n        return freq[lst[1]]\n\
    \    else\n        return -1\n    end\nend", "    local m\n    for i = 1, #lst\
    \ do\n        m = m or lst[i]\n        if m == 0 then\n            return i\n\
    \        end\n    end\n    return -1\nend", "\tif lst == nil then\n\t\treturn\
    \ -1\n\tend\n\tlocal maxVal = lst[1]\n\tlocal maxFreq = lst[1]\n\t\n\tlst:sort()\n\
    \tfor i = 2, #lst do \n\t\tif lst[i] == maxVal then\n\t\t\tmaxFreq = maxFreq +\
    \ 1\n\t\telseif lst[i] == maxVal and maxFreq > i then\n\t\t\treturn -1\n\t\telse\n\
    \t\t\tmaxVal = lst[i]\n\t\t\tmaxFreq = lst[i]\n\t\tend\n\tend\n\t\n\treturn maxVal\n\
    end", "  for i = 2, #lst-1 do\n    if lst[i] == lst[i-1] then\n      if i < #lst-1\
    \ then\n        return lst[i-1]\n      else\n        return -1\n      end\n  \
    \  end\n  end\nend", "  local maxVal = lst[1]\n  local count = 0\n  for i = 2,\
    \ #lst do \n    if lst[i] > 0 then\n      if lst[i] > maxVal then\n        maxVal\
    \ = lst[i]\n      end\n      count = count + 1\n    end\n  end\n  if count >=\
    \ #lst then return maxVal else return -1 end\nend", "    local i, count\n    count\
    \ = -1\n    for i = 1, #lst do\n        if lst[i] == 1 then\n            if count\
    \ == -1 or count > lst[i] then\n                count = lst[i]\n            end\n\
    \        end\n    end\n    return count\nend", "\tlocal max = 0\n\tlocal cnt =\
    \ 0\n\tfor i = 1, #lst do\n\t\tlocal cur = lst[i]\n\t\tif cur >= 0 then\n\t\t\t\
    cnt = cnt + 1\n\t\t\tif cnt > max then\n\t\t\t\tmax = cur\n\t\t\tend\n\t\tend\n\
    \tend\n\tif cnt == 0 then\n\t\treturn -1\n\tend\n\treturn max\nend", "  if #lst\
    \ == 0 then\n    return -1\n  end\n  local max = 1\n  local index = 1\n  while\
    \ index <= #lst do\n    if lst[index] ~= max then\n      index = index + 1\n \
    \     max = lst[index]\n    else\n      if lst[index] > max then\n        max\
    \ = lst[index]\n      end\n    end\n  end\n  return max\nend", "    local max\
    \ = 0 \n    local freq = 0\n    for i = 1, #lst do\n        local val = lst[i]\n\
    \        if val > 0 then\n            freq = freq + 1\n            if val > max\
    \ then\n                max = val\n            end\n        end\n    end\n   \
    \ if freq >= max then\n        return -1\n    end\n    return max\nend", "   \n\
    \   local largest = lst[1]\n   local frequency = lst[1]\n   \n   for i = 2,#lst\
    \ do\n      if lst[i] >= largest and frequency >= lst[i] then\n         frequency\
    \ = frequency+1\n         largest = lst[i]\n      else\n         frequency = frequency-1\n\
    \      end\n   end\n   \n   if largest > 0 then return largest\n             \
    \            else return -1 end\nend", "   if lst == nil then return -1 end\n\
    \   local freq = {}\n   for i = 1,#lst do\n      freq[lst[i]] = freq[lst[i]] +\
    \ 1 or 1\n   end\n   return table.max(freq)\nend", "  return lst:reduce((function(freq,\
    \ elem)\n    return elem > 0 and elem >= freq and elem or -1\n  end)(0, 0))\n\
    end", "  return lst[1]\nend", "  for _,x in ipairs(lst) do\n    if x==0 then return\
    \ x end\n    local y=x-1\n    local fx=lst[x]\n    for i=0,fx-1 do\n      if not\
    \ lst[y] or lst[y]<=x then return -1\n      y=y-1\n    end\n  end\nend", "\tlst\
    \ = lst or {}\n\tif not lst then\n\t\treturn nil\n\tend\n\tlocal max = 0\n\tlocal\
    \ max = -1\n\tlocal maxcount = 0\n\tfor _, v in ipairs(lst) do\n\t\tlocal count\
    \ = lst:find(function(el)\n\t\t\treturn el > 0 and el == v\n\t\tend) or 0\n\t\t\
    if count >= max then\n\t\t\tmax = count\n\t\t\tmaxcount = count\n\t\tend\n\tend\n\
    \treturn max\nend", "  local i = 1\n  local n = #lst\n  while i < n do\n    if\
    \ lst[i] == 0 then \n      return -1\n    end\n    if lst[i] > 0 then\n      i\
    \ = i + lst[i]\n    end\n    i = i + 1\n  end\n  \n  return i\nend", "  return\
    \ lst[#lst] or -1\nend", "  local i, j = 0, 0\n  while i < #lst do\n    j = j\
    \ + 1\n    if lst[i] == lst[j] then\n      i = i + 1\n      j = j + 1\n    end\n\
    \  end\n  if i == #lst then\n    return -1\n  else\n    return lst[#lst]\n  end\n\
    end", "   -- Find the index of the first appearance of any number in the list\n\
    \   local i, max_count = 1, #lst\n   for i = 1, max_count do \n      if lst[i]\
    \ ~= lst[i-1] then\n         return i\n      end\n   end\n   return -1\nend",
  "    for _, val in ipairs(lst) do\n        if val > 0 then\n            return val\n\
    \        end\n    end\n    return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert search([1]) == -1\n@assert search([1]) == -1\n@assert search([1, 2]) ==\
    \ 1\n@assert search([2, 3]) == 2\n@assert search([3, 1, 2]) == 3\n@assert search([2,\
    \ 5]) == -1\n@assert search([3, 4, 3, 3, 4, 3, 3, 4, 3, 4]) == 4\n@assert search([3,\
    \ 5, 4, 4, 4]) == -1\n</cell>\n<code language=julia-1.5>\n# 3\u3064\u306E\u914D\
    \u5217\u3092\u4E0E\u3048\u305F\u3068\u304D\u306E\u7D2F\u7A4F\u306E\u51FA\u529B\
    \n# \u300C1\u300D\u3068\u300C2\u300D\u306E\u9593\u306E\u30013\u3064\u306E\u7D2F\
    \u7A4F\u3092\u6C42\u3081\u308B", "    local largest = lst[1]\n    local frequency\
    \ = lst[2]\n    for i=3,#lst do\n        if lst[i] > largest then\n          \
    \  largest = lst[i]\n        end\n        if lst[i] >= largest and frequency >=\
    \ lst[i] then\n            frequency = frequency - lst[i]\n        end\n    end\n\
    \    return largest if frequency > 0 then return largest else return -1 end\n\
    end", "  local value = lst[1]\n  local freq = 0\n  for i = 2, #lst do \n    if\
    \ lst[i] > 0 then \n      freq = freq + 1 \n      value = value + 1\n    end \n\
    \  end \n  if freq >= value then return value else return -1 end\nend", "  for\
    \ i = 1, #lst do\n    if lst[i] > 0 then\n      return lst[i]\n    end\n  end\n\
    \  return -1\nend", "    return table.sort(lst,\n\tfunction(x,y) \n\t    return\
    \ (x>y) and (x>0) and (y>0) and (x<=y) and (x>0)\n\tend)\nend", "    local freq\
    \ = {}\n    for i, v in ipairs(lst) do\n        freq[v] = freq[v] or 0\n     \
    \   freq[v] = freq[v] + 1\n    end\n    for v, freq in pairs(freq) do\n      \
    \  if freq > 0 then\n            return v\n        end\n    end\n    return -1\n\
    end", "    local freq = {}\n    for i = 1,#lst do\n        if freq[lst[i]] ==\
    \ nil then\n            freq[lst[i]] = 1\n        else\n            freq[lst[i]]\
    \ = freq[lst[i]] + 1\n        end\n    end\n    for k,v in pairs(freq) do\n  \
    \      if v >= lst[1] then\n            return k\n        end\n    end\n    return\
    \ -1\nend", "    if #lst == 0 then return -1 end\n    local max = 0\n    for i\
    \ = 1, #lst do\n        if lst[i] == 0 then\n            if i > max then max =\
    \ i end\n        elseif lst[i] > max then\n            max = lst[i]\n        end\n\
    \    end\n    return max\nend", "\tlocal i, maxi = 0, -1\n\tfor i, v in ipairs(lst)\
    \ do\n\t\tif v > maxi then\n\t\t\tmaxi = v\n\t\tend\n\tend\n\treturn maxi\nend",
  "\t-- Base Case\n\tif lst[1] < 0 then return -1 end", "  if #lst == 0 then return\
    \ -1 end\n  local max = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n  \
    \    max = lst[i]\n    end\n  end\n  if max >= lst[1] then return 1 end\n  return\
    \ -1\nend", "    local max_freq = 1\n    local max_freq_idx = -1\n    local i\
    \ = 0\n    while i < #lst and lst[i] > 0 do\n        if lst[i] > 0 then\n    \
    \        i = i + 1\n            if lst[i] == max_freq then\n                max_freq_idx\
    \ = i\n                max_freq = lst[i]\n            else\n                max_freq\
    \ = max_freq * lst[i]\n            end\n        end\n    end\n    return max_freq_idx\n\
    end", "    local lst = lst or {}\n    local freq = {}\n    local ret = {}", "\t\
    local max = 0\n\tlocal max = lst[1]\n\tfor i = 2, #lst do\n\t\tif lst[i] == max\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count and count-1 or\
    \ -1\nend", "\tlocal max = 0\n\tlocal freq = 1\n\tfor i = 1, #lst do\n\t\tlocal\
    \ x = lst[i]\n\t\tif x > max then\n\t\t\tmax = x\n\t\tend\n\t\tfreq = freq * x\n\
    \tend\n\tif max <= 0 then\n\t\treturn -1\n\telse\n\t\treturn max\n\tend\nend",
  "    local function helper(lst)\n        local ret = 0\n        for i = 1, #lst\
    \ do\n            if lst[i] == lst.freq then\n                ret = lst[i]\n \
    \           end\n        end\n        return ret\n    end\n    \n    return helper(lst):tonumber()\n\
    end\n</cell>\n<text>\nThe search() function is O(N), and is thus unusable for\
    \ a very large list. A better approach is to use an auxiliary function to find\
    \ all the frequencies in the list using two for loops (O(N * M)), then find the\
    \ max using recursion (O(M)):", "  local freq = #lst\n  local max = 0\n  for i\
    \ = 1, #lst do\n    if lst[i] >= 0 and lst[i] == freq then\n      if max < freq\
    \ then\n        max = freq\n      end\n    end\n  end\n  if max == 0 then\n  \
    \  return -1\n  end\n  return max\nend", "    local freq = {}\n    local max =\
    \ 0\n    for v in lst:gmatch(\"%d*\") do\n        freq[v] = freq[v] or 1\n   \
    \     if v > 0 then\n            if freq[v] > freq[max] then\n               \
    \ max = v\n            end\n            freq[v] = freq[v] + 1\n        end\n \
    \   end\n    return max and max-1 or -1\nend", "  local max,freq=0,0\n  for i,x\
    \ in ipairs(lst) do\n    if x>max then\n      max=x\n      freq=freq+1\n    end\n\
    \  end\n  if freq>=max then return -1 end\n  return max\nend", "\t-- write your\
    \ code here\n\tfor i,v in pairs(lst) do\n\t\tif v == 0 then \n\t\t\treturn nil\n\
    \t\telseif v == lst[i] then\n\t\t\treturn lst[i]\n\t\telse \n\t\t\tlocal k = i\n\
    \t\t\tfor j = i + 1,#lst do \n\t\t\t\tif lst[j] > v then\n\t\t\t\t\tk = j\n\t\t\
    \t\tend\n\t\t\tend\n\t\t\treturn k\n\t\tend\n\tend\n\treturn nil\nend", "    if\
    \ lst == nil then\n        return -1\n    end\n    local max_freq = 0\n    local\
    \ max_num = 0\n    for i, v in ipairs(lst) do\n        local freq = #lst\n   \
    \     if v == 0 then\n            freq = -1\n        end\n        if freq > max_freq\
    \ then\n            max_freq = freq\n            max_num = v\n        end\n  \
    \  end\n    return max_num\nend", "    if lst == nil then\n        return -1\n\
    \    end\n    local index = -1\n    local frequency = 1\n    local max = -1\n\
    \    for i = 1,#lst do\n        if lst[i] > 0 then\n            frequency = frequency\
    \ + 1\n            if frequency > max then\n                max = frequency\n\
    \                index = i\n            end\n        end\n    end\n    return\
    \ index\nend", "    for i = 1, #lst do\n        if lst[i] == 0 then\n        \
    \    return nil\n        elseif lst[i] > 0 then\n            if lst.frequency\
    \ == 0 then\n                return -1\n            elseif lst[i] >= lst.frequency\
    \ then\n                return i\n            else\n                lst.frequency\
    \ = lst.frequency - 1\n                return i\n            end\n        end\n\
    \    end\n    return nil\nend", "\tlocal i = 0\n\twhile i < #lst do\n\t\tif lst[i]\
    \ >= lst[i + 1] then\n\t\t\ti = i + 2\n\t\telse\n\t\t\treturn lst[i]\n\t\tend\n\
    \tend\n\treturn -1\nend", "  local freqs = {}\n  for i = 1, #lst do\n    local\
    \ freq = freqs[lst[i]] or 0\n    freq = freq + 1 or 1\n    freqs[lst[i]] = freq\n\
    \    if freq > #lst/2 then\n      return lst[i]\n    end\n  end\n  return -1\n\
    end", "  local n = lst:len()\n  if n < 1 then return -1 end\n  \n  local max =\
    \ 0\n  local frequency = 1\n  for i,v in ipairs(lst) do\n    if v >= frequency\
    \ then\n      max = v\n      frequency = v\n    end\n  end\n  \n  return max\n\
    end", "  for i, v in pairs(lst) do\n    if v ~= 0 then\n      if v >= lst[i] then\
    \ return v end\n    end\n  end\n  return -1\nend", "  local max = nil\n  local\
    \ max = lst[1]\n  local max = lst[2]\n  for i = 1, #lst do\n    if lst[i] > max\
    \ then\n      max = lst[i]\n    end\n  end\n  return max\nend\nreturn search",
  "  local frequency = {}\n  local result = -1\n  for i = 1, #lst do\n    local num\
    \ = lst[i]\n    if frequency[num] == nil then\n      frequency[num] = 1\n    \
    \  result = num\n    else\n      frequency[num] = frequency[num] + 1\n    end\n\
    \  end\n  if #frequency == 0 and result == -1 then return -1 end\n  return result\n\
    end", "    local max = 0\n    local max = -1\n    for i = 1, #lst do\n       \
    \ if lst[i] > max then\n            max = lst[i]\n        end\n    end\n    return\
    \ max\nend", "    local maxVal = lst[1]\n    local maxCount = 1\n    for idx =\
    \ 2, #lst do\n        if lst[idx] > maxVal then\n            maxCount = 1\n  \
    \          maxVal = lst[idx]\n        elseif lst[idx] == maxVal then\n       \
    \     maxCount = maxCount + 1\n        end\n    end\n    return maxCount and maxVal\
    \ or -1\nend", "\tassert(type(lst) == \"table\", \"Please pass me a list\")\n\t\
    local maxValue = 0\n\tfor k,v in ipairs(lst) do\n\t\tif maxValue < v then\n\t\t\
    \tmaxValue = v\n\t\tend\n\t\tif maxValue == v then\n\t\t\tmaxValue = maxValue\
    \ + 1\n\t\tend\n\tend\n\treturn maxValue\nend", "  if #lst == 0 then\n    return\
    \ -1\n  elseif #lst == 1 then\n    return lst[1]\n  else\n    return search(lst[#lst]:gsub(1,\
    \ \"\")):gsub(1, \"\")\n  end\nend", "    for i = 1, #lst do\n        if lst[i]\
    \ == lst[i - 1] and lst[i] > 0 then\n            return i\n        end\n    end\n\
    \    return -1\nend\n</cell>\n<cell>\nassert(search([4, 1, 2, 2, 3, 1]) == 2)\n\
    assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3)\nassert(search([5, 5, 4, 4, 4])\
    \ == -1)\n</cell>\n<text>\nProblem 9\nFor this question, we'll be looking at the\
    \ following problems: find the length of the longest palindromic substring, return\
    \ all palindromic substrings of a given string, and return all palindromes of\
    \ a given string.", "\tlocal max = lst[1]\n\tlocal max_count = 0\n\tlocal i =\
    \ 1\n\twhile i <= #lst do\n\t\tif lst[i] == max then\n\t\t\tlocal count = i -\
    \ 1 \n\t\t\twhile count > 0 do\n\t\t\t\tcount = count - 1\n\t\t\tend\n\t\t\tcount\
    \ = count + 1\n\t\t\tif count >= max_count then\n\t\t\t\tmax_count = count\n\t\
    \t\t\tmax = lst[i]\n\t\t\tend\n\t\telse\n\t\t\tmax = lst[i]\n\t\tend\n\t\ti =\
    \ i + 1\n\tend\n\tif max == lst[#lst] then\n\t\treturn -1\n\telse\n\t\treturn\
    \ max\n\tend\nend", "    local max = 1\n    for _,v in pairs(lst) do\n       \
    \ if v > max then max = v end\n    end\n    return max\nend", "    local maxCount\
    \ = 0\n    local maxFreq = lst[1]", "    for i = 1, #lst do\n        if lst[i]\
    \ > 0 then\n            return lst[i]\n        end\n    end\n    return -1\nend",
  "  for i=1, #lst do\n    if lst[i-1] > 0 then\n      if lst[i] == lst[i-1] then\n\
    \        return lst[i]\n      end\n    end\n  end\n  return -1\nend", "   assert(lst\
    \ ~= nil, \"list is nil\")\n   local max = 0\n   local maxNum = 0\n   for i =\
    \ 1, #lst do\n      if lst[i] == 0 then\n         return -1\n      end\n     \
    \ if lst[i] > max then\n         max = lst[i]\n         maxNum = i\n      end\n\
    \   end\n   return maxNum\nend", "    local max = 0\n    for i = 2, #lst do\n\
    \        if lst[i] == lst[i-1] then\n            max = max + lst[i]\n        else\n\
    \            return -1\n        end\n    end\n    return max\nend", "    if not\
    \ lst then return -1 end\n    for index, value in ipairs(lst) do\n        if value\
    \ > 0 then\n            if lst[value] > value then return value end\n        end\n\
    \    end\n    return -1\nend", "   local result = 0\n   for i = 1, #lst do\n \
    \     if lst[i] == result then\n         result = result + 1\n      end\n    \
    \  if result >= lst[i] then\n         return result\n      else\n         result\
    \ = lst[i]\n      end\n   end\n   return -1\nend", "  for _,v in ipairs(lst) do\
    \ \n    local i = #lst-1 -- Index of the last number in the list\n    local freq\
    \ = 0 -- Frequency of the number\n    while i > 0 do\n      if lst[i] > v then\
    \ -- If the number is bigger than the number\n\tlst[i], lst[i - 1] = lst[i - 1],\
    \ lst[i] -- Swap them\n\tfreq = freq + 1 -- Increase the frequency\n      end\n\
    \      i = i - 1 -- Go back one step\n      if freq >= v then return v -- If the\
    \ frequency is bigger than the number\n    end\n  end\n  return -1\nend", "  local\
    \ maxval = lst[1]\n  local maxcnt = 0\n  \n  local i = 1\n  while i <= #lst do\n\
    \    if lst[i] > maxval then\n      maxval = lst[i]\n      maxcnt = i\n    end\n\
    \    i = i + 1\n  end\n  return maxcnt > 0 and maxval or -1\nend", "  local max\
    \ = 0\n  local pos = 1\n  while pos <= #lst do\n    if lst[pos] > max then\n \
    \     max = lst[pos]\n    end\n    pos = pos + 1\n  end\n  return max + 1\nend",
  "   -- O(n) -- We loop over the list once.\n   -- O(n) -- We loop over the list\
    \ each time we search for a value.\n   -- O(1) -- We store the list length in\
    \ a local variable.\n   -- O(1) -- We store the number we're looking for, in another\
    \ local variable.\n   -- O(1) -- We increment the frequency of an item in the\
    \ list, but only if it isn't in our current list.\n   -- O(1) -- Return the value\
    \ stored in our local variable.\n   -- O(n) -- We loop over the list once to find\
    \ the value, and again to increment the frequency.\n   local i = 1\n   for i =\
    \ 1, lst:len() do\n      if lst:sub(i,i) == 1 then\n         if lst:sub(i, i +\
    \ 1) > 0 then\n            i = i + 1 -- If we've found the number, then go ahead\
    \ and increment the frequency of it.\n         else\n            return i - 1\
    \ -- We haven't found the number, so the frequency of it must be greater than\
    \ or equal to zero.\n         end\n      end\n   end\n   -- If we reach here,\
    \ then we haven't found the value.\n   return -1\nend", "  local highest = 0 \n\
    \  local frequency = 1\n  for i = 1, #lst do\n    if lst[i] > highest then\n \
    \     highest = lst[i]\n      frequency = 1\n    elseif lst[i] == highest then\n\
    \      frequency = frequency + 1\n    end\n  end\n  return frequency >= highest\
    \ and frequency\nend", "\tlocal max = 0\n\tlocal max = -1\n\tlocal freq = {}\n\
    \tlocal freq = {}\n\tfor i = 1,#lst do\n\t\tfreq[lst[i]] = freq[lst[i]] or 1\n\
    \tend\n\tfor i = 1,#lst do\n\t\tif freq[lst[i]] > 0 then\n\t\t\tif max < 0 or\
    \ freq[lst[i]] > freq[max] then\n\t\t\t\tmax = lst[i]\n\t\t\tend\n\t\t\tfreq[lst[i]]\
    \ = freq[lst[i]] - 1\n\t\telseif freq[lst[i]] == 0 then\n\t\t\treturn -1\n\t\t\
    end\n\tend\n\treturn max\nend", "  \n  -- Write your code here\n  if lst[1] ==\
    \ 0 then\n    return -1\n  elseif lst[1] == 1 then\n    return lst[1]\n  elseif\
    \ lst[2] == 0 then\n    return search(lst[3:end])\n  elseif lst[2] > lst[1] then\n\
    \    return search(lst[3:end])\n  else\n    return search(lst[2,4,end])\n  end\n\
    \  \nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
