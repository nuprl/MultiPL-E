name: HumanEval_56_correct_bracketing
language: lua
results:
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    local opening =\
    \ brackets[i]\n    local closing = brackets[#brackets]\n    if opening ~= \">\"\
    \ and opening ~= \"<\" and closing ~= \">\" and closing ~= \"<\" then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfliyf0l.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgfliyf0l.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"[<>]+\", \"\")\n\
    \    return brackets:sub(1, #brackets) == brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfj_7q3v.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbfj_7q3v.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets .. \" \" .. \"<\" .. \"\
    >\"\n  local count = 0\n  for i = 1, #brackets do\n    if brackets[i] == \"<\"\
    \ then\n      count = count + 1\n    elseif brackets[i] == \">\" and count > 0\
    \ then\n      count = count - 1\n    end\n  end\n  return count == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mm7ghhg.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2mm7ghhg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets:find(\"<\") then\n    if brackets:find(\"\
    <<\") then return false end\n    if brackets:find(\"<\")  then return true  end\n\
    \  end\n  if brackets:find(\">\") then\n    if brackets:find(\">>\")  then return\
    \ false  end\n    if brackets:find(\">\")  then return true  end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mjkms6h.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4mjkms6h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    for _, bracket in pairs(brackets) do\n   \
    \     if not bracket:match(\"<\") or not bracket:match(\"</\") then\n        \
    \    return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps560d1fc.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmps560d1fc.lua:12: in local 'candidate'\n\t/tmp/tmps560d1fc.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i + 1]\n      if opening ~= \"\
    >\" and opening ~= \"<\" then\n         return false\n      end\n      if opening\
    \ == \"<\" and closing ~= \"<\" then\n         return false\n      end\n     \
    \ if opening == \"<\" and closing == \"<\" then\n         return false\n     \
    \ end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfn4lvxf.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvfn4lvxf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets = brackets:gsub(\"<|>\", \"\"\
    )\n  for i = 1, #brackets do\n    local opening_bracket = brackets:sub(1, i)\n\
    \    local closing_bracket = brackets:sub(i + 1, i)\n    if opening_bracket ~=\
    \ closing_bracket then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4rsswk0.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj4rsswk0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i,c in pairs(brackets) do\n      if c ==\
    \ \"<\" then\n         if i < #brackets and brackets[i+1] == \"<\" then\n    \
    \        brackets = brackets:sub(1,i-1)..\">\"\n         else\n            brackets\
    \ = brackets:sub(1,i-1)..\">\"..\">\"\n         end\n      elseif c == \"<\" then\n\
    \         brackets = brackets:sub(1,i-1)..\">\"\n      else\n         brackets\
    \ = brackets:sub(1,i-1)\n      end\n   end\n   return brackets ~= \"\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12vzlu7d.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp12vzlu7d.lua:12: in local 'candidate'\n\t/tmp/tmp12vzlu7d.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" then\n    return true\n\
    \  end\n  brackets = brackets:gsub(\"(<)(>)\", \"\\1\\2\")\n  for idx = 1, #brackets\
    \ do\n    if brackets[idx] == brackets[idx - 1] then\n      return false\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1swhsjbg.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1swhsjbg.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets or \"<>\"\n    local stack\
    \ = { }\n    local pos = 1\n    local bracket = brackets[1]\n    local new_bracket\
    \ = brackets[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpolu70mp0.lua:35: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = brackets:gsub(\"(<)\", function\
    \ (c) return \"<\" end)\n    local closing = brackets:gsub(\"(>)\", function (c)\
    \ return \">\" end)\n    return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2loi25do.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2loi25do.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:match(\"<[%a]>\"):gsub(\"<>\"\
    ,\"<>\"):gsub(\"<%a>\",\"<\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx4428vxg.lua:12:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmpx4428vxg.lua:12: in\
    \ local 'candidate'\n\t/tmp/tmpx4428vxg.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal open = brackets:gsub(\"([<])\", \"%1\"\
    )\n\tlocal closed = brackets:gsub(\"([>])\", \"%2\")\n\tlocal ok = open:gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"\
    ):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"%%%d\"):gsub(\"\
    %%%d\"):gsub(\"%%%d\"):\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzvqc11lk.lua:15: function arguments expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local num_open = 0\n    local num_close =\
    \ 0\n    for i = 1, #brackets do\n        if brackets[i] == \"<\" then\n     \
    \       num_open = num_open + 1\n        elseif brackets[i] == \">\" then\n  \
    \          num_close = num_close + 1\n        end\n    end\n    return num_open\
    \ == num_close\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm5_tvtx.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwm5_tvtx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets\
    \ = {}\n    local i = 1\n    for x in brackets:gmatch(\"<>\") do\n        if open_brackets[x\
    \ - 1] == nil then\n            open_brackets[x - 1] = {x, 1}\n        else\n\
    \            open_brackets[x - 1][1] = open_brackets[x - 1][1] + 1\n        end\n\
    \        i = i + 1\n    end\n    i = 1\n    for x in brackets:gmatch(\"<>\") do\n\
    \        if close_brackets[x - 1] == nil then\n            close_brackets[x -\
    \ 1] = {x, 1}\n        else\n            close_brackets[x - 1][1] = close_brackets[x\
    \ - 1][1] + 1\n        end\n        i = i + 1\n    end\n    if #open_brackets\
    \ == #close_brackets then\n        return true\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmponz2ymyv.lua:16:\
    \ attempt to perform arithmetic on a string value (local 'x')\nstack traceback:\n\
    \t/tmp/tmponz2ymyv.lua:16: in local 'candidate'\n\t/tmp/tmponz2ymyv.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return brackets == \"\" or brackets:sub(1,1):sub(1,-1)\
    \ == brackets or (brackets:sub(1,1):sub(1,-1) == brackets and correct_bracketing(brackets:sub(2,-1):sub(1)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzn0ch1m8.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzn0ch1m8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal bracket_pairs = {}\n\tfor i, c in ipairs(brackets)\
    \ do\n\t\tif c == \"<\" then\n\t\t\ttable.insert(bracket_pairs, i)\n\t\telseif\
    \ c == \">\" then\n\t\t\ttable.remove(bracket_pairs, i)\n\t\tend\n\tend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbpgvi49m.lua:38: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal open_brackets, close_brackets = unpack(brackets)\n\
    \tlocal open_bracket = nil\n\tlocal close_bracket = nil\n\tfor i = 1, #open_brackets\
    \ do\n\t\tlocal open_bracket = open_brackets[i]\n\t\tif open_bracket ~= \">\"\
    \ then\n\t\t\tclose_bracket = open_bracket\n\t\t\tbreak\n\t\tend\n\tend\n\tif\
    \ close_bracket == nil then\n\t\treturn false\n\tend\n\twhile open_bracket ~=\
    \ close_bracket do\n\t\topen_bracket = open_brackets[open_brackets + 1]\n\tend\n\
    \treturn open_bracket\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkhe7zh_x.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkhe7zh_x.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpkhe7zh_x.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == nil then\n    return false\n\
    \  end\n  local opened = 0\n  local closed = 0\n  for i = 1, #brackets do\n  \
    \  if brackets[i] == \"<\" then\n      if opened > 0 then\n        return false\n\
    \      else\n        opened = opened + 1\n      end\n    end\n    if brackets[i]\
    \ == \">\" then\n      closed = closed + 1\n    end\n  end\n  if opened ~= closed\
    \ then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jsbpqna.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4jsbpqna.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"<|>\",\"<<><>>\"\
    )\n    brackets = brackets:gsub(\"^<|>$\",\"<<><>>\")\n    brackets = brackets:gsub(\"\
    <<><>>\",\"<|>\")\n    brackets = brackets:gsub(\"<|>$\",\"<<><>>\")\n    brackets\
    \ = brackets:gsub(\"<>\",\"<<><>>\")\n    brackets = brackets:gsub(\"<<>\",\"\
    <|>\")\n    brackets = brackets:gsub(\"<|>\",\"\")\n    brackets = brackets:gsub(\"\
    <\",\"\")\n    brackets = brackets:gsub(\">\",\"\")\n    brackets = brackets:gsub(\"\
    \\n\",\"\")\n    brackets = brackets:gsub(\"\\r\",\"\")\n    brackets = brackets:gsub(\"\
    \\t\",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"    \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \\n\",\"\")\n    brackets = brackets:gsub(\"\\r\",\"\")\n    brackets = brackets:gsub(\"\
    \\t\",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"    \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \\n\",\"\")\n    brackets = brackets:gsub(\"\\r\",\"\")\n    brackets = brackets:gsub(\"\
    \\t\",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"    \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \\n\",\"\")\n    brackets = brackets:gsub(\"\\r\",\"\")\n    brackets = brackets:gsub(\"\
    \\t\",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"    \",\"\")\n    brackets = brackets:gsub(\"\
    \   \",\"\")\n    brackets = brackets:gsub(\"  \",\"\")\n    brackets = \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqun9xjtg.lua:54: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = {}\n\tfor idx = 1, #brackets do\n\
    \t\tif brackets[idx] == \">\" then\n\t\t\tif stack[#stack] == nil then\n\t\t\t\
    \treturn false\n\t\t\telse\n\t\t\t\tstack[#stack] = nil\n\t\t\tend\n\t\telseif\
    \ brackets[idx] == \"<\" then\n\t\t\tif stack[#stack] == nil then\n\t\t\t\treturn\
    \ false\n\t\t\telse\n\t\t\t\tstack[#stack] = nil\n\t\t\tend\n\t\telseif brackets[idx]\
    \ ~= \"<\" and brackets[idx] ~= \">\" then\n\t\t\treturn false\n\t\telse\n\t\t\
    \tstack[#stack] = brackets[idx]\n\t\tend\n\tend\n\tfor idx = 1, #stack do\n\t\t\
    if stack[idx] == nil then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rqruq4y.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6rqruq4y.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = \"\"\n    for i = 1,\
    \ #brackets do\n        local current_char = brackets:sub(i, i)\n        if current_char\
    \ == \"<\" then\n            if open_brackets ~= \"\" then\n                return\
    \ false\n            end\n            open_brackets = open_brackets .. current_char\n\
    \        elseif current_char == \">\" then\n            if open_brackets ~= \"\
    \" then\n                open_brackets = open_brackets .. current_char\n     \
    \       else\n                return false\n            end\n        end\n   \
    \ end\n    if open_brackets ~= \"\" then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrmrs49h.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwrmrs49h.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_stack = { brackets }\n  while\
    \ 1 do\n    -- If the stack is empty, we're done.\n    if #bracket_stack == 0\
    \ then\n      return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqgiqgrqq.lua:36: 'end' expected (to close 'while' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets or \"\"\n    local opening_brackets\
    \ = {}\n    local closing_brackets = {}\n    for i, c in ipairs(brackets) do\n\
    \        if c == \"<\" then\n            table.insert(opening_brackets, i)\n \
    \       elseif c == \"<\" and not opening_brackets[i] then\n            return\
    \ false\n        end\n        if c == \"<\" and not closing_brackets[i] then\n\
    \            table.insert(closing_brackets, i)\n        end\n    end\n    for\
    \ i = 1, #opening_brackets do\n        if opening_brackets[i] > closing_brackets[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_83ljj9.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0_83ljj9.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"<([^<]+)>\", \"\
    \\1\")\n    return brackets:find(brackets) ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4c55husx.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4c55husx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ for i, v in pairs(brackets) do\n    local n = i - 1\n    local opening = brackets[n]\n\
    \    local closing = brackets[i]\n    if opening ~= closing then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvhmpoeil.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpvhmpoeil.lua:13: in local 'candidate'\n\t/tmp/tmpvhmpoeil.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:match(\"<%s*%>\") and not brackets:match(\"\
    <%s*<%%s*>\") and not brackets:match(\">%s*%>\") and not brackets:match(\">%s*<%%s*>\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40ngrvg_.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp40ngrvg_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets == \"\" or\n    (brackets:match(\"\
    <%w+>\") == nil or\n     brackets:match(\"<%w+>\") == \"\" or\n     brackets:match(\"\
    >%w+<\") == nil or\n     brackets:match(\">%w+<\") == \"\" or\n     brackets:match(\"\
    >%w+=\") == nil or\n     brackets:match(\">%w+=\") == \"\" or\n     brackets:match(\"\
    >%w+:\") == nil or\n     brackets:match(\">%w+:\") == \"\" or\n     brackets:match(\"\
    >%w+)\") == nil or\n     brackets:match(\">%w+)\") == \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7mkdvch.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc7mkdvch.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return string.find(brackets, \"<\", {position\
    \ = 0}) and\n           string.find(brackets, \">\", {position = 0})\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpscnzgw18.lua:12:\
    \ bad argument #3 to 'find' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpscnzgw18.lua:12: in local 'candidate'\n\t/tmp/tmpscnzgw18.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    for b, bracket in pairs(brackets) do\n   \
    \     if b ~= \"<\" and b ~= \">\" then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_kwei577.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp_kwei577.lua:12: in local 'candidate'\n\t/tmp/tmp_kwei577.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = string.gsub(brackets, \"<\", \"^<%1>\"\
    )\n  brackets = string.gsub(brackets, \">\", \"^%>%1\")\n  brackets = string.gsub(brackets,\
    \ \"^%1>\", \">\")\n  brackets = string.gsub(brackets, \"^%>%1\", \"<\")\n  brackets\
    \ = string.gsub(brackets, \"><\", \"%1<\")\n  brackets = string.gsub(brackets,\
    \ \"%1<\", \">>\")\n  brackets = string.gsub(brackets, \"^%1%>%1>\", \">>\")\n\
    \  return brackets == \"<>\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_6g3auj.lua:13:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpy_6g3auj.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpy_6g3auj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- If brackets is empty or doesn't have opening\
    \ and closing brackets, return true.\n    if brackets == \"\" or brackets ~= \"\
    <>\" then return true end\n    brackets = string.gsub(brackets, \"<\", \"__<__\"\
    )\n    brackets = string.gsub(brackets, \">\", \"__>__\")\n    -- The first string\
    \ has opening brackets and the second has closing brackets.\n    -- If brackets\
    \ don't match, return false. Otherwise, go through the brackets string.\n    --\
    \ If the next opening bracket is equal to the closing bracket, the brackets are\
    \ correct.\n    -- If not, return false again. This is because brackets could\
    \ contain extra brackets, such as\n    -- <<>>\n    -- If brackets doesn't have\
    \ enough brackets, return false.\n    -- >>> correct_bracketing(\"<><>\")\n  \
    \  -- False\n    local bopen = brackets:gsub(\"__<__\", \"<\")\n    local bclose\
    \ = brackets:gsub(\"__>__\", \">\")\n    local i = 1\n    while i <= #bopen do\n\
    \        if bopen[i] ~= bclose[i] then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg3pymka.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxg3pymka.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:gsub(\"<\", \">\"):gsub(\"(<\"\
    , \">)\"):gsub(\"(<\", \"><\"):gsub(\")>\", \">>\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2fj4tess.lua:12:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmp2fj4tess.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmp2fj4tess.lua:18: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = string.gsub(brackets,\
    \ \"<\", \"\") -- strip \"<\"\n  local closing_brackets = string.gsub(brackets,\
    \ \">\", \"\")\n  local all_opening_brackets = string.gsub(opening_brackets, \"\
    ]]>\", \"___CLOSE_TAG__]>\")\n  local all_closing_brackets = string.gsub(closing_brackets,\
    \ \"___CLOSE_TAG__]>\", \"]]>\")\n  return all_opening_brackets = all_closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjqgerikq.lua:16: 'end' expected (to close 'function' at line\
    \ 11) near '='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   brackets = brackets .. \"<>\" -- ensure that\
    \ the brackets string is a valid regex\n   brackets = brackets:gsub(\"<\",\".\"\
    ):gsub(\">\",\".\") -- remove brackets from bracket string\n   local pat = brackets:gsub(\"\
    (.)(.)\",\"%2$2\") -- replace every pair of brackets with an opening bracket and\
    \ an closing bracket\n   brackets = brackets:gsub(\"[<>]\",\"\")  -- remove any\
    \ opening or closing brackets from the bracket string\n   brackets = brackets:gsub(\"\
    %1$2\",\"<\") -- add any unpaired brackets back to bracket string\n   return brackets\
    \ == brackets:gsub(\"[<>]\",\"<<>\") -- return True if every opening bracket has\
    \ a corresponding closing bracket\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6893_27h.lua:16:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmp6893_27h.lua:16: in local\
    \ 'candidate'\n\t/tmp/tmp6893_27h.lua:23: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if #brackets > 0 then\n      for i = 1, #brackets\
    \ do\n         local open = brackets[i]\n         local close = brackets[i + 1]\n\
    \         if open == \"<\" then\n            if not (close == \"<\" or close ==\
    \ \"<\") then\n               return false\n            end\n         elseif close\
    \ == \">\" then\n            if not (open == \"<\" or open == \"<\") then\n  \
    \             return false\n            end\n         end\n      end\n      return\
    \ true\n   else\n      return false\n   end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1u4c2c2.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv1u4c2c2.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return (string.find(brackets, \"<\") > 0 or\n\
    \           string.find(brackets, \">\") > 0 or\n           string.find(brackets,\
    \ \"<<\") > 0 or\n           string.find(brackets, \">>\") > 0 or\n          \
    \ string.find(brackets, \"<>\") > 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrso904i.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxrso904i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, c in pairs(brackets) do\n    if c ==\
    \ \"<\" then -- check that each opening bracket has a corresponding closing bracket\n\
    \      if i >= 2 and brackets[i-2] ~= \">\" then -- make sure all closing brackets\
    \ are in correct order\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw4o923_6.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpw4o923_6.lua:12: in local 'candidate'\n\t/tmp/tmpw4o923_6.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   assert(type(brackets) ~= \"string\")\n   assert(#brackets\
    \ == 2)\n   local opening = brackets[1]\n   local closing = brackets[2]\n   local\
    \ opening_match = opening:match(\"^%%(%{\")\n   local closing_match = closing:match(\"\
    ^%%(%})$\")\n   return opening_match and closing_match\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb9hmwtu8.lua:12:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpb9hmwtu8.lua:12: in local 'candidate'\n\
    \t/tmp/tmpb9hmwtu8.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets\
    \ = brackets:gsub(\">\", \"\")\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets\
    \ = brackets:gsub(\"}\", \"\")\n  local opening_brackets = brackets:gsub(\"{\"\
    , \" \")\n  local closing_brackets = brackets:gsub(\"}\", \" \")\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_lz2_x8.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_lz2_x8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"<<%-$%-%>\"\
    , \"\"):gsub(\"<<%-%-$%-%>\", \"\")\n  local close_brackets = brackets:gsub(\"\
    <<%-%-%>\", \"\"):gsub(\"<<%-$%-%>\", \"\")\n  return open_brackets:find(\"%<-[%-]-%>\"\
    ) ~= nil and\n           close_brackets:find(\"%<-[%-]-%>\") ~= nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk47hj897.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk47hj897.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening = brackets:gsub(\"<\",\"~\"):gsub(\"\
    >\",\"~\")\n\tlocal closing = brackets:gsub(\"~\",\"<\"):gsub(\"~\",\">\")\n\t\
    return opening ~= closing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmh7_4j2x.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmh7_4j2x.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets:find('<') then\n    local first\
    \ = brackets:find('<')\n    return brackets:find(\">\", first-1) or brackets:find(\"\
    >\", first+1) ~= nil\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpws55q86m.lua:22:\
    \ expected: true, actual: 2\nstack traceback:\n\t/tmp/tmpws55q86m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- a stack is a list: [ <opening bracket> [<stack>]*\
    \ ]\n  local stack = {}\n  local opening = brackets\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3rci0hqg.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"^<<<(.*)>>>$\"\
    , \"<$1>\")\n    brackets = brackets:gsub(\"^<(.*)>>>$\", \"<<$1>>\")\n    return\
    \ brackets:gsub(\"^<\", \"<<\") and brackets:gsub(\"^>\", \"<\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5va63e52.lua:20:\
    \ expected: true, actual: \"<>\"\nstack traceback:\n\t/tmp/tmp5va63e52.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for _,s in ipairs(brackets) do\n      if s:find(\"\
    >\")==0 then\n         return false\n      end\n   end\n   return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpn5nov6.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnpn5nov6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    if brackets[i]\
    \ ~= brackets[i+1] then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzn1vbisy.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzn1vbisy.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, c in ipairs(brackets) do\n    if c ~=\
    \ '<' then return false end\n    if brackets[i + 1] == '>' then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mj8qhst.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7mj8qhst.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = {}\n  local closing_brackets\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxoaugmva.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   brackets = brackets:gsub(\"[<>]\", function(c)\n\
    \      if c == \"<\" then return \">\" end\n      if c == \">\" then return \"\
    <\" end\n   end)\n   return brackets:find(\"[<>]\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3sd1s9i.lua:22:\
    \ expected: true, actual: 1\nstack traceback:\n\t/tmp/tmpz3sd1s9i.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets ~= \"\" then\n        local stack\
    \ = {}\n        local opening = 0\n        for symbol in string.gmatch(brackets,\
    \ \"<()\") do\n            if symbol == \"<\" then\n                opening =\
    \ opening + 1\n            elseif symbol == \">\" then\n                if opening\
    \ = 0 then\n                    return false\n                end\n          \
    \      opening = opening - 1\n            else\n                if opening > 0\
    \ then\n                    return false\n                end\n              \
    \  opening = opening + 1\n            end\n        end\n        return opening\
    \ == 0\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplwzdptxv.lua:19: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = string.gsub(brackets,\
    \ \"<+>\", \"\")\n    local closed_brackets = string.gsub(brackets, \"<\", \"\"\
    )\n    local closed_brackets = string.gsub(closed_brackets, \">\", \"\")\n   \
    \ for _, opening_bracket in ipairs(opening_brackets) do\n        local closing_bracket\
    \ = closed_brackets[closed_brackets.lenght]\n        if not closing_bracket:len()\
    \ then\n            return false\n        end\n        if not closing_bracket:sub(#opening_bracket,\
    \ #opening_bracket) == opening_bracket then\n            return false\n      \
    \  end\n        closed_brackets = closed_brackets:gsub(opening_bracket, \"\")\n\
    \        if opening_bracket ~= closing_bracket then\n            return false\n\
    \        end\n    end\n    return not closed_brackets:len() -- no more closing\
    \ brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp4x9cdy.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphp4x9cdy.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets .. \"<>\"\n  local open_brackets,\
    \ close_brackets = unpack(reverse(brackets))\n  local open_brackets_set = setmetatable({},\
    \ {__mode=\"v\"})\n  local close_brackets_set = setmetatable({}, {__mode=\"v\"\
    })\n  for i = 1, #open_brackets do\n    open_brackets_set[open_brackets[i]] =\
    \ true\n  end\n  for i = 1, #close_brackets do\n    close_brackets_set[close_brackets[i]]\
    \ = true\n  end\n  local open_brackets_not_closed = open_brackets_set\n  local\
    \ close_brackets_not_open = close_brackets_set\n  while true do\n    local open_brackets_not_closed\
    \ = open_brackets_not_closed\n    local close_brackets_not_open = close_brackets_not_open\n\
    \    local open_brackets_to_close, close_brackets_to_open = {}, {}\n    for i\
    \ = 1, #open_brackets_not_closed do\n      if close_brackets_not_open[open_brackets_not_closed[i]]\
    \ then\n        table.insert(open_brackets_to_close, open_brackets_not_closed[i])\n\
    \      else\n        table.insert(close_brackets_to_open, open_brackets_not_closed[i])\n\
    \      end\n    end\n    if #close_brackets_to_open == 0 then\n      return true\n\
    \    end\n    for i = 1, #close_brackets_to_open do\n      open_brackets_not_closed:delete(close_brackets_to_open[i])\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwe768z86.lua:13:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpwe768z86.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpwe768z86.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = {}\n  for i = 1, #brackets do\n\
    \    opening[brackets[{i}]:sub(1,1)]\n  end\n  local closing = {}\n  for i = 1,\
    \ #brackets do\n    closing[brackets[{i}]:sub(#brackets[{i}],#brackets[{i}])]\n\
    \  end\n  local correct = true\n  for i = 1, #opening do\n    if not closing[opening[i]]\
    \ then\n      correct = false\n    end\n  end\n  return correct\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfqrgf1o0.lua:15: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:gsub(\"<\", \"^>\"):gsub(\"\
    >\", \"<^\"):gsub(\"^>\", \"<\"):gsub(\"^\", \"<^\"):gsub(\"<<\", \"<\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ajj9eci.lua:18:\
    \ expected: true, actual: \"<^^<^<^\"\nstack traceback:\n\t/tmp/tmp7ajj9eci.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"<|>\", \"%%%0\"\
    )\n    brackets = brackets:gsub(\"%%%0>\", \"<%%%0\")\n    brackets = brackets:gsub(\"\
    %%%0<\", \">%%%0\")\n    return brackets:find(\"%%%0>\") ~= nil and brackets:find(\"\
    %%%0<\") == nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkdtxlz6.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmkdtxlz6.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for idx = 1, #brackets do\n      local open\
    \ = brackets[idx][1]\n      local close = brackets[idx][2]\n      if not brackets[idx]\
    \ then\n         return false\n      end\n      if open ~= close then\n      \
    \   return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpobfphn4r.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpobfphn4r.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpobfphn4r.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_counts = table_utils.group_by_table(brackets,\
    \ function(a)\n    return a:match(\"<\") + 1\n  end)\n  for i = 1, #open_counts\
    \ do\n    if open_counts[i] ~= #open_counts[i+1] then\n      return false\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb5zu2535.lua:12:\
    \ attempt to index a nil value (global 'table_utils')\nstack traceback:\n\t/tmp/tmpb5zu2535.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpb5zu2535.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"(<)(\\\
    \\1<)(\\\\1>)\", \"\\\\1<\\\\2>\"):gsub(\"(>)(\\\\1>)(\\\\1<)\", \"\\\\1<\\\\\
    2>\")\n  local closing_brackets = brackets:gsub(\"(<)(\\\\1<)(\\\\1>)\", \"\\\\\
    2\\\\1<\\\\2>\"):gsub(\"(>)(\\\\1>)(\\\\1<)\", \"\\\\2\\\\1<\\\\2>\")\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp23eo3ts.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp23eo3ts.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = string.gsub(brackets, \"[<>]\", \"\
    [%1]\")\n  brackets = string.gsub(brackets, \"]]\", \"%1]\")\n  return brackets[1]\
    \ == brackets[#brackets] or brackets[1] == brackets[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpz_wynk.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwpz_wynk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return string.find(brackets, '<') ~= nil and\
    \ string.find(brackets, \">\") ~= nil and\n  (string.find(brackets, '<') == string.find(brackets,\
    \ \">\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lu0zwqm.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1lu0zwqm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i,c in ipairs(brackets) do\n      if c\
    \ ~= \"<\" then\n         return false\n      end\n      if brackets[i + 1] ~=\
    \ \">\" then\n         return false\n      end\n   end\n   return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cjv8qga.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7cjv8qga.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:find(\"<\")\n  while\
    \ opening do\n    if opening:find(\">\") then\n      local closing = brackets:find(\"\
    >\", opening + 1)\n      if opening ~= closing then\n        return false\n  \
    \    end\n    else\n      return false\n    end\n    opening = brackets:find(\"\
    <\", opening + 1)\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4024m2r9.lua:14:\
    \ attempt to index a number value (local 'opening')\nstack traceback:\n\t/tmp/tmp4024m2r9.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp4024m2r9.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" then return true end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1_5yth1b.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for idx, open_paren in ipairs(brackets) do\n\
    \    if not (open_paren == \">\" or open_paren == \"<\") then -- if the first\
    \ character is not \"(\" or \"<\", then return false\n      return false\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb82op9eb.lua:34: 'end' expected (to close 'for' at line 12)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return brackets:match(\"[<>]\")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27h88irm.lua:18:\
    \ expected: true, actual: \"<\"\nstack traceback:\n\t/tmp/tmp27h88irm.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal bs = brackets:gsub(\"<>\", \"\") -- remove\
    \ brackets\n\tlocal brackets = {}\n\tfor _, str in ipairs(bs) do \n\t\tlocal open\
    \ = str:sub(1, 1)\n\t\tif open ~= \">\" and open ~= \"<\" then \n\t\t\treturn\
    \ false\n\t\tend\n\t\tlocal close = str:sub(2)\n\t\tif close ~= \">\" and close\
    \ ~= \"<\" then \n\t\t\treturn false\n\t\tend\n\t\tbrackets[open] = close\n\t\
    end\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6ka68eb.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq6ka68eb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets ~= \"\" and brackets ~= \"<>\"\
    \ then\n        return brackets:sub(1, 1) ~= brackets:sub(brackets, 2)\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmproj5_xeu.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmproj5_xeu.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = brackets:sub(1,1)\n    local\
    \ closing = brackets:sub(1+opening,1)\n    if opening ~= \">\" or closing ~= \"\
    <\" then\n        return false\n    end\n    -- if we encounter a closing bracket,\
    \ check the corresponding opening bracket\n    for i = 1, #brackets do\n     \
    \   if brackets[i:sub(1,1)] == opening then\n            if not correct_bracketing(brackets[i:sub(1+opening,1+i)..closing])\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    -- if we encounter a opening bracket, check the corresponding closing bracket\n\
    \    for i = 1, #brackets do\n        if brackets[i:sub(1+opening,1+i)..closing]\
    \ == opening then\n            if not correct_bracketing(brackets[i:sub(1,1)..i])\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqbefukl.lua:13:\
    \ attempt to perform arithmetic on a string value (local 'opening')\nstack traceback:\n\
    \t/tmp/tmpqqbefukl.lua:13: in local 'candidate'\n\t/tmp/tmpqqbefukl.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = false\n    local closing =\
    \ false\n    for _, b in ipairs(brackets) do\n        if b == \"<\" then\n   \
    \         opening = true\n        elseif b == \">\" then\n            closing\
    \ = true\n        elseif opening then\n            return closing\n        end\n\
    \    end\n    return not opening and not closing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t818lhi.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1t818lhi.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opened = {}\n    local opening = false\n\
    \    for i=1,#brackets do\n        if brackets[i] == \"<\" then\n            opening\
    \ = true\n            opened.insert(i)\n        end\n        if brackets[i] ==\
    \ \">\" then\n            if opening\n                or #opened == 0\n      \
    \          or opened[#opened - 1] > i then\n                opening = false\n\
    \            else\n                opened = opened:remove(#opened - 1)\n     \
    \       end\n        end\n    end\n    return opening and opened:len() == 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_muswiq.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5_muswiq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening, closing = string.find(brackets,\
    \ \"<\"), string.find(brackets, \">\")\n  if opening == nil then return false\
    \ end\n  -- If opening and closing are the same, we found a closed bracket that\
    \ was not opened.\n  if closing == opening then return false end\n  -- If opening\
    \ and closing are both not nil, they mean the bracket is not closed.\n  if opening\
    \ ~= nil and closing ~= nil and opening ~= closing then return false end\n  --\
    \ If opening and closing are both nil, then the opening bracket is not followed\
    \ by a closing bracket.\n  return opening:not(closing)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8131vmne.lua:19: <name> expected near 'not'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   brackets = brackets:gsub(\"[<>]\", function(c)\n\
    \      if c == \"<\" then\n         return \">\"\n      elseif c == \">\" then\n\
    \         return \"<\"\n      else\n         return c\n      end\n   end)\n  \
    \ return brackets:find(\"<\") > -1 and brackets:find(\">\") > -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbb19yn76.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbb19yn76.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"<\" then\n    return false\n\
    \  end\n  if brackets == \"<>\" then\n    return true\n  end\n  if brackets ==\
    \ \"<<><>>\" then\n    return true\n  end\n  if brackets == \"<>\" then\n    return\
    \ false\n  end\n  if brackets == \"<\" then\n    return true\n  end\n  if brackets\
    \ == \"<<><>>\" then\n    return false\n  end\n  if brackets == \">>\" then\n\
    \    return false\n  end\n  if brackets == \">>>\" then\n    return true\n  end\n\
    \  if brackets == \">\" then\n    return false\n  end\n  if brackets == \"<<\"\
    \ then\n    return false\n  end\n  if brackets == \"<>\" then\n    return true\n\
    \  end\n  if brackets == \">>>\" then\n    return false\n  end\n  if brackets\
    \ == \">\" then\n    return true\n  end\n  if brackets == \"\" then\n    return\
    \ false\n  end\n  if brackets == \"<>\" then\n    return false\n  end\n  if brackets\
    \ == \"<<\" then\n    return false\n  end\n  if brackets == \">>\" then\n    return\
    \ true\n  end\n  if brackets == \">\" then\n    return true\n  end\n  if brackets\
    \ == \"<<>>\" then\n    return true\n  end\n  if brackets == \"<>\" then\n   \
    \ return false\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5my4w284.lua:80:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5my4w284.lua:80:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = 1\n  local closed = 1\n  local\
    \ index = 1\n  while opening:not(0) do\n    opening = brackets:sub(1, index -\
    \ opening)\n    closed = brackets:sub(1, index - closed + 1)\n    opening = opening:lower()\n\
    \    if opening == \"<\" then\n      closed = \"<\"\n      opening = \">\"\n \
    \   end\n    if opening == \">\" then\n      opening = \"<\"\n      closed = \"\
    >\"\n    end\n    index = index + opening:len()\n  end\n  return not closed\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphx8d7ltz.lua:15: <name> expected near 'not'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets -- brackets is a string\
    \ of \"<\" and \">\".\n  return string.find(brackets, \"<\") ~= nil and\n    \
    \     string.find(brackets, \">\") ~= nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjzniggn.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyjzniggn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {brackets}\n  for i=1,#brackets\
    \ do\n    if brackets[i] == '<' then\n      if not stack[#stack] then return false\
    \ end\n      stack[#stack] = stack[#stack] .. \">\"\n    elseif brackets[i] ==\
    \ '>' then\n      if not stack[#stack] then return false end\n      stack[#stack]\
    \ = stack[#stack] .. \"<\"\n    elseif not stack[#stack] then return false end\n\
    \    else stack[#stack] = stack[#stack] .. brackets[i] end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc_1lpt9d.lua:21: 'end' expected (to close 'for' at line 13)\
    \ near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal openings = {}\n\tlocal closings = {}\n\
    \tlocal count = 0\n\tfor c in brackets:gmatch(\"[^<>]+\") do\n\t\tif openings[c]\
    \ == nil then\n\t\t\topenings[c] = count\n\t\t\tclosings[c] = count\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\tfor k, v in pairs(openings) do\n\t\tcount = count\
    \ + 1\n\t\tassert(closings[k] ~= nil, \"missing closing bracket \" .. k .. \"\
    \ at line \" .. tostring(line))\n\t\tclosings[k] = count\n\tend\n\tcount = count\
    \ - 1\n\treturn #openings[#openings] ~= 0 and #closings[#closings] ~= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6s5pxrer.lua:28:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmp6s5pxrer.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp6s5pxrer.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"<>\", \"\")\n  return\
    \ #brackets > 0 and #brackets == #brackets:find(brackets)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdaar1ihd.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdaar1ihd.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets\
    \ = brackets:gsub(\">\", \"\")\n  brackets = brackets:gsub(\"<>\", \"\")\n  brackets\
    \ = brackets:gsub(\"><\", \"\")\n  brackets = brackets:gsub(\"<>\", \"\")\n  brackets\
    \ = brackets:gsub(\"<<>\", \"\")\n  return brackets:len() > 0 and (brackets:sub(1,\
    \ 1) == \"(\" or brackets:sub(1, 1) == \"[\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84m7dqua.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp84m7dqua.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets\
    \ = {}\n    for i = 1, #brackets do\n        local open_bracket = brackets[i]\n\
    \        if open_bracket == \">\" then\n            table.insert(open_brackets,\
    \ open_bracket)\n        elseif open_bracket == \"<\" then\n            table.insert(close_brackets,\
    \ open_bracket)\n        else\n            return false\n        end\n    end\n\
    \    for i = 1, #open_brackets do\n        if open_brackets[i] != close_brackets[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo56ftdy7.lua:25: 'then' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = {\n    [\">\"]    =\
    \ true,\n    [\"<\"]    = true,\n    [\"<=\"]   = true,\n    [\"<:\"]   = true,\n\
    \    [\"<%\"]   = true,\n    [\"<%=\"] = true,\n    [\"<%-\"]  = true,\n    [\"\
    <%-=\"] = true,\n    [\"<%+\"]  = true,\n    [\"<%+=\"] = true,\n    [\"%:\"]\
    \   = true,\n    [\"%:=\"]  = true,\n    [\"%-:\"]  = true,\n    [\"%-:=\"] =\
    \ true,\n    [\"%+:\"]  = true,\n    [\"%+:=\"] = true,\n    [\"%>\"]   = true,\n\
    \    [\"%>=\"]  = true,\n    [\"%-%\"]  = true,\n    [\"%-%=\"] = true,\n    [\"\
    %+%\"]  = true,\n    [\"%+%=\"] = true,\n    [\":>\"]   = true,\n    [\":>=\"\
    ]  = true,\n    [\":-<\"]  = true,\n    [\":-<=\"] = true,\n    [\":->\"]  = true,\n\
    \    [\":->=\"] = true,\n  }\n  local closing_brackets = {\n    [\"<\"]     =\
    \ true,\n    [\"<=\"]   = true,\n    [\"<:\"]   = true,\n    [\"<%\"]   = true,\n\
    \    [\"<%=\"] = true,\n    [\"<%-\"]  = true,\n    [\"<%-=\"] = true,\n    [\"\
    <%+\"]  = true,\n    [\"<%+=\"] = true,\n    [\"%:\"]   = true,\n    [\"%:=\"\
    ]  = true,\n    [\"%-:\"]  = true,\n    [\"%-:=\"] = true,\n    [\"%+:\"]  = true,\n\
    \    [\"%+:=\"] = true,\n    [\"%>\"]   = true,\n    [\"%>=\"]  = true,\n    [\"\
    %-%\"]  = true,\n    [\"%-%=\"] = true,\n    [\"%+%\"]  = true,\n    [\"%+%=\"\
    ] = true,\n    [\":>\"]   = true,\n    [\":>=\"]  = true,\n    [\":-<\"]  = true,\n\
    \    [\":-<=\"] = true,\n    [\":->\"]  = true,\n    [\":->=\"] = true,\n  }\n\
    \  local opening_brackets_str = table.concat(opening_brackets)\n  local closing_brackets_str\
    \ = table.concat(closing_brackets)\n  local opening_brackets_regex = string.format(\
    \ \"[%s]\", opening_brackets_str )\n  local closing_brackets_regex = string.format(\
    \ \"[%s]\", closing_brackets_str )\n  local opening_b\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9_4flbqr.lua:94: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets -- convert to string\n \
    \ return brackets:sub(1,1):find(\"<\") and brackets:sub(1,2):find(\">\") and correct_bracketing(brackets:sub(2))\
    \ or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9z3v5o7.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw9z3v5o7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local i = 0\n  while i < #brackets and i < #brackets\
    \ - 1 do\n    if brackets[i] == \"<\" then\n      if brackets[i+1] == \">\" then\n\
    \        i = i + 2\n      else\n        return false\n      end\n    elseif brackets[i]\
    \ == \">\" then\n      if brackets[i+1] == \">\" then\n        i = i + 2\n   \
    \   else\n        return true\n      end\n    else\n      return false\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwaum9s7.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxwaum9s7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening, closing = brackets:gsub(\"%a>%a<\"\
    , \"%%%1%%%2\"):gsub(\"%%%1%%%2%%%1%%%2\", \"%%%1%%%2\"):gsub(\"%%%1%%%2%%%1%%%2\"\
    , \"%%%1%%%2\"):gsub(\"%%%1%%%2%%%1%%%2\", \"%%%1%%%2\"):gsub(\"%%%1%%%2%%%1%%%2\"\
    , \"%%%1%%%2\")\n\treturn opening ~= opening ~= closing ~= closing ~= opening\
    \ ~= closing ~= opening ~= opening ~= closing ~= opening ~= closing ~= opening\
    \ ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing\
    \ ~= opening ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing\
    \ ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening\
    \ ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing\
    \ ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening\
    \ ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing\
    \ ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening\
    \ ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing\
    \ ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening\
    \ ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing\
    \ ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening\
    \ ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing\
    \ ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening\
    \ ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing\
    \ ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening\
    \ ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing\
    \ ~= opening ~= closing ~= opening ~= closing ~= opening ~= closing ~= opening\
    \ ~= closing ~= opening ~\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm3p9txcb.lua:14: 'end' expected (to close 'function' at line\
    \ 11) near '='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local i = 0\n  while i < #brackets do\n    if\
    \ brackets[i] == \"<\" then\n      i = i + 1\n      while i < #brackets and brackets[i]\
    \ ~= \">\" do\n        i = i + 1\n      end\n      return false\n    end\n   \
    \ i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhl0oi8d.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnhl0oi8d.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for idx = 1, #brackets do\n      local opening\
    \ = brackets[idx]:sub(1, 1)\n      local closing = brackets[idx]:sub(2)\n    \
    \  if not opening:find(closing) then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8wpemph.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpl8wpemph.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpl8wpemph.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    local open_bracket\
    \ = brackets[i]\n    local close_bracket = brackets[i+1]\n    local open_brackets_at\
    \ = open_bracket:find(\"#\")\n    local close_brackets_at = close_bracket:find(\"\
    #\")\n    if open_brackets_at == nil then\n      assert(close_brackets_at ~= nil,\
    \ \"Bracketing failed at character \" .. tostring(i))\n      return false\n  \
    \  end\n    if open_brackets_at > close_brackets_at then\n      -- open_brackets_at\
    \ must be before close_brackets_at in brackets string\n      return false\n  \
    \  end\n    if open_brackets_at == close_brackets_at then\n      -- open_brackets_at\
    \ must be contiguous in the brackets string\n      assert(open_bracket:sub(1,\
    \ open_brackets_at - 1) ~= close_bracket:sub(1, close_brackets_at - 1),\n    \
    \         \"Bracketing failed at character \" .. tostring(i))\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkl4wo7v8.lua:15:\
    \ attempt to index a nil value (local 'open_bracket')\nstack traceback:\n\t/tmp/tmpkl4wo7v8.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpkl4wo7v8.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   local opening = brackets:gsub(\"<\", \"\"):gsub(\"\
    >\", \"\")\n   local closing = brackets:gsub(\"<\", \"\"):gsub(\">\", \"\")\n\
    \   return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdo6fa7e.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprdo6fa7e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets, closing_brackets = brackets:match(\"\
    ([^<]+)<(%S+)(?!%>)([^>]+)$\")\n  if opening_brackets then\n    return opening_brackets\
    \ ~= closing_brackets\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeynhf1s3.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeynhf1s3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    if brackets[i]\
    \ ~= '<' then return false end\n    if brackets[i+1] == '>' then return true end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanp5dnnp.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpanp5dnnp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets, closing_brackets =\
    \ {}, {}\n    for _, pair in ipairs(brackets) do\n        local opening, closing\
    \ = pair:sub(1, -2)\n        if opening ~= \">\" then opening_brackets[opening]\
    \ = true end\n        if closing ~= \"<\" then closing_brackets[closing] = true\
    \ end\n    end\n    for opening, _ in pairs(opening_brackets) do\n        if not\
    \ closing_brackets[opening] then return false end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwg632wpf.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwg632wpf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for _, bracket in pairs(brackets) do\n    \
    \  if not ((bracket==\"<\" and brackets[bracket+1]==\">\") or\n              (bracket==\"\
    <\" and brackets[bracket+1]==\">\")) then\n         return false\n      end\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy80eyu2f.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpy80eyu2f.lua:12: in local 'candidate'\n\t/tmp/tmpy80eyu2f.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    ([^<>])\",\"%1\")\n    local closing_brackets = brackets:gsub(\"(<[^<>]+>)\",\"\
    %1\")\n    return opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvbct_cw.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcvbct_cw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = false\n  local closing = false\n\
    \  for _, bracket in ipairs(brackets) do\n    if bracket:sub(1, 1) ~= '<' then\
    \ return false end\n    opening = true\n  end\n  for _, bracket in ipairs(brackets)\
    \ do\n    if bracket:sub(1, 1) ~= '>' then return false end\n    closing = true\n\
    \  end\n  return opening and not closing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0d5hn7ev.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0d5hn7ev.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = string.gsub(brackets, \" \", \"\
    <>\")\n    for i = 1, #brackets do\n        local open = brackets[i]\n       \
    \ local close = brackets[i + 1]\n        if open ~= close then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hfy1d75.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_hfy1d75.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- For each opening bracket, check that it is\
    \ paired with a closing bracket.\n  --\n  -- (Note: This code doesn't support\
    \ nested brackets. You have to write it\n  -- yourself.)\n  local stack = {}\n\
    \  for i = 1, #brackets do\n    local char = brackets[i]\n    local is_open =\
    \ brackets[i] == \"<\"\n    if is_open then\n      stack[#stack+1] = char\n  \
    \  elseif char == \"<\" then\n      assert(stack[#stack] == nil)\n    else\n \
    \     assert(stack[#stack] == char)\n    end\n  end\n  -- If we got this far,\
    \ the brackets are correct, return True.\n  return stack[#stack] == nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr619hx2n.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr619hx2n.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- we return True if every opening bracket\
    \ has a corresponding closing bracket.\n    -- >>> correct_bracketing(\"<\")\n\
    \    -- False\n    -- >>> correct_bracketing(\"<>\")\n    -- True\n    -- >>>\
    \ correct_bracketing(\"<<><>>\")\n    -- True\n    -- >>> correct_bracketing(\"\
    ><<>\")\n    -- False\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxvldeq43.lua:39: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:len() >= 2 and brackets:sub(1,\
    \ 1):sub(1, 1):sub(1, 1) ~= brackets:sub(2, 2) ~= brackets:sub(3, 3) ~= brackets:sub(4,\
    \ 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_rtmi0f.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo_rtmi0f.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- Check for brackets\n  local opening_bracket,\
    \ closing_bracket = {}\n  for _, bracket in pairs(brackets) do\n    if opening_bracket\
    \ then\n      if not closing_bracket[bracket] then\n        return false\n   \
    \   end\n    else\n      opening_bracket, closing_bracket = {}, bracket\n    end\n\
    \  end\n  -- Check other opening brackets\n  for _, bracket in pairs(brackets)\
    \ do\n    if not opening_bracket[bracket] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp94tjsj37.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp94tjsj37.lua:14: in local 'candidate'\n\t/tmp/tmp94tjsj37.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- If brackets is an open bracket, make sure\
    \ it's followed by a closing bracket.\n\tbrackets = brackets:match(\"^([<>])+\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppo6vg4kn.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets:find(brackets, 1, false) ~=\
    \ nil and\n        brackets:find(brackets, 2, true) ~= nil and\n        brackets:find(brackets,\
    \ 3, true) ~= nil and\n        brackets:find(brackets, 4, true) ~= nil and\n \
    \       brackets:find(brackets, 5, true) ~= nil and\n        brackets:find(brackets,\
    \ 6, true) ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zuuie4a.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7zuuie4a.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- The simplest solution is to simply check\
    \ if all opening-brackets are closing brackets.\n    -- But this solution doesn't\
    \ work in all cases. For example, consider \"<<>>\".\n    --\n    -- >>> correct_bracketing(\"\
    <<>>\")\n    -- True\n    -- >>> correct_bracketing(\"<<><><<><><<>\")\n    --\
    \ True\n    -- >>> correct_bracketing(\"<<><<><><<><><<><><<><<><<><<><<><<><<><<><>\"\
    )\n    -- False\n    -- >>> correct_bracketing(\"<<><<><><<><><<><><<><<><<><<><<><><><><>\"\
    )\n    -- False\n    -- >>> correct_bracketing(\"<><<><><<><><<><><<><<><<><<><<><><><><>\"\
    )\n    -- False\n    -- >>> correct_bracketing(\"<<><>><><>><><>><><>><><>><><>><><>><><>><><>><><>><><><><><>\"\
    )\n    -- False\n    -- >>> correct_bracketing(\"<><<><>><<><>><><>><><>><><>><><><><><><><><><><><>\"\
    )\n    -- True\n    --\n    -- So we split the brackets into individual characters,\
    \ and then check that each one has the same number of closing brackets.\n    --\
    \ This is not ideal (especially because we're relying on the fact that all strings\
    \ have the same number of opening characters),\n    -- but is good enough for\
    \ our purposes.\n    --\n    -- This problem is not so easy to solve generally.\
    \ For example, consider this case:\n    --\n    -- >>> correct_bracketing(\"<><<>\"\
    )\n    -- True\n    -- >>> correct_bracketing(\"<><><<><><><<><><<><<><<><<><><><<><><<><><><><<><<><><>\"\
    )\n    -- True\n    -- >>> correct_bracketing(\"<><<><><<><><<><><<><<><<><<><><><><<><><><><><<><><><><<>\"\
    )\n    -- True\n    -- >>> correct_bracketing(\"<><<><><><><><><><><><><><><><><><><><><><><><><><><><><><>\"\
    )\n    -- True\n    -- >>> correct_bracketing(\"<<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoo4z42bv.lua:63: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"^%s*(%w+)%s*$\",\
    \ \"%1\")\n  brackets = brackets:gsub(\"(%w+)%s(%w+)\", \"%1>%2<\")\n  brackets\
    \ = brackets:gsub(\"(%w+)%s*(%w+)\", \"%1>%2<\")\n  brackets = brackets:gsub(\"\
    (%w+)%s*%(%w+)\", \"%1>%2<\")\n  brackets = brackets:gsub(\"(%w+)%s*(%w+)\", \"\
    %1>%2<\")\n  brackets = brackets:gsub(\"%s*$\", \"\"):gsub(\"%s+\", \"\"):gsub(\"\
    (%w+)%s*(%w+)\", \"%1>%2<\")\n  return brackets:find(\"<\") == nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgysi_xq.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxgysi_xq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for idx, c in ipairs(brackets) do\n      if\
    \ not ((\"<\" == c and \"</\" == c) or\n              (\">\" == c and \"/>\" ==\
    \ c) or\n              (\"<\" == c and \">\" == c)) then\n         return false\n\
    \      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_fzn_7d.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0_fzn_7d.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tbrackets = brackets:gsub(\"[<>]\", function\
    \ (x)\n\t\treturn x\n\tend)\n\tbrackets = brackets:gsub(\"<<\", \"<\")\n\tbrackets\
    \ = brackets:gsub(\">>\", \">\")\n\treturn brackets ~= brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrluizdx.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbrluizdx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for bracket, next_bracket in pairs(brackets)\
    \ do\n      if next_bracket == nil then\n         return false\n      end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphd7uu_ss.lua:34: 'end' expected (to close 'for' at line 12)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = brackets:sub(1,1)\n    local\
    \ closing = brackets:sub(2,2)\n    return opening ~= closing or opening == '<'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6vimv1i.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx6vimv1i.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"%1\")\n\
    \  return brackets ~= \"%1%1\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq12m02s.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq12m02s.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, c in ipairs(brackets) do\n    if c ==\
    \ \"<\" then\n      if brackets[i + 1] == \"<\" then\n        return false\n \
    \     elseif brackets[i + 1] == \">\" then\n        return true\n      end\n \
    \   end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80kt66gx.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp80kt66gx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"%[(%<>)%]\", function(s)\n\
    \        s = string.gsub(s, \">\", \"<\")\n        s = string.gsub(s, \"\", s)\n\
    \        return s ~= \"\"\n    end)\n    return brackets ~= \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzg88h6k.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjzg88h6k.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local b = brackets[i]\n\
    \      local e = brackets[i + 1]\n      if not (b == \"<\" and e == \">\") then\n\
    \         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7bomd3zu.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7bomd3zu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = {}\n  local close_brackets\
    \ = {}\n  local bracket_count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpntqhfrw1.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   -- assert brackets ~= '[', ']', '(', or ')'\n\
    \   if not brackets then return false end\n   local brackets = brackets:gsub('[()]',\
    \ ''):gsub('[<>]', '')\n   if brackets ~= '<>' then return false end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ltl3f3h.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7ltl3f3h.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_count = 0\n  local close_count =\
    \ 0\n  for i, c in pairs(brackets) do\n    if c == \"<\" then\n      open_count\
    \ = open_count + 1\n    elseif c == \">\" then\n      close_count = close_count\
    \ + 1\n    end\n  end\n  return open_count == close_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpboyi55u4.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpboyi55u4.lua:14: in local 'candidate'\n\t/tmp/tmpboyi55u4.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"\" then return false end\n\
    \    local open_brackets = brackets:gsub(\"%<(.*)>%\", function(m)\n        return\
    \ m\n    end):gsub(\"%([<>])\", function(m)\n        return m\n    end)\n    if\
    \ open_brackets ~= \"\" then \n        for i = 1, #open_brackets do\n        \
    \    if open_brackets:sub(i, i) == \">\" then\n                local closing_bracket\
    \ = open_brackets:sub(i, i - 1)\n                local open_bracket = open_brackets:sub(i,\
    \ i + 1)\n                return open_bracket ~= closing_bracket\n           \
    \ else\n                return false\n            end\n        end\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcefk7w3.lua:13:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmpjcefk7w3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjcefk7w3.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = brackets:gsub(\"^%<\", \"\
    <\")\n    local closing = brackets:gsub(\"%$>\", \">\")\n    local opening = opening:gsub(\"\
    [<>]\", \"\")\n    local closing = closing:gsub(\"[<>]\", \"\")\n    local opening\
    \ = opening:gsub(\"%D\", \"\")\n    local closing = closing:gsub(\"%D\", \"\"\
    )\n    return opening ~= closing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nh3oixq.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_nh3oixq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local openingBrackets = string.gsub(brackets,\
    \ \"<\", \"\") -- remove opening brackets\n    local closingBrackets = string.gsub(brackets,\
    \ \">\", \"\") -- remove closing brackets\n    local openingBracketTable = {}\n\
    \    local closingBracketTable = {}\n    for i = 1, #openingBrackets do\n    \
    \    table.insert(openingBracketTable, openingBrackets[i])\n    end\n    for i\
    \ = 1, #closingBrackets do\n        table.insert(closingBracketTable, closingBrackets[i])\n\
    \    end\n    local openingBracketCount = 1\n    local closingBracketCount = 1\n\
    \    for i = 1, #openingBracketTable do\n        openingBracketCount = openingBracketCount\
    \ + 1\n        if openingBracketTable[i] == closingBracketTable[i] then\n    \
    \        closingBracketCount = closingBracketCount + 1\n        elseif openingBracketCount\
    \ > closingBracketCount then\n            return false\n        else\n       \
    \     openingBracketCount = 1\n            closingBracketCount = 1\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3c0s4wk0.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3c0s4wk0.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      if brackets[i]\
    \ == \"<\" then\n         for j = i+1, #brackets do\n            if brackets[j]\
    \ == \">\" then\n               return true\n            end\n         end\n \
    \     end\n   end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfaiumxty.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfaiumxty.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening_brackets = {}\n\tfor b in string.gmatch(brackets,\
    \ \"%a+\") do\n\t\topening_brackets[b] = true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpognljju5.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = string.gsub(brackets, \"[<>]+\"\
    , \"\")\n    return brackets:sub(1, 1):sub(1, 1):sub(1, 1) ~= \"<>\"\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemkinvfp.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpemkinvfp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   brackets = brackets:gsub(\"[<>]\", \"%%%1\"\
    )\n   brackets = brackets:gsub(\"%%%1\", \"[<>]\")\n   return brackets:sub(1,\
    \ #brackets) == brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpakv09asd.lua:13:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpakv09asd.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpakv09asd.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- if the brackets are empty, they're not\
    \ allowed\n    if not brackets then\n        return false\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi7phnipy.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"%%%1\"\
    )\n  local closing = brackets:gsub(\"[<>]\", \"%%%2\")\n  opening = opening:gsub(\"\
    %%%2\", \"[\")\n  opening = opening:gsub(\"%%%1\", \"%\")\n  closing = closing:gsub(\"\
    %%%2\", \"]\")\n  closing = closing:gsub(\"%%%1\", \"%\")\n  return opening ==\
    \ closing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjsv3es_g.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmpjsv3es_g.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpjsv3es_g.lua:24: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets or \"\"\n  for i = 1, #brackets\
    \ do\n    if brackets[i] ~= brackets[i+1] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2f2ctuzt.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2f2ctuzt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = {}\n  local closing_brackets\
    \ = {}\n  for i = 1, #brackets do\n    local c = brackets[i]\n    if c == \"<\"\
    \ then\n      table.insert(opening_brackets, 1)\n      table.insert(closing_brackets,\
    \ 0)\n    elseif c == \">\" then\n      table.insert(opening_brackets, 0)\n  \
    \    table.insert(closing_brackets, 1)\n    elseif c == \"{\" then\n      table.insert(opening_brackets,\
    \ 0)\n    elseif c == \"}\" then\n      table.insert(closing_brackets, 0)\n  \
    \  else\n      assert(false)\n    end\n  end\n  for i = 1, #opening_brackets do\n\
    \    if opening_brackets[i] > closing_brackets[i] then\n      return false\n \
    \   end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27mg0h69.lua:27:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp27mg0h69.lua:27: in local 'candidate'\n\
    \t/tmp/tmp27mg0h69.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets\
    \ = brackets:gsub(\">\", \"\")\n  brackets = brackets:gsub(\"(<>)\", \"\")\n \
    \ brackets = brackets:gsub(\"(<<)\", \"\")\n  brackets = brackets:gsub(\">>\"\
    , \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  return brackets ~= \"\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcr9l3aq.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkcr9l3aq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tfor i=1, #brackets do\n\t\tif brackets[i] ~=\
    \ \">\" and brackets[i] ~= \"<\" then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgkdj61c.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdgkdj61c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:match(\"<%a>\") ~= nil and brackets:match(\"\
    %a>\") and brackets:sub(1, 1):match(\"<%a\") and brackets:sub(1, 1):match(\"%a>\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjat6hqr5.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjat6hqr5.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, c in ipairs(brackets) do\n    if c ==\
    \ \"<\" then\n      return not (brackets[i - 1] ~= '<' or brackets[i - 1] == \"\
    >\")\n    elseif c == \">\" then\n      return not (brackets[i - 1] ~= '<' or\
    \ brackets[i - 1] == \">\")\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphv6oe4mw.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphv6oe4mw.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = {}\n  local closing_brackets\
    \ = {}\n  for i,c in ipairs(brackets) do\n    if c == '<' then\n      table.insert(opening_brackets,\
    \ i)\n    elseif c == '>' then\n      table.insert(closing_brackets, i)\n    end\n\
    \  end\n  -- if the brackets array is empty, return true\n  if #opening_brackets\
    \ == 0 and #closing_brackets == 0 then\n    return true\n  end\n  for _,i in ipairs(opening_brackets)\
    \ do\n    for _,j in ipairs(closing_brackets) do\n      if j > i then\n      \
    \  break\n      else\n        j = j + 1\n      end\n      if j > #opening_brackets\
    \ then\n        return false\n      end\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42yxcc36.lua:47:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp42yxcc36.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[<>]\"\
    , \"%1\")\n  local close_brackets = open_brackets:gsub(\"%1\", \"[<>]\")\n  --\
    \ if open_brackets = close_brackets then\n  --   return true\n  -- end\n  return\
    \ open_brackets ~= close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ovv8omx.lua:13:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmp3ovv8omx.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp3ovv8omx.lua:23: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets -- string\n  for i = 1,\
    \ #brackets do\n    if brackets[i] == \"<\" then\n      if not (i ~= #brackets)\
    \ then\n        -- if the next bracket is not the last, bracketing is incorrect\n\
    \        return false\n      end\n      -- if we are at the end of the string,\
    \ the bracketing must be right\n      return true\n    end\n    if brackets[i]\
    \ == \">\" then\n      -- if we are at the end of the string, this bracket must\
    \ be right\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk7f1elh.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfk7f1elh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tbrackets = brackets:gsub(\"^%[(%.-).-%](%)$\"\
    , function(c) c==brackets[1] then brackets[1]=brackets[2] or brackets[1] end end)\
    \ -- replace opening brackets that are not followed by a closing bracket with\
    \ their closing bracket.\n\treturn brackets:gsub(\"[<>]\", function(c) return\
    \ c==\"<\" then \"<\" else \">\" end end):gsub(\"%</\", function(c) return c==\"\
    <\" then \"<\" else \">\" end end)==brackets -- remove any remaining brackets\
    \ that are not the original ones.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp29aeux8v.lua:12: syntax error near '=='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == nil then\n        return true\n\
    \    end\n    -- check for balanced brackets\n    local opening = 0\n    local\
    \ closing = 0\n    local stack = {}\n    for idx = 1, #brackets do\n        local\
    \ c = string.sub(brackets, idx, idx)\n        local isopen = brackets[c] and brackets[c]\
    \ ~= '{'\n        local ispotenum = string.find(brackets, c, \"%w\")\n       \
    \ if c == \"<\" then\n            if opening == 0 then\n                stack[#stack\
    \ + 1] = c\n                opening = ispotenum\n            else\n          \
    \      closing = ispotenum\n                if opening and opening > opening +\
    \ 1 then\n                    opening = opening - 1\n                else\n  \
    \                  opening = nil\n                end\n            end\n     \
    \   elseif c == \">\" then\n            if opening ~= 0 then\n               \
    \ if stack[#stack] > c then\n                    stack[#stack] = c\n         \
    \           opening = nil\n                else\n                    closing =\
    \ ispotenum\n                    if closing and closing > closing - 1 then\n \
    \                       closing = closing - 1\n                    else\n    \
    \                    closing = nil\n                    end\n                end\n\
    \            end\n        elseif c == '{' then\n            opening = ispotenum\n\
    \        elseif c == '}' then\n            if opening and opening > opening +\
    \ 1 then\n                opening = opening - 1\n            else\n          \
    \      opening = nil\n            end\n        end\n    end\n    return #stack\
    \ == 0 and opening and closing and opening > closing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuxot449r.lua:22:\
    \ bad argument #3 to 'find' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpuxot449r.lua:22: in local 'candidate'\n\t/tmp/tmpuxot449r.lua:65: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   brackets = brackets:gsub(\"[<>]\", \"\")\n\
    \   local brackets_counts = {}\n   for i = 1, #brackets do\n      local open_count\
    \ = 1\n      local close_count = 1\n      local open = brackets[i]\n      while\
    \ open:sub(1, 1) == \"<\" do\n         open_count = open_count + 1\n         open\
    \ = open:sub(2)\n      end\n      while open:sub(1, 1) == \">\" do\n         close_count\
    \ = close_count + 1\n         open = open:sub(2)\n      end\n      brackets_counts[open_count]\
    \ = open_count - close_count\n   end\n   for i = 1, #brackets do\n      local\
    \ open = brackets[i]\n      while open:sub(1, 1) == \"<\" do\n         open =\
    \ open:sub(2)\n         if open:sub(1, 1) == \"<\" then\n            return false\n\
    \         end\n      end\n      while open:sub(1, 1) == \">\" do\n         open\
    \ = open:sub(2)\n         if open:sub(1, 1) == \">\" then\n            return\
    \ false\n         end\n      end\n      if brackets_counts[#brackets_counts +\
    \ 1] == 0 then\n         return false\n      end\n   end\n   return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v9fy3yx.lua:56:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5v9fy3yx.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opens = io.lines(brackets)\n  local closes\
    \ = io.lines(\"<\"..brackets..\">\")\n  -- assert that every open bracket has\
    \ a corresponding close bracket.\n  local function not_closed(i)\n    return #opens[i]\
    \ < #closes[i]\n  end\n  -- check each pair of open brackets\n  for i, open1 in\
    \ ipairs(opens) do\n    local open2 = opens[i]\n    for j, bracket1 in ipairs(open1)\
    \ do\n      local bracket2 = open2[j]\n      -- assert that every bracket has\
    \ a corresponding closing bracket.\n      if bracket1 ~= bracket2 then\n     \
    \   return false\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm9eju5kb.lua:12:\
    \ cannot open file '<>' (No such file or directory)\nstack traceback:\n\t/tmp/tmpm9eju5kb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpm9eju5kb.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets or \"\"\n    for idx =\
    \ 1, #brackets do\n        local opening_bracket = brackets[idx:find(brackets,\
    \ \"[\", idx)]\n        if opening_bracket == nil then\n            return false\n\
    \        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoy0uaipa.lua:36: 'end' expected (to close 'for' at line 13)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    ^<\",\"<\")\n    local closing_brackets = brackets:gsub(\"^>\", \">\")\n    return\
    \ opening_brackets == closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxccx5f02.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxccx5f02.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    for i,c in pairs(brackets) do\n        if\
    \ c:find(\">\") then\n            local open_bracket = brackets[i]:find(\">\"\
    )\n            if open_bracket ~= nil then\n                local close_bracket\
    \ = brackets[i]:find(\"<\")\n                if close_bracket ~= nil then\n  \
    \                  if close_bracket ~= open_bracket-1 then\n                 \
    \       return false\n                    end\n                end\n         \
    \   end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4ge_qqs.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpq4ge_qqs.lua:12: in local 'candidate'\n\t/tmp/tmpq4ge_qqs.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets_map = brackets:gsub(\"[^<>]+\"\
    , \"%1\")\n  return brackets:gsub(\"(<)(%1)(>)\", function(s, l, b, r)\n    return\
    \ brackets_map[b] == brackets_map[r] and\n           #brackets_map[b] == #brackets_map[r]\
    \ and\n           #b + 1 == #r and\n           l[#b] == \">\" and\n          \
    \ not (brackets_map[b] and brackets_map[r])\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nfwgmoa.lua:25:\
    \ expected: true, actual: \"<>\"\nstack traceback:\n\t/tmp/tmp0nfwgmoa.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- assert brackets ~= \"\", \"brackets cannot\
    \ be empty\"\n  brackets = brackets:gsub(\"<([{])\", function(a, b) return \"\
    [\" .. b .. \"]\" end)\n  brackets = brackets:gsub(\"([})])\", function(a, b)\
    \ return a .. \"[\" .. b .. \"]\" end)\n  brackets = brackets:gsub(\"([^{}])\"\
    , function(a, b) return \"[\" .. a .. \"]\" end)\n  brackets = brackets:gsub(\"\
    ([{}])\", function(a, b) return \"[\" .. b .. \"]\" end)\n  return brackets:match(\"\
    <{([}]\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1dxon94.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpb1dxon94.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local brackets = brackets:gsub(\"[<>]\", \"\
    %%%1\")\n    for i = 1, #brackets do\n        if brackets[i] ~= brackets[i+1]\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0t7eaz6.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz0t7eaz6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:sub(1,1):find(\"<\") == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjab_0dwi.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjab_0dwi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for _, bracket in pairs(brackets) do\n    \
    \  if bracket:find(bracket:sub(1, 1)) == nil then\n         return false\n   \
    \   end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7lc4_1w.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpm7lc4_1w.lua:12: in local 'candidate'\n\t/tmp/tmpm7lc4_1w.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local index = 0\n    while index <= #brackets\
    \ do\n        if brackets[index] ~= '<' then\n            if brackets[index] ~=\
    \ '>' then\n                return false\n            end\n        end\n     \
    \   index = index + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3m3u8b7.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj3m3u8b7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal num_openings = #brackets\n\tlocal opening\
    \ = {}\n\tlocal closing = {}\n\tfor idx = 1, num_openings do\n\t\tlocal open =\
    \ brackets:sub(1, idx)\n\t\tlocal close = brackets:sub(idx + 1)\n\t\ttable.insert(opening,\
    \ open)\n\t\ttable.insert(closing, close)\n\tend\n\tlocal opening_found = false\n\
    \tlocal closing_found = false\n\tfor idx = 1, num_openings do\n\t\tlocal open\
    \ = brackets:sub(1, idx)\n\t\tlocal close = brackets:sub(idx + 1)\n\t\tif open\
    \ == open then\n\t\t\topening_found = true\n\t\telseif open == close then\n\t\t\
    \tclosing_found = true\n\t\tend\n\tend\n\tif opening_found then\n\t\treturn true\n\
    \telseif closing_found then\n\t\treturn false\n\telse\n\t\treturn num_openings\
    \ == #opening\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vjn2shv.lua:48:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_vjn2shv.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets:match(\"^<%%(>)?([^%]+)%.%%(>)?%>$\"\
    ) then\n        return brackets:gsub(\"^<%%(>)?\", \"<\"):gsub(\"%.%%(>)?>$\"\
    , \">\")\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3ldty3m.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx3ldty3m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"%s*()%s*[<>]\"\
    ) % brackets\n  brackets = brackets:gsub(\"(%s*)(%s*)\", \"%1*%2\") -- remove\
    \ inner brackets\n  brackets = brackets:gsub(\"(%s*)(%s*)(%s*)\", \"%1%2*%3*%4*%2\"\
    ) -- remove outer brackets\n  brackets = brackets:gsub(\"^(%s*)(%s*)(%s*)$\",\
    \ \"%1%2*%3*%4\") -- remove entire brackets if they're at the beginning\n  return\
    \ brackets == \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwekb6b_.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpkwekb6b_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpkwekb6b_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets ~= \"\" and brackets ~= nil then\n\
    \        brackets = brackets .. \"{\"\n        while true do\n            local\
    \ opening = brackets:find(\"<\")\n            local closing = brackets:find(\"\
    >\")\n            if opening ~= nil and closing ~= nil then\n                if\
    \ opening < closing then\n                    return false\n                else\n\
    \                    return true\n                end\n            else\n    \
    \            break\n            end\n        end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvolh__wv.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvolh__wv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening, closing, empty = brackets:gsub(\"\
    ^(<)(>)$\",\"%1%2\"):gsub(\"(<)(>)\",\"%2%1\")\n  local bracket_count = #opening\
    \ - #closing\n  return bracket_count == 0 and empty ~= \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12k__c40.lua:13:\
    \ attempt to get length of a number value (local 'closing')\nstack traceback:\n\
    \t/tmp/tmp12k__c40.lua:13: in local 'candidate'\n\t/tmp/tmp12k__c40.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    ,\"\"):gsub(\">\",\"\")\n  for i = 1,#opening_brackets do\n    if opening_brackets[i]:sub(1,1)\
    \ ~= opening_brackets[i+1]:sub(1,1) then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudfdgqmr.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpudfdgqmr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets or \"\"\n  local opening,\
    \ closing, opening_count, closing_count\n  local opening, closing, opening_count,\
    \ closing_count = unpack(brackets)\n  for i = 1, #opening do\n    opening_count\
    \ = opening_count or 0\n    if opening_count > 0 then\n      local closing_idx\
    \ = #closing + opening_count - 1\n      while opening_count > 0 do\n        local\
    \ closing_idx = closing_idx - 1\n        if closing_idx < 0 then\n          return\
    \ false\n        end\n        local open_char = closing[closing_idx]\n       \
    \ if open_char == \"<\" then\n          opening_count = opening_count - 1\n  \
    \      elseif open_char == \">\" then\n          closing_count = closing_count\
    \ + 1\n        else\n          opening_count = opening_count - 1\n        end\n\
    \      end\n    end\n    if closing_count > 0 then\n      local opening_idx =\
    \ #opening + opening_count + 1\n      for i = opening_idx, #opening do\n     \
    \   local open_char = opening[i]\n        if open_char == \"<\" then\n       \
    \   opening_count = opening_count + 1\n        elseif open_char == \">\" then\n\
    \          opening_count = opening_count - 1\n        end\n      end\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8o30zgqz.lua:14:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8o30zgqz.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp8o30zgqz.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_pairs = brackets:gsub(\"%b()()\"\
    , \"%w\"):map(function(s)\n    return s..\">\"\n  end)\n  return #bracket_pairs\
    \ > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptt5hdz69.lua:12:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmptt5hdz69.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmptt5hdz69.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, c in ipairs(brackets) do\n    local opening\
    \ = c:match(\"^<\") -- get the opening bracket.\n    if not opening then break\
    \ end\n    local closing = c:match(\"^>\") -- get the closing bracket.\n    if\
    \ not closing then break end\n    if opening ~= closing then break end\n  end\n\
    \  return not i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye91rkyt.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpye91rkyt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local num_opening = 1\n    local num_closing\
    \ = 0\n    for _, bracket in ipairs(brackets) do\n        if bracket == \"<\"\
    \ then\n            num_opening = num_opening + 1\n        elseif bracket == \"\
    >\" then\n            num_closing = num_closing + 1\n        else\n          \
    \  return false\n        end\n    end\n    return num_opening = num_closing and\
    \ (num_opening > num_closing)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4jixdxuq.lua:23: 'end' expected (to close 'function' at line\
    \ 11) near '='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = brackets:find(\"<\")\n   \
    \ for i = #brackets, 1, -1 do\n        if brackets:sub(i, i):find(\">\") > -1\
    \ then return false end\n    end\n    return opening ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4wuqypr.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt4wuqypr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return brackets == string.format(\"<%d><%d><%d>\"\
    , brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6_b9tpb.lua:12:\
    \ bad argument #2 to 'format' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpx6_b9tpb.lua:12: in local 'candidate'\n\t/tmp/tmpx6_b9tpb.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ return brackets:sub(1, 1)  ~= brackets:sub(brackets:len()-1, brackets:len())\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkm45fgf.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjkm45fgf.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:gsub(\"[<>]\", function(x)\n\
    \    return x ~= brackets[1] and\n           x ~= brackets[2] and\n          \
    \ x ~= brackets[3] and\n           x ~= brackets[4] and\n           x ~= brackets[5]\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_81pgn9.lua:12:\
    \ invalid replacement value (a boolean)\nstack traceback:\n\t/tmp/tmpj_81pgn9.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpj_81pgn9.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      if brackets[i]\
    \ ~= \">\" and brackets[i] ~= \"<\" then\n         return false\n      elseif\
    \ brackets[i] == \"<\" then\n         if brackets[i+1] ~= \">\" then\n       \
    \     return false\n         end\n      elseif brackets[i] == \">\" then\n   \
    \      if brackets[i+1] ~= \"<\" then\n            return false\n         end\n\
    \      elseif brackets[i] == \"<\" then\n         if brackets[i+1] ~= \"<\" then\n\
    \            return false\n         end\n      elseif brackets[i] == \">\" then\n\
    \         if brackets[i+1] ~= \">\" then\n            return false\n         end\n\
    \      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzyt9lcv.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfzyt9lcv.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tbrackets = brackets:gsub('%(.-$)', '')\n\tif\
    \ brackets:sub(1, 1) ~= '<' then\n\t\treturn false\n\tend\n\tlocal openings =\
    \ brackets:gsub('<(.+)>', '%%1')\n\tlocal closings = brackets:gsub('%(.-)<', '%%1')\n\
    \treturn openings == closings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j7bp4f1.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1j7bp4f1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return #brackets > 0 and #brackets - 1 == #(brackets)\
    \ - #brackets and brackets[1] == brackets[#brackets] and all(sub(brackets, \"\
    <>\") == \"<\"..\">\" or sub(brackets, \"<>\") == \"<\"..\">>\"..\"<\"..\">\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ig53a_e.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ig53a_e.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:find(\"<\")\n  local\
    \ closing = brackets:find(\">\")\n  return opening and closing and (opening -\
    \ closing + 1) == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuxupc3z.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnuxupc3z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \" \")\n  local opening_brackets = opening_brackets:gsub(\"^ +\", \" \")\n \
    \ local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets = opening_brackets:gsub(\"\
    ^ +$\", \"\")\n  local opening_brackets = opening_brackets:gsub(\"^ \", \"\")\n\
    \  local opening_brackets = opening_brackets:gsub(\"^ +$\", \"\")\n  local opening_brackets\
    \ = opening_brackets:gsub(\"^ \", \"\")\n  local opening_brackets = open\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1ew4wvvn.lua:55: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets = brackets:gsub(\"[<>]\", \"\
    |\")\n  return string.find(brackets, \"|\") ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iwzewvy.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3iwzewvy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"<(%.-).*?\\1>\",\"\
    %%%1\")\n  return brackets:find(\"%%%2\") ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mwdk15h.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4mwdk15h.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:match(\"<\")\n  return\
    \ opening and opening ~= \">\" and opening ~= \"<>\" and opening ~= \"<=\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqc3l1uzx.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqc3l1uzx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"<\" then return false end\n\
    \  local open_brackets = string.gmatch(brackets, \"[^<]+\")\n  for i = 1, #open_brackets\
    \ do\n    if not open_brackets[i]:find(\">\") then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpse8aor8e.lua:14:\
    \ attempt to get length of a function value (local 'open_brackets')\nstack traceback:\n\
    \t/tmp/tmpse8aor8e.lua:14: in local 'candidate'\n\t/tmp/tmpse8aor8e.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = {}\n  local closing_brackets\
    \ = {}\n  for i = 1, #brackets do\n    if brackets[i:i] == \">\" then\n      table.insert(closing_brackets,\
    \ brackets[i+1])\n    elseif brackets[i:i] ~= \"<\" then\n      table.insert(opening_brackets,\
    \ brackets[i])\n    end\n  end\n  return #opening_brackets == #closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsij6vx17.lua:15: function arguments expected near ']'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   -- We count the number of opening brackets\n\
    \   local count = 0\n   \n   -- For each opening bracket we find its corresponding\
    \ closing bracket\n   for i=1, #brackets, 1 do\n      local opening = brackets[i]\n\
    \      local closing = brackets[i+1]\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplqcnus5d.lua:37: 'end' expected (to close 'for' at line 16)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    <(%w+)(%>)\", \"%1\")\n    local closing_brackets = brackets:gsub(\"<(%w+)(%>%>)\"\
    , \"%1\")\n    return opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdl5nrqj.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfdl5nrqj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = {}\n  for match in (brackets):gmatch(\"\
    ([^<>]+)\"..\"|\") do\n    open_brackets[match] = true\n  end\n  local close_brackets\
    \ = open_brackets\n  close_brackets[\"]\"] = true\n  close_brackets[\"<\"] = true\n\
    \  close_brackets[\">\"] = true\n  for match in (open_brackets):gmatch(\"<([^<>]+)\"\
    ..\"|\") do\n    if not close_brackets[match] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp93ey1ta.lua:20:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpp93ey1ta.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpp93ey1ta.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"[<>]\", function(char)\n\
    \        local pos = string.find(brackets, char, 1)\n        if pos > 0 then\n\
    \            brackets = brackets:gsub(char, \">\")\n        elseif char == \"\
    >\" then\n            brackets = brackets:gsub(char, \"<\")\n        else\n  \
    \          brackets = brackets:gsub(char, \"<\")\n        end\n        return\
    \ brackets\n    end)\n    return brackets:sub(1, 1) == brackets:sub(2, 1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaekzvykw.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaekzvykw.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"([<])\", function(c)\
    \ return \"<\" end)\n  local closing = brackets:gsub(\"(>)\", function(c) return\
    \ \">\" end)\n  return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41mc2xb6.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp41mc2xb6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   local pos = 0\n   while pos <= #brackets do\n\
    \      local opening = brackets[pos]\n      pos = pos + 1\n      if opening ==\
    \ \"<\" then\n         pos = pos + 1\n         if brackets[pos] ~= \">\" then\n\
    \            pos = pos + 1\n         else\n            pos = pos + 1\n       \
    \  end\n      elseif opening == \">\" then\n         return false\n      end\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jewxotm.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4jewxotm.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local brackets = brackets:gsub(\"<>\", \"\"\
    )\n    for i = 1, #brackets, 1 do\n        if brackets[i]:sub(1,1) ~= brackets[i+1]:sub(#brackets[i+1]\
    \ - #brackets[i] + 2, #brackets[i+1]) then\n            return false\n       \
    \ end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkboh2auo.lua:14:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpkboh2auo.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpkboh2auo.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets ~= \"<>\" then return false end\n\
    \  local i = 1\n  local n = #brackets\n  while i < n do\n    i = i + 1 -- skip\
    \ the '<'\n    local j = i - 1\n    while j > 0 and brackets[j] == brackets[i]\
    \ do\n      j = j - 1\n    end\n    if brackets[i] == \"<\" then\n      local\
    \ j = 1\n      while j < n and brackets[j] == brackets[i] do\n        j = j +\
    \ 1\n      end\n      if j > i then return false end\n    end\n    i = i + 1\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyvnm0to.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkyvnm0to.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = brackets:gsub(\"[<>]+\"\
    , \" \")\n    local close_brackets = open_brackets:gsub(\"<\", \"\"):gsub(\">\"\
    , \"\"):gsub(\"<>\", \"\")\n    return open_brackets:len() == close_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2ck7giu.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt2ck7giu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = false\n    brackets:gsub(\"\
    ^(<%a>)(%a>)(%a>)(<%a>)$\", \"%2 %4 %6 %8\"):gsub(\"^%a>$\", \"\"):gsub(\"^%a%>$\"\
    , \"\"):gsub(\"^%a>%>$\", \"\")\n    if brackets == \"<>\" then\n        return\
    \ true\n    elseif brackets == \"<%>\" then\n        result = true\n    elseif\
    \ brackets == \"<%<\" then\n        result = true\n    elseif brackets == \"<%\"\
    \ then\n        result = true\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl25jd66g.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl25jd66g.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tfor _, bracket in ipairs(brackets) do\n\t\t\
    if string.find(bracket, \"<\") > string.find(bracket, \">\") then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq576kb7g.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq576kb7g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"<>\",\"<,>\")\n \
    \ return brackets:match(\"<([^,>]+)>\") ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jcky64z.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5jcky64z.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- remove all whitespace in brackets\n  brackets\
    \ = string.gsub(brackets, \" \", \"\")\n  -- remove all \"<\"\n  brackets = string.gsub(brackets,\
    \ \"<\", \"\")\n  -- remove all \">\"\n  brackets = string.gsub(brackets, \">\"\
    , \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\
    \")\n  -- remove all \"<<<>>>\"\n  brackets = string.gsub(brackets, \"<<<>>>\"\
    , \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\
    \")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n\
    \  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  --\
    \ remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove\
    \ all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all\
    \ \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"\
    <>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\
    \n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n \
    \ brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n  brackets\
    \ = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n  brackets =\
    \ string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets,\
    \ \"<>\", \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"\
    <>\", \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\"\
    , \"\")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\
    \")\n  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n\
    \  -- remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  --\
    \ remove all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove\
    \ all \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all\
    \ \"<>\"\n  brackets = string.gsub(brackets, \"<>\", \"\")\n  -- remove all \"\
    <\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv6saz_f4.lua:81: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return (string.find(brackets, \"<\") == 1)\
    \ and (string.find(brackets, \">\") == -1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxokiavr.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqxokiavr.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"<|>\"\
    , \"\")\n  for i, open_bracket in ipairs(open_brackets) do\n    if not (open_bracket:sub(1,\
    \ 1) ~= open_bracket:sub(#open_brackets, 1)) then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwsaevm7.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptwsaevm7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = {}\n  local closing = {}\n \
    \ local open = 0\n  local close = 0\n  for i = 1, #brackets do\n    local opening\
    \ = brackets[i]\n    if opening ~= \"<\" then\n      open = open\n    else\n \
    \     open = open + 1\n    end\n    opening = \"<\"\n    if opening ~= \">\" then\n\
    \      close = close\n    else\n      close = close + 1\n    end\n    closing\
    \ = \">\"\n    if opening ~= closing then\n      return false\n    end\n  end\n\
    \  -- we didn't find any brackets matching the pattern\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zse_drp.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0zse_drp.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if brackets ~= '<>' and brackets ~= '<>&' then\
    \ return false end\n   if brackets ~= '<>' and brackets ~= '<>&' then return false\
    \ end\n   if brackets ~= '<>' and brackets ~= '<>&' then return false end\n  \
    \ if brackets ~= '<>' then return true end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ryrxf2i.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_ryrxf2i.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local has_wrong_bracketing = false\n    local\
    \ opening_brackets, _ = string.find(brackets, \"<\")\n    local closing_brackets,\
    \ _ = string.find(brackets, \">\")\n    while opening_brackets do\n        local\
    \ next_opening_brackets, next_closing_brackets = string.find(brackets, opening_brackets\
    \ .. \">\")\n        if not next_opening_brackets then\n            return false\n\
    \        end\n        if next_closing_brackets <= opening_brackets then\n    \
    \        has_wrong_bracketing = true\n        end\n        opening_brackets =\
    \ next_opening_brackets\n        closing_brackets = next_closing_brackets\n  \
    \  end\n    return not has_wrong_bracketing\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfi3p11x.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsfi3p11x.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- Check each opening bracket has exactly one\
    \ corresponding closing bracket.\n  for _, opening_bracket in ipairs(brackets)\
    \ do\n    local count = brackets:count(opening_bracket)\n    if count > 1 then\n\
    \      return false\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz5r77rvx.lua:37: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_bracket = brackets[1]\n    local\
    \ close_bracket = brackets[2]\n    local open_bracket_index = 1 -- indexing starts\
    \ at 1, not 0.\n    while open_bracket ~= nil do\n        local close_bracket_index\
    \ = string.find(brackets, \"<\" .. open_bracket .. \">\", open_bracket_index +\
    \ 1)\n        if close_bracket_index > open_bracket_index then\n            return\
    \ false\n        end\n        open_bracket_index = close_bracket_index\n     \
    \   open_bracket = brackets[open_bracket_index]\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl_9zo2r.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprl_9zo2r.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\",function(c)\n\
    \    if c == \"<\" then return \">\" end\n    if c == \"<\" then return \">\"\
    \ end\n    if c == \"<\" then return \">\" end\n    return c\n  end)\n  brackets\
    \ = brackets:gsub(\"<>\",\"<\")\n  brackets = brackets:gsub(\"<\",\"<\")\n  brackets\
    \ = brackets:gsub(\">>\",\"<\")\n  brackets = brackets:gsub(\">\",\"<\")\n  brackets\
    \ = brackets:gsub(\"<>\",\"<\")\n  return brackets:match(\"<%([%{])%([%])%(%)}%([%])%\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh0scuku.lua:29:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqh0scuku.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  local opening_brackets =\
    \ {}\n  for i = 1, #brackets do\n    local b = brackets[i]\n    if b == \"<\"\
    \ then\n      if #stack > 0 then\n        stack[#stack + 1] = \">\"\n      else\n\
    \        stack[#stack + 1] = b\n      end\n    elseif b == \">\" then\n      if\
    \ #stack > 0 then\n        local opening = stack[#stack]\n        if opening ~=\
    \ nil then\n          if opening ~= b then\n            opening_brackets[#opening_brackets\
    \ + 1] = b\n          end\n          stack[#stack + 1] = nil\n        else\n \
    \         stack[#stack + 1] = b\n        end\n      else\n        stack[#stack\
    \ + 1] = b\n      end\n    elseif b == \"{\" then\n      if #stack > 0 then\n\
    \        local opening = stack[#stack]\n        if opening ~= nil then\n     \
    \     stack[#stack + 1] = b\n        else\n          opening_brackets[#opening_brackets\
    \ + 1] = b\n        end\n      end\n    elseif b == \"}\" then\n      while #stack\
    \ > 0 and stack[#stack] == nil do\n        stack[#stack] = stack[#stack + 1]\n\
    \      end\n      local opening = stack[#stack]\n      if opening ~= nil then\n\
    \        stack[#stack + 1] = b\n      else\n        opening_brackets[#opening_brackets\
    \ + 1] = b\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpngk4q71a.lua:75: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets = {brackets, brackets}\n  local\
    \ opening = brackets:gsub(\"[<>]+\", \"<%1%>\")\n  local closing = brackets:gsub(\"\
    <%1%>+\", \"%1%\")\n  return (opening ~= closing)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimvmeht_.lua:13:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpimvmeht_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpimvmeht_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opened = {}\n  for i = 1, #brackets do\n\
    \    local char = brackets[i]\n    if char == \"<\" then\n      table.insert(opened,\
    \ 1)\n    elseif char == \">\" then\n      local open = #opened - 1\n      if\
    \ open == 0 then return false end\n      table.insert(opened, open)\n    end\n\
    \  end\n  if #opened == 0 then return false end\n  local last = #opened - 1\n\
    \  for i = #brackets, 1, -1 do\n    local char = brackets[i]\n    if char == \"\
    <\" then\n      table.insert(opened, 1)\n    elseif char == \">\" then\n     \
    \ local open = #opened - 1\n      if open == 0 then return false end\n      if\
    \ open[last] ~= 1 then return false end\n      table.remove(opened, last)\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tgpi4ys.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2tgpi4ys.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   local stack = {}\n   for i = 1, #brackets do\n\
    \      local c = brackets[i]\n      if c == \"<\" then\n         if stack[#stack]\
    \ == nil then\n            stack[#stack] = i\n         elseif stack[#stack] ==\
    \ i then\n            stack[#stack] = nil\n         else\n            return false\n\
    \         end\n      elseif c == \">\" then\n         if #stack == 0 then\n  \
    \          return true\n         elseif stack[#stack] == i then\n            stack[#stack]\
    \ = nil\n         else\n            return false\n         end\n      end\n  \
    \ end\n   return stack[#stack] == nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdm7p4vz.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgdm7p4vz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"\" then return false end\n\
    \    local openings = {}\n    local closings = {}\n    for i, c in ipairs(brackets)\
    \ do\n        if c == \"<\" then openings[#openings + 1] = i end\n        if c\
    \ == \"<\" then closings[#closings + 1] = i end\n    end\n    if #openings ==\
    \ 0 then return false end\n    if #closings == 0 then return false end\n    for\
    \ i = 1, #openings do\n        local open, close = openings[i], closings[i]\n\
    \        if open > close then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv08qzzal.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv08qzzal.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets ~= \"\" and brackets:gsub(\"\
    [<>]\", \"\")\n    -- Easy case\n    if brackets == \"<>\" then return true end\n\
    \    if brackets ~= \"\" then\n        local opening_brackets, closing_brackets\
    \ = brackets:gsub(\"%b(\", \"%s*\"), brackets:gsub(\"%b%)\", \"%s*\")\n      \
    \  for opening, closing in pairs(opening_brackets) do\n            if not (opening:find(closing))\
    \ then return false end\n        end\n    end\n    -- If we don't have an opening\
    \ or closing bracket, return false.\n    return true\nend\n</code>\n<|/ a tags=lua-patterns,lua,string-matching\
    \ dscore=2 |>\n<| a tags=lua-patterns,lua,string-matching |>\nHere's one with\
    \ single pass:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzhmlugpc.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets == \"<\" and (\n    brackets\
    \ == \"<<\" or brackets == \"<><\" or brackets == \"<<<\" or brackets == \"<><>\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt21ijm3f.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt21ijm3f.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   assert(brackets:find(\"^<[^>]+>$\"))\n   local\
    \ opening_brackets = brackets:gsub(\"^<\",\"\")\n   local closing_brackets = brackets:gsub(\"\
    ^>\",\"\")\n   local is_open = opening_brackets:sub(1, 1):find(\"^<\")\n   local\
    \ is_closed = closing_brackets:sub(1, 1):find(\"^>\")\n   if is_open then\n  \
    \    local opening_brackets = opening_brackets:sub(2)\n      local closed_brackets\
    \ = closing_brackets:sub(1)\n      assert(opening_brackets:find(\">=\") and opening_brackets:find(\"\
    <=\"))\n      assert(closed_brackets:find(\">=\") and closed_brackets:find(\"\
    <=\"))\n      return opening_brackets:find(\"=\") and closed_brackets:find(\"\
    =\") == nil\n   else\n      return false\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpez3__ueg.lua:12:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpez3__ueg.lua:12: in local 'candidate'\n\
    \t/tmp/tmpez3__ueg.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = {}\n  for i,c in ipairs(brackets)\
    \ do\n    if c == \"<\" then\n      table.insert(opening_brackets,i)\n    end\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdksox2og.lua:36: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
