name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n-- >>> flip_case('Hello')\n-- 'hELLO'\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return string.gsub(string.lower, \"%l\", string.upper) .. string.gsub(string.upper,\
    \ \"%l\", string.lower)\nend", "  local new_string = ''\n  for i = 1, #string\
    \ do\n    local character = string.sub(i, i)\n    new_string = new_string .. string.sub(string,\
    \ i, i):lower() .. string.sub(string, i + 1, i + 1)\n  end\n  return new_string\n\
    end\n</cell>\n<cell>", "    if string.chartype then\n        return string.chartype(string.gsub(string,\
    \ '^%s+', function(s) return s.upper() end))\n    else\n        return string\n\
    \    end\nend", "  local result = string\n  result = string.gsub(result, '^([a-z])',\
    \ function(v)\n    local lower = string.lower(v)\n    local upper = string.upper(v)\n\
    \    return lower .. upper\n  end)\n  result = string.gsub(result, '([A-Z])',\
    \ function(v)\n    local lower = string.lower(v)\n    local upper = string.upper(v)\n\
    \    return upper .. lower\n  end)\n  return result\nend", "  local result = string\n\
    \  local new_char\n  -- Handle empty string\n  if not string then return '' end\n\
    \  -- Handle non-uppercase characters\n  if string:byte(1, 1) ~= 'A' then\n  \
    \  return string\n  end\n  -- Handle uppercase characters\n  new_char = 'a'\n\
    \  for i = 2, string:byte(1, 1) do\n    local c = string.byte(string, i)\n   \
    \ new_char = string.byte(new_char, c:byte(1, 1):byte(1, 1):byte(1, 1)) + string.byte(new_char,\
    \ 'A') - 'a'\n  end\n  return new_char\nend", "    return string.gsub(' ', function(c)\n\
    \        if c:lower() == c then\n            return c:upper()\n        else\n\
    \            return c:lower()\n        end\n    end)\nend", "  for i = 1, #string\
    \ do\n    local char = string.sub(i, i)\n    if char == \"a\" then\n      string.sub(i,\
    \ 1, string.sub(i, 1, 1):upper())\n    end\n    if char == \"A\" then\n      string.sub(i,\
    \ 1, string.sub(i, 1, 1):lower())\n    end\n    if char == \"e\" then\n      string.sub(i,\
    \ 1, string.sub(i, 1, 1):lower())\n    end\n    if char == \"E\" then\n      string.sub(i,\
    \ 1, string.sub(i, 1, 1):upper())\n    end\n  end\n  return string\nend", "  \
    \  local new_string = string:gsub('%l', function(c)\n        if c:lower() == 'a'\
    \ then\n            return 'A'\n        elseif c:lower() == 'b' then\n       \
    \     return 'B'\n        elseif c:lower() == 'c' then\n            return 'C'\n\
    \        elseif c:lower() == 'd' then\n            return 'D'\n        elseif\
    \ c:lower() == 'e' then\n            return 'E'\n        elseif c:lower() == 'f'\
    \ then\n            return 'F'\n        elseif c:lower() == 'g' then\n       \
    \     return 'G'\n        elseif c:lower() == 'h' then\n            return 'H'\n\
    \        elseif c:lower() == 'i' then\n            return 'I'\n        elseif\
    \ c:lower() == 'j' then\n            return 'J'\n        elseif c:lower() == 'k'\
    \ then\n            return 'K'\n        elseif c:lower() == 'l' then\n       \
    \     return 'L'\n        elseif c:lower() == 'm' then\n            return 'M'\n\
    \        elseif c:lower() == 'n' then\n            return 'N'\n        elseif\
    \ c:lower() == 'o' then\n            return 'O'\n        elseif c:lower() == 'p'\
    \ then\n            return 'P'\n        elseif c:lower() == 'q' then\n       \
    \     return 'Q'\n        elseif c:lower() == 'r' then\n            return 'R'\n\
    \        elseif c:lower() == 's' then\n            return 'S'\n        elseif\
    \ c:lower() == 't' then\n            return 'T'\n        elseif c:lower() == 'u'\
    \ then\n            return 'U'\n        elseif c:lower() == 'v' then\n       \
    \     return 'V'\n        elseif c:lower() == 'w' then\n            return 'W'\n\
    \        elseif c:lower() == 'x' then\n            return 'X'\n        elseif\
    \ c:lower() == 'y' then\n            return 'Y'\n        elseif c:lower() == 'z'\
    \ then\n            return 'Z'\n        else\n            return c\n        end\n\
    \    end)\n    new_string = new_string:gsub('%U', function(c)\n        if c:lower()\
    \ == 'a' then\n            return 'a'\n        elseif c:lower() == 'b' then\n\
    \            return 'b'\n        elseif c:lower() == 'c' then\n            return\
    \ 'c'\n        elseif c:lower() == 'd' then\n            return 'd'\n        elseif\
    \ c:lower() == 'e' then\n            return 'e'\n        elseif c:lower() == 'f'\
    \ then\n            return 'f'\n        elseif c:lower() == 'g' then\n       \
    \     return 'g'\n        elseif c:lower() == 'h' then\n            return 'h'\n\
    \        elseif c:lower() == 'i' then\n            return 'i'\n        elseif\
    \ c:lower() == 'j' then\n            return 'j'\n        elseif c:lower() == 'k'\
    \ then\n            return 'k'\n        elseif c:lower() == 'l' then\n       \
    \     return 'l'\n        elseif c:lower() == 'm' then\n            return 'm'\n\
    \        elseif c:lower() == 'n' then\n            return 'n'\n        elseif\
    \ c:lower() == 'o' then\n            return 'o", "    local result = ''\n    for\
    \ i = 1, #string do\n        if string.sub(i, 1, 1) == 'a' then\n            string.sub(i,\
    \ 1, 2) = 'A'\n        elseif string.sub(i, 1, 1) == 'A' then\n            string.sub(i,\
    \ 1, 2) = 'a'\n        else\n            string.sub(i, 1, 1) = toupper(string.sub(i,\
    \ 1, 1))\n        end\n        result = result .. string.sub(i, 1)\n    end\n\
    \    return result\nend", "    local result = string\n    for idx, char in pairs(string)\
    \ do\n        -- If lowercase, swap\n        if char:sub(1, 1) == 'l' then\n \
    \           char = char:sub(2)\n        end\n        -- If uppercase\n       \
    \ if char:sub(1, 1) == 'U' then\n            char = char:sub(2, 1)\n        end\n\
    \        -- If uppercase\n        if char:sub(1, 1) == 'l' then\n            char\
    \ = char:sub(2)\n        end\n        result = result .. char\n    end\n    return\
    \ result\nend", "\tlocal new_string = ''\n\tfor char in string.gmatch(string,\
    \ '%a') do\n\t\t-- Uppercase all lowercase letters.\n\t\tif char == 'a' then\n\
    \t\t\tnew_string = new_string .. 'A'\n\t\t-- Lowercase all uppercase letters.\n\
    \t\telseif char == 'A' then\n\t\t\tnew_string = new_string .. 'a'\n\t\t-- Just\
    \ append the character as-is.\n\t\telse\n\t\t\tnew_string = new_string .. char\n\
    \t\tend\n\tend", "   -- Split on spaces and uppercase characters, lowercase characters\
    \ stay lowercase\n   local result = {}\n   for _, character in string.gmatch(\"\
    ([A-Z][a-z]*)\") do\n      table.insert(result, character .. tostring(string.sub(string,\
    \ 1, string.len(string) - 1)) .. tostring(string.sub(string, string.len(string)\
    \ - 1, string.len(string))))\n   end\n   return table.concat(result)\nend", " \
    \ return string.gsub(\"([a-z])\",\n    function(c) return c:lower() .. c:upper()\
    \ end)\nend", "  local out = {}\n  for letter, character in pairs(string) do\n\
    \    if character == 'A' then\n      letter = 'a'\n    end\n    if character ==\
    \ 'a' then\n      letter = 'A'\n    end\n    if character ~= 'A' and character\
    \ ~= 'a' then\n      letter = toupper(letter)\n    end\n    out[#out + 1] = letter\n\
    \  end\n  return table.concat(out, '')\nend", "  local t = {}\n  for i = 1, #string\
    \ do\n    local c = string.sub(i, i)\n    if c >= 'a' and c <= 'z' then\n    \
    \  c = string.char(i + string.byte(c) - 'a')\n    end\n    t[#t + 1] = string.char(c):reverse()\n\
    \  end\n  return table.concat(t, \"\")\nend", "  return string.gsub('Lu', 'u',\
    \ 'lU')\nend", "  local _i, _len\n  for _i, _len in pairs(string.gmatch('([A-Z])'))\
    \ do\n    local _m = string.match(string, '%l')\n    string.gsub(string, '%l',\
    \ string.upper(string.sub(_m, 1, 1) + string.sub(_m, 2)))\n  end\n  return string\n\
    end", "  return string.gsub( string, '[%s%s]', function( letters, i )\n    return\
    \ ( i > 0 and letters == letter ) ? '[%s%s]' % ( string.upper( letters ), string.lower(\
    \ letters )) : letters;\n  end );\nend", "   return string:gsub('%a', function(c)\
    \ return string.char(tonumber(c:lower())) end) .. \n          string:gsub('%A',\
    \ function(c) return string.char(tonumber(c:upper())) end)\nend", "    local result\
    \ = ''\n    for char in string:gmatch'[%a]+' do\n        if char:lower() == 'a'\
    \ then\n            char = 'A'\n        elseif char:lower() == 'b' then\n    \
    \        char = 'B'\n        elseif char:lower() == 'c' then\n            char\
    \ = 'C'\n        elseif char:lower() == 'd' then\n            char = 'D'\n   \
    \     elseif char:lower() == 'e' then\n            char = 'E'\n        elseif\
    \ char:lower() == 'f' then\n            char = 'F'\n        elseif char:lower()\
    \ == 'g' then\n            char = 'G'\n        elseif char:lower() == 'h' then\n\
    \            char = 'H'\n        elseif char:lower() == 'i' then\n           \
    \ char = 'I'\n        elseif char:lower() == 'j' then\n            char = 'J'\n\
    \        elseif char:lower() == 'k' then\n            char = 'K'\n        elseif\
    \ char:lower() == 'l' then\n            char = 'L'\n        elseif char:lower()\
    \ == 'm' then\n            char = 'M'\n        elseif char:lower() == 'n' then\n\
    \            char = 'N'\n        elseif char:lower() == 'o' then\n           \
    \ char = 'O'\n        elseif char:lower() == 'p' then\n            char = 'P'\n\
    \        elseif char:lower() == 'q' then\n            char = 'Q'\n        elseif\
    \ char:lower() == 'r' then\n            char = 'R'\n        elseif char:lower()\
    \ == 's' then\n            char = 'S'\n        elseif char:lower() == 't' then\n\
    \            char = 'T'\n        elseif char:lower() == 'u' then\n           \
    \ char = 'U'\n        elseif char:lower() == 'v' then\n            char = 'V'\n\
    \        elseif char:lower() == 'w' then\n            char = 'W'\n        elseif\
    \ char:lower() == 'x' then\n            char = 'X'\n        elseif char:lower()\
    \ == 'y' then\n            char = 'Y'\n        elseif char:lower() == 'z' then\n\
    \            char = 'Z'\n        else\n            char = char:upper()\n     \
    \   end\n        result = result .. char\n    end\n    return result\nend", " \
    \ local s = string.gsub(string, '[%l%L]', function(c)\n    return string.char(tonumber(c)+32)\n\
    \  end)\n  return string.gsub(s, '[%u%U]', function(c)\n    return string.char(tonumber(c)+32)\n\
    \  end)\nend", "  return string.gsub(\"([a-z])\", function (c) c:upper() end)\n\
    \             :gsub(\"([A-Z])\", function (c) c:lower() end)\nend", "  -- Convert\
    \ to lower case.\n  local new_string = string:lower()", "\tlocal _str = string.gsub(string,\
    \ \"[%l%L]+\", function(char) \n\t\treturn string.char(tonumber(char)) + string.sub(string.upper(char),\
    \ 1)\n\tend)\n\treturn _str\nend", "    return string.gsub(string.lower(), '%l%u',\
    \ string.upper)\nend", "   return string.gsub(\"%l\", function(c) return string.char(tonumber(c)+32)\
    \ end)\nend", "    return string\n        -- Remove spaces\n        -- (since\
    \ some characters are common in one direction but not the other)\n        -- Also\
    \ remove all non-alphanumeric characters\n        -- (non-alphanumeric characters\
    \ are converted to empty strings)\n        -- >>> 'hELLO'\n        -- >>> 'heLLo'\n\
    \        -- >>> 'helLO'\n        -- >>> 'hEllO'\n        -- >>> 'HeLlO'\n    \
    \    -- >>> 'HELLO'\n        -- >>> 'HeLLo'\n        -- >>> 'heLLo'\n        --\
    \ >>> 'hello'\n        -- >>> 'HELLO'\n        -- >>> 'heLLo'\n        -- >>>\
    \ 'HELLO'\n        -- >>> 'HeLLo'\n        -- >>> 'heLLo'\n        -- >>> 'HELLO'\n\
    \        -- >>> 'heLLo'\n        -- >>> 'HELLO'\n        -- >>> 'HELLO'\n    \
    \    -- >>> 'HeLLO'\n        -- >>> 'heLLo'\n        -- >>> 'HELLO'\n        --\
    \ >>> 'heLLo'\n        -- >>> 'heLLo'\n        -- >>> 'HEllO'\n        -- >>>\
    \ 'HeLlO'\n        -- >>> 'HELLO'\n        -- >>> 'HEllO'\n        -- >>> 'heLlo'\n\
    \        -- >>> 'HELLO'\n        -- >>> 'HEllO'\n        -- >>> 'heLlo'\n    \
    \    -- >>> 'HELLO'\n        -- >>> 'heLlo'\n        -- >>> 'heLlo'\n        --\
    \ >>> 'HEllO'\n        -- >>> 'heLlo'\n        -- >>> 'heLlo'\n        -- >>>\
    \ 'HEllO'\n        -- >>> 'heLlo'\n        -- >>> 'heLlo'\n        -- >>> 'HEllO'\n\
    \        -- >>> 'heLlo'\n        -- >>> 'heLlo'\n        -- >>> 'HEllO'\n    \
    \    -- >>> 'heLlo'\n        -- >>> 'heLlo'\n        -- >>> 'HeLlO'\n        --\
    \ >>> 'heLlo'\n        -- >>> 'heLlo'\n        -- >>> 'HEllO'\n        -- >>>\
    \ 'heLlo'\n        -- >>> 'heLlo'\n        -- >>> 'HEllO", "  return string.gsub(string.lower(string),\
    \ 'a', 'A') .. string.upper(string.sub(string, 'a'))\nend", "  local new_string\
    \ = \"\"\n  for c in string.gmatch(string, \"%a\") do\n    if string.char(c) then\n\
    \      if string.lower(c) == c then\n        new_string = new_string .. string.upper(c)\n\
    \      elseif string.upper(c) == c then\n        new_string = new_string .. string.lower(c)\n\
    \      else\n        new_string = new_string .. c\n      end\n    else\n     \
    \ new_string = new_string .. c\n    end\n  end\n  return new_string\nend", " \
    \ -- Lowercase every character in string, uppercasing others.\n  local uppercase\
    \ = ''\n  for c, _ in string:gmatch('.') do\n    uppercase = uppercase .. string.upper(c)\n\
    \  end", "    return string.gsub(string, \"[%a]\", function(c) return string.upper(c)\
    \ end) .. string.gsub(string, \"[%A]\", function(c) return string.lower(c) end)\n\
    end", "    local result = {}\n    for i = 1, #string do\n        local c = string.sub(i,\
    \ i, i)\n        if c:lower() ~= nil then\n            table.insert(result, c:upper())\n\
    \        elseif c:upper() ~= nil then\n            table.insert(result, c:lower())\n\
    \        else\n            table.insert(result, c)\n        end\n    end\n   \
    \ return table.concat(result, \"\")\nend", "  -- Initialize case-flipped string.\n\
    \  local case_flipped = string\n  -- If string is all lowercase, return it.\n\
    \  if string:match('^[%a]*$') then\n    return string\n  -- Otherwise, loop over\
    \ chars.\n  else\n    local i = 1, #string\n    while i <= #string do\n      --\
    \ If char is lowercase, uppercase it.\n      if string.sub(i, 1, 1):lower() ==\
    \ string.sub(i, 1, 1) then\n        case_flipped:insert(string.sub(i, 1, 1):upper())\n\
    \      -- If char is uppercase, lowercase it.\n      elseif string.sub(i, 1, 1):upper()\
    \ == string.sub(i, 1, 1) then\n        case_flipped:insert(string.sub(i, 1, 1):lower())\n\
    \      -- Otherwise, the char is in between cases.\n      else\n        case_flipped:insert(string.sub(i,\
    \ 1, 1):upper())\n        case_flipped:insert(string.sub(i, 1, 1):lower())\n \
    \     end\n      i = i + 1\n    end\n  end\n  return case_flipped\nend", "   \
    \ local new_string = string\n    for i = 1, #string do\n        local c = string[i]\n\
    \        if c == nil then break end\n        if (c:lower() == c:upper()) then\n\
    \            new_string = new_string .. string.sub(string, i, i - 1)\n       \
    \     new_string = new_string .. string.sub(string, i - 1, 1)\n        end\n \
    \   end\n    return new_string\nend", "    return string.gsub(string.lower, \"\
    ([%a]+)\", string.upper)\nend", "\tlocal new_string = \"\"\n\tlocal pos = 1\n\t\
    local length = #string\n\twhile pos < length do\n\t\tlocal current_letter = string.sub(string,pos,pos)\n\
    \t\tlocal new_letter = current_letter\n\t\tif current_letter:lower() ~= nil then\n\
    \t\t\tnew_letter = string.upper(current_letter)\n\t\tend\n\t\tnew_string = new_string\
    \ .. new_letter\n\t\tpos = pos + 1\n\tend\n\treturn new_string\nend", "    return\
    \ string:gsub('%l', function(c)\n        if c == 'a' then\n            return\
    \ 'A'\n        elseif c == 'A' then\n            return 'a'\n        else\n  \
    \          return c:lower()\n        end\n    end)\nend", "  for i = 1, string.len()\
    \ do\n    local char = string.sub(i, i, 1)\n    if char == 'a' then string.sub(i,\
    \ 1, 1) .. string.sub(i, i + 1, 1) else string.sub(i, 1, i) .. string.sub(i, i\
    \ + 1, 1) end\n  end\n  return string\nend", "    return string.gsub('([a-z])',\
    \ function(c)\n        return string.char.lower[c] or string.char.upper[c]\n \
    \   end)\nend\n</code>\n<|/ a |>\n<| c |>\n+1 but I would suggest to use `string.gsub('([a-z])',\
    \ function(c)` instead of `string.gsub('[%l%u]', function(c)` to avoid problems\
    \ with umlauts.\n<|/ c |>\n<| c |>\n- Yes, I agree that it is a good point, but\
    \ I don't think the OP would have any issues with umlauts since he is just flipping\
    \ between lower and upper case, and this function is only used for flipping.\n\
    <|/ c |>\n<| c |>\n- I agree, although I don't think you should be using `gsub`\
    \ for this purpose.\n<|/ c |>\n<| c |>\n- I'm confused. Why are you using gsub\
    \ to flip lowercase to uppercase and vice versa? You're not doing any replacement,\
    \ so why not just use string.lower/upper?\n<|/ c |>\n<| c |>\nIt doesn't really\
    \ matter, either way, since we're only doing one pass.\n<|/ c |>\n<| a |>\nHere's\
    \ a generic version of this that uses the fact that the character types in Lua\
    \ are numbers:\n<code>", "  if string == nil then\n    return nil\n  end\n  local\
    \ new_string = string\n  while true do\n    local letter_index = string.find(new_string,\
    \ \"%l\", 1, true)\n    local new_letter_index = string.find(new_string, \"%u\"\
    , 1, true)\n    if letter_index == nil then\n      return new_string\n    end\n\
    \    if new_letter_index == nil then\n      new_string = new_string:gsub(string.sub(letter_index,\
    \ 1, -1), function (letter)\n        return string.sub(letter, 1, 1) .. string.sub(letter,\
    \ 2)\n      end)\n    else\n      new_string = new_string:gsub(string.sub(letter_index,\
    \ 1, -1), function (letter)\n        return string.sub(letter, 1, 1) .. string.sub(letter,\
    \ new_letter_index)\n      end)\n    end\n  end\nend", "    local s = string.gsub(string,\
    \ \"[%l%L]\", function(c)\n        return string.char(tonumber(c, 16))\n    end)\n\
    \    return s:upper()\nend", "  local lower = true\n  local upper = true\n  local\
    \ first = true\n  -- The first letter can never be uppercase so we need to flip\
    \ it.\n  -- If we find a lowercase letter then we flip it (because it's now uppercase).\n\
    \  -- If we find a non-lowercase letter then we flip it to its lowercase version.\n\
    \  -- If we find two non-lowercase letters then we flip them both to their lowercase\
    \ versions.\n  -- >>> flip_case('hELLO')\n  -- 'hELlo'\n  -- >>> flip_case('HeLlO')\n\
    \  -- 'HEllO'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HALo')\n\
    \  -- 'HaLo'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HALo')\n\
    \  -- 'HaLo'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n\
    \  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n\
    \  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n\
    \  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n\
    \  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n\
    \  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n\
    \  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n\
    \  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n  -- 'HALo'\n  -- >>> flip_case('HaLLo')\n\
    \  -- 'HALo'\n  -- >>> flip_case", "\tlocal result = string\n\tfor i = 1, #string,\
    \ 1 do\n\t\tlocal char = string[i]\n\t\tif char >= 'a' and char <= 'z' then\n\t\
    \t\tresult = string.sub(result, 1, i-1) .. string.sub(string.upper(string.sub(string,i,i)),\
    \ 1, i)\n\t\telseif char >= 'A' and char <= 'Z' then\n\t\t\tresult = string.sub(result,\
    \ 1, i-1) .. string.sub(string.lower(string.sub(string,i,i)), 1, i)\n\t\tend\n\
    \tend\n\treturn result\nend", "    return string.gsub(string.lower, '.', function(c)\n\
    \        return string.upper(c)\n    end) .. string.gsub(string.upper, '.', function(c)\n\
    \        return string.lower(c)\n    end)\nend", "    return string.gsub('%l',\
    \ string.upper):gsub('%U', string.lower)\nend", "  local result = {}\n  for i\
    \ = 1, #string do\n    local c = string.sub(i, i)\n    if not c then break end\n\
    \    local upper = c == 'A' or c == 'a' or\n                 c == 'B' or c ==\
    \ 'b' or\n                 c == 'C' or c == 'c' or\n                 c == 'D'\
    \ or c == 'd' or\n                 c == 'E' or c == 'e' or\n                 c\
    \ == 'F' or c == 'f' or\n                 c == 'G' or c == 'g' or\n          \
    \       c == 'H' or c == 'h' or\n                 c == 'I' or c == 'i' or\n  \
    \               c == 'J' or c == 'j' or\n                 c == 'K' or c == 'k'\
    \ or\n                 c == 'L' or c == 'l' or\n                 c == 'M' or c\
    \ == 'm' or\n                 c == 'N' or c == 'n' or\n                 c == 'O'\
    \ or c == 'o' or\n                 c == 'P' or c == 'p' or\n                 c\
    \ == 'Q' or c == 'q' or\n                 c == 'R' or c == 'r' or\n          \
    \       c == 'S' or c == 's' or\n                 c == 'T' or c == 't' or\n  \
    \               c == 'U' or c == 'u' or\n                 c == 'V' or c == 'v'\
    \ or\n                 c == 'W' or c == 'w' or\n                 c == 'X' or c\
    \ == 'x' or\n                 c == 'Y' or c == 'y' or\n                 c == 'Z'\
    \ or c == 'z'\n    local lower = upper\n    upper = lower == 'A' or lower == 'a'\
    \ or\n             upper == 'B' or upper == 'b' or\n             upper == 'C'\
    \ or upper == 'c' or\n             upper == 'D' or upper == 'd' or\n         \
    \    upper == 'E' or upper == 'e' or\n             upper == 'F' or upper == 'f'\
    \ or\n             upper == 'G' or upper == 'g' or\n             upper == 'H'\
    \ or upper == 'h' or\n             upper == 'I' or upper == 'i' or\n         \
    \    upper == 'J' or upper == 'j' or\n             upper == 'K' or upper == 'k'\
    \ or\n             upper == 'L' or upper == 'l' or\n             upper == 'M'\
    \ or upper == 'm' or\n             upper == 'N' or upper == 'n' or\n         \
    \    upper == 'O' or upper == 'o' or\n             upper == 'P' or upper == 'p'\
    \ or\n             upper == 'Q' or upper == 'q' or\n             upper == 'R'\
    \ or ", "    local buffer = ''\n    for char in string.gmatch(string, '%c') do\n\
    \        if char == 'a' then\n            char = 'A'\n        end\n        if\
    \ char == 'A' then\n            char = 'a'\n        end\n        if char == 'z'\
    \ then\n            char = 'Z'\n        end\n        if char == 'Z' then\n   \
    \         char = 'z'\n        end\n        if char == '0' then\n            char\
    \ = '9'\n        end\n        buffer = buffer .. char\n    end\n    return buffer\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=lua,lua-patterns dscore=1 |>\nI wanted\
    \ to do this in one line but I only found solutions that used multiple lines or\
    \ a single line but this one only uses one and I think it's really clever:\n<code>",
  "    local newstr = ''\n    for c = string.lower() do\n        newstr = newstr ..\
    \ string.upper(c)\n    end\n    return newstr\nend", "    local new_string = string\n\
    \    for i, character in ipairs(string) do\n        if character == 'a' then\n\
    \            new_string = new_string .. 'A'\n        elseif character == 'A' then\n\
    \            new_string = new_string .. 'a'\n        else\n            new_string\
    \ = new_string .. character\n        end\n    end\n    return new_string\nend",
  "    local result = {}\n    for _, c in string.gmatch'([%a%A]+') do result[c] =\
    \ string.sub(c, 2, #c)  end\n    return table.concat(result, '')\nend", "  local\
    \ new_string = string.gsub(string, \"[%l%L]\", function(c)\n    return string.format('%L',\
    \ tostring((c:upper()):byte()))\n  end)\n  return new_string\nend", "  string\
    \ = string.gsub(string.lower() .. string.upper(), '%L', string.upper)\n  string\
    \ = string.gsub(string.upper() .. string.lower(), '%U', string.lower)\n  return\
    \ string\nend", "\tassert(type(string) == 'string')\n\tlocal s = ''\n\tfor i,\
    \ c in pairs(string) do\n\t\tif i == 1 then\n\t\t\ts = c:upper()\n\t\telse\n\t\
    \t\ts = s:lower() + c:lower()\n\t\tend\n\tend\n\treturn s\nend", "  local chars\
    \ = {}\n  local len = #string\n  for i=1, len do\n    table.insert(chars, string.sub(i,\
    \ 1, i):lower())\n    table.insert(chars, string.sub(i, i + 1, i):upper())\n \
    \ end\n  return table.concat(chars, \"\")\nend", "\tlocal out = {}\n\tfor i, c\
    \ in ipairs(string) do\n\t\tif string.lower(c) == c then\n\t\t\tout[i] = string.upper(c)\n\
    \t\telseif string.upper(c) == c then\n\t\t\tout[i] = string.lower(c)\n\t\tend\n\
    \tend\n\treturn table.concat(out, \"\")\nend", "  -- For each character in the\
    \ string:\n  -- 1. Convert it to lower case.\n  -- 2. Convert it to upper case.\n\
    \  -- 3. Concatenate them together.\n  return string.gsub('%a', function(letter)\n\
    \    local lower = string.sub(letter, 1, 1)\n    local upper = string.sub(letter,\
    \ 2, 2)\n    return string.char(tonumber(lower) + tonumber(upper))\n  end)\nend",
  "    return string.gsub('.',\n        function(c)\n            if (c:lower() ==\
    \ c) then\n                return c:upper()\n            else\n              \
    \  return c:lower()\n            end\n        end\n    )\nend", "\tlocal result\
    \ = string.gsub('%l%U', '%l%L')\n\tresult:gsub('%u%U', '%u%l')\n\treturn result\n\
    end", "   for i = 1, #string, 1 do\n      local c = string.sub(i, i)\n      string.sub(i,\
    \ i) = string.sub(i, i):toupper():lower()\n      string.sub(i, i) = c\n   end\n\
    \   return string\nend", "   local new_string = string\n   for index, character\
    \ in ipairs(string) do\n      if character == character then\n         new_string\
    \ = string.sub(new_string, 1, index-1) + string.sub(new_string, index+1)\n   \
    \   end\n   end\n   return new_string\nend", "  local out = {}\n  for idx, c in\
    \ string.gmatch string.gmatch(\"%a\") do\n    local new_c = string.char(c:byte())\n\
    \    if new_c == \"a\" then\n      new_c = \"A\"\n    else if new_c == \"A\" then\n\
    \      new_c = \"a\"\n    end\n    out[idx] = new_c\n  end\n  return table.concat(out)\n\
    end", "    local s = string\n    for i = 1, #s do\n        local c = string.sub(s,\
    \ i, i)\n        if c ~= 'a' and c ~= 'A' then\n            s = string.sub(string,\
    \ 1, i-1) .. string.sub(string, i+1, #string)\n        end\n    end\n    return\
    \ s\nend\n</code>\n<|/ a tags=lua dscore=0 |>\n<| a |>\nHere's an example for\
    \ Lua 5.3:\n<code>", "  -- Convert lowercase letters to uppercase letters.\n \
    \ return string.gsub('([a-z])', function(c)\n    return string.char(tonumber(c))\
    \ or c\n  end)\n  -- Convert uppercase letters to lowercase letters.\n  -- >>>\
    \ flip_case('Hello world')\n  -- 'Hello World'\nend", "    local result = string\n\
    \    local first_upper = true\n    string.gsub(function(character)\n        if\
    \ first_upper then return character .. string.upper(character) end\n        if\
    \ character == 'A' or character == 'a' then\n            first_upper = true\n\
    \        else\n            first_upper = false\n        end\n        return character\
    \ .. string.lower(character)\n    end, function(character)\n        if character\
    \ == 'a' or character == 'A' then\n            return string.upper(character)\
    \ .. string.lower(character)\n        end\n        return character\n    end)\n\
    \    return result\nend", "  local t = {}\n  for _, c in string.gmatch(\"^.([a-z])$\"\
    , \"%1\") do\n    table.insert(t, string.upper(c))\n  end\n  for _, c in string.gmatch(\"\
    ^.([A-Z])$\", \"%1\") do\n    table.insert(t, string.lower(c))\n  end\n  return\
    \ table.concat(t, \"\")\nend", "  local new_string = ''\n  for character in string\
    \ do\n    local new_character = case character of\n      true then\n        character:lower()\n\
    \      else\n        character:upper()\n      end\n    new_string = new_string\
    \ .. new_character\n  end\n  return new_string\nend", "   for _, c in ipairs(string)\
    \ do\n      assert(c and tonumber(c), \"'%s' is not a valid character\" % c)\n\
    \      if tonumber(c) >= 32 then\n\t string[#string] = string.sub(c, 1) .. string.sub(c,\
    \ 2)\n      else\n\t string[#string] = string.sub(c, 2)\n      end\n   end\n \
    \  return string\nend", "    local new_string = string.gsub(string.lower(string),\
    \ '[%a][%A]', string.upper)\n    return string.lower(new_string)\nend", "    local\
    \ new_string = '' -- start with empty string\n    for index, letter in string.gmatch('.')\
    \ do\n        if letter:byte() < 128 then -- Letter\n            new_string =\
    \ new_string .. letter:upper()\n        else\n            new_string = new_string\
    \ .. letter:lower()\n        end\n    end\n    return new_string\nend\nflip_case('hello')\n\
    flip_case('hello', 'hello')\nflip_case('hello', 'HeLlo')\nflip_case('hello', 'heLlo')\n\
    flip_case('hello', 'heLlo', 'heLlo')", "   for idx = 1, string.lenth, 1 do\n \
    \     local char = string.sub(idx, idx, 1)\n      local swap_case = (string.sub(idx,\
    \ idx, 1) == char and 'A' or 'a')\n      string = string.sub(idx, idx, 1) .. swap_case\n\
    \   end\n   return string\nend", "   -- Handle empty string\n   if string == nil\
    \ then\n      return nil\n   end", "    local new_string = \"\"\n    for i = 1,\
    \ #string do\n        if string.sub(i, 1, 1) == \"a\" then\n            new_string\
    \ = new_string .. string.sub(i, 2, 2) .. string.sub(i, 1, 1)\n        elseif string.sub(i,\
    \ 1, 1) == \"A\" then\n            new_string = new_string .. string.sub(i, 1,\
    \ 2) .. string.sub(i, 2, 1)\n        else\n            new_string = new_string\
    \ .. string.sub(i, 1, 1) .. string.sub(i, 2, 2)\n        end\n    end\n    return\
    \ new_string\nend", "  return string.gsub(string.lower, \"%l\", string.upper)\n\
    end", "    return string:gsub(\"%l\", function (c)\n        -- We only need to\
    \ check lowercase letters.\n        if string.byte(c) >= 65 and string.byte(c)\
    \ <= 91 then\n            return string.byte(c) + string.byte(c):upper() .. string.byte(c):lower()\n\
    \        end\n        return c\n    end)\nend", "  assert(type(string) == 'string')\n\
    \  assert(string.lower())\n  local result = string\n  for i = 1, string.len do\n\
    \    local character = string.sub(i, i)\n    if character == character then\n\
    \      result = result .. string.sub(i, i + 1)\n    end\n  end\n  return result:lower()\n\
    end", "  assert(type(string) == 'string')\n  return string.gsub('.', function(char)\n\
    \    if string.byte(char) == 128 then\n      return string.byte(char):byte('upper'):byte()\n\
    \    else\n      return string.byte(char):byte()\n    end\n  end)\nend", "  --\
    \ Reverse the string.\n  return string.gsub('%s%s%s','%a',string.char.downcase)\n\
    \              ..string.char.upcase\n              ..string.gsub('%s%s%s','%A',string.char.upcase)\n\
    end", "  return string.gsub(string.lower, '%l%L',\n    string.upper)\nend", " \
    \  return string.gsub('Lu', 'LuU', string.gsub('lU', 'lU', string))\nend", " \
    \   local results = {}\n    for char in string.gmatch(string, \"%a+\") do\n  \
    \      results[#results+1] = char:lower() .. char:upper()\n    end\n    return\
    \ table.concat(results)\nend", "  local new_string = string\n  new_string = new_string:gsub(\"\
    (.)\", function(s) return string.upper(s..string.lower) end)\n  return new_string\n\
    end", "    return string.gsub('^([a-z]-)([a-z])$', function(_, from, to)\n   \
    \     return to..from.upcase()\n    end)\nend", "  local caps = string.gsub(string,\
    \ \"[A-Z]\", toupper)\n  caps = string.gsub(caps, \"[a-z]\", tolower)\n  return\
    \ caps\nend", "    local result = string.gsub(reverse_case, '%l%L', function(l)\
    \ return string.char(l) end)\n    return result\nend", "  return string.gsub(string.lower,\
    \ \"%s\", string.upper)\nend", "  return string.gsub:gsub('%l', function (c)\n\
    \    local lower\n    local upper\n    if c:sub(1, 1):lower() == 'a' then\n  \
    \    upper = c\n      lower:sub(1) = 'A'\n    elseif c:sub(1, 1):lower() == 'b'\
    \ then\n      upper = c\n      lower:sub(1) = 'B'\n    elseif c:sub(1, 1):lower()\
    \ == 'c' then\n      upper = c\n      lower:sub(1) = 'C'\n    elseif c:sub(1,\
    \ 1):lower() == 'd' then\n      upper = c\n      lower:sub(1) = 'D'\n    elseif\
    \ c:sub(1, 1):lower() == 'e' then\n      upper = c\n      lower:sub(1) = 'E'\n\
    \    elseif c:sub(1, 1):lower() == 'f' then\n      upper = c\n      lower:sub(1)\
    \ = 'F'\n    elseif c:sub(1, 1):lower() == 'g' then\n      upper = c\n      lower:sub(1)\
    \ = 'G'\n    elseif c:sub(1, 1):lower() == 'h' then\n      upper = c\n      lower:sub(1)\
    \ = 'H'\n    elseif c:sub(1, 1):lower() == 'i' then\n      upper = c\n      lower:sub(1)\
    \ = 'I'\n    elseif c:sub(1, 1):lower() == 'j' then\n      upper = c\n      lower:sub(1)\
    \ = 'J'\n    elseif c:sub(1, 1):lower() == 'k' then\n      upper = c\n      lower:sub(1)\
    \ = 'K'\n    elseif c:sub(1, 1):lower() == 'l' then\n      upper = c\n      lower:sub(1)\
    \ = 'L'\n    elseif c:sub(1, 1):lower() == 'm' then\n      upper = c\n      lower:sub(1)\
    \ = 'M'\n    elseif c:sub(1, 1):lower() == 'n' then\n      upper = c\n      lower:sub(1)\
    \ = 'N'\n    elseif c:sub(1, 1):lower() == 'o' then\n      upper = c\n      lower:sub(1)\
    \ = 'O'\n    elseif c:sub(1, 1):lower() == 'p' then\n      upper = c\n      lower:sub(1)\
    \ = 'P'\n    elseif c:sub(1, 1):lower() == 'q' then\n      upper = c\n      lower:sub(1)\
    \ = 'Q'\n    elseif c:sub(1, 1):lower() == 'r' then\n      upper = c\n      lower:sub(1)\
    \ = 'R'\n    elseif c:sub(1, 1):lower() == 's' then\n      upper = c\n      lower:sub(1)\
    \ = 'S'\n    elseif c:sub(1, 1):lower() == 't' then\n      upper = c\n      lower:sub(1)\
    \ = 'T'\n    elseif c:sub(1, 1):lower() == 'u' then\n      upper = c", "    return\
    \ string.gsub(string, '([A-Z])', function(c) return c:lower() .. c:upper() end)\n\
    end", "  local new_str = ''\n  for letter, char in pairs(string) do\n    if char\
    \ == 'a' or char == 'A' then\n      new_str = new_str .. string.upper(letter)\n\
    \    elseif char == 'b' or char == 'B' then\n      new_str = new_str .. string.lower(letter)\n\
    \    else\n      new_str = new_str .. letter\n    end\n  end\n  return new_str\n\
    end", "    local new_string = ''\n    for i = 1, #string do\n        local char\
    \ = string[i]\n        if char == string.upper(char) then\n            new_string\
    \ = new_string .. string.lower(char)\n        elseif char == string.lower(char)\
    \ then\n            new_string = new_string .. string.upper(char)\n        else\n\
    \            new_string = new_string .. char\n        end\n    end\n    return\
    \ new_string\nend", "    local buf = {}\n    for i=1,string.npos do\n        if\
    \ string.sub(i,i) == string.sub(string.sub(i,1,i),1,i) then\n            table.insert(buf,\
    \ string.sub(i,1,i))\n            table.insert(buf, string.sub(string.sub(i,1,i),2,i))\n\
    \        else\n            table.insert(buf, string.sub(i,1,i))\n        end\n\
    \    end\n    return table.concat(buf)\nend", "   return string.gsub(string, '%a',\
    \ function(letter)\n      if letter:lower() == letter then\n         return letter:upper()\n\
    \      else\n         return letter:lower()\n      end\n   end)\nend", "  local\
    \ buf = {}\n  string.gsub('.', function(c)\n    table.insert(buf, string.upper(c))\n\
    \    table.insert(buf, string.lower(string.sub(c, 1)))\n  end)\n  return table.concat(buf,\
    \ '') -- Remove trailing space.\nend", "   local result = string\n   for i = 1,\
    \ #string do\n      local c = string.sub(i, i)\n      if c:lower() ~= c:upper()\
    \ then\n         result = string.sub(i, i):upper() .. string.sub(i, i):lower()\n\
    \      end\n   end\n   return result\nend", "  local result = ''\n  for i = 1,\
    \ #string, 1 do\n    local c = string.sub(i, i)\n    if c:upper() ~= c then\n\
    \      result = result .. c:lower()\n    else\n      result = result .. c\n  \
    \  end\n  end\n  return result\nend", "  local new_string = string\n  for i =\
    \ 1, #string do\n    local char = string.sub(i, i, i)\n    local upper_or_lower\
    \ = char >= 'A' and char < 'Z'\n    char = upper_or_lower and string.sub(i - 1,\
    \ i, i) + string.sub(i - 1, i - 1) and char or string.sub(i - 1, i - 1, i)\n \
    \   new_string = string.sub(i, 1, i) or char or new_string\n  end\n  return new_string\n\
    end", "   return string.gsub(\"([A-Z])\", function(c) return string.char(tonumber(c))\
    \ end) ..\n      string.gsub(\"([a-z])\", function(c) return string.upper(c) end)\n\
    end", "   if string == '' then\n      return string\n   end\n   local pos = 1\n\
    \   while pos < #string do\n      local c = string.sub(string, pos, pos)\n   \
    \   pos = string.find(string, \"[A-Z]\", pos)\n      if pos ~= nil then\n    \
    \     local new_c = string.sub(string, pos, pos+1)\n         return string.sub(string,\
    \ 1, pos-1) .. new_c .. string.sub(string, pos+2)\n      else\n         return\
    \ string.sub(string, 1, pos) .. c\n      end\n   end\nend", "  local new_string\
    \ = ''\n  for i, character in pairs(string) do\n    if character == tolower(character)\
    \ then\n      new_string = new_string .. toupper(character)\n    else\n      new_string\
    \ = new_string .. character\n    end\n  end\n  return new_string\nend", "  local\
    \ outstring = \"\"\n  for i, char in string.gmatch(string, \"%a\") do\n    if\
    \ string.char(i):lower() == string.char(i):upper() then\n      outstring = outstring\
    \ .. string.char(i):upper()\n    else\n      outstring = outstring .. string.char(i):lower()\n\
    \    end\n  end\n  return outstring\nend", "\tlocal result = {}\n\tfor i, c in\
    \ ipairs(string) do\n\t\tif c > 96 then\n\t\t\tc = c + 32\n\t\tend\n\t\tresult[i]\
    \ = c\n\tend\n\treturn table.concat(result)\nend", "  local new_string = string\n\
    \  new_string:gsub(\"%l\", function(c)\n    local lower = string.lower(c)\n  \
    \  if lower == \"a\" then\n      new_string = string.upper(c)\n    elseif lower\
    \ == \"e\" then\n      new_string = string.lower(c)\n    else\n      new_string\
    \ = c\n    end\n  end)\n  new_string:gsub(\"%U\", function(c)\n    local upper\
    \ = string.upper(c)\n    if upper == \"A\" then\n      new_string = string.lower(c)\n\
    \    elseif upper == \"E\" then\n      new_string = string.upper(c)\n    else\n\
    \      new_string = c\n    end\n  end)\n  return new_string\nend", "   local output\
    \ = string\n   for _, letter in ipairs(string) do\n      if letter:upper() ==\
    \ letter then\n         output = output:upper()\n      elseif letter:lower() ==\
    \ letter then\n         output = output:lower()\n      end\n   end\n   return\
    \ output\nend", "   return string.gsub('^([%a])', function(letter)\n      if letter\
    \ == 'a' then return 'A' end\n      if letter == 'A' then return 'a' end\n   \
    \   return letter\n   end)\nend", "  local buf = {}\n  for _,c in ipairs(string)\
    \ do\n    buf[c] = toupper(c)\n  end\n  return table.concat(buf, \"-\")\nend",
  "\tstring = tostring(string)\n\tlocal buffer = {}\n\tfor i, c in ipairs(string)\
    \ do\n\t\tlocal upper = tostring((c):upper()) .. tostring((c):lower())\n\t\tbuffer[i]\
    \ = upper\n\tend\n\treturn table.concat(buffer)\nend", "  return string.gsub(\"\
    ([A-Z])\", function (c) return c:lower() .. c:upper() end)\nend", "   local new_string\n\
    \   if type(string) == 'string' then\n      new_string = string\n   else\n   \
    \   new_string = string[1]\n      for i = 2, #string do\n         new_string =\
    \ new_string .. string[i]:upper()\n      end\n   end\n   return new_string\nend",
  "    local str1 = string.gsub(string, \"[%l%L]\", function(c)\n        -- flip lower\
    \ case to upper case\n        if string.match(\"[a-z]\", c) then\n           \
    \ return string.gsub(c, \"[%l%L]\", function(l)\n                return string.char(tonumber(l)\
    \ + 32)\n            end)\n        end\n        -- flip upper case to lower case\n\
    \        if string.match(\"[A-Z]\", c) then\n            return string.gsub(c,\
    \ \"[%l%L]\", function(l)\n                return string.sub(l, 1, 1)\n      \
    \      end)\n        end\n        -- otherwise, return the original string.\n\
    \        return c\n    end)\n    return str1\nend", "  local result = string.gsub(\"\
    ([a-z])\", function (c) return string.char(tonumber(c)) end)\n  result = string.gsub(\"\
    ([A-Z])\", function (c) return string.char(tonumber(c)+32) end)\n  return result\n\
    end", "  local upper = string.upper\n  local lower = string.lower\n  string.upper\
    \ = string.lower\n  string.lower = upper\n  return lower(string)\nend", '  local
    result = string', "  -- If the string is empty or null, return the empty string\n\
    \  -- >>> flip_case('')\n  -- ''\n  if string == '' then return '' end", "   \
    \ return string:gsub('%l', string.upper):gsub('%U', string.lower)\nend", "  local\
    \ result = string\n  while true do\n    local first, rest = string.sub(1, #string),\
    \ string.sub(2, #string)\n    if first then\n      result = string.sub(1, #first\
    \ + 1) .. string.upper(first) .. string.sub(rest, #rest)\n    else\n      result\
    \ = string.sub(1, #string + 1) .. string.lower(rest)\n    end\n    break -- while\
    \ true\n  end\n  return result\nend\n</code>\n<|/ a |>\n<| a tags=lua-patterns,string,lua\
    \ |>\n<code>", "  string = string.lower()\n  return string.gsub(\n    '%w',\n\
    \    function(c)\n      return string.match('[a-z]') then c:upper() else c:lower()\
    \ end\n  ) .. string.sub(string, string.len() - 1)\nend", "    return string.gsub(string,\
    \ '%l', string.upper)\n               ..string.gsub(string, '%U', string.lower)\n\
    end", "    local result = {}\n    for index, letter in ipairs(string) do\n   \
    \     result[index] = string.chars(letter):upper():sub(1,1)\n    end\n    return\
    \ table.concat(result, '')\nend", "    return string.gsub('%l','%u',string.gsub('%U','%l',string))\n\
    end", "\t-- Normalize the string into lowercase.\n\t-- >>> flip_case('Hello')\n\
    \t-- hELLO", "  local result = string\n  result = ''\n  for _, character in ipairs(string)\
    \ do\n    local lowercase_or_uppercase = if character >= 'a' and character <=\
    \ 'z' then character .. 'A' else 'a' .. character .. 'z'\n    local uppercase_or_lowercase\
    \ = if character >= 'A' and character <= 'Z' then character .. 'a' else 'A' ..\
    \ character .. 'z'\n    result = result .. lowercase_or_uppercase .. uppercase_or_lowercase\n\
    \  end\n  return result\nend", "  local result = {}\n  for i, c in ipairs(string)\
    \ do\n    result[i] = toupper(c)\n  end\n  return table.concat(result, \"\")\n\
    end", "    local result = {}\n    for index, letter in ipairs(string) do\n   \
    \     result[index] = tostring(toupper(letter))\n    end\n    return table.concat(result,\
    \ \"\")\nend", "    local uppercase = string:upper()\n    uppercase = uppercase:lower()\n\
    \    uppercase = uppercase:gsub(\"^(.)\", uppercase.upper)\n    return uppercase\n\
    end", "    local result = string\n    for i, c in ipairs(string) do\n        --\
    \ Lowercase letters.\n        if c >= 'a' and c <= 'z' then\n            -- Uppercase\
    \ letters.\n            if c <= 'Z' then\n                c = toupper(c)\n   \
    \         end\n            -- Lowercase letters.\n            if c >= 'A' and\
    \ c <= 'Z' then\n                c = tolower(c)\n            end\n           \
    \ -- Uppercase letters.\n            if c >= '0' and c <= '9' then\n         \
    \       c = toupper(c)\n            end\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend", "  local buffer = {}\n  for _, letter\
    \ in string.gmatch(\"%a\") do\n    table.insert(buffer, toupper(letter))\n  end\n\
    \  return table.concat(buffer)\nend", "  local result = string\n  -- Make sure\
    \ it's a string first\n  if type(string) ~= 'string' then return result end\n\
    \  -- Flip lowercase to uppercase\n  result = string.gsub(string, '([a-z])', function(c)\n\
    \    return string.char(tonumber(c) + 32)\n  end)\n  -- Flip uppercase to lowercase\n\
    \  result = string.gsub(result, '([A-Z])', function(c)\n    return string.char(tonumber(c)\
    \ + 32)\n  end)\n  return result\nend", "  assert(type(string) == 'string', 'input\
    \ must be a string')\n  return string:gsub('%l', string, ''):gsub('%L', string,\
    \ ''):gsub('%u', string, ''):gsub('%U', string, '')\nend", "    return string.gsub('.',\
    \ function (c) return c:lower():upper() end)\nend", "  return string.gsub('.',\
    \ function(c) c:lower() .. c:upper() end)\nend", "  return string.gsub('^[%w%.]+',\
    \ '', function(s) return string.char(tonumber(s)) end)\nend", "\tlocal new_string\n\
    \tfor _, c in ipairs(string) do\n\t\tnew_string = new_string .. string.upper(c)\
    \ .. string.lower(c)\n\tend\n\treturn new_string\nend", '  local result = string',
  "    return string.gsub('%l', string.upper) .. string.gsub('%u', string.lower)\n\
    end", "\treturn string\n\t:gsub('%a', function(flip)\n\t\treturn string.upper(flip)\n\
    \tend)\n\t:gsub('%A', function(flip)\n\t\treturn string.lower(flip)\n\tend)\n\
    end", "   if string == nil then return string end\n   local s = string.gsub(string,\
    \ \"%l\", function(c)\n      return string.char(tonumber(c) + 32)\n   end)\n \
    \  return string.gsub(s, \" %l\", function(c)\n      return string.char(tonumber(c)\
    \ - 32)\n   end)\nend", "  local result = \"\"\n  for c in string.gmatch(string,\
    \ \"%a\") do\n    c = string.gsub(c, \"[%l%L]\", function (c)\n      return string.upper(c)\n\
    \    end)\n    c = string.gsub(c, \"[%u%U]\", function (c)\n      return string.lower(c)\n\
    \    end)\n    result = result .. c\n  end\n  return result\nend", "    local\
    \ new_string = ''\n    for _, c in ipairs(string) do\n        if c:byte() == 'A'\
    \ then\n            new_string = new_string .. 'a'\n        elseif c:byte() ==\
    \ 'a' then\n            new_string = new_string .. 'A'\n        else\n       \
    \     new_string = new_string .. c\n        end\n    end\n    return new_string\n\
    end\n</cell>\n<cell>", "    local result = {}\n    for i = 1, #string do\n   \
    \     if string.sub(i, 1, 1) == \"a\" then\n            result.insert(string.sub(i,\
    \ 2, 1) + \"A\"..string.sub(i, 3))\n        elseif string.sub(i, 1, 1) == \"A\"\
    \ then\n            result.insert(string.sub(i, 1, 2)..string.sub(i, 3))\n   \
    \     elseif string.sub(i, 1, 1) == \"e\" then\n            result.insert(string.sub(i,\
    \ 2, 1) + \"E\"..string.sub(i, 3))\n        elseif string.sub(i, 1, 1) == \"E\"\
    \ then\n            result.insert(string.sub(i, 1, 2)..string.sub(i, 3))\n   \
    \     elseif string.sub(i, 1, 1) == \"i\" then\n            result.insert(string.sub(i,\
    \ 2, 1) + \"I\"..string.sub(i, 3))\n        elseif string.sub(i, 1, 1) == \"I\"\
    \ then\n            result.insert(string.sub(i, 1, 2)..string.sub(i, 3))\n   \
    \     elseif string.sub(i, 1, 1) == \"o\" then\n            result.insert(string.sub(i,\
    \ 2, 1) + \"O\"..string.sub(i, 3))\n        elseif string.sub(i, 1, 1) == \"O\"\
    \ then\n            result.insert(string.sub(i, 1, 2)..string.sub(i, 3))\n   \
    \     elseif string.sub(i, 1, 1) == \"u\" then\n            result.insert(string.sub(i,\
    \ 2, 1) + \"U\"..string.sub(i, 3))\n        elseif string.sub(i, 1, 1) == \"U\"\
    \ then\n            result.insert(string.sub(i, 1, 2)..string.sub(i, 3))\n   \
    \     end\n    end\n    return table.concat(result)\nend", "    local result =\
    \ string\n    local upper = true\n    for i = 1, #string do\n        local c =\
    \ string.sub(string,i,i)\n        local uppercase = (string.match(\"^[A-Z]\",\
    \ c)) or (string.match(\"^[a-z]\", c))\n        if not uppercase and string.len(c)\
    \ == 1 then\n            uppercase = true\n        end\n        if uppercase and\
    \ string.len(c) == 1 then\n            uppercase = false\n        end\n      \
    \  if uppercase then\n            if string.len(c) > 1 then\n                c\
    \ = string.sub(c,1,1)\n            end\n        end\n        result = result ..\
    \ string.sub(c,1,1) .. string.sub(c,2)\n        upper = not upper\n    end\n \
    \   return string.reverse(result)\nend", "  if string == '' then\n    return string\n\
    \  end\n  local new_string = ''\n  for _, c in ipairs(string) do\n    local old_c\
    \ = c\n    if c == string.upper(c) or c == string.lower(c) then\n      new_string\
    \ = new_string .. string.upper(c)\n    else\n      new_string = new_string ..\
    \ c\n    end\n  end\n  return new_string\nend", "    if string == nil then\n \
    \       ngx.log(ngx.ERR, \"flip_case: Invalid parameter\")\n        return\n \
    \   end", "    local result = string\n    for i = 1, #string do\n        local\
    \ c = string.byte(result, i)\n        if c >= 'a' and c <= 'z' then\n        \
    \    c = string.byte(result, i):upper()\n        end\n        if c >= 'A' and\
    \ c <= 'Z' then\n            c = string.byte(result, i):lower()\n        end\n\
    \        result = string.sub(result, 1, i-1) .. c\n    end\n    return result\n\
    end", "  local result = string\n  result:gsub(string:lower(), string:upper())\n\
    \  result:gsub(string:upper(), string:lower())\n  return result\nend", "    return\
    \ string.gsub(\n        string, '[%w]', function(w)\n            local upper =\
    \ w:upper()\n            return upper:sub(1, upper:len() - 1) .. upper:sub(len(upper))\n\
    \        end\n    )\nend", "  local new_string = string\n  for i = 1, #string\
    \ do\n    if string.sub(i, i, i) ~= tolower(string.sub(i, i, i)) then\n      new_string\
    \ = string.sub(i, 1, i) + string.sub(i, i+1, i) + string.sub(i, i+2)\n    end\n\
    \  end\n  return new_string\nend", "  local result = {}\n  for i = 1, string.n\
    \ do\n    if string.sub(i, i, i) ~= string.sub(i, i, i) then -- if the character\
    \ is not a letter.\n      result[i] = string.sub(i, i, i)\n    elseif string.sub(i,\
    \ i, i) == string.sub(i, i + 1, i) then -- if the character is a letter but at\
    \ the first position itself\n      result[i] = string.sub(i, i + 1, i)\n    elseif\
    \ string.sub(i, i, i) == string.sub(i, i - 1, i) then -- if the character is a\
    \ letter but at the last position itself\n      result[i] = string.sub(i, i -\
    \ 1, i)\n    else\n      result[i] = string.sub(i, i, i) -- otherwise return the\
    \ same character.\n    end\n  end\n  return table.concat(result)\nend", "    local\
    \ new_string = ''\n    for i = 1,#string do\n        -- Convert the character\
    \ to lower case or upper case.\n        if string.sub(i, 1, 1) == string.sub(i,\
    \ 2, 1) then\n            new_string = new_string .. string.sub(i, 1, 2):lower()\
    \ .. string.sub(i, 2, 2)\n        else\n            new_string = new_string ..\
    \ string.sub(i, 1, 2):upper() .. string.sub(i, 2, 2)\n        end\n    end\n \
    \   return new_string\nend", "    local ret\n    for i = 1, #string do\n     \
    \   local c = string.sub(i, i)\n        if toupper(c) == c then\n            ret\
    \ = string.sub(i, i + 1)\n        elseif tolower(c) == c then\n            ret\
    \ = string.sub(i, 1, i - 1) .. toupper(string.sub(i, i + 1))\n        else\n \
    \           ret = string.sub(i, 1, i - 1) .. toupper(c)\n        end\n    end\n\
    \    return ret\nend", "  local buf = {}\n  for i = 1, #string do\n    local c\
    \ = string.sub(i, i)\n    string.sub(i, i, string.upper(c))\n    string.sub(i,\
    \ i, string.lower(c))\n    table.insert(buf, string.sub(i, i))\n  end\n  return\
    \ table.concat(buf)\nend", "  string = string.gsub(string.lower(), '%l\\(.', function(letter)\n\
    \    return string.charmatch(letter, string.upper(letter))\n    end)\n  string\
    \ = string.gsub(string.upper(), '%u\\(.', function(letter)\n    return string.charmatch(letter,\
    \ string.lower(letter))\n    end)\n  return string\nend", "    local new_str =\
    \ ''\n    for i = 1, #string, 1 do\n        local char = string.sub(i, i)\n  \
    \      if char >= 'a' and char <= 'z' then\n            new_str = new_str .. string.char(string.upper(char))\n\
    \        elseif char >= 'A' and char <= 'Z' then\n            new_str = new_str\
    \ .. string.char(string.lower(char))\n        else\n            new_str = new_str\
    \ .. char\n        end\n    end\n    return new_str\nend", "  return string:gsub('%a','%A'):gsub('%A','%a')\n\
    end", '  if string == nil then return nil end', "  -- We don't care about trailing\
    \ whitespace\n  string = string.gsub('^%s+$', '') -- Strip leading whitespace\n\
    \  -- We don't care about leading whitespace\n  string = string.gsub('%s+$', '')\
    \ -- Strip trailing whitespace\n  -- Convert to lowercase and uppercase simultaneously\n\
    \  -- Use a loop instead of a gsub\n  -- This code makes a copy of the string\
    \ in a way that avoids side effects\n  -- but is still fast.\n  -- This code makes\
    \ a copy of the string in a way that avoids side effects\n  -- but is still fast.\n\
    \  -- We don't care about trailing whitespace or leading whitespace\n  -- We don't\
    \ care about internal whitespace\n  -- The conversion to uppercase is done using\
    \ Lua 5.2 string formatting\n  -- The conversion to lowercase is done using Lua\
    \ 5.2 string formatting\n  -- This code makes a copy of the string in a way that\
    \ avoids side effects\n  -- but is still fast.\n  -- This code makes a copy of\
    \ the string in a way that avoids side effects\n  -- but is still fast.\n  --\
    \ We don't care about internal whitespace\n  -- We don't care about trailing whitespace\
    \ or leading whitespace\n  -- We don't care about internal whitespace\n  -- The\
    \ conversion to uppercase is done using Lua 5.2 string formatting\n  -- The conversion\
    \ to lowercase is done using Lua 5.2 string formatting\n  -- This code makes a\
    \ copy of the string in a way that avoids side effects\n  -- but is still fast.\n\
    \  -- This code makes a copy of the string in a way that avoids side effects\n\
    \  -- but is still fast.\n  -- We don't care about internal whitespace\n  -- We\
    \ don't care about trailing whitespace or leading whitespace\n  -- We don't care\
    \ about internal whitespace\n  -- The conversion to uppercase is done using Lua\
    \ 5.2 string formatting\n  -- The conversion to lowercase is done using Lua 5.2\
    \ string formatting\n  -- This code makes a copy of the string in a way that avoids\
    \ side effects\n  -- but is still fast.\n  -- This code makes a copy of the string\
    \ in a way that avoids side effects\n  -- but is still fast.\n  -- We don't care\
    \ about internal whitespace\n  -- We don't care about trailing whitespace or leading\
    \ whitespace\n  -- We don't care about internal whitespace\n  -- The conversion\
    \ to uppercase is done using Lua 5.2 string formatting\n  -- The conversion to\
    \ lowercase is ", "  local new_string = ''\n  for c in string:gmatch'[a-z]' do\n\
    \    new_string = new_string .. string.upper(c)\n  end\n  for c in string:gmatch'[A-Z]'\
    \ do\n    new_string = new_string .. string.lower(c)\n  end\n  return new_string\n\
    end", "  -- Flip lowercase/uppercase letters to their opposite case, uppercase\
    \ to lowercase\n  -- >>> flip_case('hello')\n  -- 'HELLO'\n  return string.gsub(string.lower(string),\
    \ string.upper, string.lower)\nend", "  local result = string\n  result:gsub('%l',\
    \ function(c) return string.char(tonumber(c) + 32) end)\n  result:gsub('%U', function(c)\
    \ return string.char(tonumber(c) - 32) end)\n  return result\nend", "    return\
    \ string\n            :gsub('%a', function(c)\n                return c:lower()\
    \ == 'a' then\n                    c:upper() else\n                    c:lower()\n\
    \            end)\n            :gsub('%A', function(c)\n                return\
    \ c:lower() == 'A' then\n                    c:upper() else\n                \
    \    c:lower()\n            end)\n            :gsub('%w', function(c)\n      \
    \          return c:lower() == 'a' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%W', function(c)\n\
    \                return c:lower() == 'A' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%d', function(c)\n\
    \                return c:lower() == 'a' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%D', function(c)\n\
    \                return c:lower() == 'A' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%f', function(c)\n\
    \                return c:lower() == 'a' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%F', function(c)\n\
    \                return c:lower() == 'A' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%x', function(c)\n\
    \                return c:lower() == 'a' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%X', function(c)\n\
    \                return c:lower() == 'A' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%z', function(c)\n\
    \                return c:lower() == 'a' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%Z', function(c)\n\
    \                return c:lower() == 'A' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%c', function(c)\n\
    \                return c:lower() == 'a' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%C', function(c)\n\
    \                return c:lower() == 'A' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%b', function(c)\n\
    \                return c:lower() == 'a' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%B', function(c)\n\
    \                return c:lower() == 'A' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%o', function(c)\n\
    \                return c:lower() == 'a' then\n                    c:upper() else\n\
    \                    c:lower()\n            end)\n            :gsub('%O', function(c)\n\
    \                return c:lower() == 'A' then\n                    c:", "    local\
    \ characters = {}\n    for character in string.gmatch(string, '%a') do\n     \
    \   if character and character ~= '%a' then\n            table.insert(characters,\
    \ character == character and character or '%A')\n        end\n    end\n    return\
    \ table.concat(characters)\nend", "    local result = string.gsub\n      ( string.gsub('a',\
    \ 'A') .. string.gsub('b', 'B') .. string.gsub('c', 'C') .. string.gsub('d', 'D')\
    \ .. string.gsub('e', 'E') .. string.gsub('f', 'F') .. string.gsub('g', 'G') ..\
    \ string.gsub('h', 'H') .. string.gsub('i', 'I') .. string.gsub('j', 'J') .. string.gsub('k',\
    \ 'K') .. string.gsub('l', 'L') .. string.gsub('m', 'M') .. string.gsub('n', 'N')\
    \ .. string.gsub('o', 'O') .. string.gsub('p', 'P') .. string.gsub('q', 'Q') ..\
    \ string.gsub('r', 'R') .. string.gsub('s', 'S') .. string.gsub('t', 'T') .. string.gsub('u',\
    \ 'U') .. string.gsub('v', 'V') .. string.gsub('w', 'W') .. string.gsub('x', 'X')\
    \ .. string.gsub('y', 'Y') .. string.gsub('z', 'Z') , '%U%L'\n      , string.gsub('A',\
    \ 'A') .. string.gsub('B', 'B') .. string.gsub('C', 'C') .. string.gsub('D', 'D')\
    \ .. string.gsub('E', 'E') .. string.gsub('F', 'F') .. string.gsub('G', 'G') ..\
    \ string.gsub('H', 'H') .. string.gsub('I', 'I') .. string.gsub('J', 'J') .. string.gsub('K',\
    \ 'K') .. string.gsub('L', 'L') .. string.gsub('M', 'M') .. string.gsub('N', 'N')\
    \ .. string.gsub('O', 'O') .. string.gsub('P', 'P') .. string.gsub('Q', 'Q') ..\
    \ string.gsub('R', 'R') .. string.gsub('S', 'S') .. string.gsub('T', 'T') .. string.gsub('U',\
    \ 'U') .. string.gsub('V', 'V') .. string.gsub('W', 'W') .. string.gsub('X', 'X')\
    \ .. string.gsub('Y', 'Y') .. string.gsub('Z', 'Z')\n      )\n    return string.gsub(result,\
    \ '%U%l', '%l%U')\nend\n</code>\n<|/ a tags=lua |>\n<| c |>\nI upvoted you but\
    \ you might want to fix your formatting\n<|/ c |>\n<| c |>\n", "  local _i, _len\n\
    \  for _i, _len in ipairs(string:gmatch'((?i)%w(%w+)%w')) do\n    local _char\
    \ = string.sub(_len,1,1)\n    string.sub(_len,1,1) = string.sub(_len,2,2)\n  \
    \  string.sub(_len,2,2) = _char\n  end\n  return string\nend", "  local lower\
    \ = string.lower\n  string.lower  = string.upper\n  string.upper = lower\n  return\
    \ string\nend", "  local new_string = ''", "  return string.gsub('%a','%A'):reverse():gsub('%A','%a')\n\
    end\n</cell>\n<text>\nExercise:", "  local result = string\n  -- Uppercase all\
    \ letters but lowercase.\n  for i = 1, #string do\n    local c = string.sub(string,\
    \ i, i)\n    -- Lowercase the first letter of the string.\n    if string.byte(c)\
    \ >= 65 then\n      result = string.sub(result, 1, i - 1) ..\n              string.sub(string.lower(string.sub(string,\
    \ i, i + 1)), 1,\n                        i - 1)\n    else\n      result = string.sub(result,\
    \ 1, i - 1) ..\n              string.sub(string.upper(string.sub(string, i, i\
    \ + 1)), 1,\n                        i - 1)\n    end\n  end\n  return result\n\
    end", "   assert(type(string) == 'string')\n   local result = string.gsub('%s',\
    \ '([%w:]+)'):gsub('%%', function(c)\n      return string.char(tonumber(c)) --\
    \ Get character code from character string.\n   end)\n   return string.lower(result)\
    \ .. string.upper(result)\nend", "\tlocal new_string = ''\n\tfor i = 0, #string\
    \ do\n\t\tnew_string = new_string .. string[i]:upper()\n\tend\n\treturn new_string\n\
    end", "  return string.gsub( string.gsub( string, 'a', 'A' ), 'b', 'B' )\nend",
  "\treturn string.gsub('.', function(c) c:lower():upper() end)\nend", "    return\
    \ string.gsub(\"%l\",\n        function(letter)\n            if string.byte(letter)\
    \ then\n                letter = string.byte(letter):upper()\n            end\n\
    \            return letter\n        end\n    )\nend", "    local new_string =\
    \ ''\n    for i = 1, #string do\n        if string.sub(i, 1, 1) == 'a' then\n\
    \            new_string = new_string .. string.sub(i, 2, #string) .. string.sub(i,\
    \ 1, #string)\n        elseif string.sub(i, 1, 1) == 'A' then\n            new_string\
    \ = new_string .. string.sub(i, 2, #string) .. string.sub(i, 1, #string)\n   \
    \     elseif string.sub(i, 1, 1) == '!' then\n            new_string = new_string\
    \ .. string.sub(i, 2, #string) .. string.sub(i, 1, #string)\n        elseif string.sub(i,\
    \ 1, 1) == '!' then\n            new_string = new_string .. string.sub(i, 2, #string)\
    \ .. string.sub(i, 1, #string)\n        else\n            new_string = new_string\
    \ .. string.sub(i, 1, #string)\n        end\n    end\n    return new_string\n\
    end", "  local flipped = string.gsub:gsub(\"%l\", \"%L\"):gsub(\"%U\", \"%l\"\
    )\n  return string.gsub:gsub(\"%L\", \"%U\"):gsub(\"%l\", \"%U\")\nend", "  return\
    \ string.gsub('%l', function() return string.upper(string.sub(_G,1,1)):lower(string.sub(_G,2,2))\
    \ end) \nend", "    local new_string = string\n    for i = 1, #string do\n   \
    \     if string.sub(i, 1, 1) == 'a' then\n            new_string = string.sub(i,\
    \ 1, 1) .. string.sub(string, i, #string) .. string.sub(i, 1, 2)\n        elseif\
    \ string.sub(i, 1, 1) == 'A' then\n            new_string = string.sub(i, 1, 1)\
    \ .. string.sub(string, i, #string) .. string.sub(i, 1, 2)\n        elseif string.sub(i,\
    \ 1, 1) == 'b' then\n            new_string = string.sub(i, 1, 1) .. string.sub(string,\
    \ i, #string) .. string.sub(i, 1, 2)\n        elseif string.sub(i, 1, 1) == 'B'\
    \ then\n            new_string = string.sub(i, 1, 1) .. string.sub(string, i,\
    \ #string) .. string.sub(i, 1, 2)\n        elseif string.sub(i, 1, 1) == 'c' then\n\
    \            new_string = string.sub(i, 1, 1) .. string.sub(string, i, #string)\
    \ .. string.sub(i, 1, 2)\n        elseif string.sub(i, 1, 1) == 'C' then\n   \
    \         new_string = string.sub(i, 1, 1) .. string.sub(string, i, #string) ..\
    \ string.sub(i, 1, 2)\n        elseif string.sub(i, 1, 1) == 'd' then\n      \
    \      new_string = string.sub(i, 1, 1) .. string.sub(string, i, #string) .. string.sub(i,\
    \ 1, 2)\n        elseif string.sub(i, 1, 1) == 'D' then\n            new_string\
    \ = string.sub(i, 1, 1) .. string.sub(string, i, #string) .. string.sub(i, 1,\
    \ 2)\n        elseif string.sub(i, 1, 1) == 'e' then\n            new_string =\
    \ string.sub(i, 1, 1) .. string.sub(string, i, #string) .. string.sub(i, 1, 2)\n\
    \        elseif string.sub(i, 1, 1) == 'E' then\n            new_string = string.sub(i,\
    \ 1, 1) .. string.sub(string, i, #string) .. string.sub(i, 1, 2)\n        elseif\
    \ string.sub(i, 1, 1) == 'f' then\n            new_string = string.sub(i, 1, 1)\
    \ .. string.sub(string, i, #string) .. string.sub(i, 1, 2)\n        elseif string.sub(i,\
    \ 1, 1) == 'F' then\n            new_string = string.sub(i, 1, 1) .. string.sub(string,\
    \ i, #string) .. string.sub(i, 1, 2)\n        elseif string.sub(i, 1, 1) == 'g'\
    \ then\n            new_string = string.sub(i, 1, 1) .. string.sub(string, i,\
    \ #string) .. string.sub(i, 1, 2)\n        elseif string.sub(i, 1, 1) == 'G' then\n\
    \            new_string = string.sub(i, 1, 1) .. string.sub(string, i, #string)\
    \ .. string.sub(i, 1, 2)\n        elseif string.sub(i, 1, 1) == 'h' then\n   \
    \         new_string = string.sub(i, 1, 1) .. string.sub(string, i, ", "    local\
    \ str = \"\"\n    for i,c in string.gmatch(\"[%a]\") do\n        if c:lower()\
    \ == c:upper() then\n            str = str .. c:lower()\n        else\n      \
    \      str = str .. c:upper()\n        end\n    end\n    return str\nend", " \
    \ local result = string\n  for i = 1, #string do\n    local c = string.sub(i,\
    \ i, i)\n    if c == \"a\" then\n      c = \"A\"\n    elseif c == \"A\" then\n\
    \      c = \"a\"\n    else\n      c = c .. \"a\"\n    end\n    result = string.sub(i,\
    \ 1, i - 1) .. c\n  end\n  return result\nend", "    local new_string = string.gsub(string,\
    \ '%l*([A-Z])', function(c) return tostring(c:upper()) end)\n    new_string =\
    \ new_string .. string.gsub(new_string, '%l+([A-Z])', function(c) return tostring(c:lower())\
    \ end)\n    return new_string\nend", "  local new = ''\n  for i=1,#string,1 do\n\
    \    local char = string.sub(string,i,i)\n    char = char:upper()\n    char =\
    \ char:lower()\n    char = string.sub(char)\n    new = string.sub(new)..char\n\
    \  end\n  return new\nend", "  local s = string.gsub(string, \"[%l%c%l%c%s*]\"\
    , function(letter)\n    if letter then\n      -- Lowercase\n      letter = string.sub(letter,\
    \ 1, 1)\n    else\n      -- No letter\n      letter = nil\n    end", "  assert(type(string)\
    \ == 'string')\n  local result = string\n  for i = 1, #string do\n    if string.sub(i,\
    \ i, i) ~= 'l' then\n      result = string.sub(result, i - 1, i)\n    end\n  end\n\
    \  for i = 1, #result do\n    if string.sub(i, i, i) ~= 'L' then\n      result\
    \ = string.sub(result, i - 1, i)\n    end\n  end\n  return result\nend", "\tlocal\
    \ old_case = string.match '^%l' -- get current case\n\tstring.gsub(string, '([a-z])',\
    \ function(m) return m:upper() end) -- change case\n\tstring.gsub(string, '([A-Z])',\
    \ function(m) return m:lower() end) -- change case\n\treturn string.gsub(string,\
    \ old_case, '') -- reset case\nend", "    local output = ''\n    for i,c in string.gmatch('<%S>')\
    \ do\n        if string.sub(c, 1, 1) ~= 'i' then\n            c = string.upper(c)\n\
    \        end\n        output = output .. string.lower(c)\n    end\n    return\
    \ output\nend", "  local result = {}\n  for i, c in ipairs(string) do\n    result[i]\
    \ = string.char(tonumber(c, 16))\n  end\n  return table.concat(result, \"\")\n\
    end", "  return string.gsub(string, '([a-z])', toupper) .. string.gsub(string,\
    \ '([A-Z])', tolower)\nend", "  return string.gsub('%l', function(c) return string.char(tonumber(c)\
    \ + string.byte(c)) end):gsub('%U', function(c) return string.char(tonumber(c)\
    \ + string.byte(c)) end)\nend", "  -- Keep track of the original case\n  local\
    \ original_case = string.sub(string, 1, 1):upper() + string.sub(string, 1, 1):lower()",
  "  return string.gsub(string.lower(), '%l', string.upper)\nend", "    return string.gsub(string,\
    \ '\\L', 'U') .. string.gsub(string, '\\U', 'L')\nend", "  local chars = {}\n\
    \  for _, c in pairs(string) do\n    table.insert(chars, toupper(c))\n    table.insert(chars,\
    \ tolower(c))\n  end\n  return table.concat(chars)\nend", "    local result =\
    \ string\n    for i = 1, #string do\n        local c = string.sub(i, 1, i)\n \
    \       if c == \"a\" then\n            c = \"A\"\n        end\n        if c ==\
    \ \"A\" then\n            c = \"a\"\n        end\n        if string.sub(i, i +\
    \ 1) ~= c then\n            result = result .. c\n        end\n    end\n    return\
    \ result\nend", "  local s = string.gsub(string, '([a-z])', function(c)\n    local\
    \ o = string.char(tonumber(c) + 32)\n    return o ~= c and o or c\n  end)\n  return\
    \ string.gsub(s, '([A-Z])', function(c)\n    local o = string.char(tonumber(c)\
    \ - 32)\n    return o ~= c and o or c\n  end)\nend\nreturn {\n  replace_first,\n\
    \  replace_last,\n  replace_all,\n  replace_word,\n  strip_html,\n  strip_newlines,\n\
    \  strip_newlines_left,\n  strip_newlines_right,\n  strip_newlines_all,\n  strip_newlines_html,\n\
    \  strip_newlines_nl,\n  strip_spaces,\n  strip_newlines_leading,\n  strip_newlines_trailing,\n\
    \  strip_newlines_all_two,\n  strip_spaces,\n  strip_newlines_leading,\n  strip_newlines_trailing,\n\
    \  strip_newlines_all_two,\n  strip_spaces,\n  strip_newlines_leading,\n  strip_newlines_trailing,\n\
    \  strip_newlines_all_two,\n  flip_case,\n}\nend", "    local result = string\n\
    \    for i = 1, string.len() do\n        result:gsub('([a-z])', string.rep('\\\
    U%1', string.len(string) - i - 1))\n    end\n    return result\nend", "   return\
    \ string.gsub('^%s*([a-z])([A-Z])%s*$', function(_, lower, upper)\n      return\
    \ upper..lower\n   end)\nend", "    return string.gsub('%l', function(c) return\
    \ c.upcase .. c.downcase end)\nend", "    if string == nil or string.char == nil\
    \ then\n        return string\n    end\n    for i,c in string.gmatch\"([%w%W]+)\"\
    \n    do\n        string[i] = string.char.lower ~= c ? string.char.upper(c) :\
    \ string.char.lower(c)\n    end\n    return string\nend", "    return string.gsub(string.lower(),\
    \ '%l%U', string.upper)\nend", "    return string\n        :gsub('[a%z]', '%A')\n\
    \        :gsub('[A-Z]', '%Z')\n        :gsub('%Z([A-Z])', '%1')\n        :gsub('%1([A-Z])',\
    \ '%A')\nend", "   return string\n      :gsub(\"[%a]\", function(c) c:lower()\
    \ end)\n      :gsub(\"[%A]\", function(c) c:upper() end)\nend", '    local result
    = string', "    return string.gsub(string, \"([a-z])\", function(c)\n        return\
    \ string.char(tonumber(c) + 32)\n    end)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
